
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  0000243c  000024d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000243c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  00002572  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002572  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003da  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fff  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  000049ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016d1  00000000  00000000  00004fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  0000669c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  0000697c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d7a  00000000  00000000  00006dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007c8  00000000  00000000  00007b4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LCD_wait1>:
      c2:	77 61 69 74 69 6e 67 20 66 6f 72 20 75 73 65 72     waiting for user
	...

000000d4 <LCD_wait2>:
      d4:	74 6f 20 70 72 65 73 73 20 62 75 74 74 6f 6e 20     to press button 
	...

000000e6 <LCD_printing>:
      e6:	70 72 69 6e 74 69 6e 67 20 20 20 20 20 20 20 20     printing        
	...

000000f8 <LCD_df1>:
      f8:	64 6f 77 6e 6c 6f 61 64 69 6e 67 20 20 20 20 20     downloading     
	...

0000010a <LCD_df2>:
     10a:	66 72 61 6d 65 20 20 20 20 20 20 20 20 20 20 20     frame           
	...

0000011c <LcdCustomChar>:
     11c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     12c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     13c:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     14c:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000015c <__c.1988>:
     15c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d0 e4       	ldi	r29, 0x40	; 64
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	ec e3       	ldi	r30, 0x3C	; 60
     17c:	f4 e2       	ldi	r31, 0x24	; 36
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 3a       	cpi	r26, 0xA2	; 162
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	14 e0       	ldi	r17, 0x04	; 4
     190:	a2 ea       	ldi	r26, 0xA2	; 162
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a9 37       	cpi	r26, 0x79	; 121
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 c2 08 	call	0x1184	; 0x1184 <main>
     1a2:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	ADCSRA = 0;
     1b0:	aa e7       	ldi	r26, 0x7A	; 122
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     1ba:	87 e8       	ldi	r24, 0x87	; 135
     1bc:	8c 93       	st	X, r24
end
     1be:	08 95       	ret

000001c0 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     1c0:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
     1c2:	8f ee       	ldi	r24, 0xEF	; 239
     1c4:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     1c6:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	8b b9       	out	0x0b, r24	; 11
	
end
     1cc:	08 95       	ret

000001ce <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     1ce:	ec e7       	ldi	r30, 0x7C	; 124
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     1d4:	80 54       	subi	r24, 0x40	; 64
     1d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1d8:	ea e7       	ldi	r30, 0x7A	; 122
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
end
     1e2:	08 95       	ret

000001e4 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     1e4:	5d 98       	cbi	0x0b, 5	; 11
     1e6:	88 e8       	ldi	r24, 0x88	; 136
     1e8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <raise_pen+0xa>
	_delay_ms(500);
end
     1f8:	08 95       	ret

000001fa <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
     1fc:	80 ea       	ldi	r24, 0xA0	; 160
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	20 e9       	ldi	r18, 0x90	; 144
     202:	31 e0       	ldi	r19, 0x01	; 1
     204:	f9 01       	movw	r30, r18
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <lower_pen+0xa>
	_delay_ms(400);
end
     20e:	08 95       	ret

00000210 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     210:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     218:	5a 9a       	sbi	0x0b, 2	; 11
end
     21a:	08 95       	ret

0000021c <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     21c:	5a 98       	cbi	0x0b, 2	; 11
     21e:	8a e1       	ldi	r24, 0x1A	; 26
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     224:	5b 9a       	sbi	0x0b, 3	; 11
end
     226:	08 95       	ret

00000228 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     228:	5e 98       	cbi	0x0b, 6	; 11
     22a:	8a e1       	ldi	r24, 0x1A	; 26
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     230:	5f 9a       	sbi	0x0b, 7	; 11
end
     232:	08 95       	ret

00000234 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     234:	5f 98       	cbi	0x0b, 7	; 11
     236:	8a e1       	ldi	r24, 0x1A	; 26
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     23c:	5e 9a       	sbi	0x0b, 6	; 11
end
     23e:	08 95       	ret

00000240 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x33;
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	83 73       	andi	r24, 0x33	; 51
     244:	8b b9       	out	0x0b, r24	; 11
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	20 e9       	ldi	r18, 0x90	; 144
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <stop_all+0xe>
	_delay_ms(100);
end
     258:	08 95       	ret

0000025a <stop_x>:

void stop_x(void)
begin
	PORTD &= 0xf3;
     25a:	8b b1       	in	r24, 0x0b	; 11
     25c:	83 7f       	andi	r24, 0xF3	; 243
     25e:	8b b9       	out	0x0b, r24	; 11
end
     260:	08 95       	ret

00000262 <stop_y>:

void stop_y(void)
begin
	PORTD &= 0x3f;
     262:	8b b1       	in	r24, 0x0b	; 11
     264:	8f 73       	andi	r24, 0x3F	; 63
     266:	8b b9       	out	0x0b, r24	; 11
end
     268:	08 95       	ret

0000026a <circle>:
// draw a circle
void circle(void)
begin
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     270:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     272:	8a e1       	ldi	r24, 0x1A	; 26
     274:	f8 2e       	mov	r15, r24
     276:	8f 2d       	mov	r24, r15
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     27c:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27e:	00 e8       	ldi	r16, 0x80	; 128
     280:	1e e3       	ldi	r17, 0x3E	; 62
     282:	c8 01       	movw	r24, r16
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     288:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     28c:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     28e:	8f 2d       	mov	r24, r15
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x80;
     294:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	c8 01       	movw	r24, r16
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     29c:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29e:	8f 2d       	mov	r24, r15
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     2a4:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2a6:	c8 01       	movw	r24, r16
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     2ac:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     2b0:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	8f 2d       	mov	r24, r15
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x40;
     2b8:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	80 ee       	ldi	r24, 0xE0	; 224
     2bc:	9e e2       	ldi	r25, 0x2E	; 46
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     2c2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2c6:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c8:	8f 2d       	mov	r24, r15
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     2ce:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d0:	00 e8       	ldi	r16, 0x80	; 128
     2d2:	15 e2       	ldi	r17, 0x25	; 37
     2d4:	c8 01       	movw	r24, r16
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     2da:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     2de:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e0:	8f 2d       	mov	r24, r15
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x80;
     2e6:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e8:	c8 01       	movw	r24, r16
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2ee:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f0:	8f 2d       	mov	r24, r15
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     2f6:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	c8 01       	movw	r24, r16
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2fe:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     302:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     304:	8f 2d       	mov	r24, r15
     306:	8a 95       	dec	r24
     308:	f1 f7       	brne	.-4      	; 0x306 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x40;
     30a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30c:	80 e7       	ldi	r24, 0x70	; 112
     30e:	97 e1       	ldi	r25, 0x17	; 23
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     314:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     318:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     31a:	8f 2d       	mov	r24, r15
     31c:	8a 95       	dec	r24
     31e:	f1 f7       	brne	.-4      	; 0x31c <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     320:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     322:	00 ea       	ldi	r16, 0xA0	; 160
     324:	1f e0       	ldi	r17, 0x0F	; 15
     326:	c8 01       	movw	r24, r16
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     32c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     330:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     332:	8f 2d       	mov	r24, r15
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x80;
     338:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     340:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     342:	8f 2d       	mov	r24, r15
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     348:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34a:	c8 01       	movw	r24, r16
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     350:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     354:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     356:	fa 94       	dec	r15
     358:	f1 f7       	brne	.-4      	; 0x356 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x40;
     35a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35c:	80 ef       	ldi	r24, 0xF0	; 240
     35e:	9a e0       	ldi	r25, 0x0A	; 10
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     364:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
end
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	08 95       	ret

00000370 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     374:	20 91 ce 02 	lds	r18, 0x02CE
     378:	30 91 cf 02 	lds	r19, 0x02CF
     37c:	00 d0       	rcall	.+0      	; 0x37e <print_position+0xe>
     37e:	00 d0       	rcall	.+0      	; 0x380 <print_position+0x10>
     380:	00 d0       	rcall	.+0      	; 0x382 <print_position+0x12>
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	0c eb       	ldi	r16, 0xBC	; 188
     38a:	12 e0       	ldi	r17, 0x02	; 2
     38c:	ad b7       	in	r26, 0x3d	; 61
     38e:	be b7       	in	r27, 0x3e	; 62
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	1c 93       	st	X, r17
     394:	0e 93       	st	-X, r16
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	93 83       	std	Z+3, r25	; 0x03
     39e:	82 83       	std	Z+2, r24	; 0x02
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	24 83       	std	Z+4, r18	; 0x04
     3a4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
	LCDGotoXY(0,1);
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	06 96       	adiw	r24, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <print_position+0x52>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	c8 01       	movw	r24, r16
     3d0:	6e 2f       	mov	r22, r30
     3d2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     3d6:	20 91 98 03 	lds	r18, 0x0398
     3da:	30 91 99 03 	lds	r19, 0x0399
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <print_position+0x70>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <print_position+0x72>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <print_position+0x74>
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	ad b7       	in	r26, 0x3d	; 61
     3ec:	be b7       	in	r27, 0x3e	; 62
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	1c 93       	st	X, r17
     3f2:	0e 93       	st	-X, r16
     3f4:	11 97       	sbiw	r26, 0x01	; 1
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	93 83       	std	Z+3, r25	; 0x03
     3fc:	82 83       	std	Z+2, r24	; 0x02
     3fe:	35 83       	std	Z+5, r19	; 0x05
     400:	24 83       	std	Z+4, r18	; 0x04
     402:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
	LCDGotoXY(8,1);
     406:	8d b7       	in	r24, 0x3d	; 61
     408:	9e b7       	in	r25, 0x3e	; 62
     40a:	06 96       	adiw	r24, 0x06	; 6
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	9e bf       	out	0x3e, r25	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	8d bf       	out	0x3d, r24	; 61
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     41e:	f8 01       	movw	r30, r16
     420:	01 90       	ld	r0, Z+
     422:	00 20       	and	r0, r0
     424:	e9 f7       	brne	.-6      	; 0x420 <print_position+0xb0>
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	e0 1b       	sub	r30, r16
     42a:	f1 0b       	sbc	r31, r17
     42c:	c8 01       	movw	r24, r16
     42e:	6e 2f       	mov	r22, r30
     430:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
end
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <move_back_XY>:
end

// 1= pen down, 2= pen up
// 0= both, 1= x only, 2= y only
move_back_XY(int x_in, int y_in, int d, char motion)
begin
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	8b 01       	movw	r16, r22
     448:	f2 2e       	mov	r15, r18
	if (d==2) raise_pen();
     44a:	42 30       	cpi	r20, 0x02	; 2
     44c:	51 05       	cpc	r21, r1
     44e:	19 f4       	brne	.+6      	; 0x456 <move_back_XY+0x1c>
     450:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     454:	05 c0       	rjmp	.+10     	; 0x460 <move_back_XY+0x26>
	if (d==1) lower_pen();
     456:	41 30       	cpi	r20, 0x01	; 1
     458:	51 05       	cpc	r21, r1
     45a:	11 f4       	brne	.+4      	; 0x460 <move_back_XY+0x26>
     45c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     460:	1c 16       	cp	r1, r28
     462:	1d 06       	cpc	r1, r29
     464:	0c f0       	brlt	.+2      	; 0x468 <move_back_XY+0x2e>
     466:	6a c1       	rjmp	.+724    	; 0x73c <move_back_XY+0x302>
     468:	10 16       	cp	r1, r16
     46a:	11 06       	cpc	r1, r17
     46c:	0c f0       	brlt	.+2      	; 0x470 <move_back_XY+0x36>
     46e:	66 c1       	rjmp	.+716    	; 0x73c <move_back_XY+0x302>
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	cd 3b       	cpi	r28, 0xBD	; 189
     474:	d8 07       	cpc	r29, r24
     476:	14 f0       	brlt	.+4      	; 0x47c <move_back_XY+0x42>
     478:	cc eb       	ldi	r28, 0xBC	; 188
     47a:	d2 e0       	ldi	r29, 0x02	; 2
     47c:	b8 01       	movw	r22, r16
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0d 3b       	cpi	r16, 0xBD	; 189
     482:	18 07       	cpc	r17, r24
     484:	14 f0       	brlt	.+4      	; 0x48a <move_back_XY+0x50>
     486:	6c eb       	ldi	r22, 0xBC	; 188
     488:	72 e0       	ldi	r23, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     48a:	cf 30       	cpi	r28, 0x0F	; 15
     48c:	d1 05       	cpc	r29, r1
     48e:	14 f4       	brge	.+4      	; 0x494 <move_back_XY+0x5a>
     490:	cf e0       	ldi	r28, 0x0F	; 15
     492:	d0 e0       	ldi	r29, 0x00	; 0
		if(y_in<15) y_in = 15;
     494:	6f 30       	cpi	r22, 0x0F	; 15
     496:	71 05       	cpc	r23, r1
     498:	14 f4       	brge	.+4      	; 0x49e <move_back_XY+0x64>
     49a:	6f e0       	ldi	r22, 0x0F	; 15
     49c:	70 e0       	ldi	r23, 0x00	; 0
		if(motion == 2 || motion == 0)
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	f8 16       	cp	r15, r24
     4a2:	19 f0       	breq	.+6      	; 0x4aa <move_back_XY+0x70>
     4a4:	ff 20       	and	r15, r15
     4a6:	09 f0       	breq	.+2      	; 0x4aa <move_back_XY+0x70>
     4a8:	49 c1       	rjmp	.+658    	; 0x73c <move_back_XY+0x302>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4aa:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4ae:	81 ec       	ldi	r24, 0xC1	; 193
     4b0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     4b4:	80 91 7a 00 	lds	r24, 0x007A
     4b8:	80 64       	ori	r24, 0x40	; 64
     4ba:	80 93 7a 00 	sts	0x007A, r24
		if(y_in<15) y_in = 15;
		if(motion == 2 || motion == 0)
		begin
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     4be:	80 91 7a 00 	lds	r24, 0x007A
     4c2:	86 fd       	sbrc	r24, 6
     4c4:	fc cf       	rjmp	.-8      	; 0x4be <move_back_XY+0x84>
		y_pos = (int)ADCL;
     4c6:	80 91 78 00 	lds	r24, 0x0078
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 99 03 	sts	0x0399, r25
     4d0:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     4d4:	40 91 98 03 	lds	r20, 0x0398
     4d8:	50 91 99 03 	lds	r21, 0x0399
     4dc:	20 91 79 00 	lds	r18, 0x0079
     4e0:	92 2f       	mov	r25, r18
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	84 0f       	add	r24, r20
     4e6:	95 1f       	adc	r25, r21
     4e8:	90 93 99 03 	sts	0x0399, r25
     4ec:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     4f0:	80 91 98 03 	lds	r24, 0x0398
     4f4:	90 91 99 03 	lds	r25, 0x0399
     4f8:	68 17       	cp	r22, r24
     4fa:	79 07       	cpc	r23, r25
     4fc:	80 f1       	brcs	.+96     	; 0x55e <move_back_XY+0x124>
     4fe:	69 c0       	rjmp	.+210    	; 0x5d2 <move_back_XY+0x198>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     500:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     504:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     508:	80 91 7a 00 	lds	r24, 0x007A
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	80 93 7a 00 	sts	0x007A, r24
     512:	03 c0       	rjmp	.+6      	; 0x51a <move_back_XY+0xe0>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     514:	8b b1       	in	r24, 0x0b	; 11
     516:	8f 73       	andi	r24, 0x3F	; 63
     518:	8b b9       	out	0x0b, r24	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
     51a:	80 91 7a 00 	lds	r24, 0x007A
     51e:	86 fd       	sbrc	r24, 6
     520:	f9 cf       	rjmp	.-14     	; 0x514 <move_back_XY+0xda>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     522:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     524:	8e 2f       	mov	r24, r30
     526:	8a 95       	dec	r24
     528:	f1 f7       	brne	.-4      	; 0x526 <move_back_XY+0xec>
	_delay_us(5);
	PORTD |= 0x40;
     52a:	5e 9a       	sbi	0x0b, 6	; 11
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
				move_negative_y();
				y_pos = (int)ADCL;
     52c:	80 91 78 00 	lds	r24, 0x0078
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	90 93 99 03 	sts	0x0399, r25
     536:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     53a:	80 91 98 03 	lds	r24, 0x0398
     53e:	90 91 99 03 	lds	r25, 0x0399
     542:	20 91 79 00 	lds	r18, 0x0079
     546:	32 2f       	mov	r19, r18
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	90 93 99 03 	sts	0x0399, r25
     552:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     556:	ca 01       	movw	r24, r20
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <move_back_XY+0x11e>
     55c:	04 c0       	rjmp	.+8      	; 0x566 <move_back_XY+0x12c>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     55e:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     560:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     562:	40 ed       	ldi	r20, 0xD0	; 208
     564:	57 e0       	ldi	r21, 0x07	; 7
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     566:	80 91 98 03 	lds	r24, 0x0398
     56a:	90 91 99 03 	lds	r25, 0x0399
     56e:	68 17       	cp	r22, r24
     570:	79 07       	cpc	r23, r25
     572:	30 f2       	brcs	.-116    	; 0x500 <move_back_XY+0xc6>
     574:	39 c0       	rjmp	.+114    	; 0x5e8 <move_back_XY+0x1ae>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     576:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     57a:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     57e:	80 91 7a 00 	lds	r24, 0x007A
     582:	80 64       	ori	r24, 0x40	; 64
     584:	80 93 7a 00 	sts	0x007A, r24
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)); stop_y();
     588:	80 91 7a 00 	lds	r24, 0x007A
     58c:	86 fd       	sbrc	r24, 6
     58e:	fc cf       	rjmp	.-8      	; 0x588 <move_back_XY+0x14e>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     590:	8b b1       	in	r24, 0x0b	; 11
     592:	8f 73       	andi	r24, 0x3F	; 63
     594:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     596:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     598:	8e 2f       	mov	r24, r30
     59a:	8a 95       	dec	r24
     59c:	f1 f7       	brne	.-4      	; 0x59a <move_back_XY+0x160>
	_delay_us(5);
	PORTD |= 0x80;
     59e:	5f 9a       	sbi	0x0b, 7	; 11
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)); stop_y();
				move_positive_y();
				y_pos = (int)ADCL;
     5a0:	80 91 78 00 	lds	r24, 0x0078
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	90 93 99 03 	sts	0x0399, r25
     5aa:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     5ae:	80 91 98 03 	lds	r24, 0x0398
     5b2:	90 91 99 03 	lds	r25, 0x0399
     5b6:	20 91 79 00 	lds	r18, 0x0079
     5ba:	32 2f       	mov	r19, r18
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	90 93 99 03 	sts	0x0399, r25
     5c6:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ca:	ca 01       	movw	r24, r20
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <move_back_XY+0x192>
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <move_back_XY+0x1a0>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5d2:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5d4:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5d6:	40 ed       	ldi	r20, 0xD0	; 208
     5d8:	57 e0       	ldi	r21, 0x07	; 7
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     5da:	80 91 98 03 	lds	r24, 0x0398
     5de:	90 91 99 03 	lds	r25, 0x0399
     5e2:	86 17       	cp	r24, r22
     5e4:	97 07       	cpc	r25, r23
     5e6:	38 f2       	brcs	.-114    	; 0x576 <move_back_XY+0x13c>
				move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
				_delay_us(500);
			end
			stop_all();
     5e8:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
		end

		if(motion == 2 || motion == 0)
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	f8 16       	cp	r15, r24
     5f0:	19 f0       	breq	.+6      	; 0x5f8 <move_back_XY+0x1be>
     5f2:	ff 20       	and	r15, r15
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <move_back_XY+0x1be>
     5f6:	a2 c0       	rjmp	.+324    	; 0x73c <move_back_XY+0x302>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5f8:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5fc:	80 ec       	ldi	r24, 0xC0	; 192
     5fe:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     602:	80 91 7a 00 	lds	r24, 0x007A
     606:	80 64       	ori	r24, 0x40	; 64
     608:	80 93 7a 00 	sts	0x007A, r24

		if(motion == 2 || motion == 0)
		begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     60c:	80 91 7a 00 	lds	r24, 0x007A
     610:	86 fd       	sbrc	r24, 6
     612:	fc cf       	rjmp	.-8      	; 0x60c <move_back_XY+0x1d2>
		x_pos = (int)ADCL;
     614:	80 91 78 00 	lds	r24, 0x0078
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	90 93 cf 02 	sts	0x02CF, r25
     61e:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     622:	40 91 ce 02 	lds	r20, 0x02CE
     626:	50 91 cf 02 	lds	r21, 0x02CF
     62a:	20 91 79 00 	lds	r18, 0x0079
     62e:	92 2f       	mov	r25, r18
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	84 0f       	add	r24, r20
     634:	95 1f       	adc	r25, r21
     636:	90 93 cf 02 	sts	0x02CF, r25
     63a:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     63e:	80 91 ce 02 	lds	r24, 0x02CE
     642:	90 91 cf 02 	lds	r25, 0x02CF
     646:	c8 17       	cp	r28, r24
     648:	d9 07       	cpc	r29, r25
     64a:	80 f1       	brcs	.+96     	; 0x6ac <move_back_XY+0x272>
     64c:	6a c0       	rjmp	.+212    	; 0x722 <move_back_XY+0x2e8>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     64e:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     652:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     656:	80 91 7a 00 	lds	r24, 0x007A
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 93 7a 00 	sts	0x007A, r24
     660:	03 c0       	rjmp	.+6      	; 0x668 <move_back_XY+0x22e>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     662:	8b b1       	in	r24, 0x0b	; 11
     664:	83 7f       	andi	r24, 0xF3	; 243
     666:	8b b9       	out	0x0b, r24	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
     668:	80 91 7a 00 	lds	r24, 0x007A
     66c:	86 fd       	sbrc	r24, 6
     66e:	f9 cf       	rjmp	.-14     	; 0x662 <move_back_XY+0x228>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     670:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     672:	86 2f       	mov	r24, r22
     674:	8a 95       	dec	r24
     676:	f1 f7       	brne	.-4      	; 0x674 <move_back_XY+0x23a>
	_delay_us(5);
	PORTD |= 0x04;
     678:	5a 9a       	sbi	0x0b, 2	; 11
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
				move_negative_x();
				x_pos = (int)ADCL;
     67a:	80 91 78 00 	lds	r24, 0x0078
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	90 93 cf 02 	sts	0x02CF, r25
     684:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     688:	80 91 ce 02 	lds	r24, 0x02CE
     68c:	90 91 cf 02 	lds	r25, 0x02CF
     690:	20 91 79 00 	lds	r18, 0x0079
     694:	32 2f       	mov	r19, r18
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	82 0f       	add	r24, r18
     69a:	93 1f       	adc	r25, r19
     69c:	90 93 cf 02 	sts	0x02CF, r25
     6a0:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6a4:	ca 01       	movw	r24, r20
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <move_back_XY+0x26c>
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <move_back_XY+0x27a>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     6ac:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6ae:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6b0:	40 ed       	ldi	r20, 0xD0	; 208
     6b2:	57 e0       	ldi	r21, 0x07	; 7
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     6b4:	80 91 ce 02 	lds	r24, 0x02CE
     6b8:	90 91 cf 02 	lds	r25, 0x02CF
     6bc:	c8 17       	cp	r28, r24
     6be:	d9 07       	cpc	r29, r25
     6c0:	30 f2       	brcs	.-116    	; 0x64e <move_back_XY+0x214>
     6c2:	3a c0       	rjmp	.+116    	; 0x738 <move_back_XY+0x2fe>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     6c4:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     6c8:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     6cc:	80 91 7a 00 	lds	r24, 0x007A
     6d0:	80 64       	ori	r24, 0x40	; 64
     6d2:	80 93 7a 00 	sts	0x007A, r24
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <move_back_XY+0x2a4>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     6d8:	8b b1       	in	r24, 0x0b	; 11
     6da:	83 7f       	andi	r24, 0xF3	; 243
     6dc:	8b b9       	out	0x0b, r24	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
     6de:	80 91 7a 00 	lds	r24, 0x007A
     6e2:	86 fd       	sbrc	r24, 6
     6e4:	f9 cf       	rjmp	.-14     	; 0x6d8 <move_back_XY+0x29e>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     6e6:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6e8:	86 2f       	mov	r24, r22
     6ea:	8a 95       	dec	r24
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <move_back_XY+0x2b0>
	_delay_us(5);
	PORTD |= 0x08;
     6ee:	5b 9a       	sbi	0x0b, 3	; 11
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
				move_positive_x();
				x_pos = (int)ADCL;
     6f0:	80 91 78 00 	lds	r24, 0x0078
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 cf 02 	sts	0x02CF, r25
     6fa:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     6fe:	80 91 ce 02 	lds	r24, 0x02CE
     702:	90 91 cf 02 	lds	r25, 0x02CF
     706:	20 91 79 00 	lds	r18, 0x0079
     70a:	32 2f       	mov	r19, r18
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	82 0f       	add	r24, r18
     710:	93 1f       	adc	r25, r19
     712:	90 93 cf 02 	sts	0x02CF, r25
     716:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     71a:	ca 01       	movw	r24, r20
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <move_back_XY+0x2e2>
     720:	04 c0       	rjmp	.+8      	; 0x72a <move_back_XY+0x2f0>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     722:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     724:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     726:	40 ed       	ldi	r20, 0xD0	; 208
     728:	57 e0       	ldi	r21, 0x07	; 7
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     72a:	80 91 ce 02 	lds	r24, 0x02CE
     72e:	90 91 cf 02 	lds	r25, 0x02CF
     732:	8c 17       	cp	r24, r28
     734:	9d 07       	cpc	r25, r29
     736:	30 f2       	brcs	.-116    	; 0x6c4 <move_back_XY+0x28a>
				move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
				_delay_us(500);
			end
			stop_all();
     738:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
		end
	end
	// print where you end up
	print_position();			
     73c:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	08 95       	ret

0000074c <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d, char motion)
begin
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
     758:	8b 01       	movw	r16, r22
     75a:	f2 2e       	mov	r15, r18
	if (d==2) raise_pen();
     75c:	42 30       	cpi	r20, 0x02	; 2
     75e:	51 05       	cpc	r21, r1
     760:	19 f4       	brne	.+6      	; 0x768 <move_to_XY+0x1c>
     762:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     766:	05 c0       	rjmp	.+10     	; 0x772 <move_to_XY+0x26>
	if (d==1) lower_pen();
     768:	41 30       	cpi	r20, 0x01	; 1
     76a:	51 05       	cpc	r21, r1
     76c:	11 f4       	brne	.+4      	; 0x772 <move_to_XY+0x26>
     76e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     772:	1c 16       	cp	r1, r28
     774:	1d 06       	cpc	r1, r29
     776:	0c f0       	brlt	.+2      	; 0x77a <move_to_XY+0x2e>
     778:	6c c1       	rjmp	.+728    	; 0xa52 <move_to_XY+0x306>
     77a:	10 16       	cp	r1, r16
     77c:	11 06       	cpc	r1, r17
     77e:	0c f0       	brlt	.+2      	; 0x782 <move_to_XY+0x36>
     780:	68 c1       	rjmp	.+720    	; 0xa52 <move_to_XY+0x306>
     782:	be 01       	movw	r22, r28
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	cd 3b       	cpi	r28, 0xBD	; 189
     788:	d8 07       	cpc	r29, r24
     78a:	14 f0       	brlt	.+4      	; 0x790 <move_to_XY+0x44>
     78c:	6c eb       	ldi	r22, 0xBC	; 188
     78e:	72 e0       	ldi	r23, 0x02	; 2
     790:	e8 01       	movw	r28, r16
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	0d 3b       	cpi	r16, 0xBD	; 189
     796:	18 07       	cpc	r17, r24
     798:	14 f0       	brlt	.+4      	; 0x79e <move_to_XY+0x52>
     79a:	cc eb       	ldi	r28, 0xBC	; 188
     79c:	d2 e0       	ldi	r29, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     79e:	6f 30       	cpi	r22, 0x0F	; 15
     7a0:	71 05       	cpc	r23, r1
     7a2:	14 f4       	brge	.+4      	; 0x7a8 <move_to_XY+0x5c>
     7a4:	6f e0       	ldi	r22, 0x0F	; 15
     7a6:	70 e0       	ldi	r23, 0x00	; 0
		if(y_in<15) y_in = 15;
     7a8:	cf 30       	cpi	r28, 0x0F	; 15
     7aa:	d1 05       	cpc	r29, r1
     7ac:	14 f4       	brge	.+4      	; 0x7b2 <move_to_XY+0x66>
     7ae:	cf e0       	ldi	r28, 0x0F	; 15
     7b0:	d0 e0       	ldi	r29, 0x00	; 0
		if(motion == 2 || motion == 0)
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	f8 16       	cp	r15, r24
     7b6:	19 f0       	breq	.+6      	; 0x7be <move_to_XY+0x72>
     7b8:	ff 20       	and	r15, r15
     7ba:	09 f0       	breq	.+2      	; 0x7be <move_to_XY+0x72>
     7bc:	4a c1       	rjmp	.+660    	; 0xa52 <move_to_XY+0x306>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     7be:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     7c2:	80 ec       	ldi	r24, 0xC0	; 192
     7c4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     7c8:	80 91 7a 00 	lds	r24, 0x007A
     7cc:	80 64       	ori	r24, 0x40	; 64
     7ce:	80 93 7a 00 	sts	0x007A, r24
		if(y_in<15) y_in = 15;
		if(motion == 2 || motion == 0)
		begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     7d2:	80 91 7a 00 	lds	r24, 0x007A
     7d6:	86 fd       	sbrc	r24, 6
     7d8:	fc cf       	rjmp	.-8      	; 0x7d2 <move_to_XY+0x86>
		x_pos = (int)ADCL;
     7da:	80 91 78 00 	lds	r24, 0x0078
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 cf 02 	sts	0x02CF, r25
     7e4:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     7e8:	40 91 ce 02 	lds	r20, 0x02CE
     7ec:	50 91 cf 02 	lds	r21, 0x02CF
     7f0:	20 91 79 00 	lds	r18, 0x0079
     7f4:	92 2f       	mov	r25, r18
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	84 0f       	add	r24, r20
     7fa:	95 1f       	adc	r25, r21
     7fc:	90 93 cf 02 	sts	0x02CF, r25
     800:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     804:	80 91 ce 02 	lds	r24, 0x02CE
     808:	90 91 cf 02 	lds	r25, 0x02CF
     80c:	68 17       	cp	r22, r24
     80e:	79 07       	cpc	r23, r25
     810:	80 f1       	brcs	.+96     	; 0x872 <move_to_XY+0x126>
     812:	6a c0       	rjmp	.+212    	; 0x8e8 <move_to_XY+0x19c>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     814:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     818:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     81c:	80 91 7a 00 	lds	r24, 0x007A
     820:	80 64       	ori	r24, 0x40	; 64
     822:	80 93 7a 00 	sts	0x007A, r24
     826:	03 c0       	rjmp	.+6      	; 0x82e <move_to_XY+0xe2>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     828:	8b b1       	in	r24, 0x0b	; 11
     82a:	83 7f       	andi	r24, 0xF3	; 243
     82c:	8b b9       	out	0x0b, r24	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
     82e:	80 91 7a 00 	lds	r24, 0x007A
     832:	86 fd       	sbrc	r24, 6
     834:	f9 cf       	rjmp	.-14     	; 0x828 <move_to_XY+0xdc>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     836:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     838:	8e 2f       	mov	r24, r30
     83a:	8a 95       	dec	r24
     83c:	f1 f7       	brne	.-4      	; 0x83a <move_to_XY+0xee>
	_delay_us(5);
	PORTD |= 0x04;
     83e:	5a 9a       	sbi	0x0b, 2	; 11
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
				move_negative_x();
				x_pos = (int)ADCL;
     840:	80 91 78 00 	lds	r24, 0x0078
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 cf 02 	sts	0x02CF, r25
     84a:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     84e:	80 91 ce 02 	lds	r24, 0x02CE
     852:	90 91 cf 02 	lds	r25, 0x02CF
     856:	20 91 79 00 	lds	r18, 0x0079
     85a:	32 2f       	mov	r19, r18
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	90 93 cf 02 	sts	0x02CF, r25
     866:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     86a:	ca 01       	movw	r24, r20
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <move_to_XY+0x120>
     870:	04 c0       	rjmp	.+8      	; 0x87a <move_to_XY+0x12e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     872:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     874:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     876:	40 ed       	ldi	r20, 0xD0	; 208
     878:	57 e0       	ldi	r21, 0x07	; 7
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     87a:	80 91 ce 02 	lds	r24, 0x02CE
     87e:	90 91 cf 02 	lds	r25, 0x02CF
     882:	68 17       	cp	r22, r24
     884:	79 07       	cpc	r23, r25
     886:	30 f2       	brcs	.-116    	; 0x814 <move_to_XY+0xc8>
     888:	3a c0       	rjmp	.+116    	; 0x8fe <move_to_XY+0x1b2>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     88a:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     88e:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     892:	80 91 7a 00 	lds	r24, 0x007A
     896:	80 64       	ori	r24, 0x40	; 64
     898:	80 93 7a 00 	sts	0x007A, r24
     89c:	03 c0       	rjmp	.+6      	; 0x8a4 <move_to_XY+0x158>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     89e:	8b b1       	in	r24, 0x0b	; 11
     8a0:	83 7f       	andi	r24, 0xF3	; 243
     8a2:	8b b9       	out	0x0b, r24	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
     8a4:	80 91 7a 00 	lds	r24, 0x007A
     8a8:	86 fd       	sbrc	r24, 6
     8aa:	f9 cf       	rjmp	.-14     	; 0x89e <move_to_XY+0x152>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     8ac:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8ae:	8e 2f       	mov	r24, r30
     8b0:	8a 95       	dec	r24
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <move_to_XY+0x164>
	_delay_us(5);
	PORTD |= 0x08;
     8b4:	5b 9a       	sbi	0x0b, 3	; 11
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
				move_positive_x();
				x_pos = (int)ADCL;
     8b6:	80 91 78 00 	lds	r24, 0x0078
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 cf 02 	sts	0x02CF, r25
     8c0:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     8c4:	80 91 ce 02 	lds	r24, 0x02CE
     8c8:	90 91 cf 02 	lds	r25, 0x02CF
     8cc:	20 91 79 00 	lds	r18, 0x0079
     8d0:	32 2f       	mov	r19, r18
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	82 0f       	add	r24, r18
     8d6:	93 1f       	adc	r25, r19
     8d8:	90 93 cf 02 	sts	0x02CF, r25
     8dc:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8e0:	ca 01       	movw	r24, r20
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <move_to_XY+0x196>
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <move_to_XY+0x1a4>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     8e8:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8ea:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ec:	40 ed       	ldi	r20, 0xD0	; 208
     8ee:	57 e0       	ldi	r21, 0x07	; 7
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     8f0:	80 91 ce 02 	lds	r24, 0x02CE
     8f4:	90 91 cf 02 	lds	r25, 0x02CF
     8f8:	86 17       	cp	r24, r22
     8fa:	97 07       	cpc	r25, r23
     8fc:	30 f2       	brcs	.-116    	; 0x88a <move_to_XY+0x13e>
				move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
				_delay_us(500);
			end
			stop_all();
     8fe:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
		end
	
		// move to y position
		if(motion == 2 || motion == 0)
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	f8 16       	cp	r15, r24
     906:	19 f0       	breq	.+6      	; 0x90e <move_to_XY+0x1c2>
     908:	ff 20       	and	r15, r15
     90a:	09 f0       	breq	.+2      	; 0x90e <move_to_XY+0x1c2>
     90c:	a2 c0       	rjmp	.+324    	; 0xa52 <move_to_XY+0x306>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     90e:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     912:	81 ec       	ldi	r24, 0xC1	; 193
     914:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     918:	80 91 7a 00 	lds	r24, 0x007A
     91c:	80 64       	ori	r24, 0x40	; 64
     91e:	80 93 7a 00 	sts	0x007A, r24
	
		// move to y position
		if(motion == 2 || motion == 0)
		begin
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     922:	80 91 7a 00 	lds	r24, 0x007A
     926:	86 fd       	sbrc	r24, 6
     928:	fc cf       	rjmp	.-8      	; 0x922 <move_to_XY+0x1d6>
		y_pos = (int)ADCL;
     92a:	80 91 78 00 	lds	r24, 0x0078
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 99 03 	sts	0x0399, r25
     934:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     938:	40 91 98 03 	lds	r20, 0x0398
     93c:	50 91 99 03 	lds	r21, 0x0399
     940:	20 91 79 00 	lds	r18, 0x0079
     944:	92 2f       	mov	r25, r18
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	84 0f       	add	r24, r20
     94a:	95 1f       	adc	r25, r21
     94c:	90 93 99 03 	sts	0x0399, r25
     950:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     954:	80 91 98 03 	lds	r24, 0x0398
     958:	90 91 99 03 	lds	r25, 0x0399
     95c:	c8 17       	cp	r28, r24
     95e:	d9 07       	cpc	r29, r25
     960:	80 f1       	brcs	.+96     	; 0x9c2 <move_to_XY+0x276>
     962:	6a c0       	rjmp	.+212    	; 0xa38 <move_to_XY+0x2ec>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     964:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     968:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     96c:	80 91 7a 00 	lds	r24, 0x007A
     970:	80 64       	ori	r24, 0x40	; 64
     972:	80 93 7a 00 	sts	0x007A, r24
     976:	03 c0       	rjmp	.+6      	; 0x97e <move_to_XY+0x232>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     978:	8b b1       	in	r24, 0x0b	; 11
     97a:	8f 73       	andi	r24, 0x3F	; 63
     97c:	8b b9       	out	0x0b, r24	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
     97e:	80 91 7a 00 	lds	r24, 0x007A
     982:	86 fd       	sbrc	r24, 6
     984:	f9 cf       	rjmp	.-14     	; 0x978 <move_to_XY+0x22c>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     986:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     988:	86 2f       	mov	r24, r22
     98a:	8a 95       	dec	r24
     98c:	f1 f7       	brne	.-4      	; 0x98a <move_to_XY+0x23e>
	_delay_us(5);
	PORTD |= 0x40;
     98e:	5e 9a       	sbi	0x0b, 6	; 11
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
				move_negative_y();
				y_pos = (int)ADCL;
     990:	80 91 78 00 	lds	r24, 0x0078
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 99 03 	sts	0x0399, r25
     99a:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     99e:	80 91 98 03 	lds	r24, 0x0398
     9a2:	90 91 99 03 	lds	r25, 0x0399
     9a6:	20 91 79 00 	lds	r18, 0x0079
     9aa:	32 2f       	mov	r19, r18
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	90 93 99 03 	sts	0x0399, r25
     9b6:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9ba:	ca 01       	movw	r24, r20
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <move_to_XY+0x270>
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <move_to_XY+0x27e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     9c2:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9c4:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9c6:	40 ed       	ldi	r20, 0xD0	; 208
     9c8:	57 e0       	ldi	r21, 0x07	; 7
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     9ca:	80 91 98 03 	lds	r24, 0x0398
     9ce:	90 91 99 03 	lds	r25, 0x0399
     9d2:	c8 17       	cp	r28, r24
     9d4:	d9 07       	cpc	r29, r25
     9d6:	30 f2       	brcs	.-116    	; 0x964 <move_to_XY+0x218>
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <move_to_XY+0x302>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     9da:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     9de:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     9e2:	80 91 7a 00 	lds	r24, 0x007A
     9e6:	80 64       	ori	r24, 0x40	; 64
     9e8:	80 93 7a 00 	sts	0x007A, r24
     9ec:	03 c0       	rjmp	.+6      	; 0x9f4 <move_to_XY+0x2a8>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     9ee:	8b b1       	in	r24, 0x0b	; 11
     9f0:	8f 73       	andi	r24, 0x3F	; 63
     9f2:	8b b9       	out	0x0b, r24	; 11
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
     9f4:	80 91 7a 00 	lds	r24, 0x007A
     9f8:	86 fd       	sbrc	r24, 6
     9fa:	f9 cf       	rjmp	.-14     	; 0x9ee <move_to_XY+0x2a2>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     9fc:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9fe:	86 2f       	mov	r24, r22
     a00:	8a 95       	dec	r24
     a02:	f1 f7       	brne	.-4      	; 0xa00 <move_to_XY+0x2b4>
	_delay_us(5);
	PORTD |= 0x80;
     a04:	5f 9a       	sbi	0x0b, 7	; 11
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
				move_positive_y();
				y_pos = (int)ADCL;
     a06:	80 91 78 00 	lds	r24, 0x0078
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 99 03 	sts	0x0399, r25
     a10:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     a14:	80 91 98 03 	lds	r24, 0x0398
     a18:	90 91 99 03 	lds	r25, 0x0399
     a1c:	20 91 79 00 	lds	r18, 0x0079
     a20:	32 2f       	mov	r19, r18
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	82 0f       	add	r24, r18
     a26:	93 1f       	adc	r25, r19
     a28:	90 93 99 03 	sts	0x0399, r25
     a2c:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a30:	ca 01       	movw	r24, r20
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <move_to_XY+0x2e6>
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <move_to_XY+0x2f4>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     a38:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a3a:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a3c:	40 ed       	ldi	r20, 0xD0	; 208
     a3e:	57 e0       	ldi	r21, 0x07	; 7
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     a40:	80 91 98 03 	lds	r24, 0x0398
     a44:	90 91 99 03 	lds	r25, 0x0399
     a48:	8c 17       	cp	r24, r28
     a4a:	9d 07       	cpc	r25, r29
     a4c:	30 f2       	brcs	.-116    	; 0x9da <move_to_XY+0x28e>
				move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
				_delay_us(500);
			end
			stop_all();
     a4e:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
		end
	end
	// print where you end up
	print_position();			
     a52:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	08 95       	ret

00000a62 <move_motor>:
		LCDstring(lcd_buffer, 10);

end

void move_motor()
begin
     a62:	8f 92       	push	r8
     a64:	9f 92       	push	r9
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2,0);
     a7a:	80 91 ab 03 	lds	r24, 0x03AB
     a7e:	90 91 ac 03 	lds	r25, 0x03AC
     a82:	60 91 f4 01 	lds	r22, 0x01F4
     a86:	70 91 f5 01 	lds	r23, 0x01F5
     a8a:	42 e0       	ldi	r20, 0x02	; 2
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
     a94:	01 e0       	ldi	r16, 0x01	; 1
     a96:	c0 2e       	mov	r12, r16
     a98:	d1 2c       	mov	r13, r1
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     a9a:	f6 01       	movw	r30, r12
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	bb ea       	ldi	r27, 0xAB	; 171
     aa2:	eb 2e       	mov	r14, r27
     aa4:	b3 e0       	ldi	r27, 0x03	; 3
     aa6:	fb 2e       	mov	r15, r27
     aa8:	ee 0e       	add	r14, r30
     aaa:	ff 1e       	adc	r15, r31
     aac:	d7 01       	movw	r26, r14
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	11 97       	sbiw	r26, 0x01	; 1
     ab4:	97 fd       	sbrc	r25, 7
     ab6:	9b c0       	rjmp	.+310    	; 0xbee <move_motor+0x18c>
     ab8:	ef 01       	movw	r28, r30
     aba:	cc 50       	subi	r28, 0x0C	; 12
     abc:	de 4f       	sbci	r29, 0xFE	; 254
     abe:	88 81       	ld	r24, Y
     ac0:	99 81       	ldd	r25, Y+1	; 0x01
     ac2:	97 fd       	sbrc	r25, 7
     ac4:	94 c0       	rjmp	.+296    	; 0xbee <move_motor+0x18c>
		begin
			if(x_vect[i] == x_vect[i-1])
     ac6:	4d 91       	ld	r20, X+
     ac8:	5c 91       	ld	r21, X
     aca:	08 94       	sec
     acc:	c1 08       	sbc	r12, r1
     ace:	d1 08       	sbc	r13, r1
     ad0:	96 01       	movw	r18, r12
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	08 94       	sec
     ad8:	c1 1c       	adc	r12, r1
     ada:	d1 1c       	adc	r13, r1
     adc:	7b ea       	ldi	r23, 0xAB	; 171
     ade:	a7 2e       	mov	r10, r23
     ae0:	73 e0       	ldi	r23, 0x03	; 3
     ae2:	b7 2e       	mov	r11, r23
     ae4:	a2 0e       	add	r10, r18
     ae6:	b3 1e       	adc	r11, r19
     ae8:	d5 01       	movw	r26, r10
     aea:	8d 91       	ld	r24, X+
     aec:	9c 91       	ld	r25, X
     aee:	64 ef       	ldi	r22, 0xF4	; 244
     af0:	86 2e       	mov	r8, r22
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	96 2e       	mov	r9, r22
     af6:	82 0e       	add	r8, r18
     af8:	93 1e       	adc	r9, r19
     afa:	48 17       	cp	r20, r24
     afc:	59 07       	cpc	r21, r25
     afe:	19 f5       	brne	.+70     	; 0xb46 <move_motor+0xe4>
			begin
				move_to_XY(x_vect[i],y_vect[i],d_vect[i],2);
     b00:	d7 01       	movw	r26, r14
     b02:	8d 91       	ld	r24, X+
     b04:	9c 91       	ld	r25, X
     b06:	68 81       	ld	r22, Y
     b08:	79 81       	ldd	r23, Y+1	; 0x01
     b0a:	8f 01       	movw	r16, r30
     b0c:	00 53       	subi	r16, 0x30	; 48
     b0e:	1d 4f       	sbci	r17, 0xFD	; 253
     b10:	f8 01       	movw	r30, r16
     b12:	40 81       	ld	r20, Z
     b14:	51 81       	ldd	r21, Z+1	; 0x01
     b16:	22 e0       	ldi	r18, 0x02	; 2
     b18:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
				move_back_XY(x_vect[i-1],y_vect[i-1],1,2);
     b1c:	d5 01       	movw	r26, r10
     b1e:	8d 91       	ld	r24, X+
     b20:	9c 91       	ld	r25, X
     b22:	f4 01       	movw	r30, r8
     b24:	60 81       	ld	r22, Z
     b26:	71 81       	ldd	r23, Z+1	; 0x01
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	22 e0       	ldi	r18, 0x02	; 2
     b2e:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
				move_to_XY(x_vect[i],y_vect[i],d_vect[i],2);
     b32:	d7 01       	movw	r26, r14
     b34:	8d 91       	ld	r24, X+
     b36:	9c 91       	ld	r25, X
     b38:	68 81       	ld	r22, Y
     b3a:	79 81       	ldd	r23, Y+1	; 0x01
     b3c:	f8 01       	movw	r30, r16
     b3e:	40 81       	ld	r20, Z
     b40:	51 81       	ldd	r21, Z+1	; 0x01
     b42:	22 e0       	ldi	r18, 0x02	; 2
     b44:	4a c0       	rjmp	.+148    	; 0xbda <move_motor+0x178>
			end
			else 
			begin
				if(y_vect[i] == y_vect[i-1])
     b46:	28 81       	ld	r18, Y
     b48:	39 81       	ldd	r19, Y+1	; 0x01
     b4a:	d4 01       	movw	r26, r8
     b4c:	8d 91       	ld	r24, X+
     b4e:	9c 91       	ld	r25, X
     b50:	8f 01       	movw	r16, r30
     b52:	00 53       	subi	r16, 0x30	; 48
     b54:	1d 4f       	sbci	r17, 0xFD	; 253
     b56:	28 17       	cp	r18, r24
     b58:	39 07       	cpc	r19, r25
     b5a:	01 f5       	brne	.+64     	; 0xb9c <move_motor+0x13a>
				begin
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],1);
     b5c:	f7 01       	movw	r30, r14
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	68 81       	ld	r22, Y
     b64:	79 81       	ldd	r23, Y+1	; 0x01
     b66:	d8 01       	movw	r26, r16
     b68:	4d 91       	ld	r20, X+
     b6a:	5c 91       	ld	r21, X
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
					move_back_XY(x_vect[i-1],y_vect[i-1],1,1);
     b72:	f5 01       	movw	r30, r10
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	d4 01       	movw	r26, r8
     b7a:	6d 91       	ld	r22, X+
     b7c:	7c 91       	ld	r23, X
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],1);
     b88:	f7 01       	movw	r30, r14
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	68 81       	ld	r22, Y
     b90:	79 81       	ldd	r23, Y+1	; 0x01
     b92:	d8 01       	movw	r26, r16
     b94:	4d 91       	ld	r20, X+
     b96:	5c 91       	ld	r21, X
     b98:	21 e0       	ldi	r18, 0x01	; 1
     b9a:	1f c0       	rjmp	.+62     	; 0xbda <move_motor+0x178>
				end
				else
				begin
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],0);
     b9c:	f7 01       	movw	r30, r14
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	68 81       	ld	r22, Y
     ba4:	79 81       	ldd	r23, Y+1	; 0x01
     ba6:	d8 01       	movw	r26, r16
     ba8:	4d 91       	ld	r20, X+
     baa:	5c 91       	ld	r21, X
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
					move_back_XY(x_vect[i-1],y_vect[i-1],1,0);
     bb2:	f5 01       	movw	r30, r10
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	d4 01       	movw	r26, r8
     bba:	6d 91       	ld	r22, X+
     bbc:	7c 91       	ld	r23, X
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],0);
     bc8:	f7 01       	movw	r30, r14
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	68 81       	ld	r22, Y
     bd0:	79 81       	ldd	r23, Y+1	; 0x01
     bd2:	d8 01       	movw	r26, r16
     bd4:	4d 91       	ld	r20, X+
     bd6:	5c 91       	ld	r21, X
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2,0);
	for(i=1;i<100;i++)
     bde:	08 94       	sec
     be0:	c1 1c       	adc	r12, r1
     be2:	d1 1c       	adc	r13, r1
     be4:	b4 e6       	ldi	r27, 0x64	; 100
     be6:	cb 16       	cp	r12, r27
     be8:	d1 04       	cpc	r13, r1
     bea:	09 f0       	breq	.+2      	; 0xbee <move_motor+0x18c>
     bec:	56 cf       	rjmp	.-340    	; 0xa9a <move_motor+0x38>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2,0);
     bee:	8c eb       	ldi	r24, 0xBC	; 188
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	6c eb       	ldi	r22, 0xBC	; 188
     bf4:	72 e0       	ldi	r23, 0x02	; 2
     bf6:	42 e0       	ldi	r20, 0x02	; 2
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
end
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	08 95       	ret

00000c1a <get_frame>:
	// print where you end up
	print_position();			
end

void get_frame()
begin
     c1a:	2f 92       	push	r2
     c1c:	3f 92       	push	r3
     c1e:	4f 92       	push	r4
     c20:	5f 92       	push	r5
     c22:	6f 92       	push	r6
     c24:	7f 92       	push	r7
     c26:	8f 92       	push	r8
     c28:	9f 92       	push	r9
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	69 97       	sbiw	r28, 0x19	; 25
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
     c4e:	8e ef       	ldi	r24, 0xFE	; 254
     c50:	9f ef       	ldi	r25, 0xFF	; 255
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     c5e:	18 86       	std	Y+8, r1	; 0x08
     c60:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
     c62:	0a e9       	ldi	r16, 0x9A	; 154
     c64:	13 e0       	ldi	r17, 0x03	; 3
     c66:	c8 01       	movw	r24, r16
     c68:	60 e1       	ldi	r22, 0x10	; 16
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     c70:	60 91 75 04 	lds	r22, 0x0475
     c74:	70 91 76 04 	lds	r23, 0x0476
     c78:	c8 01       	movw	r24, r16
     c7a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <get_frame+0x66>
     c80:	00 d0       	rcall	.+0      	; 0xc82 <get_frame+0x68>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <get_frame+0x6a>
     c84:	ed b7       	in	r30, 0x3d	; 61
     c86:	fe b7       	in	r31, 0x3e	; 62
     c88:	31 96       	adiw	r30, 0x01	; 1
     c8a:	80 91 73 04 	lds	r24, 0x0473
     c8e:	90 91 74 04 	lds	r25, 0x0474
     c92:	ad b7       	in	r26, 0x3d	; 61
     c94:	be b7       	in	r27, 0x3e	; 62
     c96:	12 96       	adiw	r26, 0x02	; 2
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	11 97       	sbiw	r26, 0x01	; 1
     c9e:	8e e1       	ldi	r24, 0x1E	; 30
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	93 83       	std	Z+3, r25	; 0x03
     ca4:	82 83       	std	Z+2, r24	; 0x02
     ca6:	ce 01       	movw	r24, r28
     ca8:	07 96       	adiw	r24, 0x07	; 7
     caa:	95 83       	std	Z+5, r25	; 0x05
     cac:	84 83       	std	Z+4, r24	; 0x04
     cae:	0e 94 cd 0b 	call	0x179a	; 0x179a <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     cb2:	ed b7       	in	r30, 0x3d	; 61
     cb4:	fe b7       	in	r31, 0x3e	; 62
     cb6:	31 96       	adiw	r30, 0x01	; 1
     cb8:	ad b7       	in	r26, 0x3d	; 61
     cba:	be b7       	in	r27, 0x3e	; 62
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	1c 93       	st	X, r17
     cc0:	0e 93       	st	-X, r16
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	82 e2       	ldi	r24, 0x22	; 34
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	93 83       	std	Z+3, r25	; 0x03
     cca:	82 83       	std	Z+2, r24	; 0x02
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	95 83       	std	Z+5, r25	; 0x05
     cd2:	84 83       	std	Z+4, r24	; 0x04
     cd4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>

	LCDGotoXY(0, 0);
     cd8:	6d b7       	in	r22, 0x3d	; 61
     cda:	7e b7       	in	r23, 0x3e	; 62
     cdc:	6a 5f       	subi	r22, 0xFA	; 250
     cde:	7f 4f       	sbci	r23, 0xFF	; 255
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	7e bf       	out	0x3e, r23	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	6d bf       	out	0x3d, r22	; 61
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     cf2:	f8 01       	movw	r30, r16
     cf4:	01 90       	ld	r0, Z+
     cf6:	00 20       	and	r0, r0
     cf8:	e9 f7       	brne	.-6      	; 0xcf4 <get_frame+0xda>
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	e0 1b       	sub	r30, r16
     cfe:	f1 0b       	sbc	r31, r17
     d00:	c8 01       	movw	r24, r16
     d02:	6e 2f       	mov	r22, r30
     d04:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
     d08:	ee 24       	eor	r14, r14
     d0a:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     d0c:	79 e0       	ldi	r23, 0x09	; 9
     d0e:	a7 2e       	mov	r10, r23
     d10:	b1 2c       	mov	r11, r1
     d12:	ac 0e       	add	r10, r28
     d14:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
     d16:	48 01       	movw	r8, r16
     d18:	66 e4       	ldi	r22, 0x46	; 70
     d1a:	26 2e       	mov	r2, r22
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	36 2e       	mov	r3, r22
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     d20:	0c eb       	ldi	r16, 0xBC	; 188
     d22:	12 e0       	ldi	r17, 0x02	; 2
     d24:	55 e5       	ldi	r21, 0x55	; 85
     d26:	45 2e       	mov	r4, r21
     d28:	51 e0       	ldi	r21, 0x01	; 1
     d2a:	55 2e       	mov	r5, r21
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     d2c:	4b e4       	ldi	r20, 0x4B	; 75
     d2e:	64 2e       	mov	r6, r20
     d30:	41 e0       	ldi	r20, 0x01	; 1
     d32:	74 2e       	mov	r7, r20
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     d34:	3e ef       	ldi	r19, 0xFE	; 254
     d36:	c3 2e       	mov	r12, r19
     d38:	3f ef       	ldi	r19, 0xFF	; 255
     d3a:	d3 2e       	mov	r13, r19
     d3c:	f7 c0       	rjmp	.+494    	; 0xf2c <get_frame+0x312>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     d3e:	60 91 75 04 	lds	r22, 0x0475
     d42:	70 91 76 04 	lds	r23, 0x0476
     d46:	84 e3       	ldi	r24, 0x34	; 52
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <fputs>
	fscanf(stdin, "%s", buffer) ;
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <get_frame+0x136>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <get_frame+0x138>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <get_frame+0x13a>
     d54:	ed b7       	in	r30, 0x3d	; 61
     d56:	fe b7       	in	r31, 0x3e	; 62
     d58:	31 96       	adiw	r30, 0x01	; 1
     d5a:	80 91 73 04 	lds	r24, 0x0473
     d5e:	90 91 74 04 	lds	r25, 0x0474
     d62:	ad b7       	in	r26, 0x3d	; 61
     d64:	be b7       	in	r27, 0x3e	; 62
     d66:	12 96       	adiw	r26, 0x02	; 2
     d68:	9c 93       	st	X, r25
     d6a:	8e 93       	st	-X, r24
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	69 e3       	ldi	r22, 0x39	; 57
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	73 83       	std	Z+3, r23	; 0x03
     d74:	62 83       	std	Z+2, r22	; 0x02
     d76:	b5 82       	std	Z+5, r11	; 0x05
     d78:	a4 82       	std	Z+4, r10	; 0x04
     d7a:	0e 94 cd 0b 	call	0x179a	; 0x179a <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <get_frame+0x166>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <get_frame+0x168>
     d82:	ed b7       	in	r30, 0x3d	; 61
     d84:	fe b7       	in	r31, 0x3e	; 62
     d86:	31 96       	adiw	r30, 0x01	; 1
     d88:	ad b7       	in	r26, 0x3d	; 61
     d8a:	be b7       	in	r27, 0x3e	; 62
     d8c:	12 96       	adiw	r26, 0x02	; 2
     d8e:	bc 92       	st	X, r11
     d90:	ae 92       	st	-X, r10
     d92:	11 97       	sbiw	r26, 0x01	; 1
     d94:	6c e3       	ldi	r22, 0x3C	; 60
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	73 83       	std	Z+3, r23	; 0x03
     d9a:	62 83       	std	Z+2, r22	; 0x02
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8c 0f       	add	r24, r28
     da2:	9d 1f       	adc	r25, r29
     da4:	95 83       	std	Z+5, r25	; 0x05
     da6:	84 83       	std	Z+4, r24	; 0x04
     da8:	a3 e0       	ldi	r26, 0x03	; 3
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ac 0f       	add	r26, r28
     dae:	bd 1f       	adc	r27, r29
     db0:	b7 83       	std	Z+7, r27	; 0x07
     db2:	a6 83       	std	Z+6, r26	; 0x06
     db4:	65 e0       	ldi	r22, 0x05	; 5
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	6c 0f       	add	r22, r28
     dba:	7d 1f       	adc	r23, r29
     dbc:	71 87       	std	Z+9, r23	; 0x09
     dbe:	60 87       	std	Z+8, r22	; 0x08
     dc0:	0e 94 0f 0c 	call	0x181e	; 0x181e <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	ed b7       	in	r30, 0x3d	; 61
     dce:	fe b7       	in	r31, 0x3e	; 62
     dd0:	31 96       	adiw	r30, 0x01	; 1
     dd2:	ad b7       	in	r26, 0x3d	; 61
     dd4:	be b7       	in	r27, 0x3e	; 62
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	8c 92       	st	X, r8
     dda:	11 97       	sbiw	r26, 0x01	; 1
     ddc:	12 96       	adiw	r26, 0x02	; 2
     dde:	9c 92       	st	X, r9
     de0:	33 82       	std	Z+3, r3	; 0x03
     de2:	22 82       	std	Z+2, r2	; 0x02
     de4:	f5 82       	std	Z+5, r15	; 0x05
     de6:	e4 82       	std	Z+4, r14	; 0x04
     de8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
	LCDGotoXY(11, 0);
     dec:	6d b7       	in	r22, 0x3d	; 61
     dee:	7e b7       	in	r23, 0x3e	; 62
     df0:	6a 5f       	subi	r22, 0xFA	; 250
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	7e bf       	out	0x3e, r23	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	6d bf       	out	0x3d, r22	; 61
     dfe:	8b e0       	ldi	r24, 0x0B	; 11
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     e06:	c4 01       	movw	r24, r8
     e08:	62 e0       	ldi	r22, 0x02	; 2
     e0a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
	LCDstring(buffer,15);
     e16:	c5 01       	movw	r24, r10
     e18:	6f e0       	ldi	r22, 0x0F	; 15
     e1a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     e1e:	49 81       	ldd	r20, Y+1	; 0x01
     e20:	5a 81       	ldd	r21, Y+2	; 0x02
     e22:	7f ef       	ldi	r23, 0xFF	; 255
     e24:	4f 3f       	cpi	r20, 0xFF	; 255
     e26:	57 07       	cpc	r21, r23
     e28:	0c f4       	brge	.+2      	; 0xe2c <get_frame+0x212>
     e2a:	5a c0       	rjmp	.+180    	; 0xee0 <get_frame+0x2c6>
     e2c:	2b 81       	ldd	r18, Y+3	; 0x03
     e2e:	3c 81       	ldd	r19, Y+4	; 0x04
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	2f 3f       	cpi	r18, 0xFF	; 255
     e34:	38 07       	cpc	r19, r24
     e36:	0c f4       	brge	.+2      	; 0xe3a <get_frame+0x220>
     e38:	53 c0       	rjmp	.+166    	; 0xee0 <get_frame+0x2c6>
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	af ef       	ldi	r26, 0xFF	; 255
     e40:	8f 3f       	cpi	r24, 0xFF	; 255
     e42:	9a 07       	cpc	r25, r26
     e44:	0c f4       	brge	.+2      	; 0xe48 <get_frame+0x22e>
     e46:	4c c0       	rjmp	.+152    	; 0xee0 <get_frame+0x2c6>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     e48:	6d b7       	in	r22, 0x3d	; 61
     e4a:	7e b7       	in	r23, 0x3e	; 62
     e4c:	6a 50       	subi	r22, 0x0A	; 10
     e4e:	70 40       	sbci	r23, 0x00	; 0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	7e bf       	out	0x3e, r23	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	6d bf       	out	0x3d, r22	; 61
     e5a:	ed b7       	in	r30, 0x3d	; 61
     e5c:	fe b7       	in	r31, 0x3e	; 62
     e5e:	31 96       	adiw	r30, 0x01	; 1
     e60:	ad b7       	in	r26, 0x3d	; 61
     e62:	be b7       	in	r27, 0x3e	; 62
     e64:	12 96       	adiw	r26, 0x02	; 2
     e66:	1c 93       	st	X, r17
     e68:	0e 93       	st	-X, r16
     e6a:	11 97       	sbiw	r26, 0x01	; 1
     e6c:	73 82       	std	Z+3, r7	; 0x03
     e6e:	62 82       	std	Z+2, r6	; 0x02
     e70:	55 83       	std	Z+5, r21	; 0x05
     e72:	44 83       	std	Z+4, r20	; 0x04
     e74:	37 83       	std	Z+7, r19	; 0x07
     e76:	26 83       	std	Z+6, r18	; 0x06
     e78:	91 87       	std	Z+9, r25	; 0x09
     e7a:	80 87       	std	Z+8, r24	; 0x08
     e7c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
		LCDGotoXY(0, 0);
     e80:	6d b7       	in	r22, 0x3d	; 61
     e82:	7e b7       	in	r23, 0x3e	; 62
     e84:	66 5f       	subi	r22, 0xF6	; 246
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	7e bf       	out	0x3e, r23	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	6d bf       	out	0x3d, r22	; 61
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     e9a:	c8 01       	movw	r24, r16
     e9c:	6a e0       	ldi	r22, 0x0A	; 10
     e9e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
		x_vect[i] = x;
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	d7 01       	movw	r26, r14
     ea8:	aa 0f       	add	r26, r26
     eaa:	bb 1f       	adc	r27, r27
     eac:	fd 01       	movw	r30, r26
     eae:	e5 55       	subi	r30, 0x55	; 85
     eb0:	fc 4f       	sbci	r31, 0xFC	; 252
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
		y_vect[i] = y;
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	fd 01       	movw	r30, r26
     ebc:	ec 50       	subi	r30, 0x0C	; 12
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24
		d_vect[i] = d;
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	a0 53       	subi	r26, 0x30	; 48
     eca:	bd 4f       	sbci	r27, 0xFD	; 253
     ecc:	11 96       	adiw	r26, 0x01	; 1
     ece:	9c 93       	st	X, r25
     ed0:	8e 93       	st	-X, r24
		x=-2;
     ed2:	da 82       	std	Y+2, r13	; 0x02
     ed4:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     ed6:	dc 82       	std	Y+4, r13	; 0x04
     ed8:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     eda:	de 82       	std	Y+6, r13	; 0x06
     edc:	cd 82       	std	Y+5, r12	; 0x05
     ede:	23 c0       	rjmp	.+70     	; 0xf26 <get_frame+0x30c>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <get_frame+0x2c8>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <get_frame+0x2ca>
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <get_frame+0x2cc>
     ee6:	ed b7       	in	r30, 0x3d	; 61
     ee8:	fe b7       	in	r31, 0x3e	; 62
     eea:	31 96       	adiw	r30, 0x01	; 1
     eec:	ad b7       	in	r26, 0x3d	; 61
     eee:	be b7       	in	r27, 0x3e	; 62
     ef0:	12 96       	adiw	r26, 0x02	; 2
     ef2:	1c 93       	st	X, r17
     ef4:	0e 93       	st	-X, r16
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	53 82       	std	Z+3, r5	; 0x03
     efa:	42 82       	std	Z+2, r4	; 0x02
     efc:	f5 82       	std	Z+5, r15	; 0x05
     efe:	e4 82       	std	Z+4, r14	; 0x04
     f00:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
		LCDGotoXY(0, 0);
     f04:	6d b7       	in	r22, 0x3d	; 61
     f06:	7e b7       	in	r23, 0x3e	; 62
     f08:	6a 5f       	subi	r22, 0xFA	; 250
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	7e bf       	out	0x3e, r23	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	6d bf       	out	0x3d, r22	; 61
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     f1e:	c8 01       	movw	r24, r16
     f20:	6a e0       	ldi	r22, 0x0A	; 10
     f22:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     f26:	08 94       	sec
     f28:	e1 1c       	adc	r14, r1
     f2a:	f1 1c       	adc	r15, r1
     f2c:	8f 81       	ldd	r24, Y+7	; 0x07
     f2e:	98 85       	ldd	r25, Y+8	; 0x08
     f30:	e8 16       	cp	r14, r24
     f32:	f9 06       	cpc	r15, r25
     f34:	08 f4       	brcc	.+2      	; 0xf38 <get_frame+0x31e>
     f36:	03 cf       	rjmp	.-506    	; 0xd3e <get_frame+0x124>
		LCDstring(lcd_buffer, 10);
	}
	//_delay_ms(1000);
  end
	//	_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     f38:	00 d0       	rcall	.+0      	; 0xf3a <get_frame+0x320>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <get_frame+0x322>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <get_frame+0x324>
     f3e:	ed b7       	in	r30, 0x3d	; 61
     f40:	fe b7       	in	r31, 0x3e	; 62
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	0c eb       	ldi	r16, 0xBC	; 188
     f46:	12 e0       	ldi	r17, 0x02	; 2
     f48:	ad b7       	in	r26, 0x3d	; 61
     f4a:	be b7       	in	r27, 0x3e	; 62
     f4c:	12 96       	adiw	r26, 0x02	; 2
     f4e:	1c 93       	st	X, r17
     f50:	0e 93       	st	-X, r16
     f52:	11 97       	sbiw	r26, 0x01	; 1
     f54:	81 e6       	ldi	r24, 0x61	; 97
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	93 83       	std	Z+3, r25	; 0x03
     f5a:	82 83       	std	Z+2, r24	; 0x02
     f5c:	f5 82       	std	Z+5, r15	; 0x05
     f5e:	e4 82       	std	Z+4, r14	; 0x04
     f60:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
		LCDGotoXY(0, 0);
     f64:	6d b7       	in	r22, 0x3d	; 61
     f66:	7e b7       	in	r23, 0x3e	; 62
     f68:	6a 5f       	subi	r22, 0xFA	; 250
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	7e bf       	out	0x3e, r23	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	6d bf       	out	0x3d, r22	; 61
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     f7e:	c8 01       	movw	r24, r16
     f80:	6a e0       	ldi	r22, 0x0A	; 10
     f82:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     f86:	20 91 ab 03 	lds	r18, 0x03AB
     f8a:	30 91 ac 03 	lds	r19, 0x03AC
     f8e:	40 91 ad 03 	lds	r20, 0x03AD
     f92:	50 91 ae 03 	lds	r21, 0x03AE
     f96:	60 91 af 03 	lds	r22, 0x03AF
     f9a:	70 91 b0 03 	lds	r23, 0x03B0
     f9e:	e0 90 b1 03 	lds	r14, 0x03B1
     fa2:	f0 90 b2 03 	lds	r15, 0x03B2
     fa6:	8d b7       	in	r24, 0x3d	; 61
     fa8:	9e b7       	in	r25, 0x3e	; 62
     faa:	0c 97       	sbiw	r24, 0x0c	; 12
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	9e bf       	out	0x3e, r25	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	8d bf       	out	0x3d, r24	; 61
     fb6:	ed b7       	in	r30, 0x3d	; 61
     fb8:	fe b7       	in	r31, 0x3e	; 62
     fba:	31 96       	adiw	r30, 0x01	; 1
     fbc:	ad b7       	in	r26, 0x3d	; 61
     fbe:	be b7       	in	r27, 0x3e	; 62
     fc0:	12 96       	adiw	r26, 0x02	; 2
     fc2:	1c 93       	st	X, r17
     fc4:	0e 93       	st	-X, r16
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	8d e6       	ldi	r24, 0x6D	; 109
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	93 83       	std	Z+3, r25	; 0x03
     fce:	82 83       	std	Z+2, r24	; 0x02
     fd0:	35 83       	std	Z+5, r19	; 0x05
     fd2:	24 83       	std	Z+4, r18	; 0x04
     fd4:	57 83       	std	Z+7, r21	; 0x07
     fd6:	46 83       	std	Z+6, r20	; 0x06
     fd8:	71 87       	std	Z+9, r23	; 0x09
     fda:	60 87       	std	Z+8, r22	; 0x08
     fdc:	f3 86       	std	Z+11, r15	; 0x0b
     fde:	e2 86       	std	Z+10, r14	; 0x0a
     fe0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
		LCDGotoXY(0, 0);
     fe4:	6d b7       	in	r22, 0x3d	; 61
     fe6:	7e b7       	in	r23, 0x3e	; 62
     fe8:	64 5f       	subi	r22, 0xF4	; 244
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	7e bf       	out	0x3e, r23	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	6d bf       	out	0x3d, r22	; 61
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     ffe:	c8 01       	movw	r24, r16
    1000:	6a e0       	ldi	r22, 0x0A	; 10
    1002:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
    1006:	20 91 f4 01 	lds	r18, 0x01F4
    100a:	30 91 f5 01 	lds	r19, 0x01F5
    100e:	40 91 f6 01 	lds	r20, 0x01F6
    1012:	50 91 f7 01 	lds	r21, 0x01F7
    1016:	60 91 f8 01 	lds	r22, 0x01F8
    101a:	70 91 f9 01 	lds	r23, 0x01F9
    101e:	e0 90 fa 01 	lds	r14, 0x01FA
    1022:	f0 90 fb 01 	lds	r15, 0x01FB
    1026:	8d b7       	in	r24, 0x3d	; 61
    1028:	9e b7       	in	r25, 0x3e	; 62
    102a:	0c 97       	sbiw	r24, 0x0c	; 12
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	9e bf       	out	0x3e, r25	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	8d bf       	out	0x3d, r24	; 61
    1036:	ed b7       	in	r30, 0x3d	; 61
    1038:	fe b7       	in	r31, 0x3e	; 62
    103a:	31 96       	adiw	r30, 0x01	; 1
    103c:	ad b7       	in	r26, 0x3d	; 61
    103e:	be b7       	in	r27, 0x3e	; 62
    1040:	12 96       	adiw	r26, 0x02	; 2
    1042:	1c 93       	st	X, r17
    1044:	0e 93       	st	-X, r16
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	87 e7       	ldi	r24, 0x77	; 119
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	93 83       	std	Z+3, r25	; 0x03
    104e:	82 83       	std	Z+2, r24	; 0x02
    1050:	35 83       	std	Z+5, r19	; 0x05
    1052:	24 83       	std	Z+4, r18	; 0x04
    1054:	57 83       	std	Z+7, r21	; 0x07
    1056:	46 83       	std	Z+6, r20	; 0x06
    1058:	71 87       	std	Z+9, r23	; 0x09
    105a:	60 87       	std	Z+8, r22	; 0x08
    105c:	f3 86       	std	Z+11, r15	; 0x0b
    105e:	e2 86       	std	Z+10, r14	; 0x0a
    1060:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
		LCDGotoXY(0, 1);
    1064:	6d b7       	in	r22, 0x3d	; 61
    1066:	7e b7       	in	r23, 0x3e	; 62
    1068:	64 5f       	subi	r22, 0xF4	; 244
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	7e bf       	out	0x3e, r23	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	6d bf       	out	0x3d, r22	; 61
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    107e:	c8 01       	movw	r24, r16
    1080:	6a e0       	ldi	r22, 0x0A	; 10
    1082:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
    1086:	20 91 d0 02 	lds	r18, 0x02D0
    108a:	30 91 d1 02 	lds	r19, 0x02D1
    108e:	40 91 d2 02 	lds	r20, 0x02D2
    1092:	50 91 d3 02 	lds	r21, 0x02D3
    1096:	60 91 d4 02 	lds	r22, 0x02D4
    109a:	70 91 d5 02 	lds	r23, 0x02D5
    109e:	e0 90 d6 02 	lds	r14, 0x02D6
    10a2:	f0 90 d7 02 	lds	r15, 0x02D7
    10a6:	8d b7       	in	r24, 0x3d	; 61
    10a8:	9e b7       	in	r25, 0x3e	; 62
    10aa:	0c 97       	sbiw	r24, 0x0c	; 12
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	9e bf       	out	0x3e, r25	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	8d bf       	out	0x3d, r24	; 61
    10b6:	ed b7       	in	r30, 0x3d	; 61
    10b8:	fe b7       	in	r31, 0x3e	; 62
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	ad b7       	in	r26, 0x3d	; 61
    10be:	be b7       	in	r27, 0x3e	; 62
    10c0:	12 96       	adiw	r26, 0x02	; 2
    10c2:	1c 93       	st	X, r17
    10c4:	0e 93       	st	-X, r16
    10c6:	11 97       	sbiw	r26, 0x01	; 1
    10c8:	81 e8       	ldi	r24, 0x81	; 129
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	93 83       	std	Z+3, r25	; 0x03
    10ce:	82 83       	std	Z+2, r24	; 0x02
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	24 83       	std	Z+4, r18	; 0x04
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	46 83       	std	Z+6, r20	; 0x06
    10d8:	71 87       	std	Z+9, r23	; 0x09
    10da:	60 87       	std	Z+8, r22	; 0x08
    10dc:	f3 86       	std	Z+11, r15	; 0x0b
    10de:	e2 86       	std	Z+10, r14	; 0x0a
    10e0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <sprintf>
		LCDGotoXY(10, 0);
    10e4:	6d b7       	in	r22, 0x3d	; 61
    10e6:	7e b7       	in	r23, 0x3e	; 62
    10e8:	64 5f       	subi	r22, 0xF4	; 244
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	7e bf       	out	0x3e, r23	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	6d bf       	out	0x3d, r22	; 61
    10f6:	8a e0       	ldi	r24, 0x0A	; 10
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    10fe:	c8 01       	movw	r24, r16
    1100:	6a e0       	ldi	r22, 0x0A	; 10
    1102:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCDstring>

end
    1106:	69 96       	adiw	r28, 0x19	; 25
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	af 90       	pop	r10
    1126:	9f 90       	pop	r9
    1128:	8f 90       	pop	r8
    112a:	7f 90       	pop	r7
    112c:	6f 90       	pop	r6
    112e:	5f 90       	pop	r5
    1130:	4f 90       	pop	r4
    1132:	3f 90       	pop	r3
    1134:	2f 90       	pop	r2
    1136:	08 95       	ret

00001138 <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    1138:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCDinit>
	LCDcursorOFF();
    113c:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCDcursorOFF>
	LCDclr();	//clear the display
    1140:	0e 94 51 09 	call	0x12a2	; 0x12a2 <LCDclr>
	LCDGotoXY(0,0);
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    114c:	8c e8       	ldi	r24, 0x8C	; 140
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CopyStringtoLCD>
	LCD_char_count = 0;
    1158:	10 92 cd 02 	sts	0x02CD, r1
end
    115c:	08 95       	ret

0000115e <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
    115e:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
    1160:	8f ee       	ldi	r24, 0xEF	; 239
    1162:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
    1164:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
    1166:	80 e1       	ldi	r24, 0x10	; 16
    1168:	8b b9       	out	0x0b, r24	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
    116a:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
    116e:	ec e7       	ldi	r30, 0x7C	; 124
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	10 82       	st	Z, r1
	ADCSRA = 0;
    1174:	aa e7       	ldi	r26, 0x7A	; 122
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
    117a:	80 e4       	ldi	r24, 0x40	; 64
    117c:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
    117e:	87 e8       	ldi	r24, 0x87	; 135
    1180:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
    1182:	08 95       	ret

00001184 <main>:
	end
	move_to_XY(700,700,2,0);
end

// --- Main Program ----------------------------------
int main(void) {
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
  
  initialize();
    1188:	0e 94 af 08 	call	0x115e	; 0x115e <initialize>
  stop_all();
    118c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	LCD_init();
    1190:	0e 94 9c 08 	call	0x1138	; 0x1138 <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
    1194:	0e 94 88 0a 	call	0x1510	; 0x1510 <uart_init>
  stdout = stdin = stderr = &uart_str;
    1198:	8b e8       	ldi	r24, 0x8B	; 139
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	90 93 78 04 	sts	0x0478, r25
    11a0:	80 93 77 04 	sts	0x0477, r24
    11a4:	90 93 74 04 	sts	0x0474, r25
    11a8:	80 93 73 04 	sts	0x0473, r24
    11ac:	90 93 76 04 	sts	0x0476, r25
    11b0:	80 93 75 04 	sts	0x0475, r24
    11b4:	c0 e9       	ldi	r28, 0x90	; 144
    11b6:	d1 e0       	ldi	r29, 0x01	; 1
//while(1) move_positive_y();
  while(1)
  begin
  	move_to_XY(700,700,2,0);
    11b8:	8c eb       	ldi	r24, 0xBC	; 188
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	6c eb       	ldi	r22, 0xBC	; 188
    11be:	72 e0       	ldi	r23, 0x02	; 2
    11c0:	42 e0       	ldi	r20, 0x02	; 2
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	0e 94 a6 03 	call	0x74c	; 0x74c <move_to_XY>
	CopyStringtoLCD(LCD_wait1, 0, 0);
    11ca:	82 ec       	ldi	r24, 0xC2	; 194
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CopyStringtoLCD>
	CopyStringtoLCD(LCD_wait2, 0, 1);
    11d6:	84 ed       	ldi	r24, 0xD4	; 212
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CopyStringtoLCD>
  	while(PIND & 0x10);
    11e2:	4c 99       	sbic	0x09, 4	; 9
    11e4:	fe cf       	rjmp	.-4      	; 0x11e2 <main+0x5e>
    11e6:	8c e2       	ldi	r24, 0x2C	; 44
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	fe 01       	movw	r30, r28
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f2:	d9 f7       	brne	.-10     	; 0x11ea <main+0x66>
	_delay_ms(30);
	if(!(PIND&0x10))
    11f4:	4c 99       	sbic	0x09, 4	; 9
    11f6:	e0 cf       	rjmp	.-64     	; 0x11b8 <main+0x34>
	begin
		CopyStringtoLCD(LCD_df1, 0, 0);
    11f8:	88 ef       	ldi	r24, 0xF8	; 248
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CopyStringtoLCD>
		CopyStringtoLCD(LCD_df2, 0, 1);
    1204:	8a e0       	ldi	r24, 0x0A	; 10
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CopyStringtoLCD>
	  	get_frame();
    1210:	0e 94 0d 06 	call	0xc1a	; 0xc1a <get_frame>
		CopyStringtoLCD(LCD_printing, 0, 0);
    1214:	86 ee       	ldi	r24, 0xE6	; 230
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <CopyStringtoLCD>
		move_motor();
    1220:	0e 94 31 05 	call	0xa62	; 0xa62 <move_motor>
    1224:	c9 cf       	rjmp	.-110    	; 0x11b8 <main+0x34>

00001226 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    1226:	28 2f       	mov	r18, r24
    1228:	20 7f       	andi	r18, 0xF0	; 240
    122a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    122c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    122e:	42 9a       	sbi	0x08, 2	; 8
    1230:	20 e4       	ldi	r18, 0x40	; 64
    1232:	3f e1       	ldi	r19, 0x1F	; 31
    1234:	f9 01       	movw	r30, r18
    1236:	31 97       	sbiw	r30, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    123a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    123c:	40 98       	cbi	0x08, 0	; 8
    123e:	f9 01       	movw	r30, r18
    1240:	31 97       	sbiw	r30, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	44 e0       	ldi	r20, 0x04	; 4
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	4a 95       	dec	r20
    124e:	e1 f7       	brne	.-8      	; 0x1248 <LCDsendChar+0x22>
    1250:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1252:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1254:	42 9a       	sbi	0x08, 2	; 8
    1256:	c9 01       	movw	r24, r18
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    125c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    125e:	40 98       	cbi	0x08, 0	; 8
    1260:	c9 01       	movw	r24, r18
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1266:	08 95       	ret

00001268 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1268:	28 2f       	mov	r18, r24
    126a:	20 7f       	andi	r18, 0xF0	; 240
    126c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    126e:	42 9a       	sbi	0x08, 2	; 8
    1270:	20 e4       	ldi	r18, 0x40	; 64
    1272:	3f e1       	ldi	r19, 0x1F	; 31
    1274:	f9 01       	movw	r30, r18
    1276:	31 97       	sbiw	r30, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    127a:	42 98       	cbi	0x08, 2	; 8
    127c:	f9 01       	movw	r30, r18
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	54 e0       	ldi	r21, 0x04	; 4
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	5a 95       	dec	r21
    128c:	e1 f7       	brne	.-8      	; 0x1286 <LCDsendCommand+0x1e>
    128e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1290:	42 9a       	sbi	0x08, 2	; 8
    1292:	c9 01       	movw	r24, r18
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1298:	42 98       	cbi	0x08, 2	; 8
    129a:	c9 01       	movw	r24, r18
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    12a0:	08 95       	ret

000012a2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    12a8:	08 95       	ret

000012aa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    12b0:	08 95       	ret

000012b2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	49 f0       	breq	.+18     	; 0x12d2 <LCDstring+0x20>
    12c0:	ec 01       	movw	r28, r24
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    12c6:	89 91       	ld	r24, Y+
    12c8:	0e 94 13 09 	call	0x1226	; 0x1226 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    12cc:	1f 5f       	subi	r17, 0xFF	; 255
    12ce:	10 17       	cp	r17, r16
    12d0:	d0 f3       	brcs	.-12     	; 0x12c6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	08 95       	ret

000012dc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    12dc:	62 30       	cpi	r22, 0x02	; 2
    12de:	31 f0       	breq	.+12     	; 0x12ec <LCDGotoXY+0x10>
    12e0:	63 30       	cpi	r22, 0x03	; 3
    12e2:	31 f0       	breq	.+12     	; 0x12f0 <LCDGotoXY+0x14>
    12e4:	61 30       	cpi	r22, 0x01	; 1
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    12e8:	80 5c       	subi	r24, 0xC0	; 192
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    12ec:	8c 5e       	subi	r24, 0xEC	; 236
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    12f0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
	
}
    12f8:	08 95       	ret

000012fa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ec 01       	movw	r28, r24
    1302:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1304:	64 2f       	mov	r22, r20
    1306:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCDGotoXY>
    130a:	10 e0       	ldi	r17, 0x00	; 0
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    130e:	0e 94 13 09 	call	0x1226	; 0x1226 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1312:	1f 5f       	subi	r17, 0xFF	; 255
    1314:	fe 01       	movw	r30, r28
    1316:	e1 0f       	add	r30, r17
    1318:	f1 1d       	adc	r31, r1
    131a:	84 91       	lpm	r24, Z+
    131c:	88 23       	and	r24, r24
    131e:	b9 f7       	brne	.-18     	; 0x130e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	08 95       	ret

00001328 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	7c 01       	movw	r14, r24
    1336:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1338:	11 0f       	add	r17, r17
    133a:	11 0f       	add	r17, r17
    133c:	11 0f       	add	r17, r17
    133e:	10 64       	ori	r17, 0x40	; 64
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1344:	f7 01       	movw	r30, r14
    1346:	ec 0f       	add	r30, r28
    1348:	fd 1f       	adc	r31, r29
    134a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    134c:	81 2f       	mov	r24, r17
    134e:	8c 0f       	add	r24, r28
    1350:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
		LCDsendChar(pcc);
    1354:	80 2f       	mov	r24, r16
    1356:	0e 94 13 09 	call	0x1226	; 0x1226 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    135a:	21 96       	adiw	r28, 0x01	; 1
    135c:	c8 30       	cpi	r28, 0x08	; 8
    135e:	d1 05       	cpc	r29, r1
    1360:	89 f7       	brne	.-30     	; 0x1344 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	08 95       	ret

00001370 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	80 e6       	ldi	r24, 0x60	; 96
    1378:	9a ee       	ldi	r25, 0xEA	; 234
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    137e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1380:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1382:	87 b1       	in	r24, 0x07	; 7
    1384:	80 6f       	ori	r24, 0xF0	; 240
    1386:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1388:	87 b1       	in	r24, 0x07	; 7
    138a:	87 60       	ori	r24, 0x07	; 7
    138c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    138e:	80 e3       	ldi	r24, 0x30	; 48
    1390:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1392:	42 9a       	sbi	0x08, 2	; 8
    1394:	20 e4       	ldi	r18, 0x40	; 64
    1396:	3f e1       	ldi	r19, 0x1F	; 31
    1398:	f9 01       	movw	r30, r18
    139a:	31 97       	sbiw	r30, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    139e:	42 98       	cbi	0x08, 2	; 8
    13a0:	f9 01       	movw	r30, r18
    13a2:	31 97       	sbiw	r30, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    13a6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    13a8:	42 9a       	sbi	0x08, 2	; 8
    13aa:	c9 01       	movw	r24, r18
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13b0:	42 98       	cbi	0x08, 2	; 8
    13b2:	c9 01       	movw	r24, r18
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    13bc:	42 9a       	sbi	0x08, 2	; 8
    13be:	c9 01       	movw	r24, r18
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13c4:	42 98       	cbi	0x08, 2	; 8
    13c6:	c9 01       	movw	r24, r18
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    13cc:	88 e2       	ldi	r24, 0x28	; 40
    13ce:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    13d2:	8c e0       	ldi	r24, 0x0C	; 12
    13d4:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
    13d8:	cc e1       	ldi	r28, 0x1C	; 28
    13da:	d1 e0       	ldi	r29, 0x01	; 1
    13dc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    13de:	16 2f       	mov	r17, r22
    13e0:	1f 5f       	subi	r17, 0xFF	; 255
    13e2:	ce 01       	movw	r24, r28
    13e4:	0e 94 94 09 	call	0x1328	; 0x1328 <LCDdefinechar>
    13e8:	28 96       	adiw	r28, 0x08	; 8
    13ea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    13ec:	18 30       	cpi	r17, 0x08	; 8
    13ee:	b9 f7       	brne	.-18     	; 0x13de <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	08 95       	ret

000013f8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	08 2f       	mov	r16, r24
    13fe:	10 e0       	ldi	r17, 0x00	; 0
    1400:	04 c0       	rjmp	.+8      	; 0x140a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1402:	8e e1       	ldi	r24, 0x1E	; 30
    1404:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1408:	1f 5f       	subi	r17, 0xFF	; 255
    140a:	10 17       	cp	r17, r16
    140c:	d0 f3       	brcs	.-12     	; 0x1402 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	08 95       	ret

00001414 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	08 2f       	mov	r16, r24
    141a:	10 e0       	ldi	r17, 0x00	; 0
    141c:	04 c0       	rjmp	.+8      	; 0x1426 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    141e:	88 e1       	ldi	r24, 0x18	; 24
    1420:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1424:	1f 5f       	subi	r17, 0xFF	; 255
    1426:	10 17       	cp	r17, r16
    1428:	d0 f3       	brcs	.-12     	; 0x141e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	08 95       	ret

00001430 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1430:	8e e0       	ldi	r24, 0x0E	; 14
    1432:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    1436:	08 95       	ret

00001438 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1438:	8f e0       	ldi	r24, 0x0F	; 15
    143a:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    143e:	08 95       	ret

00001440 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1440:	8c e0       	ldi	r24, 0x0C	; 12
    1442:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    1446:	08 95       	ret

00001448 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    144e:	08 95       	ret

00001450 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1450:	8c e0       	ldi	r24, 0x0C	; 12
    1452:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
}
    1456:	08 95       	ret

00001458 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	08 2f       	mov	r16, r24
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	04 c0       	rjmp	.+8      	; 0x146a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1462:	80 e1       	ldi	r24, 0x10	; 16
    1464:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1468:	1f 5f       	subi	r17, 0xFF	; 255
    146a:	10 17       	cp	r17, r16
    146c:	d0 f3       	brcs	.-12     	; 0x1462 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	08 2f       	mov	r16, r24
    147a:	10 e0       	ldi	r17, 0x00	; 0
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    147e:	84 e1       	ldi	r24, 0x14	; 20
    1480:	0e 94 34 09 	call	0x1268	; 0x1268 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1484:	1f 5f       	subi	r17, 0xFF	; 255
    1486:	10 17       	cp	r17, r16
    1488:	d0 f3       	brcs	.-12     	; 0x147e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    14a0:	96 e0       	ldi	r25, 0x06	; 6
    14a2:	89 9f       	mul	r24, r25
    14a4:	c0 01       	movw	r24, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	24 2f       	mov	r18, r20
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	ac 01       	movw	r20, r24
    14ae:	42 9f       	mul	r20, r18
    14b0:	c0 01       	movw	r24, r0
    14b2:	43 9f       	mul	r20, r19
    14b4:	90 0d       	add	r25, r0
    14b6:	52 9f       	mul	r21, r18
    14b8:	90 0d       	add	r25, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodhi4>
    14c2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    14c4:	cb 01       	movw	r24, r22
    14c6:	66 e0       	ldi	r22, 0x06	; 6
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__udivmodhi4>
    14ce:	e8 2e       	mov	r14, r24
    14d0:	ff 24       	eor	r15, r15
    14d2:	00 e0       	ldi	r16, 0x00	; 0
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	12 c0       	rjmp	.+36     	; 0x14fc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    14d8:	c8 01       	movw	r24, r16
    14da:	05 96       	adiw	r24, 0x05	; 5
    14dc:	c8 17       	cp	r28, r24
    14de:	d9 07       	cpc	r29, r25
    14e0:	10 f0       	brcs	.+4      	; 0x14e6 <LCDprogressBar+0x56>
    14e2:	85 e0       	ldi	r24, 0x05	; 5
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    14e6:	c0 17       	cp	r28, r16
    14e8:	d1 07       	cpc	r29, r17
    14ea:	10 f0       	brcs	.+4      	; 0x14f0 <LCDprogressBar+0x60>
    14ec:	8e 2d       	mov	r24, r14
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <LCDprogressBar+0x62>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    14f2:	0e 94 13 09 	call	0x1226	; 0x1226 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    14f6:	f3 94       	inc	r15
    14f8:	0a 5f       	subi	r16, 0xFA	; 250
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	fd 14       	cp	r15, r13
    14fe:	60 f3       	brcs	.-40     	; 0x14d8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	08 95       	ret

00001510 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1510:	87 e6       	ldi	r24, 0x67	; 103
    1512:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1516:	88 e1       	ldi	r24, 0x18	; 24
    1518:	80 93 c1 00 	sts	0x00C1, r24
}
    151c:	08 95       	ret

0000151e <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    151e:	1f 93       	push	r17
    1520:	18 2f       	mov	r17, r24

  if (c == '\a')
    1522:	87 30       	cpi	r24, 0x07	; 7
    1524:	49 f4       	brne	.+18     	; 0x1538 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1526:	60 91 77 04 	lds	r22, 0x0477
    152a:	70 91 78 04 	lds	r23, 0x0478
    152e:	89 e9       	ldi	r24, 0x99	; 153
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 a2 0b 	call	0x1744	; 0x1744 <fputs>
    1536:	0b c0       	rjmp	.+22     	; 0x154e <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1538:	8a 30       	cpi	r24, 0x0A	; 10
    153a:	19 f4       	brne	.+6      	; 0x1542 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    153c:	8d e0       	ldi	r24, 0x0D	; 13
    153e:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1542:	80 91 c0 00 	lds	r24, 0x00C0
    1546:	85 ff       	sbrs	r24, 5
    1548:	fc cf       	rjmp	.-8      	; 0x1542 <uart_putchar+0x24>
  UDR0 = c;
    154a:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	1f 91       	pop	r17
    1554:	08 95       	ret

00001556 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1564:	80 91 a2 01 	lds	r24, 0x01A2
    1568:	90 91 a3 01 	lds	r25, 0x01A3
    156c:	89 2b       	or	r24, r25
    156e:	09 f0       	breq	.+2      	; 0x1572 <uart_getchar+0x1c>
    1570:	9f c0       	rjmp	.+318    	; 0x16b0 <uart_getchar+0x15a>
    1572:	04 ea       	ldi	r16, 0xA4	; 164
    1574:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1576:	80 91 c0 00 	lds	r24, 0x00C0
    157a:	87 ff       	sbrs	r24, 7
    157c:	fc cf       	rjmp	.-8      	; 0x1576 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    157e:	80 91 c0 00 	lds	r24, 0x00C0
    1582:	84 ff       	sbrs	r24, 4
    1584:	03 c0       	rjmp	.+6      	; 0x158c <uart_getchar+0x36>
    1586:	2e ef       	ldi	r18, 0xFE	; 254
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	a6 c0       	rjmp	.+332    	; 0x16d8 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    158c:	80 91 c0 00 	lds	r24, 0x00C0
    1590:	83 fd       	sbrc	r24, 3
    1592:	a0 c0       	rjmp	.+320    	; 0x16d4 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    1594:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1598:	9d 30       	cpi	r25, 0x0D	; 13
    159a:	11 f0       	breq	.+4      	; 0x15a0 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    159c:	9a 30       	cpi	r25, 0x0A	; 10
    159e:	69 f4       	brne	.+26     	; 0x15ba <uart_getchar+0x64>
	  {
	    *cp = c;
    15a0:	8a e0       	ldi	r24, 0x0A	; 10
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    15a6:	b7 01       	movw	r22, r14
    15a8:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
	    rxp = b;
    15ac:	84 ea       	ldi	r24, 0xA4	; 164
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	90 93 a3 01 	sts	0x01A3, r25
    15b4:	80 93 a2 01 	sts	0x01A2, r24
    15b8:	7b c0       	rjmp	.+246    	; 0x16b0 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    15ba:	99 30       	cpi	r25, 0x09	; 9
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <uart_getchar+0x6a>
    15be:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    15c0:	89 2f       	mov	r24, r25
    15c2:	80 52       	subi	r24, 0x20	; 32
    15c4:	8f 35       	cpi	r24, 0x5F	; 95
    15c6:	10 f0       	brcs	.+4      	; 0x15cc <uart_getchar+0x76>
    15c8:	90 3a       	cpi	r25, 0xA0	; 160
    15ca:	70 f0       	brcs	.+28     	; 0x15e8 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    15cc:	f1 e0       	ldi	r31, 0x01	; 1
    15ce:	03 3f       	cpi	r16, 0xF3	; 243
    15d0:	1f 07       	cpc	r17, r31
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    15d4:	87 e0       	ldi	r24, 0x07	; 7
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    15d8:	f8 01       	movw	r30, r16
    15da:	91 93       	st	Z+, r25
    15dc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    15de:	89 2f       	mov	r24, r25
    15e0:	b7 01       	movw	r22, r14
    15e2:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
    15e6:	c7 cf       	rjmp	.-114    	; 0x1576 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    15e8:	92 31       	cpi	r25, 0x12	; 18
    15ea:	39 f1       	breq	.+78     	; 0x163a <uart_getchar+0xe4>
    15ec:	93 31       	cpi	r25, 0x13	; 19
    15ee:	38 f4       	brcc	.+14     	; 0x15fe <uart_getchar+0xa8>
    15f0:	93 30       	cpi	r25, 0x03	; 3
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <uart_getchar+0xa0>
    15f4:	6f c0       	rjmp	.+222    	; 0x16d4 <uart_getchar+0x17e>
    15f6:	98 30       	cpi	r25, 0x08	; 8
    15f8:	09 f0       	breq	.+2      	; 0x15fc <uart_getchar+0xa6>
    15fa:	bd cf       	rjmp	.-134    	; 0x1576 <uart_getchar+0x20>
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <uart_getchar+0xba>
    15fe:	97 31       	cpi	r25, 0x17	; 23
    1600:	09 f4       	brne	.+2      	; 0x1604 <uart_getchar+0xae>
    1602:	4b c0       	rjmp	.+150    	; 0x169a <uart_getchar+0x144>
    1604:	9f 37       	cpi	r25, 0x7F	; 127
    1606:	21 f0       	breq	.+8      	; 0x1610 <uart_getchar+0xba>
    1608:	95 31       	cpi	r25, 0x15	; 21
    160a:	09 f0       	breq	.+2      	; 0x160e <uart_getchar+0xb8>
    160c:	b4 cf       	rjmp	.-152    	; 0x1576 <uart_getchar+0x20>
    160e:	32 c0       	rjmp	.+100    	; 0x1674 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1610:	f1 e0       	ldi	r31, 0x01	; 1
    1612:	04 3a       	cpi	r16, 0xA4	; 164
    1614:	1f 07       	cpc	r17, r31
    1616:	09 f0       	breq	.+2      	; 0x161a <uart_getchar+0xc4>
    1618:	08 f4       	brcc	.+2      	; 0x161c <uart_getchar+0xc6>
    161a:	ad cf       	rjmp	.-166    	; 0x1576 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    161c:	88 e0       	ldi	r24, 0x08	; 8
    161e:	b7 01       	movw	r22, r14
    1620:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		uart_putchar(' ', stream);
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	b7 01       	movw	r22, r14
    1628:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		uart_putchar('\b', stream);
    162c:	88 e0       	ldi	r24, 0x08	; 8
    162e:	b7 01       	movw	r22, r14
    1630:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		cp--;
    1634:	01 50       	subi	r16, 0x01	; 1
    1636:	10 40       	sbci	r17, 0x00	; 0
    1638:	9e cf       	rjmp	.-196    	; 0x1576 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    163a:	8d e0       	ldi	r24, 0x0D	; 13
    163c:	b7 01       	movw	r22, r14
    163e:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
    1642:	c4 ea       	ldi	r28, 0xA4	; 164
    1644:	d1 e0       	ldi	r29, 0x01	; 1
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1648:	89 91       	ld	r24, Y+
    164a:	b7 01       	movw	r22, r14
    164c:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1650:	c0 17       	cp	r28, r16
    1652:	d1 07       	cpc	r29, r17
    1654:	c8 f3       	brcs	.-14     	; 0x1648 <uart_getchar+0xf2>
    1656:	8f cf       	rjmp	.-226    	; 0x1576 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1658:	88 e0       	ldi	r24, 0x08	; 8
    165a:	b7 01       	movw	r22, r14
    165c:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		uart_putchar(' ', stream);
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	b7 01       	movw	r22, r14
    1664:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		uart_putchar('\b', stream);
    1668:	88 e0       	ldi	r24, 0x08	; 8
    166a:	b7 01       	movw	r22, r14
    166c:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		cp--;
    1670:	01 50       	subi	r16, 0x01	; 1
    1672:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	04 3a       	cpi	r16, 0xA4	; 164
    1678:	18 07       	cpc	r17, r24
    167a:	09 f0       	breq	.+2      	; 0x167e <uart_getchar+0x128>
    167c:	68 f7       	brcc	.-38     	; 0x1658 <uart_getchar+0x102>
    167e:	7b cf       	rjmp	.-266    	; 0x1576 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1680:	88 e0       	ldi	r24, 0x08	; 8
    1682:	b7 01       	movw	r22, r14
    1684:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		uart_putchar(' ', stream);
    1688:	80 e2       	ldi	r24, 0x20	; 32
    168a:	b7 01       	movw	r22, r14
    168c:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
		uart_putchar('\b', stream);
    1690:	88 e0       	ldi	r24, 0x08	; 8
    1692:	b7 01       	movw	r22, r14
    1694:	0e 94 8f 0a 	call	0x151e	; 0x151e <uart_putchar>
    1698:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    169a:	e1 e0       	ldi	r30, 0x01	; 1
    169c:	04 3a       	cpi	r16, 0xA4	; 164
    169e:	1e 07       	cpc	r17, r30
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <uart_getchar+0x14e>
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <uart_getchar+0x150>
    16a4:	68 cf       	rjmp	.-304    	; 0x1576 <uart_getchar+0x20>
    16a6:	e8 01       	movw	r28, r16
    16a8:	8a 91       	ld	r24, -Y
    16aa:	80 32       	cpi	r24, 0x20	; 32
    16ac:	49 f7       	brne	.-46     	; 0x1680 <uart_getchar+0x12a>
    16ae:	63 cf       	rjmp	.-314    	; 0x1576 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    16b0:	e0 91 a2 01 	lds	r30, 0x01A2
    16b4:	f0 91 a3 01 	lds	r31, 0x01A3
    16b8:	81 91       	ld	r24, Z+
    16ba:	f0 93 a3 01 	sts	0x01A3, r31
    16be:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    16c2:	8a 30       	cpi	r24, 0x0A	; 10
    16c4:	21 f4       	brne	.+8      	; 0x16ce <uart_getchar+0x178>
    rxp = 0;
    16c6:	10 92 a3 01 	sts	0x01A3, r1
    16ca:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <uart_getchar+0x182>
    16d4:	2f ef       	ldi	r18, 0xFF	; 255
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
}
    16d8:	c9 01       	movw	r24, r18
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	08 95       	ret

000016e8 <__udivmodhi4>:
    16e8:	aa 1b       	sub	r26, r26
    16ea:	bb 1b       	sub	r27, r27
    16ec:	51 e1       	ldi	r21, 0x11	; 17
    16ee:	07 c0       	rjmp	.+14     	; 0x16fe <__udivmodhi4_ep>

000016f0 <__udivmodhi4_loop>:
    16f0:	aa 1f       	adc	r26, r26
    16f2:	bb 1f       	adc	r27, r27
    16f4:	a6 17       	cp	r26, r22
    16f6:	b7 07       	cpc	r27, r23
    16f8:	10 f0       	brcs	.+4      	; 0x16fe <__udivmodhi4_ep>
    16fa:	a6 1b       	sub	r26, r22
    16fc:	b7 0b       	sbc	r27, r23

000016fe <__udivmodhi4_ep>:
    16fe:	88 1f       	adc	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	5a 95       	dec	r21
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__udivmodhi4_loop>
    1706:	80 95       	com	r24
    1708:	90 95       	com	r25
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	08 95       	ret

00001710 <__divmodhi4>:
    1710:	97 fb       	bst	r25, 7
    1712:	09 2e       	mov	r0, r25
    1714:	07 26       	eor	r0, r23
    1716:	0a d0       	rcall	.+20     	; 0x172c <__divmodhi4_neg1>
    1718:	77 fd       	sbrc	r23, 7
    171a:	04 d0       	rcall	.+8      	; 0x1724 <__divmodhi4_neg2>
    171c:	e5 df       	rcall	.-54     	; 0x16e8 <__udivmodhi4>
    171e:	06 d0       	rcall	.+12     	; 0x172c <__divmodhi4_neg1>
    1720:	00 20       	and	r0, r0
    1722:	1a f4       	brpl	.+6      	; 0x172a <__divmodhi4_exit>

00001724 <__divmodhi4_neg2>:
    1724:	70 95       	com	r23
    1726:	61 95       	neg	r22
    1728:	7f 4f       	sbci	r23, 0xFF	; 255

0000172a <__divmodhi4_exit>:
    172a:	08 95       	ret

0000172c <__divmodhi4_neg1>:
    172c:	f6 f7       	brtc	.-4      	; 0x172a <__divmodhi4_exit>
    172e:	90 95       	com	r25
    1730:	81 95       	neg	r24
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	08 95       	ret

00001736 <strcpy>:
    1736:	fb 01       	movw	r30, r22
    1738:	dc 01       	movw	r26, r24
    173a:	01 90       	ld	r0, Z+
    173c:	0d 92       	st	X+, r0
    173e:	00 20       	and	r0, r0
    1740:	e1 f7       	brne	.-8      	; 0x173a <strcpy+0x4>
    1742:	08 95       	ret

00001744 <fputs>:
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	7c 01       	movw	r14, r24
    1752:	8b 01       	movw	r16, r22
    1754:	db 01       	movw	r26, r22
    1756:	13 96       	adiw	r26, 0x03	; 3
    1758:	8c 91       	ld	r24, X
    175a:	81 fd       	sbrc	r24, 1
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <fputs+0x20>
    175e:	cf ef       	ldi	r28, 0xFF	; 255
    1760:	df ef       	ldi	r29, 0xFF	; 255
    1762:	13 c0       	rjmp	.+38     	; 0x178a <fputs+0x46>
    1764:	c0 e0       	ldi	r28, 0x00	; 0
    1766:	d0 e0       	ldi	r29, 0x00	; 0
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <fputs+0x3c>
    176a:	d8 01       	movw	r26, r16
    176c:	18 96       	adiw	r26, 0x08	; 8
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	19 97       	sbiw	r26, 0x09	; 9
    1774:	b8 01       	movw	r22, r16
    1776:	09 95       	icall
    1778:	89 2b       	or	r24, r25
    177a:	11 f0       	breq	.+4      	; 0x1780 <fputs+0x3c>
    177c:	cf ef       	ldi	r28, 0xFF	; 255
    177e:	df ef       	ldi	r29, 0xFF	; 255
    1780:	f7 01       	movw	r30, r14
    1782:	81 91       	ld	r24, Z+
    1784:	7f 01       	movw	r14, r30
    1786:	88 23       	and	r24, r24
    1788:	81 f7       	brne	.-32     	; 0x176a <fputs+0x26>
    178a:	ce 01       	movw	r24, r28
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	08 95       	ret

0000179a <fscanf>:
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	9e 01       	movw	r18, r28
    17a4:	27 5f       	subi	r18, 0xF7	; 247
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	a9 01       	movw	r20, r18
    17b2:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vfscanf>
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <sprintf>:
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	2e 97       	sbiw	r28, 0x0e	; 14
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	0d 89       	ldd	r16, Y+21	; 0x15
    17d6:	1e 89       	ldd	r17, Y+22	; 0x16
    17d8:	86 e0       	ldi	r24, 0x06	; 6
    17da:	8c 83       	std	Y+4, r24	; 0x04
    17dc:	1a 83       	std	Y+2, r17	; 0x02
    17de:	09 83       	std	Y+1, r16	; 0x01
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f e7       	ldi	r25, 0x7F	; 127
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	9e 01       	movw	r18, r28
    17ea:	27 5e       	subi	r18, 0xE7	; 231
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	ce 01       	movw	r24, r28
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	6f 89       	ldd	r22, Y+23	; 0x17
    17f4:	78 8d       	ldd	r23, Y+24	; 0x18
    17f6:	a9 01       	movw	r20, r18
    17f8:	0e 94 32 0c 	call	0x1864	; 0x1864 <vfprintf>
    17fc:	2f 81       	ldd	r18, Y+7	; 0x07
    17fe:	38 85       	ldd	r19, Y+8	; 0x08
    1800:	02 0f       	add	r16, r18
    1802:	13 1f       	adc	r17, r19
    1804:	f8 01       	movw	r30, r16
    1806:	10 82       	st	Z, r1
    1808:	2e 96       	adiw	r28, 0x0e	; 14
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <sscanf>:
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	2e 97       	sbiw	r28, 0x0e	; 14
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	85 e0       	ldi	r24, 0x05	; 5
    1834:	8c 83       	std	Y+4, r24	; 0x04
    1836:	8b 89       	ldd	r24, Y+19	; 0x13
    1838:	9c 89       	ldd	r25, Y+20	; 0x14
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	9e 01       	movw	r18, r28
    1840:	29 5e       	subi	r18, 0xE9	; 233
    1842:	3f 4f       	sbci	r19, 0xFF	; 255
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	6d 89       	ldd	r22, Y+21	; 0x15
    184a:	7e 89       	ldd	r23, Y+22	; 0x16
    184c:	a9 01       	movw	r20, r18
    184e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <vfscanf>
    1852:	2e 96       	adiw	r28, 0x0e	; 14
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <vfprintf>:
    1864:	2f 92       	push	r2
    1866:	3f 92       	push	r3
    1868:	4f 92       	push	r4
    186a:	5f 92       	push	r5
    186c:	6f 92       	push	r6
    186e:	7f 92       	push	r7
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	2b 97       	sbiw	r28, 0x0b	; 11
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	3c 01       	movw	r6, r24
    189a:	2b 01       	movw	r4, r22
    189c:	5a 01       	movw	r10, r20
    189e:	fc 01       	movw	r30, r24
    18a0:	17 82       	std	Z+7, r1	; 0x07
    18a2:	16 82       	std	Z+6, r1	; 0x06
    18a4:	83 81       	ldd	r24, Z+3	; 0x03
    18a6:	81 fd       	sbrc	r24, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x4c>
    18aa:	6f ef       	ldi	r22, 0xFF	; 255
    18ac:	7f ef       	ldi	r23, 0xFF	; 255
    18ae:	c6 c1       	rjmp	.+908    	; 0x1c3c <vfprintf+0x3d8>
    18b0:	9a e0       	ldi	r25, 0x0A	; 10
    18b2:	89 2e       	mov	r8, r25
    18b4:	1e 01       	movw	r2, r28
    18b6:	08 94       	sec
    18b8:	21 1c       	adc	r2, r1
    18ba:	31 1c       	adc	r3, r1
    18bc:	f3 01       	movw	r30, r6
    18be:	23 81       	ldd	r18, Z+3	; 0x03
    18c0:	f2 01       	movw	r30, r4
    18c2:	23 fd       	sbrc	r18, 3
    18c4:	85 91       	lpm	r24, Z+
    18c6:	23 ff       	sbrs	r18, 3
    18c8:	81 91       	ld	r24, Z+
    18ca:	2f 01       	movw	r4, r30
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <vfprintf+0x6e>
    18d0:	b2 c1       	rjmp	.+868    	; 0x1c36 <vfprintf+0x3d2>
    18d2:	85 32       	cpi	r24, 0x25	; 37
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <vfprintf+0x80>
    18d6:	23 fd       	sbrc	r18, 3
    18d8:	85 91       	lpm	r24, Z+
    18da:	23 ff       	sbrs	r18, 3
    18dc:	81 91       	ld	r24, Z+
    18de:	2f 01       	movw	r4, r30
    18e0:	85 32       	cpi	r24, 0x25	; 37
    18e2:	29 f4       	brne	.+10     	; 0x18ee <vfprintf+0x8a>
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b3 01       	movw	r22, r6
    18e8:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    18ec:	e7 cf       	rjmp	.-50     	; 0x18bc <vfprintf+0x58>
    18ee:	98 2f       	mov	r25, r24
    18f0:	ff 24       	eor	r15, r15
    18f2:	ee 24       	eor	r14, r14
    18f4:	99 24       	eor	r9, r9
    18f6:	ff e1       	ldi	r31, 0x1F	; 31
    18f8:	ff 15       	cp	r31, r15
    18fa:	d0 f0       	brcs	.+52     	; 0x1930 <vfprintf+0xcc>
    18fc:	9b 32       	cpi	r25, 0x2B	; 43
    18fe:	69 f0       	breq	.+26     	; 0x191a <vfprintf+0xb6>
    1900:	9c 32       	cpi	r25, 0x2C	; 44
    1902:	28 f4       	brcc	.+10     	; 0x190e <vfprintf+0xaa>
    1904:	90 32       	cpi	r25, 0x20	; 32
    1906:	59 f0       	breq	.+22     	; 0x191e <vfprintf+0xba>
    1908:	93 32       	cpi	r25, 0x23	; 35
    190a:	91 f4       	brne	.+36     	; 0x1930 <vfprintf+0xcc>
    190c:	0e c0       	rjmp	.+28     	; 0x192a <vfprintf+0xc6>
    190e:	9d 32       	cpi	r25, 0x2D	; 45
    1910:	49 f0       	breq	.+18     	; 0x1924 <vfprintf+0xc0>
    1912:	90 33       	cpi	r25, 0x30	; 48
    1914:	69 f4       	brne	.+26     	; 0x1930 <vfprintf+0xcc>
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	24 c0       	rjmp	.+72     	; 0x1962 <vfprintf+0xfe>
    191a:	52 e0       	ldi	r21, 0x02	; 2
    191c:	f5 2a       	or	r15, r21
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	f8 2a       	or	r15, r24
    1922:	28 c0       	rjmp	.+80     	; 0x1974 <vfprintf+0x110>
    1924:	98 e0       	ldi	r25, 0x08	; 8
    1926:	f9 2a       	or	r15, r25
    1928:	25 c0       	rjmp	.+74     	; 0x1974 <vfprintf+0x110>
    192a:	e0 e1       	ldi	r30, 0x10	; 16
    192c:	fe 2a       	or	r15, r30
    192e:	22 c0       	rjmp	.+68     	; 0x1974 <vfprintf+0x110>
    1930:	f7 fc       	sbrc	r15, 7
    1932:	29 c0       	rjmp	.+82     	; 0x1986 <vfprintf+0x122>
    1934:	89 2f       	mov	r24, r25
    1936:	80 53       	subi	r24, 0x30	; 48
    1938:	8a 30       	cpi	r24, 0x0A	; 10
    193a:	70 f4       	brcc	.+28     	; 0x1958 <vfprintf+0xf4>
    193c:	f6 fe       	sbrs	r15, 6
    193e:	05 c0       	rjmp	.+10     	; 0x194a <vfprintf+0xe6>
    1940:	98 9c       	mul	r9, r8
    1942:	90 2c       	mov	r9, r0
    1944:	11 24       	eor	r1, r1
    1946:	98 0e       	add	r9, r24
    1948:	15 c0       	rjmp	.+42     	; 0x1974 <vfprintf+0x110>
    194a:	e8 9c       	mul	r14, r8
    194c:	e0 2c       	mov	r14, r0
    194e:	11 24       	eor	r1, r1
    1950:	e8 0e       	add	r14, r24
    1952:	f0 e2       	ldi	r31, 0x20	; 32
    1954:	ff 2a       	or	r15, r31
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <vfprintf+0x110>
    1958:	9e 32       	cpi	r25, 0x2E	; 46
    195a:	29 f4       	brne	.+10     	; 0x1966 <vfprintf+0x102>
    195c:	f6 fc       	sbrc	r15, 6
    195e:	6b c1       	rjmp	.+726    	; 0x1c36 <vfprintf+0x3d2>
    1960:	40 e4       	ldi	r20, 0x40	; 64
    1962:	f4 2a       	or	r15, r20
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <vfprintf+0x110>
    1966:	9c 36       	cpi	r25, 0x6C	; 108
    1968:	19 f4       	brne	.+6      	; 0x1970 <vfprintf+0x10c>
    196a:	50 e8       	ldi	r21, 0x80	; 128
    196c:	f5 2a       	or	r15, r21
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x110>
    1970:	98 36       	cpi	r25, 0x68	; 104
    1972:	49 f4       	brne	.+18     	; 0x1986 <vfprintf+0x122>
    1974:	f2 01       	movw	r30, r4
    1976:	23 fd       	sbrc	r18, 3
    1978:	95 91       	lpm	r25, Z+
    197a:	23 ff       	sbrs	r18, 3
    197c:	91 91       	ld	r25, Z+
    197e:	2f 01       	movw	r4, r30
    1980:	99 23       	and	r25, r25
    1982:	09 f0       	breq	.+2      	; 0x1986 <vfprintf+0x122>
    1984:	b8 cf       	rjmp	.-144    	; 0x18f6 <vfprintf+0x92>
    1986:	89 2f       	mov	r24, r25
    1988:	85 54       	subi	r24, 0x45	; 69
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	18 f0       	brcs	.+6      	; 0x1994 <vfprintf+0x130>
    198e:	80 52       	subi	r24, 0x20	; 32
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	38 f4       	brcc	.+14     	; 0x19a2 <vfprintf+0x13e>
    1994:	44 e0       	ldi	r20, 0x04	; 4
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	a4 0e       	add	r10, r20
    199a:	b5 1e       	adc	r11, r21
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	59 83       	std	Y+1, r21	; 0x01
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <vfprintf+0x15c>
    19a2:	93 36       	cpi	r25, 0x63	; 99
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <vfprintf+0x14e>
    19a6:	93 37       	cpi	r25, 0x73	; 115
    19a8:	79 f0       	breq	.+30     	; 0x19c8 <vfprintf+0x164>
    19aa:	93 35       	cpi	r25, 0x53	; 83
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <vfprintf+0x14c>
    19ae:	56 c0       	rjmp	.+172    	; 0x1a5c <vfprintf+0x1f8>
    19b0:	20 c0       	rjmp	.+64     	; 0x19f2 <vfprintf+0x18e>
    19b2:	f5 01       	movw	r30, r10
    19b4:	80 81       	ld	r24, Z
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	42 e0       	ldi	r20, 0x02	; 2
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	a4 0e       	add	r10, r20
    19be:	b5 1e       	adc	r11, r21
    19c0:	61 01       	movw	r12, r2
    19c2:	01 e0       	ldi	r16, 0x01	; 1
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	12 c0       	rjmp	.+36     	; 0x19ec <vfprintf+0x188>
    19c8:	f5 01       	movw	r30, r10
    19ca:	c0 80       	ld	r12, Z
    19cc:	d1 80       	ldd	r13, Z+1	; 0x01
    19ce:	f6 fc       	sbrc	r15, 6
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <vfprintf+0x174>
    19d2:	6f ef       	ldi	r22, 0xFF	; 255
    19d4:	7f ef       	ldi	r23, 0xFF	; 255
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <vfprintf+0x178>
    19d8:	69 2d       	mov	r22, r9
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	42 e0       	ldi	r20, 0x02	; 2
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	a4 0e       	add	r10, r20
    19e2:	b5 1e       	adc	r11, r21
    19e4:	c6 01       	movw	r24, r12
    19e6:	0e 94 28 11 	call	0x2250	; 0x2250 <strnlen>
    19ea:	8c 01       	movw	r16, r24
    19ec:	5f e7       	ldi	r21, 0x7F	; 127
    19ee:	f5 22       	and	r15, r21
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <vfprintf+0x1b6>
    19f2:	f5 01       	movw	r30, r10
    19f4:	c0 80       	ld	r12, Z
    19f6:	d1 80       	ldd	r13, Z+1	; 0x01
    19f8:	f6 fc       	sbrc	r15, 6
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x19e>
    19fc:	6f ef       	ldi	r22, 0xFF	; 255
    19fe:	7f ef       	ldi	r23, 0xFF	; 255
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x1a2>
    1a02:	69 2d       	mov	r22, r9
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	42 e0       	ldi	r20, 0x02	; 2
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	a4 0e       	add	r10, r20
    1a0c:	b5 1e       	adc	r11, r21
    1a0e:	c6 01       	movw	r24, r12
    1a10:	0e 94 1d 11 	call	0x223a	; 0x223a <strnlen_P>
    1a14:	8c 01       	movw	r16, r24
    1a16:	50 e8       	ldi	r21, 0x80	; 128
    1a18:	f5 2a       	or	r15, r21
    1a1a:	f3 fe       	sbrs	r15, 3
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <vfprintf+0x1c8>
    1a1e:	1a c0       	rjmp	.+52     	; 0x1a54 <vfprintf+0x1f0>
    1a20:	80 e2       	ldi	r24, 0x20	; 32
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	b3 01       	movw	r22, r6
    1a26:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1a2a:	ea 94       	dec	r14
    1a2c:	8e 2d       	mov	r24, r14
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	08 17       	cp	r16, r24
    1a32:	19 07       	cpc	r17, r25
    1a34:	a8 f3       	brcs	.-22     	; 0x1a20 <vfprintf+0x1bc>
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <vfprintf+0x1f0>
    1a38:	f6 01       	movw	r30, r12
    1a3a:	f7 fc       	sbrc	r15, 7
    1a3c:	85 91       	lpm	r24, Z+
    1a3e:	f7 fe       	sbrs	r15, 7
    1a40:	81 91       	ld	r24, Z+
    1a42:	6f 01       	movw	r12, r30
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	b3 01       	movw	r22, r6
    1a48:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1a4c:	e1 10       	cpse	r14, r1
    1a4e:	ea 94       	dec	r14
    1a50:	01 50       	subi	r16, 0x01	; 1
    1a52:	10 40       	sbci	r17, 0x00	; 0
    1a54:	01 15       	cp	r16, r1
    1a56:	11 05       	cpc	r17, r1
    1a58:	79 f7       	brne	.-34     	; 0x1a38 <vfprintf+0x1d4>
    1a5a:	ea c0       	rjmp	.+468    	; 0x1c30 <vfprintf+0x3cc>
    1a5c:	94 36       	cpi	r25, 0x64	; 100
    1a5e:	11 f0       	breq	.+4      	; 0x1a64 <vfprintf+0x200>
    1a60:	99 36       	cpi	r25, 0x69	; 105
    1a62:	69 f5       	brne	.+90     	; 0x1abe <vfprintf+0x25a>
    1a64:	f7 fe       	sbrs	r15, 7
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <vfprintf+0x214>
    1a68:	f5 01       	movw	r30, r10
    1a6a:	20 81       	ld	r18, Z
    1a6c:	31 81       	ldd	r19, Z+1	; 0x01
    1a6e:	42 81       	ldd	r20, Z+2	; 0x02
    1a70:	53 81       	ldd	r21, Z+3	; 0x03
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <vfprintf+0x228>
    1a78:	f5 01       	movw	r30, r10
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	9c 01       	movw	r18, r24
    1a80:	44 27       	eor	r20, r20
    1a82:	37 fd       	sbrc	r19, 7
    1a84:	40 95       	com	r20
    1a86:	54 2f       	mov	r21, r20
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a8 0e       	add	r10, r24
    1a8e:	b9 1e       	adc	r11, r25
    1a90:	9f e6       	ldi	r25, 0x6F	; 111
    1a92:	f9 22       	and	r15, r25
    1a94:	57 ff       	sbrs	r21, 7
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <vfprintf+0x246>
    1a98:	50 95       	com	r21
    1a9a:	40 95       	com	r20
    1a9c:	30 95       	com	r19
    1a9e:	21 95       	neg	r18
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa6:	e0 e8       	ldi	r30, 0x80	; 128
    1aa8:	fe 2a       	or	r15, r30
    1aaa:	ca 01       	movw	r24, r20
    1aac:	b9 01       	movw	r22, r18
    1aae:	a1 01       	movw	r20, r2
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	0e 94 bb 11 	call	0x2376	; 0x2376 <__ultoa_invert>
    1ab8:	d8 2e       	mov	r13, r24
    1aba:	d2 18       	sub	r13, r2
    1abc:	40 c0       	rjmp	.+128    	; 0x1b3e <vfprintf+0x2da>
    1abe:	95 37       	cpi	r25, 0x75	; 117
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <vfprintf+0x268>
    1ac2:	1f 2d       	mov	r17, r15
    1ac4:	1f 7e       	andi	r17, 0xEF	; 239
    1ac6:	2a e0       	ldi	r18, 0x0A	; 10
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	1d c0       	rjmp	.+58     	; 0x1b06 <vfprintf+0x2a2>
    1acc:	1f 2d       	mov	r17, r15
    1ace:	19 7f       	andi	r17, 0xF9	; 249
    1ad0:	9f 36       	cpi	r25, 0x6F	; 111
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <vfprintf+0x288>
    1ad4:	90 37       	cpi	r25, 0x70	; 112
    1ad6:	20 f4       	brcc	.+8      	; 0x1ae0 <vfprintf+0x27c>
    1ad8:	98 35       	cpi	r25, 0x58	; 88
    1ada:	09 f0       	breq	.+2      	; 0x1ade <vfprintf+0x27a>
    1adc:	ac c0       	rjmp	.+344    	; 0x1c36 <vfprintf+0x3d2>
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <vfprintf+0x29a>
    1ae0:	90 37       	cpi	r25, 0x70	; 112
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <vfprintf+0x28e>
    1ae4:	98 37       	cpi	r25, 0x78	; 120
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <vfprintf+0x286>
    1ae8:	a6 c0       	rjmp	.+332    	; 0x1c36 <vfprintf+0x3d2>
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <vfprintf+0x290>
    1aec:	28 e0       	ldi	r18, 0x08	; 8
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	0a c0       	rjmp	.+20     	; 0x1b06 <vfprintf+0x2a2>
    1af2:	10 61       	ori	r17, 0x10	; 16
    1af4:	14 fd       	sbrc	r17, 4
    1af6:	14 60       	ori	r17, 0x04	; 4
    1af8:	20 e1       	ldi	r18, 0x10	; 16
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <vfprintf+0x2a2>
    1afe:	14 fd       	sbrc	r17, 4
    1b00:	16 60       	ori	r17, 0x06	; 6
    1b02:	20 e1       	ldi	r18, 0x10	; 16
    1b04:	32 e0       	ldi	r19, 0x02	; 2
    1b06:	17 ff       	sbrs	r17, 7
    1b08:	08 c0       	rjmp	.+16     	; 0x1b1a <vfprintf+0x2b6>
    1b0a:	f5 01       	movw	r30, r10
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	44 e0       	ldi	r20, 0x04	; 4
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <vfprintf+0x2c6>
    1b1a:	f5 01       	movw	r30, r10
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	bc 01       	movw	r22, r24
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	42 e0       	ldi	r20, 0x02	; 2
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	a4 0e       	add	r10, r20
    1b2c:	b5 1e       	adc	r11, r21
    1b2e:	a1 01       	movw	r20, r2
    1b30:	0e 94 bb 11 	call	0x2376	; 0x2376 <__ultoa_invert>
    1b34:	d8 2e       	mov	r13, r24
    1b36:	d2 18       	sub	r13, r2
    1b38:	8f e7       	ldi	r24, 0x7F	; 127
    1b3a:	f8 2e       	mov	r15, r24
    1b3c:	f1 22       	and	r15, r17
    1b3e:	f6 fe       	sbrs	r15, 6
    1b40:	0b c0       	rjmp	.+22     	; 0x1b58 <vfprintf+0x2f4>
    1b42:	5e ef       	ldi	r21, 0xFE	; 254
    1b44:	f5 22       	and	r15, r21
    1b46:	d9 14       	cp	r13, r9
    1b48:	38 f4       	brcc	.+14     	; 0x1b58 <vfprintf+0x2f4>
    1b4a:	f4 fe       	sbrs	r15, 4
    1b4c:	07 c0       	rjmp	.+14     	; 0x1b5c <vfprintf+0x2f8>
    1b4e:	f2 fc       	sbrc	r15, 2
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <vfprintf+0x2f8>
    1b52:	8f ee       	ldi	r24, 0xEF	; 239
    1b54:	f8 22       	and	r15, r24
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x2f8>
    1b58:	1d 2d       	mov	r17, r13
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <vfprintf+0x2fa>
    1b5c:	19 2d       	mov	r17, r9
    1b5e:	f4 fe       	sbrs	r15, 4
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <vfprintf+0x318>
    1b62:	fe 01       	movw	r30, r28
    1b64:	ed 0d       	add	r30, r13
    1b66:	f1 1d       	adc	r31, r1
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 33       	cpi	r24, 0x30	; 48
    1b6c:	19 f4       	brne	.+6      	; 0x1b74 <vfprintf+0x310>
    1b6e:	99 ee       	ldi	r25, 0xE9	; 233
    1b70:	f9 22       	and	r15, r25
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <vfprintf+0x320>
    1b74:	1f 5f       	subi	r17, 0xFF	; 255
    1b76:	f2 fe       	sbrs	r15, 2
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <vfprintf+0x320>
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <vfprintf+0x31e>
    1b7c:	8f 2d       	mov	r24, r15
    1b7e:	86 78       	andi	r24, 0x86	; 134
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <vfprintf+0x320>
    1b82:	1f 5f       	subi	r17, 0xFF	; 255
    1b84:	0f 2d       	mov	r16, r15
    1b86:	f3 fc       	sbrc	r15, 3
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <vfprintf+0x34e>
    1b8a:	f0 fe       	sbrs	r15, 0
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <vfprintf+0x348>
    1b8e:	1e 15       	cp	r17, r14
    1b90:	10 f0       	brcs	.+4      	; 0x1b96 <vfprintf+0x332>
    1b92:	9d 2c       	mov	r9, r13
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <vfprintf+0x348>
    1b96:	9d 2c       	mov	r9, r13
    1b98:	9e 0c       	add	r9, r14
    1b9a:	91 1a       	sub	r9, r17
    1b9c:	1e 2d       	mov	r17, r14
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <vfprintf+0x348>
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	b3 01       	movw	r22, r6
    1ba6:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1baa:	1f 5f       	subi	r17, 0xFF	; 255
    1bac:	1e 15       	cp	r17, r14
    1bae:	c0 f3       	brcs	.-16     	; 0x1ba0 <vfprintf+0x33c>
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <vfprintf+0x356>
    1bb2:	1e 15       	cp	r17, r14
    1bb4:	10 f4       	brcc	.+4      	; 0x1bba <vfprintf+0x356>
    1bb6:	e1 1a       	sub	r14, r17
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <vfprintf+0x358>
    1bba:	ee 24       	eor	r14, r14
    1bbc:	04 ff       	sbrs	r16, 4
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <vfprintf+0x37a>
    1bc0:	80 e3       	ldi	r24, 0x30	; 48
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	b3 01       	movw	r22, r6
    1bc6:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1bca:	02 ff       	sbrs	r16, 2
    1bcc:	1d c0       	rjmp	.+58     	; 0x1c08 <vfprintf+0x3a4>
    1bce:	01 fd       	sbrc	r16, 1
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x374>
    1bd2:	88 e7       	ldi	r24, 0x78	; 120
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <vfprintf+0x390>
    1bd8:	88 e5       	ldi	r24, 0x58	; 88
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0b c0       	rjmp	.+22     	; 0x1bf4 <vfprintf+0x390>
    1bde:	80 2f       	mov	r24, r16
    1be0:	86 78       	andi	r24, 0x86	; 134
    1be2:	91 f0       	breq	.+36     	; 0x1c08 <vfprintf+0x3a4>
    1be4:	01 ff       	sbrs	r16, 1
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <vfprintf+0x388>
    1be8:	8b e2       	ldi	r24, 0x2B	; 43
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <vfprintf+0x38a>
    1bec:	80 e2       	ldi	r24, 0x20	; 32
    1bee:	f7 fc       	sbrc	r15, 7
    1bf0:	8d e2       	ldi	r24, 0x2D	; 45
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	b3 01       	movw	r22, r6
    1bf6:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <vfprintf+0x3a4>
    1bfc:	80 e3       	ldi	r24, 0x30	; 48
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	b3 01       	movw	r22, r6
    1c02:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1c06:	9a 94       	dec	r9
    1c08:	d9 14       	cp	r13, r9
    1c0a:	c0 f3       	brcs	.-16     	; 0x1bfc <vfprintf+0x398>
    1c0c:	da 94       	dec	r13
    1c0e:	f1 01       	movw	r30, r2
    1c10:	ed 0d       	add	r30, r13
    1c12:	f1 1d       	adc	r31, r1
    1c14:	80 81       	ld	r24, Z
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	b3 01       	movw	r22, r6
    1c1a:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1c1e:	dd 20       	and	r13, r13
    1c20:	a9 f7       	brne	.-22     	; 0x1c0c <vfprintf+0x3a8>
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0x3cc>
    1c24:	80 e2       	ldi	r24, 0x20	; 32
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	b3 01       	movw	r22, r6
    1c2a:	0e 94 75 11 	call	0x22ea	; 0x22ea <fputc>
    1c2e:	ea 94       	dec	r14
    1c30:	ee 20       	and	r14, r14
    1c32:	c1 f7       	brne	.-16     	; 0x1c24 <vfprintf+0x3c0>
    1c34:	43 ce       	rjmp	.-890    	; 0x18bc <vfprintf+0x58>
    1c36:	f3 01       	movw	r30, r6
    1c38:	66 81       	ldd	r22, Z+6	; 0x06
    1c3a:	77 81       	ldd	r23, Z+7	; 0x07
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	2b 96       	adiw	r28, 0x0b	; 11
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	7f 90       	pop	r7
    1c64:	6f 90       	pop	r6
    1c66:	5f 90       	pop	r5
    1c68:	4f 90       	pop	r4
    1c6a:	3f 90       	pop	r3
    1c6c:	2f 90       	pop	r2
    1c6e:	08 95       	ret

00001c70 <putval>:
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 fd       	sbrc	r18, 0
    1c74:	08 c0       	rjmp	.+16     	; 0x1c86 <putval+0x16>
    1c76:	23 fd       	sbrc	r18, 3
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <putval+0x14>
    1c7a:	22 ff       	sbrs	r18, 2
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <putval+0x12>
    1c7e:	73 83       	std	Z+3, r23	; 0x03
    1c80:	62 83       	std	Z+2, r22	; 0x02
    1c82:	51 83       	std	Z+1, r21	; 0x01
    1c84:	40 83       	st	Z, r20
    1c86:	08 95       	ret

00001c88 <mulacc>:
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	44 ff       	sbrs	r20, 4
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <mulacc+0x10>
    1c94:	33 e0       	ldi	r19, 0x03	; 3
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <mulacc+0x32>
    1c98:	46 ff       	sbrs	r20, 6
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <mulacc+0x18>
    1c9c:	34 e0       	ldi	r19, 0x04	; 4
    1c9e:	0d c0       	rjmp	.+26     	; 0x1cba <mulacc+0x32>
    1ca0:	db 01       	movw	r26, r22
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	aa 0f       	add	r26, r26
    1ca6:	bb 1f       	adc	r27, r27
    1ca8:	ee 1f       	adc	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	10 94       	com	r1
    1cae:	d1 f7       	brne	.-12     	; 0x1ca4 <mulacc+0x1c>
    1cb0:	6a 0f       	add	r22, r26
    1cb2:	7b 1f       	adc	r23, r27
    1cb4:	8e 1f       	adc	r24, r30
    1cb6:	9f 1f       	adc	r25, r31
    1cb8:	31 e0       	ldi	r19, 0x01	; 1
    1cba:	66 0f       	add	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	88 1f       	adc	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	31 50       	subi	r19, 0x01	; 1
    1cc4:	d1 f7       	brne	.-12     	; 0x1cba <mulacc+0x32>
    1cc6:	7b 01       	movw	r14, r22
    1cc8:	8c 01       	movw	r16, r24
    1cca:	e2 0e       	add	r14, r18
    1ccc:	f1 1c       	adc	r15, r1
    1cce:	01 1d       	adc	r16, r1
    1cd0:	11 1d       	adc	r17, r1
    1cd2:	a8 01       	movw	r20, r16
    1cd4:	97 01       	movw	r18, r14
    1cd6:	b7 01       	movw	r22, r14
    1cd8:	ca 01       	movw	r24, r20
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	08 95       	ret

00001ce4 <skip_spaces>:
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	cf 93       	push	r28
    1cea:	df 93       	push	r29
    1cec:	8c 01       	movw	r16, r24
    1cee:	c8 01       	movw	r24, r16
    1cf0:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1cf4:	ec 01       	movw	r28, r24
    1cf6:	97 fd       	sbrc	r25, 7
    1cf8:	08 c0       	rjmp	.+16     	; 0x1d0a <skip_spaces+0x26>
    1cfa:	0e 94 0a 11 	call	0x2214	; 0x2214 <isspace>
    1cfe:	89 2b       	or	r24, r25
    1d00:	b1 f7       	brne	.-20     	; 0x1cee <skip_spaces+0xa>
    1d02:	ce 01       	movw	r24, r28
    1d04:	b8 01       	movw	r22, r16
    1d06:	0e 94 a1 11 	call	0x2342	; 0x2342 <ungetc>
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	08 95       	ret

00001d16 <conv_int>:
    1d16:	af 92       	push	r10
    1d18:	bf 92       	push	r11
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	c6 2e       	mov	r12, r22
    1d2e:	5a 01       	movw	r10, r20
    1d30:	12 2f       	mov	r17, r18
    1d32:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1d36:	ac 01       	movw	r20, r24
    1d38:	8b 32       	cpi	r24, 0x2B	; 43
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <conv_int+0x2c>
    1d3c:	8d 32       	cpi	r24, 0x2D	; 45
    1d3e:	51 f4       	brne	.+20     	; 0x1d54 <conv_int+0x3e>
    1d40:	10 68       	ori	r17, 0x80	; 128
    1d42:	ca 94       	dec	r12
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <conv_int+0x32>
    1d46:	6d c0       	rjmp	.+218    	; 0x1e22 <conv_int+0x10c>
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1d4e:	ac 01       	movw	r20, r24
    1d50:	97 fd       	sbrc	r25, 7
    1d52:	67 c0       	rjmp	.+206    	; 0x1e22 <conv_int+0x10c>
    1d54:	6d ef       	ldi	r22, 0xFD	; 253
    1d56:	d6 2e       	mov	r13, r22
    1d58:	d1 22       	and	r13, r17
    1d5a:	8d 2d       	mov	r24, r13
    1d5c:	80 73       	andi	r24, 0x30	; 48
    1d5e:	01 f5       	brne	.+64     	; 0x1da0 <conv_int+0x8a>
    1d60:	40 33       	cpi	r20, 0x30	; 48
    1d62:	f1 f4       	brne	.+60     	; 0x1da0 <conv_int+0x8a>
    1d64:	ca 94       	dec	r12
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <conv_int+0x54>
    1d68:	47 c0       	rjmp	.+142    	; 0x1df8 <conv_int+0xe2>
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1d70:	ac 01       	movw	r20, r24
    1d72:	97 fd       	sbrc	r25, 7
    1d74:	41 c0       	rjmp	.+130    	; 0x1df8 <conv_int+0xe2>
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	d8 2a       	or	r13, r24
    1d7a:	48 37       	cpi	r20, 0x78	; 120
    1d7c:	11 f0       	breq	.+4      	; 0x1d82 <conv_int+0x6c>
    1d7e:	48 35       	cpi	r20, 0x58	; 88
    1d80:	59 f4       	brne	.+22     	; 0x1d98 <conv_int+0x82>
    1d82:	80 e4       	ldi	r24, 0x40	; 64
    1d84:	d8 2a       	or	r13, r24
    1d86:	ca 94       	dec	r12
    1d88:	b9 f1       	breq	.+110    	; 0x1df8 <conv_int+0xe2>
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1d90:	ac 01       	movw	r20, r24
    1d92:	99 23       	and	r25, r25
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <conv_int+0x8a>
    1d96:	30 c0       	rjmp	.+96     	; 0x1df8 <conv_int+0xe2>
    1d98:	d6 fc       	sbrc	r13, 6
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <conv_int+0x8a>
    1d9c:	80 e1       	ldi	r24, 0x10	; 16
    1d9e:	d8 2a       	or	r13, r24
    1da0:	ee 24       	eor	r14, r14
    1da2:	ff 24       	eor	r15, r15
    1da4:	87 01       	movw	r16, r14
    1da6:	24 2f       	mov	r18, r20
    1da8:	20 53       	subi	r18, 0x30	; 48
    1daa:	28 30       	cpi	r18, 0x08	; 8
    1dac:	88 f0       	brcs	.+34     	; 0x1dd0 <conv_int+0xba>
    1dae:	d4 fc       	sbrc	r13, 4
    1db0:	09 c0       	rjmp	.+18     	; 0x1dc4 <conv_int+0xae>
    1db2:	2a 30       	cpi	r18, 0x0A	; 10
    1db4:	68 f0       	brcs	.+26     	; 0x1dd0 <conv_int+0xba>
    1db6:	d6 fe       	sbrs	r13, 6
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <conv_int+0xae>
    1dba:	2f 7d       	andi	r18, 0xDF	; 223
    1dbc:	82 2f       	mov	r24, r18
    1dbe:	81 51       	subi	r24, 0x11	; 17
    1dc0:	86 30       	cpi	r24, 0x06	; 6
    1dc2:	28 f0       	brcs	.+10     	; 0x1dce <conv_int+0xb8>
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	be 01       	movw	r22, r28
    1dc8:	0e 94 a1 11 	call	0x2342	; 0x2342 <ungetc>
    1dcc:	12 c0       	rjmp	.+36     	; 0x1df2 <conv_int+0xdc>
    1dce:	27 50       	subi	r18, 0x07	; 7
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	4d 2d       	mov	r20, r13
    1dd6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <mulacc>
    1dda:	7b 01       	movw	r14, r22
    1ddc:	8c 01       	movw	r16, r24
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	d8 2a       	or	r13, r24
    1de2:	ca 94       	dec	r12
    1de4:	61 f0       	breq	.+24     	; 0x1dfe <conv_int+0xe8>
    1de6:	ce 01       	movw	r24, r28
    1de8:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1dec:	ac 01       	movw	r20, r24
    1dee:	97 ff       	sbrs	r25, 7
    1df0:	da cf       	rjmp	.-76     	; 0x1da6 <conv_int+0x90>
    1df2:	d1 fc       	sbrc	r13, 1
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <conv_int+0xe8>
    1df6:	15 c0       	rjmp	.+42     	; 0x1e22 <conv_int+0x10c>
    1df8:	ee 24       	eor	r14, r14
    1dfa:	ff 24       	eor	r15, r15
    1dfc:	87 01       	movw	r16, r14
    1dfe:	d7 fe       	sbrs	r13, 7
    1e00:	08 c0       	rjmp	.+16     	; 0x1e12 <conv_int+0xfc>
    1e02:	10 95       	com	r17
    1e04:	00 95       	com	r16
    1e06:	f0 94       	com	r15
    1e08:	e0 94       	com	r14
    1e0a:	e1 1c       	adc	r14, r1
    1e0c:	f1 1c       	adc	r15, r1
    1e0e:	01 1d       	adc	r16, r1
    1e10:	11 1d       	adc	r17, r1
    1e12:	c5 01       	movw	r24, r10
    1e14:	b8 01       	movw	r22, r16
    1e16:	a7 01       	movw	r20, r14
    1e18:	2d 2d       	mov	r18, r13
    1e1a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <putval>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <conv_int+0x10e>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	bf 90       	pop	r11
    1e36:	af 90       	pop	r10
    1e38:	08 95       	ret

00001e3a <conv_brk>:
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	a0 97       	sbiw	r28, 0x20	; 32
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	6c 01       	movw	r12, r24
    1e68:	a6 2e       	mov	r10, r22
    1e6a:	8a 01       	movw	r16, r20
    1e6c:	79 01       	movw	r14, r18
    1e6e:	fe 01       	movw	r30, r28
    1e70:	31 96       	adiw	r30, 0x01	; 1
    1e72:	80 e2       	ldi	r24, 0x20	; 32
    1e74:	df 01       	movw	r26, r30
    1e76:	1d 92       	st	X+, r1
    1e78:	8a 95       	dec	r24
    1e7a:	e9 f7       	brne	.-6      	; 0x1e76 <conv_brk+0x3c>
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	4f 01       	movw	r8, r30
    1e88:	a1 e0       	ldi	r26, 0x01	; 1
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	f6 01       	movw	r30, r12
    1e8e:	83 81       	ldd	r24, Z+3	; 0x03
    1e90:	f7 01       	movw	r30, r14
    1e92:	83 fd       	sbrc	r24, 3
    1e94:	25 91       	lpm	r18, Z+
    1e96:	83 ff       	sbrs	r24, 3
    1e98:	21 91       	ld	r18, Z+
    1e9a:	7f 01       	movw	r14, r30
    1e9c:	22 23       	and	r18, r18
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <conv_brk+0x68>
    1ea0:	7e c0       	rjmp	.+252    	; 0x1f9e <conv_brk+0x164>
    1ea2:	2e 35       	cpi	r18, 0x5E	; 94
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <conv_brk+0x72>
    1ea6:	41 15       	cp	r20, r1
    1ea8:	51 05       	cpc	r21, r1
    1eaa:	69 f1       	breq	.+90     	; 0x1f06 <conv_brk+0xcc>
    1eac:	87 2f       	mov	r24, r23
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	84 17       	cp	r24, r20
    1eb2:	95 07       	cpc	r25, r21
    1eb4:	44 f4       	brge	.+16     	; 0x1ec6 <conv_brk+0x8c>
    1eb6:	2d 35       	cpi	r18, 0x5D	; 93
    1eb8:	51 f1       	breq	.+84     	; 0x1f0e <conv_brk+0xd4>
    1eba:	2d 32       	cpi	r18, 0x2D	; 45
    1ebc:	21 f4       	brne	.+8      	; 0x1ec6 <conv_brk+0x8c>
    1ebe:	33 23       	and	r19, r19
    1ec0:	29 f4       	brne	.+10     	; 0x1ecc <conv_brk+0x92>
    1ec2:	31 e0       	ldi	r19, 0x01	; 1
    1ec4:	21 c0       	rjmp	.+66     	; 0x1f08 <conv_brk+0xce>
    1ec6:	33 23       	and	r19, r19
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <conv_brk+0x92>
    1eca:	62 2f       	mov	r22, r18
    1ecc:	32 2f       	mov	r19, r18
    1ece:	83 2f       	mov	r24, r19
    1ed0:	86 95       	lsr	r24
    1ed2:	86 95       	lsr	r24
    1ed4:	86 95       	lsr	r24
    1ed6:	f4 01       	movw	r30, r8
    1ed8:	e8 0f       	add	r30, r24
    1eda:	f1 1d       	adc	r31, r1
    1edc:	83 2f       	mov	r24, r19
    1ede:	87 70       	andi	r24, 0x07	; 7
    1ee0:	3d 01       	movw	r6, r26
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <conv_brk+0xae>
    1ee4:	66 0c       	add	r6, r6
    1ee6:	77 1c       	adc	r7, r7
    1ee8:	8a 95       	dec	r24
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <conv_brk+0xaa>
    1eec:	20 81       	ld	r18, Z
    1eee:	26 29       	or	r18, r6
    1ef0:	20 83       	st	Z, r18
    1ef2:	36 17       	cp	r19, r22
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <conv_brk+0xc0>
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	07 c0       	rjmp	.+14     	; 0x1f08 <conv_brk+0xce>
    1efa:	36 17       	cp	r19, r22
    1efc:	10 f4       	brcc	.+4      	; 0x1f02 <conv_brk+0xc8>
    1efe:	3f 5f       	subi	r19, 0xFF	; 255
    1f00:	e6 cf       	rjmp	.-52     	; 0x1ece <conv_brk+0x94>
    1f02:	31 50       	subi	r19, 0x01	; 1
    1f04:	e4 cf       	rjmp	.-56     	; 0x1ece <conv_brk+0x94>
    1f06:	71 e0       	ldi	r23, 0x01	; 1
    1f08:	4f 5f       	subi	r20, 0xFF	; 255
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	bf cf       	rjmp	.-130    	; 0x1e8c <conv_brk+0x52>
    1f0e:	33 23       	and	r19, r19
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <conv_brk+0xde>
    1f12:	8e 81       	ldd	r24, Y+6	; 0x06
    1f14:	80 62       	ori	r24, 0x20	; 32
    1f16:	8e 83       	std	Y+6, r24	; 0x06
    1f18:	77 23       	and	r23, r23
    1f1a:	59 f0       	breq	.+22     	; 0x1f32 <conv_brk+0xf8>
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	31 96       	adiw	r30, 0x01	; 1
    1f20:	9e 01       	movw	r18, r28
    1f22:	2f 5d       	subi	r18, 0xDF	; 223
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	80 95       	com	r24
    1f2a:	81 93       	st	Z+, r24
    1f2c:	e2 17       	cp	r30, r18
    1f2e:	f3 07       	cpc	r31, r19
    1f30:	d1 f7       	brne	.-12     	; 0x1f26 <conv_brk+0xec>
    1f32:	bb 24       	eor	r11, r11
    1f34:	b3 94       	inc	r11
    1f36:	4e 01       	movw	r8, r28
    1f38:	08 94       	sec
    1f3a:	81 1c       	adc	r8, r1
    1f3c:	91 1c       	adc	r9, r1
    1f3e:	c6 01       	movw	r24, r12
    1f40:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    1f44:	ac 01       	movw	r20, r24
    1f46:	97 fd       	sbrc	r25, 7
    1f48:	22 c0       	rjmp	.+68     	; 0x1f8e <conv_brk+0x154>
    1f4a:	86 95       	lsr	r24
    1f4c:	86 95       	lsr	r24
    1f4e:	86 95       	lsr	r24
    1f50:	f4 01       	movw	r30, r8
    1f52:	e8 0f       	add	r30, r24
    1f54:	f1 1d       	adc	r31, r1
    1f56:	80 81       	ld	r24, Z
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9a 01       	movw	r18, r20
    1f5c:	27 70       	andi	r18, 0x07	; 7
    1f5e:	30 70       	andi	r19, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <conv_brk+0x12c>
    1f62:	95 95       	asr	r25
    1f64:	87 95       	ror	r24
    1f66:	2a 95       	dec	r18
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <conv_brk+0x128>
    1f6a:	80 fd       	sbrc	r24, 0
    1f6c:	05 c0       	rjmp	.+10     	; 0x1f78 <conv_brk+0x13e>
    1f6e:	ca 01       	movw	r24, r20
    1f70:	b6 01       	movw	r22, r12
    1f72:	0e 94 a1 11 	call	0x2342	; 0x2342 <ungetc>
    1f76:	0b c0       	rjmp	.+22     	; 0x1f8e <conv_brk+0x154>
    1f78:	01 15       	cp	r16, r1
    1f7a:	11 05       	cpc	r17, r1
    1f7c:	19 f0       	breq	.+6      	; 0x1f84 <conv_brk+0x14a>
    1f7e:	d8 01       	movw	r26, r16
    1f80:	4d 93       	st	X+, r20
    1f82:	8d 01       	movw	r16, r26
    1f84:	aa 94       	dec	r10
    1f86:	bb 24       	eor	r11, r11
    1f88:	aa 20       	and	r10, r10
    1f8a:	c9 f6       	brne	.-78     	; 0x1f3e <conv_brk+0x104>
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <conv_brk+0x158>
    1f8e:	bb 20       	and	r11, r11
    1f90:	31 f4       	brne	.+12     	; 0x1f9e <conv_brk+0x164>
    1f92:	01 15       	cp	r16, r1
    1f94:	11 05       	cpc	r17, r1
    1f96:	29 f0       	breq	.+10     	; 0x1fa2 <conv_brk+0x168>
    1f98:	f8 01       	movw	r30, r16
    1f9a:	10 82       	st	Z, r1
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <conv_brk+0x168>
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	c7 01       	movw	r24, r14
    1fa4:	a0 96       	adiw	r28, 0x20	; 32
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	9f 90       	pop	r9
    1fc6:	8f 90       	pop	r8
    1fc8:	7f 90       	pop	r7
    1fca:	6f 90       	pop	r6
    1fcc:	08 95       	ret

00001fce <vfscanf>:
    1fce:	6f 92       	push	r6
    1fd0:	7f 92       	push	r7
    1fd2:	8f 92       	push	r8
    1fd4:	9f 92       	push	r9
    1fd6:	af 92       	push	r10
    1fd8:	bf 92       	push	r11
    1fda:	cf 92       	push	r12
    1fdc:	df 92       	push	r13
    1fde:	ef 92       	push	r14
    1fe0:	ff 92       	push	r15
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	5c 01       	movw	r10, r24
    1fec:	6b 01       	movw	r12, r22
    1fee:	3a 01       	movw	r6, r20
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	17 82       	std	Z+7, r1	; 0x07
    1ff4:	16 82       	std	Z+6, r1	; 0x06
    1ff6:	88 24       	eor	r8, r8
    1ff8:	ea c0       	rjmp	.+468    	; 0x21ce <vfscanf+0x200>
    1ffa:	81 2f       	mov	r24, r17
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 0a 11 	call	0x2214	; 0x2214 <isspace>
    2002:	89 2b       	or	r24, r25
    2004:	21 f0       	breq	.+8      	; 0x200e <vfscanf+0x40>
    2006:	c5 01       	movw	r24, r10
    2008:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <skip_spaces>
    200c:	e0 c0       	rjmp	.+448    	; 0x21ce <vfscanf+0x200>
    200e:	15 32       	cpi	r17, 0x25	; 37
    2010:	49 f4       	brne	.+18     	; 0x2024 <vfscanf+0x56>
    2012:	f6 01       	movw	r30, r12
    2014:	f3 fc       	sbrc	r15, 3
    2016:	65 91       	lpm	r22, Z+
    2018:	f3 fe       	sbrs	r15, 3
    201a:	61 91       	ld	r22, Z+
    201c:	6f 01       	movw	r12, r30
    201e:	65 32       	cpi	r22, 0x25	; 37
    2020:	69 f4       	brne	.+26     	; 0x203c <vfscanf+0x6e>
    2022:	15 e2       	ldi	r17, 0x25	; 37
    2024:	c5 01       	movw	r24, r10
    2026:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    202a:	97 fd       	sbrc	r25, 7
    202c:	dc c0       	rjmp	.+440    	; 0x21e6 <vfscanf+0x218>
    202e:	18 17       	cp	r17, r24
    2030:	09 f4       	brne	.+2      	; 0x2034 <vfscanf+0x66>
    2032:	cd c0       	rjmp	.+410    	; 0x21ce <vfscanf+0x200>
    2034:	b5 01       	movw	r22, r10
    2036:	0e 94 a1 11 	call	0x2342	; 0x2342 <ungetc>
    203a:	da c0       	rjmp	.+436    	; 0x21f0 <vfscanf+0x222>
    203c:	6a 32       	cpi	r22, 0x2A	; 42
    203e:	19 f0       	breq	.+6      	; 0x2046 <vfscanf+0x78>
    2040:	16 2f       	mov	r17, r22
    2042:	00 e0       	ldi	r16, 0x00	; 0
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <vfscanf+0x84>
    2046:	f3 fc       	sbrc	r15, 3
    2048:	15 91       	lpm	r17, Z+
    204a:	f3 fe       	sbrs	r15, 3
    204c:	11 91       	ld	r17, Z+
    204e:	6f 01       	movw	r12, r30
    2050:	01 e0       	ldi	r16, 0x01	; 1
    2052:	99 24       	eor	r9, r9
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <vfscanf+0xa6>
    2056:	02 60       	ori	r16, 0x02	; 2
    2058:	69 2d       	mov	r22, r9
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <mulacc>
    2066:	96 2e       	mov	r9, r22
    2068:	f6 01       	movw	r30, r12
    206a:	f3 fc       	sbrc	r15, 3
    206c:	15 91       	lpm	r17, Z+
    206e:	f3 fe       	sbrs	r15, 3
    2070:	11 91       	ld	r17, Z+
    2072:	6f 01       	movw	r12, r30
    2074:	21 2f       	mov	r18, r17
    2076:	20 53       	subi	r18, 0x30	; 48
    2078:	2a 30       	cpi	r18, 0x0A	; 10
    207a:	68 f3       	brcs	.-38     	; 0x2056 <vfscanf+0x88>
    207c:	01 fd       	sbrc	r16, 1
    207e:	03 c0       	rjmp	.+6      	; 0x2086 <vfscanf+0xb8>
    2080:	99 24       	eor	r9, r9
    2082:	9a 94       	dec	r9
    2084:	03 c0       	rjmp	.+6      	; 0x208c <vfscanf+0xbe>
    2086:	99 20       	and	r9, r9
    2088:	09 f4       	brne	.+2      	; 0x208c <vfscanf+0xbe>
    208a:	b2 c0       	rjmp	.+356    	; 0x21f0 <vfscanf+0x222>
    208c:	18 36       	cpi	r17, 0x68	; 104
    208e:	21 f0       	breq	.+8      	; 0x2098 <vfscanf+0xca>
    2090:	1c 36       	cpi	r17, 0x6C	; 108
    2092:	99 f4       	brne	.+38     	; 0x20ba <vfscanf+0xec>
    2094:	f6 01       	movw	r30, r12
    2096:	0b c0       	rjmp	.+22     	; 0x20ae <vfscanf+0xe0>
    2098:	f6 01       	movw	r30, r12
    209a:	f3 fc       	sbrc	r15, 3
    209c:	65 91       	lpm	r22, Z+
    209e:	f3 fe       	sbrs	r15, 3
    20a0:	61 91       	ld	r22, Z+
    20a2:	68 36       	cpi	r22, 0x68	; 104
    20a4:	19 f0       	breq	.+6      	; 0x20ac <vfscanf+0xde>
    20a6:	6f 01       	movw	r12, r30
    20a8:	16 2f       	mov	r17, r22
    20aa:	07 c0       	rjmp	.+14     	; 0x20ba <vfscanf+0xec>
    20ac:	08 60       	ori	r16, 0x08	; 8
    20ae:	04 60       	ori	r16, 0x04	; 4
    20b0:	f3 fc       	sbrc	r15, 3
    20b2:	15 91       	lpm	r17, Z+
    20b4:	f3 fe       	sbrs	r15, 3
    20b6:	11 91       	ld	r17, Z+
    20b8:	6f 01       	movw	r12, r30
    20ba:	11 23       	and	r17, r17
    20bc:	09 f4       	brne	.+2      	; 0x20c0 <vfscanf+0xf2>
    20be:	98 c0       	rjmp	.+304    	; 0x21f0 <vfscanf+0x222>
    20c0:	8c e5       	ldi	r24, 0x5C	; 92
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	61 2f       	mov	r22, r17
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	0e 94 12 11 	call	0x2224	; 0x2224 <strchr_P>
    20cc:	89 2b       	or	r24, r25
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <vfscanf+0x104>
    20d0:	8f c0       	rjmp	.+286    	; 0x21f0 <vfscanf+0x222>
    20d2:	80 2f       	mov	r24, r16
    20d4:	00 ff       	sbrs	r16, 0
    20d6:	03 c0       	rjmp	.+6      	; 0x20de <vfscanf+0x110>
    20d8:	ee 24       	eor	r14, r14
    20da:	ff 24       	eor	r15, r15
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <vfscanf+0x11e>
    20de:	f3 01       	movw	r30, r6
    20e0:	e0 80       	ld	r14, Z
    20e2:	f1 80       	ldd	r15, Z+1	; 0x01
    20e4:	22 e0       	ldi	r18, 0x02	; 2
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	62 0e       	add	r6, r18
    20ea:	73 1e       	adc	r7, r19
    20ec:	1e 36       	cpi	r17, 0x6E	; 110
    20ee:	51 f4       	brne	.+20     	; 0x2104 <vfscanf+0x136>
    20f0:	f5 01       	movw	r30, r10
    20f2:	46 81       	ldd	r20, Z+6	; 0x06
    20f4:	57 81       	ldd	r21, Z+7	; 0x07
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	c7 01       	movw	r24, r14
    20fc:	20 2f       	mov	r18, r16
    20fe:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <putval>
    2102:	65 c0       	rjmp	.+202    	; 0x21ce <vfscanf+0x200>
    2104:	13 36       	cpi	r17, 0x63	; 99
    2106:	91 f4       	brne	.+36     	; 0x212c <vfscanf+0x15e>
    2108:	81 fd       	sbrc	r24, 1
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <vfscanf+0x142>
    210c:	99 24       	eor	r9, r9
    210e:	93 94       	inc	r9
    2110:	c5 01       	movw	r24, r10
    2112:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    2116:	97 fd       	sbrc	r25, 7
    2118:	66 c0       	rjmp	.+204    	; 0x21e6 <vfscanf+0x218>
    211a:	e1 14       	cp	r14, r1
    211c:	f1 04       	cpc	r15, r1
    211e:	19 f0       	breq	.+6      	; 0x2126 <vfscanf+0x158>
    2120:	f7 01       	movw	r30, r14
    2122:	81 93       	st	Z+, r24
    2124:	7f 01       	movw	r14, r30
    2126:	9a 94       	dec	r9
    2128:	99 f7       	brne	.-26     	; 0x2110 <vfscanf+0x142>
    212a:	4f c0       	rjmp	.+158    	; 0x21ca <vfscanf+0x1fc>
    212c:	1b 35       	cpi	r17, 0x5B	; 91
    212e:	59 f4       	brne	.+22     	; 0x2146 <vfscanf+0x178>
    2130:	c5 01       	movw	r24, r10
    2132:	69 2d       	mov	r22, r9
    2134:	a7 01       	movw	r20, r14
    2136:	96 01       	movw	r18, r12
    2138:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <conv_brk>
    213c:	6c 01       	movw	r12, r24
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	09 f0       	breq	.+2      	; 0x2144 <vfscanf+0x176>
    2142:	43 c0       	rjmp	.+134    	; 0x21ca <vfscanf+0x1fc>
    2144:	3d c0       	rjmp	.+122    	; 0x21c0 <vfscanf+0x1f2>
    2146:	c5 01       	movw	r24, r10
    2148:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <skip_spaces>
    214c:	97 fd       	sbrc	r25, 7
    214e:	4b c0       	rjmp	.+150    	; 0x21e6 <vfscanf+0x218>
    2150:	1f 36       	cpi	r17, 0x6F	; 111
    2152:	59 f1       	breq	.+86     	; 0x21aa <vfscanf+0x1dc>
    2154:	10 37       	cpi	r17, 0x70	; 112
    2156:	28 f4       	brcc	.+10     	; 0x2162 <vfscanf+0x194>
    2158:	14 36       	cpi	r17, 0x64	; 100
    215a:	29 f1       	breq	.+74     	; 0x21a6 <vfscanf+0x1d8>
    215c:	19 36       	cpi	r17, 0x69	; 105
    215e:	39 f5       	brne	.+78     	; 0x21ae <vfscanf+0x1e0>
    2160:	27 c0       	rjmp	.+78     	; 0x21b0 <vfscanf+0x1e2>
    2162:	13 37       	cpi	r17, 0x73	; 115
    2164:	19 f0       	breq	.+6      	; 0x216c <vfscanf+0x19e>
    2166:	15 37       	cpi	r17, 0x75	; 117
    2168:	11 f5       	brne	.+68     	; 0x21ae <vfscanf+0x1e0>
    216a:	1d c0       	rjmp	.+58     	; 0x21a6 <vfscanf+0x1d8>
    216c:	c5 01       	movw	r24, r10
    216e:	0e 94 33 11 	call	0x2266	; 0x2266 <fgetc>
    2172:	ec 01       	movw	r28, r24
    2174:	97 fd       	sbrc	r25, 7
    2176:	11 c0       	rjmp	.+34     	; 0x219a <vfscanf+0x1cc>
    2178:	0e 94 0a 11 	call	0x2214	; 0x2214 <isspace>
    217c:	89 2b       	or	r24, r25
    217e:	29 f0       	breq	.+10     	; 0x218a <vfscanf+0x1bc>
    2180:	ce 01       	movw	r24, r28
    2182:	b5 01       	movw	r22, r10
    2184:	0e 94 a1 11 	call	0x2342	; 0x2342 <ungetc>
    2188:	08 c0       	rjmp	.+16     	; 0x219a <vfscanf+0x1cc>
    218a:	e1 14       	cp	r14, r1
    218c:	f1 04       	cpc	r15, r1
    218e:	19 f0       	breq	.+6      	; 0x2196 <vfscanf+0x1c8>
    2190:	f7 01       	movw	r30, r14
    2192:	c1 93       	st	Z+, r28
    2194:	7f 01       	movw	r14, r30
    2196:	9a 94       	dec	r9
    2198:	49 f7       	brne	.-46     	; 0x216c <vfscanf+0x19e>
    219a:	e1 14       	cp	r14, r1
    219c:	f1 04       	cpc	r15, r1
    219e:	a9 f0       	breq	.+42     	; 0x21ca <vfscanf+0x1fc>
    21a0:	f7 01       	movw	r30, r14
    21a2:	10 82       	st	Z, r1
    21a4:	12 c0       	rjmp	.+36     	; 0x21ca <vfscanf+0x1fc>
    21a6:	00 62       	ori	r16, 0x20	; 32
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <vfscanf+0x1e2>
    21aa:	00 61       	ori	r16, 0x10	; 16
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <vfscanf+0x1e2>
    21ae:	00 64       	ori	r16, 0x40	; 64
    21b0:	c5 01       	movw	r24, r10
    21b2:	69 2d       	mov	r22, r9
    21b4:	a7 01       	movw	r20, r14
    21b6:	20 2f       	mov	r18, r16
    21b8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <conv_int>
    21bc:	88 23       	and	r24, r24
    21be:	29 f4       	brne	.+10     	; 0x21ca <vfscanf+0x1fc>
    21c0:	f5 01       	movw	r30, r10
    21c2:	83 81       	ldd	r24, Z+3	; 0x03
    21c4:	80 73       	andi	r24, 0x30	; 48
    21c6:	79 f4       	brne	.+30     	; 0x21e6 <vfscanf+0x218>
    21c8:	13 c0       	rjmp	.+38     	; 0x21f0 <vfscanf+0x222>
    21ca:	00 ff       	sbrs	r16, 0
    21cc:	83 94       	inc	r8
    21ce:	f5 01       	movw	r30, r10
    21d0:	f3 80       	ldd	r15, Z+3	; 0x03
    21d2:	f6 01       	movw	r30, r12
    21d4:	f3 fc       	sbrc	r15, 3
    21d6:	15 91       	lpm	r17, Z+
    21d8:	f3 fe       	sbrs	r15, 3
    21da:	11 91       	ld	r17, Z+
    21dc:	6f 01       	movw	r12, r30
    21de:	11 23       	and	r17, r17
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <vfscanf+0x216>
    21e2:	0b cf       	rjmp	.-490    	; 0x1ffa <vfscanf+0x2c>
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <vfscanf+0x222>
    21e6:	88 20       	and	r8, r8
    21e8:	19 f4       	brne	.+6      	; 0x21f0 <vfscanf+0x222>
    21ea:	2f ef       	ldi	r18, 0xFF	; 255
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vfscanf+0x226>
    21f0:	28 2d       	mov	r18, r8
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	c9 01       	movw	r24, r18
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	bf 90       	pop	r11
    2208:	af 90       	pop	r10
    220a:	9f 90       	pop	r9
    220c:	8f 90       	pop	r8
    220e:	7f 90       	pop	r7
    2210:	6f 90       	pop	r6
    2212:	08 95       	ret

00002214 <isspace>:
    2214:	91 11       	cpse	r25, r1
    2216:	0d c1       	rjmp	.+538    	; 0x2432 <__ctype_isfalse>
    2218:	80 32       	cpi	r24, 0x20	; 32
    221a:	19 f0       	breq	.+6      	; 0x2222 <isspace+0xe>
    221c:	89 50       	subi	r24, 0x09	; 9
    221e:	85 50       	subi	r24, 0x05	; 5
    2220:	d0 f7       	brcc	.-12     	; 0x2216 <isspace+0x2>
    2222:	08 95       	ret

00002224 <strchr_P>:
    2224:	fc 01       	movw	r30, r24
    2226:	05 90       	lpm	r0, Z+
    2228:	06 16       	cp	r0, r22
    222a:	21 f0       	breq	.+8      	; 0x2234 <strchr_P+0x10>
    222c:	00 20       	and	r0, r0
    222e:	d9 f7       	brne	.-10     	; 0x2226 <strchr_P+0x2>
    2230:	c0 01       	movw	r24, r0
    2232:	08 95       	ret
    2234:	31 97       	sbiw	r30, 0x01	; 1
    2236:	cf 01       	movw	r24, r30
    2238:	08 95       	ret

0000223a <strnlen_P>:
    223a:	fc 01       	movw	r30, r24
    223c:	05 90       	lpm	r0, Z+
    223e:	61 50       	subi	r22, 0x01	; 1
    2240:	70 40       	sbci	r23, 0x00	; 0
    2242:	01 10       	cpse	r0, r1
    2244:	d8 f7       	brcc	.-10     	; 0x223c <strnlen_P+0x2>
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	8e 0f       	add	r24, r30
    224c:	9f 1f       	adc	r25, r31
    224e:	08 95       	ret

00002250 <strnlen>:
    2250:	fc 01       	movw	r30, r24
    2252:	61 50       	subi	r22, 0x01	; 1
    2254:	70 40       	sbci	r23, 0x00	; 0
    2256:	01 90       	ld	r0, Z+
    2258:	01 10       	cpse	r0, r1
    225a:	d8 f7       	brcc	.-10     	; 0x2252 <strnlen+0x2>
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	8e 0f       	add	r24, r30
    2262:	9f 1f       	adc	r25, r31
    2264:	08 95       	ret

00002266 <fgetc>:
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
    226c:	4b 81       	ldd	r20, Y+3	; 0x03
    226e:	40 ff       	sbrs	r20, 0
    2270:	1a c0       	rjmp	.+52     	; 0x22a6 <fgetc+0x40>
    2272:	46 ff       	sbrs	r20, 6
    2274:	0a c0       	rjmp	.+20     	; 0x228a <fgetc+0x24>
    2276:	4f 7b       	andi	r20, 0xBF	; 191
    2278:	4b 83       	std	Y+3, r20	; 0x03
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	9f 83       	std	Y+7, r25	; 0x07
    2282:	8e 83       	std	Y+6, r24	; 0x06
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	2b c0       	rjmp	.+86     	; 0x22e0 <fgetc+0x7a>
    228a:	42 ff       	sbrs	r20, 2
    228c:	13 c0       	rjmp	.+38     	; 0x22b4 <fgetc+0x4e>
    228e:	e8 81       	ld	r30, Y
    2290:	f9 81       	ldd	r31, Y+1	; 0x01
    2292:	80 81       	ld	r24, Z
    2294:	28 2f       	mov	r18, r24
    2296:	33 27       	eor	r19, r19
    2298:	27 fd       	sbrc	r18, 7
    229a:	30 95       	com	r19
    229c:	21 15       	cp	r18, r1
    229e:	31 05       	cpc	r19, r1
    22a0:	29 f4       	brne	.+10     	; 0x22ac <fgetc+0x46>
    22a2:	40 62       	ori	r20, 0x20	; 32
    22a4:	4b 83       	std	Y+3, r20	; 0x03
    22a6:	2f ef       	ldi	r18, 0xFF	; 255
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	1b c0       	rjmp	.+54     	; 0x22e2 <fgetc+0x7c>
    22ac:	31 96       	adiw	r30, 0x01	; 1
    22ae:	f9 83       	std	Y+1, r31	; 0x01
    22b0:	e8 83       	st	Y, r30
    22b2:	11 c0       	rjmp	.+34     	; 0x22d6 <fgetc+0x70>
    22b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    22b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    22b8:	ce 01       	movw	r24, r28
    22ba:	09 95       	icall
    22bc:	9c 01       	movw	r18, r24
    22be:	97 ff       	sbrs	r25, 7
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <fgetc+0x70>
    22c2:	9b 81       	ldd	r25, Y+3	; 0x03
    22c4:	2f 5f       	subi	r18, 0xFF	; 255
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
    22c8:	11 f0       	breq	.+4      	; 0x22ce <fgetc+0x68>
    22ca:	80 e2       	ldi	r24, 0x20	; 32
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <fgetc+0x6a>
    22ce:	80 e1       	ldi	r24, 0x10	; 16
    22d0:	89 2b       	or	r24, r25
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    22d4:	e8 cf       	rjmp	.-48     	; 0x22a6 <fgetc+0x40>
    22d6:	8e 81       	ldd	r24, Y+6	; 0x06
    22d8:	9f 81       	ldd	r25, Y+7	; 0x07
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	9f 83       	std	Y+7, r25	; 0x07
    22de:	8e 83       	std	Y+6, r24	; 0x06
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	c9 01       	movw	r24, r18
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <fputc>:
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	8c 01       	movw	r16, r24
    22f4:	eb 01       	movw	r28, r22
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	81 ff       	sbrs	r24, 1
    22fa:	1b c0       	rjmp	.+54     	; 0x2332 <fputc+0x48>
    22fc:	82 ff       	sbrs	r24, 2
    22fe:	0d c0       	rjmp	.+26     	; 0x231a <fputc+0x30>
    2300:	2e 81       	ldd	r18, Y+6	; 0x06
    2302:	3f 81       	ldd	r19, Y+7	; 0x07
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
    2306:	9d 81       	ldd	r25, Y+5	; 0x05
    2308:	28 17       	cp	r18, r24
    230a:	39 07       	cpc	r19, r25
    230c:	64 f4       	brge	.+24     	; 0x2326 <fputc+0x3c>
    230e:	e8 81       	ld	r30, Y
    2310:	f9 81       	ldd	r31, Y+1	; 0x01
    2312:	01 93       	st	Z+, r16
    2314:	f9 83       	std	Y+1, r31	; 0x01
    2316:	e8 83       	st	Y, r30
    2318:	06 c0       	rjmp	.+12     	; 0x2326 <fputc+0x3c>
    231a:	e8 85       	ldd	r30, Y+8	; 0x08
    231c:	f9 85       	ldd	r31, Y+9	; 0x09
    231e:	80 2f       	mov	r24, r16
    2320:	09 95       	icall
    2322:	89 2b       	or	r24, r25
    2324:	31 f4       	brne	.+12     	; 0x2332 <fputc+0x48>
    2326:	8e 81       	ldd	r24, Y+6	; 0x06
    2328:	9f 81       	ldd	r25, Y+7	; 0x07
    232a:	01 96       	adiw	r24, 0x01	; 1
    232c:	9f 83       	std	Y+7, r25	; 0x07
    232e:	8e 83       	std	Y+6, r24	; 0x06
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <fputc+0x4c>
    2332:	0f ef       	ldi	r16, 0xFF	; 255
    2334:	1f ef       	ldi	r17, 0xFF	; 255
    2336:	c8 01       	movw	r24, r16
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	08 95       	ret

00002342 <ungetc>:
    2342:	9c 01       	movw	r18, r24
    2344:	fb 01       	movw	r30, r22
    2346:	83 81       	ldd	r24, Z+3	; 0x03
    2348:	80 ff       	sbrs	r24, 0
    234a:	11 c0       	rjmp	.+34     	; 0x236e <ungetc+0x2c>
    234c:	86 fd       	sbrc	r24, 6
    234e:	0f c0       	rjmp	.+30     	; 0x236e <ungetc+0x2c>
    2350:	9f ef       	ldi	r25, 0xFF	; 255
    2352:	2f 3f       	cpi	r18, 0xFF	; 255
    2354:	39 07       	cpc	r19, r25
    2356:	59 f0       	breq	.+22     	; 0x236e <ungetc+0x2c>
    2358:	22 83       	std	Z+2, r18	; 0x02
    235a:	80 64       	ori	r24, 0x40	; 64
    235c:	8f 7d       	andi	r24, 0xDF	; 223
    235e:	83 83       	std	Z+3, r24	; 0x03
    2360:	86 81       	ldd	r24, Z+6	; 0x06
    2362:	97 81       	ldd	r25, Z+7	; 0x07
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	97 83       	std	Z+7, r25	; 0x07
    2368:	86 83       	std	Z+6, r24	; 0x06
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <ungetc+0x30>
    236e:	2f ef       	ldi	r18, 0xFF	; 255
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	c9 01       	movw	r24, r18
    2374:	08 95       	ret

00002376 <__ultoa_invert>:
    2376:	fa 01       	movw	r30, r20
    2378:	aa 27       	eor	r26, r26
    237a:	28 30       	cpi	r18, 0x08	; 8
    237c:	51 f1       	breq	.+84     	; 0x23d2 <__ultoa_invert+0x5c>
    237e:	20 31       	cpi	r18, 0x10	; 16
    2380:	81 f1       	breq	.+96     	; 0x23e2 <__ultoa_invert+0x6c>
    2382:	e8 94       	clt
    2384:	6f 93       	push	r22
    2386:	6e 7f       	andi	r22, 0xFE	; 254
    2388:	6e 5f       	subi	r22, 0xFE	; 254
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	8f 4f       	sbci	r24, 0xFF	; 255
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	af 4f       	sbci	r26, 0xFF	; 255
    2392:	b1 e0       	ldi	r27, 0x01	; 1
    2394:	3e d0       	rcall	.+124    	; 0x2412 <__ultoa_invert+0x9c>
    2396:	b4 e0       	ldi	r27, 0x04	; 4
    2398:	3c d0       	rcall	.+120    	; 0x2412 <__ultoa_invert+0x9c>
    239a:	67 0f       	add	r22, r23
    239c:	78 1f       	adc	r23, r24
    239e:	89 1f       	adc	r24, r25
    23a0:	9a 1f       	adc	r25, r26
    23a2:	a1 1d       	adc	r26, r1
    23a4:	68 0f       	add	r22, r24
    23a6:	79 1f       	adc	r23, r25
    23a8:	8a 1f       	adc	r24, r26
    23aa:	91 1d       	adc	r25, r1
    23ac:	a1 1d       	adc	r26, r1
    23ae:	6a 0f       	add	r22, r26
    23b0:	71 1d       	adc	r23, r1
    23b2:	81 1d       	adc	r24, r1
    23b4:	91 1d       	adc	r25, r1
    23b6:	a1 1d       	adc	r26, r1
    23b8:	20 d0       	rcall	.+64     	; 0x23fa <__ultoa_invert+0x84>
    23ba:	09 f4       	brne	.+2      	; 0x23be <__ultoa_invert+0x48>
    23bc:	68 94       	set
    23be:	3f 91       	pop	r19
    23c0:	2a e0       	ldi	r18, 0x0A	; 10
    23c2:	26 9f       	mul	r18, r22
    23c4:	11 24       	eor	r1, r1
    23c6:	30 19       	sub	r19, r0
    23c8:	30 5d       	subi	r19, 0xD0	; 208
    23ca:	31 93       	st	Z+, r19
    23cc:	de f6       	brtc	.-74     	; 0x2384 <__ultoa_invert+0xe>
    23ce:	cf 01       	movw	r24, r30
    23d0:	08 95       	ret
    23d2:	46 2f       	mov	r20, r22
    23d4:	47 70       	andi	r20, 0x07	; 7
    23d6:	40 5d       	subi	r20, 0xD0	; 208
    23d8:	41 93       	st	Z+, r20
    23da:	b3 e0       	ldi	r27, 0x03	; 3
    23dc:	0f d0       	rcall	.+30     	; 0x23fc <__ultoa_invert+0x86>
    23de:	c9 f7       	brne	.-14     	; 0x23d2 <__ultoa_invert+0x5c>
    23e0:	f6 cf       	rjmp	.-20     	; 0x23ce <__ultoa_invert+0x58>
    23e2:	46 2f       	mov	r20, r22
    23e4:	4f 70       	andi	r20, 0x0F	; 15
    23e6:	40 5d       	subi	r20, 0xD0	; 208
    23e8:	4a 33       	cpi	r20, 0x3A	; 58
    23ea:	18 f0       	brcs	.+6      	; 0x23f2 <__ultoa_invert+0x7c>
    23ec:	49 5d       	subi	r20, 0xD9	; 217
    23ee:	31 fd       	sbrc	r19, 1
    23f0:	40 52       	subi	r20, 0x20	; 32
    23f2:	41 93       	st	Z+, r20
    23f4:	02 d0       	rcall	.+4      	; 0x23fa <__ultoa_invert+0x84>
    23f6:	a9 f7       	brne	.-22     	; 0x23e2 <__ultoa_invert+0x6c>
    23f8:	ea cf       	rjmp	.-44     	; 0x23ce <__ultoa_invert+0x58>
    23fa:	b4 e0       	ldi	r27, 0x04	; 4
    23fc:	a6 95       	lsr	r26
    23fe:	97 95       	ror	r25
    2400:	87 95       	ror	r24
    2402:	77 95       	ror	r23
    2404:	67 95       	ror	r22
    2406:	ba 95       	dec	r27
    2408:	c9 f7       	brne	.-14     	; 0x23fc <__ultoa_invert+0x86>
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	61 05       	cpc	r22, r1
    240e:	71 05       	cpc	r23, r1
    2410:	08 95       	ret
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	0a 2e       	mov	r0, r26
    2418:	06 94       	lsr	r0
    241a:	57 95       	ror	r21
    241c:	47 95       	ror	r20
    241e:	37 95       	ror	r19
    2420:	27 95       	ror	r18
    2422:	ba 95       	dec	r27
    2424:	c9 f7       	brne	.-14     	; 0x2418 <__ultoa_invert+0xa2>
    2426:	62 0f       	add	r22, r18
    2428:	73 1f       	adc	r23, r19
    242a:	84 1f       	adc	r24, r20
    242c:	95 1f       	adc	r25, r21
    242e:	a0 1d       	adc	r26, r0
    2430:	08 95       	ret

00002432 <__ctype_isfalse>:
    2432:	99 27       	eor	r25, r25
    2434:	88 27       	eor	r24, r24

00002436 <__ctype_istrue>:
    2436:	08 95       	ret

00002438 <_exit>:
    2438:	f8 94       	cli

0000243a <__stop_program>:
    243a:	ff cf       	rjmp	.-2      	; 0x243a <__stop_program>
