
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00001e26  00001eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a8  008001a8  00001f62  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000039e  00000000  00000000  00001fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bb3  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00003f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001225  00000000  00000000  000044fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00005720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ac2  00000000  00000000  00005df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  000068b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      14:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      38:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      40:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      50:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      68:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      6c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      70:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      74:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      78:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      7c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      80:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      84:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      88:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_printing>:
      9e:	50 72 69 6e 74 69 6e 67 20 20 20 20 20 20 20 20     Printing        
	...

000000b0 <LCD_waiting>:
      b0:	57 61 69 74 69 6e 67 20 66 6f 72 20 66 69 6c 65     Waiting for file
	...

000000c2 <LCD_null>:
      c2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000d4 <LCD_hello>:
      d4:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000e6 <LCD_move>:
      e6:	61 62 6f 75 74 20 74 6f 20 6d 6f 76 65 20 20 20     about to move   
	...

000000f8 <LCD_moving>:
      f8:	6d 6f 76 69 6e 67 20 20 20 20 20 20 20 20 20 20     moving          
	...

0000010a <LcdCustomChar>:
     10a:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     11a:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     12a:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     13a:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000014a <__c.1988>:
     14a:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf ef       	ldi	r28, 0xFF	; 255
     15c:	d0 e4       	ldi	r29, 0x40	; 64
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e0       	ldi	r26, 0x00	; 0
     166:	b1 e0       	ldi	r27, 0x01	; 1
     168:	e6 e2       	ldi	r30, 0x26	; 38
     16a:	fe e1       	ldi	r31, 0x1E	; 30
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	0b bf       	out	0x3b, r16	; 59
     170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x14>
     172:	07 90       	elpm	r0, Z+
     174:	0d 92       	st	X+, r0
     176:	a8 3a       	cpi	r26, 0xA8	; 168
     178:	b1 07       	cpc	r27, r17
     17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0x10>

0000017c <__do_clear_bss>:
     17c:	14 e0       	ldi	r17, 0x04	; 4
     17e:	a8 ea       	ldi	r26, 0xA8	; 168
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	af 37       	cpi	r26, 0x7F	; 127
     188:	b1 07       	cpc	r27, r17
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
     18c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
     190:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <_exit>

00000194 <__bad_interrupt>:
     194:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000198 <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     198:	ec e7       	ldi	r30, 0x7C	; 124
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	10 82       	st	Z, r1
	ADCSRA = 0;
     19e:	aa e7       	ldi	r26, 0x7A	; 122
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     1a4:	80 e4       	ldi	r24, 0x40	; 64
     1a6:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	8c 93       	st	X, r24
end
     1ac:	08 95       	ret

000001ae <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     1ae:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     1b4:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x00;    // start with no power
     1b6:	1b b8       	out	0x0b, r1	; 11
end
     1b8:	08 95       	ret

000001ba <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     1ba:	ec e7       	ldi	r30, 0x7C	; 124
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     1c0:	80 54       	subi	r24, 0x40	; 64
     1c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1c4:	ea e7       	ldi	r30, 0x7A	; 122
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 64       	ori	r24, 0x40	; 64
     1cc:	80 83       	st	Z, r24
end
     1ce:	08 95       	ret

000001d0 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     1d0:	5d 98       	cbi	0x0b, 5	; 11
     1d2:	88 e8       	ldi	r24, 0x88	; 136
     1d4:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d6:	20 e9       	ldi	r18, 0x90	; 144
     1d8:	31 e0       	ldi	r19, 0x01	; 1
     1da:	f9 01       	movw	r30, r18
     1dc:	31 97       	sbiw	r30, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e2:	d9 f7       	brne	.-10     	; 0x1da <raise_pen+0xa>
	_delay_ms(500);
end
     1e4:	08 95       	ret

000001e6 <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     1e6:	5d 9a       	sbi	0x0b, 5	; 11
     1e8:	80 ea       	ldi	r24, 0xA0	; 160
     1ea:	9f e0       	ldi	r25, 0x0F	; 15
     1ec:	20 e9       	ldi	r18, 0x90	; 144
     1ee:	31 e0       	ldi	r19, 0x01	; 1
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <lower_pen+0xa>
	_delay_ms(400);
end
     1fa:	08 95       	ret

000001fc <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     1fc:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1fe:	8a e1       	ldi	r24, 0x1A	; 26
     200:	8a 95       	dec	r24
     202:	f1 f7       	brne	.-4      	; 0x200 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     204:	5a 9a       	sbi	0x0b, 2	; 11
end
     206:	08 95       	ret

00000208 <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     208:	5a 98       	cbi	0x0b, 2	; 11
     20a:	8a e1       	ldi	r24, 0x1A	; 26
     20c:	8a 95       	dec	r24
     20e:	f1 f7       	brne	.-4      	; 0x20c <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     210:	5b 9a       	sbi	0x0b, 3	; 11
end
     212:	08 95       	ret

00000214 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     214:	5e 98       	cbi	0x0b, 6	; 11
     216:	8a e1       	ldi	r24, 0x1A	; 26
     218:	8a 95       	dec	r24
     21a:	f1 f7       	brne	.-4      	; 0x218 <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     21c:	5f 9a       	sbi	0x0b, 7	; 11
end
     21e:	08 95       	ret

00000220 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     220:	5f 98       	cbi	0x0b, 7	; 11
     222:	8a e1       	ldi	r24, 0x1A	; 26
     224:	8a 95       	dec	r24
     226:	f1 f7       	brne	.-4      	; 0x224 <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     228:	5e 9a       	sbi	0x0b, 6	; 11
end
     22a:	08 95       	ret

0000022c <stop_x>:

void stop_x(void)
begin
	PORTD &= ~0x18;
     22c:	8b b1       	in	r24, 0x0b	; 11
     22e:	87 7e       	andi	r24, 0xE7	; 231
     230:	8b b9       	out	0x0b, r24	; 11
end
     232:	08 95       	ret

00000234 <stop_y>:

void stop_y(void)
begin
	PORTD &= ~0xc0; 
     234:	8b b1       	in	r24, 0x0b	; 11
     236:	8f 73       	andi	r24, 0x3F	; 63
     238:	8b b9       	out	0x0b, r24	; 11

end
     23a:	08 95       	ret

0000023c <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x23;
     23c:	8b b1       	in	r24, 0x0b	; 11
     23e:	83 72       	andi	r24, 0x23	; 35
     240:	8b b9       	out	0x0b, r24	; 11
     242:	88 ee       	ldi	r24, 0xE8	; 232
     244:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	20 e9       	ldi	r18, 0x90	; 144
     248:	31 e0       	ldi	r19, 0x01	; 1
     24a:	f9 01       	movw	r30, r18
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     250:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     252:	d9 f7       	brne	.-10     	; 0x24a <stop_all+0xe>
	_delay_ms(100);
end
     254:	08 95       	ret

00000256 <circle>:

// draw a circle
void circle(void)
begin
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     25c:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     25e:	8a e1       	ldi	r24, 0x1A	; 26
     260:	f8 2e       	mov	r15, r24
     262:	8f 2d       	mov	r24, r15
     264:	8a 95       	dec	r24
     266:	f1 f7       	brne	.-4      	; 0x264 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     268:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     26a:	00 e8       	ldi	r16, 0x80	; 128
     26c:	1e e3       	ldi	r17, 0x3E	; 62
     26e:	c8 01       	movw	r24, r16
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     274:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     278:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     27a:	8f 2d       	mov	r24, r15
     27c:	8a 95       	dec	r24
     27e:	f1 f7       	brne	.-4      	; 0x27c <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     280:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     282:	c8 01       	movw	r24, r16
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     288:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     28a:	8f 2d       	mov	r24, r15
     28c:	8a 95       	dec	r24
     28e:	f1 f7       	brne	.-4      	; 0x28c <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     290:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     292:	c8 01       	movw	r24, r16
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     298:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     29c:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29e:	8f 2d       	mov	r24, r15
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     2a4:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2a6:	80 ee       	ldi	r24, 0xE0	; 224
     2a8:	9e e2       	ldi	r25, 0x2E	; 46
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     2ae:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2b2:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b4:	8f 2d       	mov	r24, r15
     2b6:	8a 95       	dec	r24
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     2ba:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2bc:	00 e8       	ldi	r16, 0x80	; 128
     2be:	15 e2       	ldi	r17, 0x25	; 37
     2c0:	c8 01       	movw	r24, r16
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     2c6:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2ca:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2cc:	8f 2d       	mov	r24, r15
     2ce:	8a 95       	dec	r24
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     2d2:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d4:	c8 01       	movw	r24, r16
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2da:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2dc:	8f 2d       	mov	r24, r15
     2de:	8a 95       	dec	r24
     2e0:	f1 f7       	brne	.-4      	; 0x2de <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     2e2:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e4:	c8 01       	movw	r24, r16
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2ea:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2ee:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f0:	8f 2d       	mov	r24, r15
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     2f6:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	80 e7       	ldi	r24, 0x70	; 112
     2fa:	97 e1       	ldi	r25, 0x17	; 23
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     300:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     304:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     306:	8f 2d       	mov	r24, r15
     308:	8a 95       	dec	r24
     30a:	f1 f7       	brne	.-4      	; 0x308 <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     30c:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30e:	00 ea       	ldi	r16, 0xA0	; 160
     310:	1f e0       	ldi	r17, 0x0F	; 15
     312:	c8 01       	movw	r24, r16
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     318:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     31c:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     31e:	8f 2d       	mov	r24, r15
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     324:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     326:	c8 01       	movw	r24, r16
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     32c:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     32e:	8f 2d       	mov	r24, r15
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     334:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     336:	c8 01       	movw	r24, r16
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     33c:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     340:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     342:	fa 94       	dec	r15
     344:	f1 f7       	brne	.-4      	; 0x342 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     346:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     348:	80 ef       	ldi	r24, 0xF0	; 240
     34a:	9a e0       	ldi	r25, 0x0A	; 10
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     350:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
end
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	08 95       	ret

0000035c <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     360:	20 91 d4 02 	lds	r18, 0x02D4
     364:	30 91 d5 02 	lds	r19, 0x02D5
     368:	00 d0       	rcall	.+0      	; 0x36a <print_position+0xe>
     36a:	00 d0       	rcall	.+0      	; 0x36c <print_position+0x10>
     36c:	00 d0       	rcall	.+0      	; 0x36e <print_position+0x12>
     36e:	ed b7       	in	r30, 0x3d	; 61
     370:	fe b7       	in	r31, 0x3e	; 62
     372:	31 96       	adiw	r30, 0x01	; 1
     374:	02 ec       	ldi	r16, 0xC2	; 194
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	ad b7       	in	r26, 0x3d	; 61
     37a:	be b7       	in	r27, 0x3e	; 62
     37c:	12 96       	adiw	r26, 0x02	; 2
     37e:	1c 93       	st	X, r17
     380:	0e 93       	st	-X, r16
     382:	11 97       	sbiw	r26, 0x01	; 1
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	93 83       	std	Z+3, r25	; 0x03
     38a:	82 83       	std	Z+2, r24	; 0x02
     38c:	35 83       	std	Z+5, r19	; 0x05
     38e:	24 83       	std	Z+4, r18	; 0x04
     390:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
	LCDGotoXY(0,1);
     394:	8d b7       	in	r24, 0x3d	; 61
     396:	9e b7       	in	r25, 0x3e	; 62
     398:	06 96       	adiw	r24, 0x06	; 6
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	9e bf       	out	0x3e, r25	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	8d bf       	out	0x3d, r24	; 61
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3ac:	f8 01       	movw	r30, r16
     3ae:	01 90       	ld	r0, Z+
     3b0:	00 20       	and	r0, r0
     3b2:	e9 f7       	brne	.-6      	; 0x3ae <print_position+0x52>
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	e0 1b       	sub	r30, r16
     3b8:	f1 0b       	sbc	r31, r17
     3ba:	c8 01       	movw	r24, r16
     3bc:	6e 2f       	mov	r22, r30
     3be:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     3c2:	20 91 9e 03 	lds	r18, 0x039E
     3c6:	30 91 9f 03 	lds	r19, 0x039F
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <print_position+0x70>
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <print_position+0x72>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <print_position+0x74>
     3d0:	ed b7       	in	r30, 0x3d	; 61
     3d2:	fe b7       	in	r31, 0x3e	; 62
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	ad b7       	in	r26, 0x3d	; 61
     3d8:	be b7       	in	r27, 0x3e	; 62
     3da:	12 96       	adiw	r26, 0x02	; 2
     3dc:	1c 93       	st	X, r17
     3de:	0e 93       	st	-X, r16
     3e0:	11 97       	sbiw	r26, 0x01	; 1
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	93 83       	std	Z+3, r25	; 0x03
     3e8:	82 83       	std	Z+2, r24	; 0x02
     3ea:	35 83       	std	Z+5, r19	; 0x05
     3ec:	24 83       	std	Z+4, r18	; 0x04
     3ee:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
	LCDGotoXY(8,1);
     3f2:	8d b7       	in	r24, 0x3d	; 61
     3f4:	9e b7       	in	r25, 0x3e	; 62
     3f6:	06 96       	adiw	r24, 0x06	; 6
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	9e bf       	out	0x3e, r25	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	8d bf       	out	0x3d, r24	; 61
     402:	88 e0       	ldi	r24, 0x08	; 8
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     40a:	f8 01       	movw	r30, r16
     40c:	01 90       	ld	r0, Z+
     40e:	00 20       	and	r0, r0
     410:	e9 f7       	brne	.-6      	; 0x40c <print_position+0xb0>
     412:	31 97       	sbiw	r30, 0x01	; 1
     414:	e0 1b       	sub	r30, r16
     416:	f1 0b       	sbc	r31, r17
     418:	c8 01       	movw	r24, r16
     41a:	6e 2f       	mov	r22, r30
     41c:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
end
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	ec 01       	movw	r28, r24
     430:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     432:	42 30       	cpi	r20, 0x02	; 2
     434:	51 05       	cpc	r21, r1
     436:	19 f4       	brne	.+6      	; 0x43e <move_to_XY+0x18>
     438:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <raise_pen>
     43c:	05 c0       	rjmp	.+10     	; 0x448 <move_to_XY+0x22>
	if (d==1) lower_pen();
     43e:	41 30       	cpi	r20, 0x01	; 1
     440:	51 05       	cpc	r21, r1
     442:	11 f4       	brne	.+4      	; 0x448 <move_to_XY+0x22>
     444:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lower_pen>
	if(x_in>0 && y_in>0)
     448:	1c 16       	cp	r1, r28
     44a:	1d 06       	cpc	r1, r29
     44c:	0c f0       	brlt	.+2      	; 0x450 <move_to_XY+0x2a>
     44e:	28 c1       	rjmp	.+592    	; 0x6a0 <move_to_XY+0x27a>
     450:	10 16       	cp	r1, r16
     452:	11 06       	cpc	r1, r17
     454:	0c f0       	brlt	.+2      	; 0x458 <move_to_XY+0x32>
     456:	24 c1       	rjmp	.+584    	; 0x6a0 <move_to_XY+0x27a>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     458:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     45c:	80 ec       	ldi	r24, 0xC0	; 192
     45e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     462:	80 91 7a 00 	lds	r24, 0x007A
     466:	80 64       	ori	r24, 0x40	; 64
     468:	80 93 7a 00 	sts	0x007A, r24
	if (d==1) lower_pen();
	if(x_in>0 && y_in>0)
	begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     46c:	80 91 7a 00 	lds	r24, 0x007A
     470:	86 fd       	sbrc	r24, 6
     472:	fc cf       	rjmp	.-8      	; 0x46c <move_to_XY+0x46>
		x_pos = (int)ADCL;
     474:	80 91 78 00 	lds	r24, 0x0078
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 d5 02 	sts	0x02D5, r25
     47e:	80 93 d4 02 	sts	0x02D4, r24
		x_pos += (int)(ADCH*256);
     482:	40 91 d4 02 	lds	r20, 0x02D4
     486:	50 91 d5 02 	lds	r21, 0x02D5
     48a:	20 91 79 00 	lds	r18, 0x0079
     48e:	92 2f       	mov	r25, r18
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	84 0f       	add	r24, r20
     494:	95 1f       	adc	r25, r21
     496:	90 93 d5 02 	sts	0x02D5, r25
     49a:	80 93 d4 02 	sts	0x02D4, r24

		if (x_pos > x_in)
     49e:	80 91 d4 02 	lds	r24, 0x02D4
     4a2:	90 91 d5 02 	lds	r25, 0x02D5
     4a6:	c8 17       	cp	r28, r24
     4a8:	d9 07       	cpc	r29, r25
     4aa:	50 f1       	brcs	.+84     	; 0x500 <move_to_XY+0xda>
     4ac:	5c c0       	rjmp	.+184    	; 0x566 <move_to_XY+0x140>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4ae:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4b2:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     4b6:	80 91 7a 00 	lds	r24, 0x007A
     4ba:	80 64       	ori	r24, 0x40	; 64
     4bc:	80 93 7a 00 	sts	0x007A, r24
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <move_to_XY+0xa6>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     4c2:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c4:	84 2f       	mov	r24, r20
     4c6:	8a 95       	dec	r24
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <move_to_XY+0xa0>
	_delay_us(5);
	PORTD |= 0x04;
     4ca:	5a 9a       	sbi	0x0b, 2	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_negative_x();
     4cc:	80 91 7a 00 	lds	r24, 0x007A
     4d0:	86 fd       	sbrc	r24, 6
     4d2:	f7 cf       	rjmp	.-18     	; 0x4c2 <move_to_XY+0x9c>
				x_pos = (int)ADCL;
     4d4:	80 91 78 00 	lds	r24, 0x0078
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 93 d5 02 	sts	0x02D5, r25
     4de:	80 93 d4 02 	sts	0x02D4, r24
				x_pos += (int)(ADCH*256);
     4e2:	80 91 d4 02 	lds	r24, 0x02D4
     4e6:	90 91 d5 02 	lds	r25, 0x02D5
     4ea:	20 91 79 00 	lds	r18, 0x0079
     4ee:	32 2f       	mov	r19, r18
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	90 93 d5 02 	sts	0x02D5, r25
     4fa:	80 93 d4 02 	sts	0x02D4, r24
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <move_to_XY+0xde>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     500:	50 ec       	ldi	r21, 0xC0	; 192
     502:	4a e1       	ldi	r20, 0x1A	; 26
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     504:	80 91 d4 02 	lds	r24, 0x02D4
     508:	90 91 d5 02 	lds	r25, 0x02D5
     50c:	c8 17       	cp	r28, r24
     50e:	d9 07       	cpc	r29, r25
     510:	70 f2       	brcs	.-100    	; 0x4ae <move_to_XY+0x88>
     512:	32 c0       	rjmp	.+100    	; 0x578 <move_to_XY+0x152>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     514:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     518:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     51c:	80 91 7a 00 	lds	r24, 0x007A
     520:	80 64       	ori	r24, 0x40	; 64
     522:	80 93 7a 00 	sts	0x007A, r24
     526:	05 c0       	rjmp	.+10     	; 0x532 <move_to_XY+0x10c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     528:	5a 98       	cbi	0x0b, 2	; 11
     52a:	84 2f       	mov	r24, r20
     52c:	8a 95       	dec	r24
     52e:	f1 f7       	brne	.-4      	; 0x52c <move_to_XY+0x106>
	_delay_us(5);
	PORTD |= 0x08;
     530:	5b 9a       	sbi	0x0b, 3	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
     532:	80 91 7a 00 	lds	r24, 0x007A
     536:	86 fd       	sbrc	r24, 6
     538:	f7 cf       	rjmp	.-18     	; 0x528 <move_to_XY+0x102>
				x_pos = (int)ADCL;
     53a:	80 91 78 00 	lds	r24, 0x0078
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 d5 02 	sts	0x02D5, r25
     544:	80 93 d4 02 	sts	0x02D4, r24
				x_pos += (int)(ADCH*256);
     548:	80 91 d4 02 	lds	r24, 0x02D4
     54c:	90 91 d5 02 	lds	r25, 0x02D5
     550:	20 91 79 00 	lds	r18, 0x0079
     554:	32 2f       	mov	r19, r18
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	90 93 d5 02 	sts	0x02D5, r25
     560:	80 93 d4 02 	sts	0x02D4, r24
     564:	02 c0       	rjmp	.+4      	; 0x56a <move_to_XY+0x144>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     566:	50 ec       	ldi	r21, 0xC0	; 192
     568:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     56a:	80 91 d4 02 	lds	r24, 0x02D4
     56e:	90 91 d5 02 	lds	r25, 0x02D5
     572:	8c 17       	cp	r24, r28
     574:	9d 07       	cpc	r25, r29
     576:	70 f2       	brcs	.-100    	; 0x514 <move_to_XY+0xee>
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
			end
			stop_all();
     578:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     57c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     580:	81 ec       	ldi	r24, 0xC1	; 193
     582:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     586:	80 91 7a 00 	lds	r24, 0x007A
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 93 7a 00 	sts	0x007A, r24
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     590:	80 91 7a 00 	lds	r24, 0x007A
     594:	86 fd       	sbrc	r24, 6
     596:	fc cf       	rjmp	.-8      	; 0x590 <move_to_XY+0x16a>
		y_pos = (int)ADCL;
     598:	80 91 78 00 	lds	r24, 0x0078
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	90 93 9f 03 	sts	0x039F, r25
     5a2:	80 93 9e 03 	sts	0x039E, r24
		y_pos += (int)(ADCH*256);
     5a6:	40 91 9e 03 	lds	r20, 0x039E
     5aa:	50 91 9f 03 	lds	r21, 0x039F
     5ae:	20 91 79 00 	lds	r18, 0x0079
     5b2:	92 2f       	mov	r25, r18
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	84 0f       	add	r24, r20
     5b8:	95 1f       	adc	r25, r21
     5ba:	90 93 9f 03 	sts	0x039F, r25
     5be:	80 93 9e 03 	sts	0x039E, r24

		if (y_pos > y_in)
     5c2:	80 91 9e 03 	lds	r24, 0x039E
     5c6:	90 91 9f 03 	lds	r25, 0x039F
     5ca:	08 17       	cp	r16, r24
     5cc:	19 07       	cpc	r17, r25
     5ce:	50 f1       	brcs	.+84     	; 0x624 <move_to_XY+0x1fe>
     5d0:	5c c0       	rjmp	.+184    	; 0x68a <move_to_XY+0x264>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5d2:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5d6:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     5da:	80 91 7a 00 	lds	r24, 0x007A
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	80 93 7a 00 	sts	0x007A, r24
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <move_to_XY+0x1ca>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     5e6:	5e 98       	cbi	0x0b, 6	; 11
     5e8:	84 2f       	mov	r24, r20
     5ea:	8a 95       	dec	r24
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <move_to_XY+0x1c4>
	_delay_us(5);
	PORTD |= 0x80;
     5ee:	5f 9a       	sbi	0x0b, 7	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_negative_y();
     5f0:	80 91 7a 00 	lds	r24, 0x007A
     5f4:	86 fd       	sbrc	r24, 6
     5f6:	f7 cf       	rjmp	.-18     	; 0x5e6 <move_to_XY+0x1c0>
				y_pos = (int)ADCL;
     5f8:	80 91 78 00 	lds	r24, 0x0078
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 9f 03 	sts	0x039F, r25
     602:	80 93 9e 03 	sts	0x039E, r24
				y_pos += (int)(ADCH*256);
     606:	80 91 9e 03 	lds	r24, 0x039E
     60a:	90 91 9f 03 	lds	r25, 0x039F
     60e:	20 91 79 00 	lds	r18, 0x0079
     612:	32 2f       	mov	r19, r18
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	82 0f       	add	r24, r18
     618:	93 1f       	adc	r25, r19
     61a:	90 93 9f 03 	sts	0x039F, r25
     61e:	80 93 9e 03 	sts	0x039E, r24
     622:	02 c0       	rjmp	.+4      	; 0x628 <move_to_XY+0x202>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     624:	51 ec       	ldi	r21, 0xC1	; 193
     626:	4a e1       	ldi	r20, 0x1A	; 26
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     628:	80 91 9e 03 	lds	r24, 0x039E
     62c:	90 91 9f 03 	lds	r25, 0x039F
     630:	08 17       	cp	r16, r24
     632:	19 07       	cpc	r17, r25
     634:	70 f2       	brcs	.-100    	; 0x5d2 <move_to_XY+0x1ac>
     636:	32 c0       	rjmp	.+100    	; 0x69c <move_to_XY+0x276>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     638:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     63c:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     640:	80 91 7a 00 	lds	r24, 0x007A
     644:	80 64       	ori	r24, 0x40	; 64
     646:	80 93 7a 00 	sts	0x007A, r24
     64a:	05 c0       	rjmp	.+10     	; 0x656 <move_to_XY+0x230>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     64c:	5f 98       	cbi	0x0b, 7	; 11
     64e:	84 2f       	mov	r24, r20
     650:	8a 95       	dec	r24
     652:	f1 f7       	brne	.-4      	; 0x650 <move_to_XY+0x22a>
	_delay_us(5);
	PORTD |= 0x40;
     654:	5e 9a       	sbi	0x0b, 6	; 11
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
     656:	80 91 7a 00 	lds	r24, 0x007A
     65a:	86 fd       	sbrc	r24, 6
     65c:	f7 cf       	rjmp	.-18     	; 0x64c <move_to_XY+0x226>
				y_pos = (int)ADCL;
     65e:	80 91 78 00 	lds	r24, 0x0078
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	90 93 9f 03 	sts	0x039F, r25
     668:	80 93 9e 03 	sts	0x039E, r24
				y_pos += (int)(ADCH*256);
     66c:	80 91 9e 03 	lds	r24, 0x039E
     670:	90 91 9f 03 	lds	r25, 0x039F
     674:	20 91 79 00 	lds	r18, 0x0079
     678:	32 2f       	mov	r19, r18
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
     680:	90 93 9f 03 	sts	0x039F, r25
     684:	80 93 9e 03 	sts	0x039E, r24
     688:	02 c0       	rjmp	.+4      	; 0x68e <move_to_XY+0x268>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     68a:	51 ec       	ldi	r21, 0xC1	; 193
     68c:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     68e:	80 91 9e 03 	lds	r24, 0x039E
     692:	90 91 9f 03 	lds	r25, 0x039F
     696:	80 17       	cp	r24, r16
     698:	91 07       	cpc	r25, r17
     69a:	70 f2       	brcs	.-100    	; 0x638 <move_to_XY+0x212>
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
			end
			stop_all();
     69c:	0e 94 1e 01 	call	0x23c	; 0x23c <stop_all>
		end
	end
	// print where you end up
	print_position();			
     6a0:	0e 94 ae 01 	call	0x35c	; 0x35c <print_position>
end
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <LCD_init>:

// Inits ----------------------------------------------------------------------
void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
     6ae:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCDinit>
	LCDcursorOFF();
     6b2:	0e 94 1c 07 	call	0xe38	; 0xe38 <LCDcursorOFF>
	LCDclr();				//clear the display
     6b6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <LCDclr>
	LCDGotoXY(0,0);
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     6c2:	8c e8       	ldi	r24, 0x8C	; 140
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	0e 94 79 06 	call	0xcf2	; 0xcf2 <CopyStringtoLCD>
	LCD_char_count = 0;
     6ce:	10 92 d3 02 	sts	0x02D3, r1
end
     6d2:	08 95       	ret

000006d4 <initialize>:
end


void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     6d4:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     6da:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x00;    // start with no power
     6dc:	1b b8       	out	0x0b, r1	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
     6de:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_init>
end


void ADC_init(void)
begin
	ADMUX = 0;
     6e2:	ec e7       	ldi	r30, 0x7C	; 124
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	10 82       	st	Z, r1
	ADCSRA = 0;
     6e8:	aa e7       	ldi	r26, 0x7A	; 122
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     6f2:	87 e8       	ldi	r24, 0x87	; 135
     6f4:	8c 93       	st	X, r24
begin
	port_init();
	LCD_init();
	ADC_init();

	sei();
     6f6:	78 94       	sei
end
     6f8:	08 95       	ret

000006fa <main>:
	print_position();			
end

// --- Main Program ----------------------------------
int main(void)
begin
     6fa:	2f 92       	push	r2
     6fc:	3f 92       	push	r3
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	69 97       	sbiw	r28, 0x19	; 25
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
  int i = 0;
  int x=-2 ,y=-2,d=-2;// container for parsed ints
     72e:	8e ef       	ldi	r24, 0xFE	; 254
     730:	9f ef       	ldi	r25, 0xFF	; 255
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	9c 83       	std	Y+4, r25	; 0x04
     738:	8b 83       	std	Y+3, r24	; 0x03
     73a:	9e 83       	std	Y+6, r25	; 0x06
     73c:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     73e:	18 86       	std	Y+8, r1	; 0x08
     740:	1f 82       	std	Y+7, r1	; 0x07
  char* file;

  initialize();
     742:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <initialize>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     746:	0e 94 84 07 	call	0xf08	; 0xf08 <uart_init>
  stdout = stdin = stderr = &uart_str;
     74a:	62 e9       	ldi	r22, 0x92	; 146
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	70 93 7e 04 	sts	0x047E, r23
     752:	60 93 7d 04 	sts	0x047D, r22
     756:	70 93 7a 04 	sts	0x047A, r23
     75a:	60 93 79 04 	sts	0x0479, r22
     75e:	70 93 7c 04 	sts	0x047C, r23
     762:	60 93 7b 04 	sts	0x047B, r22

  // Allocate memory for the buffer	
  fprintf(stdout,"File Length\n\r");
     766:	80 e1       	ldi	r24, 0x10	; 16
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 97 08 	call	0x112e	; 0x112e <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     76e:	00 d0       	rcall	.+0      	; 0x770 <main+0x76>
     770:	00 d0       	rcall	.+0      	; 0x772 <main+0x78>
     772:	00 d0       	rcall	.+0      	; 0x774 <main+0x7a>
     774:	ed b7       	in	r30, 0x3d	; 61
     776:	fe b7       	in	r31, 0x3e	; 62
     778:	31 96       	adiw	r30, 0x01	; 1
     77a:	80 91 79 04 	lds	r24, 0x0479
     77e:	90 91 7a 04 	lds	r25, 0x047A
     782:	ad b7       	in	r26, 0x3d	; 61
     784:	be b7       	in	r27, 0x3e	; 62
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	9c 93       	st	X, r25
     78a:	8e 93       	st	-X, r24
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	8e e1       	ldi	r24, 0x1E	; 30
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	93 83       	std	Z+3, r25	; 0x03
     794:	82 83       	std	Z+2, r24	; 0x02
     796:	ce 01       	movw	r24, r28
     798:	07 96       	adiw	r24, 0x07	; 7
     79a:	95 83       	std	Z+5, r25	; 0x05
     79c:	84 83       	std	Z+4, r24	; 0x04
     79e:	0e 94 c2 08 	call	0x1184	; 0x1184 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     7a2:	ed b7       	in	r30, 0x3d	; 61
     7a4:	fe b7       	in	r31, 0x3e	; 62
     7a6:	31 96       	adiw	r30, 0x01	; 1
     7a8:	00 ea       	ldi	r16, 0xA0	; 160
     7aa:	13 e0       	ldi	r17, 0x03	; 3
     7ac:	ad b7       	in	r26, 0x3d	; 61
     7ae:	be b7       	in	r27, 0x3e	; 62
     7b0:	12 96       	adiw	r26, 0x02	; 2
     7b2:	1c 93       	st	X, r17
     7b4:	0e 93       	st	-X, r16
     7b6:	11 97       	sbiw	r26, 0x01	; 1
     7b8:	82 e2       	ldi	r24, 0x22	; 34
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	93 83       	std	Z+3, r25	; 0x03
     7be:	82 83       	std	Z+2, r24	; 0x02
     7c0:	8f 81       	ldd	r24, Y+7	; 0x07
     7c2:	98 85       	ldd	r25, Y+8	; 0x08
     7c4:	95 83       	std	Z+5, r25	; 0x05
     7c6:	84 83       	std	Z+4, r24	; 0x04
     7c8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
  LCDGotoXY(0, 0);
     7cc:	6d b7       	in	r22, 0x3d	; 61
     7ce:	7e b7       	in	r23, 0x3e	; 62
     7d0:	6a 5f       	subi	r22, 0xFA	; 250
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	7e bf       	out	0x3e, r23	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	6d bf       	out	0x3d, r22	; 61
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
  LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     7e6:	f8 01       	movw	r30, r16
     7e8:	01 90       	ld	r0, Z+
     7ea:	00 20       	and	r0, r0
     7ec:	e9 f7       	brne	.-6      	; 0x7e8 <main+0xee>
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	e0 1b       	sub	r30, r16
     7f2:	f1 0b       	sbc	r31, r17
     7f4:	c8 01       	movw	r24, r16
     7f6:	6e 2f       	mov	r22, r30
     7f8:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
     7fc:	ee 24       	eor	r14, r14
     7fe:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     800:	79 e0       	ldi	r23, 0x09	; 9
     802:	a7 2e       	mov	r10, r23
     804:	b1 2c       	mov	r11, r1
     806:	ac 0e       	add	r10, r28
     808:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i  ", i);
     80a:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid Input@%-i", i);
     80c:	02 ec       	ldi	r16, 0xC2	; 194
     80e:	12 e0       	ldi	r17, 0x02	; 2
     810:	66 e5       	ldi	r22, 0x56	; 86
     812:	26 2e       	mov	r2, r22
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     818:	5c e4       	ldi	r21, 0x4C	; 76
     81a:	45 2e       	mov	r4, r21
     81c:	51 e0       	ldi	r21, 0x01	; 1
     81e:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     820:	4e ef       	ldi	r20, 0xFE	; 254
     822:	c4 2e       	mov	r12, r20
     824:	4f ef       	ldi	r20, 0xFF	; 255
     826:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     828:	30 e9       	ldi	r19, 0x90	; 144
     82a:	63 2e       	mov	r6, r19
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	73 2e       	mov	r7, r19
     830:	ff c0       	rjmp	.+510    	; 0xa30 <main+0x336>
  LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     832:	60 91 7b 04 	lds	r22, 0x047B
     836:	70 91 7c 04 	lds	r23, 0x047C
     83a:	84 e3       	ldi	r24, 0x34	; 52
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 97 08 	call	0x112e	; 0x112e <fputs>
	fscanf(stdin, "%s", buffer) ;
     842:	00 d0       	rcall	.+0      	; 0x844 <main+0x14a>
     844:	00 d0       	rcall	.+0      	; 0x846 <main+0x14c>
     846:	00 d0       	rcall	.+0      	; 0x848 <main+0x14e>
     848:	ed b7       	in	r30, 0x3d	; 61
     84a:	fe b7       	in	r31, 0x3e	; 62
     84c:	31 96       	adiw	r30, 0x01	; 1
     84e:	80 91 79 04 	lds	r24, 0x0479
     852:	90 91 7a 04 	lds	r25, 0x047A
     856:	ad b7       	in	r26, 0x3d	; 61
     858:	be b7       	in	r27, 0x3e	; 62
     85a:	12 96       	adiw	r26, 0x02	; 2
     85c:	9c 93       	st	X, r25
     85e:	8e 93       	st	-X, r24
     860:	11 97       	sbiw	r26, 0x01	; 1
     862:	69 e3       	ldi	r22, 0x39	; 57
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	73 83       	std	Z+3, r23	; 0x03
     868:	62 83       	std	Z+2, r22	; 0x02
     86a:	b5 82       	std	Z+5, r11	; 0x05
     86c:	a4 82       	std	Z+4, r10	; 0x04
     86e:	0e 94 c2 08 	call	0x1184	; 0x1184 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     872:	00 d0       	rcall	.+0      	; 0x874 <main+0x17a>
     874:	00 d0       	rcall	.+0      	; 0x876 <main+0x17c>
     876:	ed b7       	in	r30, 0x3d	; 61
     878:	fe b7       	in	r31, 0x3e	; 62
     87a:	31 96       	adiw	r30, 0x01	; 1
     87c:	ad b7       	in	r26, 0x3d	; 61
     87e:	be b7       	in	r27, 0x3e	; 62
     880:	12 96       	adiw	r26, 0x02	; 2
     882:	bc 92       	st	X, r11
     884:	ae 92       	st	-X, r10
     886:	11 97       	sbiw	r26, 0x01	; 1
     888:	6c e3       	ldi	r22, 0x3C	; 60
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	73 83       	std	Z+3, r23	; 0x03
     88e:	62 83       	std	Z+2, r22	; 0x02
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	8c 0f       	add	r24, r28
     896:	9d 1f       	adc	r25, r29
     898:	95 83       	std	Z+5, r25	; 0x05
     89a:	84 83       	std	Z+4, r24	; 0x04
     89c:	a3 e0       	ldi	r26, 0x03	; 3
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	ac 0f       	add	r26, r28
     8a2:	bd 1f       	adc	r27, r29
     8a4:	b7 83       	std	Z+7, r27	; 0x07
     8a6:	a6 83       	std	Z+6, r26	; 0x06
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	6c 0f       	add	r22, r28
     8ae:	7d 1f       	adc	r23, r29
     8b0:	71 87       	std	Z+9, r23	; 0x09
     8b2:	60 87       	std	Z+8, r22	; 0x08
     8b4:	0e 94 04 09 	call	0x1208	; 0x1208 <sscanf>

    sprintf(lcd_buffer2,"%-i  ", i);
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	ed b7       	in	r30, 0x3d	; 61
     8c2:	fe b7       	in	r31, 0x3e	; 62
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	ad b7       	in	r26, 0x3d	; 61
     8c8:	be b7       	in	r27, 0x3e	; 62
     8ca:	11 96       	adiw	r26, 0x01	; 1
     8cc:	8c 92       	st	X, r8
     8ce:	11 97       	sbiw	r26, 0x01	; 1
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	9c 92       	st	X, r9
     8d4:	66 e4       	ldi	r22, 0x46	; 70
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	73 83       	std	Z+3, r23	; 0x03
     8da:	62 83       	std	Z+2, r22	; 0x02
     8dc:	f5 82       	std	Z+5, r15	; 0x05
     8de:	e4 82       	std	Z+4, r14	; 0x04
     8e0:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
	LCDGotoXY(10, 0);
     8e4:	8d b7       	in	r24, 0x3d	; 61
     8e6:	9e b7       	in	r25, 0x3e	; 62
     8e8:	06 96       	adiw	r24, 0x06	; 6
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	9e bf       	out	0x3e, r25	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	8d bf       	out	0x3d, r24	; 61
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     8fc:	c4 01       	movw	r24, r8
     8fe:	62 e0       	ldi	r22, 0x02	; 2
     900:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
	LCDstring(buffer,15);
     90c:	c5 01       	movw	r24, r10
     90e:	6f e0       	ldi	r22, 0x0F	; 15
     910:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     914:	49 81       	ldd	r20, Y+1	; 0x01
     916:	5a 81       	ldd	r21, Y+2	; 0x02
     918:	9f ef       	ldi	r25, 0xFF	; 255
     91a:	4f 3f       	cpi	r20, 0xFF	; 255
     91c:	59 07       	cpc	r21, r25
     91e:	0c f4       	brge	.+2      	; 0x922 <main+0x228>
     920:	5a c0       	rjmp	.+180    	; 0x9d6 <main+0x2dc>
     922:	2b 81       	ldd	r18, Y+3	; 0x03
     924:	3c 81       	ldd	r19, Y+4	; 0x04
     926:	af ef       	ldi	r26, 0xFF	; 255
     928:	2f 3f       	cpi	r18, 0xFF	; 255
     92a:	3a 07       	cpc	r19, r26
     92c:	0c f4       	brge	.+2      	; 0x930 <main+0x236>
     92e:	53 c0       	rjmp	.+166    	; 0x9d6 <main+0x2dc>
     930:	8d 81       	ldd	r24, Y+5	; 0x05
     932:	9e 81       	ldd	r25, Y+6	; 0x06
     934:	bf ef       	ldi	r27, 0xFF	; 255
     936:	8f 3f       	cpi	r24, 0xFF	; 255
     938:	9b 07       	cpc	r25, r27
     93a:	0c f4       	brge	.+2      	; 0x93e <main+0x244>
     93c:	4c c0       	rjmp	.+152    	; 0x9d6 <main+0x2dc>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     93e:	6d b7       	in	r22, 0x3d	; 61
     940:	7e b7       	in	r23, 0x3e	; 62
     942:	6a 50       	subi	r22, 0x0A	; 10
     944:	70 40       	sbci	r23, 0x00	; 0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	7e bf       	out	0x3e, r23	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	6d bf       	out	0x3d, r22	; 61
     950:	ed b7       	in	r30, 0x3d	; 61
     952:	fe b7       	in	r31, 0x3e	; 62
     954:	31 96       	adiw	r30, 0x01	; 1
     956:	ad b7       	in	r26, 0x3d	; 61
     958:	be b7       	in	r27, 0x3e	; 62
     95a:	12 96       	adiw	r26, 0x02	; 2
     95c:	1c 93       	st	X, r17
     95e:	0e 93       	st	-X, r16
     960:	11 97       	sbiw	r26, 0x01	; 1
     962:	53 82       	std	Z+3, r5	; 0x03
     964:	42 82       	std	Z+2, r4	; 0x02
     966:	55 83       	std	Z+5, r21	; 0x05
     968:	44 83       	std	Z+4, r20	; 0x04
     96a:	37 83       	std	Z+7, r19	; 0x07
     96c:	26 83       	std	Z+6, r18	; 0x06
     96e:	91 87       	std	Z+9, r25	; 0x09
     970:	80 87       	std	Z+8, r24	; 0x08
     972:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
		LCDGotoXY(0, 0);
     976:	6d b7       	in	r22, 0x3d	; 61
     978:	7e b7       	in	r23, 0x3e	; 62
     97a:	66 5f       	subi	r22, 0xF6	; 246
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	7e bf       	out	0x3e, r23	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	6d bf       	out	0x3d, r22	; 61
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     990:	c8 01       	movw	r24, r16
     992:	6a e0       	ldi	r22, 0x0A	; 10
     994:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
		x_vect[i] = x;
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
     99c:	d7 01       	movw	r26, r14
     99e:	aa 0f       	add	r26, r26
     9a0:	bb 1f       	adc	r27, r27
     9a2:	fd 01       	movw	r30, r26
     9a4:	ef 54       	subi	r30, 0x4F	; 79
     9a6:	fc 4f       	sbci	r31, 0xFC	; 252
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
		y_vect[i] = y;
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	fd 01       	movw	r30, r26
     9b2:	e6 50       	subi	r30, 0x06	; 6
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
		d_vect[i] = d;
     9ba:	8d 81       	ldd	r24, Y+5	; 0x05
     9bc:	9e 81       	ldd	r25, Y+6	; 0x06
     9be:	aa 52       	subi	r26, 0x2A	; 42
     9c0:	bd 4f       	sbci	r27, 0xFD	; 253
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	9c 93       	st	X, r25
     9c6:	8e 93       	st	-X, r24
		x=-2;
     9c8:	da 82       	std	Y+2, r13	; 0x02
     9ca:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     9cc:	dc 82       	std	Y+4, r13	; 0x04
     9ce:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     9d0:	de 82       	std	Y+6, r13	; 0x06
     9d2:	cd 82       	std	Y+5, r12	; 0x05
     9d4:	23 c0       	rjmp	.+70     	; 0xa1c <main+0x322>
	} else {
		sprintf(lcd_buffer,"Invalid Input@%-i", i);
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <main+0x2de>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <main+0x2e0>
     9da:	00 d0       	rcall	.+0      	; 0x9dc <main+0x2e2>
     9dc:	ed b7       	in	r30, 0x3d	; 61
     9de:	fe b7       	in	r31, 0x3e	; 62
     9e0:	31 96       	adiw	r30, 0x01	; 1
     9e2:	ad b7       	in	r26, 0x3d	; 61
     9e4:	be b7       	in	r27, 0x3e	; 62
     9e6:	12 96       	adiw	r26, 0x02	; 2
     9e8:	1c 93       	st	X, r17
     9ea:	0e 93       	st	-X, r16
     9ec:	11 97       	sbiw	r26, 0x01	; 1
     9ee:	33 82       	std	Z+3, r3	; 0x03
     9f0:	22 82       	std	Z+2, r2	; 0x02
     9f2:	f5 82       	std	Z+5, r15	; 0x05
     9f4:	e4 82       	std	Z+4, r14	; 0x04
     9f6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
		LCDGotoXY(0, 0);
     9fa:	6d b7       	in	r22, 0x3d	; 61
     9fc:	7e b7       	in	r23, 0x3e	; 62
     9fe:	6a 5f       	subi	r22, 0xFA	; 250
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	7e bf       	out	0x3e, r23	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	6d bf       	out	0x3d, r22	; 61
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a14:	c8 01       	movw	r24, r16
     a16:	6a e0       	ldi	r22, 0x0A	; 10
     a18:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
     a1c:	80 e1       	ldi	r24, 0x10	; 16
     a1e:	97 e2       	ldi	r25, 0x27	; 39
     a20:	f3 01       	movw	r30, r6
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <main+0x328>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a28:	d9 f7       	brne	.-10     	; 0xa20 <main+0x326>
  fscanf(stdin, "%d*", &file_size) ;
  sprintf(lcd_buffer2,"             %-i.", file_size);
  LCDGotoXY(0, 0);
  LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     a2a:	08 94       	sec
     a2c:	e1 1c       	adc	r14, r1
     a2e:	f1 1c       	adc	r15, r1
     a30:	8f 81       	ldd	r24, Y+7	; 0x07
     a32:	98 85       	ldd	r25, Y+8	; 0x08
     a34:	e8 16       	cp	r14, r24
     a36:	f9 06       	cpc	r15, r25
     a38:	08 f4       	brcc	.+2      	; 0xa3c <main+0x342>
     a3a:	fb ce       	rjmp	.-522    	; 0x832 <main+0x138>
     a3c:	80 e2       	ldi	r24, 0x20	; 32
     a3e:	9e e4       	ldi	r25, 0x4E	; 78
     a40:	20 e9       	ldi	r18, 0x90	; 144
     a42:	31 e0       	ldi	r19, 0x01	; 1
     a44:	f9 01       	movw	r30, r18
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <main+0x34c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4c:	d9 f7       	brne	.-10     	; 0xa44 <main+0x34a>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <main+0x356>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <main+0x358>
     a52:	00 d0       	rcall	.+0      	; 0xa54 <main+0x35a>
     a54:	ed b7       	in	r30, 0x3d	; 61
     a56:	fe b7       	in	r31, 0x3e	; 62
     a58:	31 96       	adiw	r30, 0x01	; 1
     a5a:	02 ec       	ldi	r16, 0xC2	; 194
     a5c:	12 e0       	ldi	r17, 0x02	; 2
     a5e:	ad b7       	in	r26, 0x3d	; 61
     a60:	be b7       	in	r27, 0x3e	; 62
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	1c 93       	st	X, r17
     a66:	0e 93       	st	-X, r16
     a68:	11 97       	sbiw	r26, 0x01	; 1
     a6a:	88 e6       	ldi	r24, 0x68	; 104
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	93 83       	std	Z+3, r25	; 0x03
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	f5 82       	std	Z+5, r15	; 0x05
     a74:	e4 82       	std	Z+4, r14	; 0x04
     a76:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
		LCDGotoXY(0, 0);
     a7a:	6d b7       	in	r22, 0x3d	; 61
     a7c:	7e b7       	in	r23, 0x3e	; 62
     a7e:	6a 5f       	subi	r22, 0xFA	; 250
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	7e bf       	out	0x3e, r23	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	6d bf       	out	0x3d, r22	; 61
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a94:	c8 01       	movw	r24, r16
     a96:	6a e0       	ldi	r22, 0x0A	; 10
     a98:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     a9c:	20 91 b1 03 	lds	r18, 0x03B1
     aa0:	30 91 b2 03 	lds	r19, 0x03B2
     aa4:	40 91 b3 03 	lds	r20, 0x03B3
     aa8:	50 91 b4 03 	lds	r21, 0x03B4
     aac:	60 91 b5 03 	lds	r22, 0x03B5
     ab0:	70 91 b6 03 	lds	r23, 0x03B6
     ab4:	e0 90 b7 03 	lds	r14, 0x03B7
     ab8:	f0 90 b8 03 	lds	r15, 0x03B8
     abc:	8d b7       	in	r24, 0x3d	; 61
     abe:	9e b7       	in	r25, 0x3e	; 62
     ac0:	0c 97       	sbiw	r24, 0x0c	; 12
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	9e bf       	out	0x3e, r25	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	8d bf       	out	0x3d, r24	; 61
     acc:	ed b7       	in	r30, 0x3d	; 61
     ace:	fe b7       	in	r31, 0x3e	; 62
     ad0:	31 96       	adiw	r30, 0x01	; 1
     ad2:	ad b7       	in	r26, 0x3d	; 61
     ad4:	be b7       	in	r27, 0x3e	; 62
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	1c 93       	st	X, r17
     ada:	0e 93       	st	-X, r16
     adc:	11 97       	sbiw	r26, 0x01	; 1
     ade:	84 e7       	ldi	r24, 0x74	; 116
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	93 83       	std	Z+3, r25	; 0x03
     ae4:	82 83       	std	Z+2, r24	; 0x02
     ae6:	35 83       	std	Z+5, r19	; 0x05
     ae8:	24 83       	std	Z+4, r18	; 0x04
     aea:	57 83       	std	Z+7, r21	; 0x07
     aec:	46 83       	std	Z+6, r20	; 0x06
     aee:	71 87       	std	Z+9, r23	; 0x09
     af0:	60 87       	std	Z+8, r22	; 0x08
     af2:	f3 86       	std	Z+11, r15	; 0x0b
     af4:	e2 86       	std	Z+10, r14	; 0x0a
     af6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
		LCDGotoXY(0, 0);
     afa:	6d b7       	in	r22, 0x3d	; 61
     afc:	7e b7       	in	r23, 0x3e	; 62
     afe:	64 5f       	subi	r22, 0xF4	; 244
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	7e bf       	out	0x3e, r23	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	6d bf       	out	0x3d, r22	; 61
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     b14:	c8 01       	movw	r24, r16
     b16:	6a e0       	ldi	r22, 0x0A	; 10
     b18:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     b1c:	20 91 fa 01 	lds	r18, 0x01FA
     b20:	30 91 fb 01 	lds	r19, 0x01FB
     b24:	40 91 fc 01 	lds	r20, 0x01FC
     b28:	50 91 fd 01 	lds	r21, 0x01FD
     b2c:	60 91 fe 01 	lds	r22, 0x01FE
     b30:	70 91 ff 01 	lds	r23, 0x01FF
     b34:	e0 90 00 02 	lds	r14, 0x0200
     b38:	f0 90 01 02 	lds	r15, 0x0201
     b3c:	8d b7       	in	r24, 0x3d	; 61
     b3e:	9e b7       	in	r25, 0x3e	; 62
     b40:	0c 97       	sbiw	r24, 0x0c	; 12
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	9e bf       	out	0x3e, r25	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	8d bf       	out	0x3d, r24	; 61
     b4c:	ed b7       	in	r30, 0x3d	; 61
     b4e:	fe b7       	in	r31, 0x3e	; 62
     b50:	31 96       	adiw	r30, 0x01	; 1
     b52:	ad b7       	in	r26, 0x3d	; 61
     b54:	be b7       	in	r27, 0x3e	; 62
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	1c 93       	st	X, r17
     b5a:	0e 93       	st	-X, r16
     b5c:	11 97       	sbiw	r26, 0x01	; 1
     b5e:	8e e7       	ldi	r24, 0x7E	; 126
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	93 83       	std	Z+3, r25	; 0x03
     b64:	82 83       	std	Z+2, r24	; 0x02
     b66:	35 83       	std	Z+5, r19	; 0x05
     b68:	24 83       	std	Z+4, r18	; 0x04
     b6a:	57 83       	std	Z+7, r21	; 0x07
     b6c:	46 83       	std	Z+6, r20	; 0x06
     b6e:	71 87       	std	Z+9, r23	; 0x09
     b70:	60 87       	std	Z+8, r22	; 0x08
     b72:	f3 86       	std	Z+11, r15	; 0x0b
     b74:	e2 86       	std	Z+10, r14	; 0x0a
     b76:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
		LCDGotoXY(0, 1);
     b7a:	6d b7       	in	r22, 0x3d	; 61
     b7c:	7e b7       	in	r23, 0x3e	; 62
     b7e:	64 5f       	subi	r22, 0xF4	; 244
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	7e bf       	out	0x3e, r23	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	6d bf       	out	0x3d, r22	; 61
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     b94:	c8 01       	movw	r24, r16
     b96:	6a e0       	ldi	r22, 0x0A	; 10
     b98:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     b9c:	20 91 d6 02 	lds	r18, 0x02D6
     ba0:	30 91 d7 02 	lds	r19, 0x02D7
     ba4:	40 91 d8 02 	lds	r20, 0x02D8
     ba8:	50 91 d9 02 	lds	r21, 0x02D9
     bac:	60 91 da 02 	lds	r22, 0x02DA
     bb0:	70 91 db 02 	lds	r23, 0x02DB
     bb4:	e0 90 dc 02 	lds	r14, 0x02DC
     bb8:	f0 90 dd 02 	lds	r15, 0x02DD
     bbc:	8d b7       	in	r24, 0x3d	; 61
     bbe:	9e b7       	in	r25, 0x3e	; 62
     bc0:	0c 97       	sbiw	r24, 0x0c	; 12
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	9e bf       	out	0x3e, r25	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	8d bf       	out	0x3d, r24	; 61
     bcc:	ed b7       	in	r30, 0x3d	; 61
     bce:	fe b7       	in	r31, 0x3e	; 62
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	ad b7       	in	r26, 0x3d	; 61
     bd4:	be b7       	in	r27, 0x3e	; 62
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	1c 93       	st	X, r17
     bda:	0e 93       	st	-X, r16
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	88 e8       	ldi	r24, 0x88	; 136
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	93 83       	std	Z+3, r25	; 0x03
     be4:	82 83       	std	Z+2, r24	; 0x02
     be6:	35 83       	std	Z+5, r19	; 0x05
     be8:	24 83       	std	Z+4, r18	; 0x04
     bea:	57 83       	std	Z+7, r21	; 0x07
     bec:	46 83       	std	Z+6, r20	; 0x06
     bee:	71 87       	std	Z+9, r23	; 0x09
     bf0:	60 87       	std	Z+8, r22	; 0x08
     bf2:	f3 86       	std	Z+11, r15	; 0x0b
     bf4:	e2 86       	std	Z+10, r14	; 0x0a
     bf6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sprintf>
		LCDGotoXY(10, 0);
     bfa:	6d b7       	in	r22, 0x3d	; 61
     bfc:	7e b7       	in	r23, 0x3e	; 62
     bfe:	64 5f       	subi	r22, 0xF4	; 244
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	7e bf       	out	0x3e, r23	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	6d bf       	out	0x3d, r22	; 61
     c0c:	8a e0       	ldi	r24, 0x0A	; 10
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     c14:	c8 01       	movw	r24, r16
     c16:	6a e0       	ldi	r22, 0x0A	; 10
     c18:	0e 94 55 06 	call	0xcaa	; 0xcaa <LCDstring>
     c1c:	ff cf       	rjmp	.-2      	; 0xc1c <main+0x522>

00000c1e <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     c1e:	28 2f       	mov	r18, r24
     c20:	20 7f       	andi	r18, 0xF0	; 240
     c22:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     c24:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c26:	42 9a       	sbi	0x08, 2	; 8
     c28:	20 e4       	ldi	r18, 0x40	; 64
     c2a:	3f e1       	ldi	r19, 0x1F	; 31
     c2c:	f9 01       	movw	r30, r18
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c32:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c34:	40 98       	cbi	0x08, 0	; 8
     c36:	f9 01       	movw	r30, r18
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	44 e0       	ldi	r20, 0x04	; 4
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	4a 95       	dec	r20
     c46:	e1 f7       	brne	.-8      	; 0xc40 <LCDsendChar+0x22>
     c48:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     c4a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c4c:	42 9a       	sbi	0x08, 2	; 8
     c4e:	c9 01       	movw	r24, r18
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c54:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c56:	40 98       	cbi	0x08, 0	; 8
     c58:	c9 01       	movw	r24, r18
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     c5e:	08 95       	ret

00000c60 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     c60:	28 2f       	mov	r18, r24
     c62:	20 7f       	andi	r18, 0xF0	; 240
     c64:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     c66:	42 9a       	sbi	0x08, 2	; 8
     c68:	20 e4       	ldi	r18, 0x40	; 64
     c6a:	3f e1       	ldi	r19, 0x1F	; 31
     c6c:	f9 01       	movw	r30, r18
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c72:	42 98       	cbi	0x08, 2	; 8
     c74:	f9 01       	movw	r30, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	54 e0       	ldi	r21, 0x04	; 4
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	5a 95       	dec	r21
     c84:	e1 f7       	brne	.-8      	; 0xc7e <LCDsendCommand+0x1e>
     c86:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     c88:	42 9a       	sbi	0x08, 2	; 8
     c8a:	c9 01       	movw	r24, r18
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c90:	42 98       	cbi	0x08, 2	; 8
     c92:	c9 01       	movw	r24, r18
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     c98:	08 95       	ret

00000c9a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     ca0:	08 95       	ret

00000ca2 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     ca8:	08 95       	ret

00000caa <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	49 f0       	breq	.+18     	; 0xcca <LCDstring+0x20>
     cb8:	ec 01       	movw	r28, r24
     cba:	10 e0       	ldi	r17, 0x00	; 0
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     cbe:	89 91       	ld	r24, Y+
     cc0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     cc4:	1f 5f       	subi	r17, 0xFF	; 255
     cc6:	10 17       	cp	r17, r16
     cc8:	d0 f3       	brcs	.-12     	; 0xcbe <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	08 95       	ret

00000cd4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     cd4:	62 30       	cpi	r22, 0x02	; 2
     cd6:	31 f0       	breq	.+12     	; 0xce4 <LCDGotoXY+0x10>
     cd8:	63 30       	cpi	r22, 0x03	; 3
     cda:	31 f0       	breq	.+12     	; 0xce8 <LCDGotoXY+0x14>
     cdc:	61 30       	cpi	r22, 0x01	; 1
     cde:	29 f4       	brne	.+10     	; 0xcea <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     ce0:	80 5c       	subi	r24, 0xC0	; 192
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     ce4:	8c 5e       	subi	r24, 0xEC	; 236
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ce8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
	
}
     cf0:	08 95       	ret

00000cf2 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     cfc:	64 2f       	mov	r22, r20
     cfe:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCDGotoXY>
     d02:	10 e0       	ldi	r17, 0x00	; 0
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     d06:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     d0a:	1f 5f       	subi	r17, 0xFF	; 255
     d0c:	fe 01       	movw	r30, r28
     d0e:	e1 0f       	add	r30, r17
     d10:	f1 1d       	adc	r31, r1
     d12:	84 91       	lpm	r24, Z+
     d14:	88 23       	and	r24, r24
     d16:	b9 f7       	brne	.-18     	; 0xd06 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	08 95       	ret

00000d20 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	7c 01       	movw	r14, r24
     d2e:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     d30:	11 0f       	add	r17, r17
     d32:	11 0f       	add	r17, r17
     d34:	11 0f       	add	r17, r17
     d36:	10 64       	ori	r17, 0x40	; 64
     d38:	c0 e0       	ldi	r28, 0x00	; 0
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     d3c:	f7 01       	movw	r30, r14
     d3e:	ec 0f       	add	r30, r28
     d40:	fd 1f       	adc	r31, r29
     d42:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     d44:	81 2f       	mov	r24, r17
     d46:	8c 0f       	add	r24, r28
     d48:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
		LCDsendChar(pcc);
     d4c:	80 2f       	mov	r24, r16
     d4e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     d52:	21 96       	adiw	r28, 0x01	; 1
     d54:	c8 30       	cpi	r28, 0x08	; 8
     d56:	d1 05       	cpc	r29, r1
     d58:	89 f7       	brne	.-30     	; 0xd3c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	08 95       	ret

00000d68 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	80 e6       	ldi	r24, 0x60	; 96
     d70:	9a ee       	ldi	r25, 0xEA	; 234
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     d76:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     d78:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     d7a:	87 b1       	in	r24, 0x07	; 7
     d7c:	80 6f       	ori	r24, 0xF0	; 240
     d7e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     d80:	87 b1       	in	r24, 0x07	; 7
     d82:	87 60       	ori	r24, 0x07	; 7
     d84:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d86:	80 e3       	ldi	r24, 0x30	; 48
     d88:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d8a:	42 9a       	sbi	0x08, 2	; 8
     d8c:	20 e4       	ldi	r18, 0x40	; 64
     d8e:	3f e1       	ldi	r19, 0x1F	; 31
     d90:	f9 01       	movw	r30, r18
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d96:	42 98       	cbi	0x08, 2	; 8
     d98:	f9 01       	movw	r30, r18
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d9e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     da0:	42 9a       	sbi	0x08, 2	; 8
     da2:	c9 01       	movw	r24, r18
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     da8:	42 98       	cbi	0x08, 2	; 8
     daa:	c9 01       	movw	r24, r18
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     db0:	80 e2       	ldi	r24, 0x20	; 32
     db2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     db4:	42 9a       	sbi	0x08, 2	; 8
     db6:	c9 01       	movw	r24, r18
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     dbc:	42 98       	cbi	0x08, 2	; 8
     dbe:	c9 01       	movw	r24, r18
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     dc4:	88 e2       	ldi	r24, 0x28	; 40
     dc6:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     dca:	8c e0       	ldi	r24, 0x0C	; 12
     dcc:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
     dd0:	ca e0       	ldi	r28, 0x0A	; 10
     dd2:	d1 e0       	ldi	r29, 0x01	; 1
     dd4:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     dd6:	16 2f       	mov	r17, r22
     dd8:	1f 5f       	subi	r17, 0xFF	; 255
     dda:	ce 01       	movw	r24, r28
     ddc:	0e 94 90 06 	call	0xd20	; 0xd20 <LCDdefinechar>
     de0:	28 96       	adiw	r28, 0x08	; 8
     de2:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     de4:	18 30       	cpi	r17, 0x08	; 8
     de6:	b9 f7       	brne	.-18     	; 0xdd6 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	08 95       	ret

00000df0 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	08 2f       	mov	r16, r24
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     dfa:	8e e1       	ldi	r24, 0x1E	; 30
     dfc:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     e00:	1f 5f       	subi	r17, 0xFF	; 255
     e02:	10 17       	cp	r17, r16
     e04:	d0 f3       	brcs	.-12     	; 0xdfa <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	08 2f       	mov	r16, r24
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     e16:	88 e1       	ldi	r24, 0x18	; 24
     e18:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     e1c:	1f 5f       	subi	r17, 0xFF	; 255
     e1e:	10 17       	cp	r17, r16
     e20:	d0 f3       	brcs	.-12     	; 0xe16 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	08 95       	ret

00000e28 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     e28:	8e e0       	ldi	r24, 0x0E	; 14
     e2a:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     e2e:	08 95       	ret

00000e30 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     e30:	8f e0       	ldi	r24, 0x0F	; 15
     e32:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     e36:	08 95       	ret

00000e38 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     e38:	8c e0       	ldi	r24, 0x0C	; 12
     e3a:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     e3e:	08 95       	ret

00000e40 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     e46:	08 95       	ret

00000e48 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     e48:	8c e0       	ldi	r24, 0x0C	; 12
     e4a:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
}
     e4e:	08 95       	ret

00000e50 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	08 2f       	mov	r16, r24
     e56:	10 e0       	ldi	r17, 0x00	; 0
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e60:	1f 5f       	subi	r17, 0xFF	; 255
     e62:	10 17       	cp	r17, r16
     e64:	d0 f3       	brcs	.-12     	; 0xe5a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	08 2f       	mov	r16, r24
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	04 c0       	rjmp	.+8      	; 0xe7e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     e76:	84 e1       	ldi	r24, 0x14	; 20
     e78:	0e 94 30 06 	call	0xc60	; 0xc60 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e7c:	1f 5f       	subi	r17, 0xFF	; 255
     e7e:	10 17       	cp	r17, r16
     e80:	d0 f3       	brcs	.-12     	; 0xe76 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     e98:	96 e0       	ldi	r25, 0x06	; 6
     e9a:	89 9f       	mul	r24, r25
     e9c:	c0 01       	movw	r24, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	24 2f       	mov	r18, r20
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	ac 01       	movw	r20, r24
     ea6:	42 9f       	mul	r20, r18
     ea8:	c0 01       	movw	r24, r0
     eaa:	43 9f       	mul	r20, r19
     eac:	90 0d       	add	r25, r0
     eae:	52 9f       	mul	r21, r18
     eb0:	90 0d       	add	r25, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 84 08 	call	0x1108	; 0x1108 <__divmodhi4>
     eba:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     ebc:	cb 01       	movw	r24, r22
     ebe:	66 e0       	ldi	r22, 0x06	; 6
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__udivmodhi4>
     ec6:	e8 2e       	mov	r14, r24
     ec8:	ff 24       	eor	r15, r15
     eca:	00 e0       	ldi	r16, 0x00	; 0
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	12 c0       	rjmp	.+36     	; 0xef4 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     ed0:	c8 01       	movw	r24, r16
     ed2:	05 96       	adiw	r24, 0x05	; 5
     ed4:	c8 17       	cp	r28, r24
     ed6:	d9 07       	cpc	r29, r25
     ed8:	10 f0       	brcs	.+4      	; 0xede <LCDprogressBar+0x56>
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	06 c0       	rjmp	.+12     	; 0xeea <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ede:	c0 17       	cp	r28, r16
     ee0:	d1 07       	cpc	r29, r17
     ee2:	10 f0       	brcs	.+4      	; 0xee8 <LCDprogressBar+0x60>
     ee4:	8e 2d       	mov	r24, r14
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <LCDprogressBar+0x62>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     eea:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     eee:	f3 94       	inc	r15
     ef0:	0a 5f       	subi	r16, 0xFA	; 250
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	fd 14       	cp	r15, r13
     ef6:	60 f3       	brcs	.-40     	; 0xed0 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	08 95       	ret

00000f08 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     f08:	87 e6       	ldi	r24, 0x67	; 103
     f0a:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     f0e:	88 e1       	ldi	r24, 0x18	; 24
     f10:	80 93 c1 00 	sts	0x00C1, r24
}
     f14:	08 95       	ret

00000f16 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     f16:	1f 93       	push	r17
     f18:	18 2f       	mov	r17, r24

  if (c == '\a')
     f1a:	87 30       	cpi	r24, 0x07	; 7
     f1c:	49 f4       	brne	.+18     	; 0xf30 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     f1e:	60 91 7d 04 	lds	r22, 0x047D
     f22:	70 91 7e 04 	lds	r23, 0x047E
     f26:	80 ea       	ldi	r24, 0xA0	; 160
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 97 08 	call	0x112e	; 0x112e <fputs>
     f2e:	0b c0       	rjmp	.+22     	; 0xf46 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     f30:	8a 30       	cpi	r24, 0x0A	; 10
     f32:	19 f4       	brne	.+6      	; 0xf3a <uart_putchar+0x24>
    uart_putchar('\r', stream);
     f34:	8d e0       	ldi	r24, 0x0D	; 13
     f36:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     f3a:	80 91 c0 00 	lds	r24, 0x00C0
     f3e:	85 ff       	sbrs	r24, 5
     f40:	fc cf       	rjmp	.-8      	; 0xf3a <uart_putchar+0x24>
  UDR0 = c;
     f42:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	1f 91       	pop	r17
     f4c:	08 95       	ret

00000f4e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     f5c:	80 91 a8 01 	lds	r24, 0x01A8
     f60:	90 91 a9 01 	lds	r25, 0x01A9
     f64:	89 2b       	or	r24, r25
     f66:	09 f0       	breq	.+2      	; 0xf6a <uart_getchar+0x1c>
     f68:	9f c0       	rjmp	.+318    	; 0x10a8 <uart_getchar+0x15a>
     f6a:	0a ea       	ldi	r16, 0xAA	; 170
     f6c:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     f6e:	80 91 c0 00 	lds	r24, 0x00C0
     f72:	87 ff       	sbrs	r24, 7
     f74:	fc cf       	rjmp	.-8      	; 0xf6e <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     f76:	80 91 c0 00 	lds	r24, 0x00C0
     f7a:	84 ff       	sbrs	r24, 4
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <uart_getchar+0x36>
     f7e:	2e ef       	ldi	r18, 0xFE	; 254
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	a6 c0       	rjmp	.+332    	; 0x10d0 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     f84:	80 91 c0 00 	lds	r24, 0x00C0
     f88:	83 fd       	sbrc	r24, 3
     f8a:	a0 c0       	rjmp	.+320    	; 0x10cc <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     f8c:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     f90:	9d 30       	cpi	r25, 0x0D	; 13
     f92:	11 f0       	breq	.+4      	; 0xf98 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     f94:	9a 30       	cpi	r25, 0x0A	; 10
     f96:	69 f4       	brne	.+26     	; 0xfb2 <uart_getchar+0x64>
	  {
	    *cp = c;
     f98:	8a e0       	ldi	r24, 0x0A	; 10
     f9a:	f8 01       	movw	r30, r16
     f9c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     f9e:	b7 01       	movw	r22, r14
     fa0:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
	    rxp = b;
     fa4:	8a ea       	ldi	r24, 0xAA	; 170
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	90 93 a9 01 	sts	0x01A9, r25
     fac:	80 93 a8 01 	sts	0x01A8, r24
     fb0:	7b c0       	rjmp	.+246    	; 0x10a8 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     fb2:	99 30       	cpi	r25, 0x09	; 9
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <uart_getchar+0x6a>
     fb6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     fb8:	89 2f       	mov	r24, r25
     fba:	80 52       	subi	r24, 0x20	; 32
     fbc:	8f 35       	cpi	r24, 0x5F	; 95
     fbe:	10 f0       	brcs	.+4      	; 0xfc4 <uart_getchar+0x76>
     fc0:	90 3a       	cpi	r25, 0xA0	; 160
     fc2:	70 f0       	brcs	.+28     	; 0xfe0 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     fc4:	f1 e0       	ldi	r31, 0x01	; 1
     fc6:	09 3f       	cpi	r16, 0xF9	; 249
     fc8:	1f 07       	cpc	r17, r31
     fca:	11 f4       	brne	.+4      	; 0xfd0 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     fcc:	87 e0       	ldi	r24, 0x07	; 7
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     fd0:	f8 01       	movw	r30, r16
     fd2:	91 93       	st	Z+, r25
     fd4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     fd6:	89 2f       	mov	r24, r25
     fd8:	b7 01       	movw	r22, r14
     fda:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
     fde:	c7 cf       	rjmp	.-114    	; 0xf6e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     fe0:	92 31       	cpi	r25, 0x12	; 18
     fe2:	39 f1       	breq	.+78     	; 0x1032 <uart_getchar+0xe4>
     fe4:	93 31       	cpi	r25, 0x13	; 19
     fe6:	38 f4       	brcc	.+14     	; 0xff6 <uart_getchar+0xa8>
     fe8:	93 30       	cpi	r25, 0x03	; 3
     fea:	09 f4       	brne	.+2      	; 0xfee <uart_getchar+0xa0>
     fec:	6f c0       	rjmp	.+222    	; 0x10cc <uart_getchar+0x17e>
     fee:	98 30       	cpi	r25, 0x08	; 8
     ff0:	09 f0       	breq	.+2      	; 0xff4 <uart_getchar+0xa6>
     ff2:	bd cf       	rjmp	.-134    	; 0xf6e <uart_getchar+0x20>
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <uart_getchar+0xba>
     ff6:	97 31       	cpi	r25, 0x17	; 23
     ff8:	09 f4       	brne	.+2      	; 0xffc <uart_getchar+0xae>
     ffa:	4b c0       	rjmp	.+150    	; 0x1092 <uart_getchar+0x144>
     ffc:	9f 37       	cpi	r25, 0x7F	; 127
     ffe:	21 f0       	breq	.+8      	; 0x1008 <uart_getchar+0xba>
    1000:	95 31       	cpi	r25, 0x15	; 21
    1002:	09 f0       	breq	.+2      	; 0x1006 <uart_getchar+0xb8>
    1004:	b4 cf       	rjmp	.-152    	; 0xf6e <uart_getchar+0x20>
    1006:	32 c0       	rjmp	.+100    	; 0x106c <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	0a 3a       	cpi	r16, 0xAA	; 170
    100c:	1f 07       	cpc	r17, r31
    100e:	09 f0       	breq	.+2      	; 0x1012 <uart_getchar+0xc4>
    1010:	08 f4       	brcc	.+2      	; 0x1014 <uart_getchar+0xc6>
    1012:	ad cf       	rjmp	.-166    	; 0xf6e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1014:	88 e0       	ldi	r24, 0x08	; 8
    1016:	b7 01       	movw	r22, r14
    1018:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		uart_putchar(' ', stream);
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	b7 01       	movw	r22, r14
    1020:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		uart_putchar('\b', stream);
    1024:	88 e0       	ldi	r24, 0x08	; 8
    1026:	b7 01       	movw	r22, r14
    1028:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		cp--;
    102c:	01 50       	subi	r16, 0x01	; 1
    102e:	10 40       	sbci	r17, 0x00	; 0
    1030:	9e cf       	rjmp	.-196    	; 0xf6e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1032:	8d e0       	ldi	r24, 0x0D	; 13
    1034:	b7 01       	movw	r22, r14
    1036:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
    103a:	ca ea       	ldi	r28, 0xAA	; 170
    103c:	d1 e0       	ldi	r29, 0x01	; 1
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1040:	89 91       	ld	r24, Y+
    1042:	b7 01       	movw	r22, r14
    1044:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1048:	c0 17       	cp	r28, r16
    104a:	d1 07       	cpc	r29, r17
    104c:	c8 f3       	brcs	.-14     	; 0x1040 <uart_getchar+0xf2>
    104e:	8f cf       	rjmp	.-226    	; 0xf6e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	b7 01       	movw	r22, r14
    1054:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		uart_putchar(' ', stream);
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	b7 01       	movw	r22, r14
    105c:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		uart_putchar('\b', stream);
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	b7 01       	movw	r22, r14
    1064:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		cp--;
    1068:	01 50       	subi	r16, 0x01	; 1
    106a:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0a 3a       	cpi	r16, 0xAA	; 170
    1070:	18 07       	cpc	r17, r24
    1072:	09 f0       	breq	.+2      	; 0x1076 <uart_getchar+0x128>
    1074:	68 f7       	brcc	.-38     	; 0x1050 <uart_getchar+0x102>
    1076:	7b cf       	rjmp	.-266    	; 0xf6e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1078:	88 e0       	ldi	r24, 0x08	; 8
    107a:	b7 01       	movw	r22, r14
    107c:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		uart_putchar(' ', stream);
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	b7 01       	movw	r22, r14
    1084:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
		uart_putchar('\b', stream);
    1088:	88 e0       	ldi	r24, 0x08	; 8
    108a:	b7 01       	movw	r22, r14
    108c:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_putchar>
    1090:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1092:	e1 e0       	ldi	r30, 0x01	; 1
    1094:	0a 3a       	cpi	r16, 0xAA	; 170
    1096:	1e 07       	cpc	r17, r30
    1098:	09 f0       	breq	.+2      	; 0x109c <uart_getchar+0x14e>
    109a:	08 f4       	brcc	.+2      	; 0x109e <uart_getchar+0x150>
    109c:	68 cf       	rjmp	.-304    	; 0xf6e <uart_getchar+0x20>
    109e:	e8 01       	movw	r28, r16
    10a0:	8a 91       	ld	r24, -Y
    10a2:	80 32       	cpi	r24, 0x20	; 32
    10a4:	49 f7       	brne	.-46     	; 0x1078 <uart_getchar+0x12a>
    10a6:	63 cf       	rjmp	.-314    	; 0xf6e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    10a8:	e0 91 a8 01 	lds	r30, 0x01A8
    10ac:	f0 91 a9 01 	lds	r31, 0x01A9
    10b0:	81 91       	ld	r24, Z+
    10b2:	f0 93 a9 01 	sts	0x01A9, r31
    10b6:	e0 93 a8 01 	sts	0x01A8, r30
  if (c == '\n')
    10ba:	8a 30       	cpi	r24, 0x0A	; 10
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <uart_getchar+0x178>
    rxp = 0;
    10be:	10 92 a9 01 	sts	0x01A9, r1
    10c2:	10 92 a8 01 	sts	0x01A8, r1

  return c;
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <uart_getchar+0x182>
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	3f ef       	ldi	r19, 0xFF	; 255
}
    10d0:	c9 01       	movw	r24, r18
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	08 95       	ret

000010e0 <__udivmodhi4>:
    10e0:	aa 1b       	sub	r26, r26
    10e2:	bb 1b       	sub	r27, r27
    10e4:	51 e1       	ldi	r21, 0x11	; 17
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <__udivmodhi4_ep>

000010e8 <__udivmodhi4_loop>:
    10e8:	aa 1f       	adc	r26, r26
    10ea:	bb 1f       	adc	r27, r27
    10ec:	a6 17       	cp	r26, r22
    10ee:	b7 07       	cpc	r27, r23
    10f0:	10 f0       	brcs	.+4      	; 0x10f6 <__udivmodhi4_ep>
    10f2:	a6 1b       	sub	r26, r22
    10f4:	b7 0b       	sbc	r27, r23

000010f6 <__udivmodhi4_ep>:
    10f6:	88 1f       	adc	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	5a 95       	dec	r21
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <__udivmodhi4_loop>
    10fe:	80 95       	com	r24
    1100:	90 95       	com	r25
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	08 95       	ret

00001108 <__divmodhi4>:
    1108:	97 fb       	bst	r25, 7
    110a:	09 2e       	mov	r0, r25
    110c:	07 26       	eor	r0, r23
    110e:	0a d0       	rcall	.+20     	; 0x1124 <__divmodhi4_neg1>
    1110:	77 fd       	sbrc	r23, 7
    1112:	04 d0       	rcall	.+8      	; 0x111c <__divmodhi4_neg2>
    1114:	e5 df       	rcall	.-54     	; 0x10e0 <__udivmodhi4>
    1116:	06 d0       	rcall	.+12     	; 0x1124 <__divmodhi4_neg1>
    1118:	00 20       	and	r0, r0
    111a:	1a f4       	brpl	.+6      	; 0x1122 <__divmodhi4_exit>

0000111c <__divmodhi4_neg2>:
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255

00001122 <__divmodhi4_exit>:
    1122:	08 95       	ret

00001124 <__divmodhi4_neg1>:
    1124:	f6 f7       	brtc	.-4      	; 0x1122 <__divmodhi4_exit>
    1126:	90 95       	com	r25
    1128:	81 95       	neg	r24
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	08 95       	ret

0000112e <fputs>:
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	7c 01       	movw	r14, r24
    113c:	8b 01       	movw	r16, r22
    113e:	db 01       	movw	r26, r22
    1140:	13 96       	adiw	r26, 0x03	; 3
    1142:	8c 91       	ld	r24, X
    1144:	81 fd       	sbrc	r24, 1
    1146:	03 c0       	rjmp	.+6      	; 0x114e <fputs+0x20>
    1148:	cf ef       	ldi	r28, 0xFF	; 255
    114a:	df ef       	ldi	r29, 0xFF	; 255
    114c:	13 c0       	rjmp	.+38     	; 0x1174 <fputs+0x46>
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
    1152:	0b c0       	rjmp	.+22     	; 0x116a <fputs+0x3c>
    1154:	d8 01       	movw	r26, r16
    1156:	18 96       	adiw	r26, 0x08	; 8
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	19 97       	sbiw	r26, 0x09	; 9
    115e:	b8 01       	movw	r22, r16
    1160:	09 95       	icall
    1162:	89 2b       	or	r24, r25
    1164:	11 f0       	breq	.+4      	; 0x116a <fputs+0x3c>
    1166:	cf ef       	ldi	r28, 0xFF	; 255
    1168:	df ef       	ldi	r29, 0xFF	; 255
    116a:	f7 01       	movw	r30, r14
    116c:	81 91       	ld	r24, Z+
    116e:	7f 01       	movw	r14, r30
    1170:	88 23       	and	r24, r24
    1172:	81 f7       	brne	.-32     	; 0x1154 <fputs+0x26>
    1174:	ce 01       	movw	r24, r28
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	08 95       	ret

00001184 <fscanf>:
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9e 01       	movw	r18, r28
    118e:	27 5f       	subi	r18, 0xF7	; 247
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	6f 81       	ldd	r22, Y+7	; 0x07
    1198:	78 85       	ldd	r23, Y+8	; 0x08
    119a:	a9 01       	movw	r20, r18
    119c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vfscanf>
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <sprintf>:
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	2e 97       	sbiw	r28, 0x0e	; 14
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	0d 89       	ldd	r16, Y+21	; 0x15
    11c0:	1e 89       	ldd	r17, Y+22	; 0x16
    11c2:	86 e0       	ldi	r24, 0x06	; 6
    11c4:	8c 83       	std	Y+4, r24	; 0x04
    11c6:	1a 83       	std	Y+2, r17	; 0x02
    11c8:	09 83       	std	Y+1, r16	; 0x01
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	9f e7       	ldi	r25, 0x7F	; 127
    11ce:	9e 83       	std	Y+6, r25	; 0x06
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	9e 01       	movw	r18, r28
    11d4:	27 5e       	subi	r18, 0xE7	; 231
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	6f 89       	ldd	r22, Y+23	; 0x17
    11de:	78 8d       	ldd	r23, Y+24	; 0x18
    11e0:	a9 01       	movw	r20, r18
    11e2:	0e 94 27 09 	call	0x124e	; 0x124e <vfprintf>
    11e6:	2f 81       	ldd	r18, Y+7	; 0x07
    11e8:	38 85       	ldd	r19, Y+8	; 0x08
    11ea:	02 0f       	add	r16, r18
    11ec:	13 1f       	adc	r17, r19
    11ee:	f8 01       	movw	r30, r16
    11f0:	10 82       	st	Z, r1
    11f2:	2e 96       	adiw	r28, 0x0e	; 14
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <sscanf>:
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	2e 97       	sbiw	r28, 0x0e	; 14
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	85 e0       	ldi	r24, 0x05	; 5
    121e:	8c 83       	std	Y+4, r24	; 0x04
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	9e 01       	movw	r18, r28
    122a:	29 5e       	subi	r18, 0xE9	; 233
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	ce 01       	movw	r24, r28
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	6d 89       	ldd	r22, Y+21	; 0x15
    1234:	7e 89       	ldd	r23, Y+22	; 0x16
    1236:	a9 01       	movw	r20, r18
    1238:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vfscanf>
    123c:	2e 96       	adiw	r28, 0x0e	; 14
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <vfprintf>:
    124e:	2f 92       	push	r2
    1250:	3f 92       	push	r3
    1252:	4f 92       	push	r4
    1254:	5f 92       	push	r5
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	2b 97       	sbiw	r28, 0x0b	; 11
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	3c 01       	movw	r6, r24
    1284:	2b 01       	movw	r4, r22
    1286:	5a 01       	movw	r10, r20
    1288:	fc 01       	movw	r30, r24
    128a:	17 82       	std	Z+7, r1	; 0x07
    128c:	16 82       	std	Z+6, r1	; 0x06
    128e:	83 81       	ldd	r24, Z+3	; 0x03
    1290:	81 fd       	sbrc	r24, 1
    1292:	03 c0       	rjmp	.+6      	; 0x129a <vfprintf+0x4c>
    1294:	6f ef       	ldi	r22, 0xFF	; 255
    1296:	7f ef       	ldi	r23, 0xFF	; 255
    1298:	c6 c1       	rjmp	.+908    	; 0x1626 <vfprintf+0x3d8>
    129a:	9a e0       	ldi	r25, 0x0A	; 10
    129c:	89 2e       	mov	r8, r25
    129e:	1e 01       	movw	r2, r28
    12a0:	08 94       	sec
    12a2:	21 1c       	adc	r2, r1
    12a4:	31 1c       	adc	r3, r1
    12a6:	f3 01       	movw	r30, r6
    12a8:	23 81       	ldd	r18, Z+3	; 0x03
    12aa:	f2 01       	movw	r30, r4
    12ac:	23 fd       	sbrc	r18, 3
    12ae:	85 91       	lpm	r24, Z+
    12b0:	23 ff       	sbrs	r18, 3
    12b2:	81 91       	ld	r24, Z+
    12b4:	2f 01       	movw	r4, r30
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <vfprintf+0x6e>
    12ba:	b2 c1       	rjmp	.+868    	; 0x1620 <vfprintf+0x3d2>
    12bc:	85 32       	cpi	r24, 0x25	; 37
    12be:	39 f4       	brne	.+14     	; 0x12ce <vfprintf+0x80>
    12c0:	23 fd       	sbrc	r18, 3
    12c2:	85 91       	lpm	r24, Z+
    12c4:	23 ff       	sbrs	r18, 3
    12c6:	81 91       	ld	r24, Z+
    12c8:	2f 01       	movw	r4, r30
    12ca:	85 32       	cpi	r24, 0x25	; 37
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <vfprintf+0x8a>
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	b3 01       	movw	r22, r6
    12d2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    12d6:	e7 cf       	rjmp	.-50     	; 0x12a6 <vfprintf+0x58>
    12d8:	98 2f       	mov	r25, r24
    12da:	ff 24       	eor	r15, r15
    12dc:	ee 24       	eor	r14, r14
    12de:	99 24       	eor	r9, r9
    12e0:	ff e1       	ldi	r31, 0x1F	; 31
    12e2:	ff 15       	cp	r31, r15
    12e4:	d0 f0       	brcs	.+52     	; 0x131a <vfprintf+0xcc>
    12e6:	9b 32       	cpi	r25, 0x2B	; 43
    12e8:	69 f0       	breq	.+26     	; 0x1304 <vfprintf+0xb6>
    12ea:	9c 32       	cpi	r25, 0x2C	; 44
    12ec:	28 f4       	brcc	.+10     	; 0x12f8 <vfprintf+0xaa>
    12ee:	90 32       	cpi	r25, 0x20	; 32
    12f0:	59 f0       	breq	.+22     	; 0x1308 <vfprintf+0xba>
    12f2:	93 32       	cpi	r25, 0x23	; 35
    12f4:	91 f4       	brne	.+36     	; 0x131a <vfprintf+0xcc>
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <vfprintf+0xc6>
    12f8:	9d 32       	cpi	r25, 0x2D	; 45
    12fa:	49 f0       	breq	.+18     	; 0x130e <vfprintf+0xc0>
    12fc:	90 33       	cpi	r25, 0x30	; 48
    12fe:	69 f4       	brne	.+26     	; 0x131a <vfprintf+0xcc>
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	24 c0       	rjmp	.+72     	; 0x134c <vfprintf+0xfe>
    1304:	52 e0       	ldi	r21, 0x02	; 2
    1306:	f5 2a       	or	r15, r21
    1308:	84 e0       	ldi	r24, 0x04	; 4
    130a:	f8 2a       	or	r15, r24
    130c:	28 c0       	rjmp	.+80     	; 0x135e <vfprintf+0x110>
    130e:	98 e0       	ldi	r25, 0x08	; 8
    1310:	f9 2a       	or	r15, r25
    1312:	25 c0       	rjmp	.+74     	; 0x135e <vfprintf+0x110>
    1314:	e0 e1       	ldi	r30, 0x10	; 16
    1316:	fe 2a       	or	r15, r30
    1318:	22 c0       	rjmp	.+68     	; 0x135e <vfprintf+0x110>
    131a:	f7 fc       	sbrc	r15, 7
    131c:	29 c0       	rjmp	.+82     	; 0x1370 <vfprintf+0x122>
    131e:	89 2f       	mov	r24, r25
    1320:	80 53       	subi	r24, 0x30	; 48
    1322:	8a 30       	cpi	r24, 0x0A	; 10
    1324:	70 f4       	brcc	.+28     	; 0x1342 <vfprintf+0xf4>
    1326:	f6 fe       	sbrs	r15, 6
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <vfprintf+0xe6>
    132a:	98 9c       	mul	r9, r8
    132c:	90 2c       	mov	r9, r0
    132e:	11 24       	eor	r1, r1
    1330:	98 0e       	add	r9, r24
    1332:	15 c0       	rjmp	.+42     	; 0x135e <vfprintf+0x110>
    1334:	e8 9c       	mul	r14, r8
    1336:	e0 2c       	mov	r14, r0
    1338:	11 24       	eor	r1, r1
    133a:	e8 0e       	add	r14, r24
    133c:	f0 e2       	ldi	r31, 0x20	; 32
    133e:	ff 2a       	or	r15, r31
    1340:	0e c0       	rjmp	.+28     	; 0x135e <vfprintf+0x110>
    1342:	9e 32       	cpi	r25, 0x2E	; 46
    1344:	29 f4       	brne	.+10     	; 0x1350 <vfprintf+0x102>
    1346:	f6 fc       	sbrc	r15, 6
    1348:	6b c1       	rjmp	.+726    	; 0x1620 <vfprintf+0x3d2>
    134a:	40 e4       	ldi	r20, 0x40	; 64
    134c:	f4 2a       	or	r15, r20
    134e:	07 c0       	rjmp	.+14     	; 0x135e <vfprintf+0x110>
    1350:	9c 36       	cpi	r25, 0x6C	; 108
    1352:	19 f4       	brne	.+6      	; 0x135a <vfprintf+0x10c>
    1354:	50 e8       	ldi	r21, 0x80	; 128
    1356:	f5 2a       	or	r15, r21
    1358:	02 c0       	rjmp	.+4      	; 0x135e <vfprintf+0x110>
    135a:	98 36       	cpi	r25, 0x68	; 104
    135c:	49 f4       	brne	.+18     	; 0x1370 <vfprintf+0x122>
    135e:	f2 01       	movw	r30, r4
    1360:	23 fd       	sbrc	r18, 3
    1362:	95 91       	lpm	r25, Z+
    1364:	23 ff       	sbrs	r18, 3
    1366:	91 91       	ld	r25, Z+
    1368:	2f 01       	movw	r4, r30
    136a:	99 23       	and	r25, r25
    136c:	09 f0       	breq	.+2      	; 0x1370 <vfprintf+0x122>
    136e:	b8 cf       	rjmp	.-144    	; 0x12e0 <vfprintf+0x92>
    1370:	89 2f       	mov	r24, r25
    1372:	85 54       	subi	r24, 0x45	; 69
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	18 f0       	brcs	.+6      	; 0x137e <vfprintf+0x130>
    1378:	80 52       	subi	r24, 0x20	; 32
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	38 f4       	brcc	.+14     	; 0x138c <vfprintf+0x13e>
    137e:	44 e0       	ldi	r20, 0x04	; 4
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	a4 0e       	add	r10, r20
    1384:	b5 1e       	adc	r11, r21
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	59 83       	std	Y+1, r21	; 0x01
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <vfprintf+0x15c>
    138c:	93 36       	cpi	r25, 0x63	; 99
    138e:	31 f0       	breq	.+12     	; 0x139c <vfprintf+0x14e>
    1390:	93 37       	cpi	r25, 0x73	; 115
    1392:	79 f0       	breq	.+30     	; 0x13b2 <vfprintf+0x164>
    1394:	93 35       	cpi	r25, 0x53	; 83
    1396:	09 f0       	breq	.+2      	; 0x139a <vfprintf+0x14c>
    1398:	56 c0       	rjmp	.+172    	; 0x1446 <vfprintf+0x1f8>
    139a:	20 c0       	rjmp	.+64     	; 0x13dc <vfprintf+0x18e>
    139c:	f5 01       	movw	r30, r10
    139e:	80 81       	ld	r24, Z
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	42 e0       	ldi	r20, 0x02	; 2
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	a4 0e       	add	r10, r20
    13a8:	b5 1e       	adc	r11, r21
    13aa:	61 01       	movw	r12, r2
    13ac:	01 e0       	ldi	r16, 0x01	; 1
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	12 c0       	rjmp	.+36     	; 0x13d6 <vfprintf+0x188>
    13b2:	f5 01       	movw	r30, r10
    13b4:	c0 80       	ld	r12, Z
    13b6:	d1 80       	ldd	r13, Z+1	; 0x01
    13b8:	f6 fc       	sbrc	r15, 6
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <vfprintf+0x174>
    13bc:	6f ef       	ldi	r22, 0xFF	; 255
    13be:	7f ef       	ldi	r23, 0xFF	; 255
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0x178>
    13c2:	69 2d       	mov	r22, r9
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	42 e0       	ldi	r20, 0x02	; 2
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	a4 0e       	add	r10, r20
    13cc:	b5 1e       	adc	r11, r21
    13ce:	c6 01       	movw	r24, r12
    13d0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <strnlen>
    13d4:	8c 01       	movw	r16, r24
    13d6:	5f e7       	ldi	r21, 0x7F	; 127
    13d8:	f5 22       	and	r15, r21
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <vfprintf+0x1b6>
    13dc:	f5 01       	movw	r30, r10
    13de:	c0 80       	ld	r12, Z
    13e0:	d1 80       	ldd	r13, Z+1	; 0x01
    13e2:	f6 fc       	sbrc	r15, 6
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <vfprintf+0x19e>
    13e6:	6f ef       	ldi	r22, 0xFF	; 255
    13e8:	7f ef       	ldi	r23, 0xFF	; 255
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <vfprintf+0x1a2>
    13ec:	69 2d       	mov	r22, r9
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	42 e0       	ldi	r20, 0x02	; 2
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	a4 0e       	add	r10, r20
    13f6:	b5 1e       	adc	r11, r21
    13f8:	c6 01       	movw	r24, r12
    13fa:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <strnlen_P>
    13fe:	8c 01       	movw	r16, r24
    1400:	50 e8       	ldi	r21, 0x80	; 128
    1402:	f5 2a       	or	r15, r21
    1404:	f3 fe       	sbrs	r15, 3
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <vfprintf+0x1c8>
    1408:	1a c0       	rjmp	.+52     	; 0x143e <vfprintf+0x1f0>
    140a:	80 e2       	ldi	r24, 0x20	; 32
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b3 01       	movw	r22, r6
    1410:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1414:	ea 94       	dec	r14
    1416:	8e 2d       	mov	r24, r14
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	08 17       	cp	r16, r24
    141c:	19 07       	cpc	r17, r25
    141e:	a8 f3       	brcs	.-22     	; 0x140a <vfprintf+0x1bc>
    1420:	0e c0       	rjmp	.+28     	; 0x143e <vfprintf+0x1f0>
    1422:	f6 01       	movw	r30, r12
    1424:	f7 fc       	sbrc	r15, 7
    1426:	85 91       	lpm	r24, Z+
    1428:	f7 fe       	sbrs	r15, 7
    142a:	81 91       	ld	r24, Z+
    142c:	6f 01       	movw	r12, r30
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	b3 01       	movw	r22, r6
    1432:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1436:	e1 10       	cpse	r14, r1
    1438:	ea 94       	dec	r14
    143a:	01 50       	subi	r16, 0x01	; 1
    143c:	10 40       	sbci	r17, 0x00	; 0
    143e:	01 15       	cp	r16, r1
    1440:	11 05       	cpc	r17, r1
    1442:	79 f7       	brne	.-34     	; 0x1422 <vfprintf+0x1d4>
    1444:	ea c0       	rjmp	.+468    	; 0x161a <vfprintf+0x3cc>
    1446:	94 36       	cpi	r25, 0x64	; 100
    1448:	11 f0       	breq	.+4      	; 0x144e <vfprintf+0x200>
    144a:	99 36       	cpi	r25, 0x69	; 105
    144c:	69 f5       	brne	.+90     	; 0x14a8 <vfprintf+0x25a>
    144e:	f7 fe       	sbrs	r15, 7
    1450:	08 c0       	rjmp	.+16     	; 0x1462 <vfprintf+0x214>
    1452:	f5 01       	movw	r30, r10
    1454:	20 81       	ld	r18, Z
    1456:	31 81       	ldd	r19, Z+1	; 0x01
    1458:	42 81       	ldd	r20, Z+2	; 0x02
    145a:	53 81       	ldd	r21, Z+3	; 0x03
    145c:	84 e0       	ldi	r24, 0x04	; 4
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <vfprintf+0x228>
    1462:	f5 01       	movw	r30, r10
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	9c 01       	movw	r18, r24
    146a:	44 27       	eor	r20, r20
    146c:	37 fd       	sbrc	r19, 7
    146e:	40 95       	com	r20
    1470:	54 2f       	mov	r21, r20
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a8 0e       	add	r10, r24
    1478:	b9 1e       	adc	r11, r25
    147a:	9f e6       	ldi	r25, 0x6F	; 111
    147c:	f9 22       	and	r15, r25
    147e:	57 ff       	sbrs	r21, 7
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <vfprintf+0x246>
    1482:	50 95       	com	r21
    1484:	40 95       	com	r20
    1486:	30 95       	com	r19
    1488:	21 95       	neg	r18
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	4f 4f       	sbci	r20, 0xFF	; 255
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	e0 e8       	ldi	r30, 0x80	; 128
    1492:	fe 2a       	or	r15, r30
    1494:	ca 01       	movw	r24, r20
    1496:	b9 01       	movw	r22, r18
    1498:	a1 01       	movw	r20, r2
    149a:	2a e0       	ldi	r18, 0x0A	; 10
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__ultoa_invert>
    14a2:	d8 2e       	mov	r13, r24
    14a4:	d2 18       	sub	r13, r2
    14a6:	40 c0       	rjmp	.+128    	; 0x1528 <vfprintf+0x2da>
    14a8:	95 37       	cpi	r25, 0x75	; 117
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <vfprintf+0x268>
    14ac:	1f 2d       	mov	r17, r15
    14ae:	1f 7e       	andi	r17, 0xEF	; 239
    14b0:	2a e0       	ldi	r18, 0x0A	; 10
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	1d c0       	rjmp	.+58     	; 0x14f0 <vfprintf+0x2a2>
    14b6:	1f 2d       	mov	r17, r15
    14b8:	19 7f       	andi	r17, 0xF9	; 249
    14ba:	9f 36       	cpi	r25, 0x6F	; 111
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <vfprintf+0x288>
    14be:	90 37       	cpi	r25, 0x70	; 112
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <vfprintf+0x27c>
    14c2:	98 35       	cpi	r25, 0x58	; 88
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <vfprintf+0x27a>
    14c6:	ac c0       	rjmp	.+344    	; 0x1620 <vfprintf+0x3d2>
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <vfprintf+0x29a>
    14ca:	90 37       	cpi	r25, 0x70	; 112
    14cc:	39 f0       	breq	.+14     	; 0x14dc <vfprintf+0x28e>
    14ce:	98 37       	cpi	r25, 0x78	; 120
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <vfprintf+0x286>
    14d2:	a6 c0       	rjmp	.+332    	; 0x1620 <vfprintf+0x3d2>
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <vfprintf+0x290>
    14d6:	28 e0       	ldi	r18, 0x08	; 8
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <vfprintf+0x2a2>
    14dc:	10 61       	ori	r17, 0x10	; 16
    14de:	14 fd       	sbrc	r17, 4
    14e0:	14 60       	ori	r17, 0x04	; 4
    14e2:	20 e1       	ldi	r18, 0x10	; 16
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <vfprintf+0x2a2>
    14e8:	14 fd       	sbrc	r17, 4
    14ea:	16 60       	ori	r17, 0x06	; 6
    14ec:	20 e1       	ldi	r18, 0x10	; 16
    14ee:	32 e0       	ldi	r19, 0x02	; 2
    14f0:	17 ff       	sbrs	r17, 7
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <vfprintf+0x2b6>
    14f4:	f5 01       	movw	r30, r10
    14f6:	60 81       	ld	r22, Z
    14f8:	71 81       	ldd	r23, Z+1	; 0x01
    14fa:	82 81       	ldd	r24, Z+2	; 0x02
    14fc:	93 81       	ldd	r25, Z+3	; 0x03
    14fe:	44 e0       	ldi	r20, 0x04	; 4
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <vfprintf+0x2c6>
    1504:	f5 01       	movw	r30, r10
    1506:	80 81       	ld	r24, Z
    1508:	91 81       	ldd	r25, Z+1	; 0x01
    150a:	bc 01       	movw	r22, r24
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	42 e0       	ldi	r20, 0x02	; 2
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	a4 0e       	add	r10, r20
    1516:	b5 1e       	adc	r11, r21
    1518:	a1 01       	movw	r20, r2
    151a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__ultoa_invert>
    151e:	d8 2e       	mov	r13, r24
    1520:	d2 18       	sub	r13, r2
    1522:	8f e7       	ldi	r24, 0x7F	; 127
    1524:	f8 2e       	mov	r15, r24
    1526:	f1 22       	and	r15, r17
    1528:	f6 fe       	sbrs	r15, 6
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <vfprintf+0x2f4>
    152c:	5e ef       	ldi	r21, 0xFE	; 254
    152e:	f5 22       	and	r15, r21
    1530:	d9 14       	cp	r13, r9
    1532:	38 f4       	brcc	.+14     	; 0x1542 <vfprintf+0x2f4>
    1534:	f4 fe       	sbrs	r15, 4
    1536:	07 c0       	rjmp	.+14     	; 0x1546 <vfprintf+0x2f8>
    1538:	f2 fc       	sbrc	r15, 2
    153a:	05 c0       	rjmp	.+10     	; 0x1546 <vfprintf+0x2f8>
    153c:	8f ee       	ldi	r24, 0xEF	; 239
    153e:	f8 22       	and	r15, r24
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <vfprintf+0x2f8>
    1542:	1d 2d       	mov	r17, r13
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <vfprintf+0x2fa>
    1546:	19 2d       	mov	r17, r9
    1548:	f4 fe       	sbrs	r15, 4
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <vfprintf+0x318>
    154c:	fe 01       	movw	r30, r28
    154e:	ed 0d       	add	r30, r13
    1550:	f1 1d       	adc	r31, r1
    1552:	80 81       	ld	r24, Z
    1554:	80 33       	cpi	r24, 0x30	; 48
    1556:	19 f4       	brne	.+6      	; 0x155e <vfprintf+0x310>
    1558:	99 ee       	ldi	r25, 0xE9	; 233
    155a:	f9 22       	and	r15, r25
    155c:	08 c0       	rjmp	.+16     	; 0x156e <vfprintf+0x320>
    155e:	1f 5f       	subi	r17, 0xFF	; 255
    1560:	f2 fe       	sbrs	r15, 2
    1562:	05 c0       	rjmp	.+10     	; 0x156e <vfprintf+0x320>
    1564:	03 c0       	rjmp	.+6      	; 0x156c <vfprintf+0x31e>
    1566:	8f 2d       	mov	r24, r15
    1568:	86 78       	andi	r24, 0x86	; 134
    156a:	09 f0       	breq	.+2      	; 0x156e <vfprintf+0x320>
    156c:	1f 5f       	subi	r17, 0xFF	; 255
    156e:	0f 2d       	mov	r16, r15
    1570:	f3 fc       	sbrc	r15, 3
    1572:	14 c0       	rjmp	.+40     	; 0x159c <vfprintf+0x34e>
    1574:	f0 fe       	sbrs	r15, 0
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <vfprintf+0x348>
    1578:	1e 15       	cp	r17, r14
    157a:	10 f0       	brcs	.+4      	; 0x1580 <vfprintf+0x332>
    157c:	9d 2c       	mov	r9, r13
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <vfprintf+0x348>
    1580:	9d 2c       	mov	r9, r13
    1582:	9e 0c       	add	r9, r14
    1584:	91 1a       	sub	r9, r17
    1586:	1e 2d       	mov	r17, r14
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <vfprintf+0x348>
    158a:	80 e2       	ldi	r24, 0x20	; 32
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	b3 01       	movw	r22, r6
    1590:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1594:	1f 5f       	subi	r17, 0xFF	; 255
    1596:	1e 15       	cp	r17, r14
    1598:	c0 f3       	brcs	.-16     	; 0x158a <vfprintf+0x33c>
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <vfprintf+0x356>
    159c:	1e 15       	cp	r17, r14
    159e:	10 f4       	brcc	.+4      	; 0x15a4 <vfprintf+0x356>
    15a0:	e1 1a       	sub	r14, r17
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <vfprintf+0x358>
    15a4:	ee 24       	eor	r14, r14
    15a6:	04 ff       	sbrs	r16, 4
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <vfprintf+0x37a>
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	b3 01       	movw	r22, r6
    15b0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    15b4:	02 ff       	sbrs	r16, 2
    15b6:	1d c0       	rjmp	.+58     	; 0x15f2 <vfprintf+0x3a4>
    15b8:	01 fd       	sbrc	r16, 1
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <vfprintf+0x374>
    15bc:	88 e7       	ldi	r24, 0x78	; 120
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e c0       	rjmp	.+28     	; 0x15de <vfprintf+0x390>
    15c2:	88 e5       	ldi	r24, 0x58	; 88
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <vfprintf+0x390>
    15c8:	80 2f       	mov	r24, r16
    15ca:	86 78       	andi	r24, 0x86	; 134
    15cc:	91 f0       	breq	.+36     	; 0x15f2 <vfprintf+0x3a4>
    15ce:	01 ff       	sbrs	r16, 1
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x388>
    15d2:	8b e2       	ldi	r24, 0x2B	; 43
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <vfprintf+0x38a>
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	f7 fc       	sbrc	r15, 7
    15da:	8d e2       	ldi	r24, 0x2D	; 45
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	b3 01       	movw	r22, r6
    15e0:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <vfprintf+0x3a4>
    15e6:	80 e3       	ldi	r24, 0x30	; 48
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	b3 01       	movw	r22, r6
    15ec:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    15f0:	9a 94       	dec	r9
    15f2:	d9 14       	cp	r13, r9
    15f4:	c0 f3       	brcs	.-16     	; 0x15e6 <vfprintf+0x398>
    15f6:	da 94       	dec	r13
    15f8:	f1 01       	movw	r30, r2
    15fa:	ed 0d       	add	r30, r13
    15fc:	f1 1d       	adc	r31, r1
    15fe:	80 81       	ld	r24, Z
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	b3 01       	movw	r22, r6
    1604:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1608:	dd 20       	and	r13, r13
    160a:	a9 f7       	brne	.-22     	; 0x15f6 <vfprintf+0x3a8>
    160c:	06 c0       	rjmp	.+12     	; 0x161a <vfprintf+0x3cc>
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	b3 01       	movw	r22, r6
    1614:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fputc>
    1618:	ea 94       	dec	r14
    161a:	ee 20       	and	r14, r14
    161c:	c1 f7       	brne	.-16     	; 0x160e <vfprintf+0x3c0>
    161e:	43 ce       	rjmp	.-890    	; 0x12a6 <vfprintf+0x58>
    1620:	f3 01       	movw	r30, r6
    1622:	66 81       	ldd	r22, Z+6	; 0x06
    1624:	77 81       	ldd	r23, Z+7	; 0x07
    1626:	cb 01       	movw	r24, r22
    1628:	2b 96       	adiw	r28, 0x0b	; 11
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	3f 90       	pop	r3
    1656:	2f 90       	pop	r2
    1658:	08 95       	ret

0000165a <putval>:
    165a:	fc 01       	movw	r30, r24
    165c:	20 fd       	sbrc	r18, 0
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <putval+0x16>
    1660:	23 fd       	sbrc	r18, 3
    1662:	05 c0       	rjmp	.+10     	; 0x166e <putval+0x14>
    1664:	22 ff       	sbrs	r18, 2
    1666:	02 c0       	rjmp	.+4      	; 0x166c <putval+0x12>
    1668:	73 83       	std	Z+3, r23	; 0x03
    166a:	62 83       	std	Z+2, r22	; 0x02
    166c:	51 83       	std	Z+1, r21	; 0x01
    166e:	40 83       	st	Z, r20
    1670:	08 95       	ret

00001672 <mulacc>:
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	44 ff       	sbrs	r20, 4
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <mulacc+0x10>
    167e:	33 e0       	ldi	r19, 0x03	; 3
    1680:	11 c0       	rjmp	.+34     	; 0x16a4 <mulacc+0x32>
    1682:	46 ff       	sbrs	r20, 6
    1684:	02 c0       	rjmp	.+4      	; 0x168a <mulacc+0x18>
    1686:	34 e0       	ldi	r19, 0x04	; 4
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <mulacc+0x32>
    168a:	db 01       	movw	r26, r22
    168c:	fc 01       	movw	r30, r24
    168e:	aa 0f       	add	r26, r26
    1690:	bb 1f       	adc	r27, r27
    1692:	ee 1f       	adc	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	10 94       	com	r1
    1698:	d1 f7       	brne	.-12     	; 0x168e <mulacc+0x1c>
    169a:	6a 0f       	add	r22, r26
    169c:	7b 1f       	adc	r23, r27
    169e:	8e 1f       	adc	r24, r30
    16a0:	9f 1f       	adc	r25, r31
    16a2:	31 e0       	ldi	r19, 0x01	; 1
    16a4:	66 0f       	add	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	31 50       	subi	r19, 0x01	; 1
    16ae:	d1 f7       	brne	.-12     	; 0x16a4 <mulacc+0x32>
    16b0:	7b 01       	movw	r14, r22
    16b2:	8c 01       	movw	r16, r24
    16b4:	e2 0e       	add	r14, r18
    16b6:	f1 1c       	adc	r15, r1
    16b8:	01 1d       	adc	r16, r1
    16ba:	11 1d       	adc	r17, r1
    16bc:	a8 01       	movw	r20, r16
    16be:	97 01       	movw	r18, r14
    16c0:	b7 01       	movw	r22, r14
    16c2:	ca 01       	movw	r24, r20
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	08 95       	ret

000016ce <skip_spaces>:
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	8c 01       	movw	r16, r24
    16d8:	c8 01       	movw	r24, r16
    16da:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    16de:	ec 01       	movw	r28, r24
    16e0:	97 fd       	sbrc	r25, 7
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <skip_spaces+0x26>
    16e4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <isspace>
    16e8:	89 2b       	or	r24, r25
    16ea:	b1 f7       	brne	.-20     	; 0x16d8 <skip_spaces+0xa>
    16ec:	ce 01       	movw	r24, r28
    16ee:	b8 01       	movw	r22, r16
    16f0:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ungetc>
    16f4:	ce 01       	movw	r24, r28
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	08 95       	ret

00001700 <conv_int>:
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	ec 01       	movw	r28, r24
    1716:	c6 2e       	mov	r12, r22
    1718:	5a 01       	movw	r10, r20
    171a:	12 2f       	mov	r17, r18
    171c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    1720:	ac 01       	movw	r20, r24
    1722:	8b 32       	cpi	r24, 0x2B	; 43
    1724:	19 f0       	breq	.+6      	; 0x172c <conv_int+0x2c>
    1726:	8d 32       	cpi	r24, 0x2D	; 45
    1728:	51 f4       	brne	.+20     	; 0x173e <conv_int+0x3e>
    172a:	10 68       	ori	r17, 0x80	; 128
    172c:	ca 94       	dec	r12
    172e:	09 f4       	brne	.+2      	; 0x1732 <conv_int+0x32>
    1730:	6d c0       	rjmp	.+218    	; 0x180c <conv_int+0x10c>
    1732:	ce 01       	movw	r24, r28
    1734:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    1738:	ac 01       	movw	r20, r24
    173a:	97 fd       	sbrc	r25, 7
    173c:	67 c0       	rjmp	.+206    	; 0x180c <conv_int+0x10c>
    173e:	6d ef       	ldi	r22, 0xFD	; 253
    1740:	d6 2e       	mov	r13, r22
    1742:	d1 22       	and	r13, r17
    1744:	8d 2d       	mov	r24, r13
    1746:	80 73       	andi	r24, 0x30	; 48
    1748:	01 f5       	brne	.+64     	; 0x178a <conv_int+0x8a>
    174a:	40 33       	cpi	r20, 0x30	; 48
    174c:	f1 f4       	brne	.+60     	; 0x178a <conv_int+0x8a>
    174e:	ca 94       	dec	r12
    1750:	09 f4       	brne	.+2      	; 0x1754 <conv_int+0x54>
    1752:	47 c0       	rjmp	.+142    	; 0x17e2 <conv_int+0xe2>
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    175a:	ac 01       	movw	r20, r24
    175c:	97 fd       	sbrc	r25, 7
    175e:	41 c0       	rjmp	.+130    	; 0x17e2 <conv_int+0xe2>
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	d8 2a       	or	r13, r24
    1764:	48 37       	cpi	r20, 0x78	; 120
    1766:	11 f0       	breq	.+4      	; 0x176c <conv_int+0x6c>
    1768:	48 35       	cpi	r20, 0x58	; 88
    176a:	59 f4       	brne	.+22     	; 0x1782 <conv_int+0x82>
    176c:	80 e4       	ldi	r24, 0x40	; 64
    176e:	d8 2a       	or	r13, r24
    1770:	ca 94       	dec	r12
    1772:	b9 f1       	breq	.+110    	; 0x17e2 <conv_int+0xe2>
    1774:	ce 01       	movw	r24, r28
    1776:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    177a:	ac 01       	movw	r20, r24
    177c:	99 23       	and	r25, r25
    177e:	2c f4       	brge	.+10     	; 0x178a <conv_int+0x8a>
    1780:	30 c0       	rjmp	.+96     	; 0x17e2 <conv_int+0xe2>
    1782:	d6 fc       	sbrc	r13, 6
    1784:	02 c0       	rjmp	.+4      	; 0x178a <conv_int+0x8a>
    1786:	80 e1       	ldi	r24, 0x10	; 16
    1788:	d8 2a       	or	r13, r24
    178a:	ee 24       	eor	r14, r14
    178c:	ff 24       	eor	r15, r15
    178e:	87 01       	movw	r16, r14
    1790:	24 2f       	mov	r18, r20
    1792:	20 53       	subi	r18, 0x30	; 48
    1794:	28 30       	cpi	r18, 0x08	; 8
    1796:	88 f0       	brcs	.+34     	; 0x17ba <conv_int+0xba>
    1798:	d4 fc       	sbrc	r13, 4
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <conv_int+0xae>
    179c:	2a 30       	cpi	r18, 0x0A	; 10
    179e:	68 f0       	brcs	.+26     	; 0x17ba <conv_int+0xba>
    17a0:	d6 fe       	sbrs	r13, 6
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <conv_int+0xae>
    17a4:	2f 7d       	andi	r18, 0xDF	; 223
    17a6:	82 2f       	mov	r24, r18
    17a8:	81 51       	subi	r24, 0x11	; 17
    17aa:	86 30       	cpi	r24, 0x06	; 6
    17ac:	28 f0       	brcs	.+10     	; 0x17b8 <conv_int+0xb8>
    17ae:	ca 01       	movw	r24, r20
    17b0:	be 01       	movw	r22, r28
    17b2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ungetc>
    17b6:	12 c0       	rjmp	.+36     	; 0x17dc <conv_int+0xdc>
    17b8:	27 50       	subi	r18, 0x07	; 7
    17ba:	c8 01       	movw	r24, r16
    17bc:	b7 01       	movw	r22, r14
    17be:	4d 2d       	mov	r20, r13
    17c0:	0e 94 39 0b 	call	0x1672	; 0x1672 <mulacc>
    17c4:	7b 01       	movw	r14, r22
    17c6:	8c 01       	movw	r16, r24
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	d8 2a       	or	r13, r24
    17cc:	ca 94       	dec	r12
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <conv_int+0xe8>
    17d0:	ce 01       	movw	r24, r28
    17d2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    17d6:	ac 01       	movw	r20, r24
    17d8:	97 ff       	sbrs	r25, 7
    17da:	da cf       	rjmp	.-76     	; 0x1790 <conv_int+0x90>
    17dc:	d1 fc       	sbrc	r13, 1
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <conv_int+0xe8>
    17e0:	15 c0       	rjmp	.+42     	; 0x180c <conv_int+0x10c>
    17e2:	ee 24       	eor	r14, r14
    17e4:	ff 24       	eor	r15, r15
    17e6:	87 01       	movw	r16, r14
    17e8:	d7 fe       	sbrs	r13, 7
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <conv_int+0xfc>
    17ec:	10 95       	com	r17
    17ee:	00 95       	com	r16
    17f0:	f0 94       	com	r15
    17f2:	e0 94       	com	r14
    17f4:	e1 1c       	adc	r14, r1
    17f6:	f1 1c       	adc	r15, r1
    17f8:	01 1d       	adc	r16, r1
    17fa:	11 1d       	adc	r17, r1
    17fc:	c5 01       	movw	r24, r10
    17fe:	b8 01       	movw	r22, r16
    1800:	a7 01       	movw	r20, r14
    1802:	2d 2d       	mov	r18, r13
    1804:	0e 94 2d 0b 	call	0x165a	; 0x165a <putval>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	01 c0       	rjmp	.+2      	; 0x180e <conv_int+0x10e>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	08 95       	ret

00001824 <conv_brk>:
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	a0 97       	sbiw	r28, 0x20	; 32
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	6c 01       	movw	r12, r24
    1852:	a6 2e       	mov	r10, r22
    1854:	8a 01       	movw	r16, r20
    1856:	79 01       	movw	r14, r18
    1858:	fe 01       	movw	r30, r28
    185a:	31 96       	adiw	r30, 0x01	; 1
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	df 01       	movw	r26, r30
    1860:	1d 92       	st	X+, r1
    1862:	8a 95       	dec	r24
    1864:	e9 f7       	brne	.-6      	; 0x1860 <conv_brk+0x3c>
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	4f 01       	movw	r8, r30
    1872:	a1 e0       	ldi	r26, 0x01	; 1
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	f6 01       	movw	r30, r12
    1878:	83 81       	ldd	r24, Z+3	; 0x03
    187a:	f7 01       	movw	r30, r14
    187c:	83 fd       	sbrc	r24, 3
    187e:	25 91       	lpm	r18, Z+
    1880:	83 ff       	sbrs	r24, 3
    1882:	21 91       	ld	r18, Z+
    1884:	7f 01       	movw	r14, r30
    1886:	22 23       	and	r18, r18
    1888:	09 f4       	brne	.+2      	; 0x188c <conv_brk+0x68>
    188a:	7e c0       	rjmp	.+252    	; 0x1988 <conv_brk+0x164>
    188c:	2e 35       	cpi	r18, 0x5E	; 94
    188e:	19 f4       	brne	.+6      	; 0x1896 <conv_brk+0x72>
    1890:	41 15       	cp	r20, r1
    1892:	51 05       	cpc	r21, r1
    1894:	69 f1       	breq	.+90     	; 0x18f0 <conv_brk+0xcc>
    1896:	87 2f       	mov	r24, r23
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	84 17       	cp	r24, r20
    189c:	95 07       	cpc	r25, r21
    189e:	44 f4       	brge	.+16     	; 0x18b0 <conv_brk+0x8c>
    18a0:	2d 35       	cpi	r18, 0x5D	; 93
    18a2:	51 f1       	breq	.+84     	; 0x18f8 <conv_brk+0xd4>
    18a4:	2d 32       	cpi	r18, 0x2D	; 45
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <conv_brk+0x8c>
    18a8:	33 23       	and	r19, r19
    18aa:	29 f4       	brne	.+10     	; 0x18b6 <conv_brk+0x92>
    18ac:	31 e0       	ldi	r19, 0x01	; 1
    18ae:	21 c0       	rjmp	.+66     	; 0x18f2 <conv_brk+0xce>
    18b0:	33 23       	and	r19, r19
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <conv_brk+0x92>
    18b4:	62 2f       	mov	r22, r18
    18b6:	32 2f       	mov	r19, r18
    18b8:	83 2f       	mov	r24, r19
    18ba:	86 95       	lsr	r24
    18bc:	86 95       	lsr	r24
    18be:	86 95       	lsr	r24
    18c0:	f4 01       	movw	r30, r8
    18c2:	e8 0f       	add	r30, r24
    18c4:	f1 1d       	adc	r31, r1
    18c6:	83 2f       	mov	r24, r19
    18c8:	87 70       	andi	r24, 0x07	; 7
    18ca:	3d 01       	movw	r6, r26
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <conv_brk+0xae>
    18ce:	66 0c       	add	r6, r6
    18d0:	77 1c       	adc	r7, r7
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <conv_brk+0xaa>
    18d6:	20 81       	ld	r18, Z
    18d8:	26 29       	or	r18, r6
    18da:	20 83       	st	Z, r18
    18dc:	36 17       	cp	r19, r22
    18de:	11 f4       	brne	.+4      	; 0x18e4 <conv_brk+0xc0>
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	07 c0       	rjmp	.+14     	; 0x18f2 <conv_brk+0xce>
    18e4:	36 17       	cp	r19, r22
    18e6:	10 f4       	brcc	.+4      	; 0x18ec <conv_brk+0xc8>
    18e8:	3f 5f       	subi	r19, 0xFF	; 255
    18ea:	e6 cf       	rjmp	.-52     	; 0x18b8 <conv_brk+0x94>
    18ec:	31 50       	subi	r19, 0x01	; 1
    18ee:	e4 cf       	rjmp	.-56     	; 0x18b8 <conv_brk+0x94>
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	4f 5f       	subi	r20, 0xFF	; 255
    18f4:	5f 4f       	sbci	r21, 0xFF	; 255
    18f6:	bf cf       	rjmp	.-130    	; 0x1876 <conv_brk+0x52>
    18f8:	33 23       	and	r19, r19
    18fa:	19 f0       	breq	.+6      	; 0x1902 <conv_brk+0xde>
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	80 62       	ori	r24, 0x20	; 32
    1900:	8e 83       	std	Y+6, r24	; 0x06
    1902:	77 23       	and	r23, r23
    1904:	59 f0       	breq	.+22     	; 0x191c <conv_brk+0xf8>
    1906:	fe 01       	movw	r30, r28
    1908:	31 96       	adiw	r30, 0x01	; 1
    190a:	9e 01       	movw	r18, r28
    190c:	2f 5d       	subi	r18, 0xDF	; 223
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	80 95       	com	r24
    1914:	81 93       	st	Z+, r24
    1916:	e2 17       	cp	r30, r18
    1918:	f3 07       	cpc	r31, r19
    191a:	d1 f7       	brne	.-12     	; 0x1910 <conv_brk+0xec>
    191c:	bb 24       	eor	r11, r11
    191e:	b3 94       	inc	r11
    1920:	4e 01       	movw	r8, r28
    1922:	08 94       	sec
    1924:	81 1c       	adc	r8, r1
    1926:	91 1c       	adc	r9, r1
    1928:	c6 01       	movw	r24, r12
    192a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    192e:	ac 01       	movw	r20, r24
    1930:	97 fd       	sbrc	r25, 7
    1932:	22 c0       	rjmp	.+68     	; 0x1978 <conv_brk+0x154>
    1934:	86 95       	lsr	r24
    1936:	86 95       	lsr	r24
    1938:	86 95       	lsr	r24
    193a:	f4 01       	movw	r30, r8
    193c:	e8 0f       	add	r30, r24
    193e:	f1 1d       	adc	r31, r1
    1940:	80 81       	ld	r24, Z
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9a 01       	movw	r18, r20
    1946:	27 70       	andi	r18, 0x07	; 7
    1948:	30 70       	andi	r19, 0x00	; 0
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <conv_brk+0x12c>
    194c:	95 95       	asr	r25
    194e:	87 95       	ror	r24
    1950:	2a 95       	dec	r18
    1952:	e2 f7       	brpl	.-8      	; 0x194c <conv_brk+0x128>
    1954:	80 fd       	sbrc	r24, 0
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <conv_brk+0x13e>
    1958:	ca 01       	movw	r24, r20
    195a:	b6 01       	movw	r22, r12
    195c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ungetc>
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <conv_brk+0x154>
    1962:	01 15       	cp	r16, r1
    1964:	11 05       	cpc	r17, r1
    1966:	19 f0       	breq	.+6      	; 0x196e <conv_brk+0x14a>
    1968:	d8 01       	movw	r26, r16
    196a:	4d 93       	st	X+, r20
    196c:	8d 01       	movw	r16, r26
    196e:	aa 94       	dec	r10
    1970:	bb 24       	eor	r11, r11
    1972:	aa 20       	and	r10, r10
    1974:	c9 f6       	brne	.-78     	; 0x1928 <conv_brk+0x104>
    1976:	02 c0       	rjmp	.+4      	; 0x197c <conv_brk+0x158>
    1978:	bb 20       	and	r11, r11
    197a:	31 f4       	brne	.+12     	; 0x1988 <conv_brk+0x164>
    197c:	01 15       	cp	r16, r1
    197e:	11 05       	cpc	r17, r1
    1980:	29 f0       	breq	.+10     	; 0x198c <conv_brk+0x168>
    1982:	f8 01       	movw	r30, r16
    1984:	10 82       	st	Z, r1
    1986:	02 c0       	rjmp	.+4      	; 0x198c <conv_brk+0x168>
    1988:	ee 24       	eor	r14, r14
    198a:	ff 24       	eor	r15, r15
    198c:	c7 01       	movw	r24, r14
    198e:	a0 96       	adiw	r28, 0x20	; 32
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	bf 90       	pop	r11
    19ac:	af 90       	pop	r10
    19ae:	9f 90       	pop	r9
    19b0:	8f 90       	pop	r8
    19b2:	7f 90       	pop	r7
    19b4:	6f 90       	pop	r6
    19b6:	08 95       	ret

000019b8 <vfscanf>:
    19b8:	6f 92       	push	r6
    19ba:	7f 92       	push	r7
    19bc:	8f 92       	push	r8
    19be:	9f 92       	push	r9
    19c0:	af 92       	push	r10
    19c2:	bf 92       	push	r11
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	5c 01       	movw	r10, r24
    19d6:	6b 01       	movw	r12, r22
    19d8:	3a 01       	movw	r6, r20
    19da:	fc 01       	movw	r30, r24
    19dc:	17 82       	std	Z+7, r1	; 0x07
    19de:	16 82       	std	Z+6, r1	; 0x06
    19e0:	88 24       	eor	r8, r8
    19e2:	ea c0       	rjmp	.+468    	; 0x1bb8 <vfscanf+0x200>
    19e4:	81 2f       	mov	r24, r17
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <isspace>
    19ec:	89 2b       	or	r24, r25
    19ee:	21 f0       	breq	.+8      	; 0x19f8 <vfscanf+0x40>
    19f0:	c5 01       	movw	r24, r10
    19f2:	0e 94 67 0b 	call	0x16ce	; 0x16ce <skip_spaces>
    19f6:	e0 c0       	rjmp	.+448    	; 0x1bb8 <vfscanf+0x200>
    19f8:	15 32       	cpi	r17, 0x25	; 37
    19fa:	49 f4       	brne	.+18     	; 0x1a0e <vfscanf+0x56>
    19fc:	f6 01       	movw	r30, r12
    19fe:	f3 fc       	sbrc	r15, 3
    1a00:	65 91       	lpm	r22, Z+
    1a02:	f3 fe       	sbrs	r15, 3
    1a04:	61 91       	ld	r22, Z+
    1a06:	6f 01       	movw	r12, r30
    1a08:	65 32       	cpi	r22, 0x25	; 37
    1a0a:	69 f4       	brne	.+26     	; 0x1a26 <vfscanf+0x6e>
    1a0c:	15 e2       	ldi	r17, 0x25	; 37
    1a0e:	c5 01       	movw	r24, r10
    1a10:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    1a14:	97 fd       	sbrc	r25, 7
    1a16:	dc c0       	rjmp	.+440    	; 0x1bd0 <vfscanf+0x218>
    1a18:	18 17       	cp	r17, r24
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <vfscanf+0x66>
    1a1c:	cd c0       	rjmp	.+410    	; 0x1bb8 <vfscanf+0x200>
    1a1e:	b5 01       	movw	r22, r10
    1a20:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ungetc>
    1a24:	da c0       	rjmp	.+436    	; 0x1bda <vfscanf+0x222>
    1a26:	6a 32       	cpi	r22, 0x2A	; 42
    1a28:	19 f0       	breq	.+6      	; 0x1a30 <vfscanf+0x78>
    1a2a:	16 2f       	mov	r17, r22
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <vfscanf+0x84>
    1a30:	f3 fc       	sbrc	r15, 3
    1a32:	15 91       	lpm	r17, Z+
    1a34:	f3 fe       	sbrs	r15, 3
    1a36:	11 91       	ld	r17, Z+
    1a38:	6f 01       	movw	r12, r30
    1a3a:	01 e0       	ldi	r16, 0x01	; 1
    1a3c:	99 24       	eor	r9, r9
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <vfscanf+0xa6>
    1a40:	02 60       	ori	r16, 0x02	; 2
    1a42:	69 2d       	mov	r22, r9
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	0e 94 39 0b 	call	0x1672	; 0x1672 <mulacc>
    1a50:	96 2e       	mov	r9, r22
    1a52:	f6 01       	movw	r30, r12
    1a54:	f3 fc       	sbrc	r15, 3
    1a56:	15 91       	lpm	r17, Z+
    1a58:	f3 fe       	sbrs	r15, 3
    1a5a:	11 91       	ld	r17, Z+
    1a5c:	6f 01       	movw	r12, r30
    1a5e:	21 2f       	mov	r18, r17
    1a60:	20 53       	subi	r18, 0x30	; 48
    1a62:	2a 30       	cpi	r18, 0x0A	; 10
    1a64:	68 f3       	brcs	.-38     	; 0x1a40 <vfscanf+0x88>
    1a66:	01 fd       	sbrc	r16, 1
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <vfscanf+0xb8>
    1a6a:	99 24       	eor	r9, r9
    1a6c:	9a 94       	dec	r9
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <vfscanf+0xbe>
    1a70:	99 20       	and	r9, r9
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <vfscanf+0xbe>
    1a74:	b2 c0       	rjmp	.+356    	; 0x1bda <vfscanf+0x222>
    1a76:	18 36       	cpi	r17, 0x68	; 104
    1a78:	21 f0       	breq	.+8      	; 0x1a82 <vfscanf+0xca>
    1a7a:	1c 36       	cpi	r17, 0x6C	; 108
    1a7c:	99 f4       	brne	.+38     	; 0x1aa4 <vfscanf+0xec>
    1a7e:	f6 01       	movw	r30, r12
    1a80:	0b c0       	rjmp	.+22     	; 0x1a98 <vfscanf+0xe0>
    1a82:	f6 01       	movw	r30, r12
    1a84:	f3 fc       	sbrc	r15, 3
    1a86:	65 91       	lpm	r22, Z+
    1a88:	f3 fe       	sbrs	r15, 3
    1a8a:	61 91       	ld	r22, Z+
    1a8c:	68 36       	cpi	r22, 0x68	; 104
    1a8e:	19 f0       	breq	.+6      	; 0x1a96 <vfscanf+0xde>
    1a90:	6f 01       	movw	r12, r30
    1a92:	16 2f       	mov	r17, r22
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <vfscanf+0xec>
    1a96:	08 60       	ori	r16, 0x08	; 8
    1a98:	04 60       	ori	r16, 0x04	; 4
    1a9a:	f3 fc       	sbrc	r15, 3
    1a9c:	15 91       	lpm	r17, Z+
    1a9e:	f3 fe       	sbrs	r15, 3
    1aa0:	11 91       	ld	r17, Z+
    1aa2:	6f 01       	movw	r12, r30
    1aa4:	11 23       	and	r17, r17
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <vfscanf+0xf2>
    1aa8:	98 c0       	rjmp	.+304    	; 0x1bda <vfscanf+0x222>
    1aaa:	8a e4       	ldi	r24, 0x4A	; 74
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	61 2f       	mov	r22, r17
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <strchr_P>
    1ab6:	89 2b       	or	r24, r25
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <vfscanf+0x104>
    1aba:	8f c0       	rjmp	.+286    	; 0x1bda <vfscanf+0x222>
    1abc:	80 2f       	mov	r24, r16
    1abe:	00 ff       	sbrs	r16, 0
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <vfscanf+0x110>
    1ac2:	ee 24       	eor	r14, r14
    1ac4:	ff 24       	eor	r15, r15
    1ac6:	07 c0       	rjmp	.+14     	; 0x1ad6 <vfscanf+0x11e>
    1ac8:	f3 01       	movw	r30, r6
    1aca:	e0 80       	ld	r14, Z
    1acc:	f1 80       	ldd	r15, Z+1	; 0x01
    1ace:	22 e0       	ldi	r18, 0x02	; 2
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	62 0e       	add	r6, r18
    1ad4:	73 1e       	adc	r7, r19
    1ad6:	1e 36       	cpi	r17, 0x6E	; 110
    1ad8:	51 f4       	brne	.+20     	; 0x1aee <vfscanf+0x136>
    1ada:	f5 01       	movw	r30, r10
    1adc:	46 81       	ldd	r20, Z+6	; 0x06
    1ade:	57 81       	ldd	r21, Z+7	; 0x07
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	20 2f       	mov	r18, r16
    1ae8:	0e 94 2d 0b 	call	0x165a	; 0x165a <putval>
    1aec:	65 c0       	rjmp	.+202    	; 0x1bb8 <vfscanf+0x200>
    1aee:	13 36       	cpi	r17, 0x63	; 99
    1af0:	91 f4       	brne	.+36     	; 0x1b16 <vfscanf+0x15e>
    1af2:	81 fd       	sbrc	r24, 1
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <vfscanf+0x142>
    1af6:	99 24       	eor	r9, r9
    1af8:	93 94       	inc	r9
    1afa:	c5 01       	movw	r24, r10
    1afc:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    1b00:	97 fd       	sbrc	r25, 7
    1b02:	66 c0       	rjmp	.+204    	; 0x1bd0 <vfscanf+0x218>
    1b04:	e1 14       	cp	r14, r1
    1b06:	f1 04       	cpc	r15, r1
    1b08:	19 f0       	breq	.+6      	; 0x1b10 <vfscanf+0x158>
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	81 93       	st	Z+, r24
    1b0e:	7f 01       	movw	r14, r30
    1b10:	9a 94       	dec	r9
    1b12:	99 f7       	brne	.-26     	; 0x1afa <vfscanf+0x142>
    1b14:	4f c0       	rjmp	.+158    	; 0x1bb4 <vfscanf+0x1fc>
    1b16:	1b 35       	cpi	r17, 0x5B	; 91
    1b18:	59 f4       	brne	.+22     	; 0x1b30 <vfscanf+0x178>
    1b1a:	c5 01       	movw	r24, r10
    1b1c:	69 2d       	mov	r22, r9
    1b1e:	a7 01       	movw	r20, r14
    1b20:	96 01       	movw	r18, r12
    1b22:	0e 94 12 0c 	call	0x1824	; 0x1824 <conv_brk>
    1b26:	6c 01       	movw	r12, r24
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <vfscanf+0x176>
    1b2c:	43 c0       	rjmp	.+134    	; 0x1bb4 <vfscanf+0x1fc>
    1b2e:	3d c0       	rjmp	.+122    	; 0x1baa <vfscanf+0x1f2>
    1b30:	c5 01       	movw	r24, r10
    1b32:	0e 94 67 0b 	call	0x16ce	; 0x16ce <skip_spaces>
    1b36:	97 fd       	sbrc	r25, 7
    1b38:	4b c0       	rjmp	.+150    	; 0x1bd0 <vfscanf+0x218>
    1b3a:	1f 36       	cpi	r17, 0x6F	; 111
    1b3c:	59 f1       	breq	.+86     	; 0x1b94 <vfscanf+0x1dc>
    1b3e:	10 37       	cpi	r17, 0x70	; 112
    1b40:	28 f4       	brcc	.+10     	; 0x1b4c <vfscanf+0x194>
    1b42:	14 36       	cpi	r17, 0x64	; 100
    1b44:	29 f1       	breq	.+74     	; 0x1b90 <vfscanf+0x1d8>
    1b46:	19 36       	cpi	r17, 0x69	; 105
    1b48:	39 f5       	brne	.+78     	; 0x1b98 <vfscanf+0x1e0>
    1b4a:	27 c0       	rjmp	.+78     	; 0x1b9a <vfscanf+0x1e2>
    1b4c:	13 37       	cpi	r17, 0x73	; 115
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <vfscanf+0x19e>
    1b50:	15 37       	cpi	r17, 0x75	; 117
    1b52:	11 f5       	brne	.+68     	; 0x1b98 <vfscanf+0x1e0>
    1b54:	1d c0       	rjmp	.+58     	; 0x1b90 <vfscanf+0x1d8>
    1b56:	c5 01       	movw	r24, r10
    1b58:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fgetc>
    1b5c:	ec 01       	movw	r28, r24
    1b5e:	97 fd       	sbrc	r25, 7
    1b60:	11 c0       	rjmp	.+34     	; 0x1b84 <vfscanf+0x1cc>
    1b62:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <isspace>
    1b66:	89 2b       	or	r24, r25
    1b68:	29 f0       	breq	.+10     	; 0x1b74 <vfscanf+0x1bc>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	b5 01       	movw	r22, r10
    1b6e:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <ungetc>
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <vfscanf+0x1cc>
    1b74:	e1 14       	cp	r14, r1
    1b76:	f1 04       	cpc	r15, r1
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <vfscanf+0x1c8>
    1b7a:	f7 01       	movw	r30, r14
    1b7c:	c1 93       	st	Z+, r28
    1b7e:	7f 01       	movw	r14, r30
    1b80:	9a 94       	dec	r9
    1b82:	49 f7       	brne	.-46     	; 0x1b56 <vfscanf+0x19e>
    1b84:	e1 14       	cp	r14, r1
    1b86:	f1 04       	cpc	r15, r1
    1b88:	a9 f0       	breq	.+42     	; 0x1bb4 <vfscanf+0x1fc>
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	10 82       	st	Z, r1
    1b8e:	12 c0       	rjmp	.+36     	; 0x1bb4 <vfscanf+0x1fc>
    1b90:	00 62       	ori	r16, 0x20	; 32
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <vfscanf+0x1e2>
    1b94:	00 61       	ori	r16, 0x10	; 16
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <vfscanf+0x1e2>
    1b98:	00 64       	ori	r16, 0x40	; 64
    1b9a:	c5 01       	movw	r24, r10
    1b9c:	69 2d       	mov	r22, r9
    1b9e:	a7 01       	movw	r20, r14
    1ba0:	20 2f       	mov	r18, r16
    1ba2:	0e 94 80 0b 	call	0x1700	; 0x1700 <conv_int>
    1ba6:	88 23       	and	r24, r24
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <vfscanf+0x1fc>
    1baa:	f5 01       	movw	r30, r10
    1bac:	83 81       	ldd	r24, Z+3	; 0x03
    1bae:	80 73       	andi	r24, 0x30	; 48
    1bb0:	79 f4       	brne	.+30     	; 0x1bd0 <vfscanf+0x218>
    1bb2:	13 c0       	rjmp	.+38     	; 0x1bda <vfscanf+0x222>
    1bb4:	00 ff       	sbrs	r16, 0
    1bb6:	83 94       	inc	r8
    1bb8:	f5 01       	movw	r30, r10
    1bba:	f3 80       	ldd	r15, Z+3	; 0x03
    1bbc:	f6 01       	movw	r30, r12
    1bbe:	f3 fc       	sbrc	r15, 3
    1bc0:	15 91       	lpm	r17, Z+
    1bc2:	f3 fe       	sbrs	r15, 3
    1bc4:	11 91       	ld	r17, Z+
    1bc6:	6f 01       	movw	r12, r30
    1bc8:	11 23       	and	r17, r17
    1bca:	09 f0       	breq	.+2      	; 0x1bce <vfscanf+0x216>
    1bcc:	0b cf       	rjmp	.-490    	; 0x19e4 <vfscanf+0x2c>
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <vfscanf+0x222>
    1bd0:	88 20       	and	r8, r8
    1bd2:	19 f4       	brne	.+6      	; 0x1bda <vfscanf+0x222>
    1bd4:	2f ef       	ldi	r18, 0xFF	; 255
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <vfscanf+0x226>
    1bda:	28 2d       	mov	r18, r8
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	c9 01       	movw	r24, r18
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	ef 90       	pop	r14
    1bec:	df 90       	pop	r13
    1bee:	cf 90       	pop	r12
    1bf0:	bf 90       	pop	r11
    1bf2:	af 90       	pop	r10
    1bf4:	9f 90       	pop	r9
    1bf6:	8f 90       	pop	r8
    1bf8:	7f 90       	pop	r7
    1bfa:	6f 90       	pop	r6
    1bfc:	08 95       	ret

00001bfe <isspace>:
    1bfe:	91 11       	cpse	r25, r1
    1c00:	0d c1       	rjmp	.+538    	; 0x1e1c <__ctype_isfalse>
    1c02:	80 32       	cpi	r24, 0x20	; 32
    1c04:	19 f0       	breq	.+6      	; 0x1c0c <isspace+0xe>
    1c06:	89 50       	subi	r24, 0x09	; 9
    1c08:	85 50       	subi	r24, 0x05	; 5
    1c0a:	d0 f7       	brcc	.-12     	; 0x1c00 <isspace+0x2>
    1c0c:	08 95       	ret

00001c0e <strchr_P>:
    1c0e:	fc 01       	movw	r30, r24
    1c10:	05 90       	lpm	r0, Z+
    1c12:	06 16       	cp	r0, r22
    1c14:	21 f0       	breq	.+8      	; 0x1c1e <strchr_P+0x10>
    1c16:	00 20       	and	r0, r0
    1c18:	d9 f7       	brne	.-10     	; 0x1c10 <strchr_P+0x2>
    1c1a:	c0 01       	movw	r24, r0
    1c1c:	08 95       	ret
    1c1e:	31 97       	sbiw	r30, 0x01	; 1
    1c20:	cf 01       	movw	r24, r30
    1c22:	08 95       	ret

00001c24 <strnlen_P>:
    1c24:	fc 01       	movw	r30, r24
    1c26:	05 90       	lpm	r0, Z+
    1c28:	61 50       	subi	r22, 0x01	; 1
    1c2a:	70 40       	sbci	r23, 0x00	; 0
    1c2c:	01 10       	cpse	r0, r1
    1c2e:	d8 f7       	brcc	.-10     	; 0x1c26 <strnlen_P+0x2>
    1c30:	80 95       	com	r24
    1c32:	90 95       	com	r25
    1c34:	8e 0f       	add	r24, r30
    1c36:	9f 1f       	adc	r25, r31
    1c38:	08 95       	ret

00001c3a <strnlen>:
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	61 50       	subi	r22, 0x01	; 1
    1c3e:	70 40       	sbci	r23, 0x00	; 0
    1c40:	01 90       	ld	r0, Z+
    1c42:	01 10       	cpse	r0, r1
    1c44:	d8 f7       	brcc	.-10     	; 0x1c3c <strnlen+0x2>
    1c46:	80 95       	com	r24
    1c48:	90 95       	com	r25
    1c4a:	8e 0f       	add	r24, r30
    1c4c:	9f 1f       	adc	r25, r31
    1c4e:	08 95       	ret

00001c50 <fgetc>:
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	ec 01       	movw	r28, r24
    1c56:	4b 81       	ldd	r20, Y+3	; 0x03
    1c58:	40 ff       	sbrs	r20, 0
    1c5a:	1a c0       	rjmp	.+52     	; 0x1c90 <fgetc+0x40>
    1c5c:	46 ff       	sbrs	r20, 6
    1c5e:	0a c0       	rjmp	.+20     	; 0x1c74 <fgetc+0x24>
    1c60:	4f 7b       	andi	r20, 0xBF	; 191
    1c62:	4b 83       	std	Y+3, r20	; 0x03
    1c64:	8e 81       	ldd	r24, Y+6	; 0x06
    1c66:	9f 81       	ldd	r25, Y+7	; 0x07
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	9f 83       	std	Y+7, r25	; 0x07
    1c6c:	8e 83       	std	Y+6, r24	; 0x06
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	2b c0       	rjmp	.+86     	; 0x1cca <fgetc+0x7a>
    1c74:	42 ff       	sbrs	r20, 2
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <fgetc+0x4e>
    1c78:	e8 81       	ld	r30, Y
    1c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7c:	80 81       	ld	r24, Z
    1c7e:	28 2f       	mov	r18, r24
    1c80:	33 27       	eor	r19, r19
    1c82:	27 fd       	sbrc	r18, 7
    1c84:	30 95       	com	r19
    1c86:	21 15       	cp	r18, r1
    1c88:	31 05       	cpc	r19, r1
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <fgetc+0x46>
    1c8c:	40 62       	ori	r20, 0x20	; 32
    1c8e:	4b 83       	std	Y+3, r20	; 0x03
    1c90:	2f ef       	ldi	r18, 0xFF	; 255
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	1b c0       	rjmp	.+54     	; 0x1ccc <fgetc+0x7c>
    1c96:	31 96       	adiw	r30, 0x01	; 1
    1c98:	f9 83       	std	Y+1, r31	; 0x01
    1c9a:	e8 83       	st	Y, r30
    1c9c:	11 c0       	rjmp	.+34     	; 0x1cc0 <fgetc+0x70>
    1c9e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ca0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	09 95       	icall
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	97 ff       	sbrs	r25, 7
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <fgetc+0x70>
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	11 f0       	breq	.+4      	; 0x1cb8 <fgetc+0x68>
    1cb4:	80 e2       	ldi	r24, 0x20	; 32
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <fgetc+0x6a>
    1cb8:	80 e1       	ldi	r24, 0x10	; 16
    1cba:	89 2b       	or	r24, r25
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    1cbe:	e8 cf       	rjmp	.-48     	; 0x1c90 <fgetc+0x40>
    1cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	9f 83       	std	Y+7, r25	; 0x07
    1cc8:	8e 83       	std	Y+6, r24	; 0x06
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	c9 01       	movw	r24, r18
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <fputc>:
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	8c 01       	movw	r16, r24
    1cde:	eb 01       	movw	r28, r22
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	81 ff       	sbrs	r24, 1
    1ce4:	1b c0       	rjmp	.+54     	; 0x1d1c <fputc+0x48>
    1ce6:	82 ff       	sbrs	r24, 2
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <fputc+0x30>
    1cea:	2e 81       	ldd	r18, Y+6	; 0x06
    1cec:	3f 81       	ldd	r19, Y+7	; 0x07
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	28 17       	cp	r18, r24
    1cf4:	39 07       	cpc	r19, r25
    1cf6:	64 f4       	brge	.+24     	; 0x1d10 <fputc+0x3c>
    1cf8:	e8 81       	ld	r30, Y
    1cfa:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfc:	01 93       	st	Z+, r16
    1cfe:	f9 83       	std	Y+1, r31	; 0x01
    1d00:	e8 83       	st	Y, r30
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <fputc+0x3c>
    1d04:	e8 85       	ldd	r30, Y+8	; 0x08
    1d06:	f9 85       	ldd	r31, Y+9	; 0x09
    1d08:	80 2f       	mov	r24, r16
    1d0a:	09 95       	icall
    1d0c:	89 2b       	or	r24, r25
    1d0e:	31 f4       	brne	.+12     	; 0x1d1c <fputc+0x48>
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	9f 83       	std	Y+7, r25	; 0x07
    1d18:	8e 83       	std	Y+6, r24	; 0x06
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <fputc+0x4c>
    1d1c:	0f ef       	ldi	r16, 0xFF	; 255
    1d1e:	1f ef       	ldi	r17, 0xFF	; 255
    1d20:	c8 01       	movw	r24, r16
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <ungetc>:
    1d2c:	9c 01       	movw	r18, r24
    1d2e:	fb 01       	movw	r30, r22
    1d30:	83 81       	ldd	r24, Z+3	; 0x03
    1d32:	80 ff       	sbrs	r24, 0
    1d34:	11 c0       	rjmp	.+34     	; 0x1d58 <ungetc+0x2c>
    1d36:	86 fd       	sbrc	r24, 6
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <ungetc+0x2c>
    1d3a:	9f ef       	ldi	r25, 0xFF	; 255
    1d3c:	2f 3f       	cpi	r18, 0xFF	; 255
    1d3e:	39 07       	cpc	r19, r25
    1d40:	59 f0       	breq	.+22     	; 0x1d58 <ungetc+0x2c>
    1d42:	22 83       	std	Z+2, r18	; 0x02
    1d44:	80 64       	ori	r24, 0x40	; 64
    1d46:	8f 7d       	andi	r24, 0xDF	; 223
    1d48:	83 83       	std	Z+3, r24	; 0x03
    1d4a:	86 81       	ldd	r24, Z+6	; 0x06
    1d4c:	97 81       	ldd	r25, Z+7	; 0x07
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	97 83       	std	Z+7, r25	; 0x07
    1d52:	86 83       	std	Z+6, r24	; 0x06
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <ungetc+0x30>
    1d58:	2f ef       	ldi	r18, 0xFF	; 255
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	c9 01       	movw	r24, r18
    1d5e:	08 95       	ret

00001d60 <__ultoa_invert>:
    1d60:	fa 01       	movw	r30, r20
    1d62:	aa 27       	eor	r26, r26
    1d64:	28 30       	cpi	r18, 0x08	; 8
    1d66:	51 f1       	breq	.+84     	; 0x1dbc <__ultoa_invert+0x5c>
    1d68:	20 31       	cpi	r18, 0x10	; 16
    1d6a:	81 f1       	breq	.+96     	; 0x1dcc <__ultoa_invert+0x6c>
    1d6c:	e8 94       	clt
    1d6e:	6f 93       	push	r22
    1d70:	6e 7f       	andi	r22, 0xFE	; 254
    1d72:	6e 5f       	subi	r22, 0xFE	; 254
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	8f 4f       	sbci	r24, 0xFF	; 255
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	af 4f       	sbci	r26, 0xFF	; 255
    1d7c:	b1 e0       	ldi	r27, 0x01	; 1
    1d7e:	3e d0       	rcall	.+124    	; 0x1dfc <__ultoa_invert+0x9c>
    1d80:	b4 e0       	ldi	r27, 0x04	; 4
    1d82:	3c d0       	rcall	.+120    	; 0x1dfc <__ultoa_invert+0x9c>
    1d84:	67 0f       	add	r22, r23
    1d86:	78 1f       	adc	r23, r24
    1d88:	89 1f       	adc	r24, r25
    1d8a:	9a 1f       	adc	r25, r26
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	68 0f       	add	r22, r24
    1d90:	79 1f       	adc	r23, r25
    1d92:	8a 1f       	adc	r24, r26
    1d94:	91 1d       	adc	r25, r1
    1d96:	a1 1d       	adc	r26, r1
    1d98:	6a 0f       	add	r22, r26
    1d9a:	71 1d       	adc	r23, r1
    1d9c:	81 1d       	adc	r24, r1
    1d9e:	91 1d       	adc	r25, r1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	20 d0       	rcall	.+64     	; 0x1de4 <__ultoa_invert+0x84>
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <__ultoa_invert+0x48>
    1da6:	68 94       	set
    1da8:	3f 91       	pop	r19
    1daa:	2a e0       	ldi	r18, 0x0A	; 10
    1dac:	26 9f       	mul	r18, r22
    1dae:	11 24       	eor	r1, r1
    1db0:	30 19       	sub	r19, r0
    1db2:	30 5d       	subi	r19, 0xD0	; 208
    1db4:	31 93       	st	Z+, r19
    1db6:	de f6       	brtc	.-74     	; 0x1d6e <__ultoa_invert+0xe>
    1db8:	cf 01       	movw	r24, r30
    1dba:	08 95       	ret
    1dbc:	46 2f       	mov	r20, r22
    1dbe:	47 70       	andi	r20, 0x07	; 7
    1dc0:	40 5d       	subi	r20, 0xD0	; 208
    1dc2:	41 93       	st	Z+, r20
    1dc4:	b3 e0       	ldi	r27, 0x03	; 3
    1dc6:	0f d0       	rcall	.+30     	; 0x1de6 <__ultoa_invert+0x86>
    1dc8:	c9 f7       	brne	.-14     	; 0x1dbc <__ultoa_invert+0x5c>
    1dca:	f6 cf       	rjmp	.-20     	; 0x1db8 <__ultoa_invert+0x58>
    1dcc:	46 2f       	mov	r20, r22
    1dce:	4f 70       	andi	r20, 0x0F	; 15
    1dd0:	40 5d       	subi	r20, 0xD0	; 208
    1dd2:	4a 33       	cpi	r20, 0x3A	; 58
    1dd4:	18 f0       	brcs	.+6      	; 0x1ddc <__ultoa_invert+0x7c>
    1dd6:	49 5d       	subi	r20, 0xD9	; 217
    1dd8:	31 fd       	sbrc	r19, 1
    1dda:	40 52       	subi	r20, 0x20	; 32
    1ddc:	41 93       	st	Z+, r20
    1dde:	02 d0       	rcall	.+4      	; 0x1de4 <__ultoa_invert+0x84>
    1de0:	a9 f7       	brne	.-22     	; 0x1dcc <__ultoa_invert+0x6c>
    1de2:	ea cf       	rjmp	.-44     	; 0x1db8 <__ultoa_invert+0x58>
    1de4:	b4 e0       	ldi	r27, 0x04	; 4
    1de6:	a6 95       	lsr	r26
    1de8:	97 95       	ror	r25
    1dea:	87 95       	ror	r24
    1dec:	77 95       	ror	r23
    1dee:	67 95       	ror	r22
    1df0:	ba 95       	dec	r27
    1df2:	c9 f7       	brne	.-14     	; 0x1de6 <__ultoa_invert+0x86>
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	61 05       	cpc	r22, r1
    1df8:	71 05       	cpc	r23, r1
    1dfa:	08 95       	ret
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	0a 2e       	mov	r0, r26
    1e02:	06 94       	lsr	r0
    1e04:	57 95       	ror	r21
    1e06:	47 95       	ror	r20
    1e08:	37 95       	ror	r19
    1e0a:	27 95       	ror	r18
    1e0c:	ba 95       	dec	r27
    1e0e:	c9 f7       	brne	.-14     	; 0x1e02 <__ultoa_invert+0xa2>
    1e10:	62 0f       	add	r22, r18
    1e12:	73 1f       	adc	r23, r19
    1e14:	84 1f       	adc	r24, r20
    1e16:	95 1f       	adc	r25, r21
    1e18:	a0 1d       	adc	r26, r0
    1e1a:	08 95       	ret

00001e1c <__ctype_isfalse>:
    1e1c:	99 27       	eor	r25, r25
    1e1e:	88 27       	eor	r24, r24

00001e20 <__ctype_istrue>:
    1e20:	08 95       	ret

00001e22 <_exit>:
    1e22:	f8 94       	cli

00001e24 <__stop_program>:
    1e24:	ff cf       	rjmp	.-2      	; 0x1e24 <__stop_program>
