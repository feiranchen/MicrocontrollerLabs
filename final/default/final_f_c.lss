
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001f66  00001ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  0000209c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003b3  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c0f  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ef  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012d2  00000000  00000000  000046ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00005980  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000435  00000000  00000000  00005c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b2a  00000000  00000000  00006065  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  00006b8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LCD_wait1>:
      c2:	77 61 69 74 69 6e 67 20 66 6f 72 20 75 73 65 72     waiting for user
	...

000000d4 <LCD_wait2>:
      d4:	74 6f 20 70 72 65 73 73 20 62 75 74 74 6f 6e 20     to press button 
	...

000000e6 <LCD_printing>:
      e6:	70 72 69 6e 74 69 6e 67 20 20 20 20 20 20 20 20     printing        
	...

000000f8 <LCD_df1>:
      f8:	64 6f 77 6e 6c 6f 61 64 69 6e 67 20 20 20 20 20     downloading     
	...

0000010a <LCD_df2>:
     10a:	66 72 61 6d 65 20 20 20 20 20 20 20 20 20 20 20     frame           
	...

0000011c <LcdCustomChar>:
     11c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     12c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     13c:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     14c:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000015c <__c.1988>:
     15c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d0 e4       	ldi	r29, 0x40	; 64
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e6 e6       	ldi	r30, 0x66	; 102
     17c:	ff e1       	ldi	r31, 0x1F	; 31
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 3a       	cpi	r26, 0xA2	; 162
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	14 e0       	ldi	r17, 0x04	; 4
     190:	a2 ea       	ldi	r26, 0xA2	; 162
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a9 37       	cpi	r26, 0x79	; 121
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <main>
     1a2:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	ADCSRA = 0;
     1b0:	aa e7       	ldi	r26, 0x7A	; 122
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     1ba:	87 e8       	ldi	r24, 0x87	; 135
     1bc:	8c 93       	st	X, r24
end
     1be:	08 95       	ret

000001c0 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     1c0:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
     1c2:	8f ee       	ldi	r24, 0xEF	; 239
     1c4:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     1c6:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	8b b9       	out	0x0b, r24	; 11
	
end
     1cc:	08 95       	ret

000001ce <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     1ce:	ec e7       	ldi	r30, 0x7C	; 124
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     1d4:	80 54       	subi	r24, 0x40	; 64
     1d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1d8:	ea e7       	ldi	r30, 0x7A	; 122
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
end
     1e2:	08 95       	ret

000001e4 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     1e4:	5d 98       	cbi	0x0b, 5	; 11
     1e6:	88 e8       	ldi	r24, 0x88	; 136
     1e8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <raise_pen+0xa>
	_delay_ms(500);
end
     1f8:	08 95       	ret

000001fa <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
     1fc:	80 ea       	ldi	r24, 0xA0	; 160
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	20 e9       	ldi	r18, 0x90	; 144
     202:	31 e0       	ldi	r19, 0x01	; 1
     204:	f9 01       	movw	r30, r18
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <lower_pen+0xa>
	_delay_ms(400);
end
     20e:	08 95       	ret

00000210 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     210:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     218:	5a 9a       	sbi	0x0b, 2	; 11
end
     21a:	08 95       	ret

0000021c <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     21c:	5a 98       	cbi	0x0b, 2	; 11
     21e:	8a e1       	ldi	r24, 0x1A	; 26
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     224:	5b 9a       	sbi	0x0b, 3	; 11
end
     226:	08 95       	ret

00000228 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     228:	5e 98       	cbi	0x0b, 6	; 11
     22a:	8a e1       	ldi	r24, 0x1A	; 26
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     230:	5f 9a       	sbi	0x0b, 7	; 11
end
     232:	08 95       	ret

00000234 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     234:	5f 98       	cbi	0x0b, 7	; 11
     236:	8a e1       	ldi	r24, 0x1A	; 26
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     23c:	5e 9a       	sbi	0x0b, 6	; 11
end
     23e:	08 95       	ret

00000240 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x33;
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	83 73       	andi	r24, 0x33	; 51
     244:	8b b9       	out	0x0b, r24	; 11
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	20 e9       	ldi	r18, 0x90	; 144
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <stop_all+0xe>
	_delay_ms(100);
end
     258:	08 95       	ret

0000025a <circle>:

// draw a circle
void circle(void)
begin
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     260:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     262:	8a e1       	ldi	r24, 0x1A	; 26
     264:	f8 2e       	mov	r15, r24
     266:	8f 2d       	mov	r24, r15
     268:	8a 95       	dec	r24
     26a:	f1 f7       	brne	.-4      	; 0x268 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     26c:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     26e:	00 e8       	ldi	r16, 0x80	; 128
     270:	1e e3       	ldi	r17, 0x3E	; 62
     272:	c8 01       	movw	r24, r16
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     278:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     27c:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     27e:	8f 2d       	mov	r24, r15
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     284:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     286:	c8 01       	movw	r24, r16
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     28c:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     28e:	8f 2d       	mov	r24, r15
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     294:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	c8 01       	movw	r24, r16
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     29c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2a0:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2a2:	8f 2d       	mov	r24, r15
     2a4:	8a 95       	dec	r24
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     2a8:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2aa:	80 ee       	ldi	r24, 0xE0	; 224
     2ac:	9e e2       	ldi	r25, 0x2E	; 46
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     2b2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2b6:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b8:	8f 2d       	mov	r24, r15
     2ba:	8a 95       	dec	r24
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     2be:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c0:	00 e8       	ldi	r16, 0x80	; 128
     2c2:	15 e2       	ldi	r17, 0x25	; 37
     2c4:	c8 01       	movw	r24, r16
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     2ca:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2ce:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2d0:	8f 2d       	mov	r24, r15
     2d2:	8a 95       	dec	r24
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     2d6:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d8:	c8 01       	movw	r24, r16
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2de:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e0:	8f 2d       	mov	r24, r15
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     2e6:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e8:	c8 01       	movw	r24, r16
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2ee:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2f2:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f4:	8f 2d       	mov	r24, r15
     2f6:	8a 95       	dec	r24
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     2fa:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fc:	80 e7       	ldi	r24, 0x70	; 112
     2fe:	97 e1       	ldi	r25, 0x17	; 23
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     304:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     308:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     30a:	8f 2d       	mov	r24, r15
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     310:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     312:	00 ea       	ldi	r16, 0xA0	; 160
     314:	1f e0       	ldi	r17, 0x0F	; 15
     316:	c8 01       	movw	r24, r16
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     31c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     320:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     322:	8f 2d       	mov	r24, r15
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     328:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     32a:	c8 01       	movw	r24, r16
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     330:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     332:	8f 2d       	mov	r24, r15
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     338:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     340:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     344:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     346:	fa 94       	dec	r15
     348:	f1 f7       	brne	.-4      	; 0x346 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     34a:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34c:	80 ef       	ldi	r24, 0xF0	; 240
     34e:	9a e0       	ldi	r25, 0x0A	; 10
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     354:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
end
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	08 95       	ret

00000360 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     364:	20 91 ce 02 	lds	r18, 0x02CE
     368:	30 91 cf 02 	lds	r19, 0x02CF
     36c:	00 d0       	rcall	.+0      	; 0x36e <print_position+0xe>
     36e:	00 d0       	rcall	.+0      	; 0x370 <print_position+0x10>
     370:	00 d0       	rcall	.+0      	; 0x372 <print_position+0x12>
     372:	ed b7       	in	r30, 0x3d	; 61
     374:	fe b7       	in	r31, 0x3e	; 62
     376:	31 96       	adiw	r30, 0x01	; 1
     378:	0c eb       	ldi	r16, 0xBC	; 188
     37a:	12 e0       	ldi	r17, 0x02	; 2
     37c:	ad b7       	in	r26, 0x3d	; 61
     37e:	be b7       	in	r27, 0x3e	; 62
     380:	12 96       	adiw	r26, 0x02	; 2
     382:	1c 93       	st	X, r17
     384:	0e 93       	st	-X, r16
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	35 83       	std	Z+5, r19	; 0x05
     392:	24 83       	std	Z+4, r18	; 0x04
     394:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
	LCDGotoXY(0,1);
     398:	8d b7       	in	r24, 0x3d	; 61
     39a:	9e b7       	in	r25, 0x3e	; 62
     39c:	06 96       	adiw	r24, 0x06	; 6
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	9e bf       	out	0x3e, r25	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	8d bf       	out	0x3d, r24	; 61
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3b0:	f8 01       	movw	r30, r16
     3b2:	01 90       	ld	r0, Z+
     3b4:	00 20       	and	r0, r0
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <print_position+0x52>
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	e0 1b       	sub	r30, r16
     3bc:	f1 0b       	sbc	r31, r17
     3be:	c8 01       	movw	r24, r16
     3c0:	6e 2f       	mov	r22, r30
     3c2:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     3c6:	20 91 98 03 	lds	r18, 0x0398
     3ca:	30 91 99 03 	lds	r19, 0x0399
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <print_position+0x70>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <print_position+0x72>
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <print_position+0x74>
     3d4:	ed b7       	in	r30, 0x3d	; 61
     3d6:	fe b7       	in	r31, 0x3e	; 62
     3d8:	31 96       	adiw	r30, 0x01	; 1
     3da:	ad b7       	in	r26, 0x3d	; 61
     3dc:	be b7       	in	r27, 0x3e	; 62
     3de:	12 96       	adiw	r26, 0x02	; 2
     3e0:	1c 93       	st	X, r17
     3e2:	0e 93       	st	-X, r16
     3e4:	11 97       	sbiw	r26, 0x01	; 1
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	93 83       	std	Z+3, r25	; 0x03
     3ec:	82 83       	std	Z+2, r24	; 0x02
     3ee:	35 83       	std	Z+5, r19	; 0x05
     3f0:	24 83       	std	Z+4, r18	; 0x04
     3f2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
	LCDGotoXY(8,1);
     3f6:	8d b7       	in	r24, 0x3d	; 61
     3f8:	9e b7       	in	r25, 0x3e	; 62
     3fa:	06 96       	adiw	r24, 0x06	; 6
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	9e bf       	out	0x3e, r25	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	8d bf       	out	0x3d, r24	; 61
     406:	88 e0       	ldi	r24, 0x08	; 8
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     40e:	f8 01       	movw	r30, r16
     410:	01 90       	ld	r0, Z+
     412:	00 20       	and	r0, r0
     414:	e9 f7       	brne	.-6      	; 0x410 <print_position+0xb0>
     416:	31 97       	sbiw	r30, 0x01	; 1
     418:	e0 1b       	sub	r30, r16
     41a:	f1 0b       	sbc	r31, r17
     41c:	c8 01       	movw	r24, r16
     41e:	6e 2f       	mov	r22, r30
     420:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
end
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
     434:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     436:	42 30       	cpi	r20, 0x02	; 2
     438:	51 05       	cpc	r21, r1
     43a:	19 f4       	brne	.+6      	; 0x442 <move_to_XY+0x18>
     43c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     440:	05 c0       	rjmp	.+10     	; 0x44c <move_to_XY+0x22>
	if (d==1) lower_pen();
     442:	41 30       	cpi	r20, 0x01	; 1
     444:	51 05       	cpc	r21, r1
     446:	11 f4       	brne	.+4      	; 0x44c <move_to_XY+0x22>
     448:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     44c:	1c 16       	cp	r1, r28
     44e:	1d 06       	cpc	r1, r29
     450:	0c f0       	brlt	.+2      	; 0x454 <move_to_XY+0x2a>
     452:	28 c1       	rjmp	.+592    	; 0x6a4 <move_to_XY+0x27a>
     454:	10 16       	cp	r1, r16
     456:	11 06       	cpc	r1, r17
     458:	0c f0       	brlt	.+2      	; 0x45c <move_to_XY+0x32>
     45a:	24 c1       	rjmp	.+584    	; 0x6a4 <move_to_XY+0x27a>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     45c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     460:	80 ec       	ldi	r24, 0xC0	; 192
     462:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     466:	80 91 7a 00 	lds	r24, 0x007A
     46a:	80 64       	ori	r24, 0x40	; 64
     46c:	80 93 7a 00 	sts	0x007A, r24
	if (d==1) lower_pen();
	if(x_in>0 && y_in>0)
	begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     470:	80 91 7a 00 	lds	r24, 0x007A
     474:	86 fd       	sbrc	r24, 6
     476:	fc cf       	rjmp	.-8      	; 0x470 <move_to_XY+0x46>
		x_pos = (int)ADCL;
     478:	80 91 78 00 	lds	r24, 0x0078
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	90 93 cf 02 	sts	0x02CF, r25
     482:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     486:	40 91 ce 02 	lds	r20, 0x02CE
     48a:	50 91 cf 02 	lds	r21, 0x02CF
     48e:	20 91 79 00 	lds	r18, 0x0079
     492:	92 2f       	mov	r25, r18
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	84 0f       	add	r24, r20
     498:	95 1f       	adc	r25, r21
     49a:	90 93 cf 02 	sts	0x02CF, r25
     49e:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     4a2:	80 91 ce 02 	lds	r24, 0x02CE
     4a6:	90 91 cf 02 	lds	r25, 0x02CF
     4aa:	c8 17       	cp	r28, r24
     4ac:	d9 07       	cpc	r29, r25
     4ae:	50 f1       	brcs	.+84     	; 0x504 <move_to_XY+0xda>
     4b0:	5c c0       	rjmp	.+184    	; 0x56a <move_to_XY+0x140>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4b2:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4b6:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     4ba:	80 91 7a 00 	lds	r24, 0x007A
     4be:	80 64       	ori	r24, 0x40	; 64
     4c0:	80 93 7a 00 	sts	0x007A, r24
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <move_to_XY+0xa6>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     4c6:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4c8:	84 2f       	mov	r24, r20
     4ca:	8a 95       	dec	r24
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <move_to_XY+0xa0>
	_delay_us(5);
	PORTD |= 0x04;
     4ce:	5a 9a       	sbi	0x0b, 2	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_negative_x();
     4d0:	80 91 7a 00 	lds	r24, 0x007A
     4d4:	86 fd       	sbrc	r24, 6
     4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <move_to_XY+0x9c>
				x_pos = (int)ADCL;
     4d8:	80 91 78 00 	lds	r24, 0x0078
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 cf 02 	sts	0x02CF, r25
     4e2:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     4e6:	80 91 ce 02 	lds	r24, 0x02CE
     4ea:	90 91 cf 02 	lds	r25, 0x02CF
     4ee:	20 91 79 00 	lds	r18, 0x0079
     4f2:	32 2f       	mov	r19, r18
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	82 0f       	add	r24, r18
     4f8:	93 1f       	adc	r25, r19
     4fa:	90 93 cf 02 	sts	0x02CF, r25
     4fe:	80 93 ce 02 	sts	0x02CE, r24
     502:	02 c0       	rjmp	.+4      	; 0x508 <move_to_XY+0xde>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     504:	50 ec       	ldi	r21, 0xC0	; 192
     506:	4a e1       	ldi	r20, 0x1A	; 26
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     508:	80 91 ce 02 	lds	r24, 0x02CE
     50c:	90 91 cf 02 	lds	r25, 0x02CF
     510:	c8 17       	cp	r28, r24
     512:	d9 07       	cpc	r29, r25
     514:	70 f2       	brcs	.-100    	; 0x4b2 <move_to_XY+0x88>
     516:	32 c0       	rjmp	.+100    	; 0x57c <move_to_XY+0x152>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     518:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     51c:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     520:	80 91 7a 00 	lds	r24, 0x007A
     524:	80 64       	ori	r24, 0x40	; 64
     526:	80 93 7a 00 	sts	0x007A, r24
     52a:	05 c0       	rjmp	.+10     	; 0x536 <move_to_XY+0x10c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     52c:	5a 98       	cbi	0x0b, 2	; 11
     52e:	84 2f       	mov	r24, r20
     530:	8a 95       	dec	r24
     532:	f1 f7       	brne	.-4      	; 0x530 <move_to_XY+0x106>
	_delay_us(5);
	PORTD |= 0x08;
     534:	5b 9a       	sbi	0x0b, 3	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
     536:	80 91 7a 00 	lds	r24, 0x007A
     53a:	86 fd       	sbrc	r24, 6
     53c:	f7 cf       	rjmp	.-18     	; 0x52c <move_to_XY+0x102>
				x_pos = (int)ADCL;
     53e:	80 91 78 00 	lds	r24, 0x0078
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	90 93 cf 02 	sts	0x02CF, r25
     548:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     54c:	80 91 ce 02 	lds	r24, 0x02CE
     550:	90 91 cf 02 	lds	r25, 0x02CF
     554:	20 91 79 00 	lds	r18, 0x0079
     558:	32 2f       	mov	r19, r18
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	90 93 cf 02 	sts	0x02CF, r25
     564:	80 93 ce 02 	sts	0x02CE, r24
     568:	02 c0       	rjmp	.+4      	; 0x56e <move_to_XY+0x144>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     56a:	50 ec       	ldi	r21, 0xC0	; 192
     56c:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     56e:	80 91 ce 02 	lds	r24, 0x02CE
     572:	90 91 cf 02 	lds	r25, 0x02CF
     576:	8c 17       	cp	r24, r28
     578:	9d 07       	cpc	r25, r29
     57a:	70 f2       	brcs	.-100    	; 0x518 <move_to_XY+0xee>
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
			end
			stop_all();
     57c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     580:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     584:	81 ec       	ldi	r24, 0xC1	; 193
     586:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     58a:	80 91 7a 00 	lds	r24, 0x007A
     58e:	80 64       	ori	r24, 0x40	; 64
     590:	80 93 7a 00 	sts	0x007A, r24
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     594:	80 91 7a 00 	lds	r24, 0x007A
     598:	86 fd       	sbrc	r24, 6
     59a:	fc cf       	rjmp	.-8      	; 0x594 <move_to_XY+0x16a>
		y_pos = (int)ADCL;
     59c:	80 91 78 00 	lds	r24, 0x0078
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	90 93 99 03 	sts	0x0399, r25
     5a6:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     5aa:	40 91 98 03 	lds	r20, 0x0398
     5ae:	50 91 99 03 	lds	r21, 0x0399
     5b2:	20 91 79 00 	lds	r18, 0x0079
     5b6:	92 2f       	mov	r25, r18
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	84 0f       	add	r24, r20
     5bc:	95 1f       	adc	r25, r21
     5be:	90 93 99 03 	sts	0x0399, r25
     5c2:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     5c6:	80 91 98 03 	lds	r24, 0x0398
     5ca:	90 91 99 03 	lds	r25, 0x0399
     5ce:	08 17       	cp	r16, r24
     5d0:	19 07       	cpc	r17, r25
     5d2:	50 f1       	brcs	.+84     	; 0x628 <move_to_XY+0x1fe>
     5d4:	5c c0       	rjmp	.+184    	; 0x68e <move_to_XY+0x264>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5d6:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5da:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     5de:	80 91 7a 00 	lds	r24, 0x007A
     5e2:	80 64       	ori	r24, 0x40	; 64
     5e4:	80 93 7a 00 	sts	0x007A, r24
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <move_to_XY+0x1ca>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     5ea:	5e 98       	cbi	0x0b, 6	; 11
     5ec:	84 2f       	mov	r24, r20
     5ee:	8a 95       	dec	r24
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <move_to_XY+0x1c4>
	_delay_us(5);
	PORTD |= 0x80;
     5f2:	5f 9a       	sbi	0x0b, 7	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_negative_y();
     5f4:	80 91 7a 00 	lds	r24, 0x007A
     5f8:	86 fd       	sbrc	r24, 6
     5fa:	f7 cf       	rjmp	.-18     	; 0x5ea <move_to_XY+0x1c0>
				y_pos = (int)ADCL;
     5fc:	80 91 78 00 	lds	r24, 0x0078
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	90 93 99 03 	sts	0x0399, r25
     606:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     60a:	80 91 98 03 	lds	r24, 0x0398
     60e:	90 91 99 03 	lds	r25, 0x0399
     612:	20 91 79 00 	lds	r18, 0x0079
     616:	32 2f       	mov	r19, r18
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	82 0f       	add	r24, r18
     61c:	93 1f       	adc	r25, r19
     61e:	90 93 99 03 	sts	0x0399, r25
     622:	80 93 98 03 	sts	0x0398, r24
     626:	02 c0       	rjmp	.+4      	; 0x62c <move_to_XY+0x202>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     628:	51 ec       	ldi	r21, 0xC1	; 193
     62a:	4a e1       	ldi	r20, 0x1A	; 26
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     62c:	80 91 98 03 	lds	r24, 0x0398
     630:	90 91 99 03 	lds	r25, 0x0399
     634:	08 17       	cp	r16, r24
     636:	19 07       	cpc	r17, r25
     638:	70 f2       	brcs	.-100    	; 0x5d6 <move_to_XY+0x1ac>
     63a:	32 c0       	rjmp	.+100    	; 0x6a0 <move_to_XY+0x276>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     63c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     640:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     644:	80 91 7a 00 	lds	r24, 0x007A
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 93 7a 00 	sts	0x007A, r24
     64e:	05 c0       	rjmp	.+10     	; 0x65a <move_to_XY+0x230>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     650:	5f 98       	cbi	0x0b, 7	; 11
     652:	84 2f       	mov	r24, r20
     654:	8a 95       	dec	r24
     656:	f1 f7       	brne	.-4      	; 0x654 <move_to_XY+0x22a>
	_delay_us(5);
	PORTD |= 0x40;
     658:	5e 9a       	sbi	0x0b, 6	; 11
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
     65a:	80 91 7a 00 	lds	r24, 0x007A
     65e:	86 fd       	sbrc	r24, 6
     660:	f7 cf       	rjmp	.-18     	; 0x650 <move_to_XY+0x226>
				y_pos = (int)ADCL;
     662:	80 91 78 00 	lds	r24, 0x0078
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 99 03 	sts	0x0399, r25
     66c:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     670:	80 91 98 03 	lds	r24, 0x0398
     674:	90 91 99 03 	lds	r25, 0x0399
     678:	20 91 79 00 	lds	r18, 0x0079
     67c:	32 2f       	mov	r19, r18
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	82 0f       	add	r24, r18
     682:	93 1f       	adc	r25, r19
     684:	90 93 99 03 	sts	0x0399, r25
     688:	80 93 98 03 	sts	0x0398, r24
     68c:	02 c0       	rjmp	.+4      	; 0x692 <move_to_XY+0x268>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     68e:	51 ec       	ldi	r21, 0xC1	; 193
     690:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     692:	80 91 98 03 	lds	r24, 0x0398
     696:	90 91 99 03 	lds	r25, 0x0399
     69a:	80 17       	cp	r24, r16
     69c:	91 07       	cpc	r25, r17
     69e:	70 f2       	brcs	.-100    	; 0x63c <move_to_XY+0x212>
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
			end
			stop_all();
     6a0:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     6a4:	0e 94 b0 01 	call	0x360	; 0x360 <print_position>
end
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	08 95       	ret

000006b2 <move_motor>:
		LCDstring(lcd_buffer, 10);

end

void move_motor()
begin
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
     6b6:	80 91 ab 03 	lds	r24, 0x03AB
     6ba:	90 91 ac 03 	lds	r25, 0x03AC
     6be:	60 91 f4 01 	lds	r22, 0x01F4
     6c2:	70 91 f5 01 	lds	r23, 0x01F5
     6c6:	42 e0       	ldi	r20, 0x02	; 2
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	0e 94 15 02 	call	0x42a	; 0x42a <move_to_XY>
     6ce:	c1 e0       	ldi	r28, 0x01	; 1
     6d0:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     6d2:	be 01       	movw	r22, r28
     6d4:	66 0f       	add	r22, r22
     6d6:	77 1f       	adc	r23, r23
     6d8:	db 01       	movw	r26, r22
     6da:	a5 55       	subi	r26, 0x55	; 85
     6dc:	bc 4f       	sbci	r27, 0xFC	; 252
     6de:	8d 91       	ld	r24, X+
     6e0:	9c 91       	ld	r25, X
     6e2:	11 97       	sbiw	r26, 0x01	; 1
     6e4:	97 fd       	sbrc	r25, 7
     6e6:	13 c0       	rjmp	.+38     	; 0x70e <move_motor+0x5c>
     6e8:	fb 01       	movw	r30, r22
     6ea:	ec 50       	subi	r30, 0x0C	; 12
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	80 81       	ld	r24, Z
     6f0:	91 81       	ldd	r25, Z+1	; 0x01
     6f2:	97 fd       	sbrc	r25, 7
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <move_motor+0x5c>
		begin
			move_to_XY(x_vect[i],y_vect[i],1);
     6f6:	8d 91       	ld	r24, X+
     6f8:	9c 91       	ld	r25, X
     6fa:	60 81       	ld	r22, Z
     6fc:	71 81       	ldd	r23, Z+1	; 0x01
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	0e 94 15 02 	call	0x42a	; 0x42a <move_to_XY>
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
	for(i=1;i<100;i++)
     706:	21 96       	adiw	r28, 0x01	; 1
     708:	c4 36       	cpi	r28, 0x64	; 100
     70a:	d1 05       	cpc	r29, r1
     70c:	11 f7       	brne	.-60     	; 0x6d2 <move_motor+0x20>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2);
     70e:	8c eb       	ldi	r24, 0xBC	; 188
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	6c eb       	ldi	r22, 0xBC	; 188
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	42 e0       	ldi	r20, 0x02	; 2
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	0e 94 15 02 	call	0x42a	; 0x42a <move_to_XY>
end
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <get_frame>:
	// print where you end up
	print_position();			
end

void get_frame()
begin
     724:	2f 92       	push	r2
     726:	3f 92       	push	r3
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	69 97       	sbiw	r28, 0x19	; 25
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
     758:	8e ef       	ldi	r24, 0xFE	; 254
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9e 83       	std	Y+6, r25	; 0x06
     766:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     768:	18 86       	std	Y+8, r1	; 0x08
     76a:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
     76c:	0a e9       	ldi	r16, 0x9A	; 154
     76e:	13 e0       	ldi	r17, 0x03	; 3
     770:	c8 01       	movw	r24, r16
     772:	60 e1       	ldi	r22, 0x10	; 16
     774:	71 e0       	ldi	r23, 0x01	; 1
     776:	0e 94 30 09 	call	0x1260	; 0x1260 <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     77a:	60 91 75 04 	lds	r22, 0x0475
     77e:	70 91 76 04 	lds	r23, 0x0476
     782:	c8 01       	movw	r24, r16
     784:	0e 94 37 09 	call	0x126e	; 0x126e <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     788:	00 d0       	rcall	.+0      	; 0x78a <get_frame+0x66>
     78a:	00 d0       	rcall	.+0      	; 0x78c <get_frame+0x68>
     78c:	00 d0       	rcall	.+0      	; 0x78e <get_frame+0x6a>
     78e:	ed b7       	in	r30, 0x3d	; 61
     790:	fe b7       	in	r31, 0x3e	; 62
     792:	31 96       	adiw	r30, 0x01	; 1
     794:	80 91 73 04 	lds	r24, 0x0473
     798:	90 91 74 04 	lds	r25, 0x0474
     79c:	ad b7       	in	r26, 0x3d	; 61
     79e:	be b7       	in	r27, 0x3e	; 62
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	9c 93       	st	X, r25
     7a4:	8e 93       	st	-X, r24
     7a6:	11 97       	sbiw	r26, 0x01	; 1
     7a8:	8e e1       	ldi	r24, 0x1E	; 30
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	93 83       	std	Z+3, r25	; 0x03
     7ae:	82 83       	std	Z+2, r24	; 0x02
     7b0:	ce 01       	movw	r24, r28
     7b2:	07 96       	adiw	r24, 0x07	; 7
     7b4:	95 83       	std	Z+5, r25	; 0x05
     7b6:	84 83       	std	Z+4, r24	; 0x04
     7b8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	31 96       	adiw	r30, 0x01	; 1
     7c2:	ad b7       	in	r26, 0x3d	; 61
     7c4:	be b7       	in	r27, 0x3e	; 62
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	1c 93       	st	X, r17
     7ca:	0e 93       	st	-X, r16
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	82 e2       	ldi	r24, 0x22	; 34
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	93 83       	std	Z+3, r25	; 0x03
     7d4:	82 83       	std	Z+2, r24	; 0x02
     7d6:	8f 81       	ldd	r24, Y+7	; 0x07
     7d8:	98 85       	ldd	r25, Y+8	; 0x08
     7da:	95 83       	std	Z+5, r25	; 0x05
     7dc:	84 83       	std	Z+4, r24	; 0x04
     7de:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>

	LCDGotoXY(0, 0);
     7e2:	6d b7       	in	r22, 0x3d	; 61
     7e4:	7e b7       	in	r23, 0x3e	; 62
     7e6:	6a 5f       	subi	r22, 0xFA	; 250
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	7e bf       	out	0x3e, r23	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	6d bf       	out	0x3d, r22	; 61
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     7fc:	f8 01       	movw	r30, r16
     7fe:	01 90       	ld	r0, Z+
     800:	00 20       	and	r0, r0
     802:	e9 f7       	brne	.-6      	; 0x7fe <get_frame+0xda>
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	e0 1b       	sub	r30, r16
     808:	f1 0b       	sbc	r31, r17
     80a:	c8 01       	movw	r24, r16
     80c:	6e 2f       	mov	r22, r30
     80e:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
     812:	ee 24       	eor	r14, r14
     814:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     816:	79 e0       	ldi	r23, 0x09	; 9
     818:	a7 2e       	mov	r10, r23
     81a:	b1 2c       	mov	r11, r1
     81c:	ac 0e       	add	r10, r28
     81e:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
     820:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     822:	0c eb       	ldi	r16, 0xBC	; 188
     824:	12 e0       	ldi	r17, 0x02	; 2
     826:	65 e5       	ldi	r22, 0x55	; 85
     828:	26 2e       	mov	r2, r22
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     82e:	5b e4       	ldi	r21, 0x4B	; 75
     830:	45 2e       	mov	r4, r21
     832:	51 e0       	ldi	r21, 0x01	; 1
     834:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     836:	4e ef       	ldi	r20, 0xFE	; 254
     838:	c4 2e       	mov	r12, r20
     83a:	4f ef       	ldi	r20, 0xFF	; 255
     83c:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     83e:	30 e9       	ldi	r19, 0x90	; 144
     840:	63 2e       	mov	r6, r19
     842:	31 e0       	ldi	r19, 0x01	; 1
     844:	73 2e       	mov	r7, r19
     846:	ff c0       	rjmp	.+510    	; 0xa46 <get_frame+0x322>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     848:	60 91 75 04 	lds	r22, 0x0475
     84c:	70 91 76 04 	lds	r23, 0x0476
     850:	84 e3       	ldi	r24, 0x34	; 52
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 37 09 	call	0x126e	; 0x126e <fputs>
	fscanf(stdin, "%s", buffer) ;
     858:	00 d0       	rcall	.+0      	; 0x85a <get_frame+0x136>
     85a:	00 d0       	rcall	.+0      	; 0x85c <get_frame+0x138>
     85c:	00 d0       	rcall	.+0      	; 0x85e <get_frame+0x13a>
     85e:	ed b7       	in	r30, 0x3d	; 61
     860:	fe b7       	in	r31, 0x3e	; 62
     862:	31 96       	adiw	r30, 0x01	; 1
     864:	80 91 73 04 	lds	r24, 0x0473
     868:	90 91 74 04 	lds	r25, 0x0474
     86c:	ad b7       	in	r26, 0x3d	; 61
     86e:	be b7       	in	r27, 0x3e	; 62
     870:	12 96       	adiw	r26, 0x02	; 2
     872:	9c 93       	st	X, r25
     874:	8e 93       	st	-X, r24
     876:	11 97       	sbiw	r26, 0x01	; 1
     878:	69 e3       	ldi	r22, 0x39	; 57
     87a:	71 e0       	ldi	r23, 0x01	; 1
     87c:	73 83       	std	Z+3, r23	; 0x03
     87e:	62 83       	std	Z+2, r22	; 0x02
     880:	b5 82       	std	Z+5, r11	; 0x05
     882:	a4 82       	std	Z+4, r10	; 0x04
     884:	0e 94 62 09 	call	0x12c4	; 0x12c4 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     888:	00 d0       	rcall	.+0      	; 0x88a <get_frame+0x166>
     88a:	00 d0       	rcall	.+0      	; 0x88c <get_frame+0x168>
     88c:	ed b7       	in	r30, 0x3d	; 61
     88e:	fe b7       	in	r31, 0x3e	; 62
     890:	31 96       	adiw	r30, 0x01	; 1
     892:	ad b7       	in	r26, 0x3d	; 61
     894:	be b7       	in	r27, 0x3e	; 62
     896:	12 96       	adiw	r26, 0x02	; 2
     898:	bc 92       	st	X, r11
     89a:	ae 92       	st	-X, r10
     89c:	11 97       	sbiw	r26, 0x01	; 1
     89e:	6c e3       	ldi	r22, 0x3C	; 60
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	73 83       	std	Z+3, r23	; 0x03
     8a4:	62 83       	std	Z+2, r22	; 0x02
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	8c 0f       	add	r24, r28
     8ac:	9d 1f       	adc	r25, r29
     8ae:	95 83       	std	Z+5, r25	; 0x05
     8b0:	84 83       	std	Z+4, r24	; 0x04
     8b2:	a3 e0       	ldi	r26, 0x03	; 3
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ac 0f       	add	r26, r28
     8b8:	bd 1f       	adc	r27, r29
     8ba:	b7 83       	std	Z+7, r27	; 0x07
     8bc:	a6 83       	std	Z+6, r26	; 0x06
     8be:	65 e0       	ldi	r22, 0x05	; 5
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	6c 0f       	add	r22, r28
     8c4:	7d 1f       	adc	r23, r29
     8c6:	71 87       	std	Z+9, r23	; 0x09
     8c8:	60 87       	std	Z+8, r22	; 0x08
     8ca:	0e 94 a4 09 	call	0x1348	; 0x1348 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	ed b7       	in	r30, 0x3d	; 61
     8d8:	fe b7       	in	r31, 0x3e	; 62
     8da:	31 96       	adiw	r30, 0x01	; 1
     8dc:	ad b7       	in	r26, 0x3d	; 61
     8de:	be b7       	in	r27, 0x3e	; 62
     8e0:	11 96       	adiw	r26, 0x01	; 1
     8e2:	8c 92       	st	X, r8
     8e4:	11 97       	sbiw	r26, 0x01	; 1
     8e6:	12 96       	adiw	r26, 0x02	; 2
     8e8:	9c 92       	st	X, r9
     8ea:	66 e4       	ldi	r22, 0x46	; 70
     8ec:	71 e0       	ldi	r23, 0x01	; 1
     8ee:	73 83       	std	Z+3, r23	; 0x03
     8f0:	62 83       	std	Z+2, r22	; 0x02
     8f2:	f5 82       	std	Z+5, r15	; 0x05
     8f4:	e4 82       	std	Z+4, r14	; 0x04
     8f6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
	LCDGotoXY(11, 0);
     8fa:	8d b7       	in	r24, 0x3d	; 61
     8fc:	9e b7       	in	r25, 0x3e	; 62
     8fe:	06 96       	adiw	r24, 0x06	; 6
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	9e bf       	out	0x3e, r25	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	8d bf       	out	0x3d, r24	; 61
     90a:	8b e0       	ldi	r24, 0x0B	; 11
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     912:	c4 01       	movw	r24, r8
     914:	62 e0       	ldi	r22, 0x02	; 2
     916:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
	LCDstring(buffer,15);
     922:	c5 01       	movw	r24, r10
     924:	6f e0       	ldi	r22, 0x0F	; 15
     926:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     92a:	49 81       	ldd	r20, Y+1	; 0x01
     92c:	5a 81       	ldd	r21, Y+2	; 0x02
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	4f 3f       	cpi	r20, 0xFF	; 255
     932:	59 07       	cpc	r21, r25
     934:	0c f4       	brge	.+2      	; 0x938 <get_frame+0x214>
     936:	5a c0       	rjmp	.+180    	; 0x9ec <get_frame+0x2c8>
     938:	2b 81       	ldd	r18, Y+3	; 0x03
     93a:	3c 81       	ldd	r19, Y+4	; 0x04
     93c:	af ef       	ldi	r26, 0xFF	; 255
     93e:	2f 3f       	cpi	r18, 0xFF	; 255
     940:	3a 07       	cpc	r19, r26
     942:	0c f4       	brge	.+2      	; 0x946 <get_frame+0x222>
     944:	53 c0       	rjmp	.+166    	; 0x9ec <get_frame+0x2c8>
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	9e 81       	ldd	r25, Y+6	; 0x06
     94a:	bf ef       	ldi	r27, 0xFF	; 255
     94c:	8f 3f       	cpi	r24, 0xFF	; 255
     94e:	9b 07       	cpc	r25, r27
     950:	0c f4       	brge	.+2      	; 0x954 <get_frame+0x230>
     952:	4c c0       	rjmp	.+152    	; 0x9ec <get_frame+0x2c8>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     954:	6d b7       	in	r22, 0x3d	; 61
     956:	7e b7       	in	r23, 0x3e	; 62
     958:	6a 50       	subi	r22, 0x0A	; 10
     95a:	70 40       	sbci	r23, 0x00	; 0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	7e bf       	out	0x3e, r23	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	6d bf       	out	0x3d, r22	; 61
     966:	ed b7       	in	r30, 0x3d	; 61
     968:	fe b7       	in	r31, 0x3e	; 62
     96a:	31 96       	adiw	r30, 0x01	; 1
     96c:	ad b7       	in	r26, 0x3d	; 61
     96e:	be b7       	in	r27, 0x3e	; 62
     970:	12 96       	adiw	r26, 0x02	; 2
     972:	1c 93       	st	X, r17
     974:	0e 93       	st	-X, r16
     976:	11 97       	sbiw	r26, 0x01	; 1
     978:	53 82       	std	Z+3, r5	; 0x03
     97a:	42 82       	std	Z+2, r4	; 0x02
     97c:	55 83       	std	Z+5, r21	; 0x05
     97e:	44 83       	std	Z+4, r20	; 0x04
     980:	37 83       	std	Z+7, r19	; 0x07
     982:	26 83       	std	Z+6, r18	; 0x06
     984:	91 87       	std	Z+9, r25	; 0x09
     986:	80 87       	std	Z+8, r24	; 0x08
     988:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
		LCDGotoXY(0, 0);
     98c:	6d b7       	in	r22, 0x3d	; 61
     98e:	7e b7       	in	r23, 0x3e	; 62
     990:	66 5f       	subi	r22, 0xF6	; 246
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	7e bf       	out	0x3e, r23	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	6d bf       	out	0x3d, r22	; 61
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     9a6:	c8 01       	movw	r24, r16
     9a8:	6a e0       	ldi	r22, 0x0A	; 10
     9aa:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
		x_vect[i] = x;
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	d7 01       	movw	r26, r14
     9b4:	aa 0f       	add	r26, r26
     9b6:	bb 1f       	adc	r27, r27
     9b8:	fd 01       	movw	r30, r26
     9ba:	e5 55       	subi	r30, 0x55	; 85
     9bc:	fc 4f       	sbci	r31, 0xFC	; 252
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
		y_vect[i] = y;
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	fd 01       	movw	r30, r26
     9c8:	ec 50       	subi	r30, 0x0C	; 12
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
		d_vect[i] = d;
     9d0:	8d 81       	ldd	r24, Y+5	; 0x05
     9d2:	9e 81       	ldd	r25, Y+6	; 0x06
     9d4:	a0 53       	subi	r26, 0x30	; 48
     9d6:	bd 4f       	sbci	r27, 0xFD	; 253
     9d8:	11 96       	adiw	r26, 0x01	; 1
     9da:	9c 93       	st	X, r25
     9dc:	8e 93       	st	-X, r24
		x=-2;
     9de:	da 82       	std	Y+2, r13	; 0x02
     9e0:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     9e2:	dc 82       	std	Y+4, r13	; 0x04
     9e4:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     9e6:	de 82       	std	Y+6, r13	; 0x06
     9e8:	cd 82       	std	Y+5, r12	; 0x05
     9ea:	23 c0       	rjmp	.+70     	; 0xa32 <get_frame+0x30e>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <get_frame+0x2ca>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <get_frame+0x2cc>
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <get_frame+0x2ce>
     9f2:	ed b7       	in	r30, 0x3d	; 61
     9f4:	fe b7       	in	r31, 0x3e	; 62
     9f6:	31 96       	adiw	r30, 0x01	; 1
     9f8:	ad b7       	in	r26, 0x3d	; 61
     9fa:	be b7       	in	r27, 0x3e	; 62
     9fc:	12 96       	adiw	r26, 0x02	; 2
     9fe:	1c 93       	st	X, r17
     a00:	0e 93       	st	-X, r16
     a02:	11 97       	sbiw	r26, 0x01	; 1
     a04:	33 82       	std	Z+3, r3	; 0x03
     a06:	22 82       	std	Z+2, r2	; 0x02
     a08:	f5 82       	std	Z+5, r15	; 0x05
     a0a:	e4 82       	std	Z+4, r14	; 0x04
     a0c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
		LCDGotoXY(0, 0);
     a10:	6d b7       	in	r22, 0x3d	; 61
     a12:	7e b7       	in	r23, 0x3e	; 62
     a14:	6a 5f       	subi	r22, 0xFA	; 250
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	7e bf       	out	0x3e, r23	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	6d bf       	out	0x3d, r22	; 61
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a2a:	c8 01       	movw	r24, r16
     a2c:	6a e0       	ldi	r22, 0x0A	; 10
     a2e:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
     a32:	80 e1       	ldi	r24, 0x10	; 16
     a34:	97 e2       	ldi	r25, 0x27	; 39
     a36:	f3 01       	movw	r30, r6
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <get_frame+0x314>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3e:	d9 f7       	brne	.-10     	; 0xa36 <get_frame+0x312>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     a40:	08 94       	sec
     a42:	e1 1c       	adc	r14, r1
     a44:	f1 1c       	adc	r15, r1
     a46:	8f 81       	ldd	r24, Y+7	; 0x07
     a48:	98 85       	ldd	r25, Y+8	; 0x08
     a4a:	e8 16       	cp	r14, r24
     a4c:	f9 06       	cpc	r15, r25
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <get_frame+0x32e>
     a50:	fb ce       	rjmp	.-522    	; 0x848 <get_frame+0x124>
     a52:	80 e2       	ldi	r24, 0x20	; 32
     a54:	9e e4       	ldi	r25, 0x4E	; 78
     a56:	20 e9       	ldi	r18, 0x90	; 144
     a58:	31 e0       	ldi	r19, 0x01	; 1
     a5a:	f9 01       	movw	r30, r18
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <get_frame+0x338>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a62:	d9 f7       	brne	.-10     	; 0xa5a <get_frame+0x336>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     a64:	00 d0       	rcall	.+0      	; 0xa66 <get_frame+0x342>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <get_frame+0x344>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <get_frame+0x346>
     a6a:	ed b7       	in	r30, 0x3d	; 61
     a6c:	fe b7       	in	r31, 0x3e	; 62
     a6e:	31 96       	adiw	r30, 0x01	; 1
     a70:	0c eb       	ldi	r16, 0xBC	; 188
     a72:	12 e0       	ldi	r17, 0x02	; 2
     a74:	ad b7       	in	r26, 0x3d	; 61
     a76:	be b7       	in	r27, 0x3e	; 62
     a78:	12 96       	adiw	r26, 0x02	; 2
     a7a:	1c 93       	st	X, r17
     a7c:	0e 93       	st	-X, r16
     a7e:	11 97       	sbiw	r26, 0x01	; 1
     a80:	81 e6       	ldi	r24, 0x61	; 97
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	93 83       	std	Z+3, r25	; 0x03
     a86:	82 83       	std	Z+2, r24	; 0x02
     a88:	f5 82       	std	Z+5, r15	; 0x05
     a8a:	e4 82       	std	Z+4, r14	; 0x04
     a8c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
		LCDGotoXY(0, 0);
     a90:	6d b7       	in	r22, 0x3d	; 61
     a92:	7e b7       	in	r23, 0x3e	; 62
     a94:	6a 5f       	subi	r22, 0xFA	; 250
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	7e bf       	out	0x3e, r23	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	6d bf       	out	0x3d, r22	; 61
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     aaa:	c8 01       	movw	r24, r16
     aac:	6a e0       	ldi	r22, 0x0A	; 10
     aae:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     ab2:	20 91 ab 03 	lds	r18, 0x03AB
     ab6:	30 91 ac 03 	lds	r19, 0x03AC
     aba:	40 91 ad 03 	lds	r20, 0x03AD
     abe:	50 91 ae 03 	lds	r21, 0x03AE
     ac2:	60 91 af 03 	lds	r22, 0x03AF
     ac6:	70 91 b0 03 	lds	r23, 0x03B0
     aca:	e0 90 b1 03 	lds	r14, 0x03B1
     ace:	f0 90 b2 03 	lds	r15, 0x03B2
     ad2:	8d b7       	in	r24, 0x3d	; 61
     ad4:	9e b7       	in	r25, 0x3e	; 62
     ad6:	0c 97       	sbiw	r24, 0x0c	; 12
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	9e bf       	out	0x3e, r25	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	8d bf       	out	0x3d, r24	; 61
     ae2:	ed b7       	in	r30, 0x3d	; 61
     ae4:	fe b7       	in	r31, 0x3e	; 62
     ae6:	31 96       	adiw	r30, 0x01	; 1
     ae8:	ad b7       	in	r26, 0x3d	; 61
     aea:	be b7       	in	r27, 0x3e	; 62
     aec:	12 96       	adiw	r26, 0x02	; 2
     aee:	1c 93       	st	X, r17
     af0:	0e 93       	st	-X, r16
     af2:	11 97       	sbiw	r26, 0x01	; 1
     af4:	8d e6       	ldi	r24, 0x6D	; 109
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	93 83       	std	Z+3, r25	; 0x03
     afa:	82 83       	std	Z+2, r24	; 0x02
     afc:	35 83       	std	Z+5, r19	; 0x05
     afe:	24 83       	std	Z+4, r18	; 0x04
     b00:	57 83       	std	Z+7, r21	; 0x07
     b02:	46 83       	std	Z+6, r20	; 0x06
     b04:	71 87       	std	Z+9, r23	; 0x09
     b06:	60 87       	std	Z+8, r22	; 0x08
     b08:	f3 86       	std	Z+11, r15	; 0x0b
     b0a:	e2 86       	std	Z+10, r14	; 0x0a
     b0c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
		LCDGotoXY(0, 0);
     b10:	6d b7       	in	r22, 0x3d	; 61
     b12:	7e b7       	in	r23, 0x3e	; 62
     b14:	64 5f       	subi	r22, 0xF4	; 244
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	7e bf       	out	0x3e, r23	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	6d bf       	out	0x3d, r22	; 61
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     b2a:	c8 01       	movw	r24, r16
     b2c:	6a e0       	ldi	r22, 0x0A	; 10
     b2e:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     b32:	20 91 f4 01 	lds	r18, 0x01F4
     b36:	30 91 f5 01 	lds	r19, 0x01F5
     b3a:	40 91 f6 01 	lds	r20, 0x01F6
     b3e:	50 91 f7 01 	lds	r21, 0x01F7
     b42:	60 91 f8 01 	lds	r22, 0x01F8
     b46:	70 91 f9 01 	lds	r23, 0x01F9
     b4a:	e0 90 fa 01 	lds	r14, 0x01FA
     b4e:	f0 90 fb 01 	lds	r15, 0x01FB
     b52:	8d b7       	in	r24, 0x3d	; 61
     b54:	9e b7       	in	r25, 0x3e	; 62
     b56:	0c 97       	sbiw	r24, 0x0c	; 12
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	9e bf       	out	0x3e, r25	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	8d bf       	out	0x3d, r24	; 61
     b62:	ed b7       	in	r30, 0x3d	; 61
     b64:	fe b7       	in	r31, 0x3e	; 62
     b66:	31 96       	adiw	r30, 0x01	; 1
     b68:	ad b7       	in	r26, 0x3d	; 61
     b6a:	be b7       	in	r27, 0x3e	; 62
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	1c 93       	st	X, r17
     b70:	0e 93       	st	-X, r16
     b72:	11 97       	sbiw	r26, 0x01	; 1
     b74:	87 e7       	ldi	r24, 0x77	; 119
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	93 83       	std	Z+3, r25	; 0x03
     b7a:	82 83       	std	Z+2, r24	; 0x02
     b7c:	35 83       	std	Z+5, r19	; 0x05
     b7e:	24 83       	std	Z+4, r18	; 0x04
     b80:	57 83       	std	Z+7, r21	; 0x07
     b82:	46 83       	std	Z+6, r20	; 0x06
     b84:	71 87       	std	Z+9, r23	; 0x09
     b86:	60 87       	std	Z+8, r22	; 0x08
     b88:	f3 86       	std	Z+11, r15	; 0x0b
     b8a:	e2 86       	std	Z+10, r14	; 0x0a
     b8c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
		LCDGotoXY(0, 1);
     b90:	6d b7       	in	r22, 0x3d	; 61
     b92:	7e b7       	in	r23, 0x3e	; 62
     b94:	64 5f       	subi	r22, 0xF4	; 244
     b96:	7f 4f       	sbci	r23, 0xFF	; 255
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	7e bf       	out	0x3e, r23	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	6d bf       	out	0x3d, r22	; 61
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     baa:	c8 01       	movw	r24, r16
     bac:	6a e0       	ldi	r22, 0x0A	; 10
     bae:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     bb2:	20 91 d0 02 	lds	r18, 0x02D0
     bb6:	30 91 d1 02 	lds	r19, 0x02D1
     bba:	40 91 d2 02 	lds	r20, 0x02D2
     bbe:	50 91 d3 02 	lds	r21, 0x02D3
     bc2:	60 91 d4 02 	lds	r22, 0x02D4
     bc6:	70 91 d5 02 	lds	r23, 0x02D5
     bca:	e0 90 d6 02 	lds	r14, 0x02D6
     bce:	f0 90 d7 02 	lds	r15, 0x02D7
     bd2:	8d b7       	in	r24, 0x3d	; 61
     bd4:	9e b7       	in	r25, 0x3e	; 62
     bd6:	0c 97       	sbiw	r24, 0x0c	; 12
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	9e bf       	out	0x3e, r25	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	8d bf       	out	0x3d, r24	; 61
     be2:	ed b7       	in	r30, 0x3d	; 61
     be4:	fe b7       	in	r31, 0x3e	; 62
     be6:	31 96       	adiw	r30, 0x01	; 1
     be8:	ad b7       	in	r26, 0x3d	; 61
     bea:	be b7       	in	r27, 0x3e	; 62
     bec:	12 96       	adiw	r26, 0x02	; 2
     bee:	1c 93       	st	X, r17
     bf0:	0e 93       	st	-X, r16
     bf2:	11 97       	sbiw	r26, 0x01	; 1
     bf4:	81 e8       	ldi	r24, 0x81	; 129
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	93 83       	std	Z+3, r25	; 0x03
     bfa:	82 83       	std	Z+2, r24	; 0x02
     bfc:	35 83       	std	Z+5, r19	; 0x05
     bfe:	24 83       	std	Z+4, r18	; 0x04
     c00:	57 83       	std	Z+7, r21	; 0x07
     c02:	46 83       	std	Z+6, r20	; 0x06
     c04:	71 87       	std	Z+9, r23	; 0x09
     c06:	60 87       	std	Z+8, r22	; 0x08
     c08:	f3 86       	std	Z+11, r15	; 0x0b
     c0a:	e2 86       	std	Z+10, r14	; 0x0a
     c0c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <sprintf>
		LCDGotoXY(10, 0);
     c10:	6d b7       	in	r22, 0x3d	; 61
     c12:	7e b7       	in	r23, 0x3e	; 62
     c14:	64 5f       	subi	r22, 0xF4	; 244
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	7e bf       	out	0x3e, r23	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	6d bf       	out	0x3d, r22	; 61
     c22:	8a e0       	ldi	r24, 0x0A	; 10
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     c2a:	c8 01       	movw	r24, r16
     c2c:	6a e0       	ldi	r22, 0x0A	; 10
     c2e:	0e 94 ee 06 	call	0xddc	; 0xddc <LCDstring>

end
     c32:	69 96       	adiw	r28, 0x19	; 25
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	3f 90       	pop	r3
     c60:	2f 90       	pop	r2
     c62:	08 95       	ret

00000c64 <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     c64:	0e 94 4d 07 	call	0xe9a	; 0xe9a <LCDinit>
	LCDcursorOFF();
     c68:	0e 94 b5 07 	call	0xf6a	; 0xf6a <LCDcursorOFF>
	LCDclr();	//clear the display
     c6c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <LCDclr>
	LCDGotoXY(0,0);
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     c78:	8c e8       	ldi	r24, 0x8C	; 140
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 12 07 	call	0xe24	; 0xe24 <CopyStringtoLCD>
	LCD_char_count = 0;
     c84:	10 92 cd 02 	sts	0x02CD, r1
end
     c88:	08 95       	ret

00000c8a <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     c8a:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
     c8c:	8f ee       	ldi	r24, 0xEF	; 239
     c8e:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     c90:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
     c92:	80 e1       	ldi	r24, 0x10	; 16
     c94:	8b b9       	out	0x0b, r24	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
     c96:	0e 94 32 06 	call	0xc64	; 0xc64 <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     c9a:	ec e7       	ldi	r30, 0x7C	; 124
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
	ADCSRA = 0;
     ca0:	aa e7       	ldi	r26, 0x7A	; 122
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     ca6:	80 e4       	ldi	r24, 0x40	; 64
     ca8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     caa:	87 e8       	ldi	r24, 0x87	; 135
     cac:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
     cae:	08 95       	ret

00000cb0 <main>:
	end
	move_to_XY(700,700,2);
end

// --- Main Program ----------------------------------
int main(void) {
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
  
  initialize();
     cb4:	0e 94 45 06 	call	0xc8a	; 0xc8a <initialize>
  stop_all();
     cb8:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	LCD_init();
     cbc:	0e 94 32 06 	call	0xc64	; 0xc64 <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     cc0:	0e 94 1d 08 	call	0x103a	; 0x103a <uart_init>
  stdout = stdin = stderr = &uart_str;
     cc4:	8b e8       	ldi	r24, 0x8B	; 139
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	90 93 78 04 	sts	0x0478, r25
     ccc:	80 93 77 04 	sts	0x0477, r24
     cd0:	90 93 74 04 	sts	0x0474, r25
     cd4:	80 93 73 04 	sts	0x0473, r24
     cd8:	90 93 76 04 	sts	0x0476, r25
     cdc:	80 93 75 04 	sts	0x0475, r24
     ce0:	c0 e9       	ldi	r28, 0x90	; 144
     ce2:	d1 e0       	ldi	r29, 0x01	; 1

  while(1)
  begin
  	move_to_XY(700,700,2);
     ce4:	8c eb       	ldi	r24, 0xBC	; 188
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	6c eb       	ldi	r22, 0xBC	; 188
     cea:	72 e0       	ldi	r23, 0x02	; 2
     cec:	42 e0       	ldi	r20, 0x02	; 2
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	0e 94 15 02 	call	0x42a	; 0x42a <move_to_XY>
	CopyStringtoLCD(LCD_wait1, 0, 0);
     cf4:	82 ec       	ldi	r24, 0xC2	; 194
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 12 07 	call	0xe24	; 0xe24 <CopyStringtoLCD>
	CopyStringtoLCD(LCD_wait2, 0, 1);
     d00:	84 ed       	ldi	r24, 0xD4	; 212
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	0e 94 12 07 	call	0xe24	; 0xe24 <CopyStringtoLCD>
  	while(PIND & 0x10);
     d0c:	4c 99       	sbic	0x09, 4	; 9
     d0e:	fe cf       	rjmp	.-4      	; 0xd0c <main+0x5c>
     d10:	8c e2       	ldi	r24, 0x2C	; 44
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	fe 01       	movw	r30, r28
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <main+0x64>
	_delay_ms(30);
	if(!(PIND&0x10))
     d1e:	4c 99       	sbic	0x09, 4	; 9
     d20:	e1 cf       	rjmp	.-62     	; 0xce4 <main+0x34>
	begin
		CopyStringtoLCD(LCD_df1, 0, 0);
     d22:	88 ef       	ldi	r24, 0xF8	; 248
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	0e 94 12 07 	call	0xe24	; 0xe24 <CopyStringtoLCD>
		CopyStringtoLCD(LCD_df2, 0, 1);
     d2e:	8a e0       	ldi	r24, 0x0A	; 10
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 12 07 	call	0xe24	; 0xe24 <CopyStringtoLCD>
	  	get_frame();
     d3a:	0e 94 92 03 	call	0x724	; 0x724 <get_frame>
		CopyStringtoLCD(LCD_printing, 0, 0);
     d3e:	86 ee       	ldi	r24, 0xE6	; 230
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	0e 94 12 07 	call	0xe24	; 0xe24 <CopyStringtoLCD>
		move_motor();
     d4a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <move_motor>
     d4e:	ca cf       	rjmp	.-108    	; 0xce4 <main+0x34>

00000d50 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     d50:	28 2f       	mov	r18, r24
     d52:	20 7f       	andi	r18, 0xF0	; 240
     d54:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     d56:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d58:	42 9a       	sbi	0x08, 2	; 8
     d5a:	20 e4       	ldi	r18, 0x40	; 64
     d5c:	3f e1       	ldi	r19, 0x1F	; 31
     d5e:	f9 01       	movw	r30, r18
     d60:	31 97       	sbiw	r30, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     d64:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d66:	40 98       	cbi	0x08, 0	; 8
     d68:	f9 01       	movw	r30, r18
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	44 e0       	ldi	r20, 0x04	; 4
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	4a 95       	dec	r20
     d78:	e1 f7       	brne	.-8      	; 0xd72 <LCDsendChar+0x22>
     d7a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     d7c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     d7e:	42 9a       	sbi	0x08, 2	; 8
     d80:	c9 01       	movw	r24, r18
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     d86:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     d88:	40 98       	cbi	0x08, 0	; 8
     d8a:	c9 01       	movw	r24, r18
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     d90:	08 95       	ret

00000d92 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     d92:	28 2f       	mov	r18, r24
     d94:	20 7f       	andi	r18, 0xF0	; 240
     d96:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     d98:	42 9a       	sbi	0x08, 2	; 8
     d9a:	20 e4       	ldi	r18, 0x40	; 64
     d9c:	3f e1       	ldi	r19, 0x1F	; 31
     d9e:	f9 01       	movw	r30, r18
     da0:	31 97       	sbiw	r30, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     da4:	42 98       	cbi	0x08, 2	; 8
     da6:	f9 01       	movw	r30, r18
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	54 e0       	ldi	r21, 0x04	; 4
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	5a 95       	dec	r21
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <LCDsendCommand+0x1e>
     db8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     dba:	42 9a       	sbi	0x08, 2	; 8
     dbc:	c9 01       	movw	r24, r18
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     dc2:	42 98       	cbi	0x08, 2	; 8
     dc4:	c9 01       	movw	r24, r18
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     dca:	08 95       	ret

00000dcc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     dd2:	08 95       	ret

00000dd4 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     dda:	08 95       	ret

00000ddc <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	49 f0       	breq	.+18     	; 0xdfc <LCDstring+0x20>
     dea:	ec 01       	movw	r28, r24
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     df0:	89 91       	ld	r24, Y+
     df2:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     df6:	1f 5f       	subi	r17, 0xFF	; 255
     df8:	10 17       	cp	r17, r16
     dfa:	d0 f3       	brcs	.-12     	; 0xdf0 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     e06:	62 30       	cpi	r22, 0x02	; 2
     e08:	31 f0       	breq	.+12     	; 0xe16 <LCDGotoXY+0x10>
     e0a:	63 30       	cpi	r22, 0x03	; 3
     e0c:	31 f0       	breq	.+12     	; 0xe1a <LCDGotoXY+0x14>
     e0e:	61 30       	cpi	r22, 0x01	; 1
     e10:	29 f4       	brne	.+10     	; 0xe1c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     e12:	80 5c       	subi	r24, 0xC0	; 192
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     e16:	8c 5e       	subi	r24, 0xEC	; 236
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     e1a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     e1c:	80 68       	ori	r24, 0x80	; 128
     e1e:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
	
}
     e22:	08 95       	ret

00000e24 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	ec 01       	movw	r28, r24
     e2c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     e2e:	64 2f       	mov	r22, r20
     e30:	0e 94 03 07 	call	0xe06	; 0xe06 <LCDGotoXY>
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     e38:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     e3c:	1f 5f       	subi	r17, 0xFF	; 255
     e3e:	fe 01       	movw	r30, r28
     e40:	e1 0f       	add	r30, r17
     e42:	f1 1d       	adc	r31, r1
     e44:	84 91       	lpm	r24, Z+
     e46:	88 23       	and	r24, r24
     e48:	b9 f7       	brne	.-18     	; 0xe38 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	08 95       	ret

00000e52 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	7c 01       	movw	r14, r24
     e60:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     e62:	11 0f       	add	r17, r17
     e64:	11 0f       	add	r17, r17
     e66:	11 0f       	add	r17, r17
     e68:	10 64       	ori	r17, 0x40	; 64
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     e6e:	f7 01       	movw	r30, r14
     e70:	ec 0f       	add	r30, r28
     e72:	fd 1f       	adc	r31, r29
     e74:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     e76:	81 2f       	mov	r24, r17
     e78:	8c 0f       	add	r24, r28
     e7a:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
		LCDsendChar(pcc);
     e7e:	80 2f       	mov	r24, r16
     e80:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     e84:	21 96       	adiw	r28, 0x01	; 1
     e86:	c8 30       	cpi	r28, 0x08	; 8
     e88:	d1 05       	cpc	r29, r1
     e8a:	89 f7       	brne	.-30     	; 0xe6e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	08 95       	ret

00000e9a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	80 e6       	ldi	r24, 0x60	; 96
     ea2:	9a ee       	ldi	r25, 0xEA	; 234
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     ea8:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     eaa:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     eac:	87 b1       	in	r24, 0x07	; 7
     eae:	80 6f       	ori	r24, 0xF0	; 240
     eb0:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     eb2:	87 b1       	in	r24, 0x07	; 7
     eb4:	87 60       	ori	r24, 0x07	; 7
     eb6:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     eb8:	80 e3       	ldi	r24, 0x30	; 48
     eba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ebc:	42 9a       	sbi	0x08, 2	; 8
     ebe:	20 e4       	ldi	r18, 0x40	; 64
     ec0:	3f e1       	ldi	r19, 0x1F	; 31
     ec2:	f9 01       	movw	r30, r18
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     ec8:	42 98       	cbi	0x08, 2	; 8
     eca:	f9 01       	movw	r30, r18
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ed0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ed2:	42 9a       	sbi	0x08, 2	; 8
     ed4:	c9 01       	movw	r24, r18
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     eda:	42 98       	cbi	0x08, 2	; 8
     edc:	c9 01       	movw	r24, r18
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ee6:	42 9a       	sbi	0x08, 2	; 8
     ee8:	c9 01       	movw	r24, r18
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     eee:	42 98       	cbi	0x08, 2	; 8
     ef0:	c9 01       	movw	r24, r18
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     ef6:	88 e2       	ldi	r24, 0x28	; 40
     ef8:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     efc:	8c e0       	ldi	r24, 0x0C	; 12
     efe:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
     f02:	cc e1       	ldi	r28, 0x1C	; 28
     f04:	d1 e0       	ldi	r29, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     f08:	16 2f       	mov	r17, r22
     f0a:	1f 5f       	subi	r17, 0xFF	; 255
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 29 07 	call	0xe52	; 0xe52 <LCDdefinechar>
     f12:	28 96       	adiw	r28, 0x08	; 8
     f14:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     f16:	18 30       	cpi	r17, 0x08	; 8
     f18:	b9 f7       	brne	.-18     	; 0xf08 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	08 95       	ret

00000f22 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	08 2f       	mov	r16, r24
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     f2c:	8e e1       	ldi	r24, 0x1E	; 30
     f2e:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     f32:	1f 5f       	subi	r17, 0xFF	; 255
     f34:	10 17       	cp	r17, r16
     f36:	d0 f3       	brcs	.-12     	; 0xf2c <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret

00000f3e <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	08 2f       	mov	r16, r24
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     f48:	88 e1       	ldi	r24, 0x18	; 24
     f4a:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     f4e:	1f 5f       	subi	r17, 0xFF	; 255
     f50:	10 17       	cp	r17, r16
     f52:	d0 f3       	brcs	.-12     	; 0xf48 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     f5a:	8e e0       	ldi	r24, 0x0E	; 14
     f5c:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     f60:	08 95       	ret

00000f62 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     f62:	8f e0       	ldi	r24, 0x0F	; 15
     f64:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     f68:	08 95       	ret

00000f6a <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     f6a:	8c e0       	ldi	r24, 0x0C	; 12
     f6c:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     f70:	08 95       	ret

00000f72 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     f72:	88 e0       	ldi	r24, 0x08	; 8
     f74:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     f78:	08 95       	ret

00000f7a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     f7a:	8c e0       	ldi	r24, 0x0C	; 12
     f7c:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
}
     f80:	08 95       	ret

00000f82 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	08 2f       	mov	r16, r24
     f88:	10 e0       	ldi	r17, 0x00	; 0
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     f8c:	80 e1       	ldi	r24, 0x10	; 16
     f8e:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f92:	1f 5f       	subi	r17, 0xFF	; 255
     f94:	10 17       	cp	r17, r16
     f96:	d0 f3       	brcs	.-12     	; 0xf8c <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	08 2f       	mov	r16, r24
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     fa8:	84 e1       	ldi	r24, 0x14	; 20
     faa:	0e 94 c9 06 	call	0xd92	; 0xd92 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     fae:	1f 5f       	subi	r17, 0xFF	; 255
     fb0:	10 17       	cp	r17, r16
     fb2:	d0 f3       	brcs	.-12     	; 0xfa8 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     fca:	96 e0       	ldi	r25, 0x06	; 6
     fcc:	89 9f       	mul	r24, r25
     fce:	c0 01       	movw	r24, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	24 2f       	mov	r18, r20
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	ac 01       	movw	r20, r24
     fd8:	42 9f       	mul	r20, r18
     fda:	c0 01       	movw	r24, r0
     fdc:	43 9f       	mul	r20, r19
     fde:	90 0d       	add	r25, r0
     fe0:	52 9f       	mul	r21, r18
     fe2:	90 0d       	add	r25, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
     fec:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     fee:	cb 01       	movw	r24, r22
     ff0:	66 e0       	ldi	r22, 0x06	; 6
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0e 94 09 09 	call	0x1212	; 0x1212 <__udivmodhi4>
     ff8:	e8 2e       	mov	r14, r24
     ffa:	ff 24       	eor	r15, r15
     ffc:	00 e0       	ldi	r16, 0x00	; 0
     ffe:	10 e0       	ldi	r17, 0x00	; 0
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1002:	c8 01       	movw	r24, r16
    1004:	05 96       	adiw	r24, 0x05	; 5
    1006:	c8 17       	cp	r28, r24
    1008:	d9 07       	cpc	r29, r25
    100a:	10 f0       	brcs	.+4      	; 0x1010 <LCDprogressBar+0x56>
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	06 c0       	rjmp	.+12     	; 0x101c <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1010:	c0 17       	cp	r28, r16
    1012:	d1 07       	cpc	r29, r17
    1014:	10 f0       	brcs	.+4      	; 0x101a <LCDprogressBar+0x60>
    1016:	8e 2d       	mov	r24, r14
    1018:	01 c0       	rjmp	.+2      	; 0x101c <LCDprogressBar+0x62>
    101a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    101c:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1020:	f3 94       	inc	r15
    1022:	0a 5f       	subi	r16, 0xFA	; 250
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	fd 14       	cp	r15, r13
    1028:	60 f3       	brcs	.-40     	; 0x1002 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	08 95       	ret

0000103a <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    103a:	87 e6       	ldi	r24, 0x67	; 103
    103c:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1040:	88 e1       	ldi	r24, 0x18	; 24
    1042:	80 93 c1 00 	sts	0x00C1, r24
}
    1046:	08 95       	ret

00001048 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1048:	1f 93       	push	r17
    104a:	18 2f       	mov	r17, r24

  if (c == '\a')
    104c:	87 30       	cpi	r24, 0x07	; 7
    104e:	49 f4       	brne	.+18     	; 0x1062 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1050:	60 91 77 04 	lds	r22, 0x0477
    1054:	70 91 78 04 	lds	r23, 0x0478
    1058:	89 e9       	ldi	r24, 0x99	; 153
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 37 09 	call	0x126e	; 0x126e <fputs>
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1062:	8a 30       	cpi	r24, 0x0A	; 10
    1064:	19 f4       	brne	.+6      	; 0x106c <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1066:	8d e0       	ldi	r24, 0x0D	; 13
    1068:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    106c:	80 91 c0 00 	lds	r24, 0x00C0
    1070:	85 ff       	sbrs	r24, 5
    1072:	fc cf       	rjmp	.-8      	; 0x106c <uart_putchar+0x24>
  UDR0 = c;
    1074:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	1f 91       	pop	r17
    107e:	08 95       	ret

00001080 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    108e:	80 91 a2 01 	lds	r24, 0x01A2
    1092:	90 91 a3 01 	lds	r25, 0x01A3
    1096:	89 2b       	or	r24, r25
    1098:	09 f0       	breq	.+2      	; 0x109c <uart_getchar+0x1c>
    109a:	9f c0       	rjmp	.+318    	; 0x11da <uart_getchar+0x15a>
    109c:	04 ea       	ldi	r16, 0xA4	; 164
    109e:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    10a0:	80 91 c0 00 	lds	r24, 0x00C0
    10a4:	87 ff       	sbrs	r24, 7
    10a6:	fc cf       	rjmp	.-8      	; 0x10a0 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    10a8:	80 91 c0 00 	lds	r24, 0x00C0
    10ac:	84 ff       	sbrs	r24, 4
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <uart_getchar+0x36>
    10b0:	2e ef       	ldi	r18, 0xFE	; 254
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	a6 c0       	rjmp	.+332    	; 0x1202 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    10b6:	80 91 c0 00 	lds	r24, 0x00C0
    10ba:	83 fd       	sbrc	r24, 3
    10bc:	a0 c0       	rjmp	.+320    	; 0x11fe <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    10be:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    10c2:	9d 30       	cpi	r25, 0x0D	; 13
    10c4:	11 f0       	breq	.+4      	; 0x10ca <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    10c6:	9a 30       	cpi	r25, 0x0A	; 10
    10c8:	69 f4       	brne	.+26     	; 0x10e4 <uart_getchar+0x64>
	  {
	    *cp = c;
    10ca:	8a e0       	ldi	r24, 0x0A	; 10
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    10d0:	b7 01       	movw	r22, r14
    10d2:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
	    rxp = b;
    10d6:	84 ea       	ldi	r24, 0xA4	; 164
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	90 93 a3 01 	sts	0x01A3, r25
    10de:	80 93 a2 01 	sts	0x01A2, r24
    10e2:	7b c0       	rjmp	.+246    	; 0x11da <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    10e4:	99 30       	cpi	r25, 0x09	; 9
    10e6:	09 f4       	brne	.+2      	; 0x10ea <uart_getchar+0x6a>
    10e8:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    10ea:	89 2f       	mov	r24, r25
    10ec:	80 52       	subi	r24, 0x20	; 32
    10ee:	8f 35       	cpi	r24, 0x5F	; 95
    10f0:	10 f0       	brcs	.+4      	; 0x10f6 <uart_getchar+0x76>
    10f2:	90 3a       	cpi	r25, 0xA0	; 160
    10f4:	70 f0       	brcs	.+28     	; 0x1112 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    10f6:	f1 e0       	ldi	r31, 0x01	; 1
    10f8:	03 3f       	cpi	r16, 0xF3	; 243
    10fa:	1f 07       	cpc	r17, r31
    10fc:	11 f4       	brne	.+4      	; 0x1102 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    10fe:	87 e0       	ldi	r24, 0x07	; 7
    1100:	04 c0       	rjmp	.+8      	; 0x110a <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1102:	f8 01       	movw	r30, r16
    1104:	91 93       	st	Z+, r25
    1106:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1108:	89 2f       	mov	r24, r25
    110a:	b7 01       	movw	r22, r14
    110c:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
    1110:	c7 cf       	rjmp	.-114    	; 0x10a0 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    1112:	92 31       	cpi	r25, 0x12	; 18
    1114:	39 f1       	breq	.+78     	; 0x1164 <uart_getchar+0xe4>
    1116:	93 31       	cpi	r25, 0x13	; 19
    1118:	38 f4       	brcc	.+14     	; 0x1128 <uart_getchar+0xa8>
    111a:	93 30       	cpi	r25, 0x03	; 3
    111c:	09 f4       	brne	.+2      	; 0x1120 <uart_getchar+0xa0>
    111e:	6f c0       	rjmp	.+222    	; 0x11fe <uart_getchar+0x17e>
    1120:	98 30       	cpi	r25, 0x08	; 8
    1122:	09 f0       	breq	.+2      	; 0x1126 <uart_getchar+0xa6>
    1124:	bd cf       	rjmp	.-134    	; 0x10a0 <uart_getchar+0x20>
    1126:	09 c0       	rjmp	.+18     	; 0x113a <uart_getchar+0xba>
    1128:	97 31       	cpi	r25, 0x17	; 23
    112a:	09 f4       	brne	.+2      	; 0x112e <uart_getchar+0xae>
    112c:	4b c0       	rjmp	.+150    	; 0x11c4 <uart_getchar+0x144>
    112e:	9f 37       	cpi	r25, 0x7F	; 127
    1130:	21 f0       	breq	.+8      	; 0x113a <uart_getchar+0xba>
    1132:	95 31       	cpi	r25, 0x15	; 21
    1134:	09 f0       	breq	.+2      	; 0x1138 <uart_getchar+0xb8>
    1136:	b4 cf       	rjmp	.-152    	; 0x10a0 <uart_getchar+0x20>
    1138:	32 c0       	rjmp	.+100    	; 0x119e <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	04 3a       	cpi	r16, 0xA4	; 164
    113e:	1f 07       	cpc	r17, r31
    1140:	09 f0       	breq	.+2      	; 0x1144 <uart_getchar+0xc4>
    1142:	08 f4       	brcc	.+2      	; 0x1146 <uart_getchar+0xc6>
    1144:	ad cf       	rjmp	.-166    	; 0x10a0 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1146:	88 e0       	ldi	r24, 0x08	; 8
    1148:	b7 01       	movw	r22, r14
    114a:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		uart_putchar(' ', stream);
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	b7 01       	movw	r22, r14
    1152:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		uart_putchar('\b', stream);
    1156:	88 e0       	ldi	r24, 0x08	; 8
    1158:	b7 01       	movw	r22, r14
    115a:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		cp--;
    115e:	01 50       	subi	r16, 0x01	; 1
    1160:	10 40       	sbci	r17, 0x00	; 0
    1162:	9e cf       	rjmp	.-196    	; 0x10a0 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1164:	8d e0       	ldi	r24, 0x0D	; 13
    1166:	b7 01       	movw	r22, r14
    1168:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
    116c:	c4 ea       	ldi	r28, 0xA4	; 164
    116e:	d1 e0       	ldi	r29, 0x01	; 1
    1170:	04 c0       	rjmp	.+8      	; 0x117a <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1172:	89 91       	ld	r24, Y+
    1174:	b7 01       	movw	r22, r14
    1176:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    117a:	c0 17       	cp	r28, r16
    117c:	d1 07       	cpc	r29, r17
    117e:	c8 f3       	brcs	.-14     	; 0x1172 <uart_getchar+0xf2>
    1180:	8f cf       	rjmp	.-226    	; 0x10a0 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1182:	88 e0       	ldi	r24, 0x08	; 8
    1184:	b7 01       	movw	r22, r14
    1186:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		uart_putchar(' ', stream);
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	b7 01       	movw	r22, r14
    118e:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		uart_putchar('\b', stream);
    1192:	88 e0       	ldi	r24, 0x08	; 8
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		cp--;
    119a:	01 50       	subi	r16, 0x01	; 1
    119c:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	04 3a       	cpi	r16, 0xA4	; 164
    11a2:	18 07       	cpc	r17, r24
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <uart_getchar+0x128>
    11a6:	68 f7       	brcc	.-38     	; 0x1182 <uart_getchar+0x102>
    11a8:	7b cf       	rjmp	.-266    	; 0x10a0 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	b7 01       	movw	r22, r14
    11ae:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		uart_putchar(' ', stream);
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	b7 01       	movw	r22, r14
    11b6:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
		uart_putchar('\b', stream);
    11ba:	88 e0       	ldi	r24, 0x08	; 8
    11bc:	b7 01       	movw	r22, r14
    11be:	0e 94 24 08 	call	0x1048	; 0x1048 <uart_putchar>
    11c2:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    11c4:	e1 e0       	ldi	r30, 0x01	; 1
    11c6:	04 3a       	cpi	r16, 0xA4	; 164
    11c8:	1e 07       	cpc	r17, r30
    11ca:	09 f0       	breq	.+2      	; 0x11ce <uart_getchar+0x14e>
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <uart_getchar+0x150>
    11ce:	68 cf       	rjmp	.-304    	; 0x10a0 <uart_getchar+0x20>
    11d0:	e8 01       	movw	r28, r16
    11d2:	8a 91       	ld	r24, -Y
    11d4:	80 32       	cpi	r24, 0x20	; 32
    11d6:	49 f7       	brne	.-46     	; 0x11aa <uart_getchar+0x12a>
    11d8:	63 cf       	rjmp	.-314    	; 0x10a0 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    11da:	e0 91 a2 01 	lds	r30, 0x01A2
    11de:	f0 91 a3 01 	lds	r31, 0x01A3
    11e2:	81 91       	ld	r24, Z+
    11e4:	f0 93 a3 01 	sts	0x01A3, r31
    11e8:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    11ec:	8a 30       	cpi	r24, 0x0A	; 10
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <uart_getchar+0x178>
    rxp = 0;
    11f0:	10 92 a3 01 	sts	0x01A3, r1
    11f4:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <uart_getchar+0x182>
    11fe:	2f ef       	ldi	r18, 0xFF	; 255
    1200:	3f ef       	ldi	r19, 0xFF	; 255
}
    1202:	c9 01       	movw	r24, r18
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	08 95       	ret

00001212 <__udivmodhi4>:
    1212:	aa 1b       	sub	r26, r26
    1214:	bb 1b       	sub	r27, r27
    1216:	51 e1       	ldi	r21, 0x11	; 17
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <__udivmodhi4_ep>

0000121a <__udivmodhi4_loop>:
    121a:	aa 1f       	adc	r26, r26
    121c:	bb 1f       	adc	r27, r27
    121e:	a6 17       	cp	r26, r22
    1220:	b7 07       	cpc	r27, r23
    1222:	10 f0       	brcs	.+4      	; 0x1228 <__udivmodhi4_ep>
    1224:	a6 1b       	sub	r26, r22
    1226:	b7 0b       	sbc	r27, r23

00001228 <__udivmodhi4_ep>:
    1228:	88 1f       	adc	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	5a 95       	dec	r21
    122e:	a9 f7       	brne	.-22     	; 0x121a <__udivmodhi4_loop>
    1230:	80 95       	com	r24
    1232:	90 95       	com	r25
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	08 95       	ret

0000123a <__divmodhi4>:
    123a:	97 fb       	bst	r25, 7
    123c:	09 2e       	mov	r0, r25
    123e:	07 26       	eor	r0, r23
    1240:	0a d0       	rcall	.+20     	; 0x1256 <__divmodhi4_neg1>
    1242:	77 fd       	sbrc	r23, 7
    1244:	04 d0       	rcall	.+8      	; 0x124e <__divmodhi4_neg2>
    1246:	e5 df       	rcall	.-54     	; 0x1212 <__udivmodhi4>
    1248:	06 d0       	rcall	.+12     	; 0x1256 <__divmodhi4_neg1>
    124a:	00 20       	and	r0, r0
    124c:	1a f4       	brpl	.+6      	; 0x1254 <__divmodhi4_exit>

0000124e <__divmodhi4_neg2>:
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255

00001254 <__divmodhi4_exit>:
    1254:	08 95       	ret

00001256 <__divmodhi4_neg1>:
    1256:	f6 f7       	brtc	.-4      	; 0x1254 <__divmodhi4_exit>
    1258:	90 95       	com	r25
    125a:	81 95       	neg	r24
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <strcpy>:
    1260:	fb 01       	movw	r30, r22
    1262:	dc 01       	movw	r26, r24
    1264:	01 90       	ld	r0, Z+
    1266:	0d 92       	st	X+, r0
    1268:	00 20       	and	r0, r0
    126a:	e1 f7       	brne	.-8      	; 0x1264 <strcpy+0x4>
    126c:	08 95       	ret

0000126e <fputs>:
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	7c 01       	movw	r14, r24
    127c:	8b 01       	movw	r16, r22
    127e:	db 01       	movw	r26, r22
    1280:	13 96       	adiw	r26, 0x03	; 3
    1282:	8c 91       	ld	r24, X
    1284:	81 fd       	sbrc	r24, 1
    1286:	03 c0       	rjmp	.+6      	; 0x128e <fputs+0x20>
    1288:	cf ef       	ldi	r28, 0xFF	; 255
    128a:	df ef       	ldi	r29, 0xFF	; 255
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <fputs+0x46>
    128e:	c0 e0       	ldi	r28, 0x00	; 0
    1290:	d0 e0       	ldi	r29, 0x00	; 0
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <fputs+0x3c>
    1294:	d8 01       	movw	r26, r16
    1296:	18 96       	adiw	r26, 0x08	; 8
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	19 97       	sbiw	r26, 0x09	; 9
    129e:	b8 01       	movw	r22, r16
    12a0:	09 95       	icall
    12a2:	89 2b       	or	r24, r25
    12a4:	11 f0       	breq	.+4      	; 0x12aa <fputs+0x3c>
    12a6:	cf ef       	ldi	r28, 0xFF	; 255
    12a8:	df ef       	ldi	r29, 0xFF	; 255
    12aa:	f7 01       	movw	r30, r14
    12ac:	81 91       	ld	r24, Z+
    12ae:	7f 01       	movw	r14, r30
    12b0:	88 23       	and	r24, r24
    12b2:	81 f7       	brne	.-32     	; 0x1294 <fputs+0x26>
    12b4:	ce 01       	movw	r24, r28
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	08 95       	ret

000012c4 <fscanf>:
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9e 01       	movw	r18, r28
    12ce:	27 5f       	subi	r18, 0xF7	; 247
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	a9 01       	movw	r20, r18
    12dc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <vfscanf>
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <sprintf>:
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	2e 97       	sbiw	r28, 0x0e	; 14
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	0d 89       	ldd	r16, Y+21	; 0x15
    1300:	1e 89       	ldd	r17, Y+22	; 0x16
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	8c 83       	std	Y+4, r24	; 0x04
    1306:	1a 83       	std	Y+2, r17	; 0x02
    1308:	09 83       	std	Y+1, r16	; 0x01
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f e7       	ldi	r25, 0x7F	; 127
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	9e 01       	movw	r18, r28
    1314:	27 5e       	subi	r18, 0xE7	; 231
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	ce 01       	movw	r24, r28
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	6f 89       	ldd	r22, Y+23	; 0x17
    131e:	78 8d       	ldd	r23, Y+24	; 0x18
    1320:	a9 01       	movw	r20, r18
    1322:	0e 94 c7 09 	call	0x138e	; 0x138e <vfprintf>
    1326:	2f 81       	ldd	r18, Y+7	; 0x07
    1328:	38 85       	ldd	r19, Y+8	; 0x08
    132a:	02 0f       	add	r16, r18
    132c:	13 1f       	adc	r17, r19
    132e:	f8 01       	movw	r30, r16
    1330:	10 82       	st	Z, r1
    1332:	2e 96       	adiw	r28, 0x0e	; 14
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	08 95       	ret

00001348 <sscanf>:
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	2e 97       	sbiw	r28, 0x0e	; 14
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	85 e0       	ldi	r24, 0x05	; 5
    135e:	8c 83       	std	Y+4, r24	; 0x04
    1360:	8b 89       	ldd	r24, Y+19	; 0x13
    1362:	9c 89       	ldd	r25, Y+20	; 0x14
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	9e 01       	movw	r18, r28
    136a:	29 5e       	subi	r18, 0xE9	; 233
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	6d 89       	ldd	r22, Y+21	; 0x15
    1374:	7e 89       	ldd	r23, Y+22	; 0x16
    1376:	a9 01       	movw	r20, r18
    1378:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <vfscanf>
    137c:	2e 96       	adiw	r28, 0x0e	; 14
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <vfprintf>:
    138e:	2f 92       	push	r2
    1390:	3f 92       	push	r3
    1392:	4f 92       	push	r4
    1394:	5f 92       	push	r5
    1396:	6f 92       	push	r6
    1398:	7f 92       	push	r7
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	2b 97       	sbiw	r28, 0x0b	; 11
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	3c 01       	movw	r6, r24
    13c4:	2b 01       	movw	r4, r22
    13c6:	5a 01       	movw	r10, r20
    13c8:	fc 01       	movw	r30, r24
    13ca:	17 82       	std	Z+7, r1	; 0x07
    13cc:	16 82       	std	Z+6, r1	; 0x06
    13ce:	83 81       	ldd	r24, Z+3	; 0x03
    13d0:	81 fd       	sbrc	r24, 1
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <vfprintf+0x4c>
    13d4:	6f ef       	ldi	r22, 0xFF	; 255
    13d6:	7f ef       	ldi	r23, 0xFF	; 255
    13d8:	c6 c1       	rjmp	.+908    	; 0x1766 <vfprintf+0x3d8>
    13da:	9a e0       	ldi	r25, 0x0A	; 10
    13dc:	89 2e       	mov	r8, r25
    13de:	1e 01       	movw	r2, r28
    13e0:	08 94       	sec
    13e2:	21 1c       	adc	r2, r1
    13e4:	31 1c       	adc	r3, r1
    13e6:	f3 01       	movw	r30, r6
    13e8:	23 81       	ldd	r18, Z+3	; 0x03
    13ea:	f2 01       	movw	r30, r4
    13ec:	23 fd       	sbrc	r18, 3
    13ee:	85 91       	lpm	r24, Z+
    13f0:	23 ff       	sbrs	r18, 3
    13f2:	81 91       	ld	r24, Z+
    13f4:	2f 01       	movw	r4, r30
    13f6:	88 23       	and	r24, r24
    13f8:	09 f4       	brne	.+2      	; 0x13fc <vfprintf+0x6e>
    13fa:	b2 c1       	rjmp	.+868    	; 0x1760 <vfprintf+0x3d2>
    13fc:	85 32       	cpi	r24, 0x25	; 37
    13fe:	39 f4       	brne	.+14     	; 0x140e <vfprintf+0x80>
    1400:	23 fd       	sbrc	r18, 3
    1402:	85 91       	lpm	r24, Z+
    1404:	23 ff       	sbrs	r18, 3
    1406:	81 91       	ld	r24, Z+
    1408:	2f 01       	movw	r4, r30
    140a:	85 32       	cpi	r24, 0x25	; 37
    140c:	29 f4       	brne	.+10     	; 0x1418 <vfprintf+0x8a>
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	b3 01       	movw	r22, r6
    1412:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1416:	e7 cf       	rjmp	.-50     	; 0x13e6 <vfprintf+0x58>
    1418:	98 2f       	mov	r25, r24
    141a:	ff 24       	eor	r15, r15
    141c:	ee 24       	eor	r14, r14
    141e:	99 24       	eor	r9, r9
    1420:	ff e1       	ldi	r31, 0x1F	; 31
    1422:	ff 15       	cp	r31, r15
    1424:	d0 f0       	brcs	.+52     	; 0x145a <vfprintf+0xcc>
    1426:	9b 32       	cpi	r25, 0x2B	; 43
    1428:	69 f0       	breq	.+26     	; 0x1444 <vfprintf+0xb6>
    142a:	9c 32       	cpi	r25, 0x2C	; 44
    142c:	28 f4       	brcc	.+10     	; 0x1438 <vfprintf+0xaa>
    142e:	90 32       	cpi	r25, 0x20	; 32
    1430:	59 f0       	breq	.+22     	; 0x1448 <vfprintf+0xba>
    1432:	93 32       	cpi	r25, 0x23	; 35
    1434:	91 f4       	brne	.+36     	; 0x145a <vfprintf+0xcc>
    1436:	0e c0       	rjmp	.+28     	; 0x1454 <vfprintf+0xc6>
    1438:	9d 32       	cpi	r25, 0x2D	; 45
    143a:	49 f0       	breq	.+18     	; 0x144e <vfprintf+0xc0>
    143c:	90 33       	cpi	r25, 0x30	; 48
    143e:	69 f4       	brne	.+26     	; 0x145a <vfprintf+0xcc>
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	24 c0       	rjmp	.+72     	; 0x148c <vfprintf+0xfe>
    1444:	52 e0       	ldi	r21, 0x02	; 2
    1446:	f5 2a       	or	r15, r21
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	f8 2a       	or	r15, r24
    144c:	28 c0       	rjmp	.+80     	; 0x149e <vfprintf+0x110>
    144e:	98 e0       	ldi	r25, 0x08	; 8
    1450:	f9 2a       	or	r15, r25
    1452:	25 c0       	rjmp	.+74     	; 0x149e <vfprintf+0x110>
    1454:	e0 e1       	ldi	r30, 0x10	; 16
    1456:	fe 2a       	or	r15, r30
    1458:	22 c0       	rjmp	.+68     	; 0x149e <vfprintf+0x110>
    145a:	f7 fc       	sbrc	r15, 7
    145c:	29 c0       	rjmp	.+82     	; 0x14b0 <vfprintf+0x122>
    145e:	89 2f       	mov	r24, r25
    1460:	80 53       	subi	r24, 0x30	; 48
    1462:	8a 30       	cpi	r24, 0x0A	; 10
    1464:	70 f4       	brcc	.+28     	; 0x1482 <vfprintf+0xf4>
    1466:	f6 fe       	sbrs	r15, 6
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <vfprintf+0xe6>
    146a:	98 9c       	mul	r9, r8
    146c:	90 2c       	mov	r9, r0
    146e:	11 24       	eor	r1, r1
    1470:	98 0e       	add	r9, r24
    1472:	15 c0       	rjmp	.+42     	; 0x149e <vfprintf+0x110>
    1474:	e8 9c       	mul	r14, r8
    1476:	e0 2c       	mov	r14, r0
    1478:	11 24       	eor	r1, r1
    147a:	e8 0e       	add	r14, r24
    147c:	f0 e2       	ldi	r31, 0x20	; 32
    147e:	ff 2a       	or	r15, r31
    1480:	0e c0       	rjmp	.+28     	; 0x149e <vfprintf+0x110>
    1482:	9e 32       	cpi	r25, 0x2E	; 46
    1484:	29 f4       	brne	.+10     	; 0x1490 <vfprintf+0x102>
    1486:	f6 fc       	sbrc	r15, 6
    1488:	6b c1       	rjmp	.+726    	; 0x1760 <vfprintf+0x3d2>
    148a:	40 e4       	ldi	r20, 0x40	; 64
    148c:	f4 2a       	or	r15, r20
    148e:	07 c0       	rjmp	.+14     	; 0x149e <vfprintf+0x110>
    1490:	9c 36       	cpi	r25, 0x6C	; 108
    1492:	19 f4       	brne	.+6      	; 0x149a <vfprintf+0x10c>
    1494:	50 e8       	ldi	r21, 0x80	; 128
    1496:	f5 2a       	or	r15, r21
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x110>
    149a:	98 36       	cpi	r25, 0x68	; 104
    149c:	49 f4       	brne	.+18     	; 0x14b0 <vfprintf+0x122>
    149e:	f2 01       	movw	r30, r4
    14a0:	23 fd       	sbrc	r18, 3
    14a2:	95 91       	lpm	r25, Z+
    14a4:	23 ff       	sbrs	r18, 3
    14a6:	91 91       	ld	r25, Z+
    14a8:	2f 01       	movw	r4, r30
    14aa:	99 23       	and	r25, r25
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <vfprintf+0x122>
    14ae:	b8 cf       	rjmp	.-144    	; 0x1420 <vfprintf+0x92>
    14b0:	89 2f       	mov	r24, r25
    14b2:	85 54       	subi	r24, 0x45	; 69
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	18 f0       	brcs	.+6      	; 0x14be <vfprintf+0x130>
    14b8:	80 52       	subi	r24, 0x20	; 32
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	38 f4       	brcc	.+14     	; 0x14cc <vfprintf+0x13e>
    14be:	44 e0       	ldi	r20, 0x04	; 4
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	a4 0e       	add	r10, r20
    14c4:	b5 1e       	adc	r11, r21
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	59 83       	std	Y+1, r21	; 0x01
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <vfprintf+0x15c>
    14cc:	93 36       	cpi	r25, 0x63	; 99
    14ce:	31 f0       	breq	.+12     	; 0x14dc <vfprintf+0x14e>
    14d0:	93 37       	cpi	r25, 0x73	; 115
    14d2:	79 f0       	breq	.+30     	; 0x14f2 <vfprintf+0x164>
    14d4:	93 35       	cpi	r25, 0x53	; 83
    14d6:	09 f0       	breq	.+2      	; 0x14da <vfprintf+0x14c>
    14d8:	56 c0       	rjmp	.+172    	; 0x1586 <vfprintf+0x1f8>
    14da:	20 c0       	rjmp	.+64     	; 0x151c <vfprintf+0x18e>
    14dc:	f5 01       	movw	r30, r10
    14de:	80 81       	ld	r24, Z
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	42 e0       	ldi	r20, 0x02	; 2
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	a4 0e       	add	r10, r20
    14e8:	b5 1e       	adc	r11, r21
    14ea:	61 01       	movw	r12, r2
    14ec:	01 e0       	ldi	r16, 0x01	; 1
    14ee:	10 e0       	ldi	r17, 0x00	; 0
    14f0:	12 c0       	rjmp	.+36     	; 0x1516 <vfprintf+0x188>
    14f2:	f5 01       	movw	r30, r10
    14f4:	c0 80       	ld	r12, Z
    14f6:	d1 80       	ldd	r13, Z+1	; 0x01
    14f8:	f6 fc       	sbrc	r15, 6
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <vfprintf+0x174>
    14fc:	6f ef       	ldi	r22, 0xFF	; 255
    14fe:	7f ef       	ldi	r23, 0xFF	; 255
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <vfprintf+0x178>
    1502:	69 2d       	mov	r22, r9
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	42 e0       	ldi	r20, 0x02	; 2
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	a4 0e       	add	r10, r20
    150c:	b5 1e       	adc	r11, r21
    150e:	c6 01       	movw	r24, r12
    1510:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <strnlen>
    1514:	8c 01       	movw	r16, r24
    1516:	5f e7       	ldi	r21, 0x7F	; 127
    1518:	f5 22       	and	r15, r21
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <vfprintf+0x1b6>
    151c:	f5 01       	movw	r30, r10
    151e:	c0 80       	ld	r12, Z
    1520:	d1 80       	ldd	r13, Z+1	; 0x01
    1522:	f6 fc       	sbrc	r15, 6
    1524:	03 c0       	rjmp	.+6      	; 0x152c <vfprintf+0x19e>
    1526:	6f ef       	ldi	r22, 0xFF	; 255
    1528:	7f ef       	ldi	r23, 0xFF	; 255
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <vfprintf+0x1a2>
    152c:	69 2d       	mov	r22, r9
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	a4 0e       	add	r10, r20
    1536:	b5 1e       	adc	r11, r21
    1538:	c6 01       	movw	r24, r12
    153a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <strnlen_P>
    153e:	8c 01       	movw	r16, r24
    1540:	50 e8       	ldi	r21, 0x80	; 128
    1542:	f5 2a       	or	r15, r21
    1544:	f3 fe       	sbrs	r15, 3
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <vfprintf+0x1c8>
    1548:	1a c0       	rjmp	.+52     	; 0x157e <vfprintf+0x1f0>
    154a:	80 e2       	ldi	r24, 0x20	; 32
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	b3 01       	movw	r22, r6
    1550:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1554:	ea 94       	dec	r14
    1556:	8e 2d       	mov	r24, r14
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	08 17       	cp	r16, r24
    155c:	19 07       	cpc	r17, r25
    155e:	a8 f3       	brcs	.-22     	; 0x154a <vfprintf+0x1bc>
    1560:	0e c0       	rjmp	.+28     	; 0x157e <vfprintf+0x1f0>
    1562:	f6 01       	movw	r30, r12
    1564:	f7 fc       	sbrc	r15, 7
    1566:	85 91       	lpm	r24, Z+
    1568:	f7 fe       	sbrs	r15, 7
    156a:	81 91       	ld	r24, Z+
    156c:	6f 01       	movw	r12, r30
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	b3 01       	movw	r22, r6
    1572:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1576:	e1 10       	cpse	r14, r1
    1578:	ea 94       	dec	r14
    157a:	01 50       	subi	r16, 0x01	; 1
    157c:	10 40       	sbci	r17, 0x00	; 0
    157e:	01 15       	cp	r16, r1
    1580:	11 05       	cpc	r17, r1
    1582:	79 f7       	brne	.-34     	; 0x1562 <vfprintf+0x1d4>
    1584:	ea c0       	rjmp	.+468    	; 0x175a <vfprintf+0x3cc>
    1586:	94 36       	cpi	r25, 0x64	; 100
    1588:	11 f0       	breq	.+4      	; 0x158e <vfprintf+0x200>
    158a:	99 36       	cpi	r25, 0x69	; 105
    158c:	69 f5       	brne	.+90     	; 0x15e8 <vfprintf+0x25a>
    158e:	f7 fe       	sbrs	r15, 7
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <vfprintf+0x214>
    1592:	f5 01       	movw	r30, r10
    1594:	20 81       	ld	r18, Z
    1596:	31 81       	ldd	r19, Z+1	; 0x01
    1598:	42 81       	ldd	r20, Z+2	; 0x02
    159a:	53 81       	ldd	r21, Z+3	; 0x03
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0a c0       	rjmp	.+20     	; 0x15b6 <vfprintf+0x228>
    15a2:	f5 01       	movw	r30, r10
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	9c 01       	movw	r18, r24
    15aa:	44 27       	eor	r20, r20
    15ac:	37 fd       	sbrc	r19, 7
    15ae:	40 95       	com	r20
    15b0:	54 2f       	mov	r21, r20
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a8 0e       	add	r10, r24
    15b8:	b9 1e       	adc	r11, r25
    15ba:	9f e6       	ldi	r25, 0x6F	; 111
    15bc:	f9 22       	and	r15, r25
    15be:	57 ff       	sbrs	r21, 7
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <vfprintf+0x246>
    15c2:	50 95       	com	r21
    15c4:	40 95       	com	r20
    15c6:	30 95       	com	r19
    15c8:	21 95       	neg	r18
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	4f 4f       	sbci	r20, 0xFF	; 255
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	e0 e8       	ldi	r30, 0x80	; 128
    15d2:	fe 2a       	or	r15, r30
    15d4:	ca 01       	movw	r24, r20
    15d6:	b9 01       	movw	r22, r18
    15d8:	a1 01       	movw	r20, r2
    15da:	2a e0       	ldi	r18, 0x0A	; 10
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__ultoa_invert>
    15e2:	d8 2e       	mov	r13, r24
    15e4:	d2 18       	sub	r13, r2
    15e6:	40 c0       	rjmp	.+128    	; 0x1668 <vfprintf+0x2da>
    15e8:	95 37       	cpi	r25, 0x75	; 117
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <vfprintf+0x268>
    15ec:	1f 2d       	mov	r17, r15
    15ee:	1f 7e       	andi	r17, 0xEF	; 239
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	1d c0       	rjmp	.+58     	; 0x1630 <vfprintf+0x2a2>
    15f6:	1f 2d       	mov	r17, r15
    15f8:	19 7f       	andi	r17, 0xF9	; 249
    15fa:	9f 36       	cpi	r25, 0x6F	; 111
    15fc:	61 f0       	breq	.+24     	; 0x1616 <vfprintf+0x288>
    15fe:	90 37       	cpi	r25, 0x70	; 112
    1600:	20 f4       	brcc	.+8      	; 0x160a <vfprintf+0x27c>
    1602:	98 35       	cpi	r25, 0x58	; 88
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x27a>
    1606:	ac c0       	rjmp	.+344    	; 0x1760 <vfprintf+0x3d2>
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <vfprintf+0x29a>
    160a:	90 37       	cpi	r25, 0x70	; 112
    160c:	39 f0       	breq	.+14     	; 0x161c <vfprintf+0x28e>
    160e:	98 37       	cpi	r25, 0x78	; 120
    1610:	09 f0       	breq	.+2      	; 0x1614 <vfprintf+0x286>
    1612:	a6 c0       	rjmp	.+332    	; 0x1760 <vfprintf+0x3d2>
    1614:	04 c0       	rjmp	.+8      	; 0x161e <vfprintf+0x290>
    1616:	28 e0       	ldi	r18, 0x08	; 8
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	0a c0       	rjmp	.+20     	; 0x1630 <vfprintf+0x2a2>
    161c:	10 61       	ori	r17, 0x10	; 16
    161e:	14 fd       	sbrc	r17, 4
    1620:	14 60       	ori	r17, 0x04	; 4
    1622:	20 e1       	ldi	r18, 0x10	; 16
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <vfprintf+0x2a2>
    1628:	14 fd       	sbrc	r17, 4
    162a:	16 60       	ori	r17, 0x06	; 6
    162c:	20 e1       	ldi	r18, 0x10	; 16
    162e:	32 e0       	ldi	r19, 0x02	; 2
    1630:	17 ff       	sbrs	r17, 7
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <vfprintf+0x2b6>
    1634:	f5 01       	movw	r30, r10
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	44 e0       	ldi	r20, 0x04	; 4
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <vfprintf+0x2c6>
    1644:	f5 01       	movw	r30, r10
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	bc 01       	movw	r22, r24
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	42 e0       	ldi	r20, 0x02	; 2
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	a4 0e       	add	r10, r20
    1656:	b5 1e       	adc	r11, r21
    1658:	a1 01       	movw	r20, r2
    165a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__ultoa_invert>
    165e:	d8 2e       	mov	r13, r24
    1660:	d2 18       	sub	r13, r2
    1662:	8f e7       	ldi	r24, 0x7F	; 127
    1664:	f8 2e       	mov	r15, r24
    1666:	f1 22       	and	r15, r17
    1668:	f6 fe       	sbrs	r15, 6
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <vfprintf+0x2f4>
    166c:	5e ef       	ldi	r21, 0xFE	; 254
    166e:	f5 22       	and	r15, r21
    1670:	d9 14       	cp	r13, r9
    1672:	38 f4       	brcc	.+14     	; 0x1682 <vfprintf+0x2f4>
    1674:	f4 fe       	sbrs	r15, 4
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <vfprintf+0x2f8>
    1678:	f2 fc       	sbrc	r15, 2
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <vfprintf+0x2f8>
    167c:	8f ee       	ldi	r24, 0xEF	; 239
    167e:	f8 22       	and	r15, r24
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x2f8>
    1682:	1d 2d       	mov	r17, r13
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x2fa>
    1686:	19 2d       	mov	r17, r9
    1688:	f4 fe       	sbrs	r15, 4
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <vfprintf+0x318>
    168c:	fe 01       	movw	r30, r28
    168e:	ed 0d       	add	r30, r13
    1690:	f1 1d       	adc	r31, r1
    1692:	80 81       	ld	r24, Z
    1694:	80 33       	cpi	r24, 0x30	; 48
    1696:	19 f4       	brne	.+6      	; 0x169e <vfprintf+0x310>
    1698:	99 ee       	ldi	r25, 0xE9	; 233
    169a:	f9 22       	and	r15, r25
    169c:	08 c0       	rjmp	.+16     	; 0x16ae <vfprintf+0x320>
    169e:	1f 5f       	subi	r17, 0xFF	; 255
    16a0:	f2 fe       	sbrs	r15, 2
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <vfprintf+0x320>
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <vfprintf+0x31e>
    16a6:	8f 2d       	mov	r24, r15
    16a8:	86 78       	andi	r24, 0x86	; 134
    16aa:	09 f0       	breq	.+2      	; 0x16ae <vfprintf+0x320>
    16ac:	1f 5f       	subi	r17, 0xFF	; 255
    16ae:	0f 2d       	mov	r16, r15
    16b0:	f3 fc       	sbrc	r15, 3
    16b2:	14 c0       	rjmp	.+40     	; 0x16dc <vfprintf+0x34e>
    16b4:	f0 fe       	sbrs	r15, 0
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <vfprintf+0x348>
    16b8:	1e 15       	cp	r17, r14
    16ba:	10 f0       	brcs	.+4      	; 0x16c0 <vfprintf+0x332>
    16bc:	9d 2c       	mov	r9, r13
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <vfprintf+0x348>
    16c0:	9d 2c       	mov	r9, r13
    16c2:	9e 0c       	add	r9, r14
    16c4:	91 1a       	sub	r9, r17
    16c6:	1e 2d       	mov	r17, r14
    16c8:	06 c0       	rjmp	.+12     	; 0x16d6 <vfprintf+0x348>
    16ca:	80 e2       	ldi	r24, 0x20	; 32
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	b3 01       	movw	r22, r6
    16d0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    16d4:	1f 5f       	subi	r17, 0xFF	; 255
    16d6:	1e 15       	cp	r17, r14
    16d8:	c0 f3       	brcs	.-16     	; 0x16ca <vfprintf+0x33c>
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <vfprintf+0x356>
    16dc:	1e 15       	cp	r17, r14
    16de:	10 f4       	brcc	.+4      	; 0x16e4 <vfprintf+0x356>
    16e0:	e1 1a       	sub	r14, r17
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <vfprintf+0x358>
    16e4:	ee 24       	eor	r14, r14
    16e6:	04 ff       	sbrs	r16, 4
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <vfprintf+0x37a>
    16ea:	80 e3       	ldi	r24, 0x30	; 48
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	b3 01       	movw	r22, r6
    16f0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    16f4:	02 ff       	sbrs	r16, 2
    16f6:	1d c0       	rjmp	.+58     	; 0x1732 <vfprintf+0x3a4>
    16f8:	01 fd       	sbrc	r16, 1
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <vfprintf+0x374>
    16fc:	88 e7       	ldi	r24, 0x78	; 120
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e c0       	rjmp	.+28     	; 0x171e <vfprintf+0x390>
    1702:	88 e5       	ldi	r24, 0x58	; 88
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0b c0       	rjmp	.+22     	; 0x171e <vfprintf+0x390>
    1708:	80 2f       	mov	r24, r16
    170a:	86 78       	andi	r24, 0x86	; 134
    170c:	91 f0       	breq	.+36     	; 0x1732 <vfprintf+0x3a4>
    170e:	01 ff       	sbrs	r16, 1
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <vfprintf+0x388>
    1712:	8b e2       	ldi	r24, 0x2B	; 43
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <vfprintf+0x38a>
    1716:	80 e2       	ldi	r24, 0x20	; 32
    1718:	f7 fc       	sbrc	r15, 7
    171a:	8d e2       	ldi	r24, 0x2D	; 45
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	b3 01       	movw	r22, r6
    1720:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0x3a4>
    1726:	80 e3       	ldi	r24, 0x30	; 48
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	b3 01       	movw	r22, r6
    172c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1730:	9a 94       	dec	r9
    1732:	d9 14       	cp	r13, r9
    1734:	c0 f3       	brcs	.-16     	; 0x1726 <vfprintf+0x398>
    1736:	da 94       	dec	r13
    1738:	f1 01       	movw	r30, r2
    173a:	ed 0d       	add	r30, r13
    173c:	f1 1d       	adc	r31, r1
    173e:	80 81       	ld	r24, Z
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	b3 01       	movw	r22, r6
    1744:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1748:	dd 20       	and	r13, r13
    174a:	a9 f7       	brne	.-22     	; 0x1736 <vfprintf+0x3a8>
    174c:	06 c0       	rjmp	.+12     	; 0x175a <vfprintf+0x3cc>
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	b3 01       	movw	r22, r6
    1754:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <fputc>
    1758:	ea 94       	dec	r14
    175a:	ee 20       	and	r14, r14
    175c:	c1 f7       	brne	.-16     	; 0x174e <vfprintf+0x3c0>
    175e:	43 ce       	rjmp	.-890    	; 0x13e6 <vfprintf+0x58>
    1760:	f3 01       	movw	r30, r6
    1762:	66 81       	ldd	r22, Z+6	; 0x06
    1764:	77 81       	ldd	r23, Z+7	; 0x07
    1766:	cb 01       	movw	r24, r22
    1768:	2b 96       	adiw	r28, 0x0b	; 11
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	bf 90       	pop	r11
    1786:	af 90       	pop	r10
    1788:	9f 90       	pop	r9
    178a:	8f 90       	pop	r8
    178c:	7f 90       	pop	r7
    178e:	6f 90       	pop	r6
    1790:	5f 90       	pop	r5
    1792:	4f 90       	pop	r4
    1794:	3f 90       	pop	r3
    1796:	2f 90       	pop	r2
    1798:	08 95       	ret

0000179a <putval>:
    179a:	fc 01       	movw	r30, r24
    179c:	20 fd       	sbrc	r18, 0
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <putval+0x16>
    17a0:	23 fd       	sbrc	r18, 3
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <putval+0x14>
    17a4:	22 ff       	sbrs	r18, 2
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <putval+0x12>
    17a8:	73 83       	std	Z+3, r23	; 0x03
    17aa:	62 83       	std	Z+2, r22	; 0x02
    17ac:	51 83       	std	Z+1, r21	; 0x01
    17ae:	40 83       	st	Z, r20
    17b0:	08 95       	ret

000017b2 <mulacc>:
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	44 ff       	sbrs	r20, 4
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <mulacc+0x10>
    17be:	33 e0       	ldi	r19, 0x03	; 3
    17c0:	11 c0       	rjmp	.+34     	; 0x17e4 <mulacc+0x32>
    17c2:	46 ff       	sbrs	r20, 6
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <mulacc+0x18>
    17c6:	34 e0       	ldi	r19, 0x04	; 4
    17c8:	0d c0       	rjmp	.+26     	; 0x17e4 <mulacc+0x32>
    17ca:	db 01       	movw	r26, r22
    17cc:	fc 01       	movw	r30, r24
    17ce:	aa 0f       	add	r26, r26
    17d0:	bb 1f       	adc	r27, r27
    17d2:	ee 1f       	adc	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	10 94       	com	r1
    17d8:	d1 f7       	brne	.-12     	; 0x17ce <mulacc+0x1c>
    17da:	6a 0f       	add	r22, r26
    17dc:	7b 1f       	adc	r23, r27
    17de:	8e 1f       	adc	r24, r30
    17e0:	9f 1f       	adc	r25, r31
    17e2:	31 e0       	ldi	r19, 0x01	; 1
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	31 50       	subi	r19, 0x01	; 1
    17ee:	d1 f7       	brne	.-12     	; 0x17e4 <mulacc+0x32>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	e2 0e       	add	r14, r18
    17f6:	f1 1c       	adc	r15, r1
    17f8:	01 1d       	adc	r16, r1
    17fa:	11 1d       	adc	r17, r1
    17fc:	a8 01       	movw	r20, r16
    17fe:	97 01       	movw	r18, r14
    1800:	b7 01       	movw	r22, r14
    1802:	ca 01       	movw	r24, r20
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	08 95       	ret

0000180e <skip_spaces>:
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	8c 01       	movw	r16, r24
    1818:	c8 01       	movw	r24, r16
    181a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    181e:	ec 01       	movw	r28, r24
    1820:	97 fd       	sbrc	r25, 7
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <skip_spaces+0x26>
    1824:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <isspace>
    1828:	89 2b       	or	r24, r25
    182a:	b1 f7       	brne	.-20     	; 0x1818 <skip_spaces+0xa>
    182c:	ce 01       	movw	r24, r28
    182e:	b8 01       	movw	r22, r16
    1830:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <ungetc>
    1834:	ce 01       	movw	r24, r28
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <conv_int>:
    1840:	af 92       	push	r10
    1842:	bf 92       	push	r11
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	c6 2e       	mov	r12, r22
    1858:	5a 01       	movw	r10, r20
    185a:	12 2f       	mov	r17, r18
    185c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1860:	ac 01       	movw	r20, r24
    1862:	8b 32       	cpi	r24, 0x2B	; 43
    1864:	19 f0       	breq	.+6      	; 0x186c <conv_int+0x2c>
    1866:	8d 32       	cpi	r24, 0x2D	; 45
    1868:	51 f4       	brne	.+20     	; 0x187e <conv_int+0x3e>
    186a:	10 68       	ori	r17, 0x80	; 128
    186c:	ca 94       	dec	r12
    186e:	09 f4       	brne	.+2      	; 0x1872 <conv_int+0x32>
    1870:	6d c0       	rjmp	.+218    	; 0x194c <conv_int+0x10c>
    1872:	ce 01       	movw	r24, r28
    1874:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1878:	ac 01       	movw	r20, r24
    187a:	97 fd       	sbrc	r25, 7
    187c:	67 c0       	rjmp	.+206    	; 0x194c <conv_int+0x10c>
    187e:	6d ef       	ldi	r22, 0xFD	; 253
    1880:	d6 2e       	mov	r13, r22
    1882:	d1 22       	and	r13, r17
    1884:	8d 2d       	mov	r24, r13
    1886:	80 73       	andi	r24, 0x30	; 48
    1888:	01 f5       	brne	.+64     	; 0x18ca <conv_int+0x8a>
    188a:	40 33       	cpi	r20, 0x30	; 48
    188c:	f1 f4       	brne	.+60     	; 0x18ca <conv_int+0x8a>
    188e:	ca 94       	dec	r12
    1890:	09 f4       	brne	.+2      	; 0x1894 <conv_int+0x54>
    1892:	47 c0       	rjmp	.+142    	; 0x1922 <conv_int+0xe2>
    1894:	ce 01       	movw	r24, r28
    1896:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    189a:	ac 01       	movw	r20, r24
    189c:	97 fd       	sbrc	r25, 7
    189e:	41 c0       	rjmp	.+130    	; 0x1922 <conv_int+0xe2>
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	d8 2a       	or	r13, r24
    18a4:	48 37       	cpi	r20, 0x78	; 120
    18a6:	11 f0       	breq	.+4      	; 0x18ac <conv_int+0x6c>
    18a8:	48 35       	cpi	r20, 0x58	; 88
    18aa:	59 f4       	brne	.+22     	; 0x18c2 <conv_int+0x82>
    18ac:	80 e4       	ldi	r24, 0x40	; 64
    18ae:	d8 2a       	or	r13, r24
    18b0:	ca 94       	dec	r12
    18b2:	b9 f1       	breq	.+110    	; 0x1922 <conv_int+0xe2>
    18b4:	ce 01       	movw	r24, r28
    18b6:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    18ba:	ac 01       	movw	r20, r24
    18bc:	99 23       	and	r25, r25
    18be:	2c f4       	brge	.+10     	; 0x18ca <conv_int+0x8a>
    18c0:	30 c0       	rjmp	.+96     	; 0x1922 <conv_int+0xe2>
    18c2:	d6 fc       	sbrc	r13, 6
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <conv_int+0x8a>
    18c6:	80 e1       	ldi	r24, 0x10	; 16
    18c8:	d8 2a       	or	r13, r24
    18ca:	ee 24       	eor	r14, r14
    18cc:	ff 24       	eor	r15, r15
    18ce:	87 01       	movw	r16, r14
    18d0:	24 2f       	mov	r18, r20
    18d2:	20 53       	subi	r18, 0x30	; 48
    18d4:	28 30       	cpi	r18, 0x08	; 8
    18d6:	88 f0       	brcs	.+34     	; 0x18fa <conv_int+0xba>
    18d8:	d4 fc       	sbrc	r13, 4
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <conv_int+0xae>
    18dc:	2a 30       	cpi	r18, 0x0A	; 10
    18de:	68 f0       	brcs	.+26     	; 0x18fa <conv_int+0xba>
    18e0:	d6 fe       	sbrs	r13, 6
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <conv_int+0xae>
    18e4:	2f 7d       	andi	r18, 0xDF	; 223
    18e6:	82 2f       	mov	r24, r18
    18e8:	81 51       	subi	r24, 0x11	; 17
    18ea:	86 30       	cpi	r24, 0x06	; 6
    18ec:	28 f0       	brcs	.+10     	; 0x18f8 <conv_int+0xb8>
    18ee:	ca 01       	movw	r24, r20
    18f0:	be 01       	movw	r22, r28
    18f2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <ungetc>
    18f6:	12 c0       	rjmp	.+36     	; 0x191c <conv_int+0xdc>
    18f8:	27 50       	subi	r18, 0x07	; 7
    18fa:	c8 01       	movw	r24, r16
    18fc:	b7 01       	movw	r22, r14
    18fe:	4d 2d       	mov	r20, r13
    1900:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <mulacc>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	d8 2a       	or	r13, r24
    190c:	ca 94       	dec	r12
    190e:	61 f0       	breq	.+24     	; 0x1928 <conv_int+0xe8>
    1910:	ce 01       	movw	r24, r28
    1912:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1916:	ac 01       	movw	r20, r24
    1918:	97 ff       	sbrs	r25, 7
    191a:	da cf       	rjmp	.-76     	; 0x18d0 <conv_int+0x90>
    191c:	d1 fc       	sbrc	r13, 1
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <conv_int+0xe8>
    1920:	15 c0       	rjmp	.+42     	; 0x194c <conv_int+0x10c>
    1922:	ee 24       	eor	r14, r14
    1924:	ff 24       	eor	r15, r15
    1926:	87 01       	movw	r16, r14
    1928:	d7 fe       	sbrs	r13, 7
    192a:	08 c0       	rjmp	.+16     	; 0x193c <conv_int+0xfc>
    192c:	10 95       	com	r17
    192e:	00 95       	com	r16
    1930:	f0 94       	com	r15
    1932:	e0 94       	com	r14
    1934:	e1 1c       	adc	r14, r1
    1936:	f1 1c       	adc	r15, r1
    1938:	01 1d       	adc	r16, r1
    193a:	11 1d       	adc	r17, r1
    193c:	c5 01       	movw	r24, r10
    193e:	b8 01       	movw	r22, r16
    1940:	a7 01       	movw	r20, r14
    1942:	2d 2d       	mov	r18, r13
    1944:	0e 94 cd 0b 	call	0x179a	; 0x179a <putval>
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	01 c0       	rjmp	.+2      	; 0x194e <conv_int+0x10e>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	08 95       	ret

00001964 <conv_brk>:
    1964:	6f 92       	push	r6
    1966:	7f 92       	push	r7
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	a0 97       	sbiw	r28, 0x20	; 32
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	6c 01       	movw	r12, r24
    1992:	a6 2e       	mov	r10, r22
    1994:	8a 01       	movw	r16, r20
    1996:	79 01       	movw	r14, r18
    1998:	fe 01       	movw	r30, r28
    199a:	31 96       	adiw	r30, 0x01	; 1
    199c:	80 e2       	ldi	r24, 0x20	; 32
    199e:	df 01       	movw	r26, r30
    19a0:	1d 92       	st	X+, r1
    19a2:	8a 95       	dec	r24
    19a4:	e9 f7       	brne	.-6      	; 0x19a0 <conv_brk+0x3c>
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	4f 01       	movw	r8, r30
    19b2:	a1 e0       	ldi	r26, 0x01	; 1
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	f6 01       	movw	r30, r12
    19b8:	83 81       	ldd	r24, Z+3	; 0x03
    19ba:	f7 01       	movw	r30, r14
    19bc:	83 fd       	sbrc	r24, 3
    19be:	25 91       	lpm	r18, Z+
    19c0:	83 ff       	sbrs	r24, 3
    19c2:	21 91       	ld	r18, Z+
    19c4:	7f 01       	movw	r14, r30
    19c6:	22 23       	and	r18, r18
    19c8:	09 f4       	brne	.+2      	; 0x19cc <conv_brk+0x68>
    19ca:	7e c0       	rjmp	.+252    	; 0x1ac8 <conv_brk+0x164>
    19cc:	2e 35       	cpi	r18, 0x5E	; 94
    19ce:	19 f4       	brne	.+6      	; 0x19d6 <conv_brk+0x72>
    19d0:	41 15       	cp	r20, r1
    19d2:	51 05       	cpc	r21, r1
    19d4:	69 f1       	breq	.+90     	; 0x1a30 <conv_brk+0xcc>
    19d6:	87 2f       	mov	r24, r23
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	84 17       	cp	r24, r20
    19dc:	95 07       	cpc	r25, r21
    19de:	44 f4       	brge	.+16     	; 0x19f0 <conv_brk+0x8c>
    19e0:	2d 35       	cpi	r18, 0x5D	; 93
    19e2:	51 f1       	breq	.+84     	; 0x1a38 <conv_brk+0xd4>
    19e4:	2d 32       	cpi	r18, 0x2D	; 45
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <conv_brk+0x8c>
    19e8:	33 23       	and	r19, r19
    19ea:	29 f4       	brne	.+10     	; 0x19f6 <conv_brk+0x92>
    19ec:	31 e0       	ldi	r19, 0x01	; 1
    19ee:	21 c0       	rjmp	.+66     	; 0x1a32 <conv_brk+0xce>
    19f0:	33 23       	and	r19, r19
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <conv_brk+0x92>
    19f4:	62 2f       	mov	r22, r18
    19f6:	32 2f       	mov	r19, r18
    19f8:	83 2f       	mov	r24, r19
    19fa:	86 95       	lsr	r24
    19fc:	86 95       	lsr	r24
    19fe:	86 95       	lsr	r24
    1a00:	f4 01       	movw	r30, r8
    1a02:	e8 0f       	add	r30, r24
    1a04:	f1 1d       	adc	r31, r1
    1a06:	83 2f       	mov	r24, r19
    1a08:	87 70       	andi	r24, 0x07	; 7
    1a0a:	3d 01       	movw	r6, r26
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <conv_brk+0xae>
    1a0e:	66 0c       	add	r6, r6
    1a10:	77 1c       	adc	r7, r7
    1a12:	8a 95       	dec	r24
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <conv_brk+0xaa>
    1a16:	20 81       	ld	r18, Z
    1a18:	26 29       	or	r18, r6
    1a1a:	20 83       	st	Z, r18
    1a1c:	36 17       	cp	r19, r22
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <conv_brk+0xc0>
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <conv_brk+0xce>
    1a24:	36 17       	cp	r19, r22
    1a26:	10 f4       	brcc	.+4      	; 0x1a2c <conv_brk+0xc8>
    1a28:	3f 5f       	subi	r19, 0xFF	; 255
    1a2a:	e6 cf       	rjmp	.-52     	; 0x19f8 <conv_brk+0x94>
    1a2c:	31 50       	subi	r19, 0x01	; 1
    1a2e:	e4 cf       	rjmp	.-56     	; 0x19f8 <conv_brk+0x94>
    1a30:	71 e0       	ldi	r23, 0x01	; 1
    1a32:	4f 5f       	subi	r20, 0xFF	; 255
    1a34:	5f 4f       	sbci	r21, 0xFF	; 255
    1a36:	bf cf       	rjmp	.-130    	; 0x19b6 <conv_brk+0x52>
    1a38:	33 23       	and	r19, r19
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <conv_brk+0xde>
    1a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	8e 83       	std	Y+6, r24	; 0x06
    1a42:	77 23       	and	r23, r23
    1a44:	59 f0       	breq	.+22     	; 0x1a5c <conv_brk+0xf8>
    1a46:	fe 01       	movw	r30, r28
    1a48:	31 96       	adiw	r30, 0x01	; 1
    1a4a:	9e 01       	movw	r18, r28
    1a4c:	2f 5d       	subi	r18, 0xDF	; 223
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	80 81       	ld	r24, Z
    1a52:	80 95       	com	r24
    1a54:	81 93       	st	Z+, r24
    1a56:	e2 17       	cp	r30, r18
    1a58:	f3 07       	cpc	r31, r19
    1a5a:	d1 f7       	brne	.-12     	; 0x1a50 <conv_brk+0xec>
    1a5c:	bb 24       	eor	r11, r11
    1a5e:	b3 94       	inc	r11
    1a60:	4e 01       	movw	r8, r28
    1a62:	08 94       	sec
    1a64:	81 1c       	adc	r8, r1
    1a66:	91 1c       	adc	r9, r1
    1a68:	c6 01       	movw	r24, r12
    1a6a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1a6e:	ac 01       	movw	r20, r24
    1a70:	97 fd       	sbrc	r25, 7
    1a72:	22 c0       	rjmp	.+68     	; 0x1ab8 <conv_brk+0x154>
    1a74:	86 95       	lsr	r24
    1a76:	86 95       	lsr	r24
    1a78:	86 95       	lsr	r24
    1a7a:	f4 01       	movw	r30, r8
    1a7c:	e8 0f       	add	r30, r24
    1a7e:	f1 1d       	adc	r31, r1
    1a80:	80 81       	ld	r24, Z
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9a 01       	movw	r18, r20
    1a86:	27 70       	andi	r18, 0x07	; 7
    1a88:	30 70       	andi	r19, 0x00	; 0
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <conv_brk+0x12c>
    1a8c:	95 95       	asr	r25
    1a8e:	87 95       	ror	r24
    1a90:	2a 95       	dec	r18
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <conv_brk+0x128>
    1a94:	80 fd       	sbrc	r24, 0
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <conv_brk+0x13e>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	b6 01       	movw	r22, r12
    1a9c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <ungetc>
    1aa0:	0b c0       	rjmp	.+22     	; 0x1ab8 <conv_brk+0x154>
    1aa2:	01 15       	cp	r16, r1
    1aa4:	11 05       	cpc	r17, r1
    1aa6:	19 f0       	breq	.+6      	; 0x1aae <conv_brk+0x14a>
    1aa8:	d8 01       	movw	r26, r16
    1aaa:	4d 93       	st	X+, r20
    1aac:	8d 01       	movw	r16, r26
    1aae:	aa 94       	dec	r10
    1ab0:	bb 24       	eor	r11, r11
    1ab2:	aa 20       	and	r10, r10
    1ab4:	c9 f6       	brne	.-78     	; 0x1a68 <conv_brk+0x104>
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <conv_brk+0x158>
    1ab8:	bb 20       	and	r11, r11
    1aba:	31 f4       	brne	.+12     	; 0x1ac8 <conv_brk+0x164>
    1abc:	01 15       	cp	r16, r1
    1abe:	11 05       	cpc	r17, r1
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <conv_brk+0x168>
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	10 82       	st	Z, r1
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <conv_brk+0x168>
    1ac8:	ee 24       	eor	r14, r14
    1aca:	ff 24       	eor	r15, r15
    1acc:	c7 01       	movw	r24, r14
    1ace:	a0 96       	adiw	r28, 0x20	; 32
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	df 90       	pop	r13
    1ae8:	cf 90       	pop	r12
    1aea:	bf 90       	pop	r11
    1aec:	af 90       	pop	r10
    1aee:	9f 90       	pop	r9
    1af0:	8f 90       	pop	r8
    1af2:	7f 90       	pop	r7
    1af4:	6f 90       	pop	r6
    1af6:	08 95       	ret

00001af8 <vfscanf>:
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	5c 01       	movw	r10, r24
    1b16:	6b 01       	movw	r12, r22
    1b18:	3a 01       	movw	r6, r20
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	17 82       	std	Z+7, r1	; 0x07
    1b1e:	16 82       	std	Z+6, r1	; 0x06
    1b20:	88 24       	eor	r8, r8
    1b22:	ea c0       	rjmp	.+468    	; 0x1cf8 <vfscanf+0x200>
    1b24:	81 2f       	mov	r24, r17
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <isspace>
    1b2c:	89 2b       	or	r24, r25
    1b2e:	21 f0       	breq	.+8      	; 0x1b38 <vfscanf+0x40>
    1b30:	c5 01       	movw	r24, r10
    1b32:	0e 94 07 0c 	call	0x180e	; 0x180e <skip_spaces>
    1b36:	e0 c0       	rjmp	.+448    	; 0x1cf8 <vfscanf+0x200>
    1b38:	15 32       	cpi	r17, 0x25	; 37
    1b3a:	49 f4       	brne	.+18     	; 0x1b4e <vfscanf+0x56>
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	f3 fc       	sbrc	r15, 3
    1b40:	65 91       	lpm	r22, Z+
    1b42:	f3 fe       	sbrs	r15, 3
    1b44:	61 91       	ld	r22, Z+
    1b46:	6f 01       	movw	r12, r30
    1b48:	65 32       	cpi	r22, 0x25	; 37
    1b4a:	69 f4       	brne	.+26     	; 0x1b66 <vfscanf+0x6e>
    1b4c:	15 e2       	ldi	r17, 0x25	; 37
    1b4e:	c5 01       	movw	r24, r10
    1b50:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1b54:	97 fd       	sbrc	r25, 7
    1b56:	dc c0       	rjmp	.+440    	; 0x1d10 <vfscanf+0x218>
    1b58:	18 17       	cp	r17, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <vfscanf+0x66>
    1b5c:	cd c0       	rjmp	.+410    	; 0x1cf8 <vfscanf+0x200>
    1b5e:	b5 01       	movw	r22, r10
    1b60:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <ungetc>
    1b64:	da c0       	rjmp	.+436    	; 0x1d1a <vfscanf+0x222>
    1b66:	6a 32       	cpi	r22, 0x2A	; 42
    1b68:	19 f0       	breq	.+6      	; 0x1b70 <vfscanf+0x78>
    1b6a:	16 2f       	mov	r17, r22
    1b6c:	00 e0       	ldi	r16, 0x00	; 0
    1b6e:	06 c0       	rjmp	.+12     	; 0x1b7c <vfscanf+0x84>
    1b70:	f3 fc       	sbrc	r15, 3
    1b72:	15 91       	lpm	r17, Z+
    1b74:	f3 fe       	sbrs	r15, 3
    1b76:	11 91       	ld	r17, Z+
    1b78:	6f 01       	movw	r12, r30
    1b7a:	01 e0       	ldi	r16, 0x01	; 1
    1b7c:	99 24       	eor	r9, r9
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <vfscanf+0xa6>
    1b80:	02 60       	ori	r16, 0x02	; 2
    1b82:	69 2d       	mov	r22, r9
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <mulacc>
    1b90:	96 2e       	mov	r9, r22
    1b92:	f6 01       	movw	r30, r12
    1b94:	f3 fc       	sbrc	r15, 3
    1b96:	15 91       	lpm	r17, Z+
    1b98:	f3 fe       	sbrs	r15, 3
    1b9a:	11 91       	ld	r17, Z+
    1b9c:	6f 01       	movw	r12, r30
    1b9e:	21 2f       	mov	r18, r17
    1ba0:	20 53       	subi	r18, 0x30	; 48
    1ba2:	2a 30       	cpi	r18, 0x0A	; 10
    1ba4:	68 f3       	brcs	.-38     	; 0x1b80 <vfscanf+0x88>
    1ba6:	01 fd       	sbrc	r16, 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <vfscanf+0xb8>
    1baa:	99 24       	eor	r9, r9
    1bac:	9a 94       	dec	r9
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <vfscanf+0xbe>
    1bb0:	99 20       	and	r9, r9
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <vfscanf+0xbe>
    1bb4:	b2 c0       	rjmp	.+356    	; 0x1d1a <vfscanf+0x222>
    1bb6:	18 36       	cpi	r17, 0x68	; 104
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <vfscanf+0xca>
    1bba:	1c 36       	cpi	r17, 0x6C	; 108
    1bbc:	99 f4       	brne	.+38     	; 0x1be4 <vfscanf+0xec>
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	0b c0       	rjmp	.+22     	; 0x1bd8 <vfscanf+0xe0>
    1bc2:	f6 01       	movw	r30, r12
    1bc4:	f3 fc       	sbrc	r15, 3
    1bc6:	65 91       	lpm	r22, Z+
    1bc8:	f3 fe       	sbrs	r15, 3
    1bca:	61 91       	ld	r22, Z+
    1bcc:	68 36       	cpi	r22, 0x68	; 104
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <vfscanf+0xde>
    1bd0:	6f 01       	movw	r12, r30
    1bd2:	16 2f       	mov	r17, r22
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <vfscanf+0xec>
    1bd6:	08 60       	ori	r16, 0x08	; 8
    1bd8:	04 60       	ori	r16, 0x04	; 4
    1bda:	f3 fc       	sbrc	r15, 3
    1bdc:	15 91       	lpm	r17, Z+
    1bde:	f3 fe       	sbrs	r15, 3
    1be0:	11 91       	ld	r17, Z+
    1be2:	6f 01       	movw	r12, r30
    1be4:	11 23       	and	r17, r17
    1be6:	09 f4       	brne	.+2      	; 0x1bea <vfscanf+0xf2>
    1be8:	98 c0       	rjmp	.+304    	; 0x1d1a <vfscanf+0x222>
    1bea:	8c e5       	ldi	r24, 0x5C	; 92
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	61 2f       	mov	r22, r17
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <strchr_P>
    1bf6:	89 2b       	or	r24, r25
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <vfscanf+0x104>
    1bfa:	8f c0       	rjmp	.+286    	; 0x1d1a <vfscanf+0x222>
    1bfc:	80 2f       	mov	r24, r16
    1bfe:	00 ff       	sbrs	r16, 0
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <vfscanf+0x110>
    1c02:	ee 24       	eor	r14, r14
    1c04:	ff 24       	eor	r15, r15
    1c06:	07 c0       	rjmp	.+14     	; 0x1c16 <vfscanf+0x11e>
    1c08:	f3 01       	movw	r30, r6
    1c0a:	e0 80       	ld	r14, Z
    1c0c:	f1 80       	ldd	r15, Z+1	; 0x01
    1c0e:	22 e0       	ldi	r18, 0x02	; 2
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	62 0e       	add	r6, r18
    1c14:	73 1e       	adc	r7, r19
    1c16:	1e 36       	cpi	r17, 0x6E	; 110
    1c18:	51 f4       	brne	.+20     	; 0x1c2e <vfscanf+0x136>
    1c1a:	f5 01       	movw	r30, r10
    1c1c:	46 81       	ldd	r20, Z+6	; 0x06
    1c1e:	57 81       	ldd	r21, Z+7	; 0x07
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	c7 01       	movw	r24, r14
    1c26:	20 2f       	mov	r18, r16
    1c28:	0e 94 cd 0b 	call	0x179a	; 0x179a <putval>
    1c2c:	65 c0       	rjmp	.+202    	; 0x1cf8 <vfscanf+0x200>
    1c2e:	13 36       	cpi	r17, 0x63	; 99
    1c30:	91 f4       	brne	.+36     	; 0x1c56 <vfscanf+0x15e>
    1c32:	81 fd       	sbrc	r24, 1
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <vfscanf+0x142>
    1c36:	99 24       	eor	r9, r9
    1c38:	93 94       	inc	r9
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1c40:	97 fd       	sbrc	r25, 7
    1c42:	66 c0       	rjmp	.+204    	; 0x1d10 <vfscanf+0x218>
    1c44:	e1 14       	cp	r14, r1
    1c46:	f1 04       	cpc	r15, r1
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <vfscanf+0x158>
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	81 93       	st	Z+, r24
    1c4e:	7f 01       	movw	r14, r30
    1c50:	9a 94       	dec	r9
    1c52:	99 f7       	brne	.-26     	; 0x1c3a <vfscanf+0x142>
    1c54:	4f c0       	rjmp	.+158    	; 0x1cf4 <vfscanf+0x1fc>
    1c56:	1b 35       	cpi	r17, 0x5B	; 91
    1c58:	59 f4       	brne	.+22     	; 0x1c70 <vfscanf+0x178>
    1c5a:	c5 01       	movw	r24, r10
    1c5c:	69 2d       	mov	r22, r9
    1c5e:	a7 01       	movw	r20, r14
    1c60:	96 01       	movw	r18, r12
    1c62:	0e 94 b2 0c 	call	0x1964	; 0x1964 <conv_brk>
    1c66:	6c 01       	movw	r12, r24
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <vfscanf+0x176>
    1c6c:	43 c0       	rjmp	.+134    	; 0x1cf4 <vfscanf+0x1fc>
    1c6e:	3d c0       	rjmp	.+122    	; 0x1cea <vfscanf+0x1f2>
    1c70:	c5 01       	movw	r24, r10
    1c72:	0e 94 07 0c 	call	0x180e	; 0x180e <skip_spaces>
    1c76:	97 fd       	sbrc	r25, 7
    1c78:	4b c0       	rjmp	.+150    	; 0x1d10 <vfscanf+0x218>
    1c7a:	1f 36       	cpi	r17, 0x6F	; 111
    1c7c:	59 f1       	breq	.+86     	; 0x1cd4 <vfscanf+0x1dc>
    1c7e:	10 37       	cpi	r17, 0x70	; 112
    1c80:	28 f4       	brcc	.+10     	; 0x1c8c <vfscanf+0x194>
    1c82:	14 36       	cpi	r17, 0x64	; 100
    1c84:	29 f1       	breq	.+74     	; 0x1cd0 <vfscanf+0x1d8>
    1c86:	19 36       	cpi	r17, 0x69	; 105
    1c88:	39 f5       	brne	.+78     	; 0x1cd8 <vfscanf+0x1e0>
    1c8a:	27 c0       	rjmp	.+78     	; 0x1cda <vfscanf+0x1e2>
    1c8c:	13 37       	cpi	r17, 0x73	; 115
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <vfscanf+0x19e>
    1c90:	15 37       	cpi	r17, 0x75	; 117
    1c92:	11 f5       	brne	.+68     	; 0x1cd8 <vfscanf+0x1e0>
    1c94:	1d c0       	rjmp	.+58     	; 0x1cd0 <vfscanf+0x1d8>
    1c96:	c5 01       	movw	r24, r10
    1c98:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <fgetc>
    1c9c:	ec 01       	movw	r28, r24
    1c9e:	97 fd       	sbrc	r25, 7
    1ca0:	11 c0       	rjmp	.+34     	; 0x1cc4 <vfscanf+0x1cc>
    1ca2:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <isspace>
    1ca6:	89 2b       	or	r24, r25
    1ca8:	29 f0       	breq	.+10     	; 0x1cb4 <vfscanf+0x1bc>
    1caa:	ce 01       	movw	r24, r28
    1cac:	b5 01       	movw	r22, r10
    1cae:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <ungetc>
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <vfscanf+0x1cc>
    1cb4:	e1 14       	cp	r14, r1
    1cb6:	f1 04       	cpc	r15, r1
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <vfscanf+0x1c8>
    1cba:	f7 01       	movw	r30, r14
    1cbc:	c1 93       	st	Z+, r28
    1cbe:	7f 01       	movw	r14, r30
    1cc0:	9a 94       	dec	r9
    1cc2:	49 f7       	brne	.-46     	; 0x1c96 <vfscanf+0x19e>
    1cc4:	e1 14       	cp	r14, r1
    1cc6:	f1 04       	cpc	r15, r1
    1cc8:	a9 f0       	breq	.+42     	; 0x1cf4 <vfscanf+0x1fc>
    1cca:	f7 01       	movw	r30, r14
    1ccc:	10 82       	st	Z, r1
    1cce:	12 c0       	rjmp	.+36     	; 0x1cf4 <vfscanf+0x1fc>
    1cd0:	00 62       	ori	r16, 0x20	; 32
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <vfscanf+0x1e2>
    1cd4:	00 61       	ori	r16, 0x10	; 16
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <vfscanf+0x1e2>
    1cd8:	00 64       	ori	r16, 0x40	; 64
    1cda:	c5 01       	movw	r24, r10
    1cdc:	69 2d       	mov	r22, r9
    1cde:	a7 01       	movw	r20, r14
    1ce0:	20 2f       	mov	r18, r16
    1ce2:	0e 94 20 0c 	call	0x1840	; 0x1840 <conv_int>
    1ce6:	88 23       	and	r24, r24
    1ce8:	29 f4       	brne	.+10     	; 0x1cf4 <vfscanf+0x1fc>
    1cea:	f5 01       	movw	r30, r10
    1cec:	83 81       	ldd	r24, Z+3	; 0x03
    1cee:	80 73       	andi	r24, 0x30	; 48
    1cf0:	79 f4       	brne	.+30     	; 0x1d10 <vfscanf+0x218>
    1cf2:	13 c0       	rjmp	.+38     	; 0x1d1a <vfscanf+0x222>
    1cf4:	00 ff       	sbrs	r16, 0
    1cf6:	83 94       	inc	r8
    1cf8:	f5 01       	movw	r30, r10
    1cfa:	f3 80       	ldd	r15, Z+3	; 0x03
    1cfc:	f6 01       	movw	r30, r12
    1cfe:	f3 fc       	sbrc	r15, 3
    1d00:	15 91       	lpm	r17, Z+
    1d02:	f3 fe       	sbrs	r15, 3
    1d04:	11 91       	ld	r17, Z+
    1d06:	6f 01       	movw	r12, r30
    1d08:	11 23       	and	r17, r17
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <vfscanf+0x216>
    1d0c:	0b cf       	rjmp	.-490    	; 0x1b24 <vfscanf+0x2c>
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <vfscanf+0x222>
    1d10:	88 20       	and	r8, r8
    1d12:	19 f4       	brne	.+6      	; 0x1d1a <vfscanf+0x222>
    1d14:	2f ef       	ldi	r18, 0xFF	; 255
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vfscanf+0x226>
    1d1a:	28 2d       	mov	r18, r8
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	c9 01       	movw	r24, r18
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	bf 90       	pop	r11
    1d32:	af 90       	pop	r10
    1d34:	9f 90       	pop	r9
    1d36:	8f 90       	pop	r8
    1d38:	7f 90       	pop	r7
    1d3a:	6f 90       	pop	r6
    1d3c:	08 95       	ret

00001d3e <isspace>:
    1d3e:	91 11       	cpse	r25, r1
    1d40:	0d c1       	rjmp	.+538    	; 0x1f5c <__ctype_isfalse>
    1d42:	80 32       	cpi	r24, 0x20	; 32
    1d44:	19 f0       	breq	.+6      	; 0x1d4c <isspace+0xe>
    1d46:	89 50       	subi	r24, 0x09	; 9
    1d48:	85 50       	subi	r24, 0x05	; 5
    1d4a:	d0 f7       	brcc	.-12     	; 0x1d40 <isspace+0x2>
    1d4c:	08 95       	ret

00001d4e <strchr_P>:
    1d4e:	fc 01       	movw	r30, r24
    1d50:	05 90       	lpm	r0, Z+
    1d52:	06 16       	cp	r0, r22
    1d54:	21 f0       	breq	.+8      	; 0x1d5e <strchr_P+0x10>
    1d56:	00 20       	and	r0, r0
    1d58:	d9 f7       	brne	.-10     	; 0x1d50 <strchr_P+0x2>
    1d5a:	c0 01       	movw	r24, r0
    1d5c:	08 95       	ret
    1d5e:	31 97       	sbiw	r30, 0x01	; 1
    1d60:	cf 01       	movw	r24, r30
    1d62:	08 95       	ret

00001d64 <strnlen_P>:
    1d64:	fc 01       	movw	r30, r24
    1d66:	05 90       	lpm	r0, Z+
    1d68:	61 50       	subi	r22, 0x01	; 1
    1d6a:	70 40       	sbci	r23, 0x00	; 0
    1d6c:	01 10       	cpse	r0, r1
    1d6e:	d8 f7       	brcc	.-10     	; 0x1d66 <strnlen_P+0x2>
    1d70:	80 95       	com	r24
    1d72:	90 95       	com	r25
    1d74:	8e 0f       	add	r24, r30
    1d76:	9f 1f       	adc	r25, r31
    1d78:	08 95       	ret

00001d7a <strnlen>:
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	61 50       	subi	r22, 0x01	; 1
    1d7e:	70 40       	sbci	r23, 0x00	; 0
    1d80:	01 90       	ld	r0, Z+
    1d82:	01 10       	cpse	r0, r1
    1d84:	d8 f7       	brcc	.-10     	; 0x1d7c <strnlen+0x2>
    1d86:	80 95       	com	r24
    1d88:	90 95       	com	r25
    1d8a:	8e 0f       	add	r24, r30
    1d8c:	9f 1f       	adc	r25, r31
    1d8e:	08 95       	ret

00001d90 <fgetc>:
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
    1d96:	4b 81       	ldd	r20, Y+3	; 0x03
    1d98:	40 ff       	sbrs	r20, 0
    1d9a:	1a c0       	rjmp	.+52     	; 0x1dd0 <fgetc+0x40>
    1d9c:	46 ff       	sbrs	r20, 6
    1d9e:	0a c0       	rjmp	.+20     	; 0x1db4 <fgetc+0x24>
    1da0:	4f 7b       	andi	r20, 0xBF	; 191
    1da2:	4b 83       	std	Y+3, r20	; 0x03
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	9f 81       	ldd	r25, Y+7	; 0x07
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	9f 83       	std	Y+7, r25	; 0x07
    1dac:	8e 83       	std	Y+6, r24	; 0x06
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	2b c0       	rjmp	.+86     	; 0x1e0a <fgetc+0x7a>
    1db4:	42 ff       	sbrs	r20, 2
    1db6:	13 c0       	rjmp	.+38     	; 0x1dde <fgetc+0x4e>
    1db8:	e8 81       	ld	r30, Y
    1dba:	f9 81       	ldd	r31, Y+1	; 0x01
    1dbc:	80 81       	ld	r24, Z
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	33 27       	eor	r19, r19
    1dc2:	27 fd       	sbrc	r18, 7
    1dc4:	30 95       	com	r19
    1dc6:	21 15       	cp	r18, r1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <fgetc+0x46>
    1dcc:	40 62       	ori	r20, 0x20	; 32
    1dce:	4b 83       	std	Y+3, r20	; 0x03
    1dd0:	2f ef       	ldi	r18, 0xFF	; 255
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	1b c0       	rjmp	.+54     	; 0x1e0c <fgetc+0x7c>
    1dd6:	31 96       	adiw	r30, 0x01	; 1
    1dd8:	f9 83       	std	Y+1, r31	; 0x01
    1dda:	e8 83       	st	Y, r30
    1ddc:	11 c0       	rjmp	.+34     	; 0x1e00 <fgetc+0x70>
    1dde:	ea 85       	ldd	r30, Y+10	; 0x0a
    1de0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1de2:	ce 01       	movw	r24, r28
    1de4:	09 95       	icall
    1de6:	9c 01       	movw	r18, r24
    1de8:	97 ff       	sbrs	r25, 7
    1dea:	0a c0       	rjmp	.+20     	; 0x1e00 <fgetc+0x70>
    1dec:	9b 81       	ldd	r25, Y+3	; 0x03
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	11 f0       	breq	.+4      	; 0x1df8 <fgetc+0x68>
    1df4:	80 e2       	ldi	r24, 0x20	; 32
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <fgetc+0x6a>
    1df8:	80 e1       	ldi	r24, 0x10	; 16
    1dfa:	89 2b       	or	r24, r25
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
    1dfe:	e8 cf       	rjmp	.-48     	; 0x1dd0 <fgetc+0x40>
    1e00:	8e 81       	ldd	r24, Y+6	; 0x06
    1e02:	9f 81       	ldd	r25, Y+7	; 0x07
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	9f 83       	std	Y+7, r25	; 0x07
    1e08:	8e 83       	std	Y+6, r24	; 0x06
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	08 95       	ret

00001e14 <fputc>:
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	8c 01       	movw	r16, r24
    1e1e:	eb 01       	movw	r28, r22
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	81 ff       	sbrs	r24, 1
    1e24:	1b c0       	rjmp	.+54     	; 0x1e5c <fputc+0x48>
    1e26:	82 ff       	sbrs	r24, 2
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <fputc+0x30>
    1e2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	28 17       	cp	r18, r24
    1e34:	39 07       	cpc	r19, r25
    1e36:	64 f4       	brge	.+24     	; 0x1e50 <fputc+0x3c>
    1e38:	e8 81       	ld	r30, Y
    1e3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e3c:	01 93       	st	Z+, r16
    1e3e:	f9 83       	std	Y+1, r31	; 0x01
    1e40:	e8 83       	st	Y, r30
    1e42:	06 c0       	rjmp	.+12     	; 0x1e50 <fputc+0x3c>
    1e44:	e8 85       	ldd	r30, Y+8	; 0x08
    1e46:	f9 85       	ldd	r31, Y+9	; 0x09
    1e48:	80 2f       	mov	r24, r16
    1e4a:	09 95       	icall
    1e4c:	89 2b       	or	r24, r25
    1e4e:	31 f4       	brne	.+12     	; 0x1e5c <fputc+0x48>
    1e50:	8e 81       	ldd	r24, Y+6	; 0x06
    1e52:	9f 81       	ldd	r25, Y+7	; 0x07
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	9f 83       	std	Y+7, r25	; 0x07
    1e58:	8e 83       	std	Y+6, r24	; 0x06
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <fputc+0x4c>
    1e5c:	0f ef       	ldi	r16, 0xFF	; 255
    1e5e:	1f ef       	ldi	r17, 0xFF	; 255
    1e60:	c8 01       	movw	r24, r16
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <ungetc>:
    1e6c:	9c 01       	movw	r18, r24
    1e6e:	fb 01       	movw	r30, r22
    1e70:	83 81       	ldd	r24, Z+3	; 0x03
    1e72:	80 ff       	sbrs	r24, 0
    1e74:	11 c0       	rjmp	.+34     	; 0x1e98 <ungetc+0x2c>
    1e76:	86 fd       	sbrc	r24, 6
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <ungetc+0x2c>
    1e7a:	9f ef       	ldi	r25, 0xFF	; 255
    1e7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1e7e:	39 07       	cpc	r19, r25
    1e80:	59 f0       	breq	.+22     	; 0x1e98 <ungetc+0x2c>
    1e82:	22 83       	std	Z+2, r18	; 0x02
    1e84:	80 64       	ori	r24, 0x40	; 64
    1e86:	8f 7d       	andi	r24, 0xDF	; 223
    1e88:	83 83       	std	Z+3, r24	; 0x03
    1e8a:	86 81       	ldd	r24, Z+6	; 0x06
    1e8c:	97 81       	ldd	r25, Z+7	; 0x07
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	97 83       	std	Z+7, r25	; 0x07
    1e92:	86 83       	std	Z+6, r24	; 0x06
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <ungetc+0x30>
    1e98:	2f ef       	ldi	r18, 0xFF	; 255
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	08 95       	ret

00001ea0 <__ultoa_invert>:
    1ea0:	fa 01       	movw	r30, r20
    1ea2:	aa 27       	eor	r26, r26
    1ea4:	28 30       	cpi	r18, 0x08	; 8
    1ea6:	51 f1       	breq	.+84     	; 0x1efc <__ultoa_invert+0x5c>
    1ea8:	20 31       	cpi	r18, 0x10	; 16
    1eaa:	81 f1       	breq	.+96     	; 0x1f0c <__ultoa_invert+0x6c>
    1eac:	e8 94       	clt
    1eae:	6f 93       	push	r22
    1eb0:	6e 7f       	andi	r22, 0xFE	; 254
    1eb2:	6e 5f       	subi	r22, 0xFE	; 254
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eba:	af 4f       	sbci	r26, 0xFF	; 255
    1ebc:	b1 e0       	ldi	r27, 0x01	; 1
    1ebe:	3e d0       	rcall	.+124    	; 0x1f3c <__ultoa_invert+0x9c>
    1ec0:	b4 e0       	ldi	r27, 0x04	; 4
    1ec2:	3c d0       	rcall	.+120    	; 0x1f3c <__ultoa_invert+0x9c>
    1ec4:	67 0f       	add	r22, r23
    1ec6:	78 1f       	adc	r23, r24
    1ec8:	89 1f       	adc	r24, r25
    1eca:	9a 1f       	adc	r25, r26
    1ecc:	a1 1d       	adc	r26, r1
    1ece:	68 0f       	add	r22, r24
    1ed0:	79 1f       	adc	r23, r25
    1ed2:	8a 1f       	adc	r24, r26
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	a1 1d       	adc	r26, r1
    1ed8:	6a 0f       	add	r22, r26
    1eda:	71 1d       	adc	r23, r1
    1edc:	81 1d       	adc	r24, r1
    1ede:	91 1d       	adc	r25, r1
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	20 d0       	rcall	.+64     	; 0x1f24 <__ultoa_invert+0x84>
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <__ultoa_invert+0x48>
    1ee6:	68 94       	set
    1ee8:	3f 91       	pop	r19
    1eea:	2a e0       	ldi	r18, 0x0A	; 10
    1eec:	26 9f       	mul	r18, r22
    1eee:	11 24       	eor	r1, r1
    1ef0:	30 19       	sub	r19, r0
    1ef2:	30 5d       	subi	r19, 0xD0	; 208
    1ef4:	31 93       	st	Z+, r19
    1ef6:	de f6       	brtc	.-74     	; 0x1eae <__ultoa_invert+0xe>
    1ef8:	cf 01       	movw	r24, r30
    1efa:	08 95       	ret
    1efc:	46 2f       	mov	r20, r22
    1efe:	47 70       	andi	r20, 0x07	; 7
    1f00:	40 5d       	subi	r20, 0xD0	; 208
    1f02:	41 93       	st	Z+, r20
    1f04:	b3 e0       	ldi	r27, 0x03	; 3
    1f06:	0f d0       	rcall	.+30     	; 0x1f26 <__ultoa_invert+0x86>
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <__ultoa_invert+0x5c>
    1f0a:	f6 cf       	rjmp	.-20     	; 0x1ef8 <__ultoa_invert+0x58>
    1f0c:	46 2f       	mov	r20, r22
    1f0e:	4f 70       	andi	r20, 0x0F	; 15
    1f10:	40 5d       	subi	r20, 0xD0	; 208
    1f12:	4a 33       	cpi	r20, 0x3A	; 58
    1f14:	18 f0       	brcs	.+6      	; 0x1f1c <__ultoa_invert+0x7c>
    1f16:	49 5d       	subi	r20, 0xD9	; 217
    1f18:	31 fd       	sbrc	r19, 1
    1f1a:	40 52       	subi	r20, 0x20	; 32
    1f1c:	41 93       	st	Z+, r20
    1f1e:	02 d0       	rcall	.+4      	; 0x1f24 <__ultoa_invert+0x84>
    1f20:	a9 f7       	brne	.-22     	; 0x1f0c <__ultoa_invert+0x6c>
    1f22:	ea cf       	rjmp	.-44     	; 0x1ef8 <__ultoa_invert+0x58>
    1f24:	b4 e0       	ldi	r27, 0x04	; 4
    1f26:	a6 95       	lsr	r26
    1f28:	97 95       	ror	r25
    1f2a:	87 95       	ror	r24
    1f2c:	77 95       	ror	r23
    1f2e:	67 95       	ror	r22
    1f30:	ba 95       	dec	r27
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0x86>
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	61 05       	cpc	r22, r1
    1f38:	71 05       	cpc	r23, r1
    1f3a:	08 95       	ret
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	0a 2e       	mov	r0, r26
    1f42:	06 94       	lsr	r0
    1f44:	57 95       	ror	r21
    1f46:	47 95       	ror	r20
    1f48:	37 95       	ror	r19
    1f4a:	27 95       	ror	r18
    1f4c:	ba 95       	dec	r27
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__ultoa_invert+0xa2>
    1f50:	62 0f       	add	r22, r18
    1f52:	73 1f       	adc	r23, r19
    1f54:	84 1f       	adc	r24, r20
    1f56:	95 1f       	adc	r25, r21
    1f58:	a0 1d       	adc	r26, r0
    1f5a:	08 95       	ret

00001f5c <__ctype_isfalse>:
    1f5c:	99 27       	eor	r25, r25
    1f5e:	88 27       	eor	r24, r24

00001f60 <__ctype_istrue>:
    1f60:	08 95       	ret

00001f62 <_exit>:
    1f62:	f8 94       	cli

00001f64 <__stop_program>:
    1f64:	ff cf       	rjmp	.-2      	; 0x1f64 <__stop_program>
