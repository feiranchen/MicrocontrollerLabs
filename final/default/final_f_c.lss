
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00002962  000029f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  00002a98  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003da  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002547  00000000  00000000  00002ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  00005419  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cbd  00000000  00000000  00005a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  000076f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  000079d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001052  00000000  00000000  00007e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f48  00000000  00000000  00008e7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LCD_wait1>:
      c2:	77 61 69 74 69 6e 67 20 66 6f 72 20 75 73 65 72     waiting for user
	...

000000d4 <LCD_wait2>:
      d4:	74 6f 20 70 72 65 73 73 20 62 75 74 74 6f 6e 20     to press button 
	...

000000e6 <LCD_printing>:
      e6:	70 72 69 6e 74 69 6e 67 20 20 20 20 20 20 20 20     printing        
	...

000000f8 <LCD_df1>:
      f8:	64 6f 77 6e 6c 6f 61 64 69 6e 67 20 20 20 20 20     downloading     
	...

0000010a <LCD_df2>:
     10a:	66 72 61 6d 65 20 20 20 20 20 20 20 20 20 20 20     frame           
	...

0000011c <LcdCustomChar>:
     11c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     12c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     13c:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     14c:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000015c <__c.1988>:
     15c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d0 e4       	ldi	r29, 0x40	; 64
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e2 e6       	ldi	r30, 0x62	; 98
     17c:	f9 e2       	ldi	r31, 0x29	; 41
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 3a       	cpi	r26, 0xA2	; 162
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	14 e0       	ldi	r17, 0x04	; 4
     190:	a2 ea       	ldi	r26, 0xA2	; 162
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a9 37       	cpi	r26, 0x79	; 121
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <main>
     1a2:	0c 94 af 14 	jmp	0x295e	; 0x295e <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	ADCSRA = 0;
     1b0:	aa e7       	ldi	r26, 0x7A	; 122
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     1ba:	87 e8       	ldi	r24, 0x87	; 135
     1bc:	8c 93       	st	X, r24
end
     1be:	08 95       	ret

000001c0 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     1c0:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
     1c2:	8f ee       	ldi	r24, 0xEF	; 239
     1c4:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     1c6:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	8b b9       	out	0x0b, r24	; 11
	
end
     1cc:	08 95       	ret

000001ce <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     1ce:	ec e7       	ldi	r30, 0x7C	; 124
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     1d4:	80 54       	subi	r24, 0x40	; 64
     1d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1d8:	ea e7       	ldi	r30, 0x7A	; 122
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
end
     1e2:	08 95       	ret

000001e4 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     1e4:	5d 98       	cbi	0x0b, 5	; 11
     1e6:	88 e8       	ldi	r24, 0x88	; 136
     1e8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <raise_pen+0xa>
	_delay_ms(500);
end
     1f8:	08 95       	ret

000001fa <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
     1fc:	80 ea       	ldi	r24, 0xA0	; 160
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	20 e9       	ldi	r18, 0x90	; 144
     202:	31 e0       	ldi	r19, 0x01	; 1
     204:	f9 01       	movw	r30, r18
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <lower_pen+0xa>
	_delay_ms(400);
end
     20e:	08 95       	ret

00000210 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     210:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     218:	5a 9a       	sbi	0x0b, 2	; 11
end
     21a:	08 95       	ret

0000021c <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     21c:	5a 98       	cbi	0x0b, 2	; 11
     21e:	8a e1       	ldi	r24, 0x1A	; 26
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     224:	5b 9a       	sbi	0x0b, 3	; 11
end
     226:	08 95       	ret

00000228 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     228:	5e 98       	cbi	0x0b, 6	; 11
     22a:	8a e1       	ldi	r24, 0x1A	; 26
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     230:	5f 9a       	sbi	0x0b, 7	; 11
end
     232:	08 95       	ret

00000234 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     234:	5f 98       	cbi	0x0b, 7	; 11
     236:	8a e1       	ldi	r24, 0x1A	; 26
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     23c:	5e 9a       	sbi	0x0b, 6	; 11
end
     23e:	08 95       	ret

00000240 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x33;
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	83 73       	andi	r24, 0x33	; 51
     244:	8b b9       	out	0x0b, r24	; 11
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	20 e9       	ldi	r18, 0x90	; 144
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <stop_all+0xe>
	_delay_ms(100);
end
     258:	08 95       	ret

0000025a <stop_x>:

void stop_x(void)
begin
	PORTD &= 0xf3;
     25a:	8b b1       	in	r24, 0x0b	; 11
     25c:	83 7f       	andi	r24, 0xF3	; 243
     25e:	8b b9       	out	0x0b, r24	; 11
end
     260:	08 95       	ret

00000262 <stop_y>:

void stop_y(void)
begin
	PORTD &= 0x3f;
     262:	8b b1       	in	r24, 0x0b	; 11
     264:	8f 73       	andi	r24, 0x3F	; 63
     266:	8b b9       	out	0x0b, r24	; 11
end
     268:	08 95       	ret

0000026a <circle>:
// draw a circle
void circle(void)
begin
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     270:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     272:	8a e1       	ldi	r24, 0x1A	; 26
     274:	f8 2e       	mov	r15, r24
     276:	8f 2d       	mov	r24, r15
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     27c:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27e:	00 e8       	ldi	r16, 0x80	; 128
     280:	1e e3       	ldi	r17, 0x3E	; 62
     282:	c8 01       	movw	r24, r16
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     288:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     28c:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     28e:	8f 2d       	mov	r24, r15
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x80;
     294:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	c8 01       	movw	r24, r16
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     29c:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29e:	8f 2d       	mov	r24, r15
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     2a4:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2a6:	c8 01       	movw	r24, r16
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     2ac:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     2b0:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	8f 2d       	mov	r24, r15
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x40;
     2b8:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	80 ee       	ldi	r24, 0xE0	; 224
     2bc:	9e e2       	ldi	r25, 0x2E	; 46
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     2c2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2c6:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c8:	8f 2d       	mov	r24, r15
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     2ce:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d0:	00 e8       	ldi	r16, 0x80	; 128
     2d2:	15 e2       	ldi	r17, 0x25	; 37
     2d4:	c8 01       	movw	r24, r16
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     2da:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     2de:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e0:	8f 2d       	mov	r24, r15
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x80;
     2e6:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e8:	c8 01       	movw	r24, r16
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2ee:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f0:	8f 2d       	mov	r24, r15
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     2f6:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	c8 01       	movw	r24, r16
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2fe:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     302:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     304:	8f 2d       	mov	r24, r15
     306:	8a 95       	dec	r24
     308:	f1 f7       	brne	.-4      	; 0x306 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x40;
     30a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30c:	80 e7       	ldi	r24, 0x70	; 112
     30e:	97 e1       	ldi	r25, 0x17	; 23
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     314:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     318:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     31a:	8f 2d       	mov	r24, r15
     31c:	8a 95       	dec	r24
     31e:	f1 f7       	brne	.-4      	; 0x31c <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     320:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     322:	00 ea       	ldi	r16, 0xA0	; 160
     324:	1f e0       	ldi	r17, 0x0F	; 15
     326:	c8 01       	movw	r24, r16
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     32c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     330:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     332:	8f 2d       	mov	r24, r15
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x80;
     338:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     340:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     342:	8f 2d       	mov	r24, r15
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     348:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34a:	c8 01       	movw	r24, r16
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     350:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     354:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     356:	fa 94       	dec	r15
     358:	f1 f7       	brne	.-4      	; 0x356 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x40;
     35a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35c:	80 ef       	ldi	r24, 0xF0	; 240
     35e:	9a e0       	ldi	r25, 0x0A	; 10
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     364:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
end
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	08 95       	ret

00000370 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     374:	20 91 ce 02 	lds	r18, 0x02CE
     378:	30 91 cf 02 	lds	r19, 0x02CF
     37c:	00 d0       	rcall	.+0      	; 0x37e <print_position+0xe>
     37e:	00 d0       	rcall	.+0      	; 0x380 <print_position+0x10>
     380:	00 d0       	rcall	.+0      	; 0x382 <print_position+0x12>
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	0c eb       	ldi	r16, 0xBC	; 188
     38a:	12 e0       	ldi	r17, 0x02	; 2
     38c:	ad b7       	in	r26, 0x3d	; 61
     38e:	be b7       	in	r27, 0x3e	; 62
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	1c 93       	st	X, r17
     394:	0e 93       	st	-X, r16
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	93 83       	std	Z+3, r25	; 0x03
     39e:	82 83       	std	Z+2, r24	; 0x02
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	24 83       	std	Z+4, r18	; 0x04
     3a4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
	LCDGotoXY(0,1);
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	06 96       	adiw	r24, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <print_position+0x52>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	c8 01       	movw	r24, r16
     3d0:	6e 2f       	mov	r22, r30
     3d2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     3d6:	20 91 98 03 	lds	r18, 0x0398
     3da:	30 91 99 03 	lds	r19, 0x0399
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <print_position+0x70>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <print_position+0x72>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <print_position+0x74>
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	ad b7       	in	r26, 0x3d	; 61
     3ec:	be b7       	in	r27, 0x3e	; 62
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	1c 93       	st	X, r17
     3f2:	0e 93       	st	-X, r16
     3f4:	11 97       	sbiw	r26, 0x01	; 1
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	93 83       	std	Z+3, r25	; 0x03
     3fc:	82 83       	std	Z+2, r24	; 0x02
     3fe:	35 83       	std	Z+5, r19	; 0x05
     400:	24 83       	std	Z+4, r18	; 0x04
     402:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
	LCDGotoXY(8,1);
     406:	8d b7       	in	r24, 0x3d	; 61
     408:	9e b7       	in	r25, 0x3e	; 62
     40a:	06 96       	adiw	r24, 0x06	; 6
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	9e bf       	out	0x3e, r25	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	8d bf       	out	0x3d, r24	; 61
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     41e:	f8 01       	movw	r30, r16
     420:	01 90       	ld	r0, Z+
     422:	00 20       	and	r0, r0
     424:	e9 f7       	brne	.-6      	; 0x420 <print_position+0xb0>
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	e0 1b       	sub	r30, r16
     42a:	f1 0b       	sbc	r31, r17
     42c:	c8 01       	movw	r24, r16
     42e:	6e 2f       	mov	r22, r30
     430:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
end
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <move_back_XY>:
end

// 1= pen down, 2= pen up
// 0= both, 1= x only, 2= y only
move_back_XY(int x_in, int y_in, int d, char motion)
begin
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	8b 01       	movw	r16, r22
     448:	f2 2e       	mov	r15, r18
	if (d==2) raise_pen();
     44a:	42 30       	cpi	r20, 0x02	; 2
     44c:	51 05       	cpc	r21, r1
     44e:	19 f4       	brne	.+6      	; 0x456 <move_back_XY+0x1c>
     450:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     454:	05 c0       	rjmp	.+10     	; 0x460 <move_back_XY+0x26>
	if (d==1) lower_pen();
     456:	41 30       	cpi	r20, 0x01	; 1
     458:	51 05       	cpc	r21, r1
     45a:	11 f4       	brne	.+4      	; 0x460 <move_back_XY+0x26>
     45c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     460:	1c 16       	cp	r1, r28
     462:	1d 06       	cpc	r1, r29
     464:	0c f0       	brlt	.+2      	; 0x468 <move_back_XY+0x2e>
     466:	aa c2       	rjmp	.+1364   	; 0x9bc <move_back_XY+0x582>
     468:	10 16       	cp	r1, r16
     46a:	11 06       	cpc	r1, r17
     46c:	0c f0       	brlt	.+2      	; 0x470 <move_back_XY+0x36>
     46e:	a6 c2       	rjmp	.+1356   	; 0x9bc <move_back_XY+0x582>
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	cd 3b       	cpi	r28, 0xBD	; 189
     474:	d8 07       	cpc	r29, r24
     476:	14 f0       	brlt	.+4      	; 0x47c <move_back_XY+0x42>
     478:	cc eb       	ldi	r28, 0xBC	; 188
     47a:	d2 e0       	ldi	r29, 0x02	; 2
     47c:	b8 01       	movw	r22, r16
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0d 3b       	cpi	r16, 0xBD	; 189
     482:	18 07       	cpc	r17, r24
     484:	14 f0       	brlt	.+4      	; 0x48a <move_back_XY+0x50>
     486:	6c eb       	ldi	r22, 0xBC	; 188
     488:	72 e0       	ldi	r23, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     48a:	cf 30       	cpi	r28, 0x0F	; 15
     48c:	d1 05       	cpc	r29, r1
     48e:	14 f4       	brge	.+4      	; 0x494 <move_back_XY+0x5a>
     490:	cf e0       	ldi	r28, 0x0F	; 15
     492:	d0 e0       	ldi	r29, 0x00	; 0
		if(y_in<15) y_in = 15;
     494:	6f 30       	cpi	r22, 0x0F	; 15
     496:	71 05       	cpc	r23, r1
     498:	14 f4       	brge	.+4      	; 0x49e <move_back_XY+0x64>
     49a:	6f e0       	ldi	r22, 0x0F	; 15
     49c:	70 e0       	ldi	r23, 0x00	; 0
		if(motion == 0)
     49e:	ff 20       	and	r15, r15
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <move_back_XY+0x6a>
     4a2:	42 c1       	rjmp	.+644    	; 0x728 <move_back_XY+0x2ee>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4a4:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     4ae:	80 91 7a 00 	lds	r24, 0x007A
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	80 93 7a 00 	sts	0x007A, r24
		if(y_in<15) y_in = 15;
		if(motion == 0)
		begin
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     4b8:	80 91 7a 00 	lds	r24, 0x007A
     4bc:	86 fd       	sbrc	r24, 6
     4be:	fc cf       	rjmp	.-8      	; 0x4b8 <move_back_XY+0x7e>
			y_pos = (int)ADCL;
     4c0:	80 91 78 00 	lds	r24, 0x0078
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	90 93 99 03 	sts	0x0399, r25
     4ca:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     4ce:	40 91 98 03 	lds	r20, 0x0398
     4d2:	50 91 99 03 	lds	r21, 0x0399
     4d6:	20 91 79 00 	lds	r18, 0x0079
     4da:	92 2f       	mov	r25, r18
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	84 0f       	add	r24, r20
     4e0:	95 1f       	adc	r25, r21
     4e2:	90 93 99 03 	sts	0x0399, r25
     4e6:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     4ea:	80 91 98 03 	lds	r24, 0x0398
     4ee:	90 91 99 03 	lds	r25, 0x0399
     4f2:	68 17       	cp	r22, r24
     4f4:	79 07       	cpc	r23, r25
     4f6:	80 f1       	brcs	.+96     	; 0x558 <move_back_XY+0x11e>
     4f8:	69 c0       	rjmp	.+210    	; 0x5cc <move_back_XY+0x192>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4fa:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4fe:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     502:	80 91 7a 00 	lds	r24, 0x007A
     506:	80 64       	ori	r24, 0x40	; 64
     508:	80 93 7a 00 	sts	0x007A, r24
     50c:	03 c0       	rjmp	.+6      	; 0x514 <move_back_XY+0xda>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     50e:	8b b1       	in	r24, 0x0b	; 11
     510:	8f 73       	andi	r24, 0x3F	; 63
     512:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     514:	80 91 7a 00 	lds	r24, 0x007A
     518:	86 fd       	sbrc	r24, 6
     51a:	f9 cf       	rjmp	.-14     	; 0x50e <move_back_XY+0xd4>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     51c:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     51e:	8e 2f       	mov	r24, r30
     520:	8a 95       	dec	r24
     522:	f1 f7       	brne	.-4      	; 0x520 <move_back_XY+0xe6>
	_delay_us(5);
	PORTD |= 0x40;
     524:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     526:	80 91 78 00 	lds	r24, 0x0078
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 99 03 	sts	0x0399, r25
     530:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     534:	80 91 98 03 	lds	r24, 0x0398
     538:	90 91 99 03 	lds	r25, 0x0399
     53c:	20 91 79 00 	lds	r18, 0x0079
     540:	32 2f       	mov	r19, r18
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	90 93 99 03 	sts	0x0399, r25
     54c:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     550:	ca 01       	movw	r24, r20
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <move_back_XY+0x118>
     556:	04 c0       	rjmp	.+8      	; 0x560 <move_back_XY+0x126>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     558:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     55a:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     55c:	40 ed       	ldi	r20, 0xD0	; 208
     55e:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     560:	80 91 98 03 	lds	r24, 0x0398
     564:	90 91 99 03 	lds	r25, 0x0399
     568:	68 17       	cp	r22, r24
     56a:	79 07       	cpc	r23, r25
     56c:	30 f2       	brcs	.-116    	; 0x4fa <move_back_XY+0xc0>
     56e:	39 c0       	rjmp	.+114    	; 0x5e2 <move_back_XY+0x1a8>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     570:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     574:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     578:	80 91 7a 00 	lds	r24, 0x007A
     57c:	80 64       	ori	r24, 0x40	; 64
     57e:	80 93 7a 00 	sts	0x007A, r24
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
     582:	80 91 7a 00 	lds	r24, 0x007A
     586:	86 fd       	sbrc	r24, 6
     588:	fc cf       	rjmp	.-8      	; 0x582 <move_back_XY+0x148>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     58a:	8b b1       	in	r24, 0x0b	; 11
     58c:	8f 73       	andi	r24, 0x3F	; 63
     58e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     590:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     592:	8e 2f       	mov	r24, r30
     594:	8a 95       	dec	r24
     596:	f1 f7       	brne	.-4      	; 0x594 <move_back_XY+0x15a>
	_delay_us(5);
	PORTD |= 0x80;
     598:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     59a:	80 91 78 00 	lds	r24, 0x0078
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	90 93 99 03 	sts	0x0399, r25
     5a4:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     5a8:	80 91 98 03 	lds	r24, 0x0398
     5ac:	90 91 99 03 	lds	r25, 0x0399
     5b0:	20 91 79 00 	lds	r18, 0x0079
     5b4:	32 2f       	mov	r19, r18
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	90 93 99 03 	sts	0x0399, r25
     5c0:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5c4:	ca 01       	movw	r24, r20
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <move_back_XY+0x18c>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <move_back_XY+0x19a>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5cc:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5ce:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5d0:	40 ed       	ldi	r20, 0xD0	; 208
     5d2:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     5d4:	80 91 98 03 	lds	r24, 0x0398
     5d8:	90 91 99 03 	lds	r25, 0x0399
     5dc:	86 17       	cp	r24, r22
     5de:	97 07       	cpc	r25, r23
     5e0:	38 f2       	brcs	.-114    	; 0x570 <move_back_XY+0x136>
					move_positive_y();
					y_pos = (int)ADCL;
					y_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     5e2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5e6:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     5f0:	80 91 7a 00 	lds	r24, 0x007A
     5f4:	80 64       	ori	r24, 0x40	; 64
     5f6:	80 93 7a 00 	sts	0x007A, r24
				stop_all();
			end

			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     5fa:	80 91 7a 00 	lds	r24, 0x007A
     5fe:	86 fd       	sbrc	r24, 6
     600:	fc cf       	rjmp	.-8      	; 0x5fa <move_back_XY+0x1c0>
			x_pos = (int)ADCL;
     602:	80 91 78 00 	lds	r24, 0x0078
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 cf 02 	sts	0x02CF, r25
     60c:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     610:	40 91 ce 02 	lds	r20, 0x02CE
     614:	50 91 cf 02 	lds	r21, 0x02CF
     618:	20 91 79 00 	lds	r18, 0x0079
     61c:	92 2f       	mov	r25, r18
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	84 0f       	add	r24, r20
     622:	95 1f       	adc	r25, r21
     624:	90 93 cf 02 	sts	0x02CF, r25
     628:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     62c:	80 91 ce 02 	lds	r24, 0x02CE
     630:	90 91 cf 02 	lds	r25, 0x02CF
     634:	c8 17       	cp	r28, r24
     636:	d9 07       	cpc	r29, r25
     638:	80 f1       	brcs	.+96     	; 0x69a <move_back_XY+0x260>
     63a:	6a c0       	rjmp	.+212    	; 0x710 <move_back_XY+0x2d6>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     63c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     640:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     644:	80 91 7a 00 	lds	r24, 0x007A
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 93 7a 00 	sts	0x007A, r24
     64e:	03 c0       	rjmp	.+6      	; 0x656 <move_back_XY+0x21c>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     650:	8b b1       	in	r24, 0x0b	; 11
     652:	83 7f       	andi	r24, 0xF3	; 243
     654:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     656:	80 91 7a 00 	lds	r24, 0x007A
     65a:	86 fd       	sbrc	r24, 6
     65c:	f9 cf       	rjmp	.-14     	; 0x650 <move_back_XY+0x216>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     65e:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     660:	86 2f       	mov	r24, r22
     662:	8a 95       	dec	r24
     664:	f1 f7       	brne	.-4      	; 0x662 <move_back_XY+0x228>
	_delay_us(5);
	PORTD |= 0x04;
     666:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     668:	80 91 78 00 	lds	r24, 0x0078
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	90 93 cf 02 	sts	0x02CF, r25
     672:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     676:	80 91 ce 02 	lds	r24, 0x02CE
     67a:	90 91 cf 02 	lds	r25, 0x02CF
     67e:	20 91 79 00 	lds	r18, 0x0079
     682:	32 2f       	mov	r19, r18
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	90 93 cf 02 	sts	0x02CF, r25
     68e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     692:	ca 01       	movw	r24, r20
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <move_back_XY+0x25a>
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <move_back_XY+0x268>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     69a:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     69c:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69e:	40 ed       	ldi	r20, 0xD0	; 208
     6a0:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     6a2:	80 91 ce 02 	lds	r24, 0x02CE
     6a6:	90 91 cf 02 	lds	r25, 0x02CF
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	30 f2       	brcs	.-116    	; 0x63c <move_back_XY+0x202>
     6b0:	83 c1       	rjmp	.+774    	; 0x9b8 <move_back_XY+0x57e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     6b2:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     6b6:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     6ba:	80 91 7a 00 	lds	r24, 0x007A
     6be:	80 64       	ori	r24, 0x40	; 64
     6c0:	80 93 7a 00 	sts	0x007A, r24
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <move_back_XY+0x292>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     6c6:	8b b1       	in	r24, 0x0b	; 11
     6c8:	83 7f       	andi	r24, 0xF3	; 243
     6ca:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     6cc:	80 91 7a 00 	lds	r24, 0x007A
     6d0:	86 fd       	sbrc	r24, 6
     6d2:	f9 cf       	rjmp	.-14     	; 0x6c6 <move_back_XY+0x28c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     6d4:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6d6:	86 2f       	mov	r24, r22
     6d8:	8a 95       	dec	r24
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <move_back_XY+0x29e>
	_delay_us(5);
	PORTD |= 0x08;
     6dc:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     6de:	80 91 78 00 	lds	r24, 0x0078
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	90 93 cf 02 	sts	0x02CF, r25
     6e8:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     6ec:	80 91 ce 02 	lds	r24, 0x02CE
     6f0:	90 91 cf 02 	lds	r25, 0x02CF
     6f4:	20 91 79 00 	lds	r18, 0x0079
     6f8:	32 2f       	mov	r19, r18
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	90 93 cf 02 	sts	0x02CF, r25
     704:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     708:	ca 01       	movw	r24, r20
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <move_back_XY+0x2d0>
     70e:	04 c0       	rjmp	.+8      	; 0x718 <move_back_XY+0x2de>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     710:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     712:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     714:	40 ed       	ldi	r20, 0xD0	; 208
     716:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     718:	80 91 ce 02 	lds	r24, 0x02CE
     71c:	90 91 cf 02 	lds	r25, 0x02CF
     720:	8c 17       	cp	r24, r28
     722:	9d 07       	cpc	r25, r29
     724:	30 f2       	brcs	.-116    	; 0x6b2 <move_back_XY+0x278>
     726:	48 c1       	rjmp	.+656    	; 0x9b8 <move_back_XY+0x57e>
				end
				stop_all();
			end
		end

		if (motion == 1)
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	f8 16       	cp	r15, r24
     72c:	09 f0       	breq	.+2      	; 0x730 <move_back_XY+0x2f6>
     72e:	a1 c0       	rjmp	.+322    	; 0x872 <move_back_XY+0x438>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     730:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     734:	80 ec       	ldi	r24, 0xC0	; 192
     736:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     73a:	80 91 7a 00 	lds	r24, 0x007A
     73e:	80 64       	ori	r24, 0x40	; 64
     740:	80 93 7a 00 	sts	0x007A, r24

		if (motion == 1)
		begin
			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     744:	80 91 7a 00 	lds	r24, 0x007A
     748:	86 fd       	sbrc	r24, 6
     74a:	fc cf       	rjmp	.-8      	; 0x744 <move_back_XY+0x30a>
			x_pos = (int)ADCL;
     74c:	80 91 78 00 	lds	r24, 0x0078
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	90 93 cf 02 	sts	0x02CF, r25
     756:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     75a:	40 91 ce 02 	lds	r20, 0x02CE
     75e:	50 91 cf 02 	lds	r21, 0x02CF
     762:	20 91 79 00 	lds	r18, 0x0079
     766:	92 2f       	mov	r25, r18
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	84 0f       	add	r24, r20
     76c:	95 1f       	adc	r25, r21
     76e:	90 93 cf 02 	sts	0x02CF, r25
     772:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     776:	80 91 ce 02 	lds	r24, 0x02CE
     77a:	90 91 cf 02 	lds	r25, 0x02CF
     77e:	c8 17       	cp	r28, r24
     780:	d9 07       	cpc	r29, r25
     782:	80 f1       	brcs	.+96     	; 0x7e4 <move_back_XY+0x3aa>
     784:	6a c0       	rjmp	.+212    	; 0x85a <move_back_XY+0x420>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     786:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     78a:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     78e:	80 91 7a 00 	lds	r24, 0x007A
     792:	80 64       	ori	r24, 0x40	; 64
     794:	80 93 7a 00 	sts	0x007A, r24
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <move_back_XY+0x366>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     79a:	8b b1       	in	r24, 0x0b	; 11
     79c:	83 7f       	andi	r24, 0xF3	; 243
     79e:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     7a0:	80 91 7a 00 	lds	r24, 0x007A
     7a4:	86 fd       	sbrc	r24, 6
     7a6:	f9 cf       	rjmp	.-14     	; 0x79a <move_back_XY+0x360>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     7a8:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7aa:	86 2f       	mov	r24, r22
     7ac:	8a 95       	dec	r24
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <move_back_XY+0x372>
	_delay_us(5);
	PORTD |= 0x04;
     7b0:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     7b2:	80 91 78 00 	lds	r24, 0x0078
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 cf 02 	sts	0x02CF, r25
     7bc:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     7c0:	80 91 ce 02 	lds	r24, 0x02CE
     7c4:	90 91 cf 02 	lds	r25, 0x02CF
     7c8:	20 91 79 00 	lds	r18, 0x0079
     7cc:	32 2f       	mov	r19, r18
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	82 0f       	add	r24, r18
     7d2:	93 1f       	adc	r25, r19
     7d4:	90 93 cf 02 	sts	0x02CF, r25
     7d8:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7dc:	ca 01       	movw	r24, r20
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <move_back_XY+0x3a4>
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <move_back_XY+0x3b2>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     7e4:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7e6:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e8:	40 ed       	ldi	r20, 0xD0	; 208
     7ea:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     7ec:	80 91 ce 02 	lds	r24, 0x02CE
     7f0:	90 91 cf 02 	lds	r25, 0x02CF
     7f4:	c8 17       	cp	r28, r24
     7f6:	d9 07       	cpc	r29, r25
     7f8:	30 f2       	brcs	.-116    	; 0x786 <move_back_XY+0x34c>
     7fa:	de c0       	rjmp	.+444    	; 0x9b8 <move_back_XY+0x57e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     7fc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     800:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     804:	80 91 7a 00 	lds	r24, 0x007A
     808:	80 64       	ori	r24, 0x40	; 64
     80a:	80 93 7a 00 	sts	0x007A, r24
     80e:	03 c0       	rjmp	.+6      	; 0x816 <move_back_XY+0x3dc>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     810:	8b b1       	in	r24, 0x0b	; 11
     812:	83 7f       	andi	r24, 0xF3	; 243
     814:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     816:	80 91 7a 00 	lds	r24, 0x007A
     81a:	86 fd       	sbrc	r24, 6
     81c:	f9 cf       	rjmp	.-14     	; 0x810 <move_back_XY+0x3d6>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     81e:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     820:	86 2f       	mov	r24, r22
     822:	8a 95       	dec	r24
     824:	f1 f7       	brne	.-4      	; 0x822 <move_back_XY+0x3e8>
	_delay_us(5);
	PORTD |= 0x08;
     826:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     828:	80 91 78 00 	lds	r24, 0x0078
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	90 93 cf 02 	sts	0x02CF, r25
     832:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     836:	80 91 ce 02 	lds	r24, 0x02CE
     83a:	90 91 cf 02 	lds	r25, 0x02CF
     83e:	20 91 79 00 	lds	r18, 0x0079
     842:	32 2f       	mov	r19, r18
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	90 93 cf 02 	sts	0x02CF, r25
     84e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     852:	ca 01       	movw	r24, r20
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <move_back_XY+0x41a>
     858:	04 c0       	rjmp	.+8      	; 0x862 <move_back_XY+0x428>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     85a:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     85c:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     85e:	40 ed       	ldi	r20, 0xD0	; 208
     860:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     862:	80 91 ce 02 	lds	r24, 0x02CE
     866:	90 91 cf 02 	lds	r25, 0x02CF
     86a:	8c 17       	cp	r24, r28
     86c:	9d 07       	cpc	r25, r29
     86e:	30 f2       	brcs	.-116    	; 0x7fc <move_back_XY+0x3c2>
     870:	a3 c0       	rjmp	.+326    	; 0x9b8 <move_back_XY+0x57e>
				end
				stop_all();
			end
		end
		
		if (motion == 2)
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	f8 16       	cp	r15, r24
     876:	09 f0       	breq	.+2      	; 0x87a <move_back_XY+0x440>
     878:	a1 c0       	rjmp	.+322    	; 0x9bc <move_back_XY+0x582>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     87a:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     87e:	81 ec       	ldi	r24, 0xC1	; 193
     880:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     884:	80 91 7a 00 	lds	r24, 0x007A
     888:	80 64       	ori	r24, 0x40	; 64
     88a:	80 93 7a 00 	sts	0x007A, r24
		
		if (motion == 2)
		begin
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     88e:	80 91 7a 00 	lds	r24, 0x007A
     892:	86 fd       	sbrc	r24, 6
     894:	fc cf       	rjmp	.-8      	; 0x88e <move_back_XY+0x454>
			y_pos = (int)ADCL;
     896:	80 91 78 00 	lds	r24, 0x0078
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 99 03 	sts	0x0399, r25
     8a0:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     8a4:	40 91 98 03 	lds	r20, 0x0398
     8a8:	50 91 99 03 	lds	r21, 0x0399
     8ac:	20 91 79 00 	lds	r18, 0x0079
     8b0:	92 2f       	mov	r25, r18
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	84 0f       	add	r24, r20
     8b6:	95 1f       	adc	r25, r21
     8b8:	90 93 99 03 	sts	0x0399, r25
     8bc:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     8c0:	80 91 98 03 	lds	r24, 0x0398
     8c4:	90 91 99 03 	lds	r25, 0x0399
     8c8:	68 17       	cp	r22, r24
     8ca:	79 07       	cpc	r23, r25
     8cc:	80 f1       	brcs	.+96     	; 0x92e <move_back_XY+0x4f4>
     8ce:	69 c0       	rjmp	.+210    	; 0x9a2 <move_back_XY+0x568>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     8d0:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     8d4:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     8d8:	80 91 7a 00 	lds	r24, 0x007A
     8dc:	80 64       	ori	r24, 0x40	; 64
     8de:	80 93 7a 00 	sts	0x007A, r24
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <move_back_XY+0x4b0>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     8e4:	8b b1       	in	r24, 0x0b	; 11
     8e6:	8f 73       	andi	r24, 0x3F	; 63
     8e8:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     8ea:	80 91 7a 00 	lds	r24, 0x007A
     8ee:	86 fd       	sbrc	r24, 6
     8f0:	f9 cf       	rjmp	.-14     	; 0x8e4 <move_back_XY+0x4aa>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     8f2:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8f4:	8e 2f       	mov	r24, r30
     8f6:	8a 95       	dec	r24
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <move_back_XY+0x4bc>
	_delay_us(5);
	PORTD |= 0x40;
     8fa:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     8fc:	80 91 78 00 	lds	r24, 0x0078
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	90 93 99 03 	sts	0x0399, r25
     906:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     90a:	80 91 98 03 	lds	r24, 0x0398
     90e:	90 91 99 03 	lds	r25, 0x0399
     912:	20 91 79 00 	lds	r18, 0x0079
     916:	32 2f       	mov	r19, r18
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	90 93 99 03 	sts	0x0399, r25
     922:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     926:	ca 01       	movw	r24, r20
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <move_back_XY+0x4ee>
     92c:	04 c0       	rjmp	.+8      	; 0x936 <move_back_XY+0x4fc>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     92e:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     930:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     932:	40 ed       	ldi	r20, 0xD0	; 208
     934:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     936:	80 91 98 03 	lds	r24, 0x0398
     93a:	90 91 99 03 	lds	r25, 0x0399
     93e:	68 17       	cp	r22, r24
     940:	79 07       	cpc	r23, r25
     942:	30 f2       	brcs	.-116    	; 0x8d0 <move_back_XY+0x496>
     944:	39 c0       	rjmp	.+114    	; 0x9b8 <move_back_XY+0x57e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     946:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     94a:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     94e:	80 91 7a 00 	lds	r24, 0x007A
     952:	80 64       	ori	r24, 0x40	; 64
     954:	80 93 7a 00 	sts	0x007A, r24
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
     958:	80 91 7a 00 	lds	r24, 0x007A
     95c:	86 fd       	sbrc	r24, 6
     95e:	fc cf       	rjmp	.-8      	; 0x958 <move_back_XY+0x51e>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     960:	8b b1       	in	r24, 0x0b	; 11
     962:	8f 73       	andi	r24, 0x3F	; 63
     964:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     966:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     968:	8e 2f       	mov	r24, r30
     96a:	8a 95       	dec	r24
     96c:	f1 f7       	brne	.-4      	; 0x96a <move_back_XY+0x530>
	_delay_us(5);
	PORTD |= 0x80;
     96e:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     970:	80 91 78 00 	lds	r24, 0x0078
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 99 03 	sts	0x0399, r25
     97a:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     97e:	80 91 98 03 	lds	r24, 0x0398
     982:	90 91 99 03 	lds	r25, 0x0399
     986:	20 91 79 00 	lds	r18, 0x0079
     98a:	32 2f       	mov	r19, r18
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	90 93 99 03 	sts	0x0399, r25
     996:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     99a:	ca 01       	movw	r24, r20
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <move_back_XY+0x562>
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <move_back_XY+0x570>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     9a2:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9a4:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9a6:	40 ed       	ldi	r20, 0xD0	; 208
     9a8:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     9aa:	80 91 98 03 	lds	r24, 0x0398
     9ae:	90 91 99 03 	lds	r25, 0x0399
     9b2:	86 17       	cp	r24, r22
     9b4:	97 07       	cpc	r25, r23
     9b6:	38 f2       	brcs	.-114    	; 0x946 <move_back_XY+0x50c>
					move_positive_y();
					y_pos = (int)ADCL;
					y_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     9b8:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
			end
		end
	end
	// print where you end up
	print_position();			
     9bc:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	08 95       	ret

000009cc <move_to_XY>:
end

// 1= pen down, 2= pen up
// 0= both, 1= x only, 2= y only
move_to_XY(int x_in, int y_in, int d, char motion)
begin
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
     9d8:	8b 01       	movw	r16, r22
     9da:	f2 2e       	mov	r15, r18
	if (d==2) raise_pen();
     9dc:	42 30       	cpi	r20, 0x02	; 2
     9de:	51 05       	cpc	r21, r1
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <move_to_XY+0x1c>
     9e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <move_to_XY+0x26>
	if (d==1) lower_pen();
     9e8:	41 30       	cpi	r20, 0x01	; 1
     9ea:	51 05       	cpc	r21, r1
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <move_to_XY+0x26>
     9ee:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     9f2:	1c 16       	cp	r1, r28
     9f4:	1d 06       	cpc	r1, r29
     9f6:	0c f0       	brlt	.+2      	; 0x9fa <move_to_XY+0x2e>
     9f8:	ad c2       	rjmp	.+1370   	; 0xf54 <move_to_XY+0x588>
     9fa:	10 16       	cp	r1, r16
     9fc:	11 06       	cpc	r1, r17
     9fe:	0c f0       	brlt	.+2      	; 0xa02 <move_to_XY+0x36>
     a00:	a9 c2       	rjmp	.+1362   	; 0xf54 <move_to_XY+0x588>
     a02:	be 01       	movw	r22, r28
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	cd 3b       	cpi	r28, 0xBD	; 189
     a08:	d8 07       	cpc	r29, r24
     a0a:	14 f0       	brlt	.+4      	; 0xa10 <move_to_XY+0x44>
     a0c:	6c eb       	ldi	r22, 0xBC	; 188
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	e8 01       	movw	r28, r16
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	0d 3b       	cpi	r16, 0xBD	; 189
     a16:	18 07       	cpc	r17, r24
     a18:	14 f0       	brlt	.+4      	; 0xa1e <move_to_XY+0x52>
     a1a:	cc eb       	ldi	r28, 0xBC	; 188
     a1c:	d2 e0       	ldi	r29, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     a1e:	6f 30       	cpi	r22, 0x0F	; 15
     a20:	71 05       	cpc	r23, r1
     a22:	14 f4       	brge	.+4      	; 0xa28 <move_to_XY+0x5c>
     a24:	6f e0       	ldi	r22, 0x0F	; 15
     a26:	70 e0       	ldi	r23, 0x00	; 0
		if(y_in<15) y_in = 15;
     a28:	cf 30       	cpi	r28, 0x0F	; 15
     a2a:	d1 05       	cpc	r29, r1
     a2c:	14 f4       	brge	.+4      	; 0xa32 <move_to_XY+0x66>
     a2e:	cf e0       	ldi	r28, 0x0F	; 15
     a30:	d0 e0       	ldi	r29, 0x00	; 0

		if(motion == 0)
     a32:	ff 20       	and	r15, r15
     a34:	09 f0       	breq	.+2      	; 0xa38 <move_to_XY+0x6c>
     a36:	43 c1       	rjmp	.+646    	; 0xcbe <move_to_XY+0x2f2>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     a38:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     a3c:	80 ec       	ldi	r24, 0xC0	; 192
     a3e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     a42:	80 91 7a 00 	lds	r24, 0x007A
     a46:	80 64       	ori	r24, 0x40	; 64
     a48:	80 93 7a 00 	sts	0x007A, r24

		if(motion == 0)
		begin
			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     a4c:	80 91 7a 00 	lds	r24, 0x007A
     a50:	86 fd       	sbrc	r24, 6
     a52:	fc cf       	rjmp	.-8      	; 0xa4c <move_to_XY+0x80>
			x_pos = (int)ADCL;
     a54:	80 91 78 00 	lds	r24, 0x0078
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 cf 02 	sts	0x02CF, r25
     a5e:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     a62:	40 91 ce 02 	lds	r20, 0x02CE
     a66:	50 91 cf 02 	lds	r21, 0x02CF
     a6a:	20 91 79 00 	lds	r18, 0x0079
     a6e:	92 2f       	mov	r25, r18
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21
     a76:	90 93 cf 02 	sts	0x02CF, r25
     a7a:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     a7e:	80 91 ce 02 	lds	r24, 0x02CE
     a82:	90 91 cf 02 	lds	r25, 0x02CF
     a86:	68 17       	cp	r22, r24
     a88:	79 07       	cpc	r23, r25
     a8a:	80 f1       	brcs	.+96     	; 0xaec <move_to_XY+0x120>
     a8c:	6a c0       	rjmp	.+212    	; 0xb62 <move_to_XY+0x196>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     a8e:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     a92:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     a96:	80 91 7a 00 	lds	r24, 0x007A
     a9a:	80 64       	ori	r24, 0x40	; 64
     a9c:	80 93 7a 00 	sts	0x007A, r24
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <move_to_XY+0xdc>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     aa2:	8b b1       	in	r24, 0x0b	; 11
     aa4:	83 7f       	andi	r24, 0xF3	; 243
     aa6:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     aa8:	80 91 7a 00 	lds	r24, 0x007A
     aac:	86 fd       	sbrc	r24, 6
     aae:	f9 cf       	rjmp	.-14     	; 0xaa2 <move_to_XY+0xd6>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     ab0:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ab2:	8e 2f       	mov	r24, r30
     ab4:	8a 95       	dec	r24
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <move_to_XY+0xe8>
	_delay_us(5);
	PORTD |= 0x04;
     ab8:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     aba:	80 91 78 00 	lds	r24, 0x0078
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 cf 02 	sts	0x02CF, r25
     ac4:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     ac8:	80 91 ce 02 	lds	r24, 0x02CE
     acc:	90 91 cf 02 	lds	r25, 0x02CF
     ad0:	20 91 79 00 	lds	r18, 0x0079
     ad4:	32 2f       	mov	r19, r18
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	90 93 cf 02 	sts	0x02CF, r25
     ae0:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ae4:	ca 01       	movw	r24, r20
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <move_to_XY+0x11a>
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <move_to_XY+0x128>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     aec:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     aee:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     af0:	40 ed       	ldi	r20, 0xD0	; 208
     af2:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     af4:	80 91 ce 02 	lds	r24, 0x02CE
     af8:	90 91 cf 02 	lds	r25, 0x02CF
     afc:	68 17       	cp	r22, r24
     afe:	79 07       	cpc	r23, r25
     b00:	30 f2       	brcs	.-116    	; 0xa8e <move_to_XY+0xc2>
     b02:	3a c0       	rjmp	.+116    	; 0xb78 <move_to_XY+0x1ac>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     b04:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     b08:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     b0c:	80 91 7a 00 	lds	r24, 0x007A
     b10:	80 64       	ori	r24, 0x40	; 64
     b12:	80 93 7a 00 	sts	0x007A, r24
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <move_to_XY+0x152>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     b18:	8b b1       	in	r24, 0x0b	; 11
     b1a:	83 7f       	andi	r24, 0xF3	; 243
     b1c:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     b1e:	80 91 7a 00 	lds	r24, 0x007A
     b22:	86 fd       	sbrc	r24, 6
     b24:	f9 cf       	rjmp	.-14     	; 0xb18 <move_to_XY+0x14c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     b26:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b28:	8e 2f       	mov	r24, r30
     b2a:	8a 95       	dec	r24
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <move_to_XY+0x15e>
	_delay_us(5);
	PORTD |= 0x08;
     b2e:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     b30:	80 91 78 00 	lds	r24, 0x0078
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 cf 02 	sts	0x02CF, r25
     b3a:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     b3e:	80 91 ce 02 	lds	r24, 0x02CE
     b42:	90 91 cf 02 	lds	r25, 0x02CF
     b46:	20 91 79 00 	lds	r18, 0x0079
     b4a:	32 2f       	mov	r19, r18
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	90 93 cf 02 	sts	0x02CF, r25
     b56:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b5a:	ca 01       	movw	r24, r20
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <move_to_XY+0x190>
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <move_to_XY+0x19e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     b62:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b64:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b66:	40 ed       	ldi	r20, 0xD0	; 208
     b68:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     b6a:	80 91 ce 02 	lds	r24, 0x02CE
     b6e:	90 91 cf 02 	lds	r25, 0x02CF
     b72:	86 17       	cp	r24, r22
     b74:	97 07       	cpc	r25, r23
     b76:	30 f2       	brcs	.-116    	; 0xb04 <move_to_XY+0x138>
					move_positive_x();
					x_pos = (int)ADCL;
					x_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     b78:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     b7c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     b80:	81 ec       	ldi	r24, 0xC1	; 193
     b82:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     b86:	80 91 7a 00 	lds	r24, 0x007A
     b8a:	80 64       	ori	r24, 0x40	; 64
     b8c:	80 93 7a 00 	sts	0x007A, r24
				stop_all();
			end
			
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     b90:	80 91 7a 00 	lds	r24, 0x007A
     b94:	86 fd       	sbrc	r24, 6
     b96:	fc cf       	rjmp	.-8      	; 0xb90 <move_to_XY+0x1c4>
			y_pos = (int)ADCL;
     b98:	80 91 78 00 	lds	r24, 0x0078
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 99 03 	sts	0x0399, r25
     ba2:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     ba6:	40 91 98 03 	lds	r20, 0x0398
     baa:	50 91 99 03 	lds	r21, 0x0399
     bae:	20 91 79 00 	lds	r18, 0x0079
     bb2:	92 2f       	mov	r25, r18
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	84 0f       	add	r24, r20
     bb8:	95 1f       	adc	r25, r21
     bba:	90 93 99 03 	sts	0x0399, r25
     bbe:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     bc2:	80 91 98 03 	lds	r24, 0x0398
     bc6:	90 91 99 03 	lds	r25, 0x0399
     bca:	c8 17       	cp	r28, r24
     bcc:	d9 07       	cpc	r29, r25
     bce:	80 f1       	brcs	.+96     	; 0xc30 <move_to_XY+0x264>
     bd0:	6a c0       	rjmp	.+212    	; 0xca6 <move_to_XY+0x2da>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     bd2:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     bd6:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     bda:	80 91 7a 00 	lds	r24, 0x007A
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7a 00 	sts	0x007A, r24
     be4:	03 c0       	rjmp	.+6      	; 0xbec <move_to_XY+0x220>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     be6:	8b b1       	in	r24, 0x0b	; 11
     be8:	8f 73       	andi	r24, 0x3F	; 63
     bea:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     bec:	80 91 7a 00 	lds	r24, 0x007A
     bf0:	86 fd       	sbrc	r24, 6
     bf2:	f9 cf       	rjmp	.-14     	; 0xbe6 <move_to_XY+0x21a>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     bf4:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bf6:	86 2f       	mov	r24, r22
     bf8:	8a 95       	dec	r24
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <move_to_XY+0x22c>
	_delay_us(5);
	PORTD |= 0x40;
     bfc:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     bfe:	80 91 78 00 	lds	r24, 0x0078
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 99 03 	sts	0x0399, r25
     c08:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     c0c:	80 91 98 03 	lds	r24, 0x0398
     c10:	90 91 99 03 	lds	r25, 0x0399
     c14:	20 91 79 00 	lds	r18, 0x0079
     c18:	32 2f       	mov	r19, r18
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	82 0f       	add	r24, r18
     c1e:	93 1f       	adc	r25, r19
     c20:	90 93 99 03 	sts	0x0399, r25
     c24:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c28:	ca 01       	movw	r24, r20
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <move_to_XY+0x25e>
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <move_to_XY+0x26c>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     c30:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c32:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c34:	40 ed       	ldi	r20, 0xD0	; 208
     c36:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     c38:	80 91 98 03 	lds	r24, 0x0398
     c3c:	90 91 99 03 	lds	r25, 0x0399
     c40:	c8 17       	cp	r28, r24
     c42:	d9 07       	cpc	r29, r25
     c44:	30 f2       	brcs	.-116    	; 0xbd2 <move_to_XY+0x206>
     c46:	84 c1       	rjmp	.+776    	; 0xf50 <move_to_XY+0x584>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     c48:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     c4c:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     c50:	80 91 7a 00 	lds	r24, 0x007A
     c54:	80 64       	ori	r24, 0x40	; 64
     c56:	80 93 7a 00 	sts	0x007A, r24
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <move_to_XY+0x296>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     c5c:	8b b1       	in	r24, 0x0b	; 11
     c5e:	8f 73       	andi	r24, 0x3F	; 63
     c60:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     c62:	80 91 7a 00 	lds	r24, 0x007A
     c66:	86 fd       	sbrc	r24, 6
     c68:	f9 cf       	rjmp	.-14     	; 0xc5c <move_to_XY+0x290>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     c6a:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c6c:	86 2f       	mov	r24, r22
     c6e:	8a 95       	dec	r24
     c70:	f1 f7       	brne	.-4      	; 0xc6e <move_to_XY+0x2a2>
	_delay_us(5);
	PORTD |= 0x80;
     c72:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     c74:	80 91 78 00 	lds	r24, 0x0078
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 99 03 	sts	0x0399, r25
     c7e:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     c82:	80 91 98 03 	lds	r24, 0x0398
     c86:	90 91 99 03 	lds	r25, 0x0399
     c8a:	20 91 79 00 	lds	r18, 0x0079
     c8e:	32 2f       	mov	r19, r18
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	90 93 99 03 	sts	0x0399, r25
     c9a:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	ca 01       	movw	r24, r20
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <move_to_XY+0x2d4>
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <move_to_XY+0x2e2>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     ca6:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ca8:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     caa:	40 ed       	ldi	r20, 0xD0	; 208
     cac:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     cae:	80 91 98 03 	lds	r24, 0x0398
     cb2:	90 91 99 03 	lds	r25, 0x0399
     cb6:	8c 17       	cp	r24, r28
     cb8:	9d 07       	cpc	r25, r29
     cba:	30 f2       	brcs	.-116    	; 0xc48 <move_to_XY+0x27c>
     cbc:	49 c1       	rjmp	.+658    	; 0xf50 <move_to_XY+0x584>
				end
				stop_all();
			end
		end
	
		if (motion == 1)
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	f8 16       	cp	r15, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <move_to_XY+0x2fa>
     cc4:	a1 c0       	rjmp	.+322    	; 0xe08 <move_to_XY+0x43c>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     cc6:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     cca:	80 ec       	ldi	r24, 0xC0	; 192
     ccc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     cd0:	80 91 7a 00 	lds	r24, 0x007A
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	80 93 7a 00 	sts	0x007A, r24
	
		if (motion == 1)
		begin
			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     cda:	80 91 7a 00 	lds	r24, 0x007A
     cde:	86 fd       	sbrc	r24, 6
     ce0:	fc cf       	rjmp	.-8      	; 0xcda <move_to_XY+0x30e>
			x_pos = (int)ADCL;
     ce2:	80 91 78 00 	lds	r24, 0x0078
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 cf 02 	sts	0x02CF, r25
     cec:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     cf0:	40 91 ce 02 	lds	r20, 0x02CE
     cf4:	50 91 cf 02 	lds	r21, 0x02CF
     cf8:	20 91 79 00 	lds	r18, 0x0079
     cfc:	92 2f       	mov	r25, r18
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	84 0f       	add	r24, r20
     d02:	95 1f       	adc	r25, r21
     d04:	90 93 cf 02 	sts	0x02CF, r25
     d08:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     d0c:	80 91 ce 02 	lds	r24, 0x02CE
     d10:	90 91 cf 02 	lds	r25, 0x02CF
     d14:	68 17       	cp	r22, r24
     d16:	79 07       	cpc	r23, r25
     d18:	80 f1       	brcs	.+96     	; 0xd7a <move_to_XY+0x3ae>
     d1a:	6a c0       	rjmp	.+212    	; 0xdf0 <move_to_XY+0x424>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     d1c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     d20:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     d24:	80 91 7a 00 	lds	r24, 0x007A
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	80 93 7a 00 	sts	0x007A, r24
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <move_to_XY+0x36a>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     d30:	8b b1       	in	r24, 0x0b	; 11
     d32:	83 7f       	andi	r24, 0xF3	; 243
     d34:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     d36:	80 91 7a 00 	lds	r24, 0x007A
     d3a:	86 fd       	sbrc	r24, 6
     d3c:	f9 cf       	rjmp	.-14     	; 0xd30 <move_to_XY+0x364>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     d3e:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d40:	8e 2f       	mov	r24, r30
     d42:	8a 95       	dec	r24
     d44:	f1 f7       	brne	.-4      	; 0xd42 <move_to_XY+0x376>
	_delay_us(5);
	PORTD |= 0x04;
     d46:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     d48:	80 91 78 00 	lds	r24, 0x0078
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 cf 02 	sts	0x02CF, r25
     d52:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     d56:	80 91 ce 02 	lds	r24, 0x02CE
     d5a:	90 91 cf 02 	lds	r25, 0x02CF
     d5e:	20 91 79 00 	lds	r18, 0x0079
     d62:	32 2f       	mov	r19, r18
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	90 93 cf 02 	sts	0x02CF, r25
     d6e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d72:	ca 01       	movw	r24, r20
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <move_to_XY+0x3a8>
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <move_to_XY+0x3b6>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     d7a:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d7c:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d7e:	40 ed       	ldi	r20, 0xD0	; 208
     d80:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     d82:	80 91 ce 02 	lds	r24, 0x02CE
     d86:	90 91 cf 02 	lds	r25, 0x02CF
     d8a:	68 17       	cp	r22, r24
     d8c:	79 07       	cpc	r23, r25
     d8e:	30 f2       	brcs	.-116    	; 0xd1c <move_to_XY+0x350>
     d90:	df c0       	rjmp	.+446    	; 0xf50 <move_to_XY+0x584>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     d92:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     d96:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     d9a:	80 91 7a 00 	lds	r24, 0x007A
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	80 93 7a 00 	sts	0x007A, r24
     da4:	03 c0       	rjmp	.+6      	; 0xdac <move_to_XY+0x3e0>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     da6:	8b b1       	in	r24, 0x0b	; 11
     da8:	83 7f       	andi	r24, 0xF3	; 243
     daa:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     dac:	80 91 7a 00 	lds	r24, 0x007A
     db0:	86 fd       	sbrc	r24, 6
     db2:	f9 cf       	rjmp	.-14     	; 0xda6 <move_to_XY+0x3da>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     db4:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     db6:	8e 2f       	mov	r24, r30
     db8:	8a 95       	dec	r24
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <move_to_XY+0x3ec>
	_delay_us(5);
	PORTD |= 0x08;
     dbc:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     dbe:	80 91 78 00 	lds	r24, 0x0078
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 cf 02 	sts	0x02CF, r25
     dc8:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     dcc:	80 91 ce 02 	lds	r24, 0x02CE
     dd0:	90 91 cf 02 	lds	r25, 0x02CF
     dd4:	20 91 79 00 	lds	r18, 0x0079
     dd8:	32 2f       	mov	r19, r18
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	90 93 cf 02 	sts	0x02CF, r25
     de4:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de8:	ca 01       	movw	r24, r20
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <move_to_XY+0x41e>
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <move_to_XY+0x42c>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     df0:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     df2:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df4:	40 ed       	ldi	r20, 0xD0	; 208
     df6:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     df8:	80 91 ce 02 	lds	r24, 0x02CE
     dfc:	90 91 cf 02 	lds	r25, 0x02CF
     e00:	86 17       	cp	r24, r22
     e02:	97 07       	cpc	r25, r23
     e04:	30 f2       	brcs	.-116    	; 0xd92 <move_to_XY+0x3c6>
     e06:	a4 c0       	rjmp	.+328    	; 0xf50 <move_to_XY+0x584>
				end
				stop_all();
			end
		end

		if (motion == 2)
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	f8 16       	cp	r15, r24
     e0c:	09 f0       	breq	.+2      	; 0xe10 <move_to_XY+0x444>
     e0e:	a2 c0       	rjmp	.+324    	; 0xf54 <move_to_XY+0x588>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     e10:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     e14:	81 ec       	ldi	r24, 0xC1	; 193
     e16:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     e1a:	80 91 7a 00 	lds	r24, 0x007A
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	80 93 7a 00 	sts	0x007A, r24

		if (motion == 2)
		begin
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     e24:	80 91 7a 00 	lds	r24, 0x007A
     e28:	86 fd       	sbrc	r24, 6
     e2a:	fc cf       	rjmp	.-8      	; 0xe24 <move_to_XY+0x458>
			y_pos = (int)ADCL;
     e2c:	80 91 78 00 	lds	r24, 0x0078
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 99 03 	sts	0x0399, r25
     e36:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     e3a:	40 91 98 03 	lds	r20, 0x0398
     e3e:	50 91 99 03 	lds	r21, 0x0399
     e42:	20 91 79 00 	lds	r18, 0x0079
     e46:	92 2f       	mov	r25, r18
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	90 93 99 03 	sts	0x0399, r25
     e52:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     e56:	80 91 98 03 	lds	r24, 0x0398
     e5a:	90 91 99 03 	lds	r25, 0x0399
     e5e:	c8 17       	cp	r28, r24
     e60:	d9 07       	cpc	r29, r25
     e62:	80 f1       	brcs	.+96     	; 0xec4 <move_to_XY+0x4f8>
     e64:	6a c0       	rjmp	.+212    	; 0xf3a <move_to_XY+0x56e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     e66:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     e6a:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     e6e:	80 91 7a 00 	lds	r24, 0x007A
     e72:	80 64       	ori	r24, 0x40	; 64
     e74:	80 93 7a 00 	sts	0x007A, r24
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <move_to_XY+0x4b4>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     e7a:	8b b1       	in	r24, 0x0b	; 11
     e7c:	8f 73       	andi	r24, 0x3F	; 63
     e7e:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     e80:	80 91 7a 00 	lds	r24, 0x007A
     e84:	86 fd       	sbrc	r24, 6
     e86:	f9 cf       	rjmp	.-14     	; 0xe7a <move_to_XY+0x4ae>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     e88:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e8a:	86 2f       	mov	r24, r22
     e8c:	8a 95       	dec	r24
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <move_to_XY+0x4c0>
	_delay_us(5);
	PORTD |= 0x40;
     e90:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     e92:	80 91 78 00 	lds	r24, 0x0078
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 99 03 	sts	0x0399, r25
     e9c:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     ea0:	80 91 98 03 	lds	r24, 0x0398
     ea4:	90 91 99 03 	lds	r25, 0x0399
     ea8:	20 91 79 00 	lds	r18, 0x0079
     eac:	32 2f       	mov	r19, r18
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	90 93 99 03 	sts	0x0399, r25
     eb8:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ebc:	ca 01       	movw	r24, r20
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <move_to_XY+0x4f2>
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <move_to_XY+0x500>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     ec4:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ec6:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec8:	40 ed       	ldi	r20, 0xD0	; 208
     eca:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     ecc:	80 91 98 03 	lds	r24, 0x0398
     ed0:	90 91 99 03 	lds	r25, 0x0399
     ed4:	c8 17       	cp	r28, r24
     ed6:	d9 07       	cpc	r29, r25
     ed8:	30 f2       	brcs	.-116    	; 0xe66 <move_to_XY+0x49a>
     eda:	3a c0       	rjmp	.+116    	; 0xf50 <move_to_XY+0x584>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     edc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     ee0:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     ee4:	80 91 7a 00 	lds	r24, 0x007A
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	80 93 7a 00 	sts	0x007A, r24
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <move_to_XY+0x52a>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     ef0:	8b b1       	in	r24, 0x0b	; 11
     ef2:	8f 73       	andi	r24, 0x3F	; 63
     ef4:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     ef6:	80 91 7a 00 	lds	r24, 0x007A
     efa:	86 fd       	sbrc	r24, 6
     efc:	f9 cf       	rjmp	.-14     	; 0xef0 <move_to_XY+0x524>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     efe:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f00:	86 2f       	mov	r24, r22
     f02:	8a 95       	dec	r24
     f04:	f1 f7       	brne	.-4      	; 0xf02 <move_to_XY+0x536>
	_delay_us(5);
	PORTD |= 0x80;
     f06:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     f08:	80 91 78 00 	lds	r24, 0x0078
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 99 03 	sts	0x0399, r25
     f12:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     f16:	80 91 98 03 	lds	r24, 0x0398
     f1a:	90 91 99 03 	lds	r25, 0x0399
     f1e:	20 91 79 00 	lds	r18, 0x0079
     f22:	32 2f       	mov	r19, r18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	90 93 99 03 	sts	0x0399, r25
     f2e:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f32:	ca 01       	movw	r24, r20
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <move_to_XY+0x568>
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <move_to_XY+0x576>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     f3a:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f3c:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3e:	40 ed       	ldi	r20, 0xD0	; 208
     f40:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     f42:	80 91 98 03 	lds	r24, 0x0398
     f46:	90 91 99 03 	lds	r25, 0x0399
     f4a:	8c 17       	cp	r24, r28
     f4c:	9d 07       	cpc	r25, r29
     f4e:	30 f2       	brcs	.-116    	; 0xedc <move_to_XY+0x510>
					move_positive_y();
					y_pos = (int)ADCL;
					y_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     f50:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
			end
		end
	end	
	// print where you end up
	print_position();			
     f54:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	08 95       	ret

00000f64 <move_motor>:
		LCDstring(lcd_buffer, 10);

end

void move_motor()
begin
     f64:	8f 92       	push	r8
     f66:	9f 92       	push	r9
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2,0);
     f7c:	80 91 ab 03 	lds	r24, 0x03AB
     f80:	90 91 ac 03 	lds	r25, 0x03AC
     f84:	60 91 f4 01 	lds	r22, 0x01F4
     f88:	70 91 f5 01 	lds	r23, 0x01F5
     f8c:	42 e0       	ldi	r20, 0x02	; 2
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
     f96:	a1 e0       	ldi	r26, 0x01	; 1
     f98:	aa 2e       	mov	r10, r26
     f9a:	b1 2c       	mov	r11, r1
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     f9c:	a5 01       	movw	r20, r10
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	eb ea       	ldi	r30, 0xAB	; 171
     fa4:	ce 2e       	mov	r12, r30
     fa6:	e3 e0       	ldi	r30, 0x03	; 3
     fa8:	de 2e       	mov	r13, r30
     faa:	c4 0e       	add	r12, r20
     fac:	d5 1e       	adc	r13, r21
     fae:	f6 01       	movw	r30, r12
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	97 fd       	sbrc	r25, 7
     fb6:	ae c0       	rjmp	.+348    	; 0x1114 <move_motor+0x1b0>
     fb8:	74 ef       	ldi	r23, 0xF4	; 244
     fba:	e7 2e       	mov	r14, r23
     fbc:	71 e0       	ldi	r23, 0x01	; 1
     fbe:	f7 2e       	mov	r15, r23
     fc0:	e4 0e       	add	r14, r20
     fc2:	f5 1e       	adc	r15, r21
     fc4:	f7 01       	movw	r30, r14
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	97 fd       	sbrc	r25, 7
     fcc:	a3 c0       	rjmp	.+326    	; 0x1114 <move_motor+0x1b0>
		begin
			if(x_vect[i] == x_vect[i-1])
     fce:	f6 01       	movw	r30, r12
     fd0:	20 81       	ld	r18, Z
     fd2:	31 81       	ldd	r19, Z+1	; 0x01
     fd4:	08 94       	sec
     fd6:	a1 08       	sbc	r10, r1
     fd8:	b1 08       	sbc	r11, r1
     fda:	e5 01       	movw	r28, r10
     fdc:	cc 0f       	add	r28, r28
     fde:	dd 1f       	adc	r29, r29
     fe0:	08 94       	sec
     fe2:	a1 1c       	adc	r10, r1
     fe4:	b1 1c       	adc	r11, r1
     fe6:	9b ea       	ldi	r25, 0xAB	; 171
     fe8:	89 2e       	mov	r8, r25
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	99 2e       	mov	r9, r25
     fee:	8c 0e       	add	r8, r28
     ff0:	9d 1e       	adc	r9, r29
     ff2:	f4 01       	movw	r30, r8
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	59 f5       	brne	.+86     	; 0x1054 <move_motor+0xf0>
			begin
				move_to_XY(x_vect[i],y_vect[i],d_vect[i],2);
     ffe:	f6 01       	movw	r30, r12
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	f7 01       	movw	r30, r14
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	8a 01       	movw	r16, r20
    100c:	00 53       	subi	r16, 0x30	; 48
    100e:	1d 4f       	sbci	r17, 0xFD	; 253
    1010:	f8 01       	movw	r30, r16
    1012:	40 81       	ld	r20, Z
    1014:	51 81       	ldd	r21, Z+1	; 0x01
    1016:	22 e0       	ldi	r18, 0x02	; 2
    1018:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
				if (d_vect[i] == 1)
    101c:	f8 01       	movw	r30, r16
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	09 f0       	breq	.+2      	; 0x1028 <move_motor+0xc4>
    1026:	6e c0       	rjmp	.+220    	; 0x1104 <move_motor+0x1a0>
				begin
					move_back_XY(x_vect[i-1],y_vect[i-1],1,2);
    1028:	f4 01       	movw	r30, r8
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	cc 50       	subi	r28, 0x0C	; 12
    1030:	de 4f       	sbci	r29, 0xFE	; 254
    1032:	68 81       	ld	r22, Y
    1034:	79 81       	ldd	r23, Y+1	; 0x01
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	22 e0       	ldi	r18, 0x02	; 2
    103c:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
					move_to_XY(x_vect[i],y_vect[i],1,2);
    1040:	f6 01       	movw	r30, r12
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	f7 01       	movw	r30, r14
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	22 e0       	ldi	r18, 0x02	; 2
    1052:	56 c0       	rjmp	.+172    	; 0x1100 <move_motor+0x19c>
				end
			end
			else 
			begin
				if(y_vect[i] == y_vect[i-1])
    1054:	f7 01       	movw	r30, r14
    1056:	20 81       	ld	r18, Z
    1058:	31 81       	ldd	r19, Z+1	; 0x01
    105a:	8e 01       	movw	r16, r28
    105c:	0c 50       	subi	r16, 0x0C	; 12
    105e:	1e 4f       	sbci	r17, 0xFE	; 254
    1060:	f8 01       	movw	r30, r16
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	ea 01       	movw	r28, r20
    1068:	c0 53       	subi	r28, 0x30	; 48
    106a:	dd 4f       	sbci	r29, 0xFD	; 253
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	21 f5       	brne	.+72     	; 0x10ba <move_motor+0x156>
				begin
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],1);
    1072:	f6 01       	movw	r30, r12
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	f7 01       	movw	r30, r14
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	48 81       	ld	r20, Y
    1080:	59 81       	ldd	r21, Y+1	; 0x01
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
					if (d_vect[i] == 1)
    1088:	88 81       	ld	r24, Y
    108a:	99 81       	ldd	r25, Y+1	; 0x01
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	d1 f5       	brne	.+116    	; 0x1104 <move_motor+0x1a0>
					begin
						move_back_XY(x_vect[i-1],y_vect[i-1],1,1);
    1090:	f4 01       	movw	r30, r8
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	f8 01       	movw	r30, r16
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
						move_to_XY(x_vect[i],y_vect[i],1,1);
    10a6:	f6 01       	movw	r30, r12
    10a8:	80 81       	ld	r24, Z
    10aa:	91 81       	ldd	r25, Z+1	; 0x01
    10ac:	f7 01       	movw	r30, r14
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	23 c0       	rjmp	.+70     	; 0x1100 <move_motor+0x19c>
					end
				end
				else
				begin
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],0);
    10ba:	f6 01       	movw	r30, r12
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	f7 01       	movw	r30, r14
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	48 81       	ld	r20, Y
    10c8:	59 81       	ldd	r21, Y+1	; 0x01
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
					if (d_vect[i] == 1)
    10d0:	88 81       	ld	r24, Y
    10d2:	99 81       	ldd	r25, Y+1	; 0x01
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	b1 f4       	brne	.+44     	; 0x1104 <move_motor+0x1a0>
					begin
						move_back_XY(x_vect[i-1],y_vect[i-1],1,0);
    10d8:	f4 01       	movw	r30, r8
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	f8 01       	movw	r30, r16
    10e0:	60 81       	ld	r22, Z
    10e2:	71 81       	ldd	r23, Z+1	; 0x01
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
						move_to_XY(x_vect[i],y_vect[i],1,0);
    10ee:	f6 01       	movw	r30, r12
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	f7 01       	movw	r30, r14
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	50 e0       	ldi	r21, 0x00	; 0
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2,0);
	for(i=1;i<100;i++)
    1104:	08 94       	sec
    1106:	a1 1c       	adc	r10, r1
    1108:	b1 1c       	adc	r11, r1
    110a:	f4 e6       	ldi	r31, 0x64	; 100
    110c:	af 16       	cp	r10, r31
    110e:	b1 04       	cpc	r11, r1
    1110:	09 f0       	breq	.+2      	; 0x1114 <move_motor+0x1b0>
    1112:	44 cf       	rjmp	.-376    	; 0xf9c <move_motor+0x38>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2,0);
    1114:	8c eb       	ldi	r24, 0xBC	; 188
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	6c eb       	ldi	r22, 0xBC	; 188
    111a:	72 e0       	ldi	r23, 0x02	; 2
    111c:	42 e0       	ldi	r20, 0x02	; 2
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
end
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	08 95       	ret

00001140 <get_frame>:
	// print where you end up
	print_position();			
end

void get_frame()
begin
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	69 97       	sbiw	r28, 0x19	; 25
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
    1174:	8e ef       	ldi	r24, 0xFE	; 254
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
    1184:	18 86       	std	Y+8, r1	; 0x08
    1186:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
    1188:	0a e9       	ldi	r16, 0x9A	; 154
    118a:	13 e0       	ldi	r17, 0x03	; 3
    118c:	c8 01       	movw	r24, r16
    118e:	60 e1       	ldi	r22, 0x10	; 16
    1190:	71 e0       	ldi	r23, 0x01	; 1
    1192:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
    1196:	60 91 75 04 	lds	r22, 0x0475
    119a:	70 91 76 04 	lds	r23, 0x0476
    119e:	c8 01       	movw	r24, r16
    11a0:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputs>
  fscanf(stdin, "%d*", &file_size) ;
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <get_frame+0x66>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <get_frame+0x68>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <get_frame+0x6a>
    11aa:	ed b7       	in	r30, 0x3d	; 61
    11ac:	fe b7       	in	r31, 0x3e	; 62
    11ae:	31 96       	adiw	r30, 0x01	; 1
    11b0:	80 91 73 04 	lds	r24, 0x0473
    11b4:	90 91 74 04 	lds	r25, 0x0474
    11b8:	ad b7       	in	r26, 0x3d	; 61
    11ba:	be b7       	in	r27, 0x3e	; 62
    11bc:	12 96       	adiw	r26, 0x02	; 2
    11be:	9c 93       	st	X, r25
    11c0:	8e 93       	st	-X, r24
    11c2:	11 97       	sbiw	r26, 0x01	; 1
    11c4:	8e e1       	ldi	r24, 0x1E	; 30
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	93 83       	std	Z+3, r25	; 0x03
    11ca:	82 83       	std	Z+2, r24	; 0x02
    11cc:	ce 01       	movw	r24, r28
    11ce:	07 96       	adiw	r24, 0x07	; 7
    11d0:	95 83       	std	Z+5, r25	; 0x05
    11d2:	84 83       	std	Z+4, r24	; 0x04
    11d4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
    11d8:	ed b7       	in	r30, 0x3d	; 61
    11da:	fe b7       	in	r31, 0x3e	; 62
    11dc:	31 96       	adiw	r30, 0x01	; 1
    11de:	ad b7       	in	r26, 0x3d	; 61
    11e0:	be b7       	in	r27, 0x3e	; 62
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	1c 93       	st	X, r17
    11e6:	0e 93       	st	-X, r16
    11e8:	11 97       	sbiw	r26, 0x01	; 1
    11ea:	82 e2       	ldi	r24, 0x22	; 34
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	93 83       	std	Z+3, r25	; 0x03
    11f0:	82 83       	std	Z+2, r24	; 0x02
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	95 83       	std	Z+5, r25	; 0x05
    11f8:	84 83       	std	Z+4, r24	; 0x04
    11fa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>

	LCDGotoXY(0, 0);
    11fe:	6d b7       	in	r22, 0x3d	; 61
    1200:	7e b7       	in	r23, 0x3e	; 62
    1202:	6a 5f       	subi	r22, 0xFA	; 250
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	7e bf       	out	0x3e, r23	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	6d bf       	out	0x3d, r22	; 61
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
    1218:	f8 01       	movw	r30, r16
    121a:	01 90       	ld	r0, Z+
    121c:	00 20       	and	r0, r0
    121e:	e9 f7       	brne	.-6      	; 0x121a <get_frame+0xda>
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	e0 1b       	sub	r30, r16
    1224:	f1 0b       	sbc	r31, r17
    1226:	c8 01       	movw	r24, r16
    1228:	6e 2f       	mov	r22, r30
    122a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
    122e:	ee 24       	eor	r14, r14
    1230:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
    1232:	79 e0       	ldi	r23, 0x09	; 9
    1234:	a7 2e       	mov	r10, r23
    1236:	b1 2c       	mov	r11, r1
    1238:	ac 0e       	add	r10, r28
    123a:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
    123c:	48 01       	movw	r8, r16
    123e:	66 e4       	ldi	r22, 0x46	; 70
    1240:	26 2e       	mov	r2, r22
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	36 2e       	mov	r3, r22
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
    1246:	0c eb       	ldi	r16, 0xBC	; 188
    1248:	12 e0       	ldi	r17, 0x02	; 2
    124a:	55 e5       	ldi	r21, 0x55	; 85
    124c:	45 2e       	mov	r4, r21
    124e:	51 e0       	ldi	r21, 0x01	; 1
    1250:	55 2e       	mov	r5, r21
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
    1252:	4b e4       	ldi	r20, 0x4B	; 75
    1254:	64 2e       	mov	r6, r20
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	74 2e       	mov	r7, r20
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
    125a:	3e ef       	ldi	r19, 0xFE	; 254
    125c:	c3 2e       	mov	r12, r19
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	d3 2e       	mov	r13, r19
    1262:	f7 c0       	rjmp	.+494    	; 0x1452 <get_frame+0x312>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
    1264:	60 91 75 04 	lds	r22, 0x0475
    1268:	70 91 76 04 	lds	r23, 0x0476
    126c:	84 e3       	ldi	r24, 0x34	; 52
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputs>
	fscanf(stdin, "%s", buffer) ;
    1274:	00 d0       	rcall	.+0      	; 0x1276 <get_frame+0x136>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <get_frame+0x138>
    1278:	00 d0       	rcall	.+0      	; 0x127a <get_frame+0x13a>
    127a:	ed b7       	in	r30, 0x3d	; 61
    127c:	fe b7       	in	r31, 0x3e	; 62
    127e:	31 96       	adiw	r30, 0x01	; 1
    1280:	80 91 73 04 	lds	r24, 0x0473
    1284:	90 91 74 04 	lds	r25, 0x0474
    1288:	ad b7       	in	r26, 0x3d	; 61
    128a:	be b7       	in	r27, 0x3e	; 62
    128c:	12 96       	adiw	r26, 0x02	; 2
    128e:	9c 93       	st	X, r25
    1290:	8e 93       	st	-X, r24
    1292:	11 97       	sbiw	r26, 0x01	; 1
    1294:	69 e3       	ldi	r22, 0x39	; 57
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	73 83       	std	Z+3, r23	; 0x03
    129a:	62 83       	std	Z+2, r22	; 0x02
    129c:	b5 82       	std	Z+5, r11	; 0x05
    129e:	a4 82       	std	Z+4, r10	; 0x04
    12a0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <get_frame+0x166>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <get_frame+0x168>
    12a8:	ed b7       	in	r30, 0x3d	; 61
    12aa:	fe b7       	in	r31, 0x3e	; 62
    12ac:	31 96       	adiw	r30, 0x01	; 1
    12ae:	ad b7       	in	r26, 0x3d	; 61
    12b0:	be b7       	in	r27, 0x3e	; 62
    12b2:	12 96       	adiw	r26, 0x02	; 2
    12b4:	bc 92       	st	X, r11
    12b6:	ae 92       	st	-X, r10
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	6c e3       	ldi	r22, 0x3C	; 60
    12bc:	71 e0       	ldi	r23, 0x01	; 1
    12be:	73 83       	std	Z+3, r23	; 0x03
    12c0:	62 83       	std	Z+2, r22	; 0x02
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	8c 0f       	add	r24, r28
    12c8:	9d 1f       	adc	r25, r29
    12ca:	95 83       	std	Z+5, r25	; 0x05
    12cc:	84 83       	std	Z+4, r24	; 0x04
    12ce:	a3 e0       	ldi	r26, 0x03	; 3
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ac 0f       	add	r26, r28
    12d4:	bd 1f       	adc	r27, r29
    12d6:	b7 83       	std	Z+7, r27	; 0x07
    12d8:	a6 83       	std	Z+6, r26	; 0x06
    12da:	65 e0       	ldi	r22, 0x05	; 5
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	6c 0f       	add	r22, r28
    12e0:	7d 1f       	adc	r23, r29
    12e2:	71 87       	std	Z+9, r23	; 0x09
    12e4:	60 87       	std	Z+8, r22	; 0x08
    12e6:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	ed b7       	in	r30, 0x3d	; 61
    12f4:	fe b7       	in	r31, 0x3e	; 62
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	ad b7       	in	r26, 0x3d	; 61
    12fa:	be b7       	in	r27, 0x3e	; 62
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	8c 92       	st	X, r8
    1300:	11 97       	sbiw	r26, 0x01	; 1
    1302:	12 96       	adiw	r26, 0x02	; 2
    1304:	9c 92       	st	X, r9
    1306:	33 82       	std	Z+3, r3	; 0x03
    1308:	22 82       	std	Z+2, r2	; 0x02
    130a:	f5 82       	std	Z+5, r15	; 0x05
    130c:	e4 82       	std	Z+4, r14	; 0x04
    130e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
	LCDGotoXY(11, 0);
    1312:	6d b7       	in	r22, 0x3d	; 61
    1314:	7e b7       	in	r23, 0x3e	; 62
    1316:	6a 5f       	subi	r22, 0xFA	; 250
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	7e bf       	out	0x3e, r23	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	6d bf       	out	0x3d, r22	; 61
    1324:	8b e0       	ldi	r24, 0x0B	; 11
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
    132c:	c4 01       	movw	r24, r8
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
	LCDstring(buffer,15);
    133c:	c5 01       	movw	r24, r10
    133e:	6f e0       	ldi	r22, 0x0F	; 15
    1340:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
    1344:	49 81       	ldd	r20, Y+1	; 0x01
    1346:	5a 81       	ldd	r21, Y+2	; 0x02
    1348:	7f ef       	ldi	r23, 0xFF	; 255
    134a:	4f 3f       	cpi	r20, 0xFF	; 255
    134c:	57 07       	cpc	r21, r23
    134e:	0c f4       	brge	.+2      	; 0x1352 <get_frame+0x212>
    1350:	5a c0       	rjmp	.+180    	; 0x1406 <get_frame+0x2c6>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	2f 3f       	cpi	r18, 0xFF	; 255
    135a:	38 07       	cpc	r19, r24
    135c:	0c f4       	brge	.+2      	; 0x1360 <get_frame+0x220>
    135e:	53 c0       	rjmp	.+166    	; 0x1406 <get_frame+0x2c6>
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	af ef       	ldi	r26, 0xFF	; 255
    1366:	8f 3f       	cpi	r24, 0xFF	; 255
    1368:	9a 07       	cpc	r25, r26
    136a:	0c f4       	brge	.+2      	; 0x136e <get_frame+0x22e>
    136c:	4c c0       	rjmp	.+152    	; 0x1406 <get_frame+0x2c6>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
    136e:	6d b7       	in	r22, 0x3d	; 61
    1370:	7e b7       	in	r23, 0x3e	; 62
    1372:	6a 50       	subi	r22, 0x0A	; 10
    1374:	70 40       	sbci	r23, 0x00	; 0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	7e bf       	out	0x3e, r23	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	6d bf       	out	0x3d, r22	; 61
    1380:	ed b7       	in	r30, 0x3d	; 61
    1382:	fe b7       	in	r31, 0x3e	; 62
    1384:	31 96       	adiw	r30, 0x01	; 1
    1386:	ad b7       	in	r26, 0x3d	; 61
    1388:	be b7       	in	r27, 0x3e	; 62
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	1c 93       	st	X, r17
    138e:	0e 93       	st	-X, r16
    1390:	11 97       	sbiw	r26, 0x01	; 1
    1392:	73 82       	std	Z+3, r7	; 0x03
    1394:	62 82       	std	Z+2, r6	; 0x02
    1396:	55 83       	std	Z+5, r21	; 0x05
    1398:	44 83       	std	Z+4, r20	; 0x04
    139a:	37 83       	std	Z+7, r19	; 0x07
    139c:	26 83       	std	Z+6, r18	; 0x06
    139e:	91 87       	std	Z+9, r25	; 0x09
    13a0:	80 87       	std	Z+8, r24	; 0x08
    13a2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
		LCDGotoXY(0, 0);
    13a6:	6d b7       	in	r22, 0x3d	; 61
    13a8:	7e b7       	in	r23, 0x3e	; 62
    13aa:	66 5f       	subi	r22, 0xF6	; 246
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	7e bf       	out	0x3e, r23	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	6d bf       	out	0x3d, r22	; 61
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    13c0:	c8 01       	movw	r24, r16
    13c2:	6a e0       	ldi	r22, 0x0A	; 10
    13c4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
		x_vect[i] = x;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	d7 01       	movw	r26, r14
    13ce:	aa 0f       	add	r26, r26
    13d0:	bb 1f       	adc	r27, r27
    13d2:	fd 01       	movw	r30, r26
    13d4:	e5 55       	subi	r30, 0x55	; 85
    13d6:	fc 4f       	sbci	r31, 0xFC	; 252
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
		y_vect[i] = y;
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	fd 01       	movw	r30, r26
    13e2:	ec 50       	subi	r30, 0x0C	; 12
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
		d_vect[i] = d;
    13ea:	8d 81       	ldd	r24, Y+5	; 0x05
    13ec:	9e 81       	ldd	r25, Y+6	; 0x06
    13ee:	a0 53       	subi	r26, 0x30	; 48
    13f0:	bd 4f       	sbci	r27, 0xFD	; 253
    13f2:	11 96       	adiw	r26, 0x01	; 1
    13f4:	9c 93       	st	X, r25
    13f6:	8e 93       	st	-X, r24
		x=-2;
    13f8:	da 82       	std	Y+2, r13	; 0x02
    13fa:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
    13fc:	dc 82       	std	Y+4, r13	; 0x04
    13fe:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
    1400:	de 82       	std	Y+6, r13	; 0x06
    1402:	cd 82       	std	Y+5, r12	; 0x05
    1404:	23 c0       	rjmp	.+70     	; 0x144c <get_frame+0x30c>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
    1406:	00 d0       	rcall	.+0      	; 0x1408 <get_frame+0x2c8>
    1408:	00 d0       	rcall	.+0      	; 0x140a <get_frame+0x2ca>
    140a:	00 d0       	rcall	.+0      	; 0x140c <get_frame+0x2cc>
    140c:	ed b7       	in	r30, 0x3d	; 61
    140e:	fe b7       	in	r31, 0x3e	; 62
    1410:	31 96       	adiw	r30, 0x01	; 1
    1412:	ad b7       	in	r26, 0x3d	; 61
    1414:	be b7       	in	r27, 0x3e	; 62
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	1c 93       	st	X, r17
    141a:	0e 93       	st	-X, r16
    141c:	11 97       	sbiw	r26, 0x01	; 1
    141e:	53 82       	std	Z+3, r5	; 0x03
    1420:	42 82       	std	Z+2, r4	; 0x02
    1422:	f5 82       	std	Z+5, r15	; 0x05
    1424:	e4 82       	std	Z+4, r14	; 0x04
    1426:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
		LCDGotoXY(0, 0);
    142a:	6d b7       	in	r22, 0x3d	; 61
    142c:	7e b7       	in	r23, 0x3e	; 62
    142e:	6a 5f       	subi	r22, 0xFA	; 250
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	7e bf       	out	0x3e, r23	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	6d bf       	out	0x3d, r22	; 61
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1444:	c8 01       	movw	r24, r16
    1446:	6a e0       	ldi	r22, 0x0A	; 10
    1448:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
    144c:	08 94       	sec
    144e:	e1 1c       	adc	r14, r1
    1450:	f1 1c       	adc	r15, r1
    1452:	8f 81       	ldd	r24, Y+7	; 0x07
    1454:	98 85       	ldd	r25, Y+8	; 0x08
    1456:	e8 16       	cp	r14, r24
    1458:	f9 06       	cpc	r15, r25
    145a:	08 f4       	brcc	.+2      	; 0x145e <get_frame+0x31e>
    145c:	03 cf       	rjmp	.-506    	; 0x1264 <get_frame+0x124>
		LCDstring(lcd_buffer, 10);
	}
	//_delay_ms(1000);
  end
	//	_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
    145e:	00 d0       	rcall	.+0      	; 0x1460 <get_frame+0x320>
    1460:	00 d0       	rcall	.+0      	; 0x1462 <get_frame+0x322>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <get_frame+0x324>
    1464:	ed b7       	in	r30, 0x3d	; 61
    1466:	fe b7       	in	r31, 0x3e	; 62
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	0c eb       	ldi	r16, 0xBC	; 188
    146c:	12 e0       	ldi	r17, 0x02	; 2
    146e:	ad b7       	in	r26, 0x3d	; 61
    1470:	be b7       	in	r27, 0x3e	; 62
    1472:	12 96       	adiw	r26, 0x02	; 2
    1474:	1c 93       	st	X, r17
    1476:	0e 93       	st	-X, r16
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	81 e6       	ldi	r24, 0x61	; 97
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	93 83       	std	Z+3, r25	; 0x03
    1480:	82 83       	std	Z+2, r24	; 0x02
    1482:	f5 82       	std	Z+5, r15	; 0x05
    1484:	e4 82       	std	Z+4, r14	; 0x04
    1486:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
		LCDGotoXY(0, 0);
    148a:	6d b7       	in	r22, 0x3d	; 61
    148c:	7e b7       	in	r23, 0x3e	; 62
    148e:	6a 5f       	subi	r22, 0xFA	; 250
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	7e bf       	out	0x3e, r23	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	6d bf       	out	0x3d, r22	; 61
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    14a4:	c8 01       	movw	r24, r16
    14a6:	6a e0       	ldi	r22, 0x0A	; 10
    14a8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
    14ac:	20 91 ab 03 	lds	r18, 0x03AB
    14b0:	30 91 ac 03 	lds	r19, 0x03AC
    14b4:	40 91 ad 03 	lds	r20, 0x03AD
    14b8:	50 91 ae 03 	lds	r21, 0x03AE
    14bc:	60 91 af 03 	lds	r22, 0x03AF
    14c0:	70 91 b0 03 	lds	r23, 0x03B0
    14c4:	e0 90 b1 03 	lds	r14, 0x03B1
    14c8:	f0 90 b2 03 	lds	r15, 0x03B2
    14cc:	8d b7       	in	r24, 0x3d	; 61
    14ce:	9e b7       	in	r25, 0x3e	; 62
    14d0:	0c 97       	sbiw	r24, 0x0c	; 12
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	9e bf       	out	0x3e, r25	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	8d bf       	out	0x3d, r24	; 61
    14dc:	ed b7       	in	r30, 0x3d	; 61
    14de:	fe b7       	in	r31, 0x3e	; 62
    14e0:	31 96       	adiw	r30, 0x01	; 1
    14e2:	ad b7       	in	r26, 0x3d	; 61
    14e4:	be b7       	in	r27, 0x3e	; 62
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	1c 93       	st	X, r17
    14ea:	0e 93       	st	-X, r16
    14ec:	11 97       	sbiw	r26, 0x01	; 1
    14ee:	8d e6       	ldi	r24, 0x6D	; 109
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	93 83       	std	Z+3, r25	; 0x03
    14f4:	82 83       	std	Z+2, r24	; 0x02
    14f6:	35 83       	std	Z+5, r19	; 0x05
    14f8:	24 83       	std	Z+4, r18	; 0x04
    14fa:	57 83       	std	Z+7, r21	; 0x07
    14fc:	46 83       	std	Z+6, r20	; 0x06
    14fe:	71 87       	std	Z+9, r23	; 0x09
    1500:	60 87       	std	Z+8, r22	; 0x08
    1502:	f3 86       	std	Z+11, r15	; 0x0b
    1504:	e2 86       	std	Z+10, r14	; 0x0a
    1506:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
		LCDGotoXY(0, 0);
    150a:	6d b7       	in	r22, 0x3d	; 61
    150c:	7e b7       	in	r23, 0x3e	; 62
    150e:	64 5f       	subi	r22, 0xF4	; 244
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	7e bf       	out	0x3e, r23	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	6d bf       	out	0x3d, r22	; 61
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1524:	c8 01       	movw	r24, r16
    1526:	6a e0       	ldi	r22, 0x0A	; 10
    1528:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
    152c:	20 91 f4 01 	lds	r18, 0x01F4
    1530:	30 91 f5 01 	lds	r19, 0x01F5
    1534:	40 91 f6 01 	lds	r20, 0x01F6
    1538:	50 91 f7 01 	lds	r21, 0x01F7
    153c:	60 91 f8 01 	lds	r22, 0x01F8
    1540:	70 91 f9 01 	lds	r23, 0x01F9
    1544:	e0 90 fa 01 	lds	r14, 0x01FA
    1548:	f0 90 fb 01 	lds	r15, 0x01FB
    154c:	8d b7       	in	r24, 0x3d	; 61
    154e:	9e b7       	in	r25, 0x3e	; 62
    1550:	0c 97       	sbiw	r24, 0x0c	; 12
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	9e bf       	out	0x3e, r25	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	8d bf       	out	0x3d, r24	; 61
    155c:	ed b7       	in	r30, 0x3d	; 61
    155e:	fe b7       	in	r31, 0x3e	; 62
    1560:	31 96       	adiw	r30, 0x01	; 1
    1562:	ad b7       	in	r26, 0x3d	; 61
    1564:	be b7       	in	r27, 0x3e	; 62
    1566:	12 96       	adiw	r26, 0x02	; 2
    1568:	1c 93       	st	X, r17
    156a:	0e 93       	st	-X, r16
    156c:	11 97       	sbiw	r26, 0x01	; 1
    156e:	87 e7       	ldi	r24, 0x77	; 119
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	93 83       	std	Z+3, r25	; 0x03
    1574:	82 83       	std	Z+2, r24	; 0x02
    1576:	35 83       	std	Z+5, r19	; 0x05
    1578:	24 83       	std	Z+4, r18	; 0x04
    157a:	57 83       	std	Z+7, r21	; 0x07
    157c:	46 83       	std	Z+6, r20	; 0x06
    157e:	71 87       	std	Z+9, r23	; 0x09
    1580:	60 87       	std	Z+8, r22	; 0x08
    1582:	f3 86       	std	Z+11, r15	; 0x0b
    1584:	e2 86       	std	Z+10, r14	; 0x0a
    1586:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
		LCDGotoXY(0, 1);
    158a:	6d b7       	in	r22, 0x3d	; 61
    158c:	7e b7       	in	r23, 0x3e	; 62
    158e:	64 5f       	subi	r22, 0xF4	; 244
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	7e bf       	out	0x3e, r23	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	6d bf       	out	0x3d, r22	; 61
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    15a4:	c8 01       	movw	r24, r16
    15a6:	6a e0       	ldi	r22, 0x0A	; 10
    15a8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
    15ac:	20 91 d0 02 	lds	r18, 0x02D0
    15b0:	30 91 d1 02 	lds	r19, 0x02D1
    15b4:	40 91 d2 02 	lds	r20, 0x02D2
    15b8:	50 91 d3 02 	lds	r21, 0x02D3
    15bc:	60 91 d4 02 	lds	r22, 0x02D4
    15c0:	70 91 d5 02 	lds	r23, 0x02D5
    15c4:	e0 90 d6 02 	lds	r14, 0x02D6
    15c8:	f0 90 d7 02 	lds	r15, 0x02D7
    15cc:	8d b7       	in	r24, 0x3d	; 61
    15ce:	9e b7       	in	r25, 0x3e	; 62
    15d0:	0c 97       	sbiw	r24, 0x0c	; 12
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	9e bf       	out	0x3e, r25	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	8d bf       	out	0x3d, r24	; 61
    15dc:	ed b7       	in	r30, 0x3d	; 61
    15de:	fe b7       	in	r31, 0x3e	; 62
    15e0:	31 96       	adiw	r30, 0x01	; 1
    15e2:	ad b7       	in	r26, 0x3d	; 61
    15e4:	be b7       	in	r27, 0x3e	; 62
    15e6:	12 96       	adiw	r26, 0x02	; 2
    15e8:	1c 93       	st	X, r17
    15ea:	0e 93       	st	-X, r16
    15ec:	11 97       	sbiw	r26, 0x01	; 1
    15ee:	81 e8       	ldi	r24, 0x81	; 129
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	93 83       	std	Z+3, r25	; 0x03
    15f4:	82 83       	std	Z+2, r24	; 0x02
    15f6:	35 83       	std	Z+5, r19	; 0x05
    15f8:	24 83       	std	Z+4, r18	; 0x04
    15fa:	57 83       	std	Z+7, r21	; 0x07
    15fc:	46 83       	std	Z+6, r20	; 0x06
    15fe:	71 87       	std	Z+9, r23	; 0x09
    1600:	60 87       	std	Z+8, r22	; 0x08
    1602:	f3 86       	std	Z+11, r15	; 0x0b
    1604:	e2 86       	std	Z+10, r14	; 0x0a
    1606:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sprintf>
		LCDGotoXY(10, 0);
    160a:	6d b7       	in	r22, 0x3d	; 61
    160c:	7e b7       	in	r23, 0x3e	; 62
    160e:	64 5f       	subi	r22, 0xF4	; 244
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	7e bf       	out	0x3e, r23	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	6d bf       	out	0x3d, r22	; 61
    161c:	8a e0       	ldi	r24, 0x0A	; 10
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1624:	c8 01       	movw	r24, r16
    1626:	6a e0       	ldi	r22, 0x0A	; 10
    1628:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <LCDstring>

end
    162c:	69 96       	adiw	r28, 0x19	; 25
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	7f 90       	pop	r7
    1652:	6f 90       	pop	r6
    1654:	5f 90       	pop	r5
    1656:	4f 90       	pop	r4
    1658:	3f 90       	pop	r3
    165a:	2f 90       	pop	r2
    165c:	08 95       	ret

0000165e <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    165e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCDinit>
	LCDcursorOFF();
    1662:	0e 94 b3 0c 	call	0x1966	; 0x1966 <LCDcursorOFF>
	LCDclr();	//clear the display
    1666:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <LCDclr>
	LCDGotoXY(0,0);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    1672:	8c e8       	ldi	r24, 0x8C	; 140
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	0e 94 10 0c 	call	0x1820	; 0x1820 <CopyStringtoLCD>
	LCD_char_count = 0;
    167e:	10 92 cd 02 	sts	0x02CD, r1
end
    1682:	08 95       	ret

00001684 <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
    1684:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
    1686:	8f ee       	ldi	r24, 0xEF	; 239
    1688:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
    168a:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
    168c:	80 e1       	ldi	r24, 0x10	; 16
    168e:	8b b9       	out	0x0b, r24	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
    1690:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
    1694:	ec e7       	ldi	r30, 0x7C	; 124
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
	ADCSRA = 0;
    169a:	aa e7       	ldi	r26, 0x7A	; 122
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
    16a0:	80 e4       	ldi	r24, 0x40	; 64
    16a2:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
    16a4:	87 e8       	ldi	r24, 0x87	; 135
    16a6:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
    16a8:	08 95       	ret

000016aa <main>:
	end
	move_to_XY(700,700,2,0);
end

// --- Main Program ----------------------------------
int main(void) {
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
  
  initialize();
    16ae:	0e 94 42 0b 	call	0x1684	; 0x1684 <initialize>
  stop_all();
    16b2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	LCD_init();
    16b6:	0e 94 2f 0b 	call	0x165e	; 0x165e <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
    16ba:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <uart_init>
  stdout = stdin = stderr = &uart_str;
    16be:	8b e8       	ldi	r24, 0x8B	; 139
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	90 93 78 04 	sts	0x0478, r25
    16c6:	80 93 77 04 	sts	0x0477, r24
    16ca:	90 93 74 04 	sts	0x0474, r25
    16ce:	80 93 73 04 	sts	0x0473, r24
    16d2:	90 93 76 04 	sts	0x0476, r25
    16d6:	80 93 75 04 	sts	0x0475, r24
    16da:	c0 e9       	ldi	r28, 0x90	; 144
    16dc:	d1 e0       	ldi	r29, 0x01	; 1
//while(1) move_positive_y();
  while(1)
  begin
  	move_to_XY(700,700,2,0);
    16de:	8c eb       	ldi	r24, 0xBC	; 188
    16e0:	92 e0       	ldi	r25, 0x02	; 2
    16e2:	6c eb       	ldi	r22, 0xBC	; 188
    16e4:	72 e0       	ldi	r23, 0x02	; 2
    16e6:	42 e0       	ldi	r20, 0x02	; 2
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
	CopyStringtoLCD(LCD_wait1, 0, 0);
    16f0:	82 ec       	ldi	r24, 0xC2	; 194
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	0e 94 10 0c 	call	0x1820	; 0x1820 <CopyStringtoLCD>
	CopyStringtoLCD(LCD_wait2, 0, 1);
    16fc:	84 ed       	ldi	r24, 0xD4	; 212
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 10 0c 	call	0x1820	; 0x1820 <CopyStringtoLCD>
  	while(PIND & 0x10);
    1708:	4c 99       	sbic	0x09, 4	; 9
    170a:	fe cf       	rjmp	.-4      	; 0x1708 <main+0x5e>
    170c:	8c e2       	ldi	r24, 0x2C	; 44
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	fe 01       	movw	r30, r28
    1712:	31 97       	sbiw	r30, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1718:	d9 f7       	brne	.-10     	; 0x1710 <main+0x66>
	_delay_ms(30);
	if(!(PIND&0x10))
    171a:	4c 99       	sbic	0x09, 4	; 9
    171c:	e0 cf       	rjmp	.-64     	; 0x16de <main+0x34>
	begin
		CopyStringtoLCD(LCD_df1, 0, 0);
    171e:	88 ef       	ldi	r24, 0xF8	; 248
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	0e 94 10 0c 	call	0x1820	; 0x1820 <CopyStringtoLCD>
		CopyStringtoLCD(LCD_df2, 0, 1);
    172a:	8a e0       	ldi	r24, 0x0A	; 10
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	0e 94 10 0c 	call	0x1820	; 0x1820 <CopyStringtoLCD>
	  	get_frame();
    1736:	0e 94 a0 08 	call	0x1140	; 0x1140 <get_frame>
		CopyStringtoLCD(LCD_printing, 0, 0);
    173a:	86 ee       	ldi	r24, 0xE6	; 230
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 10 0c 	call	0x1820	; 0x1820 <CopyStringtoLCD>
		move_motor();
    1746:	0e 94 b2 07 	call	0xf64	; 0xf64 <move_motor>
    174a:	c9 cf       	rjmp	.-110    	; 0x16de <main+0x34>

0000174c <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    174c:	28 2f       	mov	r18, r24
    174e:	20 7f       	andi	r18, 0xF0	; 240
    1750:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1752:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1754:	42 9a       	sbi	0x08, 2	; 8
    1756:	20 e4       	ldi	r18, 0x40	; 64
    1758:	3f e1       	ldi	r19, 0x1F	; 31
    175a:	f9 01       	movw	r30, r18
    175c:	31 97       	sbiw	r30, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1760:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1762:	40 98       	cbi	0x08, 0	; 8
    1764:	f9 01       	movw	r30, r18
    1766:	31 97       	sbiw	r30, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	44 e0       	ldi	r20, 0x04	; 4
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	4a 95       	dec	r20
    1774:	e1 f7       	brne	.-8      	; 0x176e <LCDsendChar+0x22>
    1776:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1778:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    177a:	42 9a       	sbi	0x08, 2	; 8
    177c:	c9 01       	movw	r24, r18
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1782:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1784:	40 98       	cbi	0x08, 0	; 8
    1786:	c9 01       	movw	r24, r18
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    178c:	08 95       	ret

0000178e <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    178e:	28 2f       	mov	r18, r24
    1790:	20 7f       	andi	r18, 0xF0	; 240
    1792:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    1794:	42 9a       	sbi	0x08, 2	; 8
    1796:	20 e4       	ldi	r18, 0x40	; 64
    1798:	3f e1       	ldi	r19, 0x1F	; 31
    179a:	f9 01       	movw	r30, r18
    179c:	31 97       	sbiw	r30, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    17a0:	42 98       	cbi	0x08, 2	; 8
    17a2:	f9 01       	movw	r30, r18
    17a4:	31 97       	sbiw	r30, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	54 e0       	ldi	r21, 0x04	; 4
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	5a 95       	dec	r21
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <LCDsendCommand+0x1e>
    17b4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    17b6:	42 9a       	sbi	0x08, 2	; 8
    17b8:	c9 01       	movw	r24, r18
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    17be:	42 98       	cbi	0x08, 2	; 8
    17c0:	c9 01       	movw	r24, r18
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    17c6:	08 95       	ret

000017c8 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    17ce:	08 95       	ret

000017d0 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    17d6:	08 95       	ret

000017d8 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	49 f0       	breq	.+18     	; 0x17f8 <LCDstring+0x20>
    17e6:	ec 01       	movw	r28, r24
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    17ec:	89 91       	ld	r24, Y+
    17ee:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    17f2:	1f 5f       	subi	r17, 0xFF	; 255
    17f4:	10 17       	cp	r17, r16
    17f6:	d0 f3       	brcs	.-12     	; 0x17ec <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1802:	62 30       	cpi	r22, 0x02	; 2
    1804:	31 f0       	breq	.+12     	; 0x1812 <LCDGotoXY+0x10>
    1806:	63 30       	cpi	r22, 0x03	; 3
    1808:	31 f0       	breq	.+12     	; 0x1816 <LCDGotoXY+0x14>
    180a:	61 30       	cpi	r22, 0x01	; 1
    180c:	29 f4       	brne	.+10     	; 0x1818 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    180e:	80 5c       	subi	r24, 0xC0	; 192
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1812:	8c 5e       	subi	r24, 0xEC	; 236
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1816:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1818:	80 68       	ori	r24, 0x80	; 128
    181a:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
	
}
    181e:	08 95       	ret

00001820 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	ec 01       	movw	r28, r24
    1828:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    182a:	64 2f       	mov	r22, r20
    182c:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCDGotoXY>
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	03 c0       	rjmp	.+6      	; 0x183a <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1834:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1838:	1f 5f       	subi	r17, 0xFF	; 255
    183a:	fe 01       	movw	r30, r28
    183c:	e1 0f       	add	r30, r17
    183e:	f1 1d       	adc	r31, r1
    1840:	84 91       	lpm	r24, Z+
    1842:	88 23       	and	r24, r24
    1844:	b9 f7       	brne	.-18     	; 0x1834 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	08 95       	ret

0000184e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	7c 01       	movw	r14, r24
    185c:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    185e:	11 0f       	add	r17, r17
    1860:	11 0f       	add	r17, r17
    1862:	11 0f       	add	r17, r17
    1864:	10 64       	ori	r17, 0x40	; 64
    1866:	c0 e0       	ldi	r28, 0x00	; 0
    1868:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    186a:	f7 01       	movw	r30, r14
    186c:	ec 0f       	add	r30, r28
    186e:	fd 1f       	adc	r31, r29
    1870:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1872:	81 2f       	mov	r24, r17
    1874:	8c 0f       	add	r24, r28
    1876:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
		LCDsendChar(pcc);
    187a:	80 2f       	mov	r24, r16
    187c:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1880:	21 96       	adiw	r28, 0x01	; 1
    1882:	c8 30       	cpi	r28, 0x08	; 8
    1884:	d1 05       	cpc	r29, r1
    1886:	89 f7       	brne	.-30     	; 0x186a <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	08 95       	ret

00001896 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	80 e6       	ldi	r24, 0x60	; 96
    189e:	9a ee       	ldi	r25, 0xEA	; 234
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    18a4:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    18a6:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    18a8:	87 b1       	in	r24, 0x07	; 7
    18aa:	80 6f       	ori	r24, 0xF0	; 240
    18ac:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    18ae:	87 b1       	in	r24, 0x07	; 7
    18b0:	87 60       	ori	r24, 0x07	; 7
    18b2:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    18b4:	80 e3       	ldi	r24, 0x30	; 48
    18b6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18b8:	42 9a       	sbi	0x08, 2	; 8
    18ba:	20 e4       	ldi	r18, 0x40	; 64
    18bc:	3f e1       	ldi	r19, 0x1F	; 31
    18be:	f9 01       	movw	r30, r18
    18c0:	31 97       	sbiw	r30, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    18c4:	42 98       	cbi	0x08, 2	; 8
    18c6:	f9 01       	movw	r30, r18
    18c8:	31 97       	sbiw	r30, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    18cc:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18ce:	42 9a       	sbi	0x08, 2	; 8
    18d0:	c9 01       	movw	r24, r18
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    18d6:	42 98       	cbi	0x08, 2	; 8
    18d8:	c9 01       	movw	r24, r18
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18e2:	42 9a       	sbi	0x08, 2	; 8
    18e4:	c9 01       	movw	r24, r18
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    18ea:	42 98       	cbi	0x08, 2	; 8
    18ec:	c9 01       	movw	r24, r18
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    18f2:	88 e2       	ldi	r24, 0x28	; 40
    18f4:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    18f8:	8c e0       	ldi	r24, 0x0C	; 12
    18fa:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
    18fe:	cc e1       	ldi	r28, 0x1C	; 28
    1900:	d1 e0       	ldi	r29, 0x01	; 1
    1902:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1904:	16 2f       	mov	r17, r22
    1906:	1f 5f       	subi	r17, 0xFF	; 255
    1908:	ce 01       	movw	r24, r28
    190a:	0e 94 27 0c 	call	0x184e	; 0x184e <LCDdefinechar>
    190e:	28 96       	adiw	r28, 0x08	; 8
    1910:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1912:	18 30       	cpi	r17, 0x08	; 8
    1914:	b9 f7       	brne	.-18     	; 0x1904 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	08 95       	ret

0000191e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	08 2f       	mov	r16, r24
    1924:	10 e0       	ldi	r17, 0x00	; 0
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1928:	8e e1       	ldi	r24, 0x1E	; 30
    192a:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    192e:	1f 5f       	subi	r17, 0xFF	; 255
    1930:	10 17       	cp	r17, r16
    1932:	d0 f3       	brcs	.-12     	; 0x1928 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	08 2f       	mov	r16, r24
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	04 c0       	rjmp	.+8      	; 0x194c <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1944:	88 e1       	ldi	r24, 0x18	; 24
    1946:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    194a:	1f 5f       	subi	r17, 0xFF	; 255
    194c:	10 17       	cp	r17, r16
    194e:	d0 f3       	brcs	.-12     	; 0x1944 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1956:	8e e0       	ldi	r24, 0x0E	; 14
    1958:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    195c:	08 95       	ret

0000195e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    195e:	8f e0       	ldi	r24, 0x0F	; 15
    1960:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    1964:	08 95       	ret

00001966 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1966:	8c e0       	ldi	r24, 0x0C	; 12
    1968:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    196c:	08 95       	ret

0000196e <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    196e:	88 e0       	ldi	r24, 0x08	; 8
    1970:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    1974:	08 95       	ret

00001976 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1976:	8c e0       	ldi	r24, 0x0C	; 12
    1978:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
}
    197c:	08 95       	ret

0000197e <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	08 2f       	mov	r16, r24
    1984:	10 e0       	ldi	r17, 0x00	; 0
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1988:	80 e1       	ldi	r24, 0x10	; 16
    198a:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    198e:	1f 5f       	subi	r17, 0xFF	; 255
    1990:	10 17       	cp	r17, r16
    1992:	d0 f3       	brcs	.-12     	; 0x1988 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	08 2f       	mov	r16, r24
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    19a4:	84 e1       	ldi	r24, 0x14	; 20
    19a6:	0e 94 c7 0b 	call	0x178e	; 0x178e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    19aa:	1f 5f       	subi	r17, 0xFF	; 255
    19ac:	10 17       	cp	r17, r16
    19ae:	d0 f3       	brcs	.-12     	; 0x19a4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	08 95       	ret

000019b6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    19c6:	96 e0       	ldi	r25, 0x06	; 6
    19c8:	89 9f       	mul	r24, r25
    19ca:	c0 01       	movw	r24, r0
    19cc:	11 24       	eor	r1, r1
    19ce:	24 2f       	mov	r18, r20
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	ac 01       	movw	r20, r24
    19d4:	42 9f       	mul	r20, r18
    19d6:	c0 01       	movw	r24, r0
    19d8:	43 9f       	mul	r20, r19
    19da:	90 0d       	add	r25, r0
    19dc:	52 9f       	mul	r21, r18
    19de:	90 0d       	add	r25, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <__divmodhi4>
    19e8:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    19ea:	cb 01       	movw	r24, r22
    19ec:	66 e0       	ldi	r22, 0x06	; 6
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__udivmodhi4>
    19f4:	e8 2e       	mov	r14, r24
    19f6:	ff 24       	eor	r15, r15
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	12 c0       	rjmp	.+36     	; 0x1a22 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    19fe:	c8 01       	movw	r24, r16
    1a00:	05 96       	adiw	r24, 0x05	; 5
    1a02:	c8 17       	cp	r28, r24
    1a04:	d9 07       	cpc	r29, r25
    1a06:	10 f0       	brcs	.+4      	; 0x1a0c <LCDprogressBar+0x56>
    1a08:	85 e0       	ldi	r24, 0x05	; 5
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1a0c:	c0 17       	cp	r28, r16
    1a0e:	d1 07       	cpc	r29, r17
    1a10:	10 f0       	brcs	.+4      	; 0x1a16 <LCDprogressBar+0x60>
    1a12:	8e 2d       	mov	r24, r14
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <LCDprogressBar+0x62>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1a18:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1a1c:	f3 94       	inc	r15
    1a1e:	0a 5f       	subi	r16, 0xFA	; 250
    1a20:	1f 4f       	sbci	r17, 0xFF	; 255
    1a22:	fd 14       	cp	r15, r13
    1a24:	60 f3       	brcs	.-40     	; 0x19fe <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	08 95       	ret

00001a36 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1a36:	87 e6       	ldi	r24, 0x67	; 103
    1a38:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1a3c:	88 e1       	ldi	r24, 0x18	; 24
    1a3e:	80 93 c1 00 	sts	0x00C1, r24
}
    1a42:	08 95       	ret

00001a44 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1a44:	1f 93       	push	r17
    1a46:	18 2f       	mov	r17, r24

  if (c == '\a')
    1a48:	87 30       	cpi	r24, 0x07	; 7
    1a4a:	49 f4       	brne	.+18     	; 0x1a5e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1a4c:	60 91 77 04 	lds	r22, 0x0477
    1a50:	70 91 78 04 	lds	r23, 0x0478
    1a54:	89 e9       	ldi	r24, 0x99	; 153
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <fputs>
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1a5e:	8a 30       	cpi	r24, 0x0A	; 10
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1a62:	8d e0       	ldi	r24, 0x0D	; 13
    1a64:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1a68:	80 91 c0 00 	lds	r24, 0x00C0
    1a6c:	85 ff       	sbrs	r24, 5
    1a6e:	fc cf       	rjmp	.-8      	; 0x1a68 <uart_putchar+0x24>
  UDR0 = c;
    1a70:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	1f 91       	pop	r17
    1a7a:	08 95       	ret

00001a7c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1a8a:	80 91 a2 01 	lds	r24, 0x01A2
    1a8e:	90 91 a3 01 	lds	r25, 0x01A3
    1a92:	89 2b       	or	r24, r25
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <uart_getchar+0x1c>
    1a96:	9f c0       	rjmp	.+318    	; 0x1bd6 <uart_getchar+0x15a>
    1a98:	04 ea       	ldi	r16, 0xA4	; 164
    1a9a:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1a9c:	80 91 c0 00 	lds	r24, 0x00C0
    1aa0:	87 ff       	sbrs	r24, 7
    1aa2:	fc cf       	rjmp	.-8      	; 0x1a9c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    1aa4:	80 91 c0 00 	lds	r24, 0x00C0
    1aa8:	84 ff       	sbrs	r24, 4
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <uart_getchar+0x36>
    1aac:	2e ef       	ldi	r18, 0xFE	; 254
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	a6 c0       	rjmp	.+332    	; 0x1bfe <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    1ab2:	80 91 c0 00 	lds	r24, 0x00C0
    1ab6:	83 fd       	sbrc	r24, 3
    1ab8:	a0 c0       	rjmp	.+320    	; 0x1bfa <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    1aba:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1abe:	9d 30       	cpi	r25, 0x0D	; 13
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1ac2:	9a 30       	cpi	r25, 0x0A	; 10
    1ac4:	69 f4       	brne	.+26     	; 0x1ae0 <uart_getchar+0x64>
	  {
	    *cp = c;
    1ac6:	8a e0       	ldi	r24, 0x0A	; 10
    1ac8:	f8 01       	movw	r30, r16
    1aca:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    1acc:	b7 01       	movw	r22, r14
    1ace:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
	    rxp = b;
    1ad2:	84 ea       	ldi	r24, 0xA4	; 164
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	90 93 a3 01 	sts	0x01A3, r25
    1ada:	80 93 a2 01 	sts	0x01A2, r24
    1ade:	7b c0       	rjmp	.+246    	; 0x1bd6 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1ae0:	99 30       	cpi	r25, 0x09	; 9
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <uart_getchar+0x6a>
    1ae4:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    1ae6:	89 2f       	mov	r24, r25
    1ae8:	80 52       	subi	r24, 0x20	; 32
    1aea:	8f 35       	cpi	r24, 0x5F	; 95
    1aec:	10 f0       	brcs	.+4      	; 0x1af2 <uart_getchar+0x76>
    1aee:	90 3a       	cpi	r25, 0xA0	; 160
    1af0:	70 f0       	brcs	.+28     	; 0x1b0e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1af2:	f1 e0       	ldi	r31, 0x01	; 1
    1af4:	03 3f       	cpi	r16, 0xF3	; 243
    1af6:	1f 07       	cpc	r17, r31
    1af8:	11 f4       	brne	.+4      	; 0x1afe <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1afe:	f8 01       	movw	r30, r16
    1b00:	91 93       	st	Z+, r25
    1b02:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1b04:	89 2f       	mov	r24, r25
    1b06:	b7 01       	movw	r22, r14
    1b08:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
    1b0c:	c7 cf       	rjmp	.-114    	; 0x1a9c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    1b0e:	92 31       	cpi	r25, 0x12	; 18
    1b10:	39 f1       	breq	.+78     	; 0x1b60 <uart_getchar+0xe4>
    1b12:	93 31       	cpi	r25, 0x13	; 19
    1b14:	38 f4       	brcc	.+14     	; 0x1b24 <uart_getchar+0xa8>
    1b16:	93 30       	cpi	r25, 0x03	; 3
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <uart_getchar+0xa0>
    1b1a:	6f c0       	rjmp	.+222    	; 0x1bfa <uart_getchar+0x17e>
    1b1c:	98 30       	cpi	r25, 0x08	; 8
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <uart_getchar+0xa6>
    1b20:	bd cf       	rjmp	.-134    	; 0x1a9c <uart_getchar+0x20>
    1b22:	09 c0       	rjmp	.+18     	; 0x1b36 <uart_getchar+0xba>
    1b24:	97 31       	cpi	r25, 0x17	; 23
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <uart_getchar+0xae>
    1b28:	4b c0       	rjmp	.+150    	; 0x1bc0 <uart_getchar+0x144>
    1b2a:	9f 37       	cpi	r25, 0x7F	; 127
    1b2c:	21 f0       	breq	.+8      	; 0x1b36 <uart_getchar+0xba>
    1b2e:	95 31       	cpi	r25, 0x15	; 21
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <uart_getchar+0xb8>
    1b32:	b4 cf       	rjmp	.-152    	; 0x1a9c <uart_getchar+0x20>
    1b34:	32 c0       	rjmp	.+100    	; 0x1b9a <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1b36:	f1 e0       	ldi	r31, 0x01	; 1
    1b38:	04 3a       	cpi	r16, 0xA4	; 164
    1b3a:	1f 07       	cpc	r17, r31
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <uart_getchar+0xc4>
    1b3e:	08 f4       	brcc	.+2      	; 0x1b42 <uart_getchar+0xc6>
    1b40:	ad cf       	rjmp	.-166    	; 0x1a9c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1b42:	88 e0       	ldi	r24, 0x08	; 8
    1b44:	b7 01       	movw	r22, r14
    1b46:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		uart_putchar(' ', stream);
    1b4a:	80 e2       	ldi	r24, 0x20	; 32
    1b4c:	b7 01       	movw	r22, r14
    1b4e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		uart_putchar('\b', stream);
    1b52:	88 e0       	ldi	r24, 0x08	; 8
    1b54:	b7 01       	movw	r22, r14
    1b56:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		cp--;
    1b5a:	01 50       	subi	r16, 0x01	; 1
    1b5c:	10 40       	sbci	r17, 0x00	; 0
    1b5e:	9e cf       	rjmp	.-196    	; 0x1a9c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1b60:	8d e0       	ldi	r24, 0x0D	; 13
    1b62:	b7 01       	movw	r22, r14
    1b64:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
    1b68:	c4 ea       	ldi	r28, 0xA4	; 164
    1b6a:	d1 e0       	ldi	r29, 0x01	; 1
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1b6e:	89 91       	ld	r24, Y+
    1b70:	b7 01       	movw	r22, r14
    1b72:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1b76:	c0 17       	cp	r28, r16
    1b78:	d1 07       	cpc	r29, r17
    1b7a:	c8 f3       	brcs	.-14     	; 0x1b6e <uart_getchar+0xf2>
    1b7c:	8f cf       	rjmp	.-226    	; 0x1a9c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1b7e:	88 e0       	ldi	r24, 0x08	; 8
    1b80:	b7 01       	movw	r22, r14
    1b82:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		uart_putchar(' ', stream);
    1b86:	80 e2       	ldi	r24, 0x20	; 32
    1b88:	b7 01       	movw	r22, r14
    1b8a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		uart_putchar('\b', stream);
    1b8e:	88 e0       	ldi	r24, 0x08	; 8
    1b90:	b7 01       	movw	r22, r14
    1b92:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		cp--;
    1b96:	01 50       	subi	r16, 0x01	; 1
    1b98:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	04 3a       	cpi	r16, 0xA4	; 164
    1b9e:	18 07       	cpc	r17, r24
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <uart_getchar+0x128>
    1ba2:	68 f7       	brcc	.-38     	; 0x1b7e <uart_getchar+0x102>
    1ba4:	7b cf       	rjmp	.-266    	; 0x1a9c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1ba6:	88 e0       	ldi	r24, 0x08	; 8
    1ba8:	b7 01       	movw	r22, r14
    1baa:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		uart_putchar(' ', stream);
    1bae:	80 e2       	ldi	r24, 0x20	; 32
    1bb0:	b7 01       	movw	r22, r14
    1bb2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
		uart_putchar('\b', stream);
    1bb6:	88 e0       	ldi	r24, 0x08	; 8
    1bb8:	b7 01       	movw	r22, r14
    1bba:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <uart_putchar>
    1bbe:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1bc0:	e1 e0       	ldi	r30, 0x01	; 1
    1bc2:	04 3a       	cpi	r16, 0xA4	; 164
    1bc4:	1e 07       	cpc	r17, r30
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <uart_getchar+0x14e>
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <uart_getchar+0x150>
    1bca:	68 cf       	rjmp	.-304    	; 0x1a9c <uart_getchar+0x20>
    1bcc:	e8 01       	movw	r28, r16
    1bce:	8a 91       	ld	r24, -Y
    1bd0:	80 32       	cpi	r24, 0x20	; 32
    1bd2:	49 f7       	brne	.-46     	; 0x1ba6 <uart_getchar+0x12a>
    1bd4:	63 cf       	rjmp	.-314    	; 0x1a9c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1bd6:	e0 91 a2 01 	lds	r30, 0x01A2
    1bda:	f0 91 a3 01 	lds	r31, 0x01A3
    1bde:	81 91       	ld	r24, Z+
    1be0:	f0 93 a3 01 	sts	0x01A3, r31
    1be4:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    1be8:	8a 30       	cpi	r24, 0x0A	; 10
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <uart_getchar+0x178>
    rxp = 0;
    1bec:	10 92 a3 01 	sts	0x01A3, r1
    1bf0:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <uart_getchar+0x182>
    1bfa:	2f ef       	ldi	r18, 0xFF	; 255
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
}
    1bfe:	c9 01       	movw	r24, r18
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	ff 90       	pop	r15
    1c0a:	ef 90       	pop	r14
    1c0c:	08 95       	ret

00001c0e <__udivmodhi4>:
    1c0e:	aa 1b       	sub	r26, r26
    1c10:	bb 1b       	sub	r27, r27
    1c12:	51 e1       	ldi	r21, 0x11	; 17
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <__udivmodhi4_ep>

00001c16 <__udivmodhi4_loop>:
    1c16:	aa 1f       	adc	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	a6 17       	cp	r26, r22
    1c1c:	b7 07       	cpc	r27, r23
    1c1e:	10 f0       	brcs	.+4      	; 0x1c24 <__udivmodhi4_ep>
    1c20:	a6 1b       	sub	r26, r22
    1c22:	b7 0b       	sbc	r27, r23

00001c24 <__udivmodhi4_ep>:
    1c24:	88 1f       	adc	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	5a 95       	dec	r21
    1c2a:	a9 f7       	brne	.-22     	; 0x1c16 <__udivmodhi4_loop>
    1c2c:	80 95       	com	r24
    1c2e:	90 95       	com	r25
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	08 95       	ret

00001c36 <__divmodhi4>:
    1c36:	97 fb       	bst	r25, 7
    1c38:	09 2e       	mov	r0, r25
    1c3a:	07 26       	eor	r0, r23
    1c3c:	0a d0       	rcall	.+20     	; 0x1c52 <__divmodhi4_neg1>
    1c3e:	77 fd       	sbrc	r23, 7
    1c40:	04 d0       	rcall	.+8      	; 0x1c4a <__divmodhi4_neg2>
    1c42:	e5 df       	rcall	.-54     	; 0x1c0e <__udivmodhi4>
    1c44:	06 d0       	rcall	.+12     	; 0x1c52 <__divmodhi4_neg1>
    1c46:	00 20       	and	r0, r0
    1c48:	1a f4       	brpl	.+6      	; 0x1c50 <__divmodhi4_exit>

00001c4a <__divmodhi4_neg2>:
    1c4a:	70 95       	com	r23
    1c4c:	61 95       	neg	r22
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255

00001c50 <__divmodhi4_exit>:
    1c50:	08 95       	ret

00001c52 <__divmodhi4_neg1>:
    1c52:	f6 f7       	brtc	.-4      	; 0x1c50 <__divmodhi4_exit>
    1c54:	90 95       	com	r25
    1c56:	81 95       	neg	r24
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	08 95       	ret

00001c5c <strcpy>:
    1c5c:	fb 01       	movw	r30, r22
    1c5e:	dc 01       	movw	r26, r24
    1c60:	01 90       	ld	r0, Z+
    1c62:	0d 92       	st	X+, r0
    1c64:	00 20       	and	r0, r0
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <strcpy+0x4>
    1c68:	08 95       	ret

00001c6a <fputs>:
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	7c 01       	movw	r14, r24
    1c78:	8b 01       	movw	r16, r22
    1c7a:	db 01       	movw	r26, r22
    1c7c:	13 96       	adiw	r26, 0x03	; 3
    1c7e:	8c 91       	ld	r24, X
    1c80:	81 fd       	sbrc	r24, 1
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <fputs+0x20>
    1c84:	cf ef       	ldi	r28, 0xFF	; 255
    1c86:	df ef       	ldi	r29, 0xFF	; 255
    1c88:	13 c0       	rjmp	.+38     	; 0x1cb0 <fputs+0x46>
    1c8a:	c0 e0       	ldi	r28, 0x00	; 0
    1c8c:	d0 e0       	ldi	r29, 0x00	; 0
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <fputs+0x3c>
    1c90:	d8 01       	movw	r26, r16
    1c92:	18 96       	adiw	r26, 0x08	; 8
    1c94:	ed 91       	ld	r30, X+
    1c96:	fc 91       	ld	r31, X
    1c98:	19 97       	sbiw	r26, 0x09	; 9
    1c9a:	b8 01       	movw	r22, r16
    1c9c:	09 95       	icall
    1c9e:	89 2b       	or	r24, r25
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <fputs+0x3c>
    1ca2:	cf ef       	ldi	r28, 0xFF	; 255
    1ca4:	df ef       	ldi	r29, 0xFF	; 255
    1ca6:	f7 01       	movw	r30, r14
    1ca8:	81 91       	ld	r24, Z+
    1caa:	7f 01       	movw	r14, r30
    1cac:	88 23       	and	r24, r24
    1cae:	81 f7       	brne	.-32     	; 0x1c90 <fputs+0x26>
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	08 95       	ret

00001cc0 <fscanf>:
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	9e 01       	movw	r18, r28
    1cca:	27 5f       	subi	r18, 0xF7	; 247
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <vfscanf>
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <sprintf>:
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	0d 89       	ldd	r16, Y+21	; 0x15
    1cfc:	1e 89       	ldd	r17, Y+22	; 0x16
    1cfe:	86 e0       	ldi	r24, 0x06	; 6
    1d00:	8c 83       	std	Y+4, r24	; 0x04
    1d02:	1a 83       	std	Y+2, r17	; 0x02
    1d04:	09 83       	std	Y+1, r16	; 0x01
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	9f e7       	ldi	r25, 0x7F	; 127
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
    1d0e:	9e 01       	movw	r18, r28
    1d10:	27 5e       	subi	r18, 0xE7	; 231
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	ce 01       	movw	r24, r28
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	6f 89       	ldd	r22, Y+23	; 0x17
    1d1a:	78 8d       	ldd	r23, Y+24	; 0x18
    1d1c:	a9 01       	movw	r20, r18
    1d1e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vfprintf>
    1d22:	2f 81       	ldd	r18, Y+7	; 0x07
    1d24:	38 85       	ldd	r19, Y+8	; 0x08
    1d26:	02 0f       	add	r16, r18
    1d28:	13 1f       	adc	r17, r19
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	10 82       	st	Z, r1
    1d2e:	2e 96       	adiw	r28, 0x0e	; 14
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	08 95       	ret

00001d44 <sscanf>:
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	85 e0       	ldi	r24, 0x05	; 5
    1d5a:	8c 83       	std	Y+4, r24	; 0x04
    1d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	9e 01       	movw	r18, r28
    1d66:	29 5e       	subi	r18, 0xE9	; 233
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d70:	7e 89       	ldd	r23, Y+22	; 0x16
    1d72:	a9 01       	movw	r20, r18
    1d74:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <vfscanf>
    1d78:	2e 96       	adiw	r28, 0x0e	; 14
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <vfprintf>:
    1d8a:	2f 92       	push	r2
    1d8c:	3f 92       	push	r3
    1d8e:	4f 92       	push	r4
    1d90:	5f 92       	push	r5
    1d92:	6f 92       	push	r6
    1d94:	7f 92       	push	r7
    1d96:	8f 92       	push	r8
    1d98:	9f 92       	push	r9
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	2b 97       	sbiw	r28, 0x0b	; 11
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	3c 01       	movw	r6, r24
    1dc0:	2b 01       	movw	r4, r22
    1dc2:	5a 01       	movw	r10, r20
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	17 82       	std	Z+7, r1	; 0x07
    1dc8:	16 82       	std	Z+6, r1	; 0x06
    1dca:	83 81       	ldd	r24, Z+3	; 0x03
    1dcc:	81 fd       	sbrc	r24, 1
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <vfprintf+0x4c>
    1dd0:	6f ef       	ldi	r22, 0xFF	; 255
    1dd2:	7f ef       	ldi	r23, 0xFF	; 255
    1dd4:	c6 c1       	rjmp	.+908    	; 0x2162 <vfprintf+0x3d8>
    1dd6:	9a e0       	ldi	r25, 0x0A	; 10
    1dd8:	89 2e       	mov	r8, r25
    1dda:	1e 01       	movw	r2, r28
    1ddc:	08 94       	sec
    1dde:	21 1c       	adc	r2, r1
    1de0:	31 1c       	adc	r3, r1
    1de2:	f3 01       	movw	r30, r6
    1de4:	23 81       	ldd	r18, Z+3	; 0x03
    1de6:	f2 01       	movw	r30, r4
    1de8:	23 fd       	sbrc	r18, 3
    1dea:	85 91       	lpm	r24, Z+
    1dec:	23 ff       	sbrs	r18, 3
    1dee:	81 91       	ld	r24, Z+
    1df0:	2f 01       	movw	r4, r30
    1df2:	88 23       	and	r24, r24
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <vfprintf+0x6e>
    1df6:	b2 c1       	rjmp	.+868    	; 0x215c <vfprintf+0x3d2>
    1df8:	85 32       	cpi	r24, 0x25	; 37
    1dfa:	39 f4       	brne	.+14     	; 0x1e0a <vfprintf+0x80>
    1dfc:	23 fd       	sbrc	r18, 3
    1dfe:	85 91       	lpm	r24, Z+
    1e00:	23 ff       	sbrs	r18, 3
    1e02:	81 91       	ld	r24, Z+
    1e04:	2f 01       	movw	r4, r30
    1e06:	85 32       	cpi	r24, 0x25	; 37
    1e08:	29 f4       	brne	.+10     	; 0x1e14 <vfprintf+0x8a>
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	b3 01       	movw	r22, r6
    1e0e:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1e12:	e7 cf       	rjmp	.-50     	; 0x1de2 <vfprintf+0x58>
    1e14:	98 2f       	mov	r25, r24
    1e16:	ff 24       	eor	r15, r15
    1e18:	ee 24       	eor	r14, r14
    1e1a:	99 24       	eor	r9, r9
    1e1c:	ff e1       	ldi	r31, 0x1F	; 31
    1e1e:	ff 15       	cp	r31, r15
    1e20:	d0 f0       	brcs	.+52     	; 0x1e56 <vfprintf+0xcc>
    1e22:	9b 32       	cpi	r25, 0x2B	; 43
    1e24:	69 f0       	breq	.+26     	; 0x1e40 <vfprintf+0xb6>
    1e26:	9c 32       	cpi	r25, 0x2C	; 44
    1e28:	28 f4       	brcc	.+10     	; 0x1e34 <vfprintf+0xaa>
    1e2a:	90 32       	cpi	r25, 0x20	; 32
    1e2c:	59 f0       	breq	.+22     	; 0x1e44 <vfprintf+0xba>
    1e2e:	93 32       	cpi	r25, 0x23	; 35
    1e30:	91 f4       	brne	.+36     	; 0x1e56 <vfprintf+0xcc>
    1e32:	0e c0       	rjmp	.+28     	; 0x1e50 <vfprintf+0xc6>
    1e34:	9d 32       	cpi	r25, 0x2D	; 45
    1e36:	49 f0       	breq	.+18     	; 0x1e4a <vfprintf+0xc0>
    1e38:	90 33       	cpi	r25, 0x30	; 48
    1e3a:	69 f4       	brne	.+26     	; 0x1e56 <vfprintf+0xcc>
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	24 c0       	rjmp	.+72     	; 0x1e88 <vfprintf+0xfe>
    1e40:	52 e0       	ldi	r21, 0x02	; 2
    1e42:	f5 2a       	or	r15, r21
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	f8 2a       	or	r15, r24
    1e48:	28 c0       	rjmp	.+80     	; 0x1e9a <vfprintf+0x110>
    1e4a:	98 e0       	ldi	r25, 0x08	; 8
    1e4c:	f9 2a       	or	r15, r25
    1e4e:	25 c0       	rjmp	.+74     	; 0x1e9a <vfprintf+0x110>
    1e50:	e0 e1       	ldi	r30, 0x10	; 16
    1e52:	fe 2a       	or	r15, r30
    1e54:	22 c0       	rjmp	.+68     	; 0x1e9a <vfprintf+0x110>
    1e56:	f7 fc       	sbrc	r15, 7
    1e58:	29 c0       	rjmp	.+82     	; 0x1eac <vfprintf+0x122>
    1e5a:	89 2f       	mov	r24, r25
    1e5c:	80 53       	subi	r24, 0x30	; 48
    1e5e:	8a 30       	cpi	r24, 0x0A	; 10
    1e60:	70 f4       	brcc	.+28     	; 0x1e7e <vfprintf+0xf4>
    1e62:	f6 fe       	sbrs	r15, 6
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <vfprintf+0xe6>
    1e66:	98 9c       	mul	r9, r8
    1e68:	90 2c       	mov	r9, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	98 0e       	add	r9, r24
    1e6e:	15 c0       	rjmp	.+42     	; 0x1e9a <vfprintf+0x110>
    1e70:	e8 9c       	mul	r14, r8
    1e72:	e0 2c       	mov	r14, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	e8 0e       	add	r14, r24
    1e78:	f0 e2       	ldi	r31, 0x20	; 32
    1e7a:	ff 2a       	or	r15, r31
    1e7c:	0e c0       	rjmp	.+28     	; 0x1e9a <vfprintf+0x110>
    1e7e:	9e 32       	cpi	r25, 0x2E	; 46
    1e80:	29 f4       	brne	.+10     	; 0x1e8c <vfprintf+0x102>
    1e82:	f6 fc       	sbrc	r15, 6
    1e84:	6b c1       	rjmp	.+726    	; 0x215c <vfprintf+0x3d2>
    1e86:	40 e4       	ldi	r20, 0x40	; 64
    1e88:	f4 2a       	or	r15, r20
    1e8a:	07 c0       	rjmp	.+14     	; 0x1e9a <vfprintf+0x110>
    1e8c:	9c 36       	cpi	r25, 0x6C	; 108
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <vfprintf+0x10c>
    1e90:	50 e8       	ldi	r21, 0x80	; 128
    1e92:	f5 2a       	or	r15, r21
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <vfprintf+0x110>
    1e96:	98 36       	cpi	r25, 0x68	; 104
    1e98:	49 f4       	brne	.+18     	; 0x1eac <vfprintf+0x122>
    1e9a:	f2 01       	movw	r30, r4
    1e9c:	23 fd       	sbrc	r18, 3
    1e9e:	95 91       	lpm	r25, Z+
    1ea0:	23 ff       	sbrs	r18, 3
    1ea2:	91 91       	ld	r25, Z+
    1ea4:	2f 01       	movw	r4, r30
    1ea6:	99 23       	and	r25, r25
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <vfprintf+0x122>
    1eaa:	b8 cf       	rjmp	.-144    	; 0x1e1c <vfprintf+0x92>
    1eac:	89 2f       	mov	r24, r25
    1eae:	85 54       	subi	r24, 0x45	; 69
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	18 f0       	brcs	.+6      	; 0x1eba <vfprintf+0x130>
    1eb4:	80 52       	subi	r24, 0x20	; 32
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	38 f4       	brcc	.+14     	; 0x1ec8 <vfprintf+0x13e>
    1eba:	44 e0       	ldi	r20, 0x04	; 4
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	a4 0e       	add	r10, r20
    1ec0:	b5 1e       	adc	r11, r21
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	59 83       	std	Y+1, r21	; 0x01
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <vfprintf+0x15c>
    1ec8:	93 36       	cpi	r25, 0x63	; 99
    1eca:	31 f0       	breq	.+12     	; 0x1ed8 <vfprintf+0x14e>
    1ecc:	93 37       	cpi	r25, 0x73	; 115
    1ece:	79 f0       	breq	.+30     	; 0x1eee <vfprintf+0x164>
    1ed0:	93 35       	cpi	r25, 0x53	; 83
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <vfprintf+0x14c>
    1ed4:	56 c0       	rjmp	.+172    	; 0x1f82 <vfprintf+0x1f8>
    1ed6:	20 c0       	rjmp	.+64     	; 0x1f18 <vfprintf+0x18e>
    1ed8:	f5 01       	movw	r30, r10
    1eda:	80 81       	ld	r24, Z
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	42 e0       	ldi	r20, 0x02	; 2
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	a4 0e       	add	r10, r20
    1ee4:	b5 1e       	adc	r11, r21
    1ee6:	61 01       	movw	r12, r2
    1ee8:	01 e0       	ldi	r16, 0x01	; 1
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	12 c0       	rjmp	.+36     	; 0x1f12 <vfprintf+0x188>
    1eee:	f5 01       	movw	r30, r10
    1ef0:	c0 80       	ld	r12, Z
    1ef2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ef4:	f6 fc       	sbrc	r15, 6
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <vfprintf+0x174>
    1ef8:	6f ef       	ldi	r22, 0xFF	; 255
    1efa:	7f ef       	ldi	r23, 0xFF	; 255
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <vfprintf+0x178>
    1efe:	69 2d       	mov	r22, r9
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	42 e0       	ldi	r20, 0x02	; 2
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	a4 0e       	add	r10, r20
    1f08:	b5 1e       	adc	r11, r21
    1f0a:	c6 01       	movw	r24, r12
    1f0c:	0e 94 bb 13 	call	0x2776	; 0x2776 <strnlen>
    1f10:	8c 01       	movw	r16, r24
    1f12:	5f e7       	ldi	r21, 0x7F	; 127
    1f14:	f5 22       	and	r15, r21
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <vfprintf+0x1b6>
    1f18:	f5 01       	movw	r30, r10
    1f1a:	c0 80       	ld	r12, Z
    1f1c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f1e:	f6 fc       	sbrc	r15, 6
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <vfprintf+0x19e>
    1f22:	6f ef       	ldi	r22, 0xFF	; 255
    1f24:	7f ef       	ldi	r23, 0xFF	; 255
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x1a2>
    1f28:	69 2d       	mov	r22, r9
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	42 e0       	ldi	r20, 0x02	; 2
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	a4 0e       	add	r10, r20
    1f32:	b5 1e       	adc	r11, r21
    1f34:	c6 01       	movw	r24, r12
    1f36:	0e 94 b0 13 	call	0x2760	; 0x2760 <strnlen_P>
    1f3a:	8c 01       	movw	r16, r24
    1f3c:	50 e8       	ldi	r21, 0x80	; 128
    1f3e:	f5 2a       	or	r15, r21
    1f40:	f3 fe       	sbrs	r15, 3
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <vfprintf+0x1c8>
    1f44:	1a c0       	rjmp	.+52     	; 0x1f7a <vfprintf+0x1f0>
    1f46:	80 e2       	ldi	r24, 0x20	; 32
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	b3 01       	movw	r22, r6
    1f4c:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1f50:	ea 94       	dec	r14
    1f52:	8e 2d       	mov	r24, r14
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	08 17       	cp	r16, r24
    1f58:	19 07       	cpc	r17, r25
    1f5a:	a8 f3       	brcs	.-22     	; 0x1f46 <vfprintf+0x1bc>
    1f5c:	0e c0       	rjmp	.+28     	; 0x1f7a <vfprintf+0x1f0>
    1f5e:	f6 01       	movw	r30, r12
    1f60:	f7 fc       	sbrc	r15, 7
    1f62:	85 91       	lpm	r24, Z+
    1f64:	f7 fe       	sbrs	r15, 7
    1f66:	81 91       	ld	r24, Z+
    1f68:	6f 01       	movw	r12, r30
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	b3 01       	movw	r22, r6
    1f6e:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    1f72:	e1 10       	cpse	r14, r1
    1f74:	ea 94       	dec	r14
    1f76:	01 50       	subi	r16, 0x01	; 1
    1f78:	10 40       	sbci	r17, 0x00	; 0
    1f7a:	01 15       	cp	r16, r1
    1f7c:	11 05       	cpc	r17, r1
    1f7e:	79 f7       	brne	.-34     	; 0x1f5e <vfprintf+0x1d4>
    1f80:	ea c0       	rjmp	.+468    	; 0x2156 <vfprintf+0x3cc>
    1f82:	94 36       	cpi	r25, 0x64	; 100
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <vfprintf+0x200>
    1f86:	99 36       	cpi	r25, 0x69	; 105
    1f88:	69 f5       	brne	.+90     	; 0x1fe4 <vfprintf+0x25a>
    1f8a:	f7 fe       	sbrs	r15, 7
    1f8c:	08 c0       	rjmp	.+16     	; 0x1f9e <vfprintf+0x214>
    1f8e:	f5 01       	movw	r30, r10
    1f90:	20 81       	ld	r18, Z
    1f92:	31 81       	ldd	r19, Z+1	; 0x01
    1f94:	42 81       	ldd	r20, Z+2	; 0x02
    1f96:	53 81       	ldd	r21, Z+3	; 0x03
    1f98:	84 e0       	ldi	r24, 0x04	; 4
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0a c0       	rjmp	.+20     	; 0x1fb2 <vfprintf+0x228>
    1f9e:	f5 01       	movw	r30, r10
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	9c 01       	movw	r18, r24
    1fa6:	44 27       	eor	r20, r20
    1fa8:	37 fd       	sbrc	r19, 7
    1faa:	40 95       	com	r20
    1fac:	54 2f       	mov	r21, r20
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a8 0e       	add	r10, r24
    1fb4:	b9 1e       	adc	r11, r25
    1fb6:	9f e6       	ldi	r25, 0x6F	; 111
    1fb8:	f9 22       	and	r15, r25
    1fba:	57 ff       	sbrs	r21, 7
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <vfprintf+0x246>
    1fbe:	50 95       	com	r21
    1fc0:	40 95       	com	r20
    1fc2:	30 95       	com	r19
    1fc4:	21 95       	neg	r18
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	4f 4f       	sbci	r20, 0xFF	; 255
    1fca:	5f 4f       	sbci	r21, 0xFF	; 255
    1fcc:	e0 e8       	ldi	r30, 0x80	; 128
    1fce:	fe 2a       	or	r15, r30
    1fd0:	ca 01       	movw	r24, r20
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	a1 01       	movw	r20, r2
    1fd6:	2a e0       	ldi	r18, 0x0A	; 10
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	0e 94 4e 14 	call	0x289c	; 0x289c <__ultoa_invert>
    1fde:	d8 2e       	mov	r13, r24
    1fe0:	d2 18       	sub	r13, r2
    1fe2:	40 c0       	rjmp	.+128    	; 0x2064 <vfprintf+0x2da>
    1fe4:	95 37       	cpi	r25, 0x75	; 117
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <vfprintf+0x268>
    1fe8:	1f 2d       	mov	r17, r15
    1fea:	1f 7e       	andi	r17, 0xEF	; 239
    1fec:	2a e0       	ldi	r18, 0x0A	; 10
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	1d c0       	rjmp	.+58     	; 0x202c <vfprintf+0x2a2>
    1ff2:	1f 2d       	mov	r17, r15
    1ff4:	19 7f       	andi	r17, 0xF9	; 249
    1ff6:	9f 36       	cpi	r25, 0x6F	; 111
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <vfprintf+0x288>
    1ffa:	90 37       	cpi	r25, 0x70	; 112
    1ffc:	20 f4       	brcc	.+8      	; 0x2006 <vfprintf+0x27c>
    1ffe:	98 35       	cpi	r25, 0x58	; 88
    2000:	09 f0       	breq	.+2      	; 0x2004 <vfprintf+0x27a>
    2002:	ac c0       	rjmp	.+344    	; 0x215c <vfprintf+0x3d2>
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <vfprintf+0x29a>
    2006:	90 37       	cpi	r25, 0x70	; 112
    2008:	39 f0       	breq	.+14     	; 0x2018 <vfprintf+0x28e>
    200a:	98 37       	cpi	r25, 0x78	; 120
    200c:	09 f0       	breq	.+2      	; 0x2010 <vfprintf+0x286>
    200e:	a6 c0       	rjmp	.+332    	; 0x215c <vfprintf+0x3d2>
    2010:	04 c0       	rjmp	.+8      	; 0x201a <vfprintf+0x290>
    2012:	28 e0       	ldi	r18, 0x08	; 8
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	0a c0       	rjmp	.+20     	; 0x202c <vfprintf+0x2a2>
    2018:	10 61       	ori	r17, 0x10	; 16
    201a:	14 fd       	sbrc	r17, 4
    201c:	14 60       	ori	r17, 0x04	; 4
    201e:	20 e1       	ldi	r18, 0x10	; 16
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	04 c0       	rjmp	.+8      	; 0x202c <vfprintf+0x2a2>
    2024:	14 fd       	sbrc	r17, 4
    2026:	16 60       	ori	r17, 0x06	; 6
    2028:	20 e1       	ldi	r18, 0x10	; 16
    202a:	32 e0       	ldi	r19, 0x02	; 2
    202c:	17 ff       	sbrs	r17, 7
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <vfprintf+0x2b6>
    2030:	f5 01       	movw	r30, r10
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	44 e0       	ldi	r20, 0x04	; 4
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	08 c0       	rjmp	.+16     	; 0x2050 <vfprintf+0x2c6>
    2040:	f5 01       	movw	r30, r10
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	bc 01       	movw	r22, r24
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	42 e0       	ldi	r20, 0x02	; 2
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	a4 0e       	add	r10, r20
    2052:	b5 1e       	adc	r11, r21
    2054:	a1 01       	movw	r20, r2
    2056:	0e 94 4e 14 	call	0x289c	; 0x289c <__ultoa_invert>
    205a:	d8 2e       	mov	r13, r24
    205c:	d2 18       	sub	r13, r2
    205e:	8f e7       	ldi	r24, 0x7F	; 127
    2060:	f8 2e       	mov	r15, r24
    2062:	f1 22       	and	r15, r17
    2064:	f6 fe       	sbrs	r15, 6
    2066:	0b c0       	rjmp	.+22     	; 0x207e <vfprintf+0x2f4>
    2068:	5e ef       	ldi	r21, 0xFE	; 254
    206a:	f5 22       	and	r15, r21
    206c:	d9 14       	cp	r13, r9
    206e:	38 f4       	brcc	.+14     	; 0x207e <vfprintf+0x2f4>
    2070:	f4 fe       	sbrs	r15, 4
    2072:	07 c0       	rjmp	.+14     	; 0x2082 <vfprintf+0x2f8>
    2074:	f2 fc       	sbrc	r15, 2
    2076:	05 c0       	rjmp	.+10     	; 0x2082 <vfprintf+0x2f8>
    2078:	8f ee       	ldi	r24, 0xEF	; 239
    207a:	f8 22       	and	r15, r24
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <vfprintf+0x2f8>
    207e:	1d 2d       	mov	r17, r13
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <vfprintf+0x2fa>
    2082:	19 2d       	mov	r17, r9
    2084:	f4 fe       	sbrs	r15, 4
    2086:	0d c0       	rjmp	.+26     	; 0x20a2 <vfprintf+0x318>
    2088:	fe 01       	movw	r30, r28
    208a:	ed 0d       	add	r30, r13
    208c:	f1 1d       	adc	r31, r1
    208e:	80 81       	ld	r24, Z
    2090:	80 33       	cpi	r24, 0x30	; 48
    2092:	19 f4       	brne	.+6      	; 0x209a <vfprintf+0x310>
    2094:	99 ee       	ldi	r25, 0xE9	; 233
    2096:	f9 22       	and	r15, r25
    2098:	08 c0       	rjmp	.+16     	; 0x20aa <vfprintf+0x320>
    209a:	1f 5f       	subi	r17, 0xFF	; 255
    209c:	f2 fe       	sbrs	r15, 2
    209e:	05 c0       	rjmp	.+10     	; 0x20aa <vfprintf+0x320>
    20a0:	03 c0       	rjmp	.+6      	; 0x20a8 <vfprintf+0x31e>
    20a2:	8f 2d       	mov	r24, r15
    20a4:	86 78       	andi	r24, 0x86	; 134
    20a6:	09 f0       	breq	.+2      	; 0x20aa <vfprintf+0x320>
    20a8:	1f 5f       	subi	r17, 0xFF	; 255
    20aa:	0f 2d       	mov	r16, r15
    20ac:	f3 fc       	sbrc	r15, 3
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <vfprintf+0x34e>
    20b0:	f0 fe       	sbrs	r15, 0
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <vfprintf+0x348>
    20b4:	1e 15       	cp	r17, r14
    20b6:	10 f0       	brcs	.+4      	; 0x20bc <vfprintf+0x332>
    20b8:	9d 2c       	mov	r9, r13
    20ba:	0b c0       	rjmp	.+22     	; 0x20d2 <vfprintf+0x348>
    20bc:	9d 2c       	mov	r9, r13
    20be:	9e 0c       	add	r9, r14
    20c0:	91 1a       	sub	r9, r17
    20c2:	1e 2d       	mov	r17, r14
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <vfprintf+0x348>
    20c6:	80 e2       	ldi	r24, 0x20	; 32
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	b3 01       	movw	r22, r6
    20cc:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    20d0:	1f 5f       	subi	r17, 0xFF	; 255
    20d2:	1e 15       	cp	r17, r14
    20d4:	c0 f3       	brcs	.-16     	; 0x20c6 <vfprintf+0x33c>
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <vfprintf+0x356>
    20d8:	1e 15       	cp	r17, r14
    20da:	10 f4       	brcc	.+4      	; 0x20e0 <vfprintf+0x356>
    20dc:	e1 1a       	sub	r14, r17
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <vfprintf+0x358>
    20e0:	ee 24       	eor	r14, r14
    20e2:	04 ff       	sbrs	r16, 4
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <vfprintf+0x37a>
    20e6:	80 e3       	ldi	r24, 0x30	; 48
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	b3 01       	movw	r22, r6
    20ec:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    20f0:	02 ff       	sbrs	r16, 2
    20f2:	1d c0       	rjmp	.+58     	; 0x212e <vfprintf+0x3a4>
    20f4:	01 fd       	sbrc	r16, 1
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <vfprintf+0x374>
    20f8:	88 e7       	ldi	r24, 0x78	; 120
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e c0       	rjmp	.+28     	; 0x211a <vfprintf+0x390>
    20fe:	88 e5       	ldi	r24, 0x58	; 88
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0b c0       	rjmp	.+22     	; 0x211a <vfprintf+0x390>
    2104:	80 2f       	mov	r24, r16
    2106:	86 78       	andi	r24, 0x86	; 134
    2108:	91 f0       	breq	.+36     	; 0x212e <vfprintf+0x3a4>
    210a:	01 ff       	sbrs	r16, 1
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <vfprintf+0x388>
    210e:	8b e2       	ldi	r24, 0x2B	; 43
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <vfprintf+0x38a>
    2112:	80 e2       	ldi	r24, 0x20	; 32
    2114:	f7 fc       	sbrc	r15, 7
    2116:	8d e2       	ldi	r24, 0x2D	; 45
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	b3 01       	movw	r22, r6
    211c:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2120:	06 c0       	rjmp	.+12     	; 0x212e <vfprintf+0x3a4>
    2122:	80 e3       	ldi	r24, 0x30	; 48
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	b3 01       	movw	r22, r6
    2128:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    212c:	9a 94       	dec	r9
    212e:	d9 14       	cp	r13, r9
    2130:	c0 f3       	brcs	.-16     	; 0x2122 <vfprintf+0x398>
    2132:	da 94       	dec	r13
    2134:	f1 01       	movw	r30, r2
    2136:	ed 0d       	add	r30, r13
    2138:	f1 1d       	adc	r31, r1
    213a:	80 81       	ld	r24, Z
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	b3 01       	movw	r22, r6
    2140:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2144:	dd 20       	and	r13, r13
    2146:	a9 f7       	brne	.-22     	; 0x2132 <vfprintf+0x3a8>
    2148:	06 c0       	rjmp	.+12     	; 0x2156 <vfprintf+0x3cc>
    214a:	80 e2       	ldi	r24, 0x20	; 32
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	b3 01       	movw	r22, r6
    2150:	0e 94 08 14 	call	0x2810	; 0x2810 <fputc>
    2154:	ea 94       	dec	r14
    2156:	ee 20       	and	r14, r14
    2158:	c1 f7       	brne	.-16     	; 0x214a <vfprintf+0x3c0>
    215a:	43 ce       	rjmp	.-890    	; 0x1de2 <vfprintf+0x58>
    215c:	f3 01       	movw	r30, r6
    215e:	66 81       	ldd	r22, Z+6	; 0x06
    2160:	77 81       	ldd	r23, Z+7	; 0x07
    2162:	cb 01       	movw	r24, r22
    2164:	2b 96       	adiw	r28, 0x0b	; 11
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	cf 90       	pop	r12
    2180:	bf 90       	pop	r11
    2182:	af 90       	pop	r10
    2184:	9f 90       	pop	r9
    2186:	8f 90       	pop	r8
    2188:	7f 90       	pop	r7
    218a:	6f 90       	pop	r6
    218c:	5f 90       	pop	r5
    218e:	4f 90       	pop	r4
    2190:	3f 90       	pop	r3
    2192:	2f 90       	pop	r2
    2194:	08 95       	ret

00002196 <putval>:
    2196:	fc 01       	movw	r30, r24
    2198:	20 fd       	sbrc	r18, 0
    219a:	08 c0       	rjmp	.+16     	; 0x21ac <putval+0x16>
    219c:	23 fd       	sbrc	r18, 3
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <putval+0x14>
    21a0:	22 ff       	sbrs	r18, 2
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <putval+0x12>
    21a4:	73 83       	std	Z+3, r23	; 0x03
    21a6:	62 83       	std	Z+2, r22	; 0x02
    21a8:	51 83       	std	Z+1, r21	; 0x01
    21aa:	40 83       	st	Z, r20
    21ac:	08 95       	ret

000021ae <mulacc>:
    21ae:	ef 92       	push	r14
    21b0:	ff 92       	push	r15
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	44 ff       	sbrs	r20, 4
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <mulacc+0x10>
    21ba:	33 e0       	ldi	r19, 0x03	; 3
    21bc:	11 c0       	rjmp	.+34     	; 0x21e0 <mulacc+0x32>
    21be:	46 ff       	sbrs	r20, 6
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <mulacc+0x18>
    21c2:	34 e0       	ldi	r19, 0x04	; 4
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <mulacc+0x32>
    21c6:	db 01       	movw	r26, r22
    21c8:	fc 01       	movw	r30, r24
    21ca:	aa 0f       	add	r26, r26
    21cc:	bb 1f       	adc	r27, r27
    21ce:	ee 1f       	adc	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	10 94       	com	r1
    21d4:	d1 f7       	brne	.-12     	; 0x21ca <mulacc+0x1c>
    21d6:	6a 0f       	add	r22, r26
    21d8:	7b 1f       	adc	r23, r27
    21da:	8e 1f       	adc	r24, r30
    21dc:	9f 1f       	adc	r25, r31
    21de:	31 e0       	ldi	r19, 0x01	; 1
    21e0:	66 0f       	add	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	88 1f       	adc	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	31 50       	subi	r19, 0x01	; 1
    21ea:	d1 f7       	brne	.-12     	; 0x21e0 <mulacc+0x32>
    21ec:	7b 01       	movw	r14, r22
    21ee:	8c 01       	movw	r16, r24
    21f0:	e2 0e       	add	r14, r18
    21f2:	f1 1c       	adc	r15, r1
    21f4:	01 1d       	adc	r16, r1
    21f6:	11 1d       	adc	r17, r1
    21f8:	a8 01       	movw	r20, r16
    21fa:	97 01       	movw	r18, r14
    21fc:	b7 01       	movw	r22, r14
    21fe:	ca 01       	movw	r24, r20
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	ff 90       	pop	r15
    2206:	ef 90       	pop	r14
    2208:	08 95       	ret

0000220a <skip_spaces>:
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	8c 01       	movw	r16, r24
    2214:	c8 01       	movw	r24, r16
    2216:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    221a:	ec 01       	movw	r28, r24
    221c:	97 fd       	sbrc	r25, 7
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <skip_spaces+0x26>
    2220:	0e 94 9d 13 	call	0x273a	; 0x273a <isspace>
    2224:	89 2b       	or	r24, r25
    2226:	b1 f7       	brne	.-20     	; 0x2214 <skip_spaces+0xa>
    2228:	ce 01       	movw	r24, r28
    222a:	b8 01       	movw	r22, r16
    222c:	0e 94 34 14 	call	0x2868	; 0x2868 <ungetc>
    2230:	ce 01       	movw	r24, r28
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <conv_int>:
    223c:	af 92       	push	r10
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	ec 01       	movw	r28, r24
    2252:	c6 2e       	mov	r12, r22
    2254:	5a 01       	movw	r10, r20
    2256:	12 2f       	mov	r17, r18
    2258:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    225c:	ac 01       	movw	r20, r24
    225e:	8b 32       	cpi	r24, 0x2B	; 43
    2260:	19 f0       	breq	.+6      	; 0x2268 <conv_int+0x2c>
    2262:	8d 32       	cpi	r24, 0x2D	; 45
    2264:	51 f4       	brne	.+20     	; 0x227a <conv_int+0x3e>
    2266:	10 68       	ori	r17, 0x80	; 128
    2268:	ca 94       	dec	r12
    226a:	09 f4       	brne	.+2      	; 0x226e <conv_int+0x32>
    226c:	6d c0       	rjmp	.+218    	; 0x2348 <conv_int+0x10c>
    226e:	ce 01       	movw	r24, r28
    2270:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    2274:	ac 01       	movw	r20, r24
    2276:	97 fd       	sbrc	r25, 7
    2278:	67 c0       	rjmp	.+206    	; 0x2348 <conv_int+0x10c>
    227a:	6d ef       	ldi	r22, 0xFD	; 253
    227c:	d6 2e       	mov	r13, r22
    227e:	d1 22       	and	r13, r17
    2280:	8d 2d       	mov	r24, r13
    2282:	80 73       	andi	r24, 0x30	; 48
    2284:	01 f5       	brne	.+64     	; 0x22c6 <conv_int+0x8a>
    2286:	40 33       	cpi	r20, 0x30	; 48
    2288:	f1 f4       	brne	.+60     	; 0x22c6 <conv_int+0x8a>
    228a:	ca 94       	dec	r12
    228c:	09 f4       	brne	.+2      	; 0x2290 <conv_int+0x54>
    228e:	47 c0       	rjmp	.+142    	; 0x231e <conv_int+0xe2>
    2290:	ce 01       	movw	r24, r28
    2292:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    2296:	ac 01       	movw	r20, r24
    2298:	97 fd       	sbrc	r25, 7
    229a:	41 c0       	rjmp	.+130    	; 0x231e <conv_int+0xe2>
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	d8 2a       	or	r13, r24
    22a0:	48 37       	cpi	r20, 0x78	; 120
    22a2:	11 f0       	breq	.+4      	; 0x22a8 <conv_int+0x6c>
    22a4:	48 35       	cpi	r20, 0x58	; 88
    22a6:	59 f4       	brne	.+22     	; 0x22be <conv_int+0x82>
    22a8:	80 e4       	ldi	r24, 0x40	; 64
    22aa:	d8 2a       	or	r13, r24
    22ac:	ca 94       	dec	r12
    22ae:	b9 f1       	breq	.+110    	; 0x231e <conv_int+0xe2>
    22b0:	ce 01       	movw	r24, r28
    22b2:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    22b6:	ac 01       	movw	r20, r24
    22b8:	99 23       	and	r25, r25
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <conv_int+0x8a>
    22bc:	30 c0       	rjmp	.+96     	; 0x231e <conv_int+0xe2>
    22be:	d6 fc       	sbrc	r13, 6
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <conv_int+0x8a>
    22c2:	80 e1       	ldi	r24, 0x10	; 16
    22c4:	d8 2a       	or	r13, r24
    22c6:	ee 24       	eor	r14, r14
    22c8:	ff 24       	eor	r15, r15
    22ca:	87 01       	movw	r16, r14
    22cc:	24 2f       	mov	r18, r20
    22ce:	20 53       	subi	r18, 0x30	; 48
    22d0:	28 30       	cpi	r18, 0x08	; 8
    22d2:	88 f0       	brcs	.+34     	; 0x22f6 <conv_int+0xba>
    22d4:	d4 fc       	sbrc	r13, 4
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <conv_int+0xae>
    22d8:	2a 30       	cpi	r18, 0x0A	; 10
    22da:	68 f0       	brcs	.+26     	; 0x22f6 <conv_int+0xba>
    22dc:	d6 fe       	sbrs	r13, 6
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <conv_int+0xae>
    22e0:	2f 7d       	andi	r18, 0xDF	; 223
    22e2:	82 2f       	mov	r24, r18
    22e4:	81 51       	subi	r24, 0x11	; 17
    22e6:	86 30       	cpi	r24, 0x06	; 6
    22e8:	28 f0       	brcs	.+10     	; 0x22f4 <conv_int+0xb8>
    22ea:	ca 01       	movw	r24, r20
    22ec:	be 01       	movw	r22, r28
    22ee:	0e 94 34 14 	call	0x2868	; 0x2868 <ungetc>
    22f2:	12 c0       	rjmp	.+36     	; 0x2318 <conv_int+0xdc>
    22f4:	27 50       	subi	r18, 0x07	; 7
    22f6:	c8 01       	movw	r24, r16
    22f8:	b7 01       	movw	r22, r14
    22fa:	4d 2d       	mov	r20, r13
    22fc:	0e 94 d7 10 	call	0x21ae	; 0x21ae <mulacc>
    2300:	7b 01       	movw	r14, r22
    2302:	8c 01       	movw	r16, r24
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	d8 2a       	or	r13, r24
    2308:	ca 94       	dec	r12
    230a:	61 f0       	breq	.+24     	; 0x2324 <conv_int+0xe8>
    230c:	ce 01       	movw	r24, r28
    230e:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    2312:	ac 01       	movw	r20, r24
    2314:	97 ff       	sbrs	r25, 7
    2316:	da cf       	rjmp	.-76     	; 0x22cc <conv_int+0x90>
    2318:	d1 fc       	sbrc	r13, 1
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <conv_int+0xe8>
    231c:	15 c0       	rjmp	.+42     	; 0x2348 <conv_int+0x10c>
    231e:	ee 24       	eor	r14, r14
    2320:	ff 24       	eor	r15, r15
    2322:	87 01       	movw	r16, r14
    2324:	d7 fe       	sbrs	r13, 7
    2326:	08 c0       	rjmp	.+16     	; 0x2338 <conv_int+0xfc>
    2328:	10 95       	com	r17
    232a:	00 95       	com	r16
    232c:	f0 94       	com	r15
    232e:	e0 94       	com	r14
    2330:	e1 1c       	adc	r14, r1
    2332:	f1 1c       	adc	r15, r1
    2334:	01 1d       	adc	r16, r1
    2336:	11 1d       	adc	r17, r1
    2338:	c5 01       	movw	r24, r10
    233a:	b8 01       	movw	r22, r16
    233c:	a7 01       	movw	r20, r14
    233e:	2d 2d       	mov	r18, r13
    2340:	0e 94 cb 10 	call	0x2196	; 0x2196 <putval>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	01 c0       	rjmp	.+2      	; 0x234a <conv_int+0x10e>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	cf 90       	pop	r12
    235a:	bf 90       	pop	r11
    235c:	af 90       	pop	r10
    235e:	08 95       	ret

00002360 <conv_brk>:
    2360:	6f 92       	push	r6
    2362:	7f 92       	push	r7
    2364:	8f 92       	push	r8
    2366:	9f 92       	push	r9
    2368:	af 92       	push	r10
    236a:	bf 92       	push	r11
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	a0 97       	sbiw	r28, 0x20	; 32
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	6c 01       	movw	r12, r24
    238e:	a6 2e       	mov	r10, r22
    2390:	8a 01       	movw	r16, r20
    2392:	79 01       	movw	r14, r18
    2394:	fe 01       	movw	r30, r28
    2396:	31 96       	adiw	r30, 0x01	; 1
    2398:	80 e2       	ldi	r24, 0x20	; 32
    239a:	df 01       	movw	r26, r30
    239c:	1d 92       	st	X+, r1
    239e:	8a 95       	dec	r24
    23a0:	e9 f7       	brne	.-6      	; 0x239c <conv_brk+0x3c>
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	4f 01       	movw	r8, r30
    23ae:	a1 e0       	ldi	r26, 0x01	; 1
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	f6 01       	movw	r30, r12
    23b4:	83 81       	ldd	r24, Z+3	; 0x03
    23b6:	f7 01       	movw	r30, r14
    23b8:	83 fd       	sbrc	r24, 3
    23ba:	25 91       	lpm	r18, Z+
    23bc:	83 ff       	sbrs	r24, 3
    23be:	21 91       	ld	r18, Z+
    23c0:	7f 01       	movw	r14, r30
    23c2:	22 23       	and	r18, r18
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <conv_brk+0x68>
    23c6:	7e c0       	rjmp	.+252    	; 0x24c4 <conv_brk+0x164>
    23c8:	2e 35       	cpi	r18, 0x5E	; 94
    23ca:	19 f4       	brne	.+6      	; 0x23d2 <conv_brk+0x72>
    23cc:	41 15       	cp	r20, r1
    23ce:	51 05       	cpc	r21, r1
    23d0:	69 f1       	breq	.+90     	; 0x242c <conv_brk+0xcc>
    23d2:	87 2f       	mov	r24, r23
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	84 17       	cp	r24, r20
    23d8:	95 07       	cpc	r25, r21
    23da:	44 f4       	brge	.+16     	; 0x23ec <conv_brk+0x8c>
    23dc:	2d 35       	cpi	r18, 0x5D	; 93
    23de:	51 f1       	breq	.+84     	; 0x2434 <conv_brk+0xd4>
    23e0:	2d 32       	cpi	r18, 0x2D	; 45
    23e2:	21 f4       	brne	.+8      	; 0x23ec <conv_brk+0x8c>
    23e4:	33 23       	and	r19, r19
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <conv_brk+0x92>
    23e8:	31 e0       	ldi	r19, 0x01	; 1
    23ea:	21 c0       	rjmp	.+66     	; 0x242e <conv_brk+0xce>
    23ec:	33 23       	and	r19, r19
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <conv_brk+0x92>
    23f0:	62 2f       	mov	r22, r18
    23f2:	32 2f       	mov	r19, r18
    23f4:	83 2f       	mov	r24, r19
    23f6:	86 95       	lsr	r24
    23f8:	86 95       	lsr	r24
    23fa:	86 95       	lsr	r24
    23fc:	f4 01       	movw	r30, r8
    23fe:	e8 0f       	add	r30, r24
    2400:	f1 1d       	adc	r31, r1
    2402:	83 2f       	mov	r24, r19
    2404:	87 70       	andi	r24, 0x07	; 7
    2406:	3d 01       	movw	r6, r26
    2408:	02 c0       	rjmp	.+4      	; 0x240e <conv_brk+0xae>
    240a:	66 0c       	add	r6, r6
    240c:	77 1c       	adc	r7, r7
    240e:	8a 95       	dec	r24
    2410:	e2 f7       	brpl	.-8      	; 0x240a <conv_brk+0xaa>
    2412:	20 81       	ld	r18, Z
    2414:	26 29       	or	r18, r6
    2416:	20 83       	st	Z, r18
    2418:	36 17       	cp	r19, r22
    241a:	11 f4       	brne	.+4      	; 0x2420 <conv_brk+0xc0>
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	07 c0       	rjmp	.+14     	; 0x242e <conv_brk+0xce>
    2420:	36 17       	cp	r19, r22
    2422:	10 f4       	brcc	.+4      	; 0x2428 <conv_brk+0xc8>
    2424:	3f 5f       	subi	r19, 0xFF	; 255
    2426:	e6 cf       	rjmp	.-52     	; 0x23f4 <conv_brk+0x94>
    2428:	31 50       	subi	r19, 0x01	; 1
    242a:	e4 cf       	rjmp	.-56     	; 0x23f4 <conv_brk+0x94>
    242c:	71 e0       	ldi	r23, 0x01	; 1
    242e:	4f 5f       	subi	r20, 0xFF	; 255
    2430:	5f 4f       	sbci	r21, 0xFF	; 255
    2432:	bf cf       	rjmp	.-130    	; 0x23b2 <conv_brk+0x52>
    2434:	33 23       	and	r19, r19
    2436:	19 f0       	breq	.+6      	; 0x243e <conv_brk+0xde>
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	8e 83       	std	Y+6, r24	; 0x06
    243e:	77 23       	and	r23, r23
    2440:	59 f0       	breq	.+22     	; 0x2458 <conv_brk+0xf8>
    2442:	fe 01       	movw	r30, r28
    2444:	31 96       	adiw	r30, 0x01	; 1
    2446:	9e 01       	movw	r18, r28
    2448:	2f 5d       	subi	r18, 0xDF	; 223
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	80 95       	com	r24
    2450:	81 93       	st	Z+, r24
    2452:	e2 17       	cp	r30, r18
    2454:	f3 07       	cpc	r31, r19
    2456:	d1 f7       	brne	.-12     	; 0x244c <conv_brk+0xec>
    2458:	bb 24       	eor	r11, r11
    245a:	b3 94       	inc	r11
    245c:	4e 01       	movw	r8, r28
    245e:	08 94       	sec
    2460:	81 1c       	adc	r8, r1
    2462:	91 1c       	adc	r9, r1
    2464:	c6 01       	movw	r24, r12
    2466:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    246a:	ac 01       	movw	r20, r24
    246c:	97 fd       	sbrc	r25, 7
    246e:	22 c0       	rjmp	.+68     	; 0x24b4 <conv_brk+0x154>
    2470:	86 95       	lsr	r24
    2472:	86 95       	lsr	r24
    2474:	86 95       	lsr	r24
    2476:	f4 01       	movw	r30, r8
    2478:	e8 0f       	add	r30, r24
    247a:	f1 1d       	adc	r31, r1
    247c:	80 81       	ld	r24, Z
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	9a 01       	movw	r18, r20
    2482:	27 70       	andi	r18, 0x07	; 7
    2484:	30 70       	andi	r19, 0x00	; 0
    2486:	02 c0       	rjmp	.+4      	; 0x248c <conv_brk+0x12c>
    2488:	95 95       	asr	r25
    248a:	87 95       	ror	r24
    248c:	2a 95       	dec	r18
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <conv_brk+0x128>
    2490:	80 fd       	sbrc	r24, 0
    2492:	05 c0       	rjmp	.+10     	; 0x249e <conv_brk+0x13e>
    2494:	ca 01       	movw	r24, r20
    2496:	b6 01       	movw	r22, r12
    2498:	0e 94 34 14 	call	0x2868	; 0x2868 <ungetc>
    249c:	0b c0       	rjmp	.+22     	; 0x24b4 <conv_brk+0x154>
    249e:	01 15       	cp	r16, r1
    24a0:	11 05       	cpc	r17, r1
    24a2:	19 f0       	breq	.+6      	; 0x24aa <conv_brk+0x14a>
    24a4:	d8 01       	movw	r26, r16
    24a6:	4d 93       	st	X+, r20
    24a8:	8d 01       	movw	r16, r26
    24aa:	aa 94       	dec	r10
    24ac:	bb 24       	eor	r11, r11
    24ae:	aa 20       	and	r10, r10
    24b0:	c9 f6       	brne	.-78     	; 0x2464 <conv_brk+0x104>
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <conv_brk+0x158>
    24b4:	bb 20       	and	r11, r11
    24b6:	31 f4       	brne	.+12     	; 0x24c4 <conv_brk+0x164>
    24b8:	01 15       	cp	r16, r1
    24ba:	11 05       	cpc	r17, r1
    24bc:	29 f0       	breq	.+10     	; 0x24c8 <conv_brk+0x168>
    24be:	f8 01       	movw	r30, r16
    24c0:	10 82       	st	Z, r1
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <conv_brk+0x168>
    24c4:	ee 24       	eor	r14, r14
    24c6:	ff 24       	eor	r15, r15
    24c8:	c7 01       	movw	r24, r14
    24ca:	a0 96       	adiw	r28, 0x20	; 32
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	bf 90       	pop	r11
    24e8:	af 90       	pop	r10
    24ea:	9f 90       	pop	r9
    24ec:	8f 90       	pop	r8
    24ee:	7f 90       	pop	r7
    24f0:	6f 90       	pop	r6
    24f2:	08 95       	ret

000024f4 <vfscanf>:
    24f4:	6f 92       	push	r6
    24f6:	7f 92       	push	r7
    24f8:	8f 92       	push	r8
    24fa:	9f 92       	push	r9
    24fc:	af 92       	push	r10
    24fe:	bf 92       	push	r11
    2500:	cf 92       	push	r12
    2502:	df 92       	push	r13
    2504:	ef 92       	push	r14
    2506:	ff 92       	push	r15
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	5c 01       	movw	r10, r24
    2512:	6b 01       	movw	r12, r22
    2514:	3a 01       	movw	r6, r20
    2516:	fc 01       	movw	r30, r24
    2518:	17 82       	std	Z+7, r1	; 0x07
    251a:	16 82       	std	Z+6, r1	; 0x06
    251c:	88 24       	eor	r8, r8
    251e:	ea c0       	rjmp	.+468    	; 0x26f4 <vfscanf+0x200>
    2520:	81 2f       	mov	r24, r17
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	0e 94 9d 13 	call	0x273a	; 0x273a <isspace>
    2528:	89 2b       	or	r24, r25
    252a:	21 f0       	breq	.+8      	; 0x2534 <vfscanf+0x40>
    252c:	c5 01       	movw	r24, r10
    252e:	0e 94 05 11 	call	0x220a	; 0x220a <skip_spaces>
    2532:	e0 c0       	rjmp	.+448    	; 0x26f4 <vfscanf+0x200>
    2534:	15 32       	cpi	r17, 0x25	; 37
    2536:	49 f4       	brne	.+18     	; 0x254a <vfscanf+0x56>
    2538:	f6 01       	movw	r30, r12
    253a:	f3 fc       	sbrc	r15, 3
    253c:	65 91       	lpm	r22, Z+
    253e:	f3 fe       	sbrs	r15, 3
    2540:	61 91       	ld	r22, Z+
    2542:	6f 01       	movw	r12, r30
    2544:	65 32       	cpi	r22, 0x25	; 37
    2546:	69 f4       	brne	.+26     	; 0x2562 <vfscanf+0x6e>
    2548:	15 e2       	ldi	r17, 0x25	; 37
    254a:	c5 01       	movw	r24, r10
    254c:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    2550:	97 fd       	sbrc	r25, 7
    2552:	dc c0       	rjmp	.+440    	; 0x270c <vfscanf+0x218>
    2554:	18 17       	cp	r17, r24
    2556:	09 f4       	brne	.+2      	; 0x255a <vfscanf+0x66>
    2558:	cd c0       	rjmp	.+410    	; 0x26f4 <vfscanf+0x200>
    255a:	b5 01       	movw	r22, r10
    255c:	0e 94 34 14 	call	0x2868	; 0x2868 <ungetc>
    2560:	da c0       	rjmp	.+436    	; 0x2716 <vfscanf+0x222>
    2562:	6a 32       	cpi	r22, 0x2A	; 42
    2564:	19 f0       	breq	.+6      	; 0x256c <vfscanf+0x78>
    2566:	16 2f       	mov	r17, r22
    2568:	00 e0       	ldi	r16, 0x00	; 0
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <vfscanf+0x84>
    256c:	f3 fc       	sbrc	r15, 3
    256e:	15 91       	lpm	r17, Z+
    2570:	f3 fe       	sbrs	r15, 3
    2572:	11 91       	ld	r17, Z+
    2574:	6f 01       	movw	r12, r30
    2576:	01 e0       	ldi	r16, 0x01	; 1
    2578:	99 24       	eor	r9, r9
    257a:	0f c0       	rjmp	.+30     	; 0x259a <vfscanf+0xa6>
    257c:	02 60       	ori	r16, 0x02	; 2
    257e:	69 2d       	mov	r22, r9
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	0e 94 d7 10 	call	0x21ae	; 0x21ae <mulacc>
    258c:	96 2e       	mov	r9, r22
    258e:	f6 01       	movw	r30, r12
    2590:	f3 fc       	sbrc	r15, 3
    2592:	15 91       	lpm	r17, Z+
    2594:	f3 fe       	sbrs	r15, 3
    2596:	11 91       	ld	r17, Z+
    2598:	6f 01       	movw	r12, r30
    259a:	21 2f       	mov	r18, r17
    259c:	20 53       	subi	r18, 0x30	; 48
    259e:	2a 30       	cpi	r18, 0x0A	; 10
    25a0:	68 f3       	brcs	.-38     	; 0x257c <vfscanf+0x88>
    25a2:	01 fd       	sbrc	r16, 1
    25a4:	03 c0       	rjmp	.+6      	; 0x25ac <vfscanf+0xb8>
    25a6:	99 24       	eor	r9, r9
    25a8:	9a 94       	dec	r9
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <vfscanf+0xbe>
    25ac:	99 20       	and	r9, r9
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <vfscanf+0xbe>
    25b0:	b2 c0       	rjmp	.+356    	; 0x2716 <vfscanf+0x222>
    25b2:	18 36       	cpi	r17, 0x68	; 104
    25b4:	21 f0       	breq	.+8      	; 0x25be <vfscanf+0xca>
    25b6:	1c 36       	cpi	r17, 0x6C	; 108
    25b8:	99 f4       	brne	.+38     	; 0x25e0 <vfscanf+0xec>
    25ba:	f6 01       	movw	r30, r12
    25bc:	0b c0       	rjmp	.+22     	; 0x25d4 <vfscanf+0xe0>
    25be:	f6 01       	movw	r30, r12
    25c0:	f3 fc       	sbrc	r15, 3
    25c2:	65 91       	lpm	r22, Z+
    25c4:	f3 fe       	sbrs	r15, 3
    25c6:	61 91       	ld	r22, Z+
    25c8:	68 36       	cpi	r22, 0x68	; 104
    25ca:	19 f0       	breq	.+6      	; 0x25d2 <vfscanf+0xde>
    25cc:	6f 01       	movw	r12, r30
    25ce:	16 2f       	mov	r17, r22
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <vfscanf+0xec>
    25d2:	08 60       	ori	r16, 0x08	; 8
    25d4:	04 60       	ori	r16, 0x04	; 4
    25d6:	f3 fc       	sbrc	r15, 3
    25d8:	15 91       	lpm	r17, Z+
    25da:	f3 fe       	sbrs	r15, 3
    25dc:	11 91       	ld	r17, Z+
    25de:	6f 01       	movw	r12, r30
    25e0:	11 23       	and	r17, r17
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <vfscanf+0xf2>
    25e4:	98 c0       	rjmp	.+304    	; 0x2716 <vfscanf+0x222>
    25e6:	8c e5       	ldi	r24, 0x5C	; 92
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	61 2f       	mov	r22, r17
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	0e 94 a5 13 	call	0x274a	; 0x274a <strchr_P>
    25f2:	89 2b       	or	r24, r25
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <vfscanf+0x104>
    25f6:	8f c0       	rjmp	.+286    	; 0x2716 <vfscanf+0x222>
    25f8:	80 2f       	mov	r24, r16
    25fa:	00 ff       	sbrs	r16, 0
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <vfscanf+0x110>
    25fe:	ee 24       	eor	r14, r14
    2600:	ff 24       	eor	r15, r15
    2602:	07 c0       	rjmp	.+14     	; 0x2612 <vfscanf+0x11e>
    2604:	f3 01       	movw	r30, r6
    2606:	e0 80       	ld	r14, Z
    2608:	f1 80       	ldd	r15, Z+1	; 0x01
    260a:	22 e0       	ldi	r18, 0x02	; 2
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	62 0e       	add	r6, r18
    2610:	73 1e       	adc	r7, r19
    2612:	1e 36       	cpi	r17, 0x6E	; 110
    2614:	51 f4       	brne	.+20     	; 0x262a <vfscanf+0x136>
    2616:	f5 01       	movw	r30, r10
    2618:	46 81       	ldd	r20, Z+6	; 0x06
    261a:	57 81       	ldd	r21, Z+7	; 0x07
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	c7 01       	movw	r24, r14
    2622:	20 2f       	mov	r18, r16
    2624:	0e 94 cb 10 	call	0x2196	; 0x2196 <putval>
    2628:	65 c0       	rjmp	.+202    	; 0x26f4 <vfscanf+0x200>
    262a:	13 36       	cpi	r17, 0x63	; 99
    262c:	91 f4       	brne	.+36     	; 0x2652 <vfscanf+0x15e>
    262e:	81 fd       	sbrc	r24, 1
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <vfscanf+0x142>
    2632:	99 24       	eor	r9, r9
    2634:	93 94       	inc	r9
    2636:	c5 01       	movw	r24, r10
    2638:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    263c:	97 fd       	sbrc	r25, 7
    263e:	66 c0       	rjmp	.+204    	; 0x270c <vfscanf+0x218>
    2640:	e1 14       	cp	r14, r1
    2642:	f1 04       	cpc	r15, r1
    2644:	19 f0       	breq	.+6      	; 0x264c <vfscanf+0x158>
    2646:	f7 01       	movw	r30, r14
    2648:	81 93       	st	Z+, r24
    264a:	7f 01       	movw	r14, r30
    264c:	9a 94       	dec	r9
    264e:	99 f7       	brne	.-26     	; 0x2636 <vfscanf+0x142>
    2650:	4f c0       	rjmp	.+158    	; 0x26f0 <vfscanf+0x1fc>
    2652:	1b 35       	cpi	r17, 0x5B	; 91
    2654:	59 f4       	brne	.+22     	; 0x266c <vfscanf+0x178>
    2656:	c5 01       	movw	r24, r10
    2658:	69 2d       	mov	r22, r9
    265a:	a7 01       	movw	r20, r14
    265c:	96 01       	movw	r18, r12
    265e:	0e 94 b0 11 	call	0x2360	; 0x2360 <conv_brk>
    2662:	6c 01       	movw	r12, r24
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	09 f0       	breq	.+2      	; 0x266a <vfscanf+0x176>
    2668:	43 c0       	rjmp	.+134    	; 0x26f0 <vfscanf+0x1fc>
    266a:	3d c0       	rjmp	.+122    	; 0x26e6 <vfscanf+0x1f2>
    266c:	c5 01       	movw	r24, r10
    266e:	0e 94 05 11 	call	0x220a	; 0x220a <skip_spaces>
    2672:	97 fd       	sbrc	r25, 7
    2674:	4b c0       	rjmp	.+150    	; 0x270c <vfscanf+0x218>
    2676:	1f 36       	cpi	r17, 0x6F	; 111
    2678:	59 f1       	breq	.+86     	; 0x26d0 <vfscanf+0x1dc>
    267a:	10 37       	cpi	r17, 0x70	; 112
    267c:	28 f4       	brcc	.+10     	; 0x2688 <vfscanf+0x194>
    267e:	14 36       	cpi	r17, 0x64	; 100
    2680:	29 f1       	breq	.+74     	; 0x26cc <vfscanf+0x1d8>
    2682:	19 36       	cpi	r17, 0x69	; 105
    2684:	39 f5       	brne	.+78     	; 0x26d4 <vfscanf+0x1e0>
    2686:	27 c0       	rjmp	.+78     	; 0x26d6 <vfscanf+0x1e2>
    2688:	13 37       	cpi	r17, 0x73	; 115
    268a:	19 f0       	breq	.+6      	; 0x2692 <vfscanf+0x19e>
    268c:	15 37       	cpi	r17, 0x75	; 117
    268e:	11 f5       	brne	.+68     	; 0x26d4 <vfscanf+0x1e0>
    2690:	1d c0       	rjmp	.+58     	; 0x26cc <vfscanf+0x1d8>
    2692:	c5 01       	movw	r24, r10
    2694:	0e 94 c6 13 	call	0x278c	; 0x278c <fgetc>
    2698:	ec 01       	movw	r28, r24
    269a:	97 fd       	sbrc	r25, 7
    269c:	11 c0       	rjmp	.+34     	; 0x26c0 <vfscanf+0x1cc>
    269e:	0e 94 9d 13 	call	0x273a	; 0x273a <isspace>
    26a2:	89 2b       	or	r24, r25
    26a4:	29 f0       	breq	.+10     	; 0x26b0 <vfscanf+0x1bc>
    26a6:	ce 01       	movw	r24, r28
    26a8:	b5 01       	movw	r22, r10
    26aa:	0e 94 34 14 	call	0x2868	; 0x2868 <ungetc>
    26ae:	08 c0       	rjmp	.+16     	; 0x26c0 <vfscanf+0x1cc>
    26b0:	e1 14       	cp	r14, r1
    26b2:	f1 04       	cpc	r15, r1
    26b4:	19 f0       	breq	.+6      	; 0x26bc <vfscanf+0x1c8>
    26b6:	f7 01       	movw	r30, r14
    26b8:	c1 93       	st	Z+, r28
    26ba:	7f 01       	movw	r14, r30
    26bc:	9a 94       	dec	r9
    26be:	49 f7       	brne	.-46     	; 0x2692 <vfscanf+0x19e>
    26c0:	e1 14       	cp	r14, r1
    26c2:	f1 04       	cpc	r15, r1
    26c4:	a9 f0       	breq	.+42     	; 0x26f0 <vfscanf+0x1fc>
    26c6:	f7 01       	movw	r30, r14
    26c8:	10 82       	st	Z, r1
    26ca:	12 c0       	rjmp	.+36     	; 0x26f0 <vfscanf+0x1fc>
    26cc:	00 62       	ori	r16, 0x20	; 32
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <vfscanf+0x1e2>
    26d0:	00 61       	ori	r16, 0x10	; 16
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <vfscanf+0x1e2>
    26d4:	00 64       	ori	r16, 0x40	; 64
    26d6:	c5 01       	movw	r24, r10
    26d8:	69 2d       	mov	r22, r9
    26da:	a7 01       	movw	r20, r14
    26dc:	20 2f       	mov	r18, r16
    26de:	0e 94 1e 11 	call	0x223c	; 0x223c <conv_int>
    26e2:	88 23       	and	r24, r24
    26e4:	29 f4       	brne	.+10     	; 0x26f0 <vfscanf+0x1fc>
    26e6:	f5 01       	movw	r30, r10
    26e8:	83 81       	ldd	r24, Z+3	; 0x03
    26ea:	80 73       	andi	r24, 0x30	; 48
    26ec:	79 f4       	brne	.+30     	; 0x270c <vfscanf+0x218>
    26ee:	13 c0       	rjmp	.+38     	; 0x2716 <vfscanf+0x222>
    26f0:	00 ff       	sbrs	r16, 0
    26f2:	83 94       	inc	r8
    26f4:	f5 01       	movw	r30, r10
    26f6:	f3 80       	ldd	r15, Z+3	; 0x03
    26f8:	f6 01       	movw	r30, r12
    26fa:	f3 fc       	sbrc	r15, 3
    26fc:	15 91       	lpm	r17, Z+
    26fe:	f3 fe       	sbrs	r15, 3
    2700:	11 91       	ld	r17, Z+
    2702:	6f 01       	movw	r12, r30
    2704:	11 23       	and	r17, r17
    2706:	09 f0       	breq	.+2      	; 0x270a <vfscanf+0x216>
    2708:	0b cf       	rjmp	.-490    	; 0x2520 <vfscanf+0x2c>
    270a:	05 c0       	rjmp	.+10     	; 0x2716 <vfscanf+0x222>
    270c:	88 20       	and	r8, r8
    270e:	19 f4       	brne	.+6      	; 0x2716 <vfscanf+0x222>
    2710:	2f ef       	ldi	r18, 0xFF	; 255
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	02 c0       	rjmp	.+4      	; 0x271a <vfscanf+0x226>
    2716:	28 2d       	mov	r18, r8
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	c9 01       	movw	r24, r18
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	df 90       	pop	r13
    272a:	cf 90       	pop	r12
    272c:	bf 90       	pop	r11
    272e:	af 90       	pop	r10
    2730:	9f 90       	pop	r9
    2732:	8f 90       	pop	r8
    2734:	7f 90       	pop	r7
    2736:	6f 90       	pop	r6
    2738:	08 95       	ret

0000273a <isspace>:
    273a:	91 11       	cpse	r25, r1
    273c:	0d c1       	rjmp	.+538    	; 0x2958 <__ctype_isfalse>
    273e:	80 32       	cpi	r24, 0x20	; 32
    2740:	19 f0       	breq	.+6      	; 0x2748 <isspace+0xe>
    2742:	89 50       	subi	r24, 0x09	; 9
    2744:	85 50       	subi	r24, 0x05	; 5
    2746:	d0 f7       	brcc	.-12     	; 0x273c <isspace+0x2>
    2748:	08 95       	ret

0000274a <strchr_P>:
    274a:	fc 01       	movw	r30, r24
    274c:	05 90       	lpm	r0, Z+
    274e:	06 16       	cp	r0, r22
    2750:	21 f0       	breq	.+8      	; 0x275a <strchr_P+0x10>
    2752:	00 20       	and	r0, r0
    2754:	d9 f7       	brne	.-10     	; 0x274c <strchr_P+0x2>
    2756:	c0 01       	movw	r24, r0
    2758:	08 95       	ret
    275a:	31 97       	sbiw	r30, 0x01	; 1
    275c:	cf 01       	movw	r24, r30
    275e:	08 95       	ret

00002760 <strnlen_P>:
    2760:	fc 01       	movw	r30, r24
    2762:	05 90       	lpm	r0, Z+
    2764:	61 50       	subi	r22, 0x01	; 1
    2766:	70 40       	sbci	r23, 0x00	; 0
    2768:	01 10       	cpse	r0, r1
    276a:	d8 f7       	brcc	.-10     	; 0x2762 <strnlen_P+0x2>
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	8e 0f       	add	r24, r30
    2772:	9f 1f       	adc	r25, r31
    2774:	08 95       	ret

00002776 <strnlen>:
    2776:	fc 01       	movw	r30, r24
    2778:	61 50       	subi	r22, 0x01	; 1
    277a:	70 40       	sbci	r23, 0x00	; 0
    277c:	01 90       	ld	r0, Z+
    277e:	01 10       	cpse	r0, r1
    2780:	d8 f7       	brcc	.-10     	; 0x2778 <strnlen+0x2>
    2782:	80 95       	com	r24
    2784:	90 95       	com	r25
    2786:	8e 0f       	add	r24, r30
    2788:	9f 1f       	adc	r25, r31
    278a:	08 95       	ret

0000278c <fgetc>:
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	ec 01       	movw	r28, r24
    2792:	4b 81       	ldd	r20, Y+3	; 0x03
    2794:	40 ff       	sbrs	r20, 0
    2796:	1a c0       	rjmp	.+52     	; 0x27cc <fgetc+0x40>
    2798:	46 ff       	sbrs	r20, 6
    279a:	0a c0       	rjmp	.+20     	; 0x27b0 <fgetc+0x24>
    279c:	4f 7b       	andi	r20, 0xBF	; 191
    279e:	4b 83       	std	Y+3, r20	; 0x03
    27a0:	8e 81       	ldd	r24, Y+6	; 0x06
    27a2:	9f 81       	ldd	r25, Y+7	; 0x07
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	9f 83       	std	Y+7, r25	; 0x07
    27a8:	8e 83       	std	Y+6, r24	; 0x06
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	28 2f       	mov	r18, r24
    27ae:	2b c0       	rjmp	.+86     	; 0x2806 <fgetc+0x7a>
    27b0:	42 ff       	sbrs	r20, 2
    27b2:	13 c0       	rjmp	.+38     	; 0x27da <fgetc+0x4e>
    27b4:	e8 81       	ld	r30, Y
    27b6:	f9 81       	ldd	r31, Y+1	; 0x01
    27b8:	80 81       	ld	r24, Z
    27ba:	28 2f       	mov	r18, r24
    27bc:	33 27       	eor	r19, r19
    27be:	27 fd       	sbrc	r18, 7
    27c0:	30 95       	com	r19
    27c2:	21 15       	cp	r18, r1
    27c4:	31 05       	cpc	r19, r1
    27c6:	29 f4       	brne	.+10     	; 0x27d2 <fgetc+0x46>
    27c8:	40 62       	ori	r20, 0x20	; 32
    27ca:	4b 83       	std	Y+3, r20	; 0x03
    27cc:	2f ef       	ldi	r18, 0xFF	; 255
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	1b c0       	rjmp	.+54     	; 0x2808 <fgetc+0x7c>
    27d2:	31 96       	adiw	r30, 0x01	; 1
    27d4:	f9 83       	std	Y+1, r31	; 0x01
    27d6:	e8 83       	st	Y, r30
    27d8:	11 c0       	rjmp	.+34     	; 0x27fc <fgetc+0x70>
    27da:	ea 85       	ldd	r30, Y+10	; 0x0a
    27dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    27de:	ce 01       	movw	r24, r28
    27e0:	09 95       	icall
    27e2:	9c 01       	movw	r18, r24
    27e4:	97 ff       	sbrs	r25, 7
    27e6:	0a c0       	rjmp	.+20     	; 0x27fc <fgetc+0x70>
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	2f 5f       	subi	r18, 0xFF	; 255
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	11 f0       	breq	.+4      	; 0x27f4 <fgetc+0x68>
    27f0:	80 e2       	ldi	r24, 0x20	; 32
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <fgetc+0x6a>
    27f4:	80 e1       	ldi	r24, 0x10	; 16
    27f6:	89 2b       	or	r24, r25
    27f8:	8b 83       	std	Y+3, r24	; 0x03
    27fa:	e8 cf       	rjmp	.-48     	; 0x27cc <fgetc+0x40>
    27fc:	8e 81       	ldd	r24, Y+6	; 0x06
    27fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2800:	01 96       	adiw	r24, 0x01	; 1
    2802:	9f 83       	std	Y+7, r25	; 0x07
    2804:	8e 83       	std	Y+6, r24	; 0x06
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	c9 01       	movw	r24, r18
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	08 95       	ret

00002810 <fputc>:
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	8c 01       	movw	r16, r24
    281a:	eb 01       	movw	r28, r22
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	81 ff       	sbrs	r24, 1
    2820:	1b c0       	rjmp	.+54     	; 0x2858 <fputc+0x48>
    2822:	82 ff       	sbrs	r24, 2
    2824:	0d c0       	rjmp	.+26     	; 0x2840 <fputc+0x30>
    2826:	2e 81       	ldd	r18, Y+6	; 0x06
    2828:	3f 81       	ldd	r19, Y+7	; 0x07
    282a:	8c 81       	ldd	r24, Y+4	; 0x04
    282c:	9d 81       	ldd	r25, Y+5	; 0x05
    282e:	28 17       	cp	r18, r24
    2830:	39 07       	cpc	r19, r25
    2832:	64 f4       	brge	.+24     	; 0x284c <fputc+0x3c>
    2834:	e8 81       	ld	r30, Y
    2836:	f9 81       	ldd	r31, Y+1	; 0x01
    2838:	01 93       	st	Z+, r16
    283a:	f9 83       	std	Y+1, r31	; 0x01
    283c:	e8 83       	st	Y, r30
    283e:	06 c0       	rjmp	.+12     	; 0x284c <fputc+0x3c>
    2840:	e8 85       	ldd	r30, Y+8	; 0x08
    2842:	f9 85       	ldd	r31, Y+9	; 0x09
    2844:	80 2f       	mov	r24, r16
    2846:	09 95       	icall
    2848:	89 2b       	or	r24, r25
    284a:	31 f4       	brne	.+12     	; 0x2858 <fputc+0x48>
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	9f 81       	ldd	r25, Y+7	; 0x07
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	9f 83       	std	Y+7, r25	; 0x07
    2854:	8e 83       	std	Y+6, r24	; 0x06
    2856:	02 c0       	rjmp	.+4      	; 0x285c <fputc+0x4c>
    2858:	0f ef       	ldi	r16, 0xFF	; 255
    285a:	1f ef       	ldi	r17, 0xFF	; 255
    285c:	c8 01       	movw	r24, r16
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	08 95       	ret

00002868 <ungetc>:
    2868:	9c 01       	movw	r18, r24
    286a:	fb 01       	movw	r30, r22
    286c:	83 81       	ldd	r24, Z+3	; 0x03
    286e:	80 ff       	sbrs	r24, 0
    2870:	11 c0       	rjmp	.+34     	; 0x2894 <ungetc+0x2c>
    2872:	86 fd       	sbrc	r24, 6
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <ungetc+0x2c>
    2876:	9f ef       	ldi	r25, 0xFF	; 255
    2878:	2f 3f       	cpi	r18, 0xFF	; 255
    287a:	39 07       	cpc	r19, r25
    287c:	59 f0       	breq	.+22     	; 0x2894 <ungetc+0x2c>
    287e:	22 83       	std	Z+2, r18	; 0x02
    2880:	80 64       	ori	r24, 0x40	; 64
    2882:	8f 7d       	andi	r24, 0xDF	; 223
    2884:	83 83       	std	Z+3, r24	; 0x03
    2886:	86 81       	ldd	r24, Z+6	; 0x06
    2888:	97 81       	ldd	r25, Z+7	; 0x07
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	97 83       	std	Z+7, r25	; 0x07
    288e:	86 83       	std	Z+6, r24	; 0x06
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <ungetc+0x30>
    2894:	2f ef       	ldi	r18, 0xFF	; 255
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	c9 01       	movw	r24, r18
    289a:	08 95       	ret

0000289c <__ultoa_invert>:
    289c:	fa 01       	movw	r30, r20
    289e:	aa 27       	eor	r26, r26
    28a0:	28 30       	cpi	r18, 0x08	; 8
    28a2:	51 f1       	breq	.+84     	; 0x28f8 <__ultoa_invert+0x5c>
    28a4:	20 31       	cpi	r18, 0x10	; 16
    28a6:	81 f1       	breq	.+96     	; 0x2908 <__ultoa_invert+0x6c>
    28a8:	e8 94       	clt
    28aa:	6f 93       	push	r22
    28ac:	6e 7f       	andi	r22, 0xFE	; 254
    28ae:	6e 5f       	subi	r22, 0xFE	; 254
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	8f 4f       	sbci	r24, 0xFF	; 255
    28b4:	9f 4f       	sbci	r25, 0xFF	; 255
    28b6:	af 4f       	sbci	r26, 0xFF	; 255
    28b8:	b1 e0       	ldi	r27, 0x01	; 1
    28ba:	3e d0       	rcall	.+124    	; 0x2938 <__ultoa_invert+0x9c>
    28bc:	b4 e0       	ldi	r27, 0x04	; 4
    28be:	3c d0       	rcall	.+120    	; 0x2938 <__ultoa_invert+0x9c>
    28c0:	67 0f       	add	r22, r23
    28c2:	78 1f       	adc	r23, r24
    28c4:	89 1f       	adc	r24, r25
    28c6:	9a 1f       	adc	r25, r26
    28c8:	a1 1d       	adc	r26, r1
    28ca:	68 0f       	add	r22, r24
    28cc:	79 1f       	adc	r23, r25
    28ce:	8a 1f       	adc	r24, r26
    28d0:	91 1d       	adc	r25, r1
    28d2:	a1 1d       	adc	r26, r1
    28d4:	6a 0f       	add	r22, r26
    28d6:	71 1d       	adc	r23, r1
    28d8:	81 1d       	adc	r24, r1
    28da:	91 1d       	adc	r25, r1
    28dc:	a1 1d       	adc	r26, r1
    28de:	20 d0       	rcall	.+64     	; 0x2920 <__ultoa_invert+0x84>
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <__ultoa_invert+0x48>
    28e2:	68 94       	set
    28e4:	3f 91       	pop	r19
    28e6:	2a e0       	ldi	r18, 0x0A	; 10
    28e8:	26 9f       	mul	r18, r22
    28ea:	11 24       	eor	r1, r1
    28ec:	30 19       	sub	r19, r0
    28ee:	30 5d       	subi	r19, 0xD0	; 208
    28f0:	31 93       	st	Z+, r19
    28f2:	de f6       	brtc	.-74     	; 0x28aa <__ultoa_invert+0xe>
    28f4:	cf 01       	movw	r24, r30
    28f6:	08 95       	ret
    28f8:	46 2f       	mov	r20, r22
    28fa:	47 70       	andi	r20, 0x07	; 7
    28fc:	40 5d       	subi	r20, 0xD0	; 208
    28fe:	41 93       	st	Z+, r20
    2900:	b3 e0       	ldi	r27, 0x03	; 3
    2902:	0f d0       	rcall	.+30     	; 0x2922 <__ultoa_invert+0x86>
    2904:	c9 f7       	brne	.-14     	; 0x28f8 <__ultoa_invert+0x5c>
    2906:	f6 cf       	rjmp	.-20     	; 0x28f4 <__ultoa_invert+0x58>
    2908:	46 2f       	mov	r20, r22
    290a:	4f 70       	andi	r20, 0x0F	; 15
    290c:	40 5d       	subi	r20, 0xD0	; 208
    290e:	4a 33       	cpi	r20, 0x3A	; 58
    2910:	18 f0       	brcs	.+6      	; 0x2918 <__ultoa_invert+0x7c>
    2912:	49 5d       	subi	r20, 0xD9	; 217
    2914:	31 fd       	sbrc	r19, 1
    2916:	40 52       	subi	r20, 0x20	; 32
    2918:	41 93       	st	Z+, r20
    291a:	02 d0       	rcall	.+4      	; 0x2920 <__ultoa_invert+0x84>
    291c:	a9 f7       	brne	.-22     	; 0x2908 <__ultoa_invert+0x6c>
    291e:	ea cf       	rjmp	.-44     	; 0x28f4 <__ultoa_invert+0x58>
    2920:	b4 e0       	ldi	r27, 0x04	; 4
    2922:	a6 95       	lsr	r26
    2924:	97 95       	ror	r25
    2926:	87 95       	ror	r24
    2928:	77 95       	ror	r23
    292a:	67 95       	ror	r22
    292c:	ba 95       	dec	r27
    292e:	c9 f7       	brne	.-14     	; 0x2922 <__ultoa_invert+0x86>
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	61 05       	cpc	r22, r1
    2934:	71 05       	cpc	r23, r1
    2936:	08 95       	ret
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
    293c:	0a 2e       	mov	r0, r26
    293e:	06 94       	lsr	r0
    2940:	57 95       	ror	r21
    2942:	47 95       	ror	r20
    2944:	37 95       	ror	r19
    2946:	27 95       	ror	r18
    2948:	ba 95       	dec	r27
    294a:	c9 f7       	brne	.-14     	; 0x293e <__ultoa_invert+0xa2>
    294c:	62 0f       	add	r22, r18
    294e:	73 1f       	adc	r23, r19
    2950:	84 1f       	adc	r24, r20
    2952:	95 1f       	adc	r25, r21
    2954:	a0 1d       	adc	r26, r0
    2956:	08 95       	ret

00002958 <__ctype_isfalse>:
    2958:	99 27       	eor	r25, r25
    295a:	88 27       	eor	r24, r24

0000295c <__ctype_istrue>:
    295c:	08 95       	ret

0000295e <_exit>:
    295e:	f8 94       	cli

00002960 <__stop_program>:
    2960:	ff cf       	rjmp	.-2      	; 0x2960 <__stop_program>
