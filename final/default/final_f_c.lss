
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001ed6  00001f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  0000200c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000384  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c16  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  00004006  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012c7  00000000  00000000  00004604  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  000058cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  00005b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b3a  00000000  00000000  00005fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00006ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LcdCustomChar>:
      c2:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d2:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e2:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f2:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000102 <__c.1988>:
     102:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e4       	ldi	r29, 0x40	; 64
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e6 ed       	ldi	r30, 0xD6	; 214
     122:	fe e1       	ldi	r31, 0x1E	; 30
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a2 3a       	cpi	r26, 0xA2	; 162
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	14 e0       	ldi	r17, 0x04	; 4
     136:	a2 ea       	ldi	r26, 0xA2	; 162
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a9 37       	cpi	r26, 0x79	; 121
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 37 06 	call	0xc6e	; 0xc6e <main>
     148:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     150:	ec e7       	ldi	r30, 0x7C	; 124
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	10 82       	st	Z, r1
	ADCSRA = 0;
     156:	aa e7       	ldi	r26, 0x7A	; 122
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     15c:	80 e4       	ldi	r24, 0x40	; 64
     15e:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     160:	87 e8       	ldi	r24, 0x87	; 135
     162:	8c 93       	st	X, r24
end
     164:	08 95       	ret

00000166 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     166:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     16c:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x00;    // start with no power
     16e:	1b b8       	out	0x0b, r1	; 11
end
     170:	08 95       	ret

00000172 <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     172:	ec e7       	ldi	r30, 0x7C	; 124
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     178:	80 54       	subi	r24, 0x40	; 64
     17a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     17c:	ea e7       	ldi	r30, 0x7A	; 122
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	80 64       	ori	r24, 0x40	; 64
     184:	80 83       	st	Z, r24
end
     186:	08 95       	ret

00000188 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     188:	5d 98       	cbi	0x0b, 5	; 11
     18a:	88 e8       	ldi	r24, 0x88	; 136
     18c:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18e:	20 e9       	ldi	r18, 0x90	; 144
     190:	31 e0       	ldi	r19, 0x01	; 1
     192:	f9 01       	movw	r30, r18
     194:	31 97       	sbiw	r30, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     198:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19a:	d9 f7       	brne	.-10     	; 0x192 <raise_pen+0xa>
	_delay_ms(500);
end
     19c:	08 95       	ret

0000019e <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     19e:	5d 9a       	sbi	0x0b, 5	; 11
     1a0:	80 ea       	ldi	r24, 0xA0	; 160
     1a2:	9f e0       	ldi	r25, 0x0F	; 15
     1a4:	20 e9       	ldi	r18, 0x90	; 144
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	f9 01       	movw	r30, r18
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <lower_pen+0xa>
	_delay_ms(400);
end
     1b2:	08 95       	ret

000001b4 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     1b4:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1b6:	8a e1       	ldi	r24, 0x1A	; 26
     1b8:	8a 95       	dec	r24
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     1bc:	5a 9a       	sbi	0x0b, 2	; 11
end
     1be:	08 95       	ret

000001c0 <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     1c0:	5a 98       	cbi	0x0b, 2	; 11
     1c2:	8a e1       	ldi	r24, 0x1A	; 26
     1c4:	8a 95       	dec	r24
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     1c8:	5b 9a       	sbi	0x0b, 3	; 11
end
     1ca:	08 95       	ret

000001cc <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     1cc:	5e 98       	cbi	0x0b, 6	; 11
     1ce:	8a e1       	ldi	r24, 0x1A	; 26
     1d0:	8a 95       	dec	r24
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     1d4:	5f 9a       	sbi	0x0b, 7	; 11
end
     1d6:	08 95       	ret

000001d8 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     1d8:	5f 98       	cbi	0x0b, 7	; 11
     1da:	8a e1       	ldi	r24, 0x1A	; 26
     1dc:	8a 95       	dec	r24
     1de:	f1 f7       	brne	.-4      	; 0x1dc <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     1e0:	5e 9a       	sbi	0x0b, 6	; 11
end
     1e2:	08 95       	ret

000001e4 <stop_x>:

void stop_x(void)
begin
	PORTD &= ~0x18;
     1e4:	8b b1       	in	r24, 0x0b	; 11
     1e6:	87 7e       	andi	r24, 0xE7	; 231
     1e8:	8b b9       	out	0x0b, r24	; 11
end
     1ea:	08 95       	ret

000001ec <stop_y>:

void stop_y(void)
begin
	PORTD &= ~0xc0; 
     1ec:	8b b1       	in	r24, 0x0b	; 11
     1ee:	8f 73       	andi	r24, 0x3F	; 63
     1f0:	8b b9       	out	0x0b, r24	; 11

end
     1f2:	08 95       	ret

000001f4 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x23;
     1f4:	8b b1       	in	r24, 0x0b	; 11
     1f6:	83 72       	andi	r24, 0x23	; 35
     1f8:	8b b9       	out	0x0b, r24	; 11
     1fa:	88 ee       	ldi	r24, 0xE8	; 232
     1fc:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fe:	20 e9       	ldi	r18, 0x90	; 144
     200:	31 e0       	ldi	r19, 0x01	; 1
     202:	f9 01       	movw	r30, r18
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     208:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20a:	d9 f7       	brne	.-10     	; 0x202 <stop_all+0xe>
	_delay_ms(100);
end
     20c:	08 95       	ret

0000020e <circle>:

// draw a circle
void circle(void)
begin
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     214:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     216:	8a e1       	ldi	r24, 0x1A	; 26
     218:	f8 2e       	mov	r15, r24
     21a:	8f 2d       	mov	r24, r15
     21c:	8a 95       	dec	r24
     21e:	f1 f7       	brne	.-4      	; 0x21c <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     220:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     222:	00 e8       	ldi	r16, 0x80	; 128
     224:	1e e3       	ldi	r17, 0x3E	; 62
     226:	c8 01       	movw	r24, r16
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     22c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     230:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     232:	8f 2d       	mov	r24, r15
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     238:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     23a:	c8 01       	movw	r24, r16
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     240:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     242:	8f 2d       	mov	r24, r15
     244:	8a 95       	dec	r24
     246:	f1 f7       	brne	.-4      	; 0x244 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     248:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	c8 01       	movw	r24, r16
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     250:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     254:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     256:	8f 2d       	mov	r24, r15
     258:	8a 95       	dec	r24
     25a:	f1 f7       	brne	.-4      	; 0x258 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     25c:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25e:	80 ee       	ldi	r24, 0xE0	; 224
     260:	9e e2       	ldi	r25, 0x2E	; 46
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     266:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     26a:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     26c:	8f 2d       	mov	r24, r15
     26e:	8a 95       	dec	r24
     270:	f1 f7       	brne	.-4      	; 0x26e <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     272:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     274:	00 e8       	ldi	r16, 0x80	; 128
     276:	15 e2       	ldi	r17, 0x25	; 37
     278:	c8 01       	movw	r24, r16
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     27e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     282:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     284:	8f 2d       	mov	r24, r15
     286:	8a 95       	dec	r24
     288:	f1 f7       	brne	.-4      	; 0x286 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     28a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     28c:	c8 01       	movw	r24, r16
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     292:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     294:	8f 2d       	mov	r24, r15
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     29a:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29c:	c8 01       	movw	r24, r16
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2a2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2a6:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2a8:	8f 2d       	mov	r24, r15
     2aa:	8a 95       	dec	r24
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     2ae:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b0:	80 e7       	ldi	r24, 0x70	; 112
     2b2:	97 e1       	ldi	r25, 0x17	; 23
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     2b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2bc:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2be:	8f 2d       	mov	r24, r15
     2c0:	8a 95       	dec	r24
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     2c4:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c6:	00 ea       	ldi	r16, 0xA0	; 160
     2c8:	1f e0       	ldi	r17, 0x0F	; 15
     2ca:	c8 01       	movw	r24, r16
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     2d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2d4:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2d6:	8f 2d       	mov	r24, r15
     2d8:	8a 95       	dec	r24
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     2dc:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2de:	c8 01       	movw	r24, r16
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2e4:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e6:	8f 2d       	mov	r24, r15
     2e8:	8a 95       	dec	r24
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     2ec:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ee:	c8 01       	movw	r24, r16
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     2f4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2f8:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2fa:	fa 94       	dec	r15
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     2fe:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     300:	80 ef       	ldi	r24, 0xF0	; 240
     302:	9a e0       	ldi	r25, 0x0A	; 10
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     308:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
end
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	08 95       	ret

00000314 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     318:	20 91 ce 02 	lds	r18, 0x02CE
     31c:	30 91 cf 02 	lds	r19, 0x02CF
     320:	00 d0       	rcall	.+0      	; 0x322 <print_position+0xe>
     322:	00 d0       	rcall	.+0      	; 0x324 <print_position+0x10>
     324:	00 d0       	rcall	.+0      	; 0x326 <print_position+0x12>
     326:	ed b7       	in	r30, 0x3d	; 61
     328:	fe b7       	in	r31, 0x3e	; 62
     32a:	31 96       	adiw	r30, 0x01	; 1
     32c:	0c eb       	ldi	r16, 0xBC	; 188
     32e:	12 e0       	ldi	r17, 0x02	; 2
     330:	ad b7       	in	r26, 0x3d	; 61
     332:	be b7       	in	r27, 0x3e	; 62
     334:	12 96       	adiw	r26, 0x02	; 2
     336:	1c 93       	st	X, r17
     338:	0e 93       	st	-X, r16
     33a:	11 97       	sbiw	r26, 0x01	; 1
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	93 83       	std	Z+3, r25	; 0x03
     342:	82 83       	std	Z+2, r24	; 0x02
     344:	35 83       	std	Z+5, r19	; 0x05
     346:	24 83       	std	Z+4, r18	; 0x04
     348:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
	LCDGotoXY(0,1);
     34c:	8d b7       	in	r24, 0x3d	; 61
     34e:	9e b7       	in	r25, 0x3e	; 62
     350:	06 96       	adiw	r24, 0x06	; 6
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	9e bf       	out	0x3e, r25	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	8d bf       	out	0x3d, r24	; 61
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     364:	f8 01       	movw	r30, r16
     366:	01 90       	ld	r0, Z+
     368:	00 20       	and	r0, r0
     36a:	e9 f7       	brne	.-6      	; 0x366 <print_position+0x52>
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	e0 1b       	sub	r30, r16
     370:	f1 0b       	sbc	r31, r17
     372:	c8 01       	movw	r24, r16
     374:	6e 2f       	mov	r22, r30
     376:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     37a:	20 91 98 03 	lds	r18, 0x0398
     37e:	30 91 99 03 	lds	r19, 0x0399
     382:	00 d0       	rcall	.+0      	; 0x384 <print_position+0x70>
     384:	00 d0       	rcall	.+0      	; 0x386 <print_position+0x72>
     386:	00 d0       	rcall	.+0      	; 0x388 <print_position+0x74>
     388:	ed b7       	in	r30, 0x3d	; 61
     38a:	fe b7       	in	r31, 0x3e	; 62
     38c:	31 96       	adiw	r30, 0x01	; 1
     38e:	ad b7       	in	r26, 0x3d	; 61
     390:	be b7       	in	r27, 0x3e	; 62
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	1c 93       	st	X, r17
     396:	0e 93       	st	-X, r16
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	88 e0       	ldi	r24, 0x08	; 8
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	93 83       	std	Z+3, r25	; 0x03
     3a0:	82 83       	std	Z+2, r24	; 0x02
     3a2:	35 83       	std	Z+5, r19	; 0x05
     3a4:	24 83       	std	Z+4, r18	; 0x04
     3a6:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
	LCDGotoXY(8,1);
     3aa:	8d b7       	in	r24, 0x3d	; 61
     3ac:	9e b7       	in	r25, 0x3e	; 62
     3ae:	06 96       	adiw	r24, 0x06	; 6
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	9e bf       	out	0x3e, r25	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	8d bf       	out	0x3d, r24	; 61
     3ba:	88 e0       	ldi	r24, 0x08	; 8
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3c2:	f8 01       	movw	r30, r16
     3c4:	01 90       	ld	r0, Z+
     3c6:	00 20       	and	r0, r0
     3c8:	e9 f7       	brne	.-6      	; 0x3c4 <print_position+0xb0>
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	e0 1b       	sub	r30, r16
     3ce:	f1 0b       	sbc	r31, r17
     3d0:	c8 01       	movw	r24, r16
     3d2:	6e 2f       	mov	r22, r30
     3d4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
end
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	08 95       	ret

000003de <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
     3e8:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     3ea:	42 30       	cpi	r20, 0x02	; 2
     3ec:	51 05       	cpc	r21, r1
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <move_to_XY+0x18>
     3f0:	0e 94 c4 00 	call	0x188	; 0x188 <raise_pen>
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <move_to_XY+0x22>
	if (d==1) lower_pen();
     3f6:	41 30       	cpi	r20, 0x01	; 1
     3f8:	51 05       	cpc	r21, r1
     3fa:	11 f4       	brne	.+4      	; 0x400 <move_to_XY+0x22>
     3fc:	0e 94 cf 00 	call	0x19e	; 0x19e <lower_pen>
	if(x_in>0 && y_in>0)
     400:	1c 16       	cp	r1, r28
     402:	1d 06       	cpc	r1, r29
     404:	0c f0       	brlt	.+2      	; 0x408 <move_to_XY+0x2a>
     406:	28 c1       	rjmp	.+592    	; 0x658 <move_to_XY+0x27a>
     408:	10 16       	cp	r1, r16
     40a:	11 06       	cpc	r1, r17
     40c:	0c f0       	brlt	.+2      	; 0x410 <move_to_XY+0x32>
     40e:	24 c1       	rjmp	.+584    	; 0x658 <move_to_XY+0x27a>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     410:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     414:	80 ec       	ldi	r24, 0xC0	; 192
     416:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     41a:	80 91 7a 00 	lds	r24, 0x007A
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 93 7a 00 	sts	0x007A, r24
	if (d==1) lower_pen();
	if(x_in>0 && y_in>0)
	begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     424:	80 91 7a 00 	lds	r24, 0x007A
     428:	86 fd       	sbrc	r24, 6
     42a:	fc cf       	rjmp	.-8      	; 0x424 <move_to_XY+0x46>
		x_pos = (int)ADCL;
     42c:	80 91 78 00 	lds	r24, 0x0078
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 cf 02 	sts	0x02CF, r25
     436:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     43a:	40 91 ce 02 	lds	r20, 0x02CE
     43e:	50 91 cf 02 	lds	r21, 0x02CF
     442:	20 91 79 00 	lds	r18, 0x0079
     446:	92 2f       	mov	r25, r18
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	84 0f       	add	r24, r20
     44c:	95 1f       	adc	r25, r21
     44e:	90 93 cf 02 	sts	0x02CF, r25
     452:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     456:	80 91 ce 02 	lds	r24, 0x02CE
     45a:	90 91 cf 02 	lds	r25, 0x02CF
     45e:	c8 17       	cp	r28, r24
     460:	d9 07       	cpc	r29, r25
     462:	50 f1       	brcs	.+84     	; 0x4b8 <move_to_XY+0xda>
     464:	5c c0       	rjmp	.+184    	; 0x51e <move_to_XY+0x140>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     466:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     46a:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     46e:	80 91 7a 00 	lds	r24, 0x007A
     472:	80 64       	ori	r24, 0x40	; 64
     474:	80 93 7a 00 	sts	0x007A, r24
     478:	05 c0       	rjmp	.+10     	; 0x484 <move_to_XY+0xa6>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     47a:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	84 2f       	mov	r24, r20
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <move_to_XY+0xa0>
	_delay_us(5);
	PORTD |= 0x04;
     482:	5a 9a       	sbi	0x0b, 2	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_negative_x();
     484:	80 91 7a 00 	lds	r24, 0x007A
     488:	86 fd       	sbrc	r24, 6
     48a:	f7 cf       	rjmp	.-18     	; 0x47a <move_to_XY+0x9c>
				x_pos = (int)ADCL;
     48c:	80 91 78 00 	lds	r24, 0x0078
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	90 93 cf 02 	sts	0x02CF, r25
     496:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     49a:	80 91 ce 02 	lds	r24, 0x02CE
     49e:	90 91 cf 02 	lds	r25, 0x02CF
     4a2:	20 91 79 00 	lds	r18, 0x0079
     4a6:	32 2f       	mov	r19, r18
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	82 0f       	add	r24, r18
     4ac:	93 1f       	adc	r25, r19
     4ae:	90 93 cf 02 	sts	0x02CF, r25
     4b2:	80 93 ce 02 	sts	0x02CE, r24
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <move_to_XY+0xde>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4b8:	50 ec       	ldi	r21, 0xC0	; 192
     4ba:	4a e1       	ldi	r20, 0x1A	; 26
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     4bc:	80 91 ce 02 	lds	r24, 0x02CE
     4c0:	90 91 cf 02 	lds	r25, 0x02CF
     4c4:	c8 17       	cp	r28, r24
     4c6:	d9 07       	cpc	r29, r25
     4c8:	70 f2       	brcs	.-100    	; 0x466 <move_to_XY+0x88>
     4ca:	32 c0       	rjmp	.+100    	; 0x530 <move_to_XY+0x152>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4cc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4d0:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     4d4:	80 91 7a 00 	lds	r24, 0x007A
     4d8:	80 64       	ori	r24, 0x40	; 64
     4da:	80 93 7a 00 	sts	0x007A, r24
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <move_to_XY+0x10c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     4e0:	5a 98       	cbi	0x0b, 2	; 11
     4e2:	84 2f       	mov	r24, r20
     4e4:	8a 95       	dec	r24
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <move_to_XY+0x106>
	_delay_us(5);
	PORTD |= 0x08;
     4e8:	5b 9a       	sbi	0x0b, 3	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
     4ea:	80 91 7a 00 	lds	r24, 0x007A
     4ee:	86 fd       	sbrc	r24, 6
     4f0:	f7 cf       	rjmp	.-18     	; 0x4e0 <move_to_XY+0x102>
				x_pos = (int)ADCL;
     4f2:	80 91 78 00 	lds	r24, 0x0078
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	90 93 cf 02 	sts	0x02CF, r25
     4fc:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     500:	80 91 ce 02 	lds	r24, 0x02CE
     504:	90 91 cf 02 	lds	r25, 0x02CF
     508:	20 91 79 00 	lds	r18, 0x0079
     50c:	32 2f       	mov	r19, r18
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	82 0f       	add	r24, r18
     512:	93 1f       	adc	r25, r19
     514:	90 93 cf 02 	sts	0x02CF, r25
     518:	80 93 ce 02 	sts	0x02CE, r24
     51c:	02 c0       	rjmp	.+4      	; 0x522 <move_to_XY+0x144>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     51e:	50 ec       	ldi	r21, 0xC0	; 192
     520:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     522:	80 91 ce 02 	lds	r24, 0x02CE
     526:	90 91 cf 02 	lds	r25, 0x02CF
     52a:	8c 17       	cp	r24, r28
     52c:	9d 07       	cpc	r25, r29
     52e:	70 f2       	brcs	.-100    	; 0x4cc <move_to_XY+0xee>
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
			end
			stop_all();
     530:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     534:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     538:	81 ec       	ldi	r24, 0xC1	; 193
     53a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     53e:	80 91 7a 00 	lds	r24, 0x007A
     542:	80 64       	ori	r24, 0x40	; 64
     544:	80 93 7a 00 	sts	0x007A, r24
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     548:	80 91 7a 00 	lds	r24, 0x007A
     54c:	86 fd       	sbrc	r24, 6
     54e:	fc cf       	rjmp	.-8      	; 0x548 <move_to_XY+0x16a>
		y_pos = (int)ADCL;
     550:	80 91 78 00 	lds	r24, 0x0078
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	90 93 99 03 	sts	0x0399, r25
     55a:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     55e:	40 91 98 03 	lds	r20, 0x0398
     562:	50 91 99 03 	lds	r21, 0x0399
     566:	20 91 79 00 	lds	r18, 0x0079
     56a:	92 2f       	mov	r25, r18
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	84 0f       	add	r24, r20
     570:	95 1f       	adc	r25, r21
     572:	90 93 99 03 	sts	0x0399, r25
     576:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     57a:	80 91 98 03 	lds	r24, 0x0398
     57e:	90 91 99 03 	lds	r25, 0x0399
     582:	08 17       	cp	r16, r24
     584:	19 07       	cpc	r17, r25
     586:	50 f1       	brcs	.+84     	; 0x5dc <move_to_XY+0x1fe>
     588:	5c c0       	rjmp	.+184    	; 0x642 <move_to_XY+0x264>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     58a:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     58e:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     592:	80 91 7a 00 	lds	r24, 0x007A
     596:	80 64       	ori	r24, 0x40	; 64
     598:	80 93 7a 00 	sts	0x007A, r24
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <move_to_XY+0x1ca>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     59e:	5e 98       	cbi	0x0b, 6	; 11
     5a0:	84 2f       	mov	r24, r20
     5a2:	8a 95       	dec	r24
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <move_to_XY+0x1c4>
	_delay_us(5);
	PORTD |= 0x80;
     5a6:	5f 9a       	sbi	0x0b, 7	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_negative_y();
     5a8:	80 91 7a 00 	lds	r24, 0x007A
     5ac:	86 fd       	sbrc	r24, 6
     5ae:	f7 cf       	rjmp	.-18     	; 0x59e <move_to_XY+0x1c0>
				y_pos = (int)ADCL;
     5b0:	80 91 78 00 	lds	r24, 0x0078
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	90 93 99 03 	sts	0x0399, r25
     5ba:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     5be:	80 91 98 03 	lds	r24, 0x0398
     5c2:	90 91 99 03 	lds	r25, 0x0399
     5c6:	20 91 79 00 	lds	r18, 0x0079
     5ca:	32 2f       	mov	r19, r18
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	82 0f       	add	r24, r18
     5d0:	93 1f       	adc	r25, r19
     5d2:	90 93 99 03 	sts	0x0399, r25
     5d6:	80 93 98 03 	sts	0x0398, r24
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <move_to_XY+0x202>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5dc:	51 ec       	ldi	r21, 0xC1	; 193
     5de:	4a e1       	ldi	r20, 0x1A	; 26
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     5e0:	80 91 98 03 	lds	r24, 0x0398
     5e4:	90 91 99 03 	lds	r25, 0x0399
     5e8:	08 17       	cp	r16, r24
     5ea:	19 07       	cpc	r17, r25
     5ec:	70 f2       	brcs	.-100    	; 0x58a <move_to_XY+0x1ac>
     5ee:	32 c0       	rjmp	.+100    	; 0x654 <move_to_XY+0x276>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5f0:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5f4:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     5f8:	80 91 7a 00 	lds	r24, 0x007A
     5fc:	80 64       	ori	r24, 0x40	; 64
     5fe:	80 93 7a 00 	sts	0x007A, r24
     602:	05 c0       	rjmp	.+10     	; 0x60e <move_to_XY+0x230>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     604:	5f 98       	cbi	0x0b, 7	; 11
     606:	84 2f       	mov	r24, r20
     608:	8a 95       	dec	r24
     60a:	f1 f7       	brne	.-4      	; 0x608 <move_to_XY+0x22a>
	_delay_us(5);
	PORTD |= 0x40;
     60c:	5e 9a       	sbi	0x0b, 6	; 11
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
     60e:	80 91 7a 00 	lds	r24, 0x007A
     612:	86 fd       	sbrc	r24, 6
     614:	f7 cf       	rjmp	.-18     	; 0x604 <move_to_XY+0x226>
				y_pos = (int)ADCL;
     616:	80 91 78 00 	lds	r24, 0x0078
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	90 93 99 03 	sts	0x0399, r25
     620:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     624:	80 91 98 03 	lds	r24, 0x0398
     628:	90 91 99 03 	lds	r25, 0x0399
     62c:	20 91 79 00 	lds	r18, 0x0079
     630:	32 2f       	mov	r19, r18
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	82 0f       	add	r24, r18
     636:	93 1f       	adc	r25, r19
     638:	90 93 99 03 	sts	0x0399, r25
     63c:	80 93 98 03 	sts	0x0398, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <move_to_XY+0x268>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     642:	51 ec       	ldi	r21, 0xC1	; 193
     644:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     646:	80 91 98 03 	lds	r24, 0x0398
     64a:	90 91 99 03 	lds	r25, 0x0399
     64e:	80 17       	cp	r24, r16
     650:	91 07       	cpc	r25, r17
     652:	70 f2       	brcs	.-100    	; 0x5f0 <move_to_XY+0x212>
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
			end
			stop_all();
     654:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     658:	0e 94 8a 01 	call	0x314	; 0x314 <print_position>
end
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <move_motor>:
		LCDstring(lcd_buffer, 10);

end

void move_motor()
begin
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	80 e1       	ldi	r24, 0x10	; 16
     66c:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     66e:	20 e9       	ldi	r18, 0x90	; 144
     670:	31 e0       	ldi	r19, 0x01	; 1
     672:	f9 01       	movw	r30, r18
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <move_motor+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     678:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     67a:	d9 f7       	brne	.-10     	; 0x672 <move_motor+0xc>
	int i =0;
	_delay_ms(1000);
	CopyStringtoLCD(LCD_hello, 0, 0);
     67c:	80 eb       	ldi	r24, 0xB0	; 176
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	0e 94 ca 06 	call	0xd94	; 0xd94 <CopyStringtoLCD>
     688:	80 e1       	ldi	r24, 0x10	; 16
     68a:	97 e2       	ldi	r25, 0x27	; 39
     68c:	20 e9       	ldi	r18, 0x90	; 144
     68e:	31 e0       	ldi	r19, 0x01	; 1
     690:	f9 01       	movw	r30, r18
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <move_motor+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     696:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     698:	d9 f7       	brne	.-10     	; 0x690 <move_motor+0x2a>
	_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
     69a:	80 91 ab 03 	lds	r24, 0x03AB
     69e:	90 91 ac 03 	lds	r25, 0x03AC
     6a2:	60 91 f4 01 	lds	r22, 0x01F4
     6a6:	70 91 f5 01 	lds	r23, 0x01F5
     6aa:	42 e0       	ldi	r20, 0x02	; 2
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	0e 94 ef 01 	call	0x3de	; 0x3de <move_to_XY>
     6b2:	c1 e0       	ldi	r28, 0x01	; 1
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     6b6:	be 01       	movw	r22, r28
     6b8:	66 0f       	add	r22, r22
     6ba:	77 1f       	adc	r23, r23
     6bc:	db 01       	movw	r26, r22
     6be:	a5 55       	subi	r26, 0x55	; 85
     6c0:	bc 4f       	sbci	r27, 0xFC	; 252
     6c2:	8d 91       	ld	r24, X+
     6c4:	9c 91       	ld	r25, X
     6c6:	11 97       	sbiw	r26, 0x01	; 1
     6c8:	97 fd       	sbrc	r25, 7
     6ca:	13 c0       	rjmp	.+38     	; 0x6f2 <move_motor+0x8c>
     6cc:	fb 01       	movw	r30, r22
     6ce:	ec 50       	subi	r30, 0x0C	; 12
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	97 fd       	sbrc	r25, 7
     6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <move_motor+0x8c>
		begin
			move_to_XY(x_vect[i],y_vect[i],1);
     6da:	8d 91       	ld	r24, X+
     6dc:	9c 91       	ld	r25, X
     6de:	60 81       	ld	r22, Z
     6e0:	71 81       	ldd	r23, Z+1	; 0x01
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	0e 94 ef 01 	call	0x3de	; 0x3de <move_to_XY>
	int i =0;
	_delay_ms(1000);
	CopyStringtoLCD(LCD_hello, 0, 0);
	_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
	for(i=1;i<100;i++)
     6ea:	21 96       	adiw	r28, 0x01	; 1
     6ec:	c4 36       	cpi	r28, 0x64	; 100
     6ee:	d1 05       	cpc	r29, r1
     6f0:	11 f7       	brne	.-60     	; 0x6b6 <move_motor+0x50>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2);
     6f2:	8c eb       	ldi	r24, 0xBC	; 188
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	6c eb       	ldi	r22, 0xBC	; 188
     6f8:	72 e0       	ldi	r23, 0x02	; 2
     6fa:	42 e0       	ldi	r20, 0x02	; 2
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 ef 01 	call	0x3de	; 0x3de <move_to_XY>
end
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <get_frame>:
	// print where you end up
	print_position();			
end

void get_frame()
begin
     708:	2f 92       	push	r2
     70a:	3f 92       	push	r3
     70c:	4f 92       	push	r4
     70e:	5f 92       	push	r5
     710:	6f 92       	push	r6
     712:	7f 92       	push	r7
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	69 97       	sbiw	r28, 0x19	; 25
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
     73c:	8e ef       	ldi	r24, 0xFE	; 254
     73e:	9f ef       	ldi	r25, 0xFF	; 255
     740:	9a 83       	std	Y+2, r25	; 0x02
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	9c 83       	std	Y+4, r25	; 0x04
     746:	8b 83       	std	Y+3, r24	; 0x03
     748:	9e 83       	std	Y+6, r25	; 0x06
     74a:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     74c:	18 86       	std	Y+8, r1	; 0x08
     74e:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
     750:	0a e9       	ldi	r16, 0x9A	; 154
     752:	13 e0       	ldi	r17, 0x03	; 3
     754:	c8 01       	movw	r24, r16
     756:	60 e1       	ldi	r22, 0x10	; 16
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     75e:	60 91 75 04 	lds	r22, 0x0475
     762:	70 91 76 04 	lds	r23, 0x0476
     766:	c8 01       	movw	r24, r16
     768:	0e 94 ef 08 	call	0x11de	; 0x11de <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     76c:	00 d0       	rcall	.+0      	; 0x76e <get_frame+0x66>
     76e:	00 d0       	rcall	.+0      	; 0x770 <get_frame+0x68>
     770:	00 d0       	rcall	.+0      	; 0x772 <get_frame+0x6a>
     772:	ed b7       	in	r30, 0x3d	; 61
     774:	fe b7       	in	r31, 0x3e	; 62
     776:	31 96       	adiw	r30, 0x01	; 1
     778:	80 91 73 04 	lds	r24, 0x0473
     77c:	90 91 74 04 	lds	r25, 0x0474
     780:	ad b7       	in	r26, 0x3d	; 61
     782:	be b7       	in	r27, 0x3e	; 62
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	11 97       	sbiw	r26, 0x01	; 1
     78c:	8e e1       	ldi	r24, 0x1E	; 30
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	93 83       	std	Z+3, r25	; 0x03
     792:	82 83       	std	Z+2, r24	; 0x02
     794:	ce 01       	movw	r24, r28
     796:	07 96       	adiw	r24, 0x07	; 7
     798:	95 83       	std	Z+5, r25	; 0x05
     79a:	84 83       	std	Z+4, r24	; 0x04
     79c:	0e 94 1a 09 	call	0x1234	; 0x1234 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     7a0:	ed b7       	in	r30, 0x3d	; 61
     7a2:	fe b7       	in	r31, 0x3e	; 62
     7a4:	31 96       	adiw	r30, 0x01	; 1
     7a6:	ad b7       	in	r26, 0x3d	; 61
     7a8:	be b7       	in	r27, 0x3e	; 62
     7aa:	12 96       	adiw	r26, 0x02	; 2
     7ac:	1c 93       	st	X, r17
     7ae:	0e 93       	st	-X, r16
     7b0:	11 97       	sbiw	r26, 0x01	; 1
     7b2:	82 e2       	ldi	r24, 0x22	; 34
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	93 83       	std	Z+3, r25	; 0x03
     7b8:	82 83       	std	Z+2, r24	; 0x02
     7ba:	8f 81       	ldd	r24, Y+7	; 0x07
     7bc:	98 85       	ldd	r25, Y+8	; 0x08
     7be:	95 83       	std	Z+5, r25	; 0x05
     7c0:	84 83       	std	Z+4, r24	; 0x04
     7c2:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>

	LCDGotoXY(0, 0);
     7c6:	6d b7       	in	r22, 0x3d	; 61
     7c8:	7e b7       	in	r23, 0x3e	; 62
     7ca:	6a 5f       	subi	r22, 0xFA	; 250
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	7e bf       	out	0x3e, r23	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	6d bf       	out	0x3d, r22	; 61
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     7e0:	f8 01       	movw	r30, r16
     7e2:	01 90       	ld	r0, Z+
     7e4:	00 20       	and	r0, r0
     7e6:	e9 f7       	brne	.-6      	; 0x7e2 <get_frame+0xda>
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	e0 1b       	sub	r30, r16
     7ec:	f1 0b       	sbc	r31, r17
     7ee:	c8 01       	movw	r24, r16
     7f0:	6e 2f       	mov	r22, r30
     7f2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
     7f6:	ee 24       	eor	r14, r14
     7f8:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     7fa:	79 e0       	ldi	r23, 0x09	; 9
     7fc:	a7 2e       	mov	r10, r23
     7fe:	b1 2c       	mov	r11, r1
     800:	ac 0e       	add	r10, r28
     802:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
     804:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     806:	0c eb       	ldi	r16, 0xBC	; 188
     808:	12 e0       	ldi	r17, 0x02	; 2
     80a:	65 e5       	ldi	r22, 0x55	; 85
     80c:	26 2e       	mov	r2, r22
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     812:	5b e4       	ldi	r21, 0x4B	; 75
     814:	45 2e       	mov	r4, r21
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     81a:	4e ef       	ldi	r20, 0xFE	; 254
     81c:	c4 2e       	mov	r12, r20
     81e:	4f ef       	ldi	r20, 0xFF	; 255
     820:	d4 2e       	mov	r13, r20
     822:	30 e9       	ldi	r19, 0x90	; 144
     824:	63 2e       	mov	r6, r19
     826:	31 e0       	ldi	r19, 0x01	; 1
     828:	73 2e       	mov	r7, r19
     82a:	ff c0       	rjmp	.+510    	; 0xa2a <get_frame+0x322>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     82c:	60 91 75 04 	lds	r22, 0x0475
     830:	70 91 76 04 	lds	r23, 0x0476
     834:	84 e3       	ldi	r24, 0x34	; 52
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 ef 08 	call	0x11de	; 0x11de <fputs>
	fscanf(stdin, "%s", buffer) ;
     83c:	00 d0       	rcall	.+0      	; 0x83e <get_frame+0x136>
     83e:	00 d0       	rcall	.+0      	; 0x840 <get_frame+0x138>
     840:	00 d0       	rcall	.+0      	; 0x842 <get_frame+0x13a>
     842:	ed b7       	in	r30, 0x3d	; 61
     844:	fe b7       	in	r31, 0x3e	; 62
     846:	31 96       	adiw	r30, 0x01	; 1
     848:	80 91 73 04 	lds	r24, 0x0473
     84c:	90 91 74 04 	lds	r25, 0x0474
     850:	ad b7       	in	r26, 0x3d	; 61
     852:	be b7       	in	r27, 0x3e	; 62
     854:	12 96       	adiw	r26, 0x02	; 2
     856:	9c 93       	st	X, r25
     858:	8e 93       	st	-X, r24
     85a:	11 97       	sbiw	r26, 0x01	; 1
     85c:	69 e3       	ldi	r22, 0x39	; 57
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	73 83       	std	Z+3, r23	; 0x03
     862:	62 83       	std	Z+2, r22	; 0x02
     864:	b5 82       	std	Z+5, r11	; 0x05
     866:	a4 82       	std	Z+4, r10	; 0x04
     868:	0e 94 1a 09 	call	0x1234	; 0x1234 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     86c:	00 d0       	rcall	.+0      	; 0x86e <get_frame+0x166>
     86e:	00 d0       	rcall	.+0      	; 0x870 <get_frame+0x168>
     870:	ed b7       	in	r30, 0x3d	; 61
     872:	fe b7       	in	r31, 0x3e	; 62
     874:	31 96       	adiw	r30, 0x01	; 1
     876:	ad b7       	in	r26, 0x3d	; 61
     878:	be b7       	in	r27, 0x3e	; 62
     87a:	12 96       	adiw	r26, 0x02	; 2
     87c:	bc 92       	st	X, r11
     87e:	ae 92       	st	-X, r10
     880:	11 97       	sbiw	r26, 0x01	; 1
     882:	6c e3       	ldi	r22, 0x3C	; 60
     884:	71 e0       	ldi	r23, 0x01	; 1
     886:	73 83       	std	Z+3, r23	; 0x03
     888:	62 83       	std	Z+2, r22	; 0x02
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	8c 0f       	add	r24, r28
     890:	9d 1f       	adc	r25, r29
     892:	95 83       	std	Z+5, r25	; 0x05
     894:	84 83       	std	Z+4, r24	; 0x04
     896:	a3 e0       	ldi	r26, 0x03	; 3
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	ac 0f       	add	r26, r28
     89c:	bd 1f       	adc	r27, r29
     89e:	b7 83       	std	Z+7, r27	; 0x07
     8a0:	a6 83       	std	Z+6, r26	; 0x06
     8a2:	65 e0       	ldi	r22, 0x05	; 5
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	6c 0f       	add	r22, r28
     8a8:	7d 1f       	adc	r23, r29
     8aa:	71 87       	std	Z+9, r23	; 0x09
     8ac:	60 87       	std	Z+8, r22	; 0x08
     8ae:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	ed b7       	in	r30, 0x3d	; 61
     8bc:	fe b7       	in	r31, 0x3e	; 62
     8be:	31 96       	adiw	r30, 0x01	; 1
     8c0:	ad b7       	in	r26, 0x3d	; 61
     8c2:	be b7       	in	r27, 0x3e	; 62
     8c4:	11 96       	adiw	r26, 0x01	; 1
     8c6:	8c 92       	st	X, r8
     8c8:	11 97       	sbiw	r26, 0x01	; 1
     8ca:	12 96       	adiw	r26, 0x02	; 2
     8cc:	9c 92       	st	X, r9
     8ce:	66 e4       	ldi	r22, 0x46	; 70
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	73 83       	std	Z+3, r23	; 0x03
     8d4:	62 83       	std	Z+2, r22	; 0x02
     8d6:	f5 82       	std	Z+5, r15	; 0x05
     8d8:	e4 82       	std	Z+4, r14	; 0x04
     8da:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
	LCDGotoXY(11, 0);
     8de:	8d b7       	in	r24, 0x3d	; 61
     8e0:	9e b7       	in	r25, 0x3e	; 62
     8e2:	06 96       	adiw	r24, 0x06	; 6
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	9e bf       	out	0x3e, r25	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	8d bf       	out	0x3d, r24	; 61
     8ee:	8b e0       	ldi	r24, 0x0B	; 11
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     8f6:	c4 01       	movw	r24, r8
     8f8:	62 e0       	ldi	r22, 0x02	; 2
     8fa:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
	LCDstring(buffer,15);
     906:	c5 01       	movw	r24, r10
     908:	6f e0       	ldi	r22, 0x0F	; 15
     90a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     90e:	49 81       	ldd	r20, Y+1	; 0x01
     910:	5a 81       	ldd	r21, Y+2	; 0x02
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	4f 3f       	cpi	r20, 0xFF	; 255
     916:	59 07       	cpc	r21, r25
     918:	0c f4       	brge	.+2      	; 0x91c <get_frame+0x214>
     91a:	5a c0       	rjmp	.+180    	; 0x9d0 <get_frame+0x2c8>
     91c:	2b 81       	ldd	r18, Y+3	; 0x03
     91e:	3c 81       	ldd	r19, Y+4	; 0x04
     920:	af ef       	ldi	r26, 0xFF	; 255
     922:	2f 3f       	cpi	r18, 0xFF	; 255
     924:	3a 07       	cpc	r19, r26
     926:	0c f4       	brge	.+2      	; 0x92a <get_frame+0x222>
     928:	53 c0       	rjmp	.+166    	; 0x9d0 <get_frame+0x2c8>
     92a:	8d 81       	ldd	r24, Y+5	; 0x05
     92c:	9e 81       	ldd	r25, Y+6	; 0x06
     92e:	bf ef       	ldi	r27, 0xFF	; 255
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	9b 07       	cpc	r25, r27
     934:	0c f4       	brge	.+2      	; 0x938 <get_frame+0x230>
     936:	4c c0       	rjmp	.+152    	; 0x9d0 <get_frame+0x2c8>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     938:	6d b7       	in	r22, 0x3d	; 61
     93a:	7e b7       	in	r23, 0x3e	; 62
     93c:	6a 50       	subi	r22, 0x0A	; 10
     93e:	70 40       	sbci	r23, 0x00	; 0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	7e bf       	out	0x3e, r23	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	6d bf       	out	0x3d, r22	; 61
     94a:	ed b7       	in	r30, 0x3d	; 61
     94c:	fe b7       	in	r31, 0x3e	; 62
     94e:	31 96       	adiw	r30, 0x01	; 1
     950:	ad b7       	in	r26, 0x3d	; 61
     952:	be b7       	in	r27, 0x3e	; 62
     954:	12 96       	adiw	r26, 0x02	; 2
     956:	1c 93       	st	X, r17
     958:	0e 93       	st	-X, r16
     95a:	11 97       	sbiw	r26, 0x01	; 1
     95c:	53 82       	std	Z+3, r5	; 0x03
     95e:	42 82       	std	Z+2, r4	; 0x02
     960:	55 83       	std	Z+5, r21	; 0x05
     962:	44 83       	std	Z+4, r20	; 0x04
     964:	37 83       	std	Z+7, r19	; 0x07
     966:	26 83       	std	Z+6, r18	; 0x06
     968:	91 87       	std	Z+9, r25	; 0x09
     96a:	80 87       	std	Z+8, r24	; 0x08
     96c:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
		LCDGotoXY(0, 0);
     970:	6d b7       	in	r22, 0x3d	; 61
     972:	7e b7       	in	r23, 0x3e	; 62
     974:	66 5f       	subi	r22, 0xF6	; 246
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	7e bf       	out	0x3e, r23	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	6d bf       	out	0x3d, r22	; 61
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     98a:	c8 01       	movw	r24, r16
     98c:	6a e0       	ldi	r22, 0x0A	; 10
     98e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
		x_vect[i] = x;
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
     996:	d7 01       	movw	r26, r14
     998:	aa 0f       	add	r26, r26
     99a:	bb 1f       	adc	r27, r27
     99c:	fd 01       	movw	r30, r26
     99e:	e5 55       	subi	r30, 0x55	; 85
     9a0:	fc 4f       	sbci	r31, 0xFC	; 252
     9a2:	91 83       	std	Z+1, r25	; 0x01
     9a4:	80 83       	st	Z, r24
		y_vect[i] = y;
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	fd 01       	movw	r30, r26
     9ac:	ec 50       	subi	r30, 0x0C	; 12
     9ae:	fe 4f       	sbci	r31, 0xFE	; 254
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
		d_vect[i] = d;
     9b4:	8d 81       	ldd	r24, Y+5	; 0x05
     9b6:	9e 81       	ldd	r25, Y+6	; 0x06
     9b8:	a0 53       	subi	r26, 0x30	; 48
     9ba:	bd 4f       	sbci	r27, 0xFD	; 253
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	8e 93       	st	-X, r24
		x=-2;
     9c2:	da 82       	std	Y+2, r13	; 0x02
     9c4:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     9c6:	dc 82       	std	Y+4, r13	; 0x04
     9c8:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     9ca:	de 82       	std	Y+6, r13	; 0x06
     9cc:	cd 82       	std	Y+5, r12	; 0x05
     9ce:	23 c0       	rjmp	.+70     	; 0xa16 <get_frame+0x30e>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <get_frame+0x2ca>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <get_frame+0x2cc>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <get_frame+0x2ce>
     9d6:	ed b7       	in	r30, 0x3d	; 61
     9d8:	fe b7       	in	r31, 0x3e	; 62
     9da:	31 96       	adiw	r30, 0x01	; 1
     9dc:	ad b7       	in	r26, 0x3d	; 61
     9de:	be b7       	in	r27, 0x3e	; 62
     9e0:	12 96       	adiw	r26, 0x02	; 2
     9e2:	1c 93       	st	X, r17
     9e4:	0e 93       	st	-X, r16
     9e6:	11 97       	sbiw	r26, 0x01	; 1
     9e8:	33 82       	std	Z+3, r3	; 0x03
     9ea:	22 82       	std	Z+2, r2	; 0x02
     9ec:	f5 82       	std	Z+5, r15	; 0x05
     9ee:	e4 82       	std	Z+4, r14	; 0x04
     9f0:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
		LCDGotoXY(0, 0);
     9f4:	6d b7       	in	r22, 0x3d	; 61
     9f6:	7e b7       	in	r23, 0x3e	; 62
     9f8:	6a 5f       	subi	r22, 0xFA	; 250
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	7e bf       	out	0x3e, r23	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	6d bf       	out	0x3d, r22	; 61
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a0e:	c8 01       	movw	r24, r16
     a10:	6a e0       	ldi	r22, 0x0A	; 10
     a12:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
     a16:	80 e1       	ldi	r24, 0x10	; 16
     a18:	97 e2       	ldi	r25, 0x27	; 39
     a1a:	f3 01       	movw	r30, r6
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <get_frame+0x314>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a20:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a22:	d9 f7       	brne	.-10     	; 0xa1a <get_frame+0x312>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     a24:	08 94       	sec
     a26:	e1 1c       	adc	r14, r1
     a28:	f1 1c       	adc	r15, r1
     a2a:	8f 81       	ldd	r24, Y+7	; 0x07
     a2c:	98 85       	ldd	r25, Y+8	; 0x08
     a2e:	e8 16       	cp	r14, r24
     a30:	f9 06       	cpc	r15, r25
     a32:	08 f4       	brcc	.+2      	; 0xa36 <get_frame+0x32e>
     a34:	fb ce       	rjmp	.-522    	; 0x82c <get_frame+0x124>
     a36:	80 e2       	ldi	r24, 0x20	; 32
     a38:	9e e4       	ldi	r25, 0x4E	; 78
     a3a:	20 e9       	ldi	r18, 0x90	; 144
     a3c:	31 e0       	ldi	r19, 0x01	; 1
     a3e:	f9 01       	movw	r30, r18
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <get_frame+0x338>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a46:	d9 f7       	brne	.-10     	; 0xa3e <get_frame+0x336>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     a48:	00 d0       	rcall	.+0      	; 0xa4a <get_frame+0x342>
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <get_frame+0x344>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <get_frame+0x346>
     a4e:	ed b7       	in	r30, 0x3d	; 61
     a50:	fe b7       	in	r31, 0x3e	; 62
     a52:	31 96       	adiw	r30, 0x01	; 1
     a54:	0c eb       	ldi	r16, 0xBC	; 188
     a56:	12 e0       	ldi	r17, 0x02	; 2
     a58:	ad b7       	in	r26, 0x3d	; 61
     a5a:	be b7       	in	r27, 0x3e	; 62
     a5c:	12 96       	adiw	r26, 0x02	; 2
     a5e:	1c 93       	st	X, r17
     a60:	0e 93       	st	-X, r16
     a62:	11 97       	sbiw	r26, 0x01	; 1
     a64:	81 e6       	ldi	r24, 0x61	; 97
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	93 83       	std	Z+3, r25	; 0x03
     a6a:	82 83       	std	Z+2, r24	; 0x02
     a6c:	f5 82       	std	Z+5, r15	; 0x05
     a6e:	e4 82       	std	Z+4, r14	; 0x04
     a70:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
		LCDGotoXY(0, 0);
     a74:	6d b7       	in	r22, 0x3d	; 61
     a76:	7e b7       	in	r23, 0x3e	; 62
     a78:	6a 5f       	subi	r22, 0xFA	; 250
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	7e bf       	out	0x3e, r23	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	6d bf       	out	0x3d, r22	; 61
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a8e:	c8 01       	movw	r24, r16
     a90:	6a e0       	ldi	r22, 0x0A	; 10
     a92:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     a96:	20 91 ab 03 	lds	r18, 0x03AB
     a9a:	30 91 ac 03 	lds	r19, 0x03AC
     a9e:	40 91 ad 03 	lds	r20, 0x03AD
     aa2:	50 91 ae 03 	lds	r21, 0x03AE
     aa6:	60 91 af 03 	lds	r22, 0x03AF
     aaa:	70 91 b0 03 	lds	r23, 0x03B0
     aae:	e0 90 b1 03 	lds	r14, 0x03B1
     ab2:	f0 90 b2 03 	lds	r15, 0x03B2
     ab6:	8d b7       	in	r24, 0x3d	; 61
     ab8:	9e b7       	in	r25, 0x3e	; 62
     aba:	0c 97       	sbiw	r24, 0x0c	; 12
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	9e bf       	out	0x3e, r25	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	8d bf       	out	0x3d, r24	; 61
     ac6:	ed b7       	in	r30, 0x3d	; 61
     ac8:	fe b7       	in	r31, 0x3e	; 62
     aca:	31 96       	adiw	r30, 0x01	; 1
     acc:	ad b7       	in	r26, 0x3d	; 61
     ace:	be b7       	in	r27, 0x3e	; 62
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	1c 93       	st	X, r17
     ad4:	0e 93       	st	-X, r16
     ad6:	11 97       	sbiw	r26, 0x01	; 1
     ad8:	8d e6       	ldi	r24, 0x6D	; 109
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	93 83       	std	Z+3, r25	; 0x03
     ade:	82 83       	std	Z+2, r24	; 0x02
     ae0:	35 83       	std	Z+5, r19	; 0x05
     ae2:	24 83       	std	Z+4, r18	; 0x04
     ae4:	57 83       	std	Z+7, r21	; 0x07
     ae6:	46 83       	std	Z+6, r20	; 0x06
     ae8:	71 87       	std	Z+9, r23	; 0x09
     aea:	60 87       	std	Z+8, r22	; 0x08
     aec:	f3 86       	std	Z+11, r15	; 0x0b
     aee:	e2 86       	std	Z+10, r14	; 0x0a
     af0:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
		LCDGotoXY(0, 0);
     af4:	6d b7       	in	r22, 0x3d	; 61
     af6:	7e b7       	in	r23, 0x3e	; 62
     af8:	64 5f       	subi	r22, 0xF4	; 244
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	7e bf       	out	0x3e, r23	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	6d bf       	out	0x3d, r22	; 61
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     b0e:	c8 01       	movw	r24, r16
     b10:	6a e0       	ldi	r22, 0x0A	; 10
     b12:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     b16:	20 91 f4 01 	lds	r18, 0x01F4
     b1a:	30 91 f5 01 	lds	r19, 0x01F5
     b1e:	40 91 f6 01 	lds	r20, 0x01F6
     b22:	50 91 f7 01 	lds	r21, 0x01F7
     b26:	60 91 f8 01 	lds	r22, 0x01F8
     b2a:	70 91 f9 01 	lds	r23, 0x01F9
     b2e:	e0 90 fa 01 	lds	r14, 0x01FA
     b32:	f0 90 fb 01 	lds	r15, 0x01FB
     b36:	8d b7       	in	r24, 0x3d	; 61
     b38:	9e b7       	in	r25, 0x3e	; 62
     b3a:	0c 97       	sbiw	r24, 0x0c	; 12
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	9e bf       	out	0x3e, r25	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	8d bf       	out	0x3d, r24	; 61
     b46:	ed b7       	in	r30, 0x3d	; 61
     b48:	fe b7       	in	r31, 0x3e	; 62
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	ad b7       	in	r26, 0x3d	; 61
     b4e:	be b7       	in	r27, 0x3e	; 62
     b50:	12 96       	adiw	r26, 0x02	; 2
     b52:	1c 93       	st	X, r17
     b54:	0e 93       	st	-X, r16
     b56:	11 97       	sbiw	r26, 0x01	; 1
     b58:	87 e7       	ldi	r24, 0x77	; 119
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	93 83       	std	Z+3, r25	; 0x03
     b5e:	82 83       	std	Z+2, r24	; 0x02
     b60:	35 83       	std	Z+5, r19	; 0x05
     b62:	24 83       	std	Z+4, r18	; 0x04
     b64:	57 83       	std	Z+7, r21	; 0x07
     b66:	46 83       	std	Z+6, r20	; 0x06
     b68:	71 87       	std	Z+9, r23	; 0x09
     b6a:	60 87       	std	Z+8, r22	; 0x08
     b6c:	f3 86       	std	Z+11, r15	; 0x0b
     b6e:	e2 86       	std	Z+10, r14	; 0x0a
     b70:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
		LCDGotoXY(0, 1);
     b74:	6d b7       	in	r22, 0x3d	; 61
     b76:	7e b7       	in	r23, 0x3e	; 62
     b78:	64 5f       	subi	r22, 0xF4	; 244
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	7e bf       	out	0x3e, r23	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	6d bf       	out	0x3d, r22	; 61
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     b8e:	c8 01       	movw	r24, r16
     b90:	6a e0       	ldi	r22, 0x0A	; 10
     b92:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     b96:	20 91 d0 02 	lds	r18, 0x02D0
     b9a:	30 91 d1 02 	lds	r19, 0x02D1
     b9e:	40 91 d2 02 	lds	r20, 0x02D2
     ba2:	50 91 d3 02 	lds	r21, 0x02D3
     ba6:	60 91 d4 02 	lds	r22, 0x02D4
     baa:	70 91 d5 02 	lds	r23, 0x02D5
     bae:	e0 90 d6 02 	lds	r14, 0x02D6
     bb2:	f0 90 d7 02 	lds	r15, 0x02D7
     bb6:	8d b7       	in	r24, 0x3d	; 61
     bb8:	9e b7       	in	r25, 0x3e	; 62
     bba:	0c 97       	sbiw	r24, 0x0c	; 12
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	9e bf       	out	0x3e, r25	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	8d bf       	out	0x3d, r24	; 61
     bc6:	ed b7       	in	r30, 0x3d	; 61
     bc8:	fe b7       	in	r31, 0x3e	; 62
     bca:	31 96       	adiw	r30, 0x01	; 1
     bcc:	ad b7       	in	r26, 0x3d	; 61
     bce:	be b7       	in	r27, 0x3e	; 62
     bd0:	12 96       	adiw	r26, 0x02	; 2
     bd2:	1c 93       	st	X, r17
     bd4:	0e 93       	st	-X, r16
     bd6:	11 97       	sbiw	r26, 0x01	; 1
     bd8:	81 e8       	ldi	r24, 0x81	; 129
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	93 83       	std	Z+3, r25	; 0x03
     bde:	82 83       	std	Z+2, r24	; 0x02
     be0:	35 83       	std	Z+5, r19	; 0x05
     be2:	24 83       	std	Z+4, r18	; 0x04
     be4:	57 83       	std	Z+7, r21	; 0x07
     be6:	46 83       	std	Z+6, r20	; 0x06
     be8:	71 87       	std	Z+9, r23	; 0x09
     bea:	60 87       	std	Z+8, r22	; 0x08
     bec:	f3 86       	std	Z+11, r15	; 0x0b
     bee:	e2 86       	std	Z+10, r14	; 0x0a
     bf0:	0e 94 2b 09 	call	0x1256	; 0x1256 <sprintf>
		LCDGotoXY(10, 0);
     bf4:	6d b7       	in	r22, 0x3d	; 61
     bf6:	7e b7       	in	r23, 0x3e	; 62
     bf8:	64 5f       	subi	r22, 0xF4	; 244
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	7e bf       	out	0x3e, r23	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	6d bf       	out	0x3d, r22	; 61
     c06:	8a e0       	ldi	r24, 0x0A	; 10
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     c0e:	c8 01       	movw	r24, r16
     c10:	6a e0       	ldi	r22, 0x0A	; 10
     c12:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCDstring>

end
     c16:	69 96       	adiw	r28, 0x19	; 25
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	9f 90       	pop	r9
     c38:	8f 90       	pop	r8
     c3a:	7f 90       	pop	r7
     c3c:	6f 90       	pop	r6
     c3e:	5f 90       	pop	r5
     c40:	4f 90       	pop	r4
     c42:	3f 90       	pop	r3
     c44:	2f 90       	pop	r2
     c46:	08 95       	ret

00000c48 <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     c48:	0e 94 05 07 	call	0xe0a	; 0xe0a <LCDinit>
	LCDcursorOFF();
     c4c:	0e 94 6d 07 	call	0xeda	; 0xeda <LCDcursorOFF>
	LCDclr();	//clear the display
     c50:	0e 94 9e 06 	call	0xd3c	; 0xd3c <LCDclr>
	LCDGotoXY(0,0);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     c5c:	8c e8       	ldi	r24, 0x8C	; 140
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 ca 06 	call	0xd94	; 0xd94 <CopyStringtoLCD>
	LCD_char_count = 0;
     c68:	10 92 cd 02 	sts	0x02CD, r1
end
     c6c:	08 95       	ret

00000c6e <main>:
// --- Main Program ----------------------------------
int main(void) {
  
  //initialize();
  
	LCD_init();
     c6e:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     c72:	0e 94 d5 07 	call	0xfaa	; 0xfaa <uart_init>
  stdout = stdin = stderr = &uart_str;
     c76:	8b e8       	ldi	r24, 0x8B	; 139
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	90 93 78 04 	sts	0x0478, r25
     c7e:	80 93 77 04 	sts	0x0477, r24
     c82:	90 93 74 04 	sts	0x0474, r25
     c86:	80 93 73 04 	sts	0x0473, r24
     c8a:	90 93 76 04 	sts	0x0476, r25
     c8e:	80 93 75 04 	sts	0x0475, r24
  while(1)
  begin
  	//while(Botton not pressed);
  	get_frame();
     c92:	0e 94 84 03 	call	0x708	; 0x708 <get_frame>
	move_motor();
     c96:	0e 94 33 03 	call	0x666	; 0x666 <move_motor>
     c9a:	fb cf       	rjmp	.-10     	; 0xc92 <main+0x24>

00000c9c <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     c9c:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     ca2:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x00;    // start with no power
     ca4:	1b b8       	out	0x0b, r1	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
     ca6:	0e 94 24 06 	call	0xc48	; 0xc48 <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     caa:	ec e7       	ldi	r30, 0x7C	; 124
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	10 82       	st	Z, r1
	ADCSRA = 0;
     cb0:	aa e7       	ldi	r26, 0x7A	; 122
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     cba:	87 e8       	ldi	r24, 0x87	; 135
     cbc:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
     cbe:	08 95       	ret

00000cc0 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     cc0:	28 2f       	mov	r18, r24
     cc2:	20 7f       	andi	r18, 0xF0	; 240
     cc4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     cc6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     cc8:	42 9a       	sbi	0x08, 2	; 8
     cca:	20 e4       	ldi	r18, 0x40	; 64
     ccc:	3f e1       	ldi	r19, 0x1F	; 31
     cce:	f9 01       	movw	r30, r18
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     cd4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     cd6:	40 98       	cbi	0x08, 0	; 8
     cd8:	f9 01       	movw	r30, r18
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	44 e0       	ldi	r20, 0x04	; 4
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	4a 95       	dec	r20
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <LCDsendChar+0x22>
     cea:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     cec:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     cee:	42 9a       	sbi	0x08, 2	; 8
     cf0:	c9 01       	movw	r24, r18
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     cf6:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     cf8:	40 98       	cbi	0x08, 0	; 8
     cfa:	c9 01       	movw	r24, r18
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     d00:	08 95       	ret

00000d02 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     d02:	28 2f       	mov	r18, r24
     d04:	20 7f       	andi	r18, 0xF0	; 240
     d06:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     d08:	42 9a       	sbi	0x08, 2	; 8
     d0a:	20 e4       	ldi	r18, 0x40	; 64
     d0c:	3f e1       	ldi	r19, 0x1F	; 31
     d0e:	f9 01       	movw	r30, r18
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d14:	42 98       	cbi	0x08, 2	; 8
     d16:	f9 01       	movw	r30, r18
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	54 e0       	ldi	r21, 0x04	; 4
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	5a 95       	dec	r21
     d26:	e1 f7       	brne	.-8      	; 0xd20 <LCDsendCommand+0x1e>
     d28:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     d2a:	42 9a       	sbi	0x08, 2	; 8
     d2c:	c9 01       	movw	r24, r18
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d32:	42 98       	cbi	0x08, 2	; 8
     d34:	c9 01       	movw	r24, r18
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     d3a:	08 95       	ret

00000d3c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     d42:	08 95       	ret

00000d44 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     d4a:	08 95       	ret

00000d4c <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	49 f0       	breq	.+18     	; 0xd6c <LCDstring+0x20>
     d5a:	ec 01       	movw	r28, r24
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     d60:	89 91       	ld	r24, Y+
     d62:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     d66:	1f 5f       	subi	r17, 0xFF	; 255
     d68:	10 17       	cp	r17, r16
     d6a:	d0 f3       	brcs	.-12     	; 0xd60 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     d76:	62 30       	cpi	r22, 0x02	; 2
     d78:	31 f0       	breq	.+12     	; 0xd86 <LCDGotoXY+0x10>
     d7a:	63 30       	cpi	r22, 0x03	; 3
     d7c:	31 f0       	breq	.+12     	; 0xd8a <LCDGotoXY+0x14>
     d7e:	61 30       	cpi	r22, 0x01	; 1
     d80:	29 f4       	brne	.+10     	; 0xd8c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     d82:	80 5c       	subi	r24, 0xC0	; 192
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     d86:	8c 5e       	subi	r24, 0xEC	; 236
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     d8a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     d8c:	80 68       	ori	r24, 0x80	; 128
     d8e:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
	
}
     d92:	08 95       	ret

00000d94 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	ec 01       	movw	r28, r24
     d9c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     d9e:	64 2f       	mov	r22, r20
     da0:	0e 94 bb 06 	call	0xd76	; 0xd76 <LCDGotoXY>
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	03 c0       	rjmp	.+6      	; 0xdae <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     da8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     dac:	1f 5f       	subi	r17, 0xFF	; 255
     dae:	fe 01       	movw	r30, r28
     db0:	e1 0f       	add	r30, r17
     db2:	f1 1d       	adc	r31, r1
     db4:	84 91       	lpm	r24, Z+
     db6:	88 23       	and	r24, r24
     db8:	b9 f7       	brne	.-18     	; 0xda8 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	08 95       	ret

00000dc2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	7c 01       	movw	r14, r24
     dd0:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     dd2:	11 0f       	add	r17, r17
     dd4:	11 0f       	add	r17, r17
     dd6:	11 0f       	add	r17, r17
     dd8:	10 64       	ori	r17, 0x40	; 64
     dda:	c0 e0       	ldi	r28, 0x00	; 0
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     dde:	f7 01       	movw	r30, r14
     de0:	ec 0f       	add	r30, r28
     de2:	fd 1f       	adc	r31, r29
     de4:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     de6:	81 2f       	mov	r24, r17
     de8:	8c 0f       	add	r24, r28
     dea:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
		LCDsendChar(pcc);
     dee:	80 2f       	mov	r24, r16
     df0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     df4:	21 96       	adiw	r28, 0x01	; 1
     df6:	c8 30       	cpi	r28, 0x08	; 8
     df8:	d1 05       	cpc	r29, r1
     dfa:	89 f7       	brne	.-30     	; 0xdde <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret

00000e0a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	80 e6       	ldi	r24, 0x60	; 96
     e12:	9a ee       	ldi	r25, 0xEA	; 234
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     e18:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     e1a:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     e1c:	87 b1       	in	r24, 0x07	; 7
     e1e:	80 6f       	ori	r24, 0xF0	; 240
     e20:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     e22:	87 b1       	in	r24, 0x07	; 7
     e24:	87 60       	ori	r24, 0x07	; 7
     e26:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e28:	80 e3       	ldi	r24, 0x30	; 48
     e2a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e2c:	42 9a       	sbi	0x08, 2	; 8
     e2e:	20 e4       	ldi	r18, 0x40	; 64
     e30:	3f e1       	ldi	r19, 0x1F	; 31
     e32:	f9 01       	movw	r30, r18
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e38:	42 98       	cbi	0x08, 2	; 8
     e3a:	f9 01       	movw	r30, r18
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e40:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e42:	42 9a       	sbi	0x08, 2	; 8
     e44:	c9 01       	movw	r24, r18
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e4a:	42 98       	cbi	0x08, 2	; 8
     e4c:	c9 01       	movw	r24, r18
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     e52:	80 e2       	ldi	r24, 0x20	; 32
     e54:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e56:	42 9a       	sbi	0x08, 2	; 8
     e58:	c9 01       	movw	r24, r18
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e5e:	42 98       	cbi	0x08, 2	; 8
     e60:	c9 01       	movw	r24, r18
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     e66:	88 e2       	ldi	r24, 0x28	; 40
     e68:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     e6c:	8c e0       	ldi	r24, 0x0C	; 12
     e6e:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
     e72:	c2 ec       	ldi	r28, 0xC2	; 194
     e74:	d0 e0       	ldi	r29, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     e78:	16 2f       	mov	r17, r22
     e7a:	1f 5f       	subi	r17, 0xFF	; 255
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <LCDdefinechar>
     e82:	28 96       	adiw	r28, 0x08	; 8
     e84:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     e86:	18 30       	cpi	r17, 0x08	; 8
     e88:	b9 f7       	brne	.-18     	; 0xe78 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	08 95       	ret

00000e92 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	08 2f       	mov	r16, r24
     e98:	10 e0       	ldi	r17, 0x00	; 0
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     e9c:	8e e1       	ldi	r24, 0x1E	; 30
     e9e:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     ea2:	1f 5f       	subi	r17, 0xFF	; 255
     ea4:	10 17       	cp	r17, r16
     ea6:	d0 f3       	brcs	.-12     	; 0xe9c <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	08 95       	ret

00000eae <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	08 2f       	mov	r16, r24
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     eb8:	88 e1       	ldi	r24, 0x18	; 24
     eba:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     ebe:	1f 5f       	subi	r17, 0xFF	; 255
     ec0:	10 17       	cp	r17, r16
     ec2:	d0 f3       	brcs	.-12     	; 0xeb8 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     eca:	8e e0       	ldi	r24, 0x0E	; 14
     ecc:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     ed0:	08 95       	ret

00000ed2 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     ed2:	8f e0       	ldi	r24, 0x0F	; 15
     ed4:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     ed8:	08 95       	ret

00000eda <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     eda:	8c e0       	ldi	r24, 0x0C	; 12
     edc:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     ee0:	08 95       	ret

00000ee2 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     ee2:	88 e0       	ldi	r24, 0x08	; 8
     ee4:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     ee8:	08 95       	ret

00000eea <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     eea:	8c e0       	ldi	r24, 0x0C	; 12
     eec:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
}
     ef0:	08 95       	ret

00000ef2 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	08 2f       	mov	r16, r24
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     efc:	80 e1       	ldi	r24, 0x10	; 16
     efe:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f02:	1f 5f       	subi	r17, 0xFF	; 255
     f04:	10 17       	cp	r17, r16
     f06:	d0 f3       	brcs	.-12     	; 0xefc <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	08 2f       	mov	r16, r24
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     f18:	84 e1       	ldi	r24, 0x14	; 20
     f1a:	0e 94 81 06 	call	0xd02	; 0xd02 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     f1e:	1f 5f       	subi	r17, 0xFF	; 255
     f20:	10 17       	cp	r17, r16
     f22:	d0 f3       	brcs	.-12     	; 0xf18 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     f3a:	96 e0       	ldi	r25, 0x06	; 6
     f3c:	89 9f       	mul	r24, r25
     f3e:	c0 01       	movw	r24, r0
     f40:	11 24       	eor	r1, r1
     f42:	24 2f       	mov	r18, r20
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	ac 01       	movw	r20, r24
     f48:	42 9f       	mul	r20, r18
     f4a:	c0 01       	movw	r24, r0
     f4c:	43 9f       	mul	r20, r19
     f4e:	90 0d       	add	r25, r0
     f50:	52 9f       	mul	r21, r18
     f52:	90 0d       	add	r25, r0
     f54:	11 24       	eor	r1, r1
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__divmodhi4>
     f5c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     f5e:	cb 01       	movw	r24, r22
     f60:	66 e0       	ldi	r22, 0x06	; 6
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 c1 08 	call	0x1182	; 0x1182 <__udivmodhi4>
     f68:	e8 2e       	mov	r14, r24
     f6a:	ff 24       	eor	r15, r15
     f6c:	00 e0       	ldi	r16, 0x00	; 0
     f6e:	10 e0       	ldi	r17, 0x00	; 0
     f70:	12 c0       	rjmp	.+36     	; 0xf96 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     f72:	c8 01       	movw	r24, r16
     f74:	05 96       	adiw	r24, 0x05	; 5
     f76:	c8 17       	cp	r28, r24
     f78:	d9 07       	cpc	r29, r25
     f7a:	10 f0       	brcs	.+4      	; 0xf80 <LCDprogressBar+0x56>
     f7c:	85 e0       	ldi	r24, 0x05	; 5
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     f80:	c0 17       	cp	r28, r16
     f82:	d1 07       	cpc	r29, r17
     f84:	10 f0       	brcs	.+4      	; 0xf8a <LCDprogressBar+0x60>
     f86:	8e 2d       	mov	r24, r14
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <LCDprogressBar+0x62>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     f8c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     f90:	f3 94       	inc	r15
     f92:	0a 5f       	subi	r16, 0xFA	; 250
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
     f96:	fd 14       	cp	r15, r13
     f98:	60 f3       	brcs	.-40     	; 0xf72 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	08 95       	ret

00000faa <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     faa:	87 e6       	ldi	r24, 0x67	; 103
     fac:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     fb0:	88 e1       	ldi	r24, 0x18	; 24
     fb2:	80 93 c1 00 	sts	0x00C1, r24
}
     fb6:	08 95       	ret

00000fb8 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     fb8:	1f 93       	push	r17
     fba:	18 2f       	mov	r17, r24

  if (c == '\a')
     fbc:	87 30       	cpi	r24, 0x07	; 7
     fbe:	49 f4       	brne	.+18     	; 0xfd2 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     fc0:	60 91 77 04 	lds	r22, 0x0477
     fc4:	70 91 78 04 	lds	r23, 0x0478
     fc8:	89 e9       	ldi	r24, 0x99	; 153
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 ef 08 	call	0x11de	; 0x11de <fputs>
     fd0:	0b c0       	rjmp	.+22     	; 0xfe8 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     fd2:	8a 30       	cpi	r24, 0x0A	; 10
     fd4:	19 f4       	brne	.+6      	; 0xfdc <uart_putchar+0x24>
    uart_putchar('\r', stream);
     fd6:	8d e0       	ldi	r24, 0x0D	; 13
     fd8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     fdc:	80 91 c0 00 	lds	r24, 0x00C0
     fe0:	85 ff       	sbrs	r24, 5
     fe2:	fc cf       	rjmp	.-8      	; 0xfdc <uart_putchar+0x24>
  UDR0 = c;
     fe4:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	1f 91       	pop	r17
     fee:	08 95       	ret

00000ff0 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     ffe:	80 91 a2 01 	lds	r24, 0x01A2
    1002:	90 91 a3 01 	lds	r25, 0x01A3
    1006:	89 2b       	or	r24, r25
    1008:	09 f0       	breq	.+2      	; 0x100c <uart_getchar+0x1c>
    100a:	9f c0       	rjmp	.+318    	; 0x114a <uart_getchar+0x15a>
    100c:	04 ea       	ldi	r16, 0xA4	; 164
    100e:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1010:	80 91 c0 00 	lds	r24, 0x00C0
    1014:	87 ff       	sbrs	r24, 7
    1016:	fc cf       	rjmp	.-8      	; 0x1010 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    1018:	80 91 c0 00 	lds	r24, 0x00C0
    101c:	84 ff       	sbrs	r24, 4
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <uart_getchar+0x36>
    1020:	2e ef       	ldi	r18, 0xFE	; 254
    1022:	3f ef       	ldi	r19, 0xFF	; 255
    1024:	a6 c0       	rjmp	.+332    	; 0x1172 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    1026:	80 91 c0 00 	lds	r24, 0x00C0
    102a:	83 fd       	sbrc	r24, 3
    102c:	a0 c0       	rjmp	.+320    	; 0x116e <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    102e:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1032:	9d 30       	cpi	r25, 0x0D	; 13
    1034:	11 f0       	breq	.+4      	; 0x103a <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1036:	9a 30       	cpi	r25, 0x0A	; 10
    1038:	69 f4       	brne	.+26     	; 0x1054 <uart_getchar+0x64>
	  {
	    *cp = c;
    103a:	8a e0       	ldi	r24, 0x0A	; 10
    103c:	f8 01       	movw	r30, r16
    103e:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
	    rxp = b;
    1046:	84 ea       	ldi	r24, 0xA4	; 164
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	90 93 a3 01 	sts	0x01A3, r25
    104e:	80 93 a2 01 	sts	0x01A2, r24
    1052:	7b c0       	rjmp	.+246    	; 0x114a <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1054:	99 30       	cpi	r25, 0x09	; 9
    1056:	09 f4       	brne	.+2      	; 0x105a <uart_getchar+0x6a>
    1058:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    105a:	89 2f       	mov	r24, r25
    105c:	80 52       	subi	r24, 0x20	; 32
    105e:	8f 35       	cpi	r24, 0x5F	; 95
    1060:	10 f0       	brcs	.+4      	; 0x1066 <uart_getchar+0x76>
    1062:	90 3a       	cpi	r25, 0xA0	; 160
    1064:	70 f0       	brcs	.+28     	; 0x1082 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	03 3f       	cpi	r16, 0xF3	; 243
    106a:	1f 07       	cpc	r17, r31
    106c:	11 f4       	brne	.+4      	; 0x1072 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	04 c0       	rjmp	.+8      	; 0x107a <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1072:	f8 01       	movw	r30, r16
    1074:	91 93       	st	Z+, r25
    1076:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1078:	89 2f       	mov	r24, r25
    107a:	b7 01       	movw	r22, r14
    107c:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
    1080:	c7 cf       	rjmp	.-114    	; 0x1010 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    1082:	92 31       	cpi	r25, 0x12	; 18
    1084:	39 f1       	breq	.+78     	; 0x10d4 <uart_getchar+0xe4>
    1086:	93 31       	cpi	r25, 0x13	; 19
    1088:	38 f4       	brcc	.+14     	; 0x1098 <uart_getchar+0xa8>
    108a:	93 30       	cpi	r25, 0x03	; 3
    108c:	09 f4       	brne	.+2      	; 0x1090 <uart_getchar+0xa0>
    108e:	6f c0       	rjmp	.+222    	; 0x116e <uart_getchar+0x17e>
    1090:	98 30       	cpi	r25, 0x08	; 8
    1092:	09 f0       	breq	.+2      	; 0x1096 <uart_getchar+0xa6>
    1094:	bd cf       	rjmp	.-134    	; 0x1010 <uart_getchar+0x20>
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <uart_getchar+0xba>
    1098:	97 31       	cpi	r25, 0x17	; 23
    109a:	09 f4       	brne	.+2      	; 0x109e <uart_getchar+0xae>
    109c:	4b c0       	rjmp	.+150    	; 0x1134 <uart_getchar+0x144>
    109e:	9f 37       	cpi	r25, 0x7F	; 127
    10a0:	21 f0       	breq	.+8      	; 0x10aa <uart_getchar+0xba>
    10a2:	95 31       	cpi	r25, 0x15	; 21
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <uart_getchar+0xb8>
    10a6:	b4 cf       	rjmp	.-152    	; 0x1010 <uart_getchar+0x20>
    10a8:	32 c0       	rjmp	.+100    	; 0x110e <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    10aa:	f1 e0       	ldi	r31, 0x01	; 1
    10ac:	04 3a       	cpi	r16, 0xA4	; 164
    10ae:	1f 07       	cpc	r17, r31
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <uart_getchar+0xc4>
    10b2:	08 f4       	brcc	.+2      	; 0x10b6 <uart_getchar+0xc6>
    10b4:	ad cf       	rjmp	.-166    	; 0x1010 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    10b6:	88 e0       	ldi	r24, 0x08	; 8
    10b8:	b7 01       	movw	r22, r14
    10ba:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		uart_putchar(' ', stream);
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	b7 01       	movw	r22, r14
    10c2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		uart_putchar('\b', stream);
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	b7 01       	movw	r22, r14
    10ca:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		cp--;
    10ce:	01 50       	subi	r16, 0x01	; 1
    10d0:	10 40       	sbci	r17, 0x00	; 0
    10d2:	9e cf       	rjmp	.-196    	; 0x1010 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    10d4:	8d e0       	ldi	r24, 0x0D	; 13
    10d6:	b7 01       	movw	r22, r14
    10d8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
    10dc:	c4 ea       	ldi	r28, 0xA4	; 164
    10de:	d1 e0       	ldi	r29, 0x01	; 1
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    10e2:	89 91       	ld	r24, Y+
    10e4:	b7 01       	movw	r22, r14
    10e6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    10ea:	c0 17       	cp	r28, r16
    10ec:	d1 07       	cpc	r29, r17
    10ee:	c8 f3       	brcs	.-14     	; 0x10e2 <uart_getchar+0xf2>
    10f0:	8f cf       	rjmp	.-226    	; 0x1010 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    10f2:	88 e0       	ldi	r24, 0x08	; 8
    10f4:	b7 01       	movw	r22, r14
    10f6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		uart_putchar(' ', stream);
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	b7 01       	movw	r22, r14
    10fe:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		uart_putchar('\b', stream);
    1102:	88 e0       	ldi	r24, 0x08	; 8
    1104:	b7 01       	movw	r22, r14
    1106:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		cp--;
    110a:	01 50       	subi	r16, 0x01	; 1
    110c:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	04 3a       	cpi	r16, 0xA4	; 164
    1112:	18 07       	cpc	r17, r24
    1114:	09 f0       	breq	.+2      	; 0x1118 <uart_getchar+0x128>
    1116:	68 f7       	brcc	.-38     	; 0x10f2 <uart_getchar+0x102>
    1118:	7b cf       	rjmp	.-266    	; 0x1010 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	b7 01       	movw	r22, r14
    111e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		uart_putchar(' ', stream);
    1122:	80 e2       	ldi	r24, 0x20	; 32
    1124:	b7 01       	movw	r22, r14
    1126:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
		uart_putchar('\b', stream);
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	b7 01       	movw	r22, r14
    112e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <uart_putchar>
    1132:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1134:	e1 e0       	ldi	r30, 0x01	; 1
    1136:	04 3a       	cpi	r16, 0xA4	; 164
    1138:	1e 07       	cpc	r17, r30
    113a:	09 f0       	breq	.+2      	; 0x113e <uart_getchar+0x14e>
    113c:	08 f4       	brcc	.+2      	; 0x1140 <uart_getchar+0x150>
    113e:	68 cf       	rjmp	.-304    	; 0x1010 <uart_getchar+0x20>
    1140:	e8 01       	movw	r28, r16
    1142:	8a 91       	ld	r24, -Y
    1144:	80 32       	cpi	r24, 0x20	; 32
    1146:	49 f7       	brne	.-46     	; 0x111a <uart_getchar+0x12a>
    1148:	63 cf       	rjmp	.-314    	; 0x1010 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    114a:	e0 91 a2 01 	lds	r30, 0x01A2
    114e:	f0 91 a3 01 	lds	r31, 0x01A3
    1152:	81 91       	ld	r24, Z+
    1154:	f0 93 a3 01 	sts	0x01A3, r31
    1158:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    115c:	8a 30       	cpi	r24, 0x0A	; 10
    115e:	21 f4       	brne	.+8      	; 0x1168 <uart_getchar+0x178>
    rxp = 0;
    1160:	10 92 a3 01 	sts	0x01A3, r1
    1164:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <uart_getchar+0x182>
    116e:	2f ef       	ldi	r18, 0xFF	; 255
    1170:	3f ef       	ldi	r19, 0xFF	; 255
}
    1172:	c9 01       	movw	r24, r18
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	08 95       	ret

00001182 <__udivmodhi4>:
    1182:	aa 1b       	sub	r26, r26
    1184:	bb 1b       	sub	r27, r27
    1186:	51 e1       	ldi	r21, 0x11	; 17
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <__udivmodhi4_ep>

0000118a <__udivmodhi4_loop>:
    118a:	aa 1f       	adc	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	a6 17       	cp	r26, r22
    1190:	b7 07       	cpc	r27, r23
    1192:	10 f0       	brcs	.+4      	; 0x1198 <__udivmodhi4_ep>
    1194:	a6 1b       	sub	r26, r22
    1196:	b7 0b       	sbc	r27, r23

00001198 <__udivmodhi4_ep>:
    1198:	88 1f       	adc	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	5a 95       	dec	r21
    119e:	a9 f7       	brne	.-22     	; 0x118a <__udivmodhi4_loop>
    11a0:	80 95       	com	r24
    11a2:	90 95       	com	r25
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	08 95       	ret

000011aa <__divmodhi4>:
    11aa:	97 fb       	bst	r25, 7
    11ac:	09 2e       	mov	r0, r25
    11ae:	07 26       	eor	r0, r23
    11b0:	0a d0       	rcall	.+20     	; 0x11c6 <__divmodhi4_neg1>
    11b2:	77 fd       	sbrc	r23, 7
    11b4:	04 d0       	rcall	.+8      	; 0x11be <__divmodhi4_neg2>
    11b6:	e5 df       	rcall	.-54     	; 0x1182 <__udivmodhi4>
    11b8:	06 d0       	rcall	.+12     	; 0x11c6 <__divmodhi4_neg1>
    11ba:	00 20       	and	r0, r0
    11bc:	1a f4       	brpl	.+6      	; 0x11c4 <__divmodhi4_exit>

000011be <__divmodhi4_neg2>:
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255

000011c4 <__divmodhi4_exit>:
    11c4:	08 95       	ret

000011c6 <__divmodhi4_neg1>:
    11c6:	f6 f7       	brtc	.-4      	; 0x11c4 <__divmodhi4_exit>
    11c8:	90 95       	com	r25
    11ca:	81 95       	neg	r24
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	08 95       	ret

000011d0 <strcpy>:
    11d0:	fb 01       	movw	r30, r22
    11d2:	dc 01       	movw	r26, r24
    11d4:	01 90       	ld	r0, Z+
    11d6:	0d 92       	st	X+, r0
    11d8:	00 20       	and	r0, r0
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <strcpy+0x4>
    11dc:	08 95       	ret

000011de <fputs>:
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	7c 01       	movw	r14, r24
    11ec:	8b 01       	movw	r16, r22
    11ee:	db 01       	movw	r26, r22
    11f0:	13 96       	adiw	r26, 0x03	; 3
    11f2:	8c 91       	ld	r24, X
    11f4:	81 fd       	sbrc	r24, 1
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <fputs+0x20>
    11f8:	cf ef       	ldi	r28, 0xFF	; 255
    11fa:	df ef       	ldi	r29, 0xFF	; 255
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <fputs+0x46>
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
    1202:	0b c0       	rjmp	.+22     	; 0x121a <fputs+0x3c>
    1204:	d8 01       	movw	r26, r16
    1206:	18 96       	adiw	r26, 0x08	; 8
    1208:	ed 91       	ld	r30, X+
    120a:	fc 91       	ld	r31, X
    120c:	19 97       	sbiw	r26, 0x09	; 9
    120e:	b8 01       	movw	r22, r16
    1210:	09 95       	icall
    1212:	89 2b       	or	r24, r25
    1214:	11 f0       	breq	.+4      	; 0x121a <fputs+0x3c>
    1216:	cf ef       	ldi	r28, 0xFF	; 255
    1218:	df ef       	ldi	r29, 0xFF	; 255
    121a:	f7 01       	movw	r30, r14
    121c:	81 91       	ld	r24, Z+
    121e:	7f 01       	movw	r14, r30
    1220:	88 23       	and	r24, r24
    1222:	81 f7       	brne	.-32     	; 0x1204 <fputs+0x26>
    1224:	ce 01       	movw	r24, r28
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	08 95       	ret

00001234 <fscanf>:
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9e 01       	movw	r18, r28
    123e:	27 5f       	subi	r18, 0xF7	; 247
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	6f 81       	ldd	r22, Y+7	; 0x07
    1248:	78 85       	ldd	r23, Y+8	; 0x08
    124a:	a9 01       	movw	r20, r18
    124c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <vfscanf>
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <sprintf>:
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	2e 97       	sbiw	r28, 0x0e	; 14
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	0d 89       	ldd	r16, Y+21	; 0x15
    1270:	1e 89       	ldd	r17, Y+22	; 0x16
    1272:	86 e0       	ldi	r24, 0x06	; 6
    1274:	8c 83       	std	Y+4, r24	; 0x04
    1276:	1a 83       	std	Y+2, r17	; 0x02
    1278:	09 83       	std	Y+1, r16	; 0x01
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	9f e7       	ldi	r25, 0x7F	; 127
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	8d 83       	std	Y+5, r24	; 0x05
    1282:	9e 01       	movw	r18, r28
    1284:	27 5e       	subi	r18, 0xE7	; 231
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	6f 89       	ldd	r22, Y+23	; 0x17
    128e:	78 8d       	ldd	r23, Y+24	; 0x18
    1290:	a9 01       	movw	r20, r18
    1292:	0e 94 7f 09 	call	0x12fe	; 0x12fe <vfprintf>
    1296:	2f 81       	ldd	r18, Y+7	; 0x07
    1298:	38 85       	ldd	r19, Y+8	; 0x08
    129a:	02 0f       	add	r16, r18
    129c:	13 1f       	adc	r17, r19
    129e:	f8 01       	movw	r30, r16
    12a0:	10 82       	st	Z, r1
    12a2:	2e 96       	adiw	r28, 0x0e	; 14
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <sscanf>:
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	2e 97       	sbiw	r28, 0x0e	; 14
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	85 e0       	ldi	r24, 0x05	; 5
    12ce:	8c 83       	std	Y+4, r24	; 0x04
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	9c 89       	ldd	r25, Y+20	; 0x14
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	9e 01       	movw	r18, r28
    12da:	29 5e       	subi	r18, 0xE9	; 233
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	ce 01       	movw	r24, r28
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	a9 01       	movw	r20, r18
    12e8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <vfscanf>
    12ec:	2e 96       	adiw	r28, 0x0e	; 14
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <vfprintf>:
    12fe:	2f 92       	push	r2
    1300:	3f 92       	push	r3
    1302:	4f 92       	push	r4
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	2b 97       	sbiw	r28, 0x0b	; 11
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	3c 01       	movw	r6, r24
    1334:	2b 01       	movw	r4, r22
    1336:	5a 01       	movw	r10, r20
    1338:	fc 01       	movw	r30, r24
    133a:	17 82       	std	Z+7, r1	; 0x07
    133c:	16 82       	std	Z+6, r1	; 0x06
    133e:	83 81       	ldd	r24, Z+3	; 0x03
    1340:	81 fd       	sbrc	r24, 1
    1342:	03 c0       	rjmp	.+6      	; 0x134a <vfprintf+0x4c>
    1344:	6f ef       	ldi	r22, 0xFF	; 255
    1346:	7f ef       	ldi	r23, 0xFF	; 255
    1348:	c6 c1       	rjmp	.+908    	; 0x16d6 <vfprintf+0x3d8>
    134a:	9a e0       	ldi	r25, 0x0A	; 10
    134c:	89 2e       	mov	r8, r25
    134e:	1e 01       	movw	r2, r28
    1350:	08 94       	sec
    1352:	21 1c       	adc	r2, r1
    1354:	31 1c       	adc	r3, r1
    1356:	f3 01       	movw	r30, r6
    1358:	23 81       	ldd	r18, Z+3	; 0x03
    135a:	f2 01       	movw	r30, r4
    135c:	23 fd       	sbrc	r18, 3
    135e:	85 91       	lpm	r24, Z+
    1360:	23 ff       	sbrs	r18, 3
    1362:	81 91       	ld	r24, Z+
    1364:	2f 01       	movw	r4, r30
    1366:	88 23       	and	r24, r24
    1368:	09 f4       	brne	.+2      	; 0x136c <vfprintf+0x6e>
    136a:	b2 c1       	rjmp	.+868    	; 0x16d0 <vfprintf+0x3d2>
    136c:	85 32       	cpi	r24, 0x25	; 37
    136e:	39 f4       	brne	.+14     	; 0x137e <vfprintf+0x80>
    1370:	23 fd       	sbrc	r18, 3
    1372:	85 91       	lpm	r24, Z+
    1374:	23 ff       	sbrs	r18, 3
    1376:	81 91       	ld	r24, Z+
    1378:	2f 01       	movw	r4, r30
    137a:	85 32       	cpi	r24, 0x25	; 37
    137c:	29 f4       	brne	.+10     	; 0x1388 <vfprintf+0x8a>
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b3 01       	movw	r22, r6
    1382:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    1386:	e7 cf       	rjmp	.-50     	; 0x1356 <vfprintf+0x58>
    1388:	98 2f       	mov	r25, r24
    138a:	ff 24       	eor	r15, r15
    138c:	ee 24       	eor	r14, r14
    138e:	99 24       	eor	r9, r9
    1390:	ff e1       	ldi	r31, 0x1F	; 31
    1392:	ff 15       	cp	r31, r15
    1394:	d0 f0       	brcs	.+52     	; 0x13ca <vfprintf+0xcc>
    1396:	9b 32       	cpi	r25, 0x2B	; 43
    1398:	69 f0       	breq	.+26     	; 0x13b4 <vfprintf+0xb6>
    139a:	9c 32       	cpi	r25, 0x2C	; 44
    139c:	28 f4       	brcc	.+10     	; 0x13a8 <vfprintf+0xaa>
    139e:	90 32       	cpi	r25, 0x20	; 32
    13a0:	59 f0       	breq	.+22     	; 0x13b8 <vfprintf+0xba>
    13a2:	93 32       	cpi	r25, 0x23	; 35
    13a4:	91 f4       	brne	.+36     	; 0x13ca <vfprintf+0xcc>
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <vfprintf+0xc6>
    13a8:	9d 32       	cpi	r25, 0x2D	; 45
    13aa:	49 f0       	breq	.+18     	; 0x13be <vfprintf+0xc0>
    13ac:	90 33       	cpi	r25, 0x30	; 48
    13ae:	69 f4       	brne	.+26     	; 0x13ca <vfprintf+0xcc>
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	24 c0       	rjmp	.+72     	; 0x13fc <vfprintf+0xfe>
    13b4:	52 e0       	ldi	r21, 0x02	; 2
    13b6:	f5 2a       	or	r15, r21
    13b8:	84 e0       	ldi	r24, 0x04	; 4
    13ba:	f8 2a       	or	r15, r24
    13bc:	28 c0       	rjmp	.+80     	; 0x140e <vfprintf+0x110>
    13be:	98 e0       	ldi	r25, 0x08	; 8
    13c0:	f9 2a       	or	r15, r25
    13c2:	25 c0       	rjmp	.+74     	; 0x140e <vfprintf+0x110>
    13c4:	e0 e1       	ldi	r30, 0x10	; 16
    13c6:	fe 2a       	or	r15, r30
    13c8:	22 c0       	rjmp	.+68     	; 0x140e <vfprintf+0x110>
    13ca:	f7 fc       	sbrc	r15, 7
    13cc:	29 c0       	rjmp	.+82     	; 0x1420 <vfprintf+0x122>
    13ce:	89 2f       	mov	r24, r25
    13d0:	80 53       	subi	r24, 0x30	; 48
    13d2:	8a 30       	cpi	r24, 0x0A	; 10
    13d4:	70 f4       	brcc	.+28     	; 0x13f2 <vfprintf+0xf4>
    13d6:	f6 fe       	sbrs	r15, 6
    13d8:	05 c0       	rjmp	.+10     	; 0x13e4 <vfprintf+0xe6>
    13da:	98 9c       	mul	r9, r8
    13dc:	90 2c       	mov	r9, r0
    13de:	11 24       	eor	r1, r1
    13e0:	98 0e       	add	r9, r24
    13e2:	15 c0       	rjmp	.+42     	; 0x140e <vfprintf+0x110>
    13e4:	e8 9c       	mul	r14, r8
    13e6:	e0 2c       	mov	r14, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	e8 0e       	add	r14, r24
    13ec:	f0 e2       	ldi	r31, 0x20	; 32
    13ee:	ff 2a       	or	r15, r31
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <vfprintf+0x110>
    13f2:	9e 32       	cpi	r25, 0x2E	; 46
    13f4:	29 f4       	brne	.+10     	; 0x1400 <vfprintf+0x102>
    13f6:	f6 fc       	sbrc	r15, 6
    13f8:	6b c1       	rjmp	.+726    	; 0x16d0 <vfprintf+0x3d2>
    13fa:	40 e4       	ldi	r20, 0x40	; 64
    13fc:	f4 2a       	or	r15, r20
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <vfprintf+0x110>
    1400:	9c 36       	cpi	r25, 0x6C	; 108
    1402:	19 f4       	brne	.+6      	; 0x140a <vfprintf+0x10c>
    1404:	50 e8       	ldi	r21, 0x80	; 128
    1406:	f5 2a       	or	r15, r21
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x110>
    140a:	98 36       	cpi	r25, 0x68	; 104
    140c:	49 f4       	brne	.+18     	; 0x1420 <vfprintf+0x122>
    140e:	f2 01       	movw	r30, r4
    1410:	23 fd       	sbrc	r18, 3
    1412:	95 91       	lpm	r25, Z+
    1414:	23 ff       	sbrs	r18, 3
    1416:	91 91       	ld	r25, Z+
    1418:	2f 01       	movw	r4, r30
    141a:	99 23       	and	r25, r25
    141c:	09 f0       	breq	.+2      	; 0x1420 <vfprintf+0x122>
    141e:	b8 cf       	rjmp	.-144    	; 0x1390 <vfprintf+0x92>
    1420:	89 2f       	mov	r24, r25
    1422:	85 54       	subi	r24, 0x45	; 69
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	18 f0       	brcs	.+6      	; 0x142e <vfprintf+0x130>
    1428:	80 52       	subi	r24, 0x20	; 32
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	38 f4       	brcc	.+14     	; 0x143c <vfprintf+0x13e>
    142e:	44 e0       	ldi	r20, 0x04	; 4
    1430:	50 e0       	ldi	r21, 0x00	; 0
    1432:	a4 0e       	add	r10, r20
    1434:	b5 1e       	adc	r11, r21
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	59 83       	std	Y+1, r21	; 0x01
    143a:	0f c0       	rjmp	.+30     	; 0x145a <vfprintf+0x15c>
    143c:	93 36       	cpi	r25, 0x63	; 99
    143e:	31 f0       	breq	.+12     	; 0x144c <vfprintf+0x14e>
    1440:	93 37       	cpi	r25, 0x73	; 115
    1442:	79 f0       	breq	.+30     	; 0x1462 <vfprintf+0x164>
    1444:	93 35       	cpi	r25, 0x53	; 83
    1446:	09 f0       	breq	.+2      	; 0x144a <vfprintf+0x14c>
    1448:	56 c0       	rjmp	.+172    	; 0x14f6 <vfprintf+0x1f8>
    144a:	20 c0       	rjmp	.+64     	; 0x148c <vfprintf+0x18e>
    144c:	f5 01       	movw	r30, r10
    144e:	80 81       	ld	r24, Z
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	42 e0       	ldi	r20, 0x02	; 2
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	a4 0e       	add	r10, r20
    1458:	b5 1e       	adc	r11, r21
    145a:	61 01       	movw	r12, r2
    145c:	01 e0       	ldi	r16, 0x01	; 1
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	12 c0       	rjmp	.+36     	; 0x1486 <vfprintf+0x188>
    1462:	f5 01       	movw	r30, r10
    1464:	c0 80       	ld	r12, Z
    1466:	d1 80       	ldd	r13, Z+1	; 0x01
    1468:	f6 fc       	sbrc	r15, 6
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <vfprintf+0x174>
    146c:	6f ef       	ldi	r22, 0xFF	; 255
    146e:	7f ef       	ldi	r23, 0xFF	; 255
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x178>
    1472:	69 2d       	mov	r22, r9
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	42 e0       	ldi	r20, 0x02	; 2
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	a4 0e       	add	r10, r20
    147c:	b5 1e       	adc	r11, r21
    147e:	c6 01       	movw	r24, r12
    1480:	0e 94 75 0e 	call	0x1cea	; 0x1cea <strnlen>
    1484:	8c 01       	movw	r16, r24
    1486:	5f e7       	ldi	r21, 0x7F	; 127
    1488:	f5 22       	and	r15, r21
    148a:	14 c0       	rjmp	.+40     	; 0x14b4 <vfprintf+0x1b6>
    148c:	f5 01       	movw	r30, r10
    148e:	c0 80       	ld	r12, Z
    1490:	d1 80       	ldd	r13, Z+1	; 0x01
    1492:	f6 fc       	sbrc	r15, 6
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfprintf+0x19e>
    1496:	6f ef       	ldi	r22, 0xFF	; 255
    1498:	7f ef       	ldi	r23, 0xFF	; 255
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <vfprintf+0x1a2>
    149c:	69 2d       	mov	r22, r9
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	42 e0       	ldi	r20, 0x02	; 2
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	a4 0e       	add	r10, r20
    14a6:	b5 1e       	adc	r11, r21
    14a8:	c6 01       	movw	r24, r12
    14aa:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <strnlen_P>
    14ae:	8c 01       	movw	r16, r24
    14b0:	50 e8       	ldi	r21, 0x80	; 128
    14b2:	f5 2a       	or	r15, r21
    14b4:	f3 fe       	sbrs	r15, 3
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <vfprintf+0x1c8>
    14b8:	1a c0       	rjmp	.+52     	; 0x14ee <vfprintf+0x1f0>
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	b3 01       	movw	r22, r6
    14c0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    14c4:	ea 94       	dec	r14
    14c6:	8e 2d       	mov	r24, r14
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	08 17       	cp	r16, r24
    14cc:	19 07       	cpc	r17, r25
    14ce:	a8 f3       	brcs	.-22     	; 0x14ba <vfprintf+0x1bc>
    14d0:	0e c0       	rjmp	.+28     	; 0x14ee <vfprintf+0x1f0>
    14d2:	f6 01       	movw	r30, r12
    14d4:	f7 fc       	sbrc	r15, 7
    14d6:	85 91       	lpm	r24, Z+
    14d8:	f7 fe       	sbrs	r15, 7
    14da:	81 91       	ld	r24, Z+
    14dc:	6f 01       	movw	r12, r30
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	b3 01       	movw	r22, r6
    14e2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    14e6:	e1 10       	cpse	r14, r1
    14e8:	ea 94       	dec	r14
    14ea:	01 50       	subi	r16, 0x01	; 1
    14ec:	10 40       	sbci	r17, 0x00	; 0
    14ee:	01 15       	cp	r16, r1
    14f0:	11 05       	cpc	r17, r1
    14f2:	79 f7       	brne	.-34     	; 0x14d2 <vfprintf+0x1d4>
    14f4:	ea c0       	rjmp	.+468    	; 0x16ca <vfprintf+0x3cc>
    14f6:	94 36       	cpi	r25, 0x64	; 100
    14f8:	11 f0       	breq	.+4      	; 0x14fe <vfprintf+0x200>
    14fa:	99 36       	cpi	r25, 0x69	; 105
    14fc:	69 f5       	brne	.+90     	; 0x1558 <vfprintf+0x25a>
    14fe:	f7 fe       	sbrs	r15, 7
    1500:	08 c0       	rjmp	.+16     	; 0x1512 <vfprintf+0x214>
    1502:	f5 01       	movw	r30, r10
    1504:	20 81       	ld	r18, Z
    1506:	31 81       	ldd	r19, Z+1	; 0x01
    1508:	42 81       	ldd	r20, Z+2	; 0x02
    150a:	53 81       	ldd	r21, Z+3	; 0x03
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <vfprintf+0x228>
    1512:	f5 01       	movw	r30, r10
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	9c 01       	movw	r18, r24
    151a:	44 27       	eor	r20, r20
    151c:	37 fd       	sbrc	r19, 7
    151e:	40 95       	com	r20
    1520:	54 2f       	mov	r21, r20
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a8 0e       	add	r10, r24
    1528:	b9 1e       	adc	r11, r25
    152a:	9f e6       	ldi	r25, 0x6F	; 111
    152c:	f9 22       	and	r15, r25
    152e:	57 ff       	sbrs	r21, 7
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <vfprintf+0x246>
    1532:	50 95       	com	r21
    1534:	40 95       	com	r20
    1536:	30 95       	com	r19
    1538:	21 95       	neg	r18
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	4f 4f       	sbci	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	e0 e8       	ldi	r30, 0x80	; 128
    1542:	fe 2a       	or	r15, r30
    1544:	ca 01       	movw	r24, r20
    1546:	b9 01       	movw	r22, r18
    1548:	a1 01       	movw	r20, r2
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__ultoa_invert>
    1552:	d8 2e       	mov	r13, r24
    1554:	d2 18       	sub	r13, r2
    1556:	40 c0       	rjmp	.+128    	; 0x15d8 <vfprintf+0x2da>
    1558:	95 37       	cpi	r25, 0x75	; 117
    155a:	29 f4       	brne	.+10     	; 0x1566 <vfprintf+0x268>
    155c:	1f 2d       	mov	r17, r15
    155e:	1f 7e       	andi	r17, 0xEF	; 239
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	1d c0       	rjmp	.+58     	; 0x15a0 <vfprintf+0x2a2>
    1566:	1f 2d       	mov	r17, r15
    1568:	19 7f       	andi	r17, 0xF9	; 249
    156a:	9f 36       	cpi	r25, 0x6F	; 111
    156c:	61 f0       	breq	.+24     	; 0x1586 <vfprintf+0x288>
    156e:	90 37       	cpi	r25, 0x70	; 112
    1570:	20 f4       	brcc	.+8      	; 0x157a <vfprintf+0x27c>
    1572:	98 35       	cpi	r25, 0x58	; 88
    1574:	09 f0       	breq	.+2      	; 0x1578 <vfprintf+0x27a>
    1576:	ac c0       	rjmp	.+344    	; 0x16d0 <vfprintf+0x3d2>
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <vfprintf+0x29a>
    157a:	90 37       	cpi	r25, 0x70	; 112
    157c:	39 f0       	breq	.+14     	; 0x158c <vfprintf+0x28e>
    157e:	98 37       	cpi	r25, 0x78	; 120
    1580:	09 f0       	breq	.+2      	; 0x1584 <vfprintf+0x286>
    1582:	a6 c0       	rjmp	.+332    	; 0x16d0 <vfprintf+0x3d2>
    1584:	04 c0       	rjmp	.+8      	; 0x158e <vfprintf+0x290>
    1586:	28 e0       	ldi	r18, 0x08	; 8
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	0a c0       	rjmp	.+20     	; 0x15a0 <vfprintf+0x2a2>
    158c:	10 61       	ori	r17, 0x10	; 16
    158e:	14 fd       	sbrc	r17, 4
    1590:	14 60       	ori	r17, 0x04	; 4
    1592:	20 e1       	ldi	r18, 0x10	; 16
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <vfprintf+0x2a2>
    1598:	14 fd       	sbrc	r17, 4
    159a:	16 60       	ori	r17, 0x06	; 6
    159c:	20 e1       	ldi	r18, 0x10	; 16
    159e:	32 e0       	ldi	r19, 0x02	; 2
    15a0:	17 ff       	sbrs	r17, 7
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <vfprintf+0x2b6>
    15a4:	f5 01       	movw	r30, r10
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	44 e0       	ldi	r20, 0x04	; 4
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	08 c0       	rjmp	.+16     	; 0x15c4 <vfprintf+0x2c6>
    15b4:	f5 01       	movw	r30, r10
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	bc 01       	movw	r22, r24
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	42 e0       	ldi	r20, 0x02	; 2
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	a4 0e       	add	r10, r20
    15c6:	b5 1e       	adc	r11, r21
    15c8:	a1 01       	movw	r20, r2
    15ca:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__ultoa_invert>
    15ce:	d8 2e       	mov	r13, r24
    15d0:	d2 18       	sub	r13, r2
    15d2:	8f e7       	ldi	r24, 0x7F	; 127
    15d4:	f8 2e       	mov	r15, r24
    15d6:	f1 22       	and	r15, r17
    15d8:	f6 fe       	sbrs	r15, 6
    15da:	0b c0       	rjmp	.+22     	; 0x15f2 <vfprintf+0x2f4>
    15dc:	5e ef       	ldi	r21, 0xFE	; 254
    15de:	f5 22       	and	r15, r21
    15e0:	d9 14       	cp	r13, r9
    15e2:	38 f4       	brcc	.+14     	; 0x15f2 <vfprintf+0x2f4>
    15e4:	f4 fe       	sbrs	r15, 4
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <vfprintf+0x2f8>
    15e8:	f2 fc       	sbrc	r15, 2
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <vfprintf+0x2f8>
    15ec:	8f ee       	ldi	r24, 0xEF	; 239
    15ee:	f8 22       	and	r15, r24
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <vfprintf+0x2f8>
    15f2:	1d 2d       	mov	r17, r13
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <vfprintf+0x2fa>
    15f6:	19 2d       	mov	r17, r9
    15f8:	f4 fe       	sbrs	r15, 4
    15fa:	0d c0       	rjmp	.+26     	; 0x1616 <vfprintf+0x318>
    15fc:	fe 01       	movw	r30, r28
    15fe:	ed 0d       	add	r30, r13
    1600:	f1 1d       	adc	r31, r1
    1602:	80 81       	ld	r24, Z
    1604:	80 33       	cpi	r24, 0x30	; 48
    1606:	19 f4       	brne	.+6      	; 0x160e <vfprintf+0x310>
    1608:	99 ee       	ldi	r25, 0xE9	; 233
    160a:	f9 22       	and	r15, r25
    160c:	08 c0       	rjmp	.+16     	; 0x161e <vfprintf+0x320>
    160e:	1f 5f       	subi	r17, 0xFF	; 255
    1610:	f2 fe       	sbrs	r15, 2
    1612:	05 c0       	rjmp	.+10     	; 0x161e <vfprintf+0x320>
    1614:	03 c0       	rjmp	.+6      	; 0x161c <vfprintf+0x31e>
    1616:	8f 2d       	mov	r24, r15
    1618:	86 78       	andi	r24, 0x86	; 134
    161a:	09 f0       	breq	.+2      	; 0x161e <vfprintf+0x320>
    161c:	1f 5f       	subi	r17, 0xFF	; 255
    161e:	0f 2d       	mov	r16, r15
    1620:	f3 fc       	sbrc	r15, 3
    1622:	14 c0       	rjmp	.+40     	; 0x164c <vfprintf+0x34e>
    1624:	f0 fe       	sbrs	r15, 0
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <vfprintf+0x348>
    1628:	1e 15       	cp	r17, r14
    162a:	10 f0       	brcs	.+4      	; 0x1630 <vfprintf+0x332>
    162c:	9d 2c       	mov	r9, r13
    162e:	0b c0       	rjmp	.+22     	; 0x1646 <vfprintf+0x348>
    1630:	9d 2c       	mov	r9, r13
    1632:	9e 0c       	add	r9, r14
    1634:	91 1a       	sub	r9, r17
    1636:	1e 2d       	mov	r17, r14
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x348>
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b3 01       	movw	r22, r6
    1640:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    1644:	1f 5f       	subi	r17, 0xFF	; 255
    1646:	1e 15       	cp	r17, r14
    1648:	c0 f3       	brcs	.-16     	; 0x163a <vfprintf+0x33c>
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <vfprintf+0x356>
    164c:	1e 15       	cp	r17, r14
    164e:	10 f4       	brcc	.+4      	; 0x1654 <vfprintf+0x356>
    1650:	e1 1a       	sub	r14, r17
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <vfprintf+0x358>
    1654:	ee 24       	eor	r14, r14
    1656:	04 ff       	sbrs	r16, 4
    1658:	0f c0       	rjmp	.+30     	; 0x1678 <vfprintf+0x37a>
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	b3 01       	movw	r22, r6
    1660:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    1664:	02 ff       	sbrs	r16, 2
    1666:	1d c0       	rjmp	.+58     	; 0x16a2 <vfprintf+0x3a4>
    1668:	01 fd       	sbrc	r16, 1
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x374>
    166c:	88 e7       	ldi	r24, 0x78	; 120
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e c0       	rjmp	.+28     	; 0x168e <vfprintf+0x390>
    1672:	88 e5       	ldi	r24, 0x58	; 88
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0b c0       	rjmp	.+22     	; 0x168e <vfprintf+0x390>
    1678:	80 2f       	mov	r24, r16
    167a:	86 78       	andi	r24, 0x86	; 134
    167c:	91 f0       	breq	.+36     	; 0x16a2 <vfprintf+0x3a4>
    167e:	01 ff       	sbrs	r16, 1
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x388>
    1682:	8b e2       	ldi	r24, 0x2B	; 43
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <vfprintf+0x38a>
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	f7 fc       	sbrc	r15, 7
    168a:	8d e2       	ldi	r24, 0x2D	; 45
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	b3 01       	movw	r22, r6
    1690:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x3a4>
    1696:	80 e3       	ldi	r24, 0x30	; 48
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	b3 01       	movw	r22, r6
    169c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    16a0:	9a 94       	dec	r9
    16a2:	d9 14       	cp	r13, r9
    16a4:	c0 f3       	brcs	.-16     	; 0x1696 <vfprintf+0x398>
    16a6:	da 94       	dec	r13
    16a8:	f1 01       	movw	r30, r2
    16aa:	ed 0d       	add	r30, r13
    16ac:	f1 1d       	adc	r31, r1
    16ae:	80 81       	ld	r24, Z
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	b3 01       	movw	r22, r6
    16b4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    16b8:	dd 20       	and	r13, r13
    16ba:	a9 f7       	brne	.-22     	; 0x16a6 <vfprintf+0x3a8>
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <vfprintf+0x3cc>
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	b3 01       	movw	r22, r6
    16c4:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <fputc>
    16c8:	ea 94       	dec	r14
    16ca:	ee 20       	and	r14, r14
    16cc:	c1 f7       	brne	.-16     	; 0x16be <vfprintf+0x3c0>
    16ce:	43 ce       	rjmp	.-890    	; 0x1356 <vfprintf+0x58>
    16d0:	f3 01       	movw	r30, r6
    16d2:	66 81       	ldd	r22, Z+6	; 0x06
    16d4:	77 81       	ldd	r23, Z+7	; 0x07
    16d6:	cb 01       	movw	r24, r22
    16d8:	2b 96       	adiw	r28, 0x0b	; 11
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	df 90       	pop	r13
    16f2:	cf 90       	pop	r12
    16f4:	bf 90       	pop	r11
    16f6:	af 90       	pop	r10
    16f8:	9f 90       	pop	r9
    16fa:	8f 90       	pop	r8
    16fc:	7f 90       	pop	r7
    16fe:	6f 90       	pop	r6
    1700:	5f 90       	pop	r5
    1702:	4f 90       	pop	r4
    1704:	3f 90       	pop	r3
    1706:	2f 90       	pop	r2
    1708:	08 95       	ret

0000170a <putval>:
    170a:	fc 01       	movw	r30, r24
    170c:	20 fd       	sbrc	r18, 0
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <putval+0x16>
    1710:	23 fd       	sbrc	r18, 3
    1712:	05 c0       	rjmp	.+10     	; 0x171e <putval+0x14>
    1714:	22 ff       	sbrs	r18, 2
    1716:	02 c0       	rjmp	.+4      	; 0x171c <putval+0x12>
    1718:	73 83       	std	Z+3, r23	; 0x03
    171a:	62 83       	std	Z+2, r22	; 0x02
    171c:	51 83       	std	Z+1, r21	; 0x01
    171e:	40 83       	st	Z, r20
    1720:	08 95       	ret

00001722 <mulacc>:
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	44 ff       	sbrs	r20, 4
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <mulacc+0x10>
    172e:	33 e0       	ldi	r19, 0x03	; 3
    1730:	11 c0       	rjmp	.+34     	; 0x1754 <mulacc+0x32>
    1732:	46 ff       	sbrs	r20, 6
    1734:	02 c0       	rjmp	.+4      	; 0x173a <mulacc+0x18>
    1736:	34 e0       	ldi	r19, 0x04	; 4
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <mulacc+0x32>
    173a:	db 01       	movw	r26, r22
    173c:	fc 01       	movw	r30, r24
    173e:	aa 0f       	add	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	ee 1f       	adc	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	10 94       	com	r1
    1748:	d1 f7       	brne	.-12     	; 0x173e <mulacc+0x1c>
    174a:	6a 0f       	add	r22, r26
    174c:	7b 1f       	adc	r23, r27
    174e:	8e 1f       	adc	r24, r30
    1750:	9f 1f       	adc	r25, r31
    1752:	31 e0       	ldi	r19, 0x01	; 1
    1754:	66 0f       	add	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	88 1f       	adc	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	31 50       	subi	r19, 0x01	; 1
    175e:	d1 f7       	brne	.-12     	; 0x1754 <mulacc+0x32>
    1760:	7b 01       	movw	r14, r22
    1762:	8c 01       	movw	r16, r24
    1764:	e2 0e       	add	r14, r18
    1766:	f1 1c       	adc	r15, r1
    1768:	01 1d       	adc	r16, r1
    176a:	11 1d       	adc	r17, r1
    176c:	a8 01       	movw	r20, r16
    176e:	97 01       	movw	r18, r14
    1770:	b7 01       	movw	r22, r14
    1772:	ca 01       	movw	r24, r20
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	08 95       	ret

0000177e <skip_spaces>:
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	8c 01       	movw	r16, r24
    1788:	c8 01       	movw	r24, r16
    178a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    178e:	ec 01       	movw	r28, r24
    1790:	97 fd       	sbrc	r25, 7
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <skip_spaces+0x26>
    1794:	0e 94 57 0e 	call	0x1cae	; 0x1cae <isspace>
    1798:	89 2b       	or	r24, r25
    179a:	b1 f7       	brne	.-20     	; 0x1788 <skip_spaces+0xa>
    179c:	ce 01       	movw	r24, r28
    179e:	b8 01       	movw	r22, r16
    17a0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ungetc>
    17a4:	ce 01       	movw	r24, r28
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <conv_int>:
    17b0:	af 92       	push	r10
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	ec 01       	movw	r28, r24
    17c6:	c6 2e       	mov	r12, r22
    17c8:	5a 01       	movw	r10, r20
    17ca:	12 2f       	mov	r17, r18
    17cc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    17d0:	ac 01       	movw	r20, r24
    17d2:	8b 32       	cpi	r24, 0x2B	; 43
    17d4:	19 f0       	breq	.+6      	; 0x17dc <conv_int+0x2c>
    17d6:	8d 32       	cpi	r24, 0x2D	; 45
    17d8:	51 f4       	brne	.+20     	; 0x17ee <conv_int+0x3e>
    17da:	10 68       	ori	r17, 0x80	; 128
    17dc:	ca 94       	dec	r12
    17de:	09 f4       	brne	.+2      	; 0x17e2 <conv_int+0x32>
    17e0:	6d c0       	rjmp	.+218    	; 0x18bc <conv_int+0x10c>
    17e2:	ce 01       	movw	r24, r28
    17e4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    17e8:	ac 01       	movw	r20, r24
    17ea:	97 fd       	sbrc	r25, 7
    17ec:	67 c0       	rjmp	.+206    	; 0x18bc <conv_int+0x10c>
    17ee:	6d ef       	ldi	r22, 0xFD	; 253
    17f0:	d6 2e       	mov	r13, r22
    17f2:	d1 22       	and	r13, r17
    17f4:	8d 2d       	mov	r24, r13
    17f6:	80 73       	andi	r24, 0x30	; 48
    17f8:	01 f5       	brne	.+64     	; 0x183a <conv_int+0x8a>
    17fa:	40 33       	cpi	r20, 0x30	; 48
    17fc:	f1 f4       	brne	.+60     	; 0x183a <conv_int+0x8a>
    17fe:	ca 94       	dec	r12
    1800:	09 f4       	brne	.+2      	; 0x1804 <conv_int+0x54>
    1802:	47 c0       	rjmp	.+142    	; 0x1892 <conv_int+0xe2>
    1804:	ce 01       	movw	r24, r28
    1806:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    180a:	ac 01       	movw	r20, r24
    180c:	97 fd       	sbrc	r25, 7
    180e:	41 c0       	rjmp	.+130    	; 0x1892 <conv_int+0xe2>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	d8 2a       	or	r13, r24
    1814:	48 37       	cpi	r20, 0x78	; 120
    1816:	11 f0       	breq	.+4      	; 0x181c <conv_int+0x6c>
    1818:	48 35       	cpi	r20, 0x58	; 88
    181a:	59 f4       	brne	.+22     	; 0x1832 <conv_int+0x82>
    181c:	80 e4       	ldi	r24, 0x40	; 64
    181e:	d8 2a       	or	r13, r24
    1820:	ca 94       	dec	r12
    1822:	b9 f1       	breq	.+110    	; 0x1892 <conv_int+0xe2>
    1824:	ce 01       	movw	r24, r28
    1826:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    182a:	ac 01       	movw	r20, r24
    182c:	99 23       	and	r25, r25
    182e:	2c f4       	brge	.+10     	; 0x183a <conv_int+0x8a>
    1830:	30 c0       	rjmp	.+96     	; 0x1892 <conv_int+0xe2>
    1832:	d6 fc       	sbrc	r13, 6
    1834:	02 c0       	rjmp	.+4      	; 0x183a <conv_int+0x8a>
    1836:	80 e1       	ldi	r24, 0x10	; 16
    1838:	d8 2a       	or	r13, r24
    183a:	ee 24       	eor	r14, r14
    183c:	ff 24       	eor	r15, r15
    183e:	87 01       	movw	r16, r14
    1840:	24 2f       	mov	r18, r20
    1842:	20 53       	subi	r18, 0x30	; 48
    1844:	28 30       	cpi	r18, 0x08	; 8
    1846:	88 f0       	brcs	.+34     	; 0x186a <conv_int+0xba>
    1848:	d4 fc       	sbrc	r13, 4
    184a:	09 c0       	rjmp	.+18     	; 0x185e <conv_int+0xae>
    184c:	2a 30       	cpi	r18, 0x0A	; 10
    184e:	68 f0       	brcs	.+26     	; 0x186a <conv_int+0xba>
    1850:	d6 fe       	sbrs	r13, 6
    1852:	05 c0       	rjmp	.+10     	; 0x185e <conv_int+0xae>
    1854:	2f 7d       	andi	r18, 0xDF	; 223
    1856:	82 2f       	mov	r24, r18
    1858:	81 51       	subi	r24, 0x11	; 17
    185a:	86 30       	cpi	r24, 0x06	; 6
    185c:	28 f0       	brcs	.+10     	; 0x1868 <conv_int+0xb8>
    185e:	ca 01       	movw	r24, r20
    1860:	be 01       	movw	r22, r28
    1862:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ungetc>
    1866:	12 c0       	rjmp	.+36     	; 0x188c <conv_int+0xdc>
    1868:	27 50       	subi	r18, 0x07	; 7
    186a:	c8 01       	movw	r24, r16
    186c:	b7 01       	movw	r22, r14
    186e:	4d 2d       	mov	r20, r13
    1870:	0e 94 91 0b 	call	0x1722	; 0x1722 <mulacc>
    1874:	7b 01       	movw	r14, r22
    1876:	8c 01       	movw	r16, r24
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	d8 2a       	or	r13, r24
    187c:	ca 94       	dec	r12
    187e:	61 f0       	breq	.+24     	; 0x1898 <conv_int+0xe8>
    1880:	ce 01       	movw	r24, r28
    1882:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    1886:	ac 01       	movw	r20, r24
    1888:	97 ff       	sbrs	r25, 7
    188a:	da cf       	rjmp	.-76     	; 0x1840 <conv_int+0x90>
    188c:	d1 fc       	sbrc	r13, 1
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <conv_int+0xe8>
    1890:	15 c0       	rjmp	.+42     	; 0x18bc <conv_int+0x10c>
    1892:	ee 24       	eor	r14, r14
    1894:	ff 24       	eor	r15, r15
    1896:	87 01       	movw	r16, r14
    1898:	d7 fe       	sbrs	r13, 7
    189a:	08 c0       	rjmp	.+16     	; 0x18ac <conv_int+0xfc>
    189c:	10 95       	com	r17
    189e:	00 95       	com	r16
    18a0:	f0 94       	com	r15
    18a2:	e0 94       	com	r14
    18a4:	e1 1c       	adc	r14, r1
    18a6:	f1 1c       	adc	r15, r1
    18a8:	01 1d       	adc	r16, r1
    18aa:	11 1d       	adc	r17, r1
    18ac:	c5 01       	movw	r24, r10
    18ae:	b8 01       	movw	r22, r16
    18b0:	a7 01       	movw	r20, r14
    18b2:	2d 2d       	mov	r18, r13
    18b4:	0e 94 85 0b 	call	0x170a	; 0x170a <putval>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <conv_int+0x10e>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	08 95       	ret

000018d4 <conv_brk>:
    18d4:	6f 92       	push	r6
    18d6:	7f 92       	push	r7
    18d8:	8f 92       	push	r8
    18da:	9f 92       	push	r9
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	a0 97       	sbiw	r28, 0x20	; 32
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	6c 01       	movw	r12, r24
    1902:	a6 2e       	mov	r10, r22
    1904:	8a 01       	movw	r16, r20
    1906:	79 01       	movw	r14, r18
    1908:	fe 01       	movw	r30, r28
    190a:	31 96       	adiw	r30, 0x01	; 1
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	df 01       	movw	r26, r30
    1910:	1d 92       	st	X+, r1
    1912:	8a 95       	dec	r24
    1914:	e9 f7       	brne	.-6      	; 0x1910 <conv_brk+0x3c>
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	4f 01       	movw	r8, r30
    1922:	a1 e0       	ldi	r26, 0x01	; 1
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	f6 01       	movw	r30, r12
    1928:	83 81       	ldd	r24, Z+3	; 0x03
    192a:	f7 01       	movw	r30, r14
    192c:	83 fd       	sbrc	r24, 3
    192e:	25 91       	lpm	r18, Z+
    1930:	83 ff       	sbrs	r24, 3
    1932:	21 91       	ld	r18, Z+
    1934:	7f 01       	movw	r14, r30
    1936:	22 23       	and	r18, r18
    1938:	09 f4       	brne	.+2      	; 0x193c <conv_brk+0x68>
    193a:	7e c0       	rjmp	.+252    	; 0x1a38 <conv_brk+0x164>
    193c:	2e 35       	cpi	r18, 0x5E	; 94
    193e:	19 f4       	brne	.+6      	; 0x1946 <conv_brk+0x72>
    1940:	41 15       	cp	r20, r1
    1942:	51 05       	cpc	r21, r1
    1944:	69 f1       	breq	.+90     	; 0x19a0 <conv_brk+0xcc>
    1946:	87 2f       	mov	r24, r23
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	84 17       	cp	r24, r20
    194c:	95 07       	cpc	r25, r21
    194e:	44 f4       	brge	.+16     	; 0x1960 <conv_brk+0x8c>
    1950:	2d 35       	cpi	r18, 0x5D	; 93
    1952:	51 f1       	breq	.+84     	; 0x19a8 <conv_brk+0xd4>
    1954:	2d 32       	cpi	r18, 0x2D	; 45
    1956:	21 f4       	brne	.+8      	; 0x1960 <conv_brk+0x8c>
    1958:	33 23       	and	r19, r19
    195a:	29 f4       	brne	.+10     	; 0x1966 <conv_brk+0x92>
    195c:	31 e0       	ldi	r19, 0x01	; 1
    195e:	21 c0       	rjmp	.+66     	; 0x19a2 <conv_brk+0xce>
    1960:	33 23       	and	r19, r19
    1962:	09 f4       	brne	.+2      	; 0x1966 <conv_brk+0x92>
    1964:	62 2f       	mov	r22, r18
    1966:	32 2f       	mov	r19, r18
    1968:	83 2f       	mov	r24, r19
    196a:	86 95       	lsr	r24
    196c:	86 95       	lsr	r24
    196e:	86 95       	lsr	r24
    1970:	f4 01       	movw	r30, r8
    1972:	e8 0f       	add	r30, r24
    1974:	f1 1d       	adc	r31, r1
    1976:	83 2f       	mov	r24, r19
    1978:	87 70       	andi	r24, 0x07	; 7
    197a:	3d 01       	movw	r6, r26
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <conv_brk+0xae>
    197e:	66 0c       	add	r6, r6
    1980:	77 1c       	adc	r7, r7
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <conv_brk+0xaa>
    1986:	20 81       	ld	r18, Z
    1988:	26 29       	or	r18, r6
    198a:	20 83       	st	Z, r18
    198c:	36 17       	cp	r19, r22
    198e:	11 f4       	brne	.+4      	; 0x1994 <conv_brk+0xc0>
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	07 c0       	rjmp	.+14     	; 0x19a2 <conv_brk+0xce>
    1994:	36 17       	cp	r19, r22
    1996:	10 f4       	brcc	.+4      	; 0x199c <conv_brk+0xc8>
    1998:	3f 5f       	subi	r19, 0xFF	; 255
    199a:	e6 cf       	rjmp	.-52     	; 0x1968 <conv_brk+0x94>
    199c:	31 50       	subi	r19, 0x01	; 1
    199e:	e4 cf       	rjmp	.-56     	; 0x1968 <conv_brk+0x94>
    19a0:	71 e0       	ldi	r23, 0x01	; 1
    19a2:	4f 5f       	subi	r20, 0xFF	; 255
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
    19a6:	bf cf       	rjmp	.-130    	; 0x1926 <conv_brk+0x52>
    19a8:	33 23       	and	r19, r19
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <conv_brk+0xde>
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	8e 83       	std	Y+6, r24	; 0x06
    19b2:	77 23       	and	r23, r23
    19b4:	59 f0       	breq	.+22     	; 0x19cc <conv_brk+0xf8>
    19b6:	fe 01       	movw	r30, r28
    19b8:	31 96       	adiw	r30, 0x01	; 1
    19ba:	9e 01       	movw	r18, r28
    19bc:	2f 5d       	subi	r18, 0xDF	; 223
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	80 95       	com	r24
    19c4:	81 93       	st	Z+, r24
    19c6:	e2 17       	cp	r30, r18
    19c8:	f3 07       	cpc	r31, r19
    19ca:	d1 f7       	brne	.-12     	; 0x19c0 <conv_brk+0xec>
    19cc:	bb 24       	eor	r11, r11
    19ce:	b3 94       	inc	r11
    19d0:	4e 01       	movw	r8, r28
    19d2:	08 94       	sec
    19d4:	81 1c       	adc	r8, r1
    19d6:	91 1c       	adc	r9, r1
    19d8:	c6 01       	movw	r24, r12
    19da:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    19de:	ac 01       	movw	r20, r24
    19e0:	97 fd       	sbrc	r25, 7
    19e2:	22 c0       	rjmp	.+68     	; 0x1a28 <conv_brk+0x154>
    19e4:	86 95       	lsr	r24
    19e6:	86 95       	lsr	r24
    19e8:	86 95       	lsr	r24
    19ea:	f4 01       	movw	r30, r8
    19ec:	e8 0f       	add	r30, r24
    19ee:	f1 1d       	adc	r31, r1
    19f0:	80 81       	ld	r24, Z
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9a 01       	movw	r18, r20
    19f6:	27 70       	andi	r18, 0x07	; 7
    19f8:	30 70       	andi	r19, 0x00	; 0
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <conv_brk+0x12c>
    19fc:	95 95       	asr	r25
    19fe:	87 95       	ror	r24
    1a00:	2a 95       	dec	r18
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <conv_brk+0x128>
    1a04:	80 fd       	sbrc	r24, 0
    1a06:	05 c0       	rjmp	.+10     	; 0x1a12 <conv_brk+0x13e>
    1a08:	ca 01       	movw	r24, r20
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ungetc>
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <conv_brk+0x154>
    1a12:	01 15       	cp	r16, r1
    1a14:	11 05       	cpc	r17, r1
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <conv_brk+0x14a>
    1a18:	d8 01       	movw	r26, r16
    1a1a:	4d 93       	st	X+, r20
    1a1c:	8d 01       	movw	r16, r26
    1a1e:	aa 94       	dec	r10
    1a20:	bb 24       	eor	r11, r11
    1a22:	aa 20       	and	r10, r10
    1a24:	c9 f6       	brne	.-78     	; 0x19d8 <conv_brk+0x104>
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <conv_brk+0x158>
    1a28:	bb 20       	and	r11, r11
    1a2a:	31 f4       	brne	.+12     	; 0x1a38 <conv_brk+0x164>
    1a2c:	01 15       	cp	r16, r1
    1a2e:	11 05       	cpc	r17, r1
    1a30:	29 f0       	breq	.+10     	; 0x1a3c <conv_brk+0x168>
    1a32:	f8 01       	movw	r30, r16
    1a34:	10 82       	st	Z, r1
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <conv_brk+0x168>
    1a38:	ee 24       	eor	r14, r14
    1a3a:	ff 24       	eor	r15, r15
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	a0 96       	adiw	r28, 0x20	; 32
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	df 90       	pop	r13
    1a58:	cf 90       	pop	r12
    1a5a:	bf 90       	pop	r11
    1a5c:	af 90       	pop	r10
    1a5e:	9f 90       	pop	r9
    1a60:	8f 90       	pop	r8
    1a62:	7f 90       	pop	r7
    1a64:	6f 90       	pop	r6
    1a66:	08 95       	ret

00001a68 <vfscanf>:
    1a68:	6f 92       	push	r6
    1a6a:	7f 92       	push	r7
    1a6c:	8f 92       	push	r8
    1a6e:	9f 92       	push	r9
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	5c 01       	movw	r10, r24
    1a86:	6b 01       	movw	r12, r22
    1a88:	3a 01       	movw	r6, r20
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	17 82       	std	Z+7, r1	; 0x07
    1a8e:	16 82       	std	Z+6, r1	; 0x06
    1a90:	88 24       	eor	r8, r8
    1a92:	ea c0       	rjmp	.+468    	; 0x1c68 <vfscanf+0x200>
    1a94:	81 2f       	mov	r24, r17
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 57 0e 	call	0x1cae	; 0x1cae <isspace>
    1a9c:	89 2b       	or	r24, r25
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <vfscanf+0x40>
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	0e 94 bf 0b 	call	0x177e	; 0x177e <skip_spaces>
    1aa6:	e0 c0       	rjmp	.+448    	; 0x1c68 <vfscanf+0x200>
    1aa8:	15 32       	cpi	r17, 0x25	; 37
    1aaa:	49 f4       	brne	.+18     	; 0x1abe <vfscanf+0x56>
    1aac:	f6 01       	movw	r30, r12
    1aae:	f3 fc       	sbrc	r15, 3
    1ab0:	65 91       	lpm	r22, Z+
    1ab2:	f3 fe       	sbrs	r15, 3
    1ab4:	61 91       	ld	r22, Z+
    1ab6:	6f 01       	movw	r12, r30
    1ab8:	65 32       	cpi	r22, 0x25	; 37
    1aba:	69 f4       	brne	.+26     	; 0x1ad6 <vfscanf+0x6e>
    1abc:	15 e2       	ldi	r17, 0x25	; 37
    1abe:	c5 01       	movw	r24, r10
    1ac0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    1ac4:	97 fd       	sbrc	r25, 7
    1ac6:	dc c0       	rjmp	.+440    	; 0x1c80 <vfscanf+0x218>
    1ac8:	18 17       	cp	r17, r24
    1aca:	09 f4       	brne	.+2      	; 0x1ace <vfscanf+0x66>
    1acc:	cd c0       	rjmp	.+410    	; 0x1c68 <vfscanf+0x200>
    1ace:	b5 01       	movw	r22, r10
    1ad0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ungetc>
    1ad4:	da c0       	rjmp	.+436    	; 0x1c8a <vfscanf+0x222>
    1ad6:	6a 32       	cpi	r22, 0x2A	; 42
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <vfscanf+0x78>
    1ada:	16 2f       	mov	r17, r22
    1adc:	00 e0       	ldi	r16, 0x00	; 0
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <vfscanf+0x84>
    1ae0:	f3 fc       	sbrc	r15, 3
    1ae2:	15 91       	lpm	r17, Z+
    1ae4:	f3 fe       	sbrs	r15, 3
    1ae6:	11 91       	ld	r17, Z+
    1ae8:	6f 01       	movw	r12, r30
    1aea:	01 e0       	ldi	r16, 0x01	; 1
    1aec:	99 24       	eor	r9, r9
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <vfscanf+0xa6>
    1af0:	02 60       	ori	r16, 0x02	; 2
    1af2:	69 2d       	mov	r22, r9
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	0e 94 91 0b 	call	0x1722	; 0x1722 <mulacc>
    1b00:	96 2e       	mov	r9, r22
    1b02:	f6 01       	movw	r30, r12
    1b04:	f3 fc       	sbrc	r15, 3
    1b06:	15 91       	lpm	r17, Z+
    1b08:	f3 fe       	sbrs	r15, 3
    1b0a:	11 91       	ld	r17, Z+
    1b0c:	6f 01       	movw	r12, r30
    1b0e:	21 2f       	mov	r18, r17
    1b10:	20 53       	subi	r18, 0x30	; 48
    1b12:	2a 30       	cpi	r18, 0x0A	; 10
    1b14:	68 f3       	brcs	.-38     	; 0x1af0 <vfscanf+0x88>
    1b16:	01 fd       	sbrc	r16, 1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfscanf+0xb8>
    1b1a:	99 24       	eor	r9, r9
    1b1c:	9a 94       	dec	r9
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <vfscanf+0xbe>
    1b20:	99 20       	and	r9, r9
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <vfscanf+0xbe>
    1b24:	b2 c0       	rjmp	.+356    	; 0x1c8a <vfscanf+0x222>
    1b26:	18 36       	cpi	r17, 0x68	; 104
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <vfscanf+0xca>
    1b2a:	1c 36       	cpi	r17, 0x6C	; 108
    1b2c:	99 f4       	brne	.+38     	; 0x1b54 <vfscanf+0xec>
    1b2e:	f6 01       	movw	r30, r12
    1b30:	0b c0       	rjmp	.+22     	; 0x1b48 <vfscanf+0xe0>
    1b32:	f6 01       	movw	r30, r12
    1b34:	f3 fc       	sbrc	r15, 3
    1b36:	65 91       	lpm	r22, Z+
    1b38:	f3 fe       	sbrs	r15, 3
    1b3a:	61 91       	ld	r22, Z+
    1b3c:	68 36       	cpi	r22, 0x68	; 104
    1b3e:	19 f0       	breq	.+6      	; 0x1b46 <vfscanf+0xde>
    1b40:	6f 01       	movw	r12, r30
    1b42:	16 2f       	mov	r17, r22
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <vfscanf+0xec>
    1b46:	08 60       	ori	r16, 0x08	; 8
    1b48:	04 60       	ori	r16, 0x04	; 4
    1b4a:	f3 fc       	sbrc	r15, 3
    1b4c:	15 91       	lpm	r17, Z+
    1b4e:	f3 fe       	sbrs	r15, 3
    1b50:	11 91       	ld	r17, Z+
    1b52:	6f 01       	movw	r12, r30
    1b54:	11 23       	and	r17, r17
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <vfscanf+0xf2>
    1b58:	98 c0       	rjmp	.+304    	; 0x1c8a <vfscanf+0x222>
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	61 2f       	mov	r22, r17
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <strchr_P>
    1b66:	89 2b       	or	r24, r25
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <vfscanf+0x104>
    1b6a:	8f c0       	rjmp	.+286    	; 0x1c8a <vfscanf+0x222>
    1b6c:	80 2f       	mov	r24, r16
    1b6e:	00 ff       	sbrs	r16, 0
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <vfscanf+0x110>
    1b72:	ee 24       	eor	r14, r14
    1b74:	ff 24       	eor	r15, r15
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <vfscanf+0x11e>
    1b78:	f3 01       	movw	r30, r6
    1b7a:	e0 80       	ld	r14, Z
    1b7c:	f1 80       	ldd	r15, Z+1	; 0x01
    1b7e:	22 e0       	ldi	r18, 0x02	; 2
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	62 0e       	add	r6, r18
    1b84:	73 1e       	adc	r7, r19
    1b86:	1e 36       	cpi	r17, 0x6E	; 110
    1b88:	51 f4       	brne	.+20     	; 0x1b9e <vfscanf+0x136>
    1b8a:	f5 01       	movw	r30, r10
    1b8c:	46 81       	ldd	r20, Z+6	; 0x06
    1b8e:	57 81       	ldd	r21, Z+7	; 0x07
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	70 e0       	ldi	r23, 0x00	; 0
    1b94:	c7 01       	movw	r24, r14
    1b96:	20 2f       	mov	r18, r16
    1b98:	0e 94 85 0b 	call	0x170a	; 0x170a <putval>
    1b9c:	65 c0       	rjmp	.+202    	; 0x1c68 <vfscanf+0x200>
    1b9e:	13 36       	cpi	r17, 0x63	; 99
    1ba0:	91 f4       	brne	.+36     	; 0x1bc6 <vfscanf+0x15e>
    1ba2:	81 fd       	sbrc	r24, 1
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfscanf+0x142>
    1ba6:	99 24       	eor	r9, r9
    1ba8:	93 94       	inc	r9
    1baa:	c5 01       	movw	r24, r10
    1bac:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    1bb0:	97 fd       	sbrc	r25, 7
    1bb2:	66 c0       	rjmp	.+204    	; 0x1c80 <vfscanf+0x218>
    1bb4:	e1 14       	cp	r14, r1
    1bb6:	f1 04       	cpc	r15, r1
    1bb8:	19 f0       	breq	.+6      	; 0x1bc0 <vfscanf+0x158>
    1bba:	f7 01       	movw	r30, r14
    1bbc:	81 93       	st	Z+, r24
    1bbe:	7f 01       	movw	r14, r30
    1bc0:	9a 94       	dec	r9
    1bc2:	99 f7       	brne	.-26     	; 0x1baa <vfscanf+0x142>
    1bc4:	4f c0       	rjmp	.+158    	; 0x1c64 <vfscanf+0x1fc>
    1bc6:	1b 35       	cpi	r17, 0x5B	; 91
    1bc8:	59 f4       	brne	.+22     	; 0x1be0 <vfscanf+0x178>
    1bca:	c5 01       	movw	r24, r10
    1bcc:	69 2d       	mov	r22, r9
    1bce:	a7 01       	movw	r20, r14
    1bd0:	96 01       	movw	r18, r12
    1bd2:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <conv_brk>
    1bd6:	6c 01       	movw	r12, r24
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	09 f0       	breq	.+2      	; 0x1bde <vfscanf+0x176>
    1bdc:	43 c0       	rjmp	.+134    	; 0x1c64 <vfscanf+0x1fc>
    1bde:	3d c0       	rjmp	.+122    	; 0x1c5a <vfscanf+0x1f2>
    1be0:	c5 01       	movw	r24, r10
    1be2:	0e 94 bf 0b 	call	0x177e	; 0x177e <skip_spaces>
    1be6:	97 fd       	sbrc	r25, 7
    1be8:	4b c0       	rjmp	.+150    	; 0x1c80 <vfscanf+0x218>
    1bea:	1f 36       	cpi	r17, 0x6F	; 111
    1bec:	59 f1       	breq	.+86     	; 0x1c44 <vfscanf+0x1dc>
    1bee:	10 37       	cpi	r17, 0x70	; 112
    1bf0:	28 f4       	brcc	.+10     	; 0x1bfc <vfscanf+0x194>
    1bf2:	14 36       	cpi	r17, 0x64	; 100
    1bf4:	29 f1       	breq	.+74     	; 0x1c40 <vfscanf+0x1d8>
    1bf6:	19 36       	cpi	r17, 0x69	; 105
    1bf8:	39 f5       	brne	.+78     	; 0x1c48 <vfscanf+0x1e0>
    1bfa:	27 c0       	rjmp	.+78     	; 0x1c4a <vfscanf+0x1e2>
    1bfc:	13 37       	cpi	r17, 0x73	; 115
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <vfscanf+0x19e>
    1c00:	15 37       	cpi	r17, 0x75	; 117
    1c02:	11 f5       	brne	.+68     	; 0x1c48 <vfscanf+0x1e0>
    1c04:	1d c0       	rjmp	.+58     	; 0x1c40 <vfscanf+0x1d8>
    1c06:	c5 01       	movw	r24, r10
    1c08:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fgetc>
    1c0c:	ec 01       	movw	r28, r24
    1c0e:	97 fd       	sbrc	r25, 7
    1c10:	11 c0       	rjmp	.+34     	; 0x1c34 <vfscanf+0x1cc>
    1c12:	0e 94 57 0e 	call	0x1cae	; 0x1cae <isspace>
    1c16:	89 2b       	or	r24, r25
    1c18:	29 f0       	breq	.+10     	; 0x1c24 <vfscanf+0x1bc>
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	b5 01       	movw	r22, r10
    1c1e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <ungetc>
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <vfscanf+0x1cc>
    1c24:	e1 14       	cp	r14, r1
    1c26:	f1 04       	cpc	r15, r1
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <vfscanf+0x1c8>
    1c2a:	f7 01       	movw	r30, r14
    1c2c:	c1 93       	st	Z+, r28
    1c2e:	7f 01       	movw	r14, r30
    1c30:	9a 94       	dec	r9
    1c32:	49 f7       	brne	.-46     	; 0x1c06 <vfscanf+0x19e>
    1c34:	e1 14       	cp	r14, r1
    1c36:	f1 04       	cpc	r15, r1
    1c38:	a9 f0       	breq	.+42     	; 0x1c64 <vfscanf+0x1fc>
    1c3a:	f7 01       	movw	r30, r14
    1c3c:	10 82       	st	Z, r1
    1c3e:	12 c0       	rjmp	.+36     	; 0x1c64 <vfscanf+0x1fc>
    1c40:	00 62       	ori	r16, 0x20	; 32
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <vfscanf+0x1e2>
    1c44:	00 61       	ori	r16, 0x10	; 16
    1c46:	01 c0       	rjmp	.+2      	; 0x1c4a <vfscanf+0x1e2>
    1c48:	00 64       	ori	r16, 0x40	; 64
    1c4a:	c5 01       	movw	r24, r10
    1c4c:	69 2d       	mov	r22, r9
    1c4e:	a7 01       	movw	r20, r14
    1c50:	20 2f       	mov	r18, r16
    1c52:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <conv_int>
    1c56:	88 23       	and	r24, r24
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <vfscanf+0x1fc>
    1c5a:	f5 01       	movw	r30, r10
    1c5c:	83 81       	ldd	r24, Z+3	; 0x03
    1c5e:	80 73       	andi	r24, 0x30	; 48
    1c60:	79 f4       	brne	.+30     	; 0x1c80 <vfscanf+0x218>
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <vfscanf+0x222>
    1c64:	00 ff       	sbrs	r16, 0
    1c66:	83 94       	inc	r8
    1c68:	f5 01       	movw	r30, r10
    1c6a:	f3 80       	ldd	r15, Z+3	; 0x03
    1c6c:	f6 01       	movw	r30, r12
    1c6e:	f3 fc       	sbrc	r15, 3
    1c70:	15 91       	lpm	r17, Z+
    1c72:	f3 fe       	sbrs	r15, 3
    1c74:	11 91       	ld	r17, Z+
    1c76:	6f 01       	movw	r12, r30
    1c78:	11 23       	and	r17, r17
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <vfscanf+0x216>
    1c7c:	0b cf       	rjmp	.-490    	; 0x1a94 <vfscanf+0x2c>
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <vfscanf+0x222>
    1c80:	88 20       	and	r8, r8
    1c82:	19 f4       	brne	.+6      	; 0x1c8a <vfscanf+0x222>
    1c84:	2f ef       	ldi	r18, 0xFF	; 255
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <vfscanf+0x226>
    1c8a:	28 2d       	mov	r18, r8
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	c9 01       	movw	r24, r18
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	8f 90       	pop	r8
    1ca8:	7f 90       	pop	r7
    1caa:	6f 90       	pop	r6
    1cac:	08 95       	ret

00001cae <isspace>:
    1cae:	91 11       	cpse	r25, r1
    1cb0:	0d c1       	rjmp	.+538    	; 0x1ecc <__ctype_isfalse>
    1cb2:	80 32       	cpi	r24, 0x20	; 32
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <isspace+0xe>
    1cb6:	89 50       	subi	r24, 0x09	; 9
    1cb8:	85 50       	subi	r24, 0x05	; 5
    1cba:	d0 f7       	brcc	.-12     	; 0x1cb0 <isspace+0x2>
    1cbc:	08 95       	ret

00001cbe <strchr_P>:
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	05 90       	lpm	r0, Z+
    1cc2:	06 16       	cp	r0, r22
    1cc4:	21 f0       	breq	.+8      	; 0x1cce <strchr_P+0x10>
    1cc6:	00 20       	and	r0, r0
    1cc8:	d9 f7       	brne	.-10     	; 0x1cc0 <strchr_P+0x2>
    1cca:	c0 01       	movw	r24, r0
    1ccc:	08 95       	ret
    1cce:	31 97       	sbiw	r30, 0x01	; 1
    1cd0:	cf 01       	movw	r24, r30
    1cd2:	08 95       	ret

00001cd4 <strnlen_P>:
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	05 90       	lpm	r0, Z+
    1cd8:	61 50       	subi	r22, 0x01	; 1
    1cda:	70 40       	sbci	r23, 0x00	; 0
    1cdc:	01 10       	cpse	r0, r1
    1cde:	d8 f7       	brcc	.-10     	; 0x1cd6 <strnlen_P+0x2>
    1ce0:	80 95       	com	r24
    1ce2:	90 95       	com	r25
    1ce4:	8e 0f       	add	r24, r30
    1ce6:	9f 1f       	adc	r25, r31
    1ce8:	08 95       	ret

00001cea <strnlen>:
    1cea:	fc 01       	movw	r30, r24
    1cec:	61 50       	subi	r22, 0x01	; 1
    1cee:	70 40       	sbci	r23, 0x00	; 0
    1cf0:	01 90       	ld	r0, Z+
    1cf2:	01 10       	cpse	r0, r1
    1cf4:	d8 f7       	brcc	.-10     	; 0x1cec <strnlen+0x2>
    1cf6:	80 95       	com	r24
    1cf8:	90 95       	com	r25
    1cfa:	8e 0f       	add	r24, r30
    1cfc:	9f 1f       	adc	r25, r31
    1cfe:	08 95       	ret

00001d00 <fgetc>:
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	ec 01       	movw	r28, r24
    1d06:	4b 81       	ldd	r20, Y+3	; 0x03
    1d08:	40 ff       	sbrs	r20, 0
    1d0a:	1a c0       	rjmp	.+52     	; 0x1d40 <fgetc+0x40>
    1d0c:	46 ff       	sbrs	r20, 6
    1d0e:	0a c0       	rjmp	.+20     	; 0x1d24 <fgetc+0x24>
    1d10:	4f 7b       	andi	r20, 0xBF	; 191
    1d12:	4b 83       	std	Y+3, r20	; 0x03
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	9f 83       	std	Y+7, r25	; 0x07
    1d1c:	8e 83       	std	Y+6, r24	; 0x06
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	2b c0       	rjmp	.+86     	; 0x1d7a <fgetc+0x7a>
    1d24:	42 ff       	sbrs	r20, 2
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <fgetc+0x4e>
    1d28:	e8 81       	ld	r30, Y
    1d2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d2c:	80 81       	ld	r24, Z
    1d2e:	28 2f       	mov	r18, r24
    1d30:	33 27       	eor	r19, r19
    1d32:	27 fd       	sbrc	r18, 7
    1d34:	30 95       	com	r19
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	29 f4       	brne	.+10     	; 0x1d46 <fgetc+0x46>
    1d3c:	40 62       	ori	r20, 0x20	; 32
    1d3e:	4b 83       	std	Y+3, r20	; 0x03
    1d40:	2f ef       	ldi	r18, 0xFF	; 255
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	1b c0       	rjmp	.+54     	; 0x1d7c <fgetc+0x7c>
    1d46:	31 96       	adiw	r30, 0x01	; 1
    1d48:	f9 83       	std	Y+1, r31	; 0x01
    1d4a:	e8 83       	st	Y, r30
    1d4c:	11 c0       	rjmp	.+34     	; 0x1d70 <fgetc+0x70>
    1d4e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d50:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d52:	ce 01       	movw	r24, r28
    1d54:	09 95       	icall
    1d56:	9c 01       	movw	r18, r24
    1d58:	97 ff       	sbrs	r25, 7
    1d5a:	0a c0       	rjmp	.+20     	; 0x1d70 <fgetc+0x70>
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	2f 5f       	subi	r18, 0xFF	; 255
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <fgetc+0x68>
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <fgetc+0x6a>
    1d68:	80 e1       	ldi	r24, 0x10	; 16
    1d6a:	89 2b       	or	r24, r25
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	e8 cf       	rjmp	.-48     	; 0x1d40 <fgetc+0x40>
    1d70:	8e 81       	ldd	r24, Y+6	; 0x06
    1d72:	9f 81       	ldd	r25, Y+7	; 0x07
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	9f 83       	std	Y+7, r25	; 0x07
    1d78:	8e 83       	std	Y+6, r24	; 0x06
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	c9 01       	movw	r24, r18
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	08 95       	ret

00001d84 <fputc>:
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	eb 01       	movw	r28, r22
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	81 ff       	sbrs	r24, 1
    1d94:	1b c0       	rjmp	.+54     	; 0x1dcc <fputc+0x48>
    1d96:	82 ff       	sbrs	r24, 2
    1d98:	0d c0       	rjmp	.+26     	; 0x1db4 <fputc+0x30>
    1d9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	9d 81       	ldd	r25, Y+5	; 0x05
    1da2:	28 17       	cp	r18, r24
    1da4:	39 07       	cpc	r19, r25
    1da6:	64 f4       	brge	.+24     	; 0x1dc0 <fputc+0x3c>
    1da8:	e8 81       	ld	r30, Y
    1daa:	f9 81       	ldd	r31, Y+1	; 0x01
    1dac:	01 93       	st	Z+, r16
    1dae:	f9 83       	std	Y+1, r31	; 0x01
    1db0:	e8 83       	st	Y, r30
    1db2:	06 c0       	rjmp	.+12     	; 0x1dc0 <fputc+0x3c>
    1db4:	e8 85       	ldd	r30, Y+8	; 0x08
    1db6:	f9 85       	ldd	r31, Y+9	; 0x09
    1db8:	80 2f       	mov	r24, r16
    1dba:	09 95       	icall
    1dbc:	89 2b       	or	r24, r25
    1dbe:	31 f4       	brne	.+12     	; 0x1dcc <fputc+0x48>
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	9f 83       	std	Y+7, r25	; 0x07
    1dc8:	8e 83       	std	Y+6, r24	; 0x06
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <fputc+0x4c>
    1dcc:	0f ef       	ldi	r16, 0xFF	; 255
    1dce:	1f ef       	ldi	r17, 0xFF	; 255
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	08 95       	ret

00001ddc <ungetc>:
    1ddc:	9c 01       	movw	r18, r24
    1dde:	fb 01       	movw	r30, r22
    1de0:	83 81       	ldd	r24, Z+3	; 0x03
    1de2:	80 ff       	sbrs	r24, 0
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <ungetc+0x2c>
    1de6:	86 fd       	sbrc	r24, 6
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <ungetc+0x2c>
    1dea:	9f ef       	ldi	r25, 0xFF	; 255
    1dec:	2f 3f       	cpi	r18, 0xFF	; 255
    1dee:	39 07       	cpc	r19, r25
    1df0:	59 f0       	breq	.+22     	; 0x1e08 <ungetc+0x2c>
    1df2:	22 83       	std	Z+2, r18	; 0x02
    1df4:	80 64       	ori	r24, 0x40	; 64
    1df6:	8f 7d       	andi	r24, 0xDF	; 223
    1df8:	83 83       	std	Z+3, r24	; 0x03
    1dfa:	86 81       	ldd	r24, Z+6	; 0x06
    1dfc:	97 81       	ldd	r25, Z+7	; 0x07
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	97 83       	std	Z+7, r25	; 0x07
    1e02:	86 83       	std	Z+6, r24	; 0x06
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <ungetc+0x30>
    1e08:	2f ef       	ldi	r18, 0xFF	; 255
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	08 95       	ret

00001e10 <__ultoa_invert>:
    1e10:	fa 01       	movw	r30, r20
    1e12:	aa 27       	eor	r26, r26
    1e14:	28 30       	cpi	r18, 0x08	; 8
    1e16:	51 f1       	breq	.+84     	; 0x1e6c <__ultoa_invert+0x5c>
    1e18:	20 31       	cpi	r18, 0x10	; 16
    1e1a:	81 f1       	breq	.+96     	; 0x1e7c <__ultoa_invert+0x6c>
    1e1c:	e8 94       	clt
    1e1e:	6f 93       	push	r22
    1e20:	6e 7f       	andi	r22, 0xFE	; 254
    1e22:	6e 5f       	subi	r22, 0xFE	; 254
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	8f 4f       	sbci	r24, 0xFF	; 255
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	af 4f       	sbci	r26, 0xFF	; 255
    1e2c:	b1 e0       	ldi	r27, 0x01	; 1
    1e2e:	3e d0       	rcall	.+124    	; 0x1eac <__ultoa_invert+0x9c>
    1e30:	b4 e0       	ldi	r27, 0x04	; 4
    1e32:	3c d0       	rcall	.+120    	; 0x1eac <__ultoa_invert+0x9c>
    1e34:	67 0f       	add	r22, r23
    1e36:	78 1f       	adc	r23, r24
    1e38:	89 1f       	adc	r24, r25
    1e3a:	9a 1f       	adc	r25, r26
    1e3c:	a1 1d       	adc	r26, r1
    1e3e:	68 0f       	add	r22, r24
    1e40:	79 1f       	adc	r23, r25
    1e42:	8a 1f       	adc	r24, r26
    1e44:	91 1d       	adc	r25, r1
    1e46:	a1 1d       	adc	r26, r1
    1e48:	6a 0f       	add	r22, r26
    1e4a:	71 1d       	adc	r23, r1
    1e4c:	81 1d       	adc	r24, r1
    1e4e:	91 1d       	adc	r25, r1
    1e50:	a1 1d       	adc	r26, r1
    1e52:	20 d0       	rcall	.+64     	; 0x1e94 <__ultoa_invert+0x84>
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <__ultoa_invert+0x48>
    1e56:	68 94       	set
    1e58:	3f 91       	pop	r19
    1e5a:	2a e0       	ldi	r18, 0x0A	; 10
    1e5c:	26 9f       	mul	r18, r22
    1e5e:	11 24       	eor	r1, r1
    1e60:	30 19       	sub	r19, r0
    1e62:	30 5d       	subi	r19, 0xD0	; 208
    1e64:	31 93       	st	Z+, r19
    1e66:	de f6       	brtc	.-74     	; 0x1e1e <__ultoa_invert+0xe>
    1e68:	cf 01       	movw	r24, r30
    1e6a:	08 95       	ret
    1e6c:	46 2f       	mov	r20, r22
    1e6e:	47 70       	andi	r20, 0x07	; 7
    1e70:	40 5d       	subi	r20, 0xD0	; 208
    1e72:	41 93       	st	Z+, r20
    1e74:	b3 e0       	ldi	r27, 0x03	; 3
    1e76:	0f d0       	rcall	.+30     	; 0x1e96 <__ultoa_invert+0x86>
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <__ultoa_invert+0x5c>
    1e7a:	f6 cf       	rjmp	.-20     	; 0x1e68 <__ultoa_invert+0x58>
    1e7c:	46 2f       	mov	r20, r22
    1e7e:	4f 70       	andi	r20, 0x0F	; 15
    1e80:	40 5d       	subi	r20, 0xD0	; 208
    1e82:	4a 33       	cpi	r20, 0x3A	; 58
    1e84:	18 f0       	brcs	.+6      	; 0x1e8c <__ultoa_invert+0x7c>
    1e86:	49 5d       	subi	r20, 0xD9	; 217
    1e88:	31 fd       	sbrc	r19, 1
    1e8a:	40 52       	subi	r20, 0x20	; 32
    1e8c:	41 93       	st	Z+, r20
    1e8e:	02 d0       	rcall	.+4      	; 0x1e94 <__ultoa_invert+0x84>
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__ultoa_invert+0x6c>
    1e92:	ea cf       	rjmp	.-44     	; 0x1e68 <__ultoa_invert+0x58>
    1e94:	b4 e0       	ldi	r27, 0x04	; 4
    1e96:	a6 95       	lsr	r26
    1e98:	97 95       	ror	r25
    1e9a:	87 95       	ror	r24
    1e9c:	77 95       	ror	r23
    1e9e:	67 95       	ror	r22
    1ea0:	ba 95       	dec	r27
    1ea2:	c9 f7       	brne	.-14     	; 0x1e96 <__ultoa_invert+0x86>
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	61 05       	cpc	r22, r1
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	08 95       	ret
    1eac:	9b 01       	movw	r18, r22
    1eae:	ac 01       	movw	r20, r24
    1eb0:	0a 2e       	mov	r0, r26
    1eb2:	06 94       	lsr	r0
    1eb4:	57 95       	ror	r21
    1eb6:	47 95       	ror	r20
    1eb8:	37 95       	ror	r19
    1eba:	27 95       	ror	r18
    1ebc:	ba 95       	dec	r27
    1ebe:	c9 f7       	brne	.-14     	; 0x1eb2 <__ultoa_invert+0xa2>
    1ec0:	62 0f       	add	r22, r18
    1ec2:	73 1f       	adc	r23, r19
    1ec4:	84 1f       	adc	r24, r20
    1ec6:	95 1f       	adc	r25, r21
    1ec8:	a0 1d       	adc	r26, r0
    1eca:	08 95       	ret

00001ecc <__ctype_isfalse>:
    1ecc:	99 27       	eor	r25, r25
    1ece:	88 27       	eor	r24, r24

00001ed0 <__ctype_istrue>:
    1ed0:	08 95       	ret

00001ed2 <_exit>:
    1ed2:	f8 94       	cli

00001ed4 <__stop_program>:
    1ed4:	ff cf       	rjmp	.-2      	; 0x1ed4 <__stop_program>
