
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  0000293e  000029d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000293e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  00002a74  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003da  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002547  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  000053f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ca5  00000000  00000000  00005a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  000076b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00007998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001052  00000000  00000000  00007def  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f48  00000000  00000000  00008e41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LCD_wait1>:
      c2:	77 61 69 74 69 6e 67 20 66 6f 72 20 75 73 65 72     waiting for user
	...

000000d4 <LCD_wait2>:
      d4:	74 6f 20 70 72 65 73 73 20 62 75 74 74 6f 6e 20     to press button 
	...

000000e6 <LCD_printing>:
      e6:	70 72 69 6e 74 69 6e 67 20 20 20 20 20 20 20 20     printing        
	...

000000f8 <LCD_df1>:
      f8:	64 6f 77 6e 6c 6f 61 64 69 6e 67 20 20 20 20 20     downloading     
	...

0000010a <LCD_df2>:
     10a:	66 72 61 6d 65 20 20 20 20 20 20 20 20 20 20 20     frame           
	...

0000011c <LcdCustomChar>:
     11c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     12c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     13c:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     14c:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000015c <__c.1988>:
     15c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d0 e4       	ldi	r29, 0x40	; 64
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	ee e3       	ldi	r30, 0x3E	; 62
     17c:	f9 e2       	ldi	r31, 0x29	; 41
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 3a       	cpi	r26, 0xA2	; 162
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	14 e0       	ldi	r17, 0x04	; 4
     190:	a2 ea       	ldi	r26, 0xA2	; 162
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a9 37       	cpi	r26, 0x79	; 121
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 43 0b 	call	0x1686	; 0x1686 <main>
     1a2:	0c 94 9d 14 	jmp	0x293a	; 0x293a <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	ADCSRA = 0;
     1b0:	aa e7       	ldi	r26, 0x7A	; 122
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     1ba:	87 e8       	ldi	r24, 0x87	; 135
     1bc:	8c 93       	st	X, r24
end
     1be:	08 95       	ret

000001c0 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     1c0:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
     1c2:	8f ee       	ldi	r24, 0xEF	; 239
     1c4:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     1c6:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	8b b9       	out	0x0b, r24	; 11
	
end
     1cc:	08 95       	ret

000001ce <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     1ce:	ec e7       	ldi	r30, 0x7C	; 124
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     1d4:	80 54       	subi	r24, 0x40	; 64
     1d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1d8:	ea e7       	ldi	r30, 0x7A	; 122
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
end
     1e2:	08 95       	ret

000001e4 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     1e4:	5d 98       	cbi	0x0b, 5	; 11
     1e6:	88 e8       	ldi	r24, 0x88	; 136
     1e8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <raise_pen+0xa>
	_delay_ms(500);
end
     1f8:	08 95       	ret

000001fa <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
     1fc:	80 ea       	ldi	r24, 0xA0	; 160
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	20 e9       	ldi	r18, 0x90	; 144
     202:	31 e0       	ldi	r19, 0x01	; 1
     204:	f9 01       	movw	r30, r18
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <lower_pen+0xa>
	_delay_ms(400);
end
     20e:	08 95       	ret

00000210 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     210:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     218:	5a 9a       	sbi	0x0b, 2	; 11
end
     21a:	08 95       	ret

0000021c <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     21c:	5a 98       	cbi	0x0b, 2	; 11
     21e:	8a e1       	ldi	r24, 0x1A	; 26
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     224:	5b 9a       	sbi	0x0b, 3	; 11
end
     226:	08 95       	ret

00000228 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     228:	5e 98       	cbi	0x0b, 6	; 11
     22a:	8a e1       	ldi	r24, 0x1A	; 26
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     230:	5f 9a       	sbi	0x0b, 7	; 11
end
     232:	08 95       	ret

00000234 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     234:	5f 98       	cbi	0x0b, 7	; 11
     236:	8a e1       	ldi	r24, 0x1A	; 26
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     23c:	5e 9a       	sbi	0x0b, 6	; 11
end
     23e:	08 95       	ret

00000240 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x33;
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	83 73       	andi	r24, 0x33	; 51
     244:	8b b9       	out	0x0b, r24	; 11
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	20 e9       	ldi	r18, 0x90	; 144
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <stop_all+0xe>
	_delay_ms(100);
end
     258:	08 95       	ret

0000025a <stop_x>:

void stop_x(void)
begin
	PORTD &= 0xf3;
     25a:	8b b1       	in	r24, 0x0b	; 11
     25c:	83 7f       	andi	r24, 0xF3	; 243
     25e:	8b b9       	out	0x0b, r24	; 11
end
     260:	08 95       	ret

00000262 <stop_y>:

void stop_y(void)
begin
	PORTD &= 0x3f;
     262:	8b b1       	in	r24, 0x0b	; 11
     264:	8f 73       	andi	r24, 0x3F	; 63
     266:	8b b9       	out	0x0b, r24	; 11
end
     268:	08 95       	ret

0000026a <circle>:
// draw a circle
void circle(void)
begin
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     270:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     272:	8a e1       	ldi	r24, 0x1A	; 26
     274:	f8 2e       	mov	r15, r24
     276:	8f 2d       	mov	r24, r15
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     27c:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27e:	00 e8       	ldi	r16, 0x80	; 128
     280:	1e e3       	ldi	r17, 0x3E	; 62
     282:	c8 01       	movw	r24, r16
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     288:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     28c:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     28e:	8f 2d       	mov	r24, r15
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x80;
     294:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	c8 01       	movw	r24, r16
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     29c:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29e:	8f 2d       	mov	r24, r15
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     2a4:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2a6:	c8 01       	movw	r24, r16
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     2ac:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     2b0:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	8f 2d       	mov	r24, r15
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x40;
     2b8:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	80 ee       	ldi	r24, 0xE0	; 224
     2bc:	9e e2       	ldi	r25, 0x2E	; 46
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     2c2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2c6:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c8:	8f 2d       	mov	r24, r15
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     2ce:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d0:	00 e8       	ldi	r16, 0x80	; 128
     2d2:	15 e2       	ldi	r17, 0x25	; 37
     2d4:	c8 01       	movw	r24, r16
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     2da:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     2de:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e0:	8f 2d       	mov	r24, r15
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x80;
     2e6:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e8:	c8 01       	movw	r24, r16
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2ee:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f0:	8f 2d       	mov	r24, r15
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     2f6:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	c8 01       	movw	r24, r16
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2fe:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     302:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     304:	8f 2d       	mov	r24, r15
     306:	8a 95       	dec	r24
     308:	f1 f7       	brne	.-4      	; 0x306 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x40;
     30a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30c:	80 e7       	ldi	r24, 0x70	; 112
     30e:	97 e1       	ldi	r25, 0x17	; 23
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     314:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     318:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     31a:	8f 2d       	mov	r24, r15
     31c:	8a 95       	dec	r24
     31e:	f1 f7       	brne	.-4      	; 0x31c <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     320:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     322:	00 ea       	ldi	r16, 0xA0	; 160
     324:	1f e0       	ldi	r17, 0x0F	; 15
     326:	c8 01       	movw	r24, r16
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     32c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     330:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     332:	8f 2d       	mov	r24, r15
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x80;
     338:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     340:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     342:	8f 2d       	mov	r24, r15
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     348:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34a:	c8 01       	movw	r24, r16
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     350:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     354:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     356:	fa 94       	dec	r15
     358:	f1 f7       	brne	.-4      	; 0x356 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x40;
     35a:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35c:	80 ef       	ldi	r24, 0xF0	; 240
     35e:	9a e0       	ldi	r25, 0x0A	; 10
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     364:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
end
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	08 95       	ret

00000370 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     374:	20 91 ce 02 	lds	r18, 0x02CE
     378:	30 91 cf 02 	lds	r19, 0x02CF
     37c:	00 d0       	rcall	.+0      	; 0x37e <print_position+0xe>
     37e:	00 d0       	rcall	.+0      	; 0x380 <print_position+0x10>
     380:	00 d0       	rcall	.+0      	; 0x382 <print_position+0x12>
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	0c eb       	ldi	r16, 0xBC	; 188
     38a:	12 e0       	ldi	r17, 0x02	; 2
     38c:	ad b7       	in	r26, 0x3d	; 61
     38e:	be b7       	in	r27, 0x3e	; 62
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	1c 93       	st	X, r17
     394:	0e 93       	st	-X, r16
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	93 83       	std	Z+3, r25	; 0x03
     39e:	82 83       	std	Z+2, r24	; 0x02
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	24 83       	std	Z+4, r18	; 0x04
     3a4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
	LCDGotoXY(0,1);
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	06 96       	adiw	r24, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <print_position+0x52>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	c8 01       	movw	r24, r16
     3d0:	6e 2f       	mov	r22, r30
     3d2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     3d6:	20 91 98 03 	lds	r18, 0x0398
     3da:	30 91 99 03 	lds	r19, 0x0399
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <print_position+0x70>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <print_position+0x72>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <print_position+0x74>
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	ad b7       	in	r26, 0x3d	; 61
     3ec:	be b7       	in	r27, 0x3e	; 62
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	1c 93       	st	X, r17
     3f2:	0e 93       	st	-X, r16
     3f4:	11 97       	sbiw	r26, 0x01	; 1
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	93 83       	std	Z+3, r25	; 0x03
     3fc:	82 83       	std	Z+2, r24	; 0x02
     3fe:	35 83       	std	Z+5, r19	; 0x05
     400:	24 83       	std	Z+4, r18	; 0x04
     402:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
	LCDGotoXY(8,1);
     406:	8d b7       	in	r24, 0x3d	; 61
     408:	9e b7       	in	r25, 0x3e	; 62
     40a:	06 96       	adiw	r24, 0x06	; 6
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	9e bf       	out	0x3e, r25	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	8d bf       	out	0x3d, r24	; 61
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     41e:	f8 01       	movw	r30, r16
     420:	01 90       	ld	r0, Z+
     422:	00 20       	and	r0, r0
     424:	e9 f7       	brne	.-6      	; 0x420 <print_position+0xb0>
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	e0 1b       	sub	r30, r16
     42a:	f1 0b       	sbc	r31, r17
     42c:	c8 01       	movw	r24, r16
     42e:	6e 2f       	mov	r22, r30
     430:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
end
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <move_back_XY>:
end

// 1= pen down, 2= pen up
// 0= both, 1= x only, 2= y only
move_back_XY(int x_in, int y_in, int d, char motion)
begin
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	8b 01       	movw	r16, r22
     448:	f2 2e       	mov	r15, r18
	if (d==2) raise_pen();
     44a:	42 30       	cpi	r20, 0x02	; 2
     44c:	51 05       	cpc	r21, r1
     44e:	19 f4       	brne	.+6      	; 0x456 <move_back_XY+0x1c>
     450:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     454:	05 c0       	rjmp	.+10     	; 0x460 <move_back_XY+0x26>
	if (d==1) lower_pen();
     456:	41 30       	cpi	r20, 0x01	; 1
     458:	51 05       	cpc	r21, r1
     45a:	11 f4       	brne	.+4      	; 0x460 <move_back_XY+0x26>
     45c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     460:	1c 16       	cp	r1, r28
     462:	1d 06       	cpc	r1, r29
     464:	0c f0       	brlt	.+2      	; 0x468 <move_back_XY+0x2e>
     466:	aa c2       	rjmp	.+1364   	; 0x9bc <move_back_XY+0x582>
     468:	10 16       	cp	r1, r16
     46a:	11 06       	cpc	r1, r17
     46c:	0c f0       	brlt	.+2      	; 0x470 <move_back_XY+0x36>
     46e:	a6 c2       	rjmp	.+1356   	; 0x9bc <move_back_XY+0x582>
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	cd 3b       	cpi	r28, 0xBD	; 189
     474:	d8 07       	cpc	r29, r24
     476:	14 f0       	brlt	.+4      	; 0x47c <move_back_XY+0x42>
     478:	cc eb       	ldi	r28, 0xBC	; 188
     47a:	d2 e0       	ldi	r29, 0x02	; 2
     47c:	b8 01       	movw	r22, r16
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0d 3b       	cpi	r16, 0xBD	; 189
     482:	18 07       	cpc	r17, r24
     484:	14 f0       	brlt	.+4      	; 0x48a <move_back_XY+0x50>
     486:	6c eb       	ldi	r22, 0xBC	; 188
     488:	72 e0       	ldi	r23, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     48a:	cf 30       	cpi	r28, 0x0F	; 15
     48c:	d1 05       	cpc	r29, r1
     48e:	14 f4       	brge	.+4      	; 0x494 <move_back_XY+0x5a>
     490:	cf e0       	ldi	r28, 0x0F	; 15
     492:	d0 e0       	ldi	r29, 0x00	; 0
		if(y_in<15) y_in = 15;
     494:	6f 30       	cpi	r22, 0x0F	; 15
     496:	71 05       	cpc	r23, r1
     498:	14 f4       	brge	.+4      	; 0x49e <move_back_XY+0x64>
     49a:	6f e0       	ldi	r22, 0x0F	; 15
     49c:	70 e0       	ldi	r23, 0x00	; 0
		if(motion == 0)
     49e:	ff 20       	and	r15, r15
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <move_back_XY+0x6a>
     4a2:	42 c1       	rjmp	.+644    	; 0x728 <move_back_XY+0x2ee>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4a4:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     4ae:	80 91 7a 00 	lds	r24, 0x007A
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	80 93 7a 00 	sts	0x007A, r24
		if(y_in<15) y_in = 15;
		if(motion == 0)
		begin
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     4b8:	80 91 7a 00 	lds	r24, 0x007A
     4bc:	86 fd       	sbrc	r24, 6
     4be:	fc cf       	rjmp	.-8      	; 0x4b8 <move_back_XY+0x7e>
			y_pos = (int)ADCL;
     4c0:	80 91 78 00 	lds	r24, 0x0078
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	90 93 99 03 	sts	0x0399, r25
     4ca:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     4ce:	40 91 98 03 	lds	r20, 0x0398
     4d2:	50 91 99 03 	lds	r21, 0x0399
     4d6:	20 91 79 00 	lds	r18, 0x0079
     4da:	92 2f       	mov	r25, r18
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	84 0f       	add	r24, r20
     4e0:	95 1f       	adc	r25, r21
     4e2:	90 93 99 03 	sts	0x0399, r25
     4e6:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     4ea:	80 91 98 03 	lds	r24, 0x0398
     4ee:	90 91 99 03 	lds	r25, 0x0399
     4f2:	68 17       	cp	r22, r24
     4f4:	79 07       	cpc	r23, r25
     4f6:	80 f1       	brcs	.+96     	; 0x558 <move_back_XY+0x11e>
     4f8:	69 c0       	rjmp	.+210    	; 0x5cc <move_back_XY+0x192>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4fa:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4fe:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     502:	80 91 7a 00 	lds	r24, 0x007A
     506:	80 64       	ori	r24, 0x40	; 64
     508:	80 93 7a 00 	sts	0x007A, r24
     50c:	03 c0       	rjmp	.+6      	; 0x514 <move_back_XY+0xda>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     50e:	8b b1       	in	r24, 0x0b	; 11
     510:	8f 73       	andi	r24, 0x3F	; 63
     512:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     514:	80 91 7a 00 	lds	r24, 0x007A
     518:	86 fd       	sbrc	r24, 6
     51a:	f9 cf       	rjmp	.-14     	; 0x50e <move_back_XY+0xd4>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     51c:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     51e:	8e 2f       	mov	r24, r30
     520:	8a 95       	dec	r24
     522:	f1 f7       	brne	.-4      	; 0x520 <move_back_XY+0xe6>
	_delay_us(5);
	PORTD |= 0x40;
     524:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     526:	80 91 78 00 	lds	r24, 0x0078
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 99 03 	sts	0x0399, r25
     530:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     534:	80 91 98 03 	lds	r24, 0x0398
     538:	90 91 99 03 	lds	r25, 0x0399
     53c:	20 91 79 00 	lds	r18, 0x0079
     540:	32 2f       	mov	r19, r18
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	90 93 99 03 	sts	0x0399, r25
     54c:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     550:	ca 01       	movw	r24, r20
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <move_back_XY+0x118>
     556:	04 c0       	rjmp	.+8      	; 0x560 <move_back_XY+0x126>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     558:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     55a:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     55c:	40 ed       	ldi	r20, 0xD0	; 208
     55e:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     560:	80 91 98 03 	lds	r24, 0x0398
     564:	90 91 99 03 	lds	r25, 0x0399
     568:	68 17       	cp	r22, r24
     56a:	79 07       	cpc	r23, r25
     56c:	30 f2       	brcs	.-116    	; 0x4fa <move_back_XY+0xc0>
     56e:	39 c0       	rjmp	.+114    	; 0x5e2 <move_back_XY+0x1a8>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     570:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     574:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     578:	80 91 7a 00 	lds	r24, 0x007A
     57c:	80 64       	ori	r24, 0x40	; 64
     57e:	80 93 7a 00 	sts	0x007A, r24
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
     582:	80 91 7a 00 	lds	r24, 0x007A
     586:	86 fd       	sbrc	r24, 6
     588:	fc cf       	rjmp	.-8      	; 0x582 <move_back_XY+0x148>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     58a:	8b b1       	in	r24, 0x0b	; 11
     58c:	8f 73       	andi	r24, 0x3F	; 63
     58e:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     590:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     592:	8e 2f       	mov	r24, r30
     594:	8a 95       	dec	r24
     596:	f1 f7       	brne	.-4      	; 0x594 <move_back_XY+0x15a>
	_delay_us(5);
	PORTD |= 0x80;
     598:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     59a:	80 91 78 00 	lds	r24, 0x0078
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	90 93 99 03 	sts	0x0399, r25
     5a4:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     5a8:	80 91 98 03 	lds	r24, 0x0398
     5ac:	90 91 99 03 	lds	r25, 0x0399
     5b0:	20 91 79 00 	lds	r18, 0x0079
     5b4:	32 2f       	mov	r19, r18
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	90 93 99 03 	sts	0x0399, r25
     5c0:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5c4:	ca 01       	movw	r24, r20
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <move_back_XY+0x18c>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <move_back_XY+0x19a>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5cc:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5ce:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5d0:	40 ed       	ldi	r20, 0xD0	; 208
     5d2:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     5d4:	80 91 98 03 	lds	r24, 0x0398
     5d8:	90 91 99 03 	lds	r25, 0x0399
     5dc:	86 17       	cp	r24, r22
     5de:	97 07       	cpc	r25, r23
     5e0:	38 f2       	brcs	.-114    	; 0x570 <move_back_XY+0x136>
					move_positive_y();
					y_pos = (int)ADCL;
					y_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     5e2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5e6:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     5f0:	80 91 7a 00 	lds	r24, 0x007A
     5f4:	80 64       	ori	r24, 0x40	; 64
     5f6:	80 93 7a 00 	sts	0x007A, r24
				stop_all();
			end

			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     5fa:	80 91 7a 00 	lds	r24, 0x007A
     5fe:	86 fd       	sbrc	r24, 6
     600:	fc cf       	rjmp	.-8      	; 0x5fa <move_back_XY+0x1c0>
			x_pos = (int)ADCL;
     602:	80 91 78 00 	lds	r24, 0x0078
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 cf 02 	sts	0x02CF, r25
     60c:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     610:	40 91 ce 02 	lds	r20, 0x02CE
     614:	50 91 cf 02 	lds	r21, 0x02CF
     618:	20 91 79 00 	lds	r18, 0x0079
     61c:	92 2f       	mov	r25, r18
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	84 0f       	add	r24, r20
     622:	95 1f       	adc	r25, r21
     624:	90 93 cf 02 	sts	0x02CF, r25
     628:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     62c:	80 91 ce 02 	lds	r24, 0x02CE
     630:	90 91 cf 02 	lds	r25, 0x02CF
     634:	c8 17       	cp	r28, r24
     636:	d9 07       	cpc	r29, r25
     638:	80 f1       	brcs	.+96     	; 0x69a <move_back_XY+0x260>
     63a:	6a c0       	rjmp	.+212    	; 0x710 <move_back_XY+0x2d6>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     63c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     640:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     644:	80 91 7a 00 	lds	r24, 0x007A
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 93 7a 00 	sts	0x007A, r24
     64e:	03 c0       	rjmp	.+6      	; 0x656 <move_back_XY+0x21c>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     650:	8b b1       	in	r24, 0x0b	; 11
     652:	83 7f       	andi	r24, 0xF3	; 243
     654:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     656:	80 91 7a 00 	lds	r24, 0x007A
     65a:	86 fd       	sbrc	r24, 6
     65c:	f9 cf       	rjmp	.-14     	; 0x650 <move_back_XY+0x216>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     65e:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     660:	86 2f       	mov	r24, r22
     662:	8a 95       	dec	r24
     664:	f1 f7       	brne	.-4      	; 0x662 <move_back_XY+0x228>
	_delay_us(5);
	PORTD |= 0x04;
     666:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     668:	80 91 78 00 	lds	r24, 0x0078
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	90 93 cf 02 	sts	0x02CF, r25
     672:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     676:	80 91 ce 02 	lds	r24, 0x02CE
     67a:	90 91 cf 02 	lds	r25, 0x02CF
     67e:	20 91 79 00 	lds	r18, 0x0079
     682:	32 2f       	mov	r19, r18
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	82 0f       	add	r24, r18
     688:	93 1f       	adc	r25, r19
     68a:	90 93 cf 02 	sts	0x02CF, r25
     68e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     692:	ca 01       	movw	r24, r20
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <move_back_XY+0x25a>
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <move_back_XY+0x268>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     69a:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     69c:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     69e:	40 ed       	ldi	r20, 0xD0	; 208
     6a0:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     6a2:	80 91 ce 02 	lds	r24, 0x02CE
     6a6:	90 91 cf 02 	lds	r25, 0x02CF
     6aa:	c8 17       	cp	r28, r24
     6ac:	d9 07       	cpc	r29, r25
     6ae:	30 f2       	brcs	.-116    	; 0x63c <move_back_XY+0x202>
     6b0:	83 c1       	rjmp	.+774    	; 0x9b8 <move_back_XY+0x57e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     6b2:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     6b6:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     6ba:	80 91 7a 00 	lds	r24, 0x007A
     6be:	80 64       	ori	r24, 0x40	; 64
     6c0:	80 93 7a 00 	sts	0x007A, r24
     6c4:	03 c0       	rjmp	.+6      	; 0x6cc <move_back_XY+0x292>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     6c6:	8b b1       	in	r24, 0x0b	; 11
     6c8:	83 7f       	andi	r24, 0xF3	; 243
     6ca:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     6cc:	80 91 7a 00 	lds	r24, 0x007A
     6d0:	86 fd       	sbrc	r24, 6
     6d2:	f9 cf       	rjmp	.-14     	; 0x6c6 <move_back_XY+0x28c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     6d4:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6d6:	86 2f       	mov	r24, r22
     6d8:	8a 95       	dec	r24
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <move_back_XY+0x29e>
	_delay_us(5);
	PORTD |= 0x08;
     6dc:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     6de:	80 91 78 00 	lds	r24, 0x0078
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	90 93 cf 02 	sts	0x02CF, r25
     6e8:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     6ec:	80 91 ce 02 	lds	r24, 0x02CE
     6f0:	90 91 cf 02 	lds	r25, 0x02CF
     6f4:	20 91 79 00 	lds	r18, 0x0079
     6f8:	32 2f       	mov	r19, r18
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	90 93 cf 02 	sts	0x02CF, r25
     704:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     708:	ca 01       	movw	r24, r20
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <move_back_XY+0x2d0>
     70e:	04 c0       	rjmp	.+8      	; 0x718 <move_back_XY+0x2de>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     710:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     712:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     714:	40 ed       	ldi	r20, 0xD0	; 208
     716:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     718:	80 91 ce 02 	lds	r24, 0x02CE
     71c:	90 91 cf 02 	lds	r25, 0x02CF
     720:	8c 17       	cp	r24, r28
     722:	9d 07       	cpc	r25, r29
     724:	30 f2       	brcs	.-116    	; 0x6b2 <move_back_XY+0x278>
     726:	48 c1       	rjmp	.+656    	; 0x9b8 <move_back_XY+0x57e>
				end
				stop_all();
			end
		end

		if (motion == 1)
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	f8 16       	cp	r15, r24
     72c:	09 f0       	breq	.+2      	; 0x730 <move_back_XY+0x2f6>
     72e:	a1 c0       	rjmp	.+322    	; 0x872 <move_back_XY+0x438>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     730:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     734:	80 ec       	ldi	r24, 0xC0	; 192
     736:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     73a:	80 91 7a 00 	lds	r24, 0x007A
     73e:	80 64       	ori	r24, 0x40	; 64
     740:	80 93 7a 00 	sts	0x007A, r24

		if (motion == 1)
		begin
			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     744:	80 91 7a 00 	lds	r24, 0x007A
     748:	86 fd       	sbrc	r24, 6
     74a:	fc cf       	rjmp	.-8      	; 0x744 <move_back_XY+0x30a>
			x_pos = (int)ADCL;
     74c:	80 91 78 00 	lds	r24, 0x0078
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	90 93 cf 02 	sts	0x02CF, r25
     756:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     75a:	40 91 ce 02 	lds	r20, 0x02CE
     75e:	50 91 cf 02 	lds	r21, 0x02CF
     762:	20 91 79 00 	lds	r18, 0x0079
     766:	92 2f       	mov	r25, r18
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	84 0f       	add	r24, r20
     76c:	95 1f       	adc	r25, r21
     76e:	90 93 cf 02 	sts	0x02CF, r25
     772:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     776:	80 91 ce 02 	lds	r24, 0x02CE
     77a:	90 91 cf 02 	lds	r25, 0x02CF
     77e:	c8 17       	cp	r28, r24
     780:	d9 07       	cpc	r29, r25
     782:	80 f1       	brcs	.+96     	; 0x7e4 <move_back_XY+0x3aa>
     784:	6a c0       	rjmp	.+212    	; 0x85a <move_back_XY+0x420>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     786:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     78a:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     78e:	80 91 7a 00 	lds	r24, 0x007A
     792:	80 64       	ori	r24, 0x40	; 64
     794:	80 93 7a 00 	sts	0x007A, r24
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <move_back_XY+0x366>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     79a:	8b b1       	in	r24, 0x0b	; 11
     79c:	83 7f       	andi	r24, 0xF3	; 243
     79e:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     7a0:	80 91 7a 00 	lds	r24, 0x007A
     7a4:	86 fd       	sbrc	r24, 6
     7a6:	f9 cf       	rjmp	.-14     	; 0x79a <move_back_XY+0x360>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     7a8:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7aa:	86 2f       	mov	r24, r22
     7ac:	8a 95       	dec	r24
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <move_back_XY+0x372>
	_delay_us(5);
	PORTD |= 0x04;
     7b0:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     7b2:	80 91 78 00 	lds	r24, 0x0078
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 cf 02 	sts	0x02CF, r25
     7bc:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     7c0:	80 91 ce 02 	lds	r24, 0x02CE
     7c4:	90 91 cf 02 	lds	r25, 0x02CF
     7c8:	20 91 79 00 	lds	r18, 0x0079
     7cc:	32 2f       	mov	r19, r18
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	82 0f       	add	r24, r18
     7d2:	93 1f       	adc	r25, r19
     7d4:	90 93 cf 02 	sts	0x02CF, r25
     7d8:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7dc:	ca 01       	movw	r24, r20
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <move_back_XY+0x3a4>
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <move_back_XY+0x3b2>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     7e4:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7e6:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e8:	40 ed       	ldi	r20, 0xD0	; 208
     7ea:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     7ec:	80 91 ce 02 	lds	r24, 0x02CE
     7f0:	90 91 cf 02 	lds	r25, 0x02CF
     7f4:	c8 17       	cp	r28, r24
     7f6:	d9 07       	cpc	r29, r25
     7f8:	30 f2       	brcs	.-116    	; 0x786 <move_back_XY+0x34c>
     7fa:	de c0       	rjmp	.+444    	; 0x9b8 <move_back_XY+0x57e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     7fc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     800:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     804:	80 91 7a 00 	lds	r24, 0x007A
     808:	80 64       	ori	r24, 0x40	; 64
     80a:	80 93 7a 00 	sts	0x007A, r24
     80e:	03 c0       	rjmp	.+6      	; 0x816 <move_back_XY+0x3dc>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     810:	8b b1       	in	r24, 0x0b	; 11
     812:	83 7f       	andi	r24, 0xF3	; 243
     814:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     816:	80 91 7a 00 	lds	r24, 0x007A
     81a:	86 fd       	sbrc	r24, 6
     81c:	f9 cf       	rjmp	.-14     	; 0x810 <move_back_XY+0x3d6>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     81e:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     820:	86 2f       	mov	r24, r22
     822:	8a 95       	dec	r24
     824:	f1 f7       	brne	.-4      	; 0x822 <move_back_XY+0x3e8>
	_delay_us(5);
	PORTD |= 0x08;
     826:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     828:	80 91 78 00 	lds	r24, 0x0078
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	90 93 cf 02 	sts	0x02CF, r25
     832:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     836:	80 91 ce 02 	lds	r24, 0x02CE
     83a:	90 91 cf 02 	lds	r25, 0x02CF
     83e:	20 91 79 00 	lds	r18, 0x0079
     842:	32 2f       	mov	r19, r18
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	90 93 cf 02 	sts	0x02CF, r25
     84e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     852:	ca 01       	movw	r24, r20
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <move_back_XY+0x41a>
     858:	04 c0       	rjmp	.+8      	; 0x862 <move_back_XY+0x428>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     85a:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     85c:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     85e:	40 ed       	ldi	r20, 0xD0	; 208
     860:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     862:	80 91 ce 02 	lds	r24, 0x02CE
     866:	90 91 cf 02 	lds	r25, 0x02CF
     86a:	8c 17       	cp	r24, r28
     86c:	9d 07       	cpc	r25, r29
     86e:	30 f2       	brcs	.-116    	; 0x7fc <move_back_XY+0x3c2>
     870:	a3 c0       	rjmp	.+326    	; 0x9b8 <move_back_XY+0x57e>
				end
				stop_all();
			end
		end
		
		if (motion == 2)
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	f8 16       	cp	r15, r24
     876:	09 f0       	breq	.+2      	; 0x87a <move_back_XY+0x440>
     878:	a1 c0       	rjmp	.+322    	; 0x9bc <move_back_XY+0x582>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     87a:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     87e:	81 ec       	ldi	r24, 0xC1	; 193
     880:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     884:	80 91 7a 00 	lds	r24, 0x007A
     888:	80 64       	ori	r24, 0x40	; 64
     88a:	80 93 7a 00 	sts	0x007A, r24
		
		if (motion == 2)
		begin
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     88e:	80 91 7a 00 	lds	r24, 0x007A
     892:	86 fd       	sbrc	r24, 6
     894:	fc cf       	rjmp	.-8      	; 0x88e <move_back_XY+0x454>
			y_pos = (int)ADCL;
     896:	80 91 78 00 	lds	r24, 0x0078
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 99 03 	sts	0x0399, r25
     8a0:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     8a4:	40 91 98 03 	lds	r20, 0x0398
     8a8:	50 91 99 03 	lds	r21, 0x0399
     8ac:	20 91 79 00 	lds	r18, 0x0079
     8b0:	92 2f       	mov	r25, r18
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	84 0f       	add	r24, r20
     8b6:	95 1f       	adc	r25, r21
     8b8:	90 93 99 03 	sts	0x0399, r25
     8bc:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     8c0:	80 91 98 03 	lds	r24, 0x0398
     8c4:	90 91 99 03 	lds	r25, 0x0399
     8c8:	68 17       	cp	r22, r24
     8ca:	79 07       	cpc	r23, r25
     8cc:	80 f1       	brcs	.+96     	; 0x92e <move_back_XY+0x4f4>
     8ce:	69 c0       	rjmp	.+210    	; 0x9a2 <move_back_XY+0x568>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     8d0:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     8d4:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     8d8:	80 91 7a 00 	lds	r24, 0x007A
     8dc:	80 64       	ori	r24, 0x40	; 64
     8de:	80 93 7a 00 	sts	0x007A, r24
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <move_back_XY+0x4b0>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     8e4:	8b b1       	in	r24, 0x0b	; 11
     8e6:	8f 73       	andi	r24, 0x3F	; 63
     8e8:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     8ea:	80 91 7a 00 	lds	r24, 0x007A
     8ee:	86 fd       	sbrc	r24, 6
     8f0:	f9 cf       	rjmp	.-14     	; 0x8e4 <move_back_XY+0x4aa>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     8f2:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8f4:	8e 2f       	mov	r24, r30
     8f6:	8a 95       	dec	r24
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <move_back_XY+0x4bc>
	_delay_us(5);
	PORTD |= 0x40;
     8fa:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     8fc:	80 91 78 00 	lds	r24, 0x0078
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	90 93 99 03 	sts	0x0399, r25
     906:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     90a:	80 91 98 03 	lds	r24, 0x0398
     90e:	90 91 99 03 	lds	r25, 0x0399
     912:	20 91 79 00 	lds	r18, 0x0079
     916:	32 2f       	mov	r19, r18
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	90 93 99 03 	sts	0x0399, r25
     922:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     926:	ca 01       	movw	r24, r20
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <move_back_XY+0x4ee>
     92c:	04 c0       	rjmp	.+8      	; 0x936 <move_back_XY+0x4fc>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     92e:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     930:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     932:	40 ed       	ldi	r20, 0xD0	; 208
     934:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     936:	80 91 98 03 	lds	r24, 0x0398
     93a:	90 91 99 03 	lds	r25, 0x0399
     93e:	68 17       	cp	r22, r24
     940:	79 07       	cpc	r23, r25
     942:	30 f2       	brcs	.-116    	; 0x8d0 <move_back_XY+0x496>
     944:	39 c0       	rjmp	.+114    	; 0x9b8 <move_back_XY+0x57e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     946:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     94a:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     94e:	80 91 7a 00 	lds	r24, 0x007A
     952:	80 64       	ori	r24, 0x40	; 64
     954:	80 93 7a 00 	sts	0x007A, r24
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
     958:	80 91 7a 00 	lds	r24, 0x007A
     95c:	86 fd       	sbrc	r24, 6
     95e:	fc cf       	rjmp	.-8      	; 0x958 <move_back_XY+0x51e>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     960:	8b b1       	in	r24, 0x0b	; 11
     962:	8f 73       	andi	r24, 0x3F	; 63
     964:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     966:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     968:	8e 2f       	mov	r24, r30
     96a:	8a 95       	dec	r24
     96c:	f1 f7       	brne	.-4      	; 0x96a <move_back_XY+0x530>
	_delay_us(5);
	PORTD |= 0x80;
     96e:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)); stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     970:	80 91 78 00 	lds	r24, 0x0078
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 99 03 	sts	0x0399, r25
     97a:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     97e:	80 91 98 03 	lds	r24, 0x0398
     982:	90 91 99 03 	lds	r25, 0x0399
     986:	20 91 79 00 	lds	r18, 0x0079
     98a:	32 2f       	mov	r19, r18
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	90 93 99 03 	sts	0x0399, r25
     996:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     99a:	ca 01       	movw	r24, r20
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <move_back_XY+0x562>
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <move_back_XY+0x570>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     9a2:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9a4:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9a6:	40 ed       	ldi	r20, 0xD0	; 208
     9a8:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     9aa:	80 91 98 03 	lds	r24, 0x0398
     9ae:	90 91 99 03 	lds	r25, 0x0399
     9b2:	86 17       	cp	r24, r22
     9b4:	97 07       	cpc	r25, r23
     9b6:	38 f2       	brcs	.-114    	; 0x946 <move_back_XY+0x50c>
					move_positive_y();
					y_pos = (int)ADCL;
					y_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     9b8:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
			end
		end
	end
	// print where you end up
	print_position();			
     9bc:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	08 95       	ret

000009cc <move_to_XY>:
end

// 1= pen down, 2= pen up
// 0= both, 1= x only, 2= y only
move_to_XY(int x_in, int y_in, int d, char motion)
begin
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
     9d8:	8b 01       	movw	r16, r22
     9da:	f2 2e       	mov	r15, r18
	if (d==2) raise_pen();
     9dc:	42 30       	cpi	r20, 0x02	; 2
     9de:	51 05       	cpc	r21, r1
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <move_to_XY+0x1c>
     9e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <move_to_XY+0x26>
	if (d==1) lower_pen();
     9e8:	41 30       	cpi	r20, 0x01	; 1
     9ea:	51 05       	cpc	r21, r1
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <move_to_XY+0x26>
     9ee:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     9f2:	1c 16       	cp	r1, r28
     9f4:	1d 06       	cpc	r1, r29
     9f6:	0c f0       	brlt	.+2      	; 0x9fa <move_to_XY+0x2e>
     9f8:	ad c2       	rjmp	.+1370   	; 0xf54 <move_to_XY+0x588>
     9fa:	10 16       	cp	r1, r16
     9fc:	11 06       	cpc	r1, r17
     9fe:	0c f0       	brlt	.+2      	; 0xa02 <move_to_XY+0x36>
     a00:	a9 c2       	rjmp	.+1362   	; 0xf54 <move_to_XY+0x588>
     a02:	be 01       	movw	r22, r28
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	cd 3b       	cpi	r28, 0xBD	; 189
     a08:	d8 07       	cpc	r29, r24
     a0a:	14 f0       	brlt	.+4      	; 0xa10 <move_to_XY+0x44>
     a0c:	6c eb       	ldi	r22, 0xBC	; 188
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	e8 01       	movw	r28, r16
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	0d 3b       	cpi	r16, 0xBD	; 189
     a16:	18 07       	cpc	r17, r24
     a18:	14 f0       	brlt	.+4      	; 0xa1e <move_to_XY+0x52>
     a1a:	cc eb       	ldi	r28, 0xBC	; 188
     a1c:	d2 e0       	ldi	r29, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     a1e:	6f 30       	cpi	r22, 0x0F	; 15
     a20:	71 05       	cpc	r23, r1
     a22:	14 f4       	brge	.+4      	; 0xa28 <move_to_XY+0x5c>
     a24:	6f e0       	ldi	r22, 0x0F	; 15
     a26:	70 e0       	ldi	r23, 0x00	; 0
		if(y_in<15) y_in = 15;
     a28:	cf 30       	cpi	r28, 0x0F	; 15
     a2a:	d1 05       	cpc	r29, r1
     a2c:	14 f4       	brge	.+4      	; 0xa32 <move_to_XY+0x66>
     a2e:	cf e0       	ldi	r28, 0x0F	; 15
     a30:	d0 e0       	ldi	r29, 0x00	; 0

		if(motion == 0)
     a32:	ff 20       	and	r15, r15
     a34:	09 f0       	breq	.+2      	; 0xa38 <move_to_XY+0x6c>
     a36:	43 c1       	rjmp	.+646    	; 0xcbe <move_to_XY+0x2f2>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     a38:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     a3c:	80 ec       	ldi	r24, 0xC0	; 192
     a3e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     a42:	80 91 7a 00 	lds	r24, 0x007A
     a46:	80 64       	ori	r24, 0x40	; 64
     a48:	80 93 7a 00 	sts	0x007A, r24

		if(motion == 0)
		begin
			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     a4c:	80 91 7a 00 	lds	r24, 0x007A
     a50:	86 fd       	sbrc	r24, 6
     a52:	fc cf       	rjmp	.-8      	; 0xa4c <move_to_XY+0x80>
			x_pos = (int)ADCL;
     a54:	80 91 78 00 	lds	r24, 0x0078
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 cf 02 	sts	0x02CF, r25
     a5e:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     a62:	40 91 ce 02 	lds	r20, 0x02CE
     a66:	50 91 cf 02 	lds	r21, 0x02CF
     a6a:	20 91 79 00 	lds	r18, 0x0079
     a6e:	92 2f       	mov	r25, r18
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	84 0f       	add	r24, r20
     a74:	95 1f       	adc	r25, r21
     a76:	90 93 cf 02 	sts	0x02CF, r25
     a7a:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     a7e:	80 91 ce 02 	lds	r24, 0x02CE
     a82:	90 91 cf 02 	lds	r25, 0x02CF
     a86:	68 17       	cp	r22, r24
     a88:	79 07       	cpc	r23, r25
     a8a:	80 f1       	brcs	.+96     	; 0xaec <move_to_XY+0x120>
     a8c:	6a c0       	rjmp	.+212    	; 0xb62 <move_to_XY+0x196>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     a8e:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     a92:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     a96:	80 91 7a 00 	lds	r24, 0x007A
     a9a:	80 64       	ori	r24, 0x40	; 64
     a9c:	80 93 7a 00 	sts	0x007A, r24
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <move_to_XY+0xdc>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     aa2:	8b b1       	in	r24, 0x0b	; 11
     aa4:	83 7f       	andi	r24, 0xF3	; 243
     aa6:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     aa8:	80 91 7a 00 	lds	r24, 0x007A
     aac:	86 fd       	sbrc	r24, 6
     aae:	f9 cf       	rjmp	.-14     	; 0xaa2 <move_to_XY+0xd6>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     ab0:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ab2:	8e 2f       	mov	r24, r30
     ab4:	8a 95       	dec	r24
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <move_to_XY+0xe8>
	_delay_us(5);
	PORTD |= 0x04;
     ab8:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     aba:	80 91 78 00 	lds	r24, 0x0078
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 cf 02 	sts	0x02CF, r25
     ac4:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     ac8:	80 91 ce 02 	lds	r24, 0x02CE
     acc:	90 91 cf 02 	lds	r25, 0x02CF
     ad0:	20 91 79 00 	lds	r18, 0x0079
     ad4:	32 2f       	mov	r19, r18
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	90 93 cf 02 	sts	0x02CF, r25
     ae0:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ae4:	ca 01       	movw	r24, r20
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <move_to_XY+0x11a>
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <move_to_XY+0x128>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     aec:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     aee:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     af0:	40 ed       	ldi	r20, 0xD0	; 208
     af2:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     af4:	80 91 ce 02 	lds	r24, 0x02CE
     af8:	90 91 cf 02 	lds	r25, 0x02CF
     afc:	68 17       	cp	r22, r24
     afe:	79 07       	cpc	r23, r25
     b00:	30 f2       	brcs	.-116    	; 0xa8e <move_to_XY+0xc2>
     b02:	3a c0       	rjmp	.+116    	; 0xb78 <move_to_XY+0x1ac>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     b04:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     b08:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     b0c:	80 91 7a 00 	lds	r24, 0x007A
     b10:	80 64       	ori	r24, 0x40	; 64
     b12:	80 93 7a 00 	sts	0x007A, r24
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <move_to_XY+0x152>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     b18:	8b b1       	in	r24, 0x0b	; 11
     b1a:	83 7f       	andi	r24, 0xF3	; 243
     b1c:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     b1e:	80 91 7a 00 	lds	r24, 0x007A
     b22:	86 fd       	sbrc	r24, 6
     b24:	f9 cf       	rjmp	.-14     	; 0xb18 <move_to_XY+0x14c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     b26:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b28:	8e 2f       	mov	r24, r30
     b2a:	8a 95       	dec	r24
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <move_to_XY+0x15e>
	_delay_us(5);
	PORTD |= 0x08;
     b2e:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     b30:	80 91 78 00 	lds	r24, 0x0078
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 cf 02 	sts	0x02CF, r25
     b3a:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     b3e:	80 91 ce 02 	lds	r24, 0x02CE
     b42:	90 91 cf 02 	lds	r25, 0x02CF
     b46:	20 91 79 00 	lds	r18, 0x0079
     b4a:	32 2f       	mov	r19, r18
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	90 93 cf 02 	sts	0x02CF, r25
     b56:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b5a:	ca 01       	movw	r24, r20
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	f1 f7       	brne	.-4      	; 0xb5c <move_to_XY+0x190>
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <move_to_XY+0x19e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     b62:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b64:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b66:	40 ed       	ldi	r20, 0xD0	; 208
     b68:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     b6a:	80 91 ce 02 	lds	r24, 0x02CE
     b6e:	90 91 cf 02 	lds	r25, 0x02CF
     b72:	86 17       	cp	r24, r22
     b74:	97 07       	cpc	r25, r23
     b76:	30 f2       	brcs	.-116    	; 0xb04 <move_to_XY+0x138>
					move_positive_x();
					x_pos = (int)ADCL;
					x_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     b78:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     b7c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     b80:	81 ec       	ldi	r24, 0xC1	; 193
     b82:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     b86:	80 91 7a 00 	lds	r24, 0x007A
     b8a:	80 64       	ori	r24, 0x40	; 64
     b8c:	80 93 7a 00 	sts	0x007A, r24
				stop_all();
			end
			
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     b90:	80 91 7a 00 	lds	r24, 0x007A
     b94:	86 fd       	sbrc	r24, 6
     b96:	fc cf       	rjmp	.-8      	; 0xb90 <move_to_XY+0x1c4>
			y_pos = (int)ADCL;
     b98:	80 91 78 00 	lds	r24, 0x0078
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 99 03 	sts	0x0399, r25
     ba2:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     ba6:	40 91 98 03 	lds	r20, 0x0398
     baa:	50 91 99 03 	lds	r21, 0x0399
     bae:	20 91 79 00 	lds	r18, 0x0079
     bb2:	92 2f       	mov	r25, r18
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	84 0f       	add	r24, r20
     bb8:	95 1f       	adc	r25, r21
     bba:	90 93 99 03 	sts	0x0399, r25
     bbe:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     bc2:	80 91 98 03 	lds	r24, 0x0398
     bc6:	90 91 99 03 	lds	r25, 0x0399
     bca:	c8 17       	cp	r28, r24
     bcc:	d9 07       	cpc	r29, r25
     bce:	80 f1       	brcs	.+96     	; 0xc30 <move_to_XY+0x264>
     bd0:	6a c0       	rjmp	.+212    	; 0xca6 <move_to_XY+0x2da>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     bd2:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     bd6:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     bda:	80 91 7a 00 	lds	r24, 0x007A
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7a 00 	sts	0x007A, r24
     be4:	03 c0       	rjmp	.+6      	; 0xbec <move_to_XY+0x220>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     be6:	8b b1       	in	r24, 0x0b	; 11
     be8:	8f 73       	andi	r24, 0x3F	; 63
     bea:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     bec:	80 91 7a 00 	lds	r24, 0x007A
     bf0:	86 fd       	sbrc	r24, 6
     bf2:	f9 cf       	rjmp	.-14     	; 0xbe6 <move_to_XY+0x21a>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     bf4:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bf6:	86 2f       	mov	r24, r22
     bf8:	8a 95       	dec	r24
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <move_to_XY+0x22c>
	_delay_us(5);
	PORTD |= 0x40;
     bfc:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     bfe:	80 91 78 00 	lds	r24, 0x0078
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 99 03 	sts	0x0399, r25
     c08:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     c0c:	80 91 98 03 	lds	r24, 0x0398
     c10:	90 91 99 03 	lds	r25, 0x0399
     c14:	20 91 79 00 	lds	r18, 0x0079
     c18:	32 2f       	mov	r19, r18
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	82 0f       	add	r24, r18
     c1e:	93 1f       	adc	r25, r19
     c20:	90 93 99 03 	sts	0x0399, r25
     c24:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c28:	ca 01       	movw	r24, r20
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <move_to_XY+0x25e>
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <move_to_XY+0x26c>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     c30:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c32:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c34:	40 ed       	ldi	r20, 0xD0	; 208
     c36:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     c38:	80 91 98 03 	lds	r24, 0x0398
     c3c:	90 91 99 03 	lds	r25, 0x0399
     c40:	c8 17       	cp	r28, r24
     c42:	d9 07       	cpc	r29, r25
     c44:	30 f2       	brcs	.-116    	; 0xbd2 <move_to_XY+0x206>
     c46:	84 c1       	rjmp	.+776    	; 0xf50 <move_to_XY+0x584>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     c48:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     c4c:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     c50:	80 91 7a 00 	lds	r24, 0x007A
     c54:	80 64       	ori	r24, 0x40	; 64
     c56:	80 93 7a 00 	sts	0x007A, r24
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <move_to_XY+0x296>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     c5c:	8b b1       	in	r24, 0x0b	; 11
     c5e:	8f 73       	andi	r24, 0x3F	; 63
     c60:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     c62:	80 91 7a 00 	lds	r24, 0x007A
     c66:	86 fd       	sbrc	r24, 6
     c68:	f9 cf       	rjmp	.-14     	; 0xc5c <move_to_XY+0x290>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     c6a:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c6c:	86 2f       	mov	r24, r22
     c6e:	8a 95       	dec	r24
     c70:	f1 f7       	brne	.-4      	; 0xc6e <move_to_XY+0x2a2>
	_delay_us(5);
	PORTD |= 0x80;
     c72:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     c74:	80 91 78 00 	lds	r24, 0x0078
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 99 03 	sts	0x0399, r25
     c7e:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     c82:	80 91 98 03 	lds	r24, 0x0398
     c86:	90 91 99 03 	lds	r25, 0x0399
     c8a:	20 91 79 00 	lds	r18, 0x0079
     c8e:	32 2f       	mov	r19, r18
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	90 93 99 03 	sts	0x0399, r25
     c9a:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	ca 01       	movw	r24, r20
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <move_to_XY+0x2d4>
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <move_to_XY+0x2e2>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     ca6:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ca8:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     caa:	40 ed       	ldi	r20, 0xD0	; 208
     cac:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     cae:	80 91 98 03 	lds	r24, 0x0398
     cb2:	90 91 99 03 	lds	r25, 0x0399
     cb6:	8c 17       	cp	r24, r28
     cb8:	9d 07       	cpc	r25, r29
     cba:	30 f2       	brcs	.-116    	; 0xc48 <move_to_XY+0x27c>
     cbc:	49 c1       	rjmp	.+658    	; 0xf50 <move_to_XY+0x584>
				end
				stop_all();
			end
		end
	
		if (motion == 1)
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	f8 16       	cp	r15, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <move_to_XY+0x2fa>
     cc4:	a1 c0       	rjmp	.+322    	; 0xe08 <move_to_XY+0x43c>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     cc6:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     cca:	80 ec       	ldi	r24, 0xC0	; 192
     ccc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     cd0:	80 91 7a 00 	lds	r24, 0x007A
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	80 93 7a 00 	sts	0x007A, r24
	
		if (motion == 1)
		begin
			// move to x position
			ADC_start_measure(x_axis);
			while(ADCSRA & (1<<ADSC));
     cda:	80 91 7a 00 	lds	r24, 0x007A
     cde:	86 fd       	sbrc	r24, 6
     ce0:	fc cf       	rjmp	.-8      	; 0xcda <move_to_XY+0x30e>
			x_pos = (int)ADCL;
     ce2:	80 91 78 00 	lds	r24, 0x0078
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	90 93 cf 02 	sts	0x02CF, r25
     cec:	80 93 ce 02 	sts	0x02CE, r24
			x_pos += (int)(ADCH*256);
     cf0:	40 91 ce 02 	lds	r20, 0x02CE
     cf4:	50 91 cf 02 	lds	r21, 0x02CF
     cf8:	20 91 79 00 	lds	r18, 0x0079
     cfc:	92 2f       	mov	r25, r18
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	84 0f       	add	r24, r20
     d02:	95 1f       	adc	r25, r21
     d04:	90 93 cf 02 	sts	0x02CF, r25
     d08:	80 93 ce 02 	sts	0x02CE, r24

			if (x_pos > x_in)
     d0c:	80 91 ce 02 	lds	r24, 0x02CE
     d10:	90 91 cf 02 	lds	r25, 0x02CF
     d14:	68 17       	cp	r22, r24
     d16:	79 07       	cpc	r23, r25
     d18:	80 f1       	brcs	.+96     	; 0xd7a <move_to_XY+0x3ae>
     d1a:	6a c0       	rjmp	.+212    	; 0xdf0 <move_to_XY+0x424>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     d1c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     d20:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     d24:	80 91 7a 00 	lds	r24, 0x007A
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	80 93 7a 00 	sts	0x007A, r24
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <move_to_XY+0x36a>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     d30:	8b b1       	in	r24, 0x0b	; 11
     d32:	83 7f       	andi	r24, 0xF3	; 243
     d34:	8b b9       	out	0x0b, r24	; 11
			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
     d36:	80 91 7a 00 	lds	r24, 0x007A
     d3a:	86 fd       	sbrc	r24, 6
     d3c:	f9 cf       	rjmp	.-14     	; 0xd30 <move_to_XY+0x364>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     d3e:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d40:	8e 2f       	mov	r24, r30
     d42:	8a 95       	dec	r24
     d44:	f1 f7       	brne	.-4      	; 0xd42 <move_to_XY+0x376>
	_delay_us(5);
	PORTD |= 0x04;
     d46:	5a 9a       	sbi	0x0b, 2	; 11
				while(x_pos > x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC)) stop_x();
					move_negative_x();
					x_pos = (int)ADCL;
     d48:	80 91 78 00 	lds	r24, 0x0078
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 cf 02 	sts	0x02CF, r25
     d52:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     d56:	80 91 ce 02 	lds	r24, 0x02CE
     d5a:	90 91 cf 02 	lds	r25, 0x02CF
     d5e:	20 91 79 00 	lds	r18, 0x0079
     d62:	32 2f       	mov	r19, r18
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	90 93 cf 02 	sts	0x02CF, r25
     d6e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d72:	ca 01       	movw	r24, r20
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <move_to_XY+0x3a8>
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <move_to_XY+0x3b6>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     d7a:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d7c:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d7e:	40 ed       	ldi	r20, 0xD0	; 208
     d80:	57 e0       	ldi	r21, 0x07	; 7
			x_pos = (int)ADCL;
			x_pos += (int)(ADCH*256);

			if (x_pos > x_in)
			begin
				while(x_pos > x_in)
     d82:	80 91 ce 02 	lds	r24, 0x02CE
     d86:	90 91 cf 02 	lds	r25, 0x02CF
     d8a:	68 17       	cp	r22, r24
     d8c:	79 07       	cpc	r23, r25
     d8e:	30 f2       	brcs	.-116    	; 0xd1c <move_to_XY+0x350>
     d90:	df c0       	rjmp	.+446    	; 0xf50 <move_to_XY+0x584>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     d92:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     d96:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     d9a:	80 91 7a 00 	lds	r24, 0x007A
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	80 93 7a 00 	sts	0x007A, r24
     da4:	03 c0       	rjmp	.+6      	; 0xdac <move_to_XY+0x3e0>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     da6:	8b b1       	in	r24, 0x0b	; 11
     da8:	83 7f       	andi	r24, 0xF3	; 243
     daa:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
     dac:	80 91 7a 00 	lds	r24, 0x007A
     db0:	86 fd       	sbrc	r24, 6
     db2:	f9 cf       	rjmp	.-14     	; 0xda6 <move_to_XY+0x3da>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     db4:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     db6:	8e 2f       	mov	r24, r30
     db8:	8a 95       	dec	r24
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <move_to_XY+0x3ec>
	_delay_us(5);
	PORTD |= 0x08;
     dbc:	5b 9a       	sbi	0x0b, 3	; 11
				while(x_pos < x_in)
				begin
					ADC_start_measure(x_axis);
					while(ADCSRA & (1<<ADSC))stop_x();
					move_positive_x();
					x_pos = (int)ADCL;
     dbe:	80 91 78 00 	lds	r24, 0x0078
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	90 93 cf 02 	sts	0x02CF, r25
     dc8:	80 93 ce 02 	sts	0x02CE, r24
					x_pos += (int)(ADCH*256);
     dcc:	80 91 ce 02 	lds	r24, 0x02CE
     dd0:	90 91 cf 02 	lds	r25, 0x02CF
     dd4:	20 91 79 00 	lds	r18, 0x0079
     dd8:	32 2f       	mov	r19, r18
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	90 93 cf 02 	sts	0x02CF, r25
     de4:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de8:	ca 01       	movw	r24, r20
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <move_to_XY+0x41e>
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <move_to_XY+0x42c>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     df0:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     df2:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df4:	40 ed       	ldi	r20, 0xD0	; 208
     df6:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(x_pos < x_in)
     df8:	80 91 ce 02 	lds	r24, 0x02CE
     dfc:	90 91 cf 02 	lds	r25, 0x02CF
     e00:	86 17       	cp	r24, r22
     e02:	97 07       	cpc	r25, r23
     e04:	30 f2       	brcs	.-116    	; 0xd92 <move_to_XY+0x3c6>
     e06:	a4 c0       	rjmp	.+328    	; 0xf50 <move_to_XY+0x584>
				end
				stop_all();
			end
		end

		if (motion == 2)
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	f8 16       	cp	r15, r24
     e0c:	09 f0       	breq	.+2      	; 0xe10 <move_to_XY+0x444>
     e0e:	a2 c0       	rjmp	.+324    	; 0xf54 <move_to_XY+0x588>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     e10:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     e14:	81 ec       	ldi	r24, 0xC1	; 193
     e16:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     e1a:	80 91 7a 00 	lds	r24, 0x007A
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	80 93 7a 00 	sts	0x007A, r24

		if (motion == 2)
		begin
			// move to y position
			ADC_start_measure(y_axis);
			while(ADCSRA & (1<<ADSC));
     e24:	80 91 7a 00 	lds	r24, 0x007A
     e28:	86 fd       	sbrc	r24, 6
     e2a:	fc cf       	rjmp	.-8      	; 0xe24 <move_to_XY+0x458>
			y_pos = (int)ADCL;
     e2c:	80 91 78 00 	lds	r24, 0x0078
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 99 03 	sts	0x0399, r25
     e36:	80 93 98 03 	sts	0x0398, r24
			y_pos += (int)(ADCH*256);
     e3a:	40 91 98 03 	lds	r20, 0x0398
     e3e:	50 91 99 03 	lds	r21, 0x0399
     e42:	20 91 79 00 	lds	r18, 0x0079
     e46:	92 2f       	mov	r25, r18
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	90 93 99 03 	sts	0x0399, r25
     e52:	80 93 98 03 	sts	0x0398, r24

			if (y_pos > y_in)
     e56:	80 91 98 03 	lds	r24, 0x0398
     e5a:	90 91 99 03 	lds	r25, 0x0399
     e5e:	c8 17       	cp	r28, r24
     e60:	d9 07       	cpc	r29, r25
     e62:	80 f1       	brcs	.+96     	; 0xec4 <move_to_XY+0x4f8>
     e64:	6a c0       	rjmp	.+212    	; 0xf3a <move_to_XY+0x56e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     e66:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     e6a:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     e6e:	80 91 7a 00 	lds	r24, 0x007A
     e72:	80 64       	ori	r24, 0x40	; 64
     e74:	80 93 7a 00 	sts	0x007A, r24
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <move_to_XY+0x4b4>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     e7a:	8b b1       	in	r24, 0x0b	; 11
     e7c:	8f 73       	andi	r24, 0x3F	; 63
     e7e:	8b b9       	out	0x0b, r24	; 11
			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     e80:	80 91 7a 00 	lds	r24, 0x007A
     e84:	86 fd       	sbrc	r24, 6
     e86:	f9 cf       	rjmp	.-14     	; 0xe7a <move_to_XY+0x4ae>
	PORTD |= 0x80;
end

void move_negative_y(void)
begin
	PORTD &= 0x7f;
     e88:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e8a:	86 2f       	mov	r24, r22
     e8c:	8a 95       	dec	r24
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <move_to_XY+0x4c0>
	_delay_us(5);
	PORTD |= 0x40;
     e90:	5e 9a       	sbi	0x0b, 6	; 11
				while(y_pos > y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_negative_y();
					y_pos = (int)ADCL;
     e92:	80 91 78 00 	lds	r24, 0x0078
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 99 03 	sts	0x0399, r25
     e9c:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     ea0:	80 91 98 03 	lds	r24, 0x0398
     ea4:	90 91 99 03 	lds	r25, 0x0399
     ea8:	20 91 79 00 	lds	r18, 0x0079
     eac:	32 2f       	mov	r19, r18
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	90 93 99 03 	sts	0x0399, r25
     eb8:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ebc:	ca 01       	movw	r24, r20
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <move_to_XY+0x4f2>
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <move_to_XY+0x500>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     ec4:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ec6:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec8:	40 ed       	ldi	r20, 0xD0	; 208
     eca:	57 e0       	ldi	r21, 0x07	; 7
			y_pos = (int)ADCL;
			y_pos += (int)(ADCH*256);

			if (y_pos > y_in)
			begin
				while(y_pos > y_in)
     ecc:	80 91 98 03 	lds	r24, 0x0398
     ed0:	90 91 99 03 	lds	r25, 0x0399
     ed4:	c8 17       	cp	r28, r24
     ed6:	d9 07       	cpc	r29, r25
     ed8:	30 f2       	brcs	.-116    	; 0xe66 <move_to_XY+0x49a>
     eda:	3a c0       	rjmp	.+116    	; 0xf50 <move_to_XY+0x584>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     edc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     ee0:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     ee4:	80 91 7a 00 	lds	r24, 0x007A
     ee8:	80 64       	ori	r24, 0x40	; 64
     eea:	80 93 7a 00 	sts	0x007A, r24
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <move_to_XY+0x52a>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     ef0:	8b b1       	in	r24, 0x0b	; 11
     ef2:	8f 73       	andi	r24, 0x3F	; 63
     ef4:	8b b9       	out	0x0b, r24	; 11
			else
			begin
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
     ef6:	80 91 7a 00 	lds	r24, 0x007A
     efa:	86 fd       	sbrc	r24, 6
     efc:	f9 cf       	rjmp	.-14     	; 0xef0 <move_to_XY+0x524>
	PORTD |= 0x08;
end

void move_positive_y(void)
begin
	PORTD &= 0xbf;
     efe:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f00:	86 2f       	mov	r24, r22
     f02:	8a 95       	dec	r24
     f04:	f1 f7       	brne	.-4      	; 0xf02 <move_to_XY+0x536>
	_delay_us(5);
	PORTD |= 0x80;
     f06:	5f 9a       	sbi	0x0b, 7	; 11
				while(y_pos < y_in)
				begin
					ADC_start_measure(y_axis);
					while(ADCSRA & (1<<ADSC)) stop_y();
					move_positive_y();
					y_pos = (int)ADCL;
     f08:	80 91 78 00 	lds	r24, 0x0078
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 99 03 	sts	0x0399, r25
     f12:	80 93 98 03 	sts	0x0398, r24
					y_pos += (int)(ADCH*256);
     f16:	80 91 98 03 	lds	r24, 0x0398
     f1a:	90 91 99 03 	lds	r25, 0x0399
     f1e:	20 91 79 00 	lds	r18, 0x0079
     f22:	32 2f       	mov	r19, r18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	82 0f       	add	r24, r18
     f28:	93 1f       	adc	r25, r19
     f2a:	90 93 99 03 	sts	0x0399, r25
     f2e:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f32:	ca 01       	movw	r24, r20
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <move_to_XY+0x568>
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <move_to_XY+0x576>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     f3a:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f3c:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3e:	40 ed       	ldi	r20, 0xD0	; 208
     f40:	57 e0       	ldi	r21, 0x07	; 7
				stop_all();
			end

			else
			begin
				while(y_pos < y_in)
     f42:	80 91 98 03 	lds	r24, 0x0398
     f46:	90 91 99 03 	lds	r25, 0x0399
     f4a:	8c 17       	cp	r24, r28
     f4c:	9d 07       	cpc	r25, r29
     f4e:	30 f2       	brcs	.-116    	; 0xedc <move_to_XY+0x510>
					move_positive_y();
					y_pos = (int)ADCL;
					y_pos += (int)(ADCH*256);
					_delay_us(500);
				end
				stop_all();
     f50:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
			end
		end
	end	
	// print where you end up
	print_position();			
     f54:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	08 95       	ret

00000f64 <move_motor>:
		LCDstring(lcd_buffer, 10);

end

void move_motor()
begin
     f64:	8f 92       	push	r8
     f66:	9f 92       	push	r9
     f68:	af 92       	push	r10
     f6a:	bf 92       	push	r11
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2,0);
     f7c:	80 91 ab 03 	lds	r24, 0x03AB
     f80:	90 91 ac 03 	lds	r25, 0x03AC
     f84:	60 91 f4 01 	lds	r22, 0x01F4
     f88:	70 91 f5 01 	lds	r23, 0x01F5
     f8c:	42 e0       	ldi	r20, 0x02	; 2
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	c0 2e       	mov	r12, r16
     f9a:	d1 2c       	mov	r13, r1
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     f9c:	f6 01       	movw	r30, r12
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	bb ea       	ldi	r27, 0xAB	; 171
     fa4:	eb 2e       	mov	r14, r27
     fa6:	b3 e0       	ldi	r27, 0x03	; 3
     fa8:	fb 2e       	mov	r15, r27
     faa:	ee 0e       	add	r14, r30
     fac:	ff 1e       	adc	r15, r31
     fae:	d7 01       	movw	r26, r14
     fb0:	8d 91       	ld	r24, X+
     fb2:	9c 91       	ld	r25, X
     fb4:	11 97       	sbiw	r26, 0x01	; 1
     fb6:	97 fd       	sbrc	r25, 7
     fb8:	9b c0       	rjmp	.+310    	; 0x10f0 <move_motor+0x18c>
     fba:	ef 01       	movw	r28, r30
     fbc:	cc 50       	subi	r28, 0x0C	; 12
     fbe:	de 4f       	sbci	r29, 0xFE	; 254
     fc0:	88 81       	ld	r24, Y
     fc2:	99 81       	ldd	r25, Y+1	; 0x01
     fc4:	97 fd       	sbrc	r25, 7
     fc6:	94 c0       	rjmp	.+296    	; 0x10f0 <move_motor+0x18c>
		begin
			if(x_vect[i] == x_vect[i-1])
     fc8:	4d 91       	ld	r20, X+
     fca:	5c 91       	ld	r21, X
     fcc:	08 94       	sec
     fce:	c1 08       	sbc	r12, r1
     fd0:	d1 08       	sbc	r13, r1
     fd2:	96 01       	movw	r18, r12
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	08 94       	sec
     fda:	c1 1c       	adc	r12, r1
     fdc:	d1 1c       	adc	r13, r1
     fde:	7b ea       	ldi	r23, 0xAB	; 171
     fe0:	a7 2e       	mov	r10, r23
     fe2:	73 e0       	ldi	r23, 0x03	; 3
     fe4:	b7 2e       	mov	r11, r23
     fe6:	a2 0e       	add	r10, r18
     fe8:	b3 1e       	adc	r11, r19
     fea:	d5 01       	movw	r26, r10
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	64 ef       	ldi	r22, 0xF4	; 244
     ff2:	86 2e       	mov	r8, r22
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	96 2e       	mov	r9, r22
     ff8:	82 0e       	add	r8, r18
     ffa:	93 1e       	adc	r9, r19
     ffc:	48 17       	cp	r20, r24
     ffe:	59 07       	cpc	r21, r25
    1000:	19 f5       	brne	.+70     	; 0x1048 <move_motor+0xe4>
			begin
				move_to_XY(x_vect[i],y_vect[i],d_vect[i],2);
    1002:	d7 01       	movw	r26, r14
    1004:	8d 91       	ld	r24, X+
    1006:	9c 91       	ld	r25, X
    1008:	68 81       	ld	r22, Y
    100a:	79 81       	ldd	r23, Y+1	; 0x01
    100c:	8f 01       	movw	r16, r30
    100e:	00 53       	subi	r16, 0x30	; 48
    1010:	1d 4f       	sbci	r17, 0xFD	; 253
    1012:	f8 01       	movw	r30, r16
    1014:	40 81       	ld	r20, Z
    1016:	51 81       	ldd	r21, Z+1	; 0x01
    1018:	22 e0       	ldi	r18, 0x02	; 2
    101a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
				move_back_XY(x_vect[i-1],y_vect[i-1],1,2);
    101e:	d5 01       	movw	r26, r10
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	f4 01       	movw	r30, r8
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	22 e0       	ldi	r18, 0x02	; 2
    1030:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
				move_to_XY(x_vect[i],y_vect[i],d_vect[i],2);
    1034:	d7 01       	movw	r26, r14
    1036:	8d 91       	ld	r24, X+
    1038:	9c 91       	ld	r25, X
    103a:	68 81       	ld	r22, Y
    103c:	79 81       	ldd	r23, Y+1	; 0x01
    103e:	f8 01       	movw	r30, r16
    1040:	40 81       	ld	r20, Z
    1042:	51 81       	ldd	r21, Z+1	; 0x01
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	4a c0       	rjmp	.+148    	; 0x10dc <move_motor+0x178>
			end
			else 
			begin
				if(y_vect[i] == y_vect[i-1])
    1048:	28 81       	ld	r18, Y
    104a:	39 81       	ldd	r19, Y+1	; 0x01
    104c:	d4 01       	movw	r26, r8
    104e:	8d 91       	ld	r24, X+
    1050:	9c 91       	ld	r25, X
    1052:	8f 01       	movw	r16, r30
    1054:	00 53       	subi	r16, 0x30	; 48
    1056:	1d 4f       	sbci	r17, 0xFD	; 253
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	01 f5       	brne	.+64     	; 0x109e <move_motor+0x13a>
				begin
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],1);
    105e:	f7 01       	movw	r30, r14
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	68 81       	ld	r22, Y
    1066:	79 81       	ldd	r23, Y+1	; 0x01
    1068:	d8 01       	movw	r26, r16
    106a:	4d 91       	ld	r20, X+
    106c:	5c 91       	ld	r21, X
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
					move_back_XY(x_vect[i-1],y_vect[i-1],1,1);
    1074:	f5 01       	movw	r30, r10
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	d4 01       	movw	r26, r8
    107c:	6d 91       	ld	r22, X+
    107e:	7c 91       	ld	r23, X
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],1);
    108a:	f7 01       	movw	r30, r14
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	68 81       	ld	r22, Y
    1092:	79 81       	ldd	r23, Y+1	; 0x01
    1094:	d8 01       	movw	r26, r16
    1096:	4d 91       	ld	r20, X+
    1098:	5c 91       	ld	r21, X
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	1f c0       	rjmp	.+62     	; 0x10dc <move_motor+0x178>
				end
				else
				begin
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],0);
    109e:	f7 01       	movw	r30, r14
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	68 81       	ld	r22, Y
    10a6:	79 81       	ldd	r23, Y+1	; 0x01
    10a8:	d8 01       	movw	r26, r16
    10aa:	4d 91       	ld	r20, X+
    10ac:	5c 91       	ld	r21, X
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
					move_back_XY(x_vect[i-1],y_vect[i-1],1,0);
    10b4:	f5 01       	movw	r30, r10
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	d4 01       	movw	r26, r8
    10bc:	6d 91       	ld	r22, X+
    10be:	7c 91       	ld	r23, X
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
					move_to_XY(x_vect[i],y_vect[i],d_vect[i],0);
    10ca:	f7 01       	movw	r30, r14
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	68 81       	ld	r22, Y
    10d2:	79 81       	ldd	r23, Y+1	; 0x01
    10d4:	d8 01       	movw	r26, r16
    10d6:	4d 91       	ld	r20, X+
    10d8:	5c 91       	ld	r21, X
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2,0);
	for(i=1;i<100;i++)
    10e0:	08 94       	sec
    10e2:	c1 1c       	adc	r12, r1
    10e4:	d1 1c       	adc	r13, r1
    10e6:	b4 e6       	ldi	r27, 0x64	; 100
    10e8:	cb 16       	cp	r12, r27
    10ea:	d1 04       	cpc	r13, r1
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <move_motor+0x18c>
    10ee:	56 cf       	rjmp	.-340    	; 0xf9c <move_motor+0x38>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2,0);
    10f0:	8c eb       	ldi	r24, 0xBC	; 188
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	6c eb       	ldi	r22, 0xBC	; 188
    10f6:	72 e0       	ldi	r23, 0x02	; 2
    10f8:	42 e0       	ldi	r20, 0x02	; 2
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
end
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	08 95       	ret

0000111c <get_frame>:
	// print where you end up
	print_position();			
end

void get_frame()
begin
    111c:	2f 92       	push	r2
    111e:	3f 92       	push	r3
    1120:	4f 92       	push	r4
    1122:	5f 92       	push	r5
    1124:	6f 92       	push	r6
    1126:	7f 92       	push	r7
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	69 97       	sbiw	r28, 0x19	; 25
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
    1150:	8e ef       	ldi	r24, 0xFE	; 254
    1152:	9f ef       	ldi	r25, 0xFF	; 255
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
    1160:	18 86       	std	Y+8, r1	; 0x08
    1162:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
    1164:	0a e9       	ldi	r16, 0x9A	; 154
    1166:	13 e0       	ldi	r17, 0x03	; 3
    1168:	c8 01       	movw	r24, r16
    116a:	60 e1       	ldi	r22, 0x10	; 16
    116c:	71 e0       	ldi	r23, 0x01	; 1
    116e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
    1172:	60 91 75 04 	lds	r22, 0x0475
    1176:	70 91 76 04 	lds	r23, 0x0476
    117a:	c8 01       	movw	r24, r16
    117c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fputs>
  fscanf(stdin, "%d*", &file_size) ;
    1180:	00 d0       	rcall	.+0      	; 0x1182 <get_frame+0x66>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <get_frame+0x68>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <get_frame+0x6a>
    1186:	ed b7       	in	r30, 0x3d	; 61
    1188:	fe b7       	in	r31, 0x3e	; 62
    118a:	31 96       	adiw	r30, 0x01	; 1
    118c:	80 91 73 04 	lds	r24, 0x0473
    1190:	90 91 74 04 	lds	r25, 0x0474
    1194:	ad b7       	in	r26, 0x3d	; 61
    1196:	be b7       	in	r27, 0x3e	; 62
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	9c 93       	st	X, r25
    119c:	8e 93       	st	-X, r24
    119e:	11 97       	sbiw	r26, 0x01	; 1
    11a0:	8e e1       	ldi	r24, 0x1E	; 30
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	93 83       	std	Z+3, r25	; 0x03
    11a6:	82 83       	std	Z+2, r24	; 0x02
    11a8:	ce 01       	movw	r24, r28
    11aa:	07 96       	adiw	r24, 0x07	; 7
    11ac:	95 83       	std	Z+5, r25	; 0x05
    11ae:	84 83       	std	Z+4, r24	; 0x04
    11b0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
    11b4:	ed b7       	in	r30, 0x3d	; 61
    11b6:	fe b7       	in	r31, 0x3e	; 62
    11b8:	31 96       	adiw	r30, 0x01	; 1
    11ba:	ad b7       	in	r26, 0x3d	; 61
    11bc:	be b7       	in	r27, 0x3e	; 62
    11be:	12 96       	adiw	r26, 0x02	; 2
    11c0:	1c 93       	st	X, r17
    11c2:	0e 93       	st	-X, r16
    11c4:	11 97       	sbiw	r26, 0x01	; 1
    11c6:	82 e2       	ldi	r24, 0x22	; 34
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	93 83       	std	Z+3, r25	; 0x03
    11cc:	82 83       	std	Z+2, r24	; 0x02
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07
    11d0:	98 85       	ldd	r25, Y+8	; 0x08
    11d2:	95 83       	std	Z+5, r25	; 0x05
    11d4:	84 83       	std	Z+4, r24	; 0x04
    11d6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>

	LCDGotoXY(0, 0);
    11da:	6d b7       	in	r22, 0x3d	; 61
    11dc:	7e b7       	in	r23, 0x3e	; 62
    11de:	6a 5f       	subi	r22, 0xFA	; 250
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	7e bf       	out	0x3e, r23	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	6d bf       	out	0x3d, r22	; 61
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
    11f4:	f8 01       	movw	r30, r16
    11f6:	01 90       	ld	r0, Z+
    11f8:	00 20       	and	r0, r0
    11fa:	e9 f7       	brne	.-6      	; 0x11f6 <get_frame+0xda>
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	e0 1b       	sub	r30, r16
    1200:	f1 0b       	sbc	r31, r17
    1202:	c8 01       	movw	r24, r16
    1204:	6e 2f       	mov	r22, r30
    1206:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
    120a:	ee 24       	eor	r14, r14
    120c:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
    120e:	79 e0       	ldi	r23, 0x09	; 9
    1210:	a7 2e       	mov	r10, r23
    1212:	b1 2c       	mov	r11, r1
    1214:	ac 0e       	add	r10, r28
    1216:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
    1218:	48 01       	movw	r8, r16
    121a:	66 e4       	ldi	r22, 0x46	; 70
    121c:	26 2e       	mov	r2, r22
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	36 2e       	mov	r3, r22
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
    1222:	0c eb       	ldi	r16, 0xBC	; 188
    1224:	12 e0       	ldi	r17, 0x02	; 2
    1226:	55 e5       	ldi	r21, 0x55	; 85
    1228:	45 2e       	mov	r4, r21
    122a:	51 e0       	ldi	r21, 0x01	; 1
    122c:	55 2e       	mov	r5, r21
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
    122e:	4b e4       	ldi	r20, 0x4B	; 75
    1230:	64 2e       	mov	r6, r20
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	74 2e       	mov	r7, r20
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
    1236:	3e ef       	ldi	r19, 0xFE	; 254
    1238:	c3 2e       	mov	r12, r19
    123a:	3f ef       	ldi	r19, 0xFF	; 255
    123c:	d3 2e       	mov	r13, r19
    123e:	f7 c0       	rjmp	.+494    	; 0x142e <get_frame+0x312>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
    1240:	60 91 75 04 	lds	r22, 0x0475
    1244:	70 91 76 04 	lds	r23, 0x0476
    1248:	84 e3       	ldi	r24, 0x34	; 52
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fputs>
	fscanf(stdin, "%s", buffer) ;
    1250:	00 d0       	rcall	.+0      	; 0x1252 <get_frame+0x136>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <get_frame+0x138>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <get_frame+0x13a>
    1256:	ed b7       	in	r30, 0x3d	; 61
    1258:	fe b7       	in	r31, 0x3e	; 62
    125a:	31 96       	adiw	r30, 0x01	; 1
    125c:	80 91 73 04 	lds	r24, 0x0473
    1260:	90 91 74 04 	lds	r25, 0x0474
    1264:	ad b7       	in	r26, 0x3d	; 61
    1266:	be b7       	in	r27, 0x3e	; 62
    1268:	12 96       	adiw	r26, 0x02	; 2
    126a:	9c 93       	st	X, r25
    126c:	8e 93       	st	-X, r24
    126e:	11 97       	sbiw	r26, 0x01	; 1
    1270:	69 e3       	ldi	r22, 0x39	; 57
    1272:	71 e0       	ldi	r23, 0x01	; 1
    1274:	73 83       	std	Z+3, r23	; 0x03
    1276:	62 83       	std	Z+2, r22	; 0x02
    1278:	b5 82       	std	Z+5, r11	; 0x05
    127a:	a4 82       	std	Z+4, r10	; 0x04
    127c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
    1280:	00 d0       	rcall	.+0      	; 0x1282 <get_frame+0x166>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <get_frame+0x168>
    1284:	ed b7       	in	r30, 0x3d	; 61
    1286:	fe b7       	in	r31, 0x3e	; 62
    1288:	31 96       	adiw	r30, 0x01	; 1
    128a:	ad b7       	in	r26, 0x3d	; 61
    128c:	be b7       	in	r27, 0x3e	; 62
    128e:	12 96       	adiw	r26, 0x02	; 2
    1290:	bc 92       	st	X, r11
    1292:	ae 92       	st	-X, r10
    1294:	11 97       	sbiw	r26, 0x01	; 1
    1296:	6c e3       	ldi	r22, 0x3C	; 60
    1298:	71 e0       	ldi	r23, 0x01	; 1
    129a:	73 83       	std	Z+3, r23	; 0x03
    129c:	62 83       	std	Z+2, r22	; 0x02
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	8c 0f       	add	r24, r28
    12a4:	9d 1f       	adc	r25, r29
    12a6:	95 83       	std	Z+5, r25	; 0x05
    12a8:	84 83       	std	Z+4, r24	; 0x04
    12aa:	a3 e0       	ldi	r26, 0x03	; 3
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ac 0f       	add	r26, r28
    12b0:	bd 1f       	adc	r27, r29
    12b2:	b7 83       	std	Z+7, r27	; 0x07
    12b4:	a6 83       	std	Z+6, r26	; 0x06
    12b6:	65 e0       	ldi	r22, 0x05	; 5
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	6c 0f       	add	r22, r28
    12bc:	7d 1f       	adc	r23, r29
    12be:	71 87       	std	Z+9, r23	; 0x09
    12c0:	60 87       	std	Z+8, r22	; 0x08
    12c2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	ed b7       	in	r30, 0x3d	; 61
    12d0:	fe b7       	in	r31, 0x3e	; 62
    12d2:	31 96       	adiw	r30, 0x01	; 1
    12d4:	ad b7       	in	r26, 0x3d	; 61
    12d6:	be b7       	in	r27, 0x3e	; 62
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	8c 92       	st	X, r8
    12dc:	11 97       	sbiw	r26, 0x01	; 1
    12de:	12 96       	adiw	r26, 0x02	; 2
    12e0:	9c 92       	st	X, r9
    12e2:	33 82       	std	Z+3, r3	; 0x03
    12e4:	22 82       	std	Z+2, r2	; 0x02
    12e6:	f5 82       	std	Z+5, r15	; 0x05
    12e8:	e4 82       	std	Z+4, r14	; 0x04
    12ea:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
	LCDGotoXY(11, 0);
    12ee:	6d b7       	in	r22, 0x3d	; 61
    12f0:	7e b7       	in	r23, 0x3e	; 62
    12f2:	6a 5f       	subi	r22, 0xFA	; 250
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	7e bf       	out	0x3e, r23	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	6d bf       	out	0x3d, r22	; 61
    1300:	8b e0       	ldi	r24, 0x0B	; 11
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
    1308:	c4 01       	movw	r24, r8
    130a:	62 e0       	ldi	r22, 0x02	; 2
    130c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
	LCDstring(buffer,15);
    1318:	c5 01       	movw	r24, r10
    131a:	6f e0       	ldi	r22, 0x0F	; 15
    131c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
    1320:	49 81       	ldd	r20, Y+1	; 0x01
    1322:	5a 81       	ldd	r21, Y+2	; 0x02
    1324:	7f ef       	ldi	r23, 0xFF	; 255
    1326:	4f 3f       	cpi	r20, 0xFF	; 255
    1328:	57 07       	cpc	r21, r23
    132a:	0c f4       	brge	.+2      	; 0x132e <get_frame+0x212>
    132c:	5a c0       	rjmp	.+180    	; 0x13e2 <get_frame+0x2c6>
    132e:	2b 81       	ldd	r18, Y+3	; 0x03
    1330:	3c 81       	ldd	r19, Y+4	; 0x04
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	2f 3f       	cpi	r18, 0xFF	; 255
    1336:	38 07       	cpc	r19, r24
    1338:	0c f4       	brge	.+2      	; 0x133c <get_frame+0x220>
    133a:	53 c0       	rjmp	.+166    	; 0x13e2 <get_frame+0x2c6>
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	af ef       	ldi	r26, 0xFF	; 255
    1342:	8f 3f       	cpi	r24, 0xFF	; 255
    1344:	9a 07       	cpc	r25, r26
    1346:	0c f4       	brge	.+2      	; 0x134a <get_frame+0x22e>
    1348:	4c c0       	rjmp	.+152    	; 0x13e2 <get_frame+0x2c6>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
    134a:	6d b7       	in	r22, 0x3d	; 61
    134c:	7e b7       	in	r23, 0x3e	; 62
    134e:	6a 50       	subi	r22, 0x0A	; 10
    1350:	70 40       	sbci	r23, 0x00	; 0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	7e bf       	out	0x3e, r23	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	6d bf       	out	0x3d, r22	; 61
    135c:	ed b7       	in	r30, 0x3d	; 61
    135e:	fe b7       	in	r31, 0x3e	; 62
    1360:	31 96       	adiw	r30, 0x01	; 1
    1362:	ad b7       	in	r26, 0x3d	; 61
    1364:	be b7       	in	r27, 0x3e	; 62
    1366:	12 96       	adiw	r26, 0x02	; 2
    1368:	1c 93       	st	X, r17
    136a:	0e 93       	st	-X, r16
    136c:	11 97       	sbiw	r26, 0x01	; 1
    136e:	73 82       	std	Z+3, r7	; 0x03
    1370:	62 82       	std	Z+2, r6	; 0x02
    1372:	55 83       	std	Z+5, r21	; 0x05
    1374:	44 83       	std	Z+4, r20	; 0x04
    1376:	37 83       	std	Z+7, r19	; 0x07
    1378:	26 83       	std	Z+6, r18	; 0x06
    137a:	91 87       	std	Z+9, r25	; 0x09
    137c:	80 87       	std	Z+8, r24	; 0x08
    137e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
		LCDGotoXY(0, 0);
    1382:	6d b7       	in	r22, 0x3d	; 61
    1384:	7e b7       	in	r23, 0x3e	; 62
    1386:	66 5f       	subi	r22, 0xF6	; 246
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	7e bf       	out	0x3e, r23	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	6d bf       	out	0x3d, r22	; 61
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    139c:	c8 01       	movw	r24, r16
    139e:	6a e0       	ldi	r22, 0x0A	; 10
    13a0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
		x_vect[i] = x;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	d7 01       	movw	r26, r14
    13aa:	aa 0f       	add	r26, r26
    13ac:	bb 1f       	adc	r27, r27
    13ae:	fd 01       	movw	r30, r26
    13b0:	e5 55       	subi	r30, 0x55	; 85
    13b2:	fc 4f       	sbci	r31, 0xFC	; 252
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	80 83       	st	Z, r24
		y_vect[i] = y;
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	fd 01       	movw	r30, r26
    13be:	ec 50       	subi	r30, 0x0C	; 12
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
		d_vect[i] = d;
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	a0 53       	subi	r26, 0x30	; 48
    13cc:	bd 4f       	sbci	r27, 0xFD	; 253
    13ce:	11 96       	adiw	r26, 0x01	; 1
    13d0:	9c 93       	st	X, r25
    13d2:	8e 93       	st	-X, r24
		x=-2;
    13d4:	da 82       	std	Y+2, r13	; 0x02
    13d6:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
    13d8:	dc 82       	std	Y+4, r13	; 0x04
    13da:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
    13dc:	de 82       	std	Y+6, r13	; 0x06
    13de:	cd 82       	std	Y+5, r12	; 0x05
    13e0:	23 c0       	rjmp	.+70     	; 0x1428 <get_frame+0x30c>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <get_frame+0x2c8>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <get_frame+0x2ca>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <get_frame+0x2cc>
    13e8:	ed b7       	in	r30, 0x3d	; 61
    13ea:	fe b7       	in	r31, 0x3e	; 62
    13ec:	31 96       	adiw	r30, 0x01	; 1
    13ee:	ad b7       	in	r26, 0x3d	; 61
    13f0:	be b7       	in	r27, 0x3e	; 62
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	1c 93       	st	X, r17
    13f6:	0e 93       	st	-X, r16
    13f8:	11 97       	sbiw	r26, 0x01	; 1
    13fa:	53 82       	std	Z+3, r5	; 0x03
    13fc:	42 82       	std	Z+2, r4	; 0x02
    13fe:	f5 82       	std	Z+5, r15	; 0x05
    1400:	e4 82       	std	Z+4, r14	; 0x04
    1402:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
		LCDGotoXY(0, 0);
    1406:	6d b7       	in	r22, 0x3d	; 61
    1408:	7e b7       	in	r23, 0x3e	; 62
    140a:	6a 5f       	subi	r22, 0xFA	; 250
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	7e bf       	out	0x3e, r23	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	6d bf       	out	0x3d, r22	; 61
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1420:	c8 01       	movw	r24, r16
    1422:	6a e0       	ldi	r22, 0x0A	; 10
    1424:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
    1428:	08 94       	sec
    142a:	e1 1c       	adc	r14, r1
    142c:	f1 1c       	adc	r15, r1
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	98 85       	ldd	r25, Y+8	; 0x08
    1432:	e8 16       	cp	r14, r24
    1434:	f9 06       	cpc	r15, r25
    1436:	08 f4       	brcc	.+2      	; 0x143a <get_frame+0x31e>
    1438:	03 cf       	rjmp	.-506    	; 0x1240 <get_frame+0x124>
		LCDstring(lcd_buffer, 10);
	}
	//_delay_ms(1000);
  end
	//	_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
    143a:	00 d0       	rcall	.+0      	; 0x143c <get_frame+0x320>
    143c:	00 d0       	rcall	.+0      	; 0x143e <get_frame+0x322>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <get_frame+0x324>
    1440:	ed b7       	in	r30, 0x3d	; 61
    1442:	fe b7       	in	r31, 0x3e	; 62
    1444:	31 96       	adiw	r30, 0x01	; 1
    1446:	0c eb       	ldi	r16, 0xBC	; 188
    1448:	12 e0       	ldi	r17, 0x02	; 2
    144a:	ad b7       	in	r26, 0x3d	; 61
    144c:	be b7       	in	r27, 0x3e	; 62
    144e:	12 96       	adiw	r26, 0x02	; 2
    1450:	1c 93       	st	X, r17
    1452:	0e 93       	st	-X, r16
    1454:	11 97       	sbiw	r26, 0x01	; 1
    1456:	81 e6       	ldi	r24, 0x61	; 97
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	93 83       	std	Z+3, r25	; 0x03
    145c:	82 83       	std	Z+2, r24	; 0x02
    145e:	f5 82       	std	Z+5, r15	; 0x05
    1460:	e4 82       	std	Z+4, r14	; 0x04
    1462:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
		LCDGotoXY(0, 0);
    1466:	6d b7       	in	r22, 0x3d	; 61
    1468:	7e b7       	in	r23, 0x3e	; 62
    146a:	6a 5f       	subi	r22, 0xFA	; 250
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	7e bf       	out	0x3e, r23	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	6d bf       	out	0x3d, r22	; 61
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1480:	c8 01       	movw	r24, r16
    1482:	6a e0       	ldi	r22, 0x0A	; 10
    1484:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
    1488:	20 91 ab 03 	lds	r18, 0x03AB
    148c:	30 91 ac 03 	lds	r19, 0x03AC
    1490:	40 91 ad 03 	lds	r20, 0x03AD
    1494:	50 91 ae 03 	lds	r21, 0x03AE
    1498:	60 91 af 03 	lds	r22, 0x03AF
    149c:	70 91 b0 03 	lds	r23, 0x03B0
    14a0:	e0 90 b1 03 	lds	r14, 0x03B1
    14a4:	f0 90 b2 03 	lds	r15, 0x03B2
    14a8:	8d b7       	in	r24, 0x3d	; 61
    14aa:	9e b7       	in	r25, 0x3e	; 62
    14ac:	0c 97       	sbiw	r24, 0x0c	; 12
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	9e bf       	out	0x3e, r25	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	8d bf       	out	0x3d, r24	; 61
    14b8:	ed b7       	in	r30, 0x3d	; 61
    14ba:	fe b7       	in	r31, 0x3e	; 62
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	ad b7       	in	r26, 0x3d	; 61
    14c0:	be b7       	in	r27, 0x3e	; 62
    14c2:	12 96       	adiw	r26, 0x02	; 2
    14c4:	1c 93       	st	X, r17
    14c6:	0e 93       	st	-X, r16
    14c8:	11 97       	sbiw	r26, 0x01	; 1
    14ca:	8d e6       	ldi	r24, 0x6D	; 109
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	93 83       	std	Z+3, r25	; 0x03
    14d0:	82 83       	std	Z+2, r24	; 0x02
    14d2:	35 83       	std	Z+5, r19	; 0x05
    14d4:	24 83       	std	Z+4, r18	; 0x04
    14d6:	57 83       	std	Z+7, r21	; 0x07
    14d8:	46 83       	std	Z+6, r20	; 0x06
    14da:	71 87       	std	Z+9, r23	; 0x09
    14dc:	60 87       	std	Z+8, r22	; 0x08
    14de:	f3 86       	std	Z+11, r15	; 0x0b
    14e0:	e2 86       	std	Z+10, r14	; 0x0a
    14e2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
		LCDGotoXY(0, 0);
    14e6:	6d b7       	in	r22, 0x3d	; 61
    14e8:	7e b7       	in	r23, 0x3e	; 62
    14ea:	64 5f       	subi	r22, 0xF4	; 244
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	7e bf       	out	0x3e, r23	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	6d bf       	out	0x3d, r22	; 61
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1500:	c8 01       	movw	r24, r16
    1502:	6a e0       	ldi	r22, 0x0A	; 10
    1504:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
    1508:	20 91 f4 01 	lds	r18, 0x01F4
    150c:	30 91 f5 01 	lds	r19, 0x01F5
    1510:	40 91 f6 01 	lds	r20, 0x01F6
    1514:	50 91 f7 01 	lds	r21, 0x01F7
    1518:	60 91 f8 01 	lds	r22, 0x01F8
    151c:	70 91 f9 01 	lds	r23, 0x01F9
    1520:	e0 90 fa 01 	lds	r14, 0x01FA
    1524:	f0 90 fb 01 	lds	r15, 0x01FB
    1528:	8d b7       	in	r24, 0x3d	; 61
    152a:	9e b7       	in	r25, 0x3e	; 62
    152c:	0c 97       	sbiw	r24, 0x0c	; 12
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	9e bf       	out	0x3e, r25	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	8d bf       	out	0x3d, r24	; 61
    1538:	ed b7       	in	r30, 0x3d	; 61
    153a:	fe b7       	in	r31, 0x3e	; 62
    153c:	31 96       	adiw	r30, 0x01	; 1
    153e:	ad b7       	in	r26, 0x3d	; 61
    1540:	be b7       	in	r27, 0x3e	; 62
    1542:	12 96       	adiw	r26, 0x02	; 2
    1544:	1c 93       	st	X, r17
    1546:	0e 93       	st	-X, r16
    1548:	11 97       	sbiw	r26, 0x01	; 1
    154a:	87 e7       	ldi	r24, 0x77	; 119
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	93 83       	std	Z+3, r25	; 0x03
    1550:	82 83       	std	Z+2, r24	; 0x02
    1552:	35 83       	std	Z+5, r19	; 0x05
    1554:	24 83       	std	Z+4, r18	; 0x04
    1556:	57 83       	std	Z+7, r21	; 0x07
    1558:	46 83       	std	Z+6, r20	; 0x06
    155a:	71 87       	std	Z+9, r23	; 0x09
    155c:	60 87       	std	Z+8, r22	; 0x08
    155e:	f3 86       	std	Z+11, r15	; 0x0b
    1560:	e2 86       	std	Z+10, r14	; 0x0a
    1562:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
		LCDGotoXY(0, 1);
    1566:	6d b7       	in	r22, 0x3d	; 61
    1568:	7e b7       	in	r23, 0x3e	; 62
    156a:	64 5f       	subi	r22, 0xF4	; 244
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	7e bf       	out	0x3e, r23	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	6d bf       	out	0x3d, r22	; 61
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1580:	c8 01       	movw	r24, r16
    1582:	6a e0       	ldi	r22, 0x0A	; 10
    1584:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
    1588:	20 91 d0 02 	lds	r18, 0x02D0
    158c:	30 91 d1 02 	lds	r19, 0x02D1
    1590:	40 91 d2 02 	lds	r20, 0x02D2
    1594:	50 91 d3 02 	lds	r21, 0x02D3
    1598:	60 91 d4 02 	lds	r22, 0x02D4
    159c:	70 91 d5 02 	lds	r23, 0x02D5
    15a0:	e0 90 d6 02 	lds	r14, 0x02D6
    15a4:	f0 90 d7 02 	lds	r15, 0x02D7
    15a8:	8d b7       	in	r24, 0x3d	; 61
    15aa:	9e b7       	in	r25, 0x3e	; 62
    15ac:	0c 97       	sbiw	r24, 0x0c	; 12
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	9e bf       	out	0x3e, r25	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	8d bf       	out	0x3d, r24	; 61
    15b8:	ed b7       	in	r30, 0x3d	; 61
    15ba:	fe b7       	in	r31, 0x3e	; 62
    15bc:	31 96       	adiw	r30, 0x01	; 1
    15be:	ad b7       	in	r26, 0x3d	; 61
    15c0:	be b7       	in	r27, 0x3e	; 62
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	1c 93       	st	X, r17
    15c6:	0e 93       	st	-X, r16
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	81 e8       	ldi	r24, 0x81	; 129
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	93 83       	std	Z+3, r25	; 0x03
    15d0:	82 83       	std	Z+2, r24	; 0x02
    15d2:	35 83       	std	Z+5, r19	; 0x05
    15d4:	24 83       	std	Z+4, r18	; 0x04
    15d6:	57 83       	std	Z+7, r21	; 0x07
    15d8:	46 83       	std	Z+6, r20	; 0x06
    15da:	71 87       	std	Z+9, r23	; 0x09
    15dc:	60 87       	std	Z+8, r22	; 0x08
    15de:	f3 86       	std	Z+11, r15	; 0x0b
    15e0:	e2 86       	std	Z+10, r14	; 0x0a
    15e2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <sprintf>
		LCDGotoXY(10, 0);
    15e6:	6d b7       	in	r22, 0x3d	; 61
    15e8:	7e b7       	in	r23, 0x3e	; 62
    15ea:	64 5f       	subi	r22, 0xF4	; 244
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	7e bf       	out	0x3e, r23	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	6d bf       	out	0x3d, r22	; 61
    15f8:	8a e0       	ldi	r24, 0x0A	; 10
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
    1600:	c8 01       	movw	r24, r16
    1602:	6a e0       	ldi	r22, 0x0A	; 10
    1604:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDstring>

end
    1608:	69 96       	adiw	r28, 0x19	; 25
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	bf 90       	pop	r11
    1626:	af 90       	pop	r10
    1628:	9f 90       	pop	r9
    162a:	8f 90       	pop	r8
    162c:	7f 90       	pop	r7
    162e:	6f 90       	pop	r6
    1630:	5f 90       	pop	r5
    1632:	4f 90       	pop	r4
    1634:	3f 90       	pop	r3
    1636:	2f 90       	pop	r2
    1638:	08 95       	ret

0000163a <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    163a:	0e 94 39 0c 	call	0x1872	; 0x1872 <LCDinit>
	LCDcursorOFF();
    163e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCDcursorOFF>
	LCDclr();	//clear the display
    1642:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <LCDclr>
	LCDGotoXY(0,0);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    164e:	8c e8       	ldi	r24, 0x8C	; 140
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CopyStringtoLCD>
	LCD_char_count = 0;
    165a:	10 92 cd 02 	sts	0x02CD, r1
end
    165e:	08 95       	ret

00001660 <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
    1660:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
    1662:	8f ee       	ldi	r24, 0xEF	; 239
    1664:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
    1666:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
    1668:	80 e1       	ldi	r24, 0x10	; 16
    166a:	8b b9       	out	0x0b, r24	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
    166c:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
    1670:	ec e7       	ldi	r30, 0x7C	; 124
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	10 82       	st	Z, r1
	ADCSRA = 0;
    1676:	aa e7       	ldi	r26, 0x7A	; 122
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
    167c:	80 e4       	ldi	r24, 0x40	; 64
    167e:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
    1680:	87 e8       	ldi	r24, 0x87	; 135
    1682:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
    1684:	08 95       	ret

00001686 <main>:
	end
	move_to_XY(700,700,2,0);
end

// --- Main Program ----------------------------------
int main(void) {
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
  
  initialize();
    168a:	0e 94 30 0b 	call	0x1660	; 0x1660 <initialize>
  stop_all();
    168e:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	LCD_init();
    1692:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
    1696:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <uart_init>
  stdout = stdin = stderr = &uart_str;
    169a:	8b e8       	ldi	r24, 0x8B	; 139
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	90 93 78 04 	sts	0x0478, r25
    16a2:	80 93 77 04 	sts	0x0477, r24
    16a6:	90 93 74 04 	sts	0x0474, r25
    16aa:	80 93 73 04 	sts	0x0473, r24
    16ae:	90 93 76 04 	sts	0x0476, r25
    16b2:	80 93 75 04 	sts	0x0475, r24
    16b6:	c0 e9       	ldi	r28, 0x90	; 144
    16b8:	d1 e0       	ldi	r29, 0x01	; 1
//while(1) move_positive_y();
  while(1)
  begin
  	move_to_XY(700,700,2,0);
    16ba:	8c eb       	ldi	r24, 0xBC	; 188
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	6c eb       	ldi	r22, 0xBC	; 188
    16c0:	72 e0       	ldi	r23, 0x02	; 2
    16c2:	42 e0       	ldi	r20, 0x02	; 2
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	0e 94 e6 04 	call	0x9cc	; 0x9cc <move_to_XY>
	CopyStringtoLCD(LCD_wait1, 0, 0);
    16cc:	82 ec       	ldi	r24, 0xC2	; 194
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CopyStringtoLCD>
	CopyStringtoLCD(LCD_wait2, 0, 1);
    16d8:	84 ed       	ldi	r24, 0xD4	; 212
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CopyStringtoLCD>
  	while(PIND & 0x10);
    16e4:	4c 99       	sbic	0x09, 4	; 9
    16e6:	fe cf       	rjmp	.-4      	; 0x16e4 <main+0x5e>
    16e8:	8c e2       	ldi	r24, 0x2C	; 44
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	fe 01       	movw	r30, r28
    16ee:	31 97       	sbiw	r30, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	d9 f7       	brne	.-10     	; 0x16ec <main+0x66>
	_delay_ms(30);
	if(!(PIND&0x10))
    16f6:	4c 99       	sbic	0x09, 4	; 9
    16f8:	e0 cf       	rjmp	.-64     	; 0x16ba <main+0x34>
	begin
		CopyStringtoLCD(LCD_df1, 0, 0);
    16fa:	88 ef       	ldi	r24, 0xF8	; 248
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CopyStringtoLCD>
		CopyStringtoLCD(LCD_df2, 0, 1);
    1706:	8a e0       	ldi	r24, 0x0A	; 10
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CopyStringtoLCD>
	  	get_frame();
    1712:	0e 94 8e 08 	call	0x111c	; 0x111c <get_frame>
		CopyStringtoLCD(LCD_printing, 0, 0);
    1716:	86 ee       	ldi	r24, 0xE6	; 230
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CopyStringtoLCD>
		move_motor();
    1722:	0e 94 b2 07 	call	0xf64	; 0xf64 <move_motor>
    1726:	c9 cf       	rjmp	.-110    	; 0x16ba <main+0x34>

00001728 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    1728:	28 2f       	mov	r18, r24
    172a:	20 7f       	andi	r18, 0xF0	; 240
    172c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    172e:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1730:	42 9a       	sbi	0x08, 2	; 8
    1732:	20 e4       	ldi	r18, 0x40	; 64
    1734:	3f e1       	ldi	r19, 0x1F	; 31
    1736:	f9 01       	movw	r30, r18
    1738:	31 97       	sbiw	r30, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    173c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    173e:	40 98       	cbi	0x08, 0	; 8
    1740:	f9 01       	movw	r30, r18
    1742:	31 97       	sbiw	r30, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	44 e0       	ldi	r20, 0x04	; 4
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	4a 95       	dec	r20
    1750:	e1 f7       	brne	.-8      	; 0x174a <LCDsendChar+0x22>
    1752:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1754:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1756:	42 9a       	sbi	0x08, 2	; 8
    1758:	c9 01       	movw	r24, r18
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    175e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1760:	40 98       	cbi	0x08, 0	; 8
    1762:	c9 01       	movw	r24, r18
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1768:	08 95       	ret

0000176a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    176a:	28 2f       	mov	r18, r24
    176c:	20 7f       	andi	r18, 0xF0	; 240
    176e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    1770:	42 9a       	sbi	0x08, 2	; 8
    1772:	20 e4       	ldi	r18, 0x40	; 64
    1774:	3f e1       	ldi	r19, 0x1F	; 31
    1776:	f9 01       	movw	r30, r18
    1778:	31 97       	sbiw	r30, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    177c:	42 98       	cbi	0x08, 2	; 8
    177e:	f9 01       	movw	r30, r18
    1780:	31 97       	sbiw	r30, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	54 e0       	ldi	r21, 0x04	; 4
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	5a 95       	dec	r21
    178e:	e1 f7       	brne	.-8      	; 0x1788 <LCDsendCommand+0x1e>
    1790:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1792:	42 9a       	sbi	0x08, 2	; 8
    1794:	c9 01       	movw	r24, r18
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    179a:	42 98       	cbi	0x08, 2	; 8
    179c:	c9 01       	movw	r24, r18
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    17a2:	08 95       	ret

000017a4 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    17aa:	08 95       	ret

000017ac <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    17b2:	08 95       	ret

000017b4 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <LCDstring+0x20>
    17c2:	ec 01       	movw	r28, r24
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    17c8:	89 91       	ld	r24, Y+
    17ca:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    17ce:	1f 5f       	subi	r17, 0xFF	; 255
    17d0:	10 17       	cp	r17, r16
    17d2:	d0 f3       	brcs	.-12     	; 0x17c8 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret

000017de <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    17de:	62 30       	cpi	r22, 0x02	; 2
    17e0:	31 f0       	breq	.+12     	; 0x17ee <LCDGotoXY+0x10>
    17e2:	63 30       	cpi	r22, 0x03	; 3
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <LCDGotoXY+0x14>
    17e6:	61 30       	cpi	r22, 0x01	; 1
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    17ea:	80 5c       	subi	r24, 0xC0	; 192
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    17ee:	8c 5e       	subi	r24, 0xEC	; 236
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    17f2:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
	
}
    17fa:	08 95       	ret

000017fc <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1806:	64 2f       	mov	r22, r20
    1808:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCDGotoXY>
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1810:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1814:	1f 5f       	subi	r17, 0xFF	; 255
    1816:	fe 01       	movw	r30, r28
    1818:	e1 0f       	add	r30, r17
    181a:	f1 1d       	adc	r31, r1
    181c:	84 91       	lpm	r24, Z+
    181e:	88 23       	and	r24, r24
    1820:	b9 f7       	brne	.-18     	; 0x1810 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	08 95       	ret

0000182a <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	7c 01       	movw	r14, r24
    1838:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    183a:	11 0f       	add	r17, r17
    183c:	11 0f       	add	r17, r17
    183e:	11 0f       	add	r17, r17
    1840:	10 64       	ori	r17, 0x40	; 64
    1842:	c0 e0       	ldi	r28, 0x00	; 0
    1844:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1846:	f7 01       	movw	r30, r14
    1848:	ec 0f       	add	r30, r28
    184a:	fd 1f       	adc	r31, r29
    184c:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    184e:	81 2f       	mov	r24, r17
    1850:	8c 0f       	add	r24, r28
    1852:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
		LCDsendChar(pcc);
    1856:	80 2f       	mov	r24, r16
    1858:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    185c:	21 96       	adiw	r28, 0x01	; 1
    185e:	c8 30       	cpi	r28, 0x08	; 8
    1860:	d1 05       	cpc	r29, r1
    1862:	89 f7       	brne	.-30     	; 0x1846 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	08 95       	ret

00001872 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	80 e6       	ldi	r24, 0x60	; 96
    187a:	9a ee       	ldi	r25, 0xEA	; 234
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1880:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1882:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1884:	87 b1       	in	r24, 0x07	; 7
    1886:	80 6f       	ori	r24, 0xF0	; 240
    1888:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    188a:	87 b1       	in	r24, 0x07	; 7
    188c:	87 60       	ori	r24, 0x07	; 7
    188e:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1890:	80 e3       	ldi	r24, 0x30	; 48
    1892:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1894:	42 9a       	sbi	0x08, 2	; 8
    1896:	20 e4       	ldi	r18, 0x40	; 64
    1898:	3f e1       	ldi	r19, 0x1F	; 31
    189a:	f9 01       	movw	r30, r18
    189c:	31 97       	sbiw	r30, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    18a0:	42 98       	cbi	0x08, 2	; 8
    18a2:	f9 01       	movw	r30, r18
    18a4:	31 97       	sbiw	r30, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    18a8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18aa:	42 9a       	sbi	0x08, 2	; 8
    18ac:	c9 01       	movw	r24, r18
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    18b2:	42 98       	cbi	0x08, 2	; 8
    18b4:	c9 01       	movw	r24, r18
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    18be:	42 9a       	sbi	0x08, 2	; 8
    18c0:	c9 01       	movw	r24, r18
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    18c6:	42 98       	cbi	0x08, 2	; 8
    18c8:	c9 01       	movw	r24, r18
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    18ce:	88 e2       	ldi	r24, 0x28	; 40
    18d0:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    18d4:	8c e0       	ldi	r24, 0x0C	; 12
    18d6:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
    18da:	cc e1       	ldi	r28, 0x1C	; 28
    18dc:	d1 e0       	ldi	r29, 0x01	; 1
    18de:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    18e0:	16 2f       	mov	r17, r22
    18e2:	1f 5f       	subi	r17, 0xFF	; 255
    18e4:	ce 01       	movw	r24, r28
    18e6:	0e 94 15 0c 	call	0x182a	; 0x182a <LCDdefinechar>
    18ea:	28 96       	adiw	r28, 0x08	; 8
    18ec:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    18ee:	18 30       	cpi	r17, 0x08	; 8
    18f0:	b9 f7       	brne	.-18     	; 0x18e0 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	08 95       	ret

000018fa <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	08 2f       	mov	r16, r24
    1900:	10 e0       	ldi	r17, 0x00	; 0
    1902:	04 c0       	rjmp	.+8      	; 0x190c <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1904:	8e e1       	ldi	r24, 0x1E	; 30
    1906:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    190a:	1f 5f       	subi	r17, 0xFF	; 255
    190c:	10 17       	cp	r17, r16
    190e:	d0 f3       	brcs	.-12     	; 0x1904 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	08 2f       	mov	r16, r24
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1920:	88 e1       	ldi	r24, 0x18	; 24
    1922:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1926:	1f 5f       	subi	r17, 0xFF	; 255
    1928:	10 17       	cp	r17, r16
    192a:	d0 f3       	brcs	.-12     	; 0x1920 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	08 95       	ret

00001932 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1932:	8e e0       	ldi	r24, 0x0E	; 14
    1934:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    1938:	08 95       	ret

0000193a <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    193a:	8f e0       	ldi	r24, 0x0F	; 15
    193c:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    1940:	08 95       	ret

00001942 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1942:	8c e0       	ldi	r24, 0x0C	; 12
    1944:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    1948:	08 95       	ret

0000194a <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    194a:	88 e0       	ldi	r24, 0x08	; 8
    194c:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    1950:	08 95       	ret

00001952 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1952:	8c e0       	ldi	r24, 0x0C	; 12
    1954:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
}
    1958:	08 95       	ret

0000195a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	08 2f       	mov	r16, r24
    1960:	10 e0       	ldi	r17, 0x00	; 0
    1962:	04 c0       	rjmp	.+8      	; 0x196c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1964:	80 e1       	ldi	r24, 0x10	; 16
    1966:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    196a:	1f 5f       	subi	r17, 0xFF	; 255
    196c:	10 17       	cp	r17, r16
    196e:	d0 f3       	brcs	.-12     	; 0x1964 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	08 2f       	mov	r16, r24
    197c:	10 e0       	ldi	r17, 0x00	; 0
    197e:	04 c0       	rjmp	.+8      	; 0x1988 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1980:	84 e1       	ldi	r24, 0x14	; 20
    1982:	0e 94 b5 0b 	call	0x176a	; 0x176a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1986:	1f 5f       	subi	r17, 0xFF	; 255
    1988:	10 17       	cp	r17, r16
    198a:	d0 f3       	brcs	.-12     	; 0x1980 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    19a2:	96 e0       	ldi	r25, 0x06	; 6
    19a4:	89 9f       	mul	r24, r25
    19a6:	c0 01       	movw	r24, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	24 2f       	mov	r18, r20
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	ac 01       	movw	r20, r24
    19b0:	42 9f       	mul	r20, r18
    19b2:	c0 01       	movw	r24, r0
    19b4:	43 9f       	mul	r20, r19
    19b6:	90 0d       	add	r25, r0
    19b8:	52 9f       	mul	r21, r18
    19ba:	90 0d       	add	r25, r0
    19bc:	11 24       	eor	r1, r1
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__divmodhi4>
    19c4:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    19c6:	cb 01       	movw	r24, r22
    19c8:	66 e0       	ldi	r22, 0x06	; 6
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__udivmodhi4>
    19d0:	e8 2e       	mov	r14, r24
    19d2:	ff 24       	eor	r15, r15
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	12 c0       	rjmp	.+36     	; 0x19fe <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    19da:	c8 01       	movw	r24, r16
    19dc:	05 96       	adiw	r24, 0x05	; 5
    19de:	c8 17       	cp	r28, r24
    19e0:	d9 07       	cpc	r29, r25
    19e2:	10 f0       	brcs	.+4      	; 0x19e8 <LCDprogressBar+0x56>
    19e4:	85 e0       	ldi	r24, 0x05	; 5
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    19e8:	c0 17       	cp	r28, r16
    19ea:	d1 07       	cpc	r29, r17
    19ec:	10 f0       	brcs	.+4      	; 0x19f2 <LCDprogressBar+0x60>
    19ee:	8e 2d       	mov	r24, r14
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <LCDprogressBar+0x62>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    19f4:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    19f8:	f3 94       	inc	r15
    19fa:	0a 5f       	subi	r16, 0xFA	; 250
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	fd 14       	cp	r15, r13
    1a00:	60 f3       	brcs	.-40     	; 0x19da <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	08 95       	ret

00001a12 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1a12:	87 e6       	ldi	r24, 0x67	; 103
    1a14:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1a18:	88 e1       	ldi	r24, 0x18	; 24
    1a1a:	80 93 c1 00 	sts	0x00C1, r24
}
    1a1e:	08 95       	ret

00001a20 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1a20:	1f 93       	push	r17
    1a22:	18 2f       	mov	r17, r24

  if (c == '\a')
    1a24:	87 30       	cpi	r24, 0x07	; 7
    1a26:	49 f4       	brne	.+18     	; 0x1a3a <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1a28:	60 91 77 04 	lds	r22, 0x0477
    1a2c:	70 91 78 04 	lds	r23, 0x0478
    1a30:	89 e9       	ldi	r24, 0x99	; 153
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fputs>
    1a38:	0b c0       	rjmp	.+22     	; 0x1a50 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    1a3a:	8a 30       	cpi	r24, 0x0A	; 10
    1a3c:	19 f4       	brne	.+6      	; 0x1a44 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1a3e:	8d e0       	ldi	r24, 0x0D	; 13
    1a40:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1a44:	80 91 c0 00 	lds	r24, 0x00C0
    1a48:	85 ff       	sbrs	r24, 5
    1a4a:	fc cf       	rjmp	.-8      	; 0x1a44 <uart_putchar+0x24>
  UDR0 = c;
    1a4c:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	1f 91       	pop	r17
    1a56:	08 95       	ret

00001a58 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1a66:	80 91 a2 01 	lds	r24, 0x01A2
    1a6a:	90 91 a3 01 	lds	r25, 0x01A3
    1a6e:	89 2b       	or	r24, r25
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <uart_getchar+0x1c>
    1a72:	9f c0       	rjmp	.+318    	; 0x1bb2 <uart_getchar+0x15a>
    1a74:	04 ea       	ldi	r16, 0xA4	; 164
    1a76:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1a78:	80 91 c0 00 	lds	r24, 0x00C0
    1a7c:	87 ff       	sbrs	r24, 7
    1a7e:	fc cf       	rjmp	.-8      	; 0x1a78 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    1a80:	80 91 c0 00 	lds	r24, 0x00C0
    1a84:	84 ff       	sbrs	r24, 4
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <uart_getchar+0x36>
    1a88:	2e ef       	ldi	r18, 0xFE	; 254
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	a6 c0       	rjmp	.+332    	; 0x1bda <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    1a8e:	80 91 c0 00 	lds	r24, 0x00C0
    1a92:	83 fd       	sbrc	r24, 3
    1a94:	a0 c0       	rjmp	.+320    	; 0x1bd6 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    1a96:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    1a9a:	9d 30       	cpi	r25, 0x0D	; 13
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1a9e:	9a 30       	cpi	r25, 0x0A	; 10
    1aa0:	69 f4       	brne	.+26     	; 0x1abc <uart_getchar+0x64>
	  {
	    *cp = c;
    1aa2:	8a e0       	ldi	r24, 0x0A	; 10
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
	    rxp = b;
    1aae:	84 ea       	ldi	r24, 0xA4	; 164
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	90 93 a3 01 	sts	0x01A3, r25
    1ab6:	80 93 a2 01 	sts	0x01A2, r24
    1aba:	7b c0       	rjmp	.+246    	; 0x1bb2 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1abc:	99 30       	cpi	r25, 0x09	; 9
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <uart_getchar+0x6a>
    1ac0:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    1ac2:	89 2f       	mov	r24, r25
    1ac4:	80 52       	subi	r24, 0x20	; 32
    1ac6:	8f 35       	cpi	r24, 0x5F	; 95
    1ac8:	10 f0       	brcs	.+4      	; 0x1ace <uart_getchar+0x76>
    1aca:	90 3a       	cpi	r25, 0xA0	; 160
    1acc:	70 f0       	brcs	.+28     	; 0x1aea <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1ace:	f1 e0       	ldi	r31, 0x01	; 1
    1ad0:	03 3f       	cpi	r16, 0xF3	; 243
    1ad2:	1f 07       	cpc	r17, r31
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    1ada:	f8 01       	movw	r30, r16
    1adc:	91 93       	st	Z+, r25
    1ade:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1ae0:	89 2f       	mov	r24, r25
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
    1ae8:	c7 cf       	rjmp	.-114    	; 0x1a78 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    1aea:	92 31       	cpi	r25, 0x12	; 18
    1aec:	39 f1       	breq	.+78     	; 0x1b3c <uart_getchar+0xe4>
    1aee:	93 31       	cpi	r25, 0x13	; 19
    1af0:	38 f4       	brcc	.+14     	; 0x1b00 <uart_getchar+0xa8>
    1af2:	93 30       	cpi	r25, 0x03	; 3
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <uart_getchar+0xa0>
    1af6:	6f c0       	rjmp	.+222    	; 0x1bd6 <uart_getchar+0x17e>
    1af8:	98 30       	cpi	r25, 0x08	; 8
    1afa:	09 f0       	breq	.+2      	; 0x1afe <uart_getchar+0xa6>
    1afc:	bd cf       	rjmp	.-134    	; 0x1a78 <uart_getchar+0x20>
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <uart_getchar+0xba>
    1b00:	97 31       	cpi	r25, 0x17	; 23
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <uart_getchar+0xae>
    1b04:	4b c0       	rjmp	.+150    	; 0x1b9c <uart_getchar+0x144>
    1b06:	9f 37       	cpi	r25, 0x7F	; 127
    1b08:	21 f0       	breq	.+8      	; 0x1b12 <uart_getchar+0xba>
    1b0a:	95 31       	cpi	r25, 0x15	; 21
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <uart_getchar+0xb8>
    1b0e:	b4 cf       	rjmp	.-152    	; 0x1a78 <uart_getchar+0x20>
    1b10:	32 c0       	rjmp	.+100    	; 0x1b76 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1b12:	f1 e0       	ldi	r31, 0x01	; 1
    1b14:	04 3a       	cpi	r16, 0xA4	; 164
    1b16:	1f 07       	cpc	r17, r31
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <uart_getchar+0xc4>
    1b1a:	08 f4       	brcc	.+2      	; 0x1b1e <uart_getchar+0xc6>
    1b1c:	ad cf       	rjmp	.-166    	; 0x1a78 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1b1e:	88 e0       	ldi	r24, 0x08	; 8
    1b20:	b7 01       	movw	r22, r14
    1b22:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		uart_putchar(' ', stream);
    1b26:	80 e2       	ldi	r24, 0x20	; 32
    1b28:	b7 01       	movw	r22, r14
    1b2a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		uart_putchar('\b', stream);
    1b2e:	88 e0       	ldi	r24, 0x08	; 8
    1b30:	b7 01       	movw	r22, r14
    1b32:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		cp--;
    1b36:	01 50       	subi	r16, 0x01	; 1
    1b38:	10 40       	sbci	r17, 0x00	; 0
    1b3a:	9e cf       	rjmp	.-196    	; 0x1a78 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1b3c:	8d e0       	ldi	r24, 0x0D	; 13
    1b3e:	b7 01       	movw	r22, r14
    1b40:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
    1b44:	c4 ea       	ldi	r28, 0xA4	; 164
    1b46:	d1 e0       	ldi	r29, 0x01	; 1
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1b4a:	89 91       	ld	r24, Y+
    1b4c:	b7 01       	movw	r22, r14
    1b4e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1b52:	c0 17       	cp	r28, r16
    1b54:	d1 07       	cpc	r29, r17
    1b56:	c8 f3       	brcs	.-14     	; 0x1b4a <uart_getchar+0xf2>
    1b58:	8f cf       	rjmp	.-226    	; 0x1a78 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1b5a:	88 e0       	ldi	r24, 0x08	; 8
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		uart_putchar(' ', stream);
    1b62:	80 e2       	ldi	r24, 0x20	; 32
    1b64:	b7 01       	movw	r22, r14
    1b66:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		uart_putchar('\b', stream);
    1b6a:	88 e0       	ldi	r24, 0x08	; 8
    1b6c:	b7 01       	movw	r22, r14
    1b6e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		cp--;
    1b72:	01 50       	subi	r16, 0x01	; 1
    1b74:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	04 3a       	cpi	r16, 0xA4	; 164
    1b7a:	18 07       	cpc	r17, r24
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <uart_getchar+0x128>
    1b7e:	68 f7       	brcc	.-38     	; 0x1b5a <uart_getchar+0x102>
    1b80:	7b cf       	rjmp	.-266    	; 0x1a78 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1b82:	88 e0       	ldi	r24, 0x08	; 8
    1b84:	b7 01       	movw	r22, r14
    1b86:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		uart_putchar(' ', stream);
    1b8a:	80 e2       	ldi	r24, 0x20	; 32
    1b8c:	b7 01       	movw	r22, r14
    1b8e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
		uart_putchar('\b', stream);
    1b92:	88 e0       	ldi	r24, 0x08	; 8
    1b94:	b7 01       	movw	r22, r14
    1b96:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <uart_putchar>
    1b9a:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1b9c:	e1 e0       	ldi	r30, 0x01	; 1
    1b9e:	04 3a       	cpi	r16, 0xA4	; 164
    1ba0:	1e 07       	cpc	r17, r30
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <uart_getchar+0x14e>
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <uart_getchar+0x150>
    1ba6:	68 cf       	rjmp	.-304    	; 0x1a78 <uart_getchar+0x20>
    1ba8:	e8 01       	movw	r28, r16
    1baa:	8a 91       	ld	r24, -Y
    1bac:	80 32       	cpi	r24, 0x20	; 32
    1bae:	49 f7       	brne	.-46     	; 0x1b82 <uart_getchar+0x12a>
    1bb0:	63 cf       	rjmp	.-314    	; 0x1a78 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1bb2:	e0 91 a2 01 	lds	r30, 0x01A2
    1bb6:	f0 91 a3 01 	lds	r31, 0x01A3
    1bba:	81 91       	ld	r24, Z+
    1bbc:	f0 93 a3 01 	sts	0x01A3, r31
    1bc0:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    1bc4:	8a 30       	cpi	r24, 0x0A	; 10
    1bc6:	21 f4       	brne	.+8      	; 0x1bd0 <uart_getchar+0x178>
    rxp = 0;
    1bc8:	10 92 a3 01 	sts	0x01A3, r1
    1bcc:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <uart_getchar+0x182>
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
}
    1bda:	c9 01       	movw	r24, r18
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	08 95       	ret

00001bea <__udivmodhi4>:
    1bea:	aa 1b       	sub	r26, r26
    1bec:	bb 1b       	sub	r27, r27
    1bee:	51 e1       	ldi	r21, 0x11	; 17
    1bf0:	07 c0       	rjmp	.+14     	; 0x1c00 <__udivmodhi4_ep>

00001bf2 <__udivmodhi4_loop>:
    1bf2:	aa 1f       	adc	r26, r26
    1bf4:	bb 1f       	adc	r27, r27
    1bf6:	a6 17       	cp	r26, r22
    1bf8:	b7 07       	cpc	r27, r23
    1bfa:	10 f0       	brcs	.+4      	; 0x1c00 <__udivmodhi4_ep>
    1bfc:	a6 1b       	sub	r26, r22
    1bfe:	b7 0b       	sbc	r27, r23

00001c00 <__udivmodhi4_ep>:
    1c00:	88 1f       	adc	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	5a 95       	dec	r21
    1c06:	a9 f7       	brne	.-22     	; 0x1bf2 <__udivmodhi4_loop>
    1c08:	80 95       	com	r24
    1c0a:	90 95       	com	r25
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	08 95       	ret

00001c12 <__divmodhi4>:
    1c12:	97 fb       	bst	r25, 7
    1c14:	09 2e       	mov	r0, r25
    1c16:	07 26       	eor	r0, r23
    1c18:	0a d0       	rcall	.+20     	; 0x1c2e <__divmodhi4_neg1>
    1c1a:	77 fd       	sbrc	r23, 7
    1c1c:	04 d0       	rcall	.+8      	; 0x1c26 <__divmodhi4_neg2>
    1c1e:	e5 df       	rcall	.-54     	; 0x1bea <__udivmodhi4>
    1c20:	06 d0       	rcall	.+12     	; 0x1c2e <__divmodhi4_neg1>
    1c22:	00 20       	and	r0, r0
    1c24:	1a f4       	brpl	.+6      	; 0x1c2c <__divmodhi4_exit>

00001c26 <__divmodhi4_neg2>:
    1c26:	70 95       	com	r23
    1c28:	61 95       	neg	r22
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c2c <__divmodhi4_exit>:
    1c2c:	08 95       	ret

00001c2e <__divmodhi4_neg1>:
    1c2e:	f6 f7       	brtc	.-4      	; 0x1c2c <__divmodhi4_exit>
    1c30:	90 95       	com	r25
    1c32:	81 95       	neg	r24
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	08 95       	ret

00001c38 <strcpy>:
    1c38:	fb 01       	movw	r30, r22
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	01 90       	ld	r0, Z+
    1c3e:	0d 92       	st	X+, r0
    1c40:	00 20       	and	r0, r0
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <strcpy+0x4>
    1c44:	08 95       	ret

00001c46 <fputs>:
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	7c 01       	movw	r14, r24
    1c54:	8b 01       	movw	r16, r22
    1c56:	db 01       	movw	r26, r22
    1c58:	13 96       	adiw	r26, 0x03	; 3
    1c5a:	8c 91       	ld	r24, X
    1c5c:	81 fd       	sbrc	r24, 1
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <fputs+0x20>
    1c60:	cf ef       	ldi	r28, 0xFF	; 255
    1c62:	df ef       	ldi	r29, 0xFF	; 255
    1c64:	13 c0       	rjmp	.+38     	; 0x1c8c <fputs+0x46>
    1c66:	c0 e0       	ldi	r28, 0x00	; 0
    1c68:	d0 e0       	ldi	r29, 0x00	; 0
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <fputs+0x3c>
    1c6c:	d8 01       	movw	r26, r16
    1c6e:	18 96       	adiw	r26, 0x08	; 8
    1c70:	ed 91       	ld	r30, X+
    1c72:	fc 91       	ld	r31, X
    1c74:	19 97       	sbiw	r26, 0x09	; 9
    1c76:	b8 01       	movw	r22, r16
    1c78:	09 95       	icall
    1c7a:	89 2b       	or	r24, r25
    1c7c:	11 f0       	breq	.+4      	; 0x1c82 <fputs+0x3c>
    1c7e:	cf ef       	ldi	r28, 0xFF	; 255
    1c80:	df ef       	ldi	r29, 0xFF	; 255
    1c82:	f7 01       	movw	r30, r14
    1c84:	81 91       	ld	r24, Z+
    1c86:	7f 01       	movw	r14, r30
    1c88:	88 23       	and	r24, r24
    1c8a:	81 f7       	brne	.-32     	; 0x1c6c <fputs+0x26>
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	ff 90       	pop	r15
    1c98:	ef 90       	pop	r14
    1c9a:	08 95       	ret

00001c9c <fscanf>:
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	9e 01       	movw	r18, r28
    1ca6:	27 5f       	subi	r18, 0xF7	; 247
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	a9 01       	movw	r20, r18
    1cb4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <vfscanf>
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <sprintf>:
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	2e 97       	sbiw	r28, 0x0e	; 14
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	0d 89       	ldd	r16, Y+21	; 0x15
    1cd8:	1e 89       	ldd	r17, Y+22	; 0x16
    1cda:	86 e0       	ldi	r24, 0x06	; 6
    1cdc:	8c 83       	std	Y+4, r24	; 0x04
    1cde:	1a 83       	std	Y+2, r17	; 0x02
    1ce0:	09 83       	std	Y+1, r16	; 0x01
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f e7       	ldi	r25, 0x7F	; 127
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	9e 01       	movw	r18, r28
    1cec:	27 5e       	subi	r18, 0xE7	; 231
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	6f 89       	ldd	r22, Y+23	; 0x17
    1cf6:	78 8d       	ldd	r23, Y+24	; 0x18
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <vfprintf>
    1cfe:	2f 81       	ldd	r18, Y+7	; 0x07
    1d00:	38 85       	ldd	r19, Y+8	; 0x08
    1d02:	02 0f       	add	r16, r18
    1d04:	13 1f       	adc	r17, r19
    1d06:	f8 01       	movw	r30, r16
    1d08:	10 82       	st	Z, r1
    1d0a:	2e 96       	adiw	r28, 0x0e	; 14
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret

00001d20 <sscanf>:
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	2e 97       	sbiw	r28, 0x0e	; 14
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	85 e0       	ldi	r24, 0x05	; 5
    1d36:	8c 83       	std	Y+4, r24	; 0x04
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	9e 01       	movw	r18, r28
    1d42:	29 5e       	subi	r18, 0xE9	; 233
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	ce 01       	movw	r24, r28
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4e:	a9 01       	movw	r20, r18
    1d50:	0e 94 68 12 	call	0x24d0	; 0x24d0 <vfscanf>
    1d54:	2e 96       	adiw	r28, 0x0e	; 14
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <vfprintf>:
    1d66:	2f 92       	push	r2
    1d68:	3f 92       	push	r3
    1d6a:	4f 92       	push	r4
    1d6c:	5f 92       	push	r5
    1d6e:	6f 92       	push	r6
    1d70:	7f 92       	push	r7
    1d72:	8f 92       	push	r8
    1d74:	9f 92       	push	r9
    1d76:	af 92       	push	r10
    1d78:	bf 92       	push	r11
    1d7a:	cf 92       	push	r12
    1d7c:	df 92       	push	r13
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	2b 97       	sbiw	r28, 0x0b	; 11
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	3c 01       	movw	r6, r24
    1d9c:	2b 01       	movw	r4, r22
    1d9e:	5a 01       	movw	r10, r20
    1da0:	fc 01       	movw	r30, r24
    1da2:	17 82       	std	Z+7, r1	; 0x07
    1da4:	16 82       	std	Z+6, r1	; 0x06
    1da6:	83 81       	ldd	r24, Z+3	; 0x03
    1da8:	81 fd       	sbrc	r24, 1
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <vfprintf+0x4c>
    1dac:	6f ef       	ldi	r22, 0xFF	; 255
    1dae:	7f ef       	ldi	r23, 0xFF	; 255
    1db0:	c6 c1       	rjmp	.+908    	; 0x213e <vfprintf+0x3d8>
    1db2:	9a e0       	ldi	r25, 0x0A	; 10
    1db4:	89 2e       	mov	r8, r25
    1db6:	1e 01       	movw	r2, r28
    1db8:	08 94       	sec
    1dba:	21 1c       	adc	r2, r1
    1dbc:	31 1c       	adc	r3, r1
    1dbe:	f3 01       	movw	r30, r6
    1dc0:	23 81       	ldd	r18, Z+3	; 0x03
    1dc2:	f2 01       	movw	r30, r4
    1dc4:	23 fd       	sbrc	r18, 3
    1dc6:	85 91       	lpm	r24, Z+
    1dc8:	23 ff       	sbrs	r18, 3
    1dca:	81 91       	ld	r24, Z+
    1dcc:	2f 01       	movw	r4, r30
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <vfprintf+0x6e>
    1dd2:	b2 c1       	rjmp	.+868    	; 0x2138 <vfprintf+0x3d2>
    1dd4:	85 32       	cpi	r24, 0x25	; 37
    1dd6:	39 f4       	brne	.+14     	; 0x1de6 <vfprintf+0x80>
    1dd8:	23 fd       	sbrc	r18, 3
    1dda:	85 91       	lpm	r24, Z+
    1ddc:	23 ff       	sbrs	r18, 3
    1dde:	81 91       	ld	r24, Z+
    1de0:	2f 01       	movw	r4, r30
    1de2:	85 32       	cpi	r24, 0x25	; 37
    1de4:	29 f4       	brne	.+10     	; 0x1df0 <vfprintf+0x8a>
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b3 01       	movw	r22, r6
    1dea:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    1dee:	e7 cf       	rjmp	.-50     	; 0x1dbe <vfprintf+0x58>
    1df0:	98 2f       	mov	r25, r24
    1df2:	ff 24       	eor	r15, r15
    1df4:	ee 24       	eor	r14, r14
    1df6:	99 24       	eor	r9, r9
    1df8:	ff e1       	ldi	r31, 0x1F	; 31
    1dfa:	ff 15       	cp	r31, r15
    1dfc:	d0 f0       	brcs	.+52     	; 0x1e32 <vfprintf+0xcc>
    1dfe:	9b 32       	cpi	r25, 0x2B	; 43
    1e00:	69 f0       	breq	.+26     	; 0x1e1c <vfprintf+0xb6>
    1e02:	9c 32       	cpi	r25, 0x2C	; 44
    1e04:	28 f4       	brcc	.+10     	; 0x1e10 <vfprintf+0xaa>
    1e06:	90 32       	cpi	r25, 0x20	; 32
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <vfprintf+0xba>
    1e0a:	93 32       	cpi	r25, 0x23	; 35
    1e0c:	91 f4       	brne	.+36     	; 0x1e32 <vfprintf+0xcc>
    1e0e:	0e c0       	rjmp	.+28     	; 0x1e2c <vfprintf+0xc6>
    1e10:	9d 32       	cpi	r25, 0x2D	; 45
    1e12:	49 f0       	breq	.+18     	; 0x1e26 <vfprintf+0xc0>
    1e14:	90 33       	cpi	r25, 0x30	; 48
    1e16:	69 f4       	brne	.+26     	; 0x1e32 <vfprintf+0xcc>
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	24 c0       	rjmp	.+72     	; 0x1e64 <vfprintf+0xfe>
    1e1c:	52 e0       	ldi	r21, 0x02	; 2
    1e1e:	f5 2a       	or	r15, r21
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	f8 2a       	or	r15, r24
    1e24:	28 c0       	rjmp	.+80     	; 0x1e76 <vfprintf+0x110>
    1e26:	98 e0       	ldi	r25, 0x08	; 8
    1e28:	f9 2a       	or	r15, r25
    1e2a:	25 c0       	rjmp	.+74     	; 0x1e76 <vfprintf+0x110>
    1e2c:	e0 e1       	ldi	r30, 0x10	; 16
    1e2e:	fe 2a       	or	r15, r30
    1e30:	22 c0       	rjmp	.+68     	; 0x1e76 <vfprintf+0x110>
    1e32:	f7 fc       	sbrc	r15, 7
    1e34:	29 c0       	rjmp	.+82     	; 0x1e88 <vfprintf+0x122>
    1e36:	89 2f       	mov	r24, r25
    1e38:	80 53       	subi	r24, 0x30	; 48
    1e3a:	8a 30       	cpi	r24, 0x0A	; 10
    1e3c:	70 f4       	brcc	.+28     	; 0x1e5a <vfprintf+0xf4>
    1e3e:	f6 fe       	sbrs	r15, 6
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <vfprintf+0xe6>
    1e42:	98 9c       	mul	r9, r8
    1e44:	90 2c       	mov	r9, r0
    1e46:	11 24       	eor	r1, r1
    1e48:	98 0e       	add	r9, r24
    1e4a:	15 c0       	rjmp	.+42     	; 0x1e76 <vfprintf+0x110>
    1e4c:	e8 9c       	mul	r14, r8
    1e4e:	e0 2c       	mov	r14, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	e8 0e       	add	r14, r24
    1e54:	f0 e2       	ldi	r31, 0x20	; 32
    1e56:	ff 2a       	or	r15, r31
    1e58:	0e c0       	rjmp	.+28     	; 0x1e76 <vfprintf+0x110>
    1e5a:	9e 32       	cpi	r25, 0x2E	; 46
    1e5c:	29 f4       	brne	.+10     	; 0x1e68 <vfprintf+0x102>
    1e5e:	f6 fc       	sbrc	r15, 6
    1e60:	6b c1       	rjmp	.+726    	; 0x2138 <vfprintf+0x3d2>
    1e62:	40 e4       	ldi	r20, 0x40	; 64
    1e64:	f4 2a       	or	r15, r20
    1e66:	07 c0       	rjmp	.+14     	; 0x1e76 <vfprintf+0x110>
    1e68:	9c 36       	cpi	r25, 0x6C	; 108
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <vfprintf+0x10c>
    1e6c:	50 e8       	ldi	r21, 0x80	; 128
    1e6e:	f5 2a       	or	r15, r21
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <vfprintf+0x110>
    1e72:	98 36       	cpi	r25, 0x68	; 104
    1e74:	49 f4       	brne	.+18     	; 0x1e88 <vfprintf+0x122>
    1e76:	f2 01       	movw	r30, r4
    1e78:	23 fd       	sbrc	r18, 3
    1e7a:	95 91       	lpm	r25, Z+
    1e7c:	23 ff       	sbrs	r18, 3
    1e7e:	91 91       	ld	r25, Z+
    1e80:	2f 01       	movw	r4, r30
    1e82:	99 23       	and	r25, r25
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <vfprintf+0x122>
    1e86:	b8 cf       	rjmp	.-144    	; 0x1df8 <vfprintf+0x92>
    1e88:	89 2f       	mov	r24, r25
    1e8a:	85 54       	subi	r24, 0x45	; 69
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	18 f0       	brcs	.+6      	; 0x1e96 <vfprintf+0x130>
    1e90:	80 52       	subi	r24, 0x20	; 32
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	38 f4       	brcc	.+14     	; 0x1ea4 <vfprintf+0x13e>
    1e96:	44 e0       	ldi	r20, 0x04	; 4
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	a4 0e       	add	r10, r20
    1e9c:	b5 1e       	adc	r11, r21
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	59 83       	std	Y+1, r21	; 0x01
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <vfprintf+0x15c>
    1ea4:	93 36       	cpi	r25, 0x63	; 99
    1ea6:	31 f0       	breq	.+12     	; 0x1eb4 <vfprintf+0x14e>
    1ea8:	93 37       	cpi	r25, 0x73	; 115
    1eaa:	79 f0       	breq	.+30     	; 0x1eca <vfprintf+0x164>
    1eac:	93 35       	cpi	r25, 0x53	; 83
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <vfprintf+0x14c>
    1eb0:	56 c0       	rjmp	.+172    	; 0x1f5e <vfprintf+0x1f8>
    1eb2:	20 c0       	rjmp	.+64     	; 0x1ef4 <vfprintf+0x18e>
    1eb4:	f5 01       	movw	r30, r10
    1eb6:	80 81       	ld	r24, Z
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	42 e0       	ldi	r20, 0x02	; 2
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	a4 0e       	add	r10, r20
    1ec0:	b5 1e       	adc	r11, r21
    1ec2:	61 01       	movw	r12, r2
    1ec4:	01 e0       	ldi	r16, 0x01	; 1
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	12 c0       	rjmp	.+36     	; 0x1eee <vfprintf+0x188>
    1eca:	f5 01       	movw	r30, r10
    1ecc:	c0 80       	ld	r12, Z
    1ece:	d1 80       	ldd	r13, Z+1	; 0x01
    1ed0:	f6 fc       	sbrc	r15, 6
    1ed2:	03 c0       	rjmp	.+6      	; 0x1eda <vfprintf+0x174>
    1ed4:	6f ef       	ldi	r22, 0xFF	; 255
    1ed6:	7f ef       	ldi	r23, 0xFF	; 255
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <vfprintf+0x178>
    1eda:	69 2d       	mov	r22, r9
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	42 e0       	ldi	r20, 0x02	; 2
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	a4 0e       	add	r10, r20
    1ee4:	b5 1e       	adc	r11, r21
    1ee6:	c6 01       	movw	r24, r12
    1ee8:	0e 94 a9 13 	call	0x2752	; 0x2752 <strnlen>
    1eec:	8c 01       	movw	r16, r24
    1eee:	5f e7       	ldi	r21, 0x7F	; 127
    1ef0:	f5 22       	and	r15, r21
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <vfprintf+0x1b6>
    1ef4:	f5 01       	movw	r30, r10
    1ef6:	c0 80       	ld	r12, Z
    1ef8:	d1 80       	ldd	r13, Z+1	; 0x01
    1efa:	f6 fc       	sbrc	r15, 6
    1efc:	03 c0       	rjmp	.+6      	; 0x1f04 <vfprintf+0x19e>
    1efe:	6f ef       	ldi	r22, 0xFF	; 255
    1f00:	7f ef       	ldi	r23, 0xFF	; 255
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <vfprintf+0x1a2>
    1f04:	69 2d       	mov	r22, r9
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	42 e0       	ldi	r20, 0x02	; 2
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	a4 0e       	add	r10, r20
    1f0e:	b5 1e       	adc	r11, r21
    1f10:	c6 01       	movw	r24, r12
    1f12:	0e 94 9e 13 	call	0x273c	; 0x273c <strnlen_P>
    1f16:	8c 01       	movw	r16, r24
    1f18:	50 e8       	ldi	r21, 0x80	; 128
    1f1a:	f5 2a       	or	r15, r21
    1f1c:	f3 fe       	sbrs	r15, 3
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <vfprintf+0x1c8>
    1f20:	1a c0       	rjmp	.+52     	; 0x1f56 <vfprintf+0x1f0>
    1f22:	80 e2       	ldi	r24, 0x20	; 32
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	b3 01       	movw	r22, r6
    1f28:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    1f2c:	ea 94       	dec	r14
    1f2e:	8e 2d       	mov	r24, r14
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	08 17       	cp	r16, r24
    1f34:	19 07       	cpc	r17, r25
    1f36:	a8 f3       	brcs	.-22     	; 0x1f22 <vfprintf+0x1bc>
    1f38:	0e c0       	rjmp	.+28     	; 0x1f56 <vfprintf+0x1f0>
    1f3a:	f6 01       	movw	r30, r12
    1f3c:	f7 fc       	sbrc	r15, 7
    1f3e:	85 91       	lpm	r24, Z+
    1f40:	f7 fe       	sbrs	r15, 7
    1f42:	81 91       	ld	r24, Z+
    1f44:	6f 01       	movw	r12, r30
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	b3 01       	movw	r22, r6
    1f4a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    1f4e:	e1 10       	cpse	r14, r1
    1f50:	ea 94       	dec	r14
    1f52:	01 50       	subi	r16, 0x01	; 1
    1f54:	10 40       	sbci	r17, 0x00	; 0
    1f56:	01 15       	cp	r16, r1
    1f58:	11 05       	cpc	r17, r1
    1f5a:	79 f7       	brne	.-34     	; 0x1f3a <vfprintf+0x1d4>
    1f5c:	ea c0       	rjmp	.+468    	; 0x2132 <vfprintf+0x3cc>
    1f5e:	94 36       	cpi	r25, 0x64	; 100
    1f60:	11 f0       	breq	.+4      	; 0x1f66 <vfprintf+0x200>
    1f62:	99 36       	cpi	r25, 0x69	; 105
    1f64:	69 f5       	brne	.+90     	; 0x1fc0 <vfprintf+0x25a>
    1f66:	f7 fe       	sbrs	r15, 7
    1f68:	08 c0       	rjmp	.+16     	; 0x1f7a <vfprintf+0x214>
    1f6a:	f5 01       	movw	r30, r10
    1f6c:	20 81       	ld	r18, Z
    1f6e:	31 81       	ldd	r19, Z+1	; 0x01
    1f70:	42 81       	ldd	r20, Z+2	; 0x02
    1f72:	53 81       	ldd	r21, Z+3	; 0x03
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0a c0       	rjmp	.+20     	; 0x1f8e <vfprintf+0x228>
    1f7a:	f5 01       	movw	r30, r10
    1f7c:	80 81       	ld	r24, Z
    1f7e:	91 81       	ldd	r25, Z+1	; 0x01
    1f80:	9c 01       	movw	r18, r24
    1f82:	44 27       	eor	r20, r20
    1f84:	37 fd       	sbrc	r19, 7
    1f86:	40 95       	com	r20
    1f88:	54 2f       	mov	r21, r20
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a8 0e       	add	r10, r24
    1f90:	b9 1e       	adc	r11, r25
    1f92:	9f e6       	ldi	r25, 0x6F	; 111
    1f94:	f9 22       	and	r15, r25
    1f96:	57 ff       	sbrs	r21, 7
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <vfprintf+0x246>
    1f9a:	50 95       	com	r21
    1f9c:	40 95       	com	r20
    1f9e:	30 95       	com	r19
    1fa0:	21 95       	neg	r18
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa8:	e0 e8       	ldi	r30, 0x80	; 128
    1faa:	fe 2a       	or	r15, r30
    1fac:	ca 01       	movw	r24, r20
    1fae:	b9 01       	movw	r22, r18
    1fb0:	a1 01       	movw	r20, r2
    1fb2:	2a e0       	ldi	r18, 0x0A	; 10
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	0e 94 3c 14 	call	0x2878	; 0x2878 <__ultoa_invert>
    1fba:	d8 2e       	mov	r13, r24
    1fbc:	d2 18       	sub	r13, r2
    1fbe:	40 c0       	rjmp	.+128    	; 0x2040 <vfprintf+0x2da>
    1fc0:	95 37       	cpi	r25, 0x75	; 117
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <vfprintf+0x268>
    1fc4:	1f 2d       	mov	r17, r15
    1fc6:	1f 7e       	andi	r17, 0xEF	; 239
    1fc8:	2a e0       	ldi	r18, 0x0A	; 10
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	1d c0       	rjmp	.+58     	; 0x2008 <vfprintf+0x2a2>
    1fce:	1f 2d       	mov	r17, r15
    1fd0:	19 7f       	andi	r17, 0xF9	; 249
    1fd2:	9f 36       	cpi	r25, 0x6F	; 111
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <vfprintf+0x288>
    1fd6:	90 37       	cpi	r25, 0x70	; 112
    1fd8:	20 f4       	brcc	.+8      	; 0x1fe2 <vfprintf+0x27c>
    1fda:	98 35       	cpi	r25, 0x58	; 88
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <vfprintf+0x27a>
    1fde:	ac c0       	rjmp	.+344    	; 0x2138 <vfprintf+0x3d2>
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <vfprintf+0x29a>
    1fe2:	90 37       	cpi	r25, 0x70	; 112
    1fe4:	39 f0       	breq	.+14     	; 0x1ff4 <vfprintf+0x28e>
    1fe6:	98 37       	cpi	r25, 0x78	; 120
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <vfprintf+0x286>
    1fea:	a6 c0       	rjmp	.+332    	; 0x2138 <vfprintf+0x3d2>
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <vfprintf+0x290>
    1fee:	28 e0       	ldi	r18, 0x08	; 8
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	0a c0       	rjmp	.+20     	; 0x2008 <vfprintf+0x2a2>
    1ff4:	10 61       	ori	r17, 0x10	; 16
    1ff6:	14 fd       	sbrc	r17, 4
    1ff8:	14 60       	ori	r17, 0x04	; 4
    1ffa:	20 e1       	ldi	r18, 0x10	; 16
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <vfprintf+0x2a2>
    2000:	14 fd       	sbrc	r17, 4
    2002:	16 60       	ori	r17, 0x06	; 6
    2004:	20 e1       	ldi	r18, 0x10	; 16
    2006:	32 e0       	ldi	r19, 0x02	; 2
    2008:	17 ff       	sbrs	r17, 7
    200a:	08 c0       	rjmp	.+16     	; 0x201c <vfprintf+0x2b6>
    200c:	f5 01       	movw	r30, r10
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	44 e0       	ldi	r20, 0x04	; 4
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	08 c0       	rjmp	.+16     	; 0x202c <vfprintf+0x2c6>
    201c:	f5 01       	movw	r30, r10
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	bc 01       	movw	r22, r24
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	42 e0       	ldi	r20, 0x02	; 2
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	a4 0e       	add	r10, r20
    202e:	b5 1e       	adc	r11, r21
    2030:	a1 01       	movw	r20, r2
    2032:	0e 94 3c 14 	call	0x2878	; 0x2878 <__ultoa_invert>
    2036:	d8 2e       	mov	r13, r24
    2038:	d2 18       	sub	r13, r2
    203a:	8f e7       	ldi	r24, 0x7F	; 127
    203c:	f8 2e       	mov	r15, r24
    203e:	f1 22       	and	r15, r17
    2040:	f6 fe       	sbrs	r15, 6
    2042:	0b c0       	rjmp	.+22     	; 0x205a <vfprintf+0x2f4>
    2044:	5e ef       	ldi	r21, 0xFE	; 254
    2046:	f5 22       	and	r15, r21
    2048:	d9 14       	cp	r13, r9
    204a:	38 f4       	brcc	.+14     	; 0x205a <vfprintf+0x2f4>
    204c:	f4 fe       	sbrs	r15, 4
    204e:	07 c0       	rjmp	.+14     	; 0x205e <vfprintf+0x2f8>
    2050:	f2 fc       	sbrc	r15, 2
    2052:	05 c0       	rjmp	.+10     	; 0x205e <vfprintf+0x2f8>
    2054:	8f ee       	ldi	r24, 0xEF	; 239
    2056:	f8 22       	and	r15, r24
    2058:	02 c0       	rjmp	.+4      	; 0x205e <vfprintf+0x2f8>
    205a:	1d 2d       	mov	r17, r13
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <vfprintf+0x2fa>
    205e:	19 2d       	mov	r17, r9
    2060:	f4 fe       	sbrs	r15, 4
    2062:	0d c0       	rjmp	.+26     	; 0x207e <vfprintf+0x318>
    2064:	fe 01       	movw	r30, r28
    2066:	ed 0d       	add	r30, r13
    2068:	f1 1d       	adc	r31, r1
    206a:	80 81       	ld	r24, Z
    206c:	80 33       	cpi	r24, 0x30	; 48
    206e:	19 f4       	brne	.+6      	; 0x2076 <vfprintf+0x310>
    2070:	99 ee       	ldi	r25, 0xE9	; 233
    2072:	f9 22       	and	r15, r25
    2074:	08 c0       	rjmp	.+16     	; 0x2086 <vfprintf+0x320>
    2076:	1f 5f       	subi	r17, 0xFF	; 255
    2078:	f2 fe       	sbrs	r15, 2
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <vfprintf+0x320>
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <vfprintf+0x31e>
    207e:	8f 2d       	mov	r24, r15
    2080:	86 78       	andi	r24, 0x86	; 134
    2082:	09 f0       	breq	.+2      	; 0x2086 <vfprintf+0x320>
    2084:	1f 5f       	subi	r17, 0xFF	; 255
    2086:	0f 2d       	mov	r16, r15
    2088:	f3 fc       	sbrc	r15, 3
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <vfprintf+0x34e>
    208c:	f0 fe       	sbrs	r15, 0
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <vfprintf+0x348>
    2090:	1e 15       	cp	r17, r14
    2092:	10 f0       	brcs	.+4      	; 0x2098 <vfprintf+0x332>
    2094:	9d 2c       	mov	r9, r13
    2096:	0b c0       	rjmp	.+22     	; 0x20ae <vfprintf+0x348>
    2098:	9d 2c       	mov	r9, r13
    209a:	9e 0c       	add	r9, r14
    209c:	91 1a       	sub	r9, r17
    209e:	1e 2d       	mov	r17, r14
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <vfprintf+0x348>
    20a2:	80 e2       	ldi	r24, 0x20	; 32
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	b3 01       	movw	r22, r6
    20a8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    20ac:	1f 5f       	subi	r17, 0xFF	; 255
    20ae:	1e 15       	cp	r17, r14
    20b0:	c0 f3       	brcs	.-16     	; 0x20a2 <vfprintf+0x33c>
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <vfprintf+0x356>
    20b4:	1e 15       	cp	r17, r14
    20b6:	10 f4       	brcc	.+4      	; 0x20bc <vfprintf+0x356>
    20b8:	e1 1a       	sub	r14, r17
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <vfprintf+0x358>
    20bc:	ee 24       	eor	r14, r14
    20be:	04 ff       	sbrs	r16, 4
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <vfprintf+0x37a>
    20c2:	80 e3       	ldi	r24, 0x30	; 48
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	b3 01       	movw	r22, r6
    20c8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    20cc:	02 ff       	sbrs	r16, 2
    20ce:	1d c0       	rjmp	.+58     	; 0x210a <vfprintf+0x3a4>
    20d0:	01 fd       	sbrc	r16, 1
    20d2:	03 c0       	rjmp	.+6      	; 0x20da <vfprintf+0x374>
    20d4:	88 e7       	ldi	r24, 0x78	; 120
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e c0       	rjmp	.+28     	; 0x20f6 <vfprintf+0x390>
    20da:	88 e5       	ldi	r24, 0x58	; 88
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	0b c0       	rjmp	.+22     	; 0x20f6 <vfprintf+0x390>
    20e0:	80 2f       	mov	r24, r16
    20e2:	86 78       	andi	r24, 0x86	; 134
    20e4:	91 f0       	breq	.+36     	; 0x210a <vfprintf+0x3a4>
    20e6:	01 ff       	sbrs	r16, 1
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <vfprintf+0x388>
    20ea:	8b e2       	ldi	r24, 0x2B	; 43
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <vfprintf+0x38a>
    20ee:	80 e2       	ldi	r24, 0x20	; 32
    20f0:	f7 fc       	sbrc	r15, 7
    20f2:	8d e2       	ldi	r24, 0x2D	; 45
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	b3 01       	movw	r22, r6
    20f8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    20fc:	06 c0       	rjmp	.+12     	; 0x210a <vfprintf+0x3a4>
    20fe:	80 e3       	ldi	r24, 0x30	; 48
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	b3 01       	movw	r22, r6
    2104:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    2108:	9a 94       	dec	r9
    210a:	d9 14       	cp	r13, r9
    210c:	c0 f3       	brcs	.-16     	; 0x20fe <vfprintf+0x398>
    210e:	da 94       	dec	r13
    2110:	f1 01       	movw	r30, r2
    2112:	ed 0d       	add	r30, r13
    2114:	f1 1d       	adc	r31, r1
    2116:	80 81       	ld	r24, Z
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	b3 01       	movw	r22, r6
    211c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    2120:	dd 20       	and	r13, r13
    2122:	a9 f7       	brne	.-22     	; 0x210e <vfprintf+0x3a8>
    2124:	06 c0       	rjmp	.+12     	; 0x2132 <vfprintf+0x3cc>
    2126:	80 e2       	ldi	r24, 0x20	; 32
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	b3 01       	movw	r22, r6
    212c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <fputc>
    2130:	ea 94       	dec	r14
    2132:	ee 20       	and	r14, r14
    2134:	c1 f7       	brne	.-16     	; 0x2126 <vfprintf+0x3c0>
    2136:	43 ce       	rjmp	.-890    	; 0x1dbe <vfprintf+0x58>
    2138:	f3 01       	movw	r30, r6
    213a:	66 81       	ldd	r22, Z+6	; 0x06
    213c:	77 81       	ldd	r23, Z+7	; 0x07
    213e:	cb 01       	movw	r24, r22
    2140:	2b 96       	adiw	r28, 0x0b	; 11
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	cf 90       	pop	r12
    215c:	bf 90       	pop	r11
    215e:	af 90       	pop	r10
    2160:	9f 90       	pop	r9
    2162:	8f 90       	pop	r8
    2164:	7f 90       	pop	r7
    2166:	6f 90       	pop	r6
    2168:	5f 90       	pop	r5
    216a:	4f 90       	pop	r4
    216c:	3f 90       	pop	r3
    216e:	2f 90       	pop	r2
    2170:	08 95       	ret

00002172 <putval>:
    2172:	fc 01       	movw	r30, r24
    2174:	20 fd       	sbrc	r18, 0
    2176:	08 c0       	rjmp	.+16     	; 0x2188 <putval+0x16>
    2178:	23 fd       	sbrc	r18, 3
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <putval+0x14>
    217c:	22 ff       	sbrs	r18, 2
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <putval+0x12>
    2180:	73 83       	std	Z+3, r23	; 0x03
    2182:	62 83       	std	Z+2, r22	; 0x02
    2184:	51 83       	std	Z+1, r21	; 0x01
    2186:	40 83       	st	Z, r20
    2188:	08 95       	ret

0000218a <mulacc>:
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	44 ff       	sbrs	r20, 4
    2194:	02 c0       	rjmp	.+4      	; 0x219a <mulacc+0x10>
    2196:	33 e0       	ldi	r19, 0x03	; 3
    2198:	11 c0       	rjmp	.+34     	; 0x21bc <mulacc+0x32>
    219a:	46 ff       	sbrs	r20, 6
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <mulacc+0x18>
    219e:	34 e0       	ldi	r19, 0x04	; 4
    21a0:	0d c0       	rjmp	.+26     	; 0x21bc <mulacc+0x32>
    21a2:	db 01       	movw	r26, r22
    21a4:	fc 01       	movw	r30, r24
    21a6:	aa 0f       	add	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	ee 1f       	adc	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	10 94       	com	r1
    21b0:	d1 f7       	brne	.-12     	; 0x21a6 <mulacc+0x1c>
    21b2:	6a 0f       	add	r22, r26
    21b4:	7b 1f       	adc	r23, r27
    21b6:	8e 1f       	adc	r24, r30
    21b8:	9f 1f       	adc	r25, r31
    21ba:	31 e0       	ldi	r19, 0x01	; 1
    21bc:	66 0f       	add	r22, r22
    21be:	77 1f       	adc	r23, r23
    21c0:	88 1f       	adc	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	31 50       	subi	r19, 0x01	; 1
    21c6:	d1 f7       	brne	.-12     	; 0x21bc <mulacc+0x32>
    21c8:	7b 01       	movw	r14, r22
    21ca:	8c 01       	movw	r16, r24
    21cc:	e2 0e       	add	r14, r18
    21ce:	f1 1c       	adc	r15, r1
    21d0:	01 1d       	adc	r16, r1
    21d2:	11 1d       	adc	r17, r1
    21d4:	a8 01       	movw	r20, r16
    21d6:	97 01       	movw	r18, r14
    21d8:	b7 01       	movw	r22, r14
    21da:	ca 01       	movw	r24, r20
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	08 95       	ret

000021e6 <skip_spaces>:
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	8c 01       	movw	r16, r24
    21f0:	c8 01       	movw	r24, r16
    21f2:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    21f6:	ec 01       	movw	r28, r24
    21f8:	97 fd       	sbrc	r25, 7
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <skip_spaces+0x26>
    21fc:	0e 94 8b 13 	call	0x2716	; 0x2716 <isspace>
    2200:	89 2b       	or	r24, r25
    2202:	b1 f7       	brne	.-20     	; 0x21f0 <skip_spaces+0xa>
    2204:	ce 01       	movw	r24, r28
    2206:	b8 01       	movw	r22, r16
    2208:	0e 94 22 14 	call	0x2844	; 0x2844 <ungetc>
    220c:	ce 01       	movw	r24, r28
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	1f 91       	pop	r17
    2214:	0f 91       	pop	r16
    2216:	08 95       	ret

00002218 <conv_int>:
    2218:	af 92       	push	r10
    221a:	bf 92       	push	r11
    221c:	cf 92       	push	r12
    221e:	df 92       	push	r13
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	ec 01       	movw	r28, r24
    222e:	c6 2e       	mov	r12, r22
    2230:	5a 01       	movw	r10, r20
    2232:	12 2f       	mov	r17, r18
    2234:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2238:	ac 01       	movw	r20, r24
    223a:	8b 32       	cpi	r24, 0x2B	; 43
    223c:	19 f0       	breq	.+6      	; 0x2244 <conv_int+0x2c>
    223e:	8d 32       	cpi	r24, 0x2D	; 45
    2240:	51 f4       	brne	.+20     	; 0x2256 <conv_int+0x3e>
    2242:	10 68       	ori	r17, 0x80	; 128
    2244:	ca 94       	dec	r12
    2246:	09 f4       	brne	.+2      	; 0x224a <conv_int+0x32>
    2248:	6d c0       	rjmp	.+218    	; 0x2324 <conv_int+0x10c>
    224a:	ce 01       	movw	r24, r28
    224c:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2250:	ac 01       	movw	r20, r24
    2252:	97 fd       	sbrc	r25, 7
    2254:	67 c0       	rjmp	.+206    	; 0x2324 <conv_int+0x10c>
    2256:	6d ef       	ldi	r22, 0xFD	; 253
    2258:	d6 2e       	mov	r13, r22
    225a:	d1 22       	and	r13, r17
    225c:	8d 2d       	mov	r24, r13
    225e:	80 73       	andi	r24, 0x30	; 48
    2260:	01 f5       	brne	.+64     	; 0x22a2 <conv_int+0x8a>
    2262:	40 33       	cpi	r20, 0x30	; 48
    2264:	f1 f4       	brne	.+60     	; 0x22a2 <conv_int+0x8a>
    2266:	ca 94       	dec	r12
    2268:	09 f4       	brne	.+2      	; 0x226c <conv_int+0x54>
    226a:	47 c0       	rjmp	.+142    	; 0x22fa <conv_int+0xe2>
    226c:	ce 01       	movw	r24, r28
    226e:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2272:	ac 01       	movw	r20, r24
    2274:	97 fd       	sbrc	r25, 7
    2276:	41 c0       	rjmp	.+130    	; 0x22fa <conv_int+0xe2>
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	d8 2a       	or	r13, r24
    227c:	48 37       	cpi	r20, 0x78	; 120
    227e:	11 f0       	breq	.+4      	; 0x2284 <conv_int+0x6c>
    2280:	48 35       	cpi	r20, 0x58	; 88
    2282:	59 f4       	brne	.+22     	; 0x229a <conv_int+0x82>
    2284:	80 e4       	ldi	r24, 0x40	; 64
    2286:	d8 2a       	or	r13, r24
    2288:	ca 94       	dec	r12
    228a:	b9 f1       	breq	.+110    	; 0x22fa <conv_int+0xe2>
    228c:	ce 01       	movw	r24, r28
    228e:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2292:	ac 01       	movw	r20, r24
    2294:	99 23       	and	r25, r25
    2296:	2c f4       	brge	.+10     	; 0x22a2 <conv_int+0x8a>
    2298:	30 c0       	rjmp	.+96     	; 0x22fa <conv_int+0xe2>
    229a:	d6 fc       	sbrc	r13, 6
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <conv_int+0x8a>
    229e:	80 e1       	ldi	r24, 0x10	; 16
    22a0:	d8 2a       	or	r13, r24
    22a2:	ee 24       	eor	r14, r14
    22a4:	ff 24       	eor	r15, r15
    22a6:	87 01       	movw	r16, r14
    22a8:	24 2f       	mov	r18, r20
    22aa:	20 53       	subi	r18, 0x30	; 48
    22ac:	28 30       	cpi	r18, 0x08	; 8
    22ae:	88 f0       	brcs	.+34     	; 0x22d2 <conv_int+0xba>
    22b0:	d4 fc       	sbrc	r13, 4
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <conv_int+0xae>
    22b4:	2a 30       	cpi	r18, 0x0A	; 10
    22b6:	68 f0       	brcs	.+26     	; 0x22d2 <conv_int+0xba>
    22b8:	d6 fe       	sbrs	r13, 6
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <conv_int+0xae>
    22bc:	2f 7d       	andi	r18, 0xDF	; 223
    22be:	82 2f       	mov	r24, r18
    22c0:	81 51       	subi	r24, 0x11	; 17
    22c2:	86 30       	cpi	r24, 0x06	; 6
    22c4:	28 f0       	brcs	.+10     	; 0x22d0 <conv_int+0xb8>
    22c6:	ca 01       	movw	r24, r20
    22c8:	be 01       	movw	r22, r28
    22ca:	0e 94 22 14 	call	0x2844	; 0x2844 <ungetc>
    22ce:	12 c0       	rjmp	.+36     	; 0x22f4 <conv_int+0xdc>
    22d0:	27 50       	subi	r18, 0x07	; 7
    22d2:	c8 01       	movw	r24, r16
    22d4:	b7 01       	movw	r22, r14
    22d6:	4d 2d       	mov	r20, r13
    22d8:	0e 94 c5 10 	call	0x218a	; 0x218a <mulacc>
    22dc:	7b 01       	movw	r14, r22
    22de:	8c 01       	movw	r16, r24
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	d8 2a       	or	r13, r24
    22e4:	ca 94       	dec	r12
    22e6:	61 f0       	breq	.+24     	; 0x2300 <conv_int+0xe8>
    22e8:	ce 01       	movw	r24, r28
    22ea:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    22ee:	ac 01       	movw	r20, r24
    22f0:	97 ff       	sbrs	r25, 7
    22f2:	da cf       	rjmp	.-76     	; 0x22a8 <conv_int+0x90>
    22f4:	d1 fc       	sbrc	r13, 1
    22f6:	04 c0       	rjmp	.+8      	; 0x2300 <conv_int+0xe8>
    22f8:	15 c0       	rjmp	.+42     	; 0x2324 <conv_int+0x10c>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	d7 fe       	sbrs	r13, 7
    2302:	08 c0       	rjmp	.+16     	; 0x2314 <conv_int+0xfc>
    2304:	10 95       	com	r17
    2306:	00 95       	com	r16
    2308:	f0 94       	com	r15
    230a:	e0 94       	com	r14
    230c:	e1 1c       	adc	r14, r1
    230e:	f1 1c       	adc	r15, r1
    2310:	01 1d       	adc	r16, r1
    2312:	11 1d       	adc	r17, r1
    2314:	c5 01       	movw	r24, r10
    2316:	b8 01       	movw	r22, r16
    2318:	a7 01       	movw	r20, r14
    231a:	2d 2d       	mov	r18, r13
    231c:	0e 94 b9 10 	call	0x2172	; 0x2172 <putval>
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <conv_int+0x10e>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ff 90       	pop	r15
    2330:	ef 90       	pop	r14
    2332:	df 90       	pop	r13
    2334:	cf 90       	pop	r12
    2336:	bf 90       	pop	r11
    2338:	af 90       	pop	r10
    233a:	08 95       	ret

0000233c <conv_brk>:
    233c:	6f 92       	push	r6
    233e:	7f 92       	push	r7
    2340:	8f 92       	push	r8
    2342:	9f 92       	push	r9
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	a0 97       	sbiw	r28, 0x20	; 32
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	6c 01       	movw	r12, r24
    236a:	a6 2e       	mov	r10, r22
    236c:	8a 01       	movw	r16, r20
    236e:	79 01       	movw	r14, r18
    2370:	fe 01       	movw	r30, r28
    2372:	31 96       	adiw	r30, 0x01	; 1
    2374:	80 e2       	ldi	r24, 0x20	; 32
    2376:	df 01       	movw	r26, r30
    2378:	1d 92       	st	X+, r1
    237a:	8a 95       	dec	r24
    237c:	e9 f7       	brne	.-6      	; 0x2378 <conv_brk+0x3c>
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	4f 01       	movw	r8, r30
    238a:	a1 e0       	ldi	r26, 0x01	; 1
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	f6 01       	movw	r30, r12
    2390:	83 81       	ldd	r24, Z+3	; 0x03
    2392:	f7 01       	movw	r30, r14
    2394:	83 fd       	sbrc	r24, 3
    2396:	25 91       	lpm	r18, Z+
    2398:	83 ff       	sbrs	r24, 3
    239a:	21 91       	ld	r18, Z+
    239c:	7f 01       	movw	r14, r30
    239e:	22 23       	and	r18, r18
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <conv_brk+0x68>
    23a2:	7e c0       	rjmp	.+252    	; 0x24a0 <conv_brk+0x164>
    23a4:	2e 35       	cpi	r18, 0x5E	; 94
    23a6:	19 f4       	brne	.+6      	; 0x23ae <conv_brk+0x72>
    23a8:	41 15       	cp	r20, r1
    23aa:	51 05       	cpc	r21, r1
    23ac:	69 f1       	breq	.+90     	; 0x2408 <conv_brk+0xcc>
    23ae:	87 2f       	mov	r24, r23
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	84 17       	cp	r24, r20
    23b4:	95 07       	cpc	r25, r21
    23b6:	44 f4       	brge	.+16     	; 0x23c8 <conv_brk+0x8c>
    23b8:	2d 35       	cpi	r18, 0x5D	; 93
    23ba:	51 f1       	breq	.+84     	; 0x2410 <conv_brk+0xd4>
    23bc:	2d 32       	cpi	r18, 0x2D	; 45
    23be:	21 f4       	brne	.+8      	; 0x23c8 <conv_brk+0x8c>
    23c0:	33 23       	and	r19, r19
    23c2:	29 f4       	brne	.+10     	; 0x23ce <conv_brk+0x92>
    23c4:	31 e0       	ldi	r19, 0x01	; 1
    23c6:	21 c0       	rjmp	.+66     	; 0x240a <conv_brk+0xce>
    23c8:	33 23       	and	r19, r19
    23ca:	09 f4       	brne	.+2      	; 0x23ce <conv_brk+0x92>
    23cc:	62 2f       	mov	r22, r18
    23ce:	32 2f       	mov	r19, r18
    23d0:	83 2f       	mov	r24, r19
    23d2:	86 95       	lsr	r24
    23d4:	86 95       	lsr	r24
    23d6:	86 95       	lsr	r24
    23d8:	f4 01       	movw	r30, r8
    23da:	e8 0f       	add	r30, r24
    23dc:	f1 1d       	adc	r31, r1
    23de:	83 2f       	mov	r24, r19
    23e0:	87 70       	andi	r24, 0x07	; 7
    23e2:	3d 01       	movw	r6, r26
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <conv_brk+0xae>
    23e6:	66 0c       	add	r6, r6
    23e8:	77 1c       	adc	r7, r7
    23ea:	8a 95       	dec	r24
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <conv_brk+0xaa>
    23ee:	20 81       	ld	r18, Z
    23f0:	26 29       	or	r18, r6
    23f2:	20 83       	st	Z, r18
    23f4:	36 17       	cp	r19, r22
    23f6:	11 f4       	brne	.+4      	; 0x23fc <conv_brk+0xc0>
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <conv_brk+0xce>
    23fc:	36 17       	cp	r19, r22
    23fe:	10 f4       	brcc	.+4      	; 0x2404 <conv_brk+0xc8>
    2400:	3f 5f       	subi	r19, 0xFF	; 255
    2402:	e6 cf       	rjmp	.-52     	; 0x23d0 <conv_brk+0x94>
    2404:	31 50       	subi	r19, 0x01	; 1
    2406:	e4 cf       	rjmp	.-56     	; 0x23d0 <conv_brk+0x94>
    2408:	71 e0       	ldi	r23, 0x01	; 1
    240a:	4f 5f       	subi	r20, 0xFF	; 255
    240c:	5f 4f       	sbci	r21, 0xFF	; 255
    240e:	bf cf       	rjmp	.-130    	; 0x238e <conv_brk+0x52>
    2410:	33 23       	and	r19, r19
    2412:	19 f0       	breq	.+6      	; 0x241a <conv_brk+0xde>
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	80 62       	ori	r24, 0x20	; 32
    2418:	8e 83       	std	Y+6, r24	; 0x06
    241a:	77 23       	and	r23, r23
    241c:	59 f0       	breq	.+22     	; 0x2434 <conv_brk+0xf8>
    241e:	fe 01       	movw	r30, r28
    2420:	31 96       	adiw	r30, 0x01	; 1
    2422:	9e 01       	movw	r18, r28
    2424:	2f 5d       	subi	r18, 0xDF	; 223
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	80 95       	com	r24
    242c:	81 93       	st	Z+, r24
    242e:	e2 17       	cp	r30, r18
    2430:	f3 07       	cpc	r31, r19
    2432:	d1 f7       	brne	.-12     	; 0x2428 <conv_brk+0xec>
    2434:	bb 24       	eor	r11, r11
    2436:	b3 94       	inc	r11
    2438:	4e 01       	movw	r8, r28
    243a:	08 94       	sec
    243c:	81 1c       	adc	r8, r1
    243e:	91 1c       	adc	r9, r1
    2440:	c6 01       	movw	r24, r12
    2442:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2446:	ac 01       	movw	r20, r24
    2448:	97 fd       	sbrc	r25, 7
    244a:	22 c0       	rjmp	.+68     	; 0x2490 <conv_brk+0x154>
    244c:	86 95       	lsr	r24
    244e:	86 95       	lsr	r24
    2450:	86 95       	lsr	r24
    2452:	f4 01       	movw	r30, r8
    2454:	e8 0f       	add	r30, r24
    2456:	f1 1d       	adc	r31, r1
    2458:	80 81       	ld	r24, Z
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9a 01       	movw	r18, r20
    245e:	27 70       	andi	r18, 0x07	; 7
    2460:	30 70       	andi	r19, 0x00	; 0
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <conv_brk+0x12c>
    2464:	95 95       	asr	r25
    2466:	87 95       	ror	r24
    2468:	2a 95       	dec	r18
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <conv_brk+0x128>
    246c:	80 fd       	sbrc	r24, 0
    246e:	05 c0       	rjmp	.+10     	; 0x247a <conv_brk+0x13e>
    2470:	ca 01       	movw	r24, r20
    2472:	b6 01       	movw	r22, r12
    2474:	0e 94 22 14 	call	0x2844	; 0x2844 <ungetc>
    2478:	0b c0       	rjmp	.+22     	; 0x2490 <conv_brk+0x154>
    247a:	01 15       	cp	r16, r1
    247c:	11 05       	cpc	r17, r1
    247e:	19 f0       	breq	.+6      	; 0x2486 <conv_brk+0x14a>
    2480:	d8 01       	movw	r26, r16
    2482:	4d 93       	st	X+, r20
    2484:	8d 01       	movw	r16, r26
    2486:	aa 94       	dec	r10
    2488:	bb 24       	eor	r11, r11
    248a:	aa 20       	and	r10, r10
    248c:	c9 f6       	brne	.-78     	; 0x2440 <conv_brk+0x104>
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <conv_brk+0x158>
    2490:	bb 20       	and	r11, r11
    2492:	31 f4       	brne	.+12     	; 0x24a0 <conv_brk+0x164>
    2494:	01 15       	cp	r16, r1
    2496:	11 05       	cpc	r17, r1
    2498:	29 f0       	breq	.+10     	; 0x24a4 <conv_brk+0x168>
    249a:	f8 01       	movw	r30, r16
    249c:	10 82       	st	Z, r1
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <conv_brk+0x168>
    24a0:	ee 24       	eor	r14, r14
    24a2:	ff 24       	eor	r15, r15
    24a4:	c7 01       	movw	r24, r14
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	df 90       	pop	r13
    24c0:	cf 90       	pop	r12
    24c2:	bf 90       	pop	r11
    24c4:	af 90       	pop	r10
    24c6:	9f 90       	pop	r9
    24c8:	8f 90       	pop	r8
    24ca:	7f 90       	pop	r7
    24cc:	6f 90       	pop	r6
    24ce:	08 95       	ret

000024d0 <vfscanf>:
    24d0:	6f 92       	push	r6
    24d2:	7f 92       	push	r7
    24d4:	8f 92       	push	r8
    24d6:	9f 92       	push	r9
    24d8:	af 92       	push	r10
    24da:	bf 92       	push	r11
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	5c 01       	movw	r10, r24
    24ee:	6b 01       	movw	r12, r22
    24f0:	3a 01       	movw	r6, r20
    24f2:	fc 01       	movw	r30, r24
    24f4:	17 82       	std	Z+7, r1	; 0x07
    24f6:	16 82       	std	Z+6, r1	; 0x06
    24f8:	88 24       	eor	r8, r8
    24fa:	ea c0       	rjmp	.+468    	; 0x26d0 <vfscanf+0x200>
    24fc:	81 2f       	mov	r24, r17
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 8b 13 	call	0x2716	; 0x2716 <isspace>
    2504:	89 2b       	or	r24, r25
    2506:	21 f0       	breq	.+8      	; 0x2510 <vfscanf+0x40>
    2508:	c5 01       	movw	r24, r10
    250a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <skip_spaces>
    250e:	e0 c0       	rjmp	.+448    	; 0x26d0 <vfscanf+0x200>
    2510:	15 32       	cpi	r17, 0x25	; 37
    2512:	49 f4       	brne	.+18     	; 0x2526 <vfscanf+0x56>
    2514:	f6 01       	movw	r30, r12
    2516:	f3 fc       	sbrc	r15, 3
    2518:	65 91       	lpm	r22, Z+
    251a:	f3 fe       	sbrs	r15, 3
    251c:	61 91       	ld	r22, Z+
    251e:	6f 01       	movw	r12, r30
    2520:	65 32       	cpi	r22, 0x25	; 37
    2522:	69 f4       	brne	.+26     	; 0x253e <vfscanf+0x6e>
    2524:	15 e2       	ldi	r17, 0x25	; 37
    2526:	c5 01       	movw	r24, r10
    2528:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    252c:	97 fd       	sbrc	r25, 7
    252e:	dc c0       	rjmp	.+440    	; 0x26e8 <vfscanf+0x218>
    2530:	18 17       	cp	r17, r24
    2532:	09 f4       	brne	.+2      	; 0x2536 <vfscanf+0x66>
    2534:	cd c0       	rjmp	.+410    	; 0x26d0 <vfscanf+0x200>
    2536:	b5 01       	movw	r22, r10
    2538:	0e 94 22 14 	call	0x2844	; 0x2844 <ungetc>
    253c:	da c0       	rjmp	.+436    	; 0x26f2 <vfscanf+0x222>
    253e:	6a 32       	cpi	r22, 0x2A	; 42
    2540:	19 f0       	breq	.+6      	; 0x2548 <vfscanf+0x78>
    2542:	16 2f       	mov	r17, r22
    2544:	00 e0       	ldi	r16, 0x00	; 0
    2546:	06 c0       	rjmp	.+12     	; 0x2554 <vfscanf+0x84>
    2548:	f3 fc       	sbrc	r15, 3
    254a:	15 91       	lpm	r17, Z+
    254c:	f3 fe       	sbrs	r15, 3
    254e:	11 91       	ld	r17, Z+
    2550:	6f 01       	movw	r12, r30
    2552:	01 e0       	ldi	r16, 0x01	; 1
    2554:	99 24       	eor	r9, r9
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <vfscanf+0xa6>
    2558:	02 60       	ori	r16, 0x02	; 2
    255a:	69 2d       	mov	r22, r9
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	0e 94 c5 10 	call	0x218a	; 0x218a <mulacc>
    2568:	96 2e       	mov	r9, r22
    256a:	f6 01       	movw	r30, r12
    256c:	f3 fc       	sbrc	r15, 3
    256e:	15 91       	lpm	r17, Z+
    2570:	f3 fe       	sbrs	r15, 3
    2572:	11 91       	ld	r17, Z+
    2574:	6f 01       	movw	r12, r30
    2576:	21 2f       	mov	r18, r17
    2578:	20 53       	subi	r18, 0x30	; 48
    257a:	2a 30       	cpi	r18, 0x0A	; 10
    257c:	68 f3       	brcs	.-38     	; 0x2558 <vfscanf+0x88>
    257e:	01 fd       	sbrc	r16, 1
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <vfscanf+0xb8>
    2582:	99 24       	eor	r9, r9
    2584:	9a 94       	dec	r9
    2586:	03 c0       	rjmp	.+6      	; 0x258e <vfscanf+0xbe>
    2588:	99 20       	and	r9, r9
    258a:	09 f4       	brne	.+2      	; 0x258e <vfscanf+0xbe>
    258c:	b2 c0       	rjmp	.+356    	; 0x26f2 <vfscanf+0x222>
    258e:	18 36       	cpi	r17, 0x68	; 104
    2590:	21 f0       	breq	.+8      	; 0x259a <vfscanf+0xca>
    2592:	1c 36       	cpi	r17, 0x6C	; 108
    2594:	99 f4       	brne	.+38     	; 0x25bc <vfscanf+0xec>
    2596:	f6 01       	movw	r30, r12
    2598:	0b c0       	rjmp	.+22     	; 0x25b0 <vfscanf+0xe0>
    259a:	f6 01       	movw	r30, r12
    259c:	f3 fc       	sbrc	r15, 3
    259e:	65 91       	lpm	r22, Z+
    25a0:	f3 fe       	sbrs	r15, 3
    25a2:	61 91       	ld	r22, Z+
    25a4:	68 36       	cpi	r22, 0x68	; 104
    25a6:	19 f0       	breq	.+6      	; 0x25ae <vfscanf+0xde>
    25a8:	6f 01       	movw	r12, r30
    25aa:	16 2f       	mov	r17, r22
    25ac:	07 c0       	rjmp	.+14     	; 0x25bc <vfscanf+0xec>
    25ae:	08 60       	ori	r16, 0x08	; 8
    25b0:	04 60       	ori	r16, 0x04	; 4
    25b2:	f3 fc       	sbrc	r15, 3
    25b4:	15 91       	lpm	r17, Z+
    25b6:	f3 fe       	sbrs	r15, 3
    25b8:	11 91       	ld	r17, Z+
    25ba:	6f 01       	movw	r12, r30
    25bc:	11 23       	and	r17, r17
    25be:	09 f4       	brne	.+2      	; 0x25c2 <vfscanf+0xf2>
    25c0:	98 c0       	rjmp	.+304    	; 0x26f2 <vfscanf+0x222>
    25c2:	8c e5       	ldi	r24, 0x5C	; 92
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	61 2f       	mov	r22, r17
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	0e 94 93 13 	call	0x2726	; 0x2726 <strchr_P>
    25ce:	89 2b       	or	r24, r25
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <vfscanf+0x104>
    25d2:	8f c0       	rjmp	.+286    	; 0x26f2 <vfscanf+0x222>
    25d4:	80 2f       	mov	r24, r16
    25d6:	00 ff       	sbrs	r16, 0
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <vfscanf+0x110>
    25da:	ee 24       	eor	r14, r14
    25dc:	ff 24       	eor	r15, r15
    25de:	07 c0       	rjmp	.+14     	; 0x25ee <vfscanf+0x11e>
    25e0:	f3 01       	movw	r30, r6
    25e2:	e0 80       	ld	r14, Z
    25e4:	f1 80       	ldd	r15, Z+1	; 0x01
    25e6:	22 e0       	ldi	r18, 0x02	; 2
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	62 0e       	add	r6, r18
    25ec:	73 1e       	adc	r7, r19
    25ee:	1e 36       	cpi	r17, 0x6E	; 110
    25f0:	51 f4       	brne	.+20     	; 0x2606 <vfscanf+0x136>
    25f2:	f5 01       	movw	r30, r10
    25f4:	46 81       	ldd	r20, Z+6	; 0x06
    25f6:	57 81       	ldd	r21, Z+7	; 0x07
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	c7 01       	movw	r24, r14
    25fe:	20 2f       	mov	r18, r16
    2600:	0e 94 b9 10 	call	0x2172	; 0x2172 <putval>
    2604:	65 c0       	rjmp	.+202    	; 0x26d0 <vfscanf+0x200>
    2606:	13 36       	cpi	r17, 0x63	; 99
    2608:	91 f4       	brne	.+36     	; 0x262e <vfscanf+0x15e>
    260a:	81 fd       	sbrc	r24, 1
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <vfscanf+0x142>
    260e:	99 24       	eor	r9, r9
    2610:	93 94       	inc	r9
    2612:	c5 01       	movw	r24, r10
    2614:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2618:	97 fd       	sbrc	r25, 7
    261a:	66 c0       	rjmp	.+204    	; 0x26e8 <vfscanf+0x218>
    261c:	e1 14       	cp	r14, r1
    261e:	f1 04       	cpc	r15, r1
    2620:	19 f0       	breq	.+6      	; 0x2628 <vfscanf+0x158>
    2622:	f7 01       	movw	r30, r14
    2624:	81 93       	st	Z+, r24
    2626:	7f 01       	movw	r14, r30
    2628:	9a 94       	dec	r9
    262a:	99 f7       	brne	.-26     	; 0x2612 <vfscanf+0x142>
    262c:	4f c0       	rjmp	.+158    	; 0x26cc <vfscanf+0x1fc>
    262e:	1b 35       	cpi	r17, 0x5B	; 91
    2630:	59 f4       	brne	.+22     	; 0x2648 <vfscanf+0x178>
    2632:	c5 01       	movw	r24, r10
    2634:	69 2d       	mov	r22, r9
    2636:	a7 01       	movw	r20, r14
    2638:	96 01       	movw	r18, r12
    263a:	0e 94 9e 11 	call	0x233c	; 0x233c <conv_brk>
    263e:	6c 01       	movw	r12, r24
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	09 f0       	breq	.+2      	; 0x2646 <vfscanf+0x176>
    2644:	43 c0       	rjmp	.+134    	; 0x26cc <vfscanf+0x1fc>
    2646:	3d c0       	rjmp	.+122    	; 0x26c2 <vfscanf+0x1f2>
    2648:	c5 01       	movw	r24, r10
    264a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <skip_spaces>
    264e:	97 fd       	sbrc	r25, 7
    2650:	4b c0       	rjmp	.+150    	; 0x26e8 <vfscanf+0x218>
    2652:	1f 36       	cpi	r17, 0x6F	; 111
    2654:	59 f1       	breq	.+86     	; 0x26ac <vfscanf+0x1dc>
    2656:	10 37       	cpi	r17, 0x70	; 112
    2658:	28 f4       	brcc	.+10     	; 0x2664 <vfscanf+0x194>
    265a:	14 36       	cpi	r17, 0x64	; 100
    265c:	29 f1       	breq	.+74     	; 0x26a8 <vfscanf+0x1d8>
    265e:	19 36       	cpi	r17, 0x69	; 105
    2660:	39 f5       	brne	.+78     	; 0x26b0 <vfscanf+0x1e0>
    2662:	27 c0       	rjmp	.+78     	; 0x26b2 <vfscanf+0x1e2>
    2664:	13 37       	cpi	r17, 0x73	; 115
    2666:	19 f0       	breq	.+6      	; 0x266e <vfscanf+0x19e>
    2668:	15 37       	cpi	r17, 0x75	; 117
    266a:	11 f5       	brne	.+68     	; 0x26b0 <vfscanf+0x1e0>
    266c:	1d c0       	rjmp	.+58     	; 0x26a8 <vfscanf+0x1d8>
    266e:	c5 01       	movw	r24, r10
    2670:	0e 94 b4 13 	call	0x2768	; 0x2768 <fgetc>
    2674:	ec 01       	movw	r28, r24
    2676:	97 fd       	sbrc	r25, 7
    2678:	11 c0       	rjmp	.+34     	; 0x269c <vfscanf+0x1cc>
    267a:	0e 94 8b 13 	call	0x2716	; 0x2716 <isspace>
    267e:	89 2b       	or	r24, r25
    2680:	29 f0       	breq	.+10     	; 0x268c <vfscanf+0x1bc>
    2682:	ce 01       	movw	r24, r28
    2684:	b5 01       	movw	r22, r10
    2686:	0e 94 22 14 	call	0x2844	; 0x2844 <ungetc>
    268a:	08 c0       	rjmp	.+16     	; 0x269c <vfscanf+0x1cc>
    268c:	e1 14       	cp	r14, r1
    268e:	f1 04       	cpc	r15, r1
    2690:	19 f0       	breq	.+6      	; 0x2698 <vfscanf+0x1c8>
    2692:	f7 01       	movw	r30, r14
    2694:	c1 93       	st	Z+, r28
    2696:	7f 01       	movw	r14, r30
    2698:	9a 94       	dec	r9
    269a:	49 f7       	brne	.-46     	; 0x266e <vfscanf+0x19e>
    269c:	e1 14       	cp	r14, r1
    269e:	f1 04       	cpc	r15, r1
    26a0:	a9 f0       	breq	.+42     	; 0x26cc <vfscanf+0x1fc>
    26a2:	f7 01       	movw	r30, r14
    26a4:	10 82       	st	Z, r1
    26a6:	12 c0       	rjmp	.+36     	; 0x26cc <vfscanf+0x1fc>
    26a8:	00 62       	ori	r16, 0x20	; 32
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <vfscanf+0x1e2>
    26ac:	00 61       	ori	r16, 0x10	; 16
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <vfscanf+0x1e2>
    26b0:	00 64       	ori	r16, 0x40	; 64
    26b2:	c5 01       	movw	r24, r10
    26b4:	69 2d       	mov	r22, r9
    26b6:	a7 01       	movw	r20, r14
    26b8:	20 2f       	mov	r18, r16
    26ba:	0e 94 0c 11 	call	0x2218	; 0x2218 <conv_int>
    26be:	88 23       	and	r24, r24
    26c0:	29 f4       	brne	.+10     	; 0x26cc <vfscanf+0x1fc>
    26c2:	f5 01       	movw	r30, r10
    26c4:	83 81       	ldd	r24, Z+3	; 0x03
    26c6:	80 73       	andi	r24, 0x30	; 48
    26c8:	79 f4       	brne	.+30     	; 0x26e8 <vfscanf+0x218>
    26ca:	13 c0       	rjmp	.+38     	; 0x26f2 <vfscanf+0x222>
    26cc:	00 ff       	sbrs	r16, 0
    26ce:	83 94       	inc	r8
    26d0:	f5 01       	movw	r30, r10
    26d2:	f3 80       	ldd	r15, Z+3	; 0x03
    26d4:	f6 01       	movw	r30, r12
    26d6:	f3 fc       	sbrc	r15, 3
    26d8:	15 91       	lpm	r17, Z+
    26da:	f3 fe       	sbrs	r15, 3
    26dc:	11 91       	ld	r17, Z+
    26de:	6f 01       	movw	r12, r30
    26e0:	11 23       	and	r17, r17
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <vfscanf+0x216>
    26e4:	0b cf       	rjmp	.-490    	; 0x24fc <vfscanf+0x2c>
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <vfscanf+0x222>
    26e8:	88 20       	and	r8, r8
    26ea:	19 f4       	brne	.+6      	; 0x26f2 <vfscanf+0x222>
    26ec:	2f ef       	ldi	r18, 0xFF	; 255
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <vfscanf+0x226>
    26f2:	28 2d       	mov	r18, r8
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	c9 01       	movw	r24, r18
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	df 90       	pop	r13
    2706:	cf 90       	pop	r12
    2708:	bf 90       	pop	r11
    270a:	af 90       	pop	r10
    270c:	9f 90       	pop	r9
    270e:	8f 90       	pop	r8
    2710:	7f 90       	pop	r7
    2712:	6f 90       	pop	r6
    2714:	08 95       	ret

00002716 <isspace>:
    2716:	91 11       	cpse	r25, r1
    2718:	0d c1       	rjmp	.+538    	; 0x2934 <__ctype_isfalse>
    271a:	80 32       	cpi	r24, 0x20	; 32
    271c:	19 f0       	breq	.+6      	; 0x2724 <isspace+0xe>
    271e:	89 50       	subi	r24, 0x09	; 9
    2720:	85 50       	subi	r24, 0x05	; 5
    2722:	d0 f7       	brcc	.-12     	; 0x2718 <isspace+0x2>
    2724:	08 95       	ret

00002726 <strchr_P>:
    2726:	fc 01       	movw	r30, r24
    2728:	05 90       	lpm	r0, Z+
    272a:	06 16       	cp	r0, r22
    272c:	21 f0       	breq	.+8      	; 0x2736 <strchr_P+0x10>
    272e:	00 20       	and	r0, r0
    2730:	d9 f7       	brne	.-10     	; 0x2728 <strchr_P+0x2>
    2732:	c0 01       	movw	r24, r0
    2734:	08 95       	ret
    2736:	31 97       	sbiw	r30, 0x01	; 1
    2738:	cf 01       	movw	r24, r30
    273a:	08 95       	ret

0000273c <strnlen_P>:
    273c:	fc 01       	movw	r30, r24
    273e:	05 90       	lpm	r0, Z+
    2740:	61 50       	subi	r22, 0x01	; 1
    2742:	70 40       	sbci	r23, 0x00	; 0
    2744:	01 10       	cpse	r0, r1
    2746:	d8 f7       	brcc	.-10     	; 0x273e <strnlen_P+0x2>
    2748:	80 95       	com	r24
    274a:	90 95       	com	r25
    274c:	8e 0f       	add	r24, r30
    274e:	9f 1f       	adc	r25, r31
    2750:	08 95       	ret

00002752 <strnlen>:
    2752:	fc 01       	movw	r30, r24
    2754:	61 50       	subi	r22, 0x01	; 1
    2756:	70 40       	sbci	r23, 0x00	; 0
    2758:	01 90       	ld	r0, Z+
    275a:	01 10       	cpse	r0, r1
    275c:	d8 f7       	brcc	.-10     	; 0x2754 <strnlen+0x2>
    275e:	80 95       	com	r24
    2760:	90 95       	com	r25
    2762:	8e 0f       	add	r24, r30
    2764:	9f 1f       	adc	r25, r31
    2766:	08 95       	ret

00002768 <fgetc>:
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	ec 01       	movw	r28, r24
    276e:	4b 81       	ldd	r20, Y+3	; 0x03
    2770:	40 ff       	sbrs	r20, 0
    2772:	1a c0       	rjmp	.+52     	; 0x27a8 <fgetc+0x40>
    2774:	46 ff       	sbrs	r20, 6
    2776:	0a c0       	rjmp	.+20     	; 0x278c <fgetc+0x24>
    2778:	4f 7b       	andi	r20, 0xBF	; 191
    277a:	4b 83       	std	Y+3, r20	; 0x03
    277c:	8e 81       	ldd	r24, Y+6	; 0x06
    277e:	9f 81       	ldd	r25, Y+7	; 0x07
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	9f 83       	std	Y+7, r25	; 0x07
    2784:	8e 83       	std	Y+6, r24	; 0x06
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	2b c0       	rjmp	.+86     	; 0x27e2 <fgetc+0x7a>
    278c:	42 ff       	sbrs	r20, 2
    278e:	13 c0       	rjmp	.+38     	; 0x27b6 <fgetc+0x4e>
    2790:	e8 81       	ld	r30, Y
    2792:	f9 81       	ldd	r31, Y+1	; 0x01
    2794:	80 81       	ld	r24, Z
    2796:	28 2f       	mov	r18, r24
    2798:	33 27       	eor	r19, r19
    279a:	27 fd       	sbrc	r18, 7
    279c:	30 95       	com	r19
    279e:	21 15       	cp	r18, r1
    27a0:	31 05       	cpc	r19, r1
    27a2:	29 f4       	brne	.+10     	; 0x27ae <fgetc+0x46>
    27a4:	40 62       	ori	r20, 0x20	; 32
    27a6:	4b 83       	std	Y+3, r20	; 0x03
    27a8:	2f ef       	ldi	r18, 0xFF	; 255
    27aa:	3f ef       	ldi	r19, 0xFF	; 255
    27ac:	1b c0       	rjmp	.+54     	; 0x27e4 <fgetc+0x7c>
    27ae:	31 96       	adiw	r30, 0x01	; 1
    27b0:	f9 83       	std	Y+1, r31	; 0x01
    27b2:	e8 83       	st	Y, r30
    27b4:	11 c0       	rjmp	.+34     	; 0x27d8 <fgetc+0x70>
    27b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    27b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    27ba:	ce 01       	movw	r24, r28
    27bc:	09 95       	icall
    27be:	9c 01       	movw	r18, r24
    27c0:	97 ff       	sbrs	r25, 7
    27c2:	0a c0       	rjmp	.+20     	; 0x27d8 <fgetc+0x70>
    27c4:	9b 81       	ldd	r25, Y+3	; 0x03
    27c6:	2f 5f       	subi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	11 f0       	breq	.+4      	; 0x27d0 <fgetc+0x68>
    27cc:	80 e2       	ldi	r24, 0x20	; 32
    27ce:	01 c0       	rjmp	.+2      	; 0x27d2 <fgetc+0x6a>
    27d0:	80 e1       	ldi	r24, 0x10	; 16
    27d2:	89 2b       	or	r24, r25
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	e8 cf       	rjmp	.-48     	; 0x27a8 <fgetc+0x40>
    27d8:	8e 81       	ldd	r24, Y+6	; 0x06
    27da:	9f 81       	ldd	r25, Y+7	; 0x07
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	9f 83       	std	Y+7, r25	; 0x07
    27e0:	8e 83       	std	Y+6, r24	; 0x06
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	c9 01       	movw	r24, r18
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <fputc>:
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	8c 01       	movw	r16, r24
    27f6:	eb 01       	movw	r28, r22
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	81 ff       	sbrs	r24, 1
    27fc:	1b c0       	rjmp	.+54     	; 0x2834 <fputc+0x48>
    27fe:	82 ff       	sbrs	r24, 2
    2800:	0d c0       	rjmp	.+26     	; 0x281c <fputc+0x30>
    2802:	2e 81       	ldd	r18, Y+6	; 0x06
    2804:	3f 81       	ldd	r19, Y+7	; 0x07
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	9d 81       	ldd	r25, Y+5	; 0x05
    280a:	28 17       	cp	r18, r24
    280c:	39 07       	cpc	r19, r25
    280e:	64 f4       	brge	.+24     	; 0x2828 <fputc+0x3c>
    2810:	e8 81       	ld	r30, Y
    2812:	f9 81       	ldd	r31, Y+1	; 0x01
    2814:	01 93       	st	Z+, r16
    2816:	f9 83       	std	Y+1, r31	; 0x01
    2818:	e8 83       	st	Y, r30
    281a:	06 c0       	rjmp	.+12     	; 0x2828 <fputc+0x3c>
    281c:	e8 85       	ldd	r30, Y+8	; 0x08
    281e:	f9 85       	ldd	r31, Y+9	; 0x09
    2820:	80 2f       	mov	r24, r16
    2822:	09 95       	icall
    2824:	89 2b       	or	r24, r25
    2826:	31 f4       	brne	.+12     	; 0x2834 <fputc+0x48>
    2828:	8e 81       	ldd	r24, Y+6	; 0x06
    282a:	9f 81       	ldd	r25, Y+7	; 0x07
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	9f 83       	std	Y+7, r25	; 0x07
    2830:	8e 83       	std	Y+6, r24	; 0x06
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <fputc+0x4c>
    2834:	0f ef       	ldi	r16, 0xFF	; 255
    2836:	1f ef       	ldi	r17, 0xFF	; 255
    2838:	c8 01       	movw	r24, r16
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <ungetc>:
    2844:	9c 01       	movw	r18, r24
    2846:	fb 01       	movw	r30, r22
    2848:	83 81       	ldd	r24, Z+3	; 0x03
    284a:	80 ff       	sbrs	r24, 0
    284c:	11 c0       	rjmp	.+34     	; 0x2870 <ungetc+0x2c>
    284e:	86 fd       	sbrc	r24, 6
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <ungetc+0x2c>
    2852:	9f ef       	ldi	r25, 0xFF	; 255
    2854:	2f 3f       	cpi	r18, 0xFF	; 255
    2856:	39 07       	cpc	r19, r25
    2858:	59 f0       	breq	.+22     	; 0x2870 <ungetc+0x2c>
    285a:	22 83       	std	Z+2, r18	; 0x02
    285c:	80 64       	ori	r24, 0x40	; 64
    285e:	8f 7d       	andi	r24, 0xDF	; 223
    2860:	83 83       	std	Z+3, r24	; 0x03
    2862:	86 81       	ldd	r24, Z+6	; 0x06
    2864:	97 81       	ldd	r25, Z+7	; 0x07
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	97 83       	std	Z+7, r25	; 0x07
    286a:	86 83       	std	Z+6, r24	; 0x06
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <ungetc+0x30>
    2870:	2f ef       	ldi	r18, 0xFF	; 255
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	c9 01       	movw	r24, r18
    2876:	08 95       	ret

00002878 <__ultoa_invert>:
    2878:	fa 01       	movw	r30, r20
    287a:	aa 27       	eor	r26, r26
    287c:	28 30       	cpi	r18, 0x08	; 8
    287e:	51 f1       	breq	.+84     	; 0x28d4 <__ultoa_invert+0x5c>
    2880:	20 31       	cpi	r18, 0x10	; 16
    2882:	81 f1       	breq	.+96     	; 0x28e4 <__ultoa_invert+0x6c>
    2884:	e8 94       	clt
    2886:	6f 93       	push	r22
    2888:	6e 7f       	andi	r22, 0xFE	; 254
    288a:	6e 5f       	subi	r22, 0xFE	; 254
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	8f 4f       	sbci	r24, 0xFF	; 255
    2890:	9f 4f       	sbci	r25, 0xFF	; 255
    2892:	af 4f       	sbci	r26, 0xFF	; 255
    2894:	b1 e0       	ldi	r27, 0x01	; 1
    2896:	3e d0       	rcall	.+124    	; 0x2914 <__ultoa_invert+0x9c>
    2898:	b4 e0       	ldi	r27, 0x04	; 4
    289a:	3c d0       	rcall	.+120    	; 0x2914 <__ultoa_invert+0x9c>
    289c:	67 0f       	add	r22, r23
    289e:	78 1f       	adc	r23, r24
    28a0:	89 1f       	adc	r24, r25
    28a2:	9a 1f       	adc	r25, r26
    28a4:	a1 1d       	adc	r26, r1
    28a6:	68 0f       	add	r22, r24
    28a8:	79 1f       	adc	r23, r25
    28aa:	8a 1f       	adc	r24, r26
    28ac:	91 1d       	adc	r25, r1
    28ae:	a1 1d       	adc	r26, r1
    28b0:	6a 0f       	add	r22, r26
    28b2:	71 1d       	adc	r23, r1
    28b4:	81 1d       	adc	r24, r1
    28b6:	91 1d       	adc	r25, r1
    28b8:	a1 1d       	adc	r26, r1
    28ba:	20 d0       	rcall	.+64     	; 0x28fc <__ultoa_invert+0x84>
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <__ultoa_invert+0x48>
    28be:	68 94       	set
    28c0:	3f 91       	pop	r19
    28c2:	2a e0       	ldi	r18, 0x0A	; 10
    28c4:	26 9f       	mul	r18, r22
    28c6:	11 24       	eor	r1, r1
    28c8:	30 19       	sub	r19, r0
    28ca:	30 5d       	subi	r19, 0xD0	; 208
    28cc:	31 93       	st	Z+, r19
    28ce:	de f6       	brtc	.-74     	; 0x2886 <__ultoa_invert+0xe>
    28d0:	cf 01       	movw	r24, r30
    28d2:	08 95       	ret
    28d4:	46 2f       	mov	r20, r22
    28d6:	47 70       	andi	r20, 0x07	; 7
    28d8:	40 5d       	subi	r20, 0xD0	; 208
    28da:	41 93       	st	Z+, r20
    28dc:	b3 e0       	ldi	r27, 0x03	; 3
    28de:	0f d0       	rcall	.+30     	; 0x28fe <__ultoa_invert+0x86>
    28e0:	c9 f7       	brne	.-14     	; 0x28d4 <__ultoa_invert+0x5c>
    28e2:	f6 cf       	rjmp	.-20     	; 0x28d0 <__ultoa_invert+0x58>
    28e4:	46 2f       	mov	r20, r22
    28e6:	4f 70       	andi	r20, 0x0F	; 15
    28e8:	40 5d       	subi	r20, 0xD0	; 208
    28ea:	4a 33       	cpi	r20, 0x3A	; 58
    28ec:	18 f0       	brcs	.+6      	; 0x28f4 <__ultoa_invert+0x7c>
    28ee:	49 5d       	subi	r20, 0xD9	; 217
    28f0:	31 fd       	sbrc	r19, 1
    28f2:	40 52       	subi	r20, 0x20	; 32
    28f4:	41 93       	st	Z+, r20
    28f6:	02 d0       	rcall	.+4      	; 0x28fc <__ultoa_invert+0x84>
    28f8:	a9 f7       	brne	.-22     	; 0x28e4 <__ultoa_invert+0x6c>
    28fa:	ea cf       	rjmp	.-44     	; 0x28d0 <__ultoa_invert+0x58>
    28fc:	b4 e0       	ldi	r27, 0x04	; 4
    28fe:	a6 95       	lsr	r26
    2900:	97 95       	ror	r25
    2902:	87 95       	ror	r24
    2904:	77 95       	ror	r23
    2906:	67 95       	ror	r22
    2908:	ba 95       	dec	r27
    290a:	c9 f7       	brne	.-14     	; 0x28fe <__ultoa_invert+0x86>
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	61 05       	cpc	r22, r1
    2910:	71 05       	cpc	r23, r1
    2912:	08 95       	ret
    2914:	9b 01       	movw	r18, r22
    2916:	ac 01       	movw	r20, r24
    2918:	0a 2e       	mov	r0, r26
    291a:	06 94       	lsr	r0
    291c:	57 95       	ror	r21
    291e:	47 95       	ror	r20
    2920:	37 95       	ror	r19
    2922:	27 95       	ror	r18
    2924:	ba 95       	dec	r27
    2926:	c9 f7       	brne	.-14     	; 0x291a <__ultoa_invert+0xa2>
    2928:	62 0f       	add	r22, r18
    292a:	73 1f       	adc	r23, r19
    292c:	84 1f       	adc	r24, r20
    292e:	95 1f       	adc	r25, r21
    2930:	a0 1d       	adc	r26, r0
    2932:	08 95       	ret

00002934 <__ctype_isfalse>:
    2934:	99 27       	eor	r25, r25
    2936:	88 27       	eor	r24, r24

00002938 <__ctype_istrue>:
    2938:	08 95       	ret

0000293a <_exit>:
    293a:	f8 94       	cli

0000293c <__stop_program>:
    293c:	ff cf       	rjmp	.-2      	; 0x293c <__stop_program>
