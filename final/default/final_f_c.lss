
final_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  000022a2  00002336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  000023d8  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003da  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f3e  00000000  00000000  00002812  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000624  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015d9  00000000  00000000  00004d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00006350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00006630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c9e  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006d8  00000000  00000000  0000771e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LCD_wait1>:
      c2:	77 61 69 74 69 6e 67 20 66 6f 72 20 75 73 65 72     waiting for user
	...

000000d4 <LCD_wait2>:
      d4:	74 6f 20 70 72 65 73 73 20 62 75 74 74 6f 6e 20     to press button 
	...

000000e6 <LCD_printing>:
      e6:	70 72 69 6e 74 69 6e 67 20 20 20 20 20 20 20 20     printing        
	...

000000f8 <LCD_df1>:
      f8:	64 6f 77 6e 6c 6f 61 64 69 6e 67 20 20 20 20 20     downloading     
	...

0000010a <LCD_df2>:
     10a:	66 72 61 6d 65 20 20 20 20 20 20 20 20 20 20 20     frame           
	...

0000011c <LcdCustomChar>:
     11c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     12c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     13c:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     14c:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

0000015c <__c.1988>:
     15c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d0 e4       	ldi	r29, 0x40	; 64
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	11 e0       	ldi	r17, 0x01	; 1
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e2 ea       	ldi	r30, 0xA2	; 162
     17c:	f2 e2       	ldi	r31, 0x22	; 34
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 3a       	cpi	r26, 0xA2	; 162
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	14 e0       	ldi	r17, 0x04	; 4
     190:	a2 ea       	ldi	r26, 0xA2	; 162
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a9 37       	cpi	r26, 0x79	; 121
     19a:	b1 07       	cpc	r27, r17
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 29 08 	call	0x1052	; 0x1052 <main>
     1a2:	0c 94 4f 11 	jmp	0x229e	; 0x229e <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     1aa:	ec e7       	ldi	r30, 0x7C	; 124
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	10 82       	st	Z, r1
	ADCSRA = 0;
     1b0:	aa e7       	ldi	r26, 0x7A	; 122
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     1ba:	87 e8       	ldi	r24, 0x87	; 135
     1bc:	8c 93       	st	X, r24
end
     1be:	08 95       	ret

000001c0 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     1c0:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
     1c2:	8f ee       	ldi	r24, 0xEF	; 239
     1c4:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     1c6:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
     1c8:	80 e1       	ldi	r24, 0x10	; 16
     1ca:	8b b9       	out	0x0b, r24	; 11
	
end
     1cc:	08 95       	ret

000001ce <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     1ce:	ec e7       	ldi	r30, 0x7C	; 124
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     1d4:	80 54       	subi	r24, 0x40	; 64
     1d6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     1d8:	ea e7       	ldi	r30, 0x7A	; 122
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	80 81       	ld	r24, Z
     1de:	80 64       	ori	r24, 0x40	; 64
     1e0:	80 83       	st	Z, r24
end
     1e2:	08 95       	ret

000001e4 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     1e4:	5d 98       	cbi	0x0b, 5	; 11
     1e6:	88 e8       	ldi	r24, 0x88	; 136
     1e8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <raise_pen+0xa>
	_delay_ms(500);
end
     1f8:	08 95       	ret

000001fa <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     1fa:	5d 9a       	sbi	0x0b, 5	; 11
     1fc:	80 ea       	ldi	r24, 0xA0	; 160
     1fe:	9f e0       	ldi	r25, 0x0F	; 15
     200:	20 e9       	ldi	r18, 0x90	; 144
     202:	31 e0       	ldi	r19, 0x01	; 1
     204:	f9 01       	movw	r30, r18
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20c:	d9 f7       	brne	.-10     	; 0x204 <lower_pen+0xa>
	_delay_ms(400);
end
     20e:	08 95       	ret

00000210 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     210:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     212:	8a e1       	ldi	r24, 0x1A	; 26
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     218:	5a 9a       	sbi	0x0b, 2	; 11
end
     21a:	08 95       	ret

0000021c <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     21c:	5a 98       	cbi	0x0b, 2	; 11
     21e:	8a e1       	ldi	r24, 0x1A	; 26
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     224:	5b 9a       	sbi	0x0b, 3	; 11
end
     226:	08 95       	ret

00000228 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     228:	5e 98       	cbi	0x0b, 6	; 11
     22a:	8a e1       	ldi	r24, 0x1A	; 26
     22c:	8a 95       	dec	r24
     22e:	f1 f7       	brne	.-4      	; 0x22c <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     230:	5f 9a       	sbi	0x0b, 7	; 11
end
     232:	08 95       	ret

00000234 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     234:	5f 98       	cbi	0x0b, 7	; 11
     236:	8a e1       	ldi	r24, 0x1A	; 26
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     23c:	5e 9a       	sbi	0x0b, 6	; 11
end
     23e:	08 95       	ret

00000240 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x33;
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	83 73       	andi	r24, 0x33	; 51
     244:	8b b9       	out	0x0b, r24	; 11
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	20 e9       	ldi	r18, 0x90	; 144
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <stop_all+0xe>
	_delay_ms(100);
end
     258:	08 95       	ret

0000025a <stop_x>:

void stop_x(void)
begin
	PORTD &= 0xf3;
     25a:	8b b1       	in	r24, 0x0b	; 11
     25c:	83 7f       	andi	r24, 0xF3	; 243
     25e:	8b b9       	out	0x0b, r24	; 11
end
     260:	08 95       	ret

00000262 <stop_y>:

void stop_y(void)
begin
	PORTD &= 0x3f;
     262:	8b b1       	in	r24, 0x0b	; 11
     264:	8f 73       	andi	r24, 0x3F	; 63
     266:	8b b9       	out	0x0b, r24	; 11
end
     268:	08 95       	ret

0000026a <circle>:
// draw a circle
void circle(void)
begin
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     270:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     272:	8a e1       	ldi	r24, 0x1A	; 26
     274:	f8 2e       	mov	r15, r24
     276:	8f 2d       	mov	r24, r15
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     27c:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27e:	00 e8       	ldi	r16, 0x80	; 128
     280:	1e e3       	ldi	r17, 0x3E	; 62
     282:	c8 01       	movw	r24, r16
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     288:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     28c:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     28e:	8f 2d       	mov	r24, r15
     290:	8a 95       	dec	r24
     292:	f1 f7       	brne	.-4      	; 0x290 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     294:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     296:	c8 01       	movw	r24, r16
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     29c:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29e:	8f 2d       	mov	r24, r15
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     2a4:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2a6:	c8 01       	movw	r24, r16
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     2ac:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2b0:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	8f 2d       	mov	r24, r15
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     2b8:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	80 ee       	ldi	r24, 0xE0	; 224
     2bc:	9e e2       	ldi	r25, 0x2E	; 46
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     2c2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2c6:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c8:	8f 2d       	mov	r24, r15
     2ca:	8a 95       	dec	r24
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     2ce:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d0:	00 e8       	ldi	r16, 0x80	; 128
     2d2:	15 e2       	ldi	r17, 0x25	; 37
     2d4:	c8 01       	movw	r24, r16
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     2da:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2de:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e0:	8f 2d       	mov	r24, r15
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     2e6:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2e8:	c8 01       	movw	r24, r16
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2ee:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f0:	8f 2d       	mov	r24, r15
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     2f6:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2f8:	c8 01       	movw	r24, r16
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     2fe:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     302:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     304:	8f 2d       	mov	r24, r15
     306:	8a 95       	dec	r24
     308:	f1 f7       	brne	.-4      	; 0x306 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     30a:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     30c:	80 e7       	ldi	r24, 0x70	; 112
     30e:	97 e1       	ldi	r25, 0x17	; 23
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     314:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     318:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     31a:	8f 2d       	mov	r24, r15
     31c:	8a 95       	dec	r24
     31e:	f1 f7       	brne	.-4      	; 0x31c <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     320:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     322:	00 ea       	ldi	r16, 0xA0	; 160
     324:	1f e0       	ldi	r17, 0x0F	; 15
     326:	c8 01       	movw	r24, r16
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     32c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     330:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     332:	8f 2d       	mov	r24, r15
     334:	8a 95       	dec	r24
     336:	f1 f7       	brne	.-4      	; 0x334 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     338:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     33a:	c8 01       	movw	r24, r16
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     340:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     342:	8f 2d       	mov	r24, r15
     344:	8a 95       	dec	r24
     346:	f1 f7       	brne	.-4      	; 0x344 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     348:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34a:	c8 01       	movw	r24, r16
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     350:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     354:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     356:	fa 94       	dec	r15
     358:	f1 f7       	brne	.-4      	; 0x356 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     35a:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35c:	80 ef       	ldi	r24, 0xF0	; 240
     35e:	9a e0       	ldi	r25, 0x0A	; 10
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     364:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
end
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	08 95       	ret

00000370 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     374:	20 91 ce 02 	lds	r18, 0x02CE
     378:	30 91 cf 02 	lds	r19, 0x02CF
     37c:	00 d0       	rcall	.+0      	; 0x37e <print_position+0xe>
     37e:	00 d0       	rcall	.+0      	; 0x380 <print_position+0x10>
     380:	00 d0       	rcall	.+0      	; 0x382 <print_position+0x12>
     382:	ed b7       	in	r30, 0x3d	; 61
     384:	fe b7       	in	r31, 0x3e	; 62
     386:	31 96       	adiw	r30, 0x01	; 1
     388:	0c eb       	ldi	r16, 0xBC	; 188
     38a:	12 e0       	ldi	r17, 0x02	; 2
     38c:	ad b7       	in	r26, 0x3d	; 61
     38e:	be b7       	in	r27, 0x3e	; 62
     390:	12 96       	adiw	r26, 0x02	; 2
     392:	1c 93       	st	X, r17
     394:	0e 93       	st	-X, r16
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	93 83       	std	Z+3, r25	; 0x03
     39e:	82 83       	std	Z+2, r24	; 0x02
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	24 83       	std	Z+4, r18	; 0x04
     3a4:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
	LCDGotoXY(0,1);
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	06 96       	adiw	r24, 0x06	; 6
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3c0:	f8 01       	movw	r30, r16
     3c2:	01 90       	ld	r0, Z+
     3c4:	00 20       	and	r0, r0
     3c6:	e9 f7       	brne	.-6      	; 0x3c2 <print_position+0x52>
     3c8:	31 97       	sbiw	r30, 0x01	; 1
     3ca:	e0 1b       	sub	r30, r16
     3cc:	f1 0b       	sbc	r31, r17
     3ce:	c8 01       	movw	r24, r16
     3d0:	6e 2f       	mov	r22, r30
     3d2:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     3d6:	20 91 98 03 	lds	r18, 0x0398
     3da:	30 91 99 03 	lds	r19, 0x0399
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <print_position+0x70>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <print_position+0x72>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <print_position+0x74>
     3e4:	ed b7       	in	r30, 0x3d	; 61
     3e6:	fe b7       	in	r31, 0x3e	; 62
     3e8:	31 96       	adiw	r30, 0x01	; 1
     3ea:	ad b7       	in	r26, 0x3d	; 61
     3ec:	be b7       	in	r27, 0x3e	; 62
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	1c 93       	st	X, r17
     3f2:	0e 93       	st	-X, r16
     3f4:	11 97       	sbiw	r26, 0x01	; 1
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	93 83       	std	Z+3, r25	; 0x03
     3fc:	82 83       	std	Z+2, r24	; 0x02
     3fe:	35 83       	std	Z+5, r19	; 0x05
     400:	24 83       	std	Z+4, r18	; 0x04
     402:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
	LCDGotoXY(8,1);
     406:	8d b7       	in	r24, 0x3d	; 61
     408:	9e b7       	in	r25, 0x3e	; 62
     40a:	06 96       	adiw	r24, 0x06	; 6
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	9e bf       	out	0x3e, r25	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	8d bf       	out	0x3d, r24	; 61
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     41e:	f8 01       	movw	r30, r16
     420:	01 90       	ld	r0, Z+
     422:	00 20       	and	r0, r0
     424:	e9 f7       	brne	.-6      	; 0x420 <print_position+0xb0>
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	e0 1b       	sub	r30, r16
     42a:	f1 0b       	sbc	r31, r17
     42c:	c8 01       	movw	r24, r16
     42e:	6e 2f       	mov	r22, r30
     430:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
end
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <move_back_XY>:
	print_position();			
end

// 1= pen down, 2= pen up
move_back_XY(int x_in, int y_in, int d)
begin
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
     444:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     446:	42 30       	cpi	r20, 0x02	; 2
     448:	51 05       	cpc	r21, r1
     44a:	19 f4       	brne	.+6      	; 0x452 <move_back_XY+0x18>
     44c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     450:	05 c0       	rjmp	.+10     	; 0x45c <move_back_XY+0x22>
	if (d==1) lower_pen();
     452:	41 30       	cpi	r20, 0x01	; 1
     454:	51 05       	cpc	r21, r1
     456:	11 f4       	brne	.+4      	; 0x45c <move_back_XY+0x22>
     458:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     45c:	1c 16       	cp	r1, r28
     45e:	1d 06       	cpc	r1, r29
     460:	0c f0       	brlt	.+2      	; 0x464 <move_back_XY+0x2a>
     462:	56 c1       	rjmp	.+684    	; 0x710 <move_back_XY+0x2d6>
     464:	10 16       	cp	r1, r16
     466:	11 06       	cpc	r1, r17
     468:	0c f0       	brlt	.+2      	; 0x46c <move_back_XY+0x32>
     46a:	52 c1       	rjmp	.+676    	; 0x710 <move_back_XY+0x2d6>
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	cd 3b       	cpi	r28, 0xBD	; 189
     470:	d8 07       	cpc	r29, r24
     472:	14 f0       	brlt	.+4      	; 0x478 <move_back_XY+0x3e>
     474:	cc eb       	ldi	r28, 0xBC	; 188
     476:	d2 e0       	ldi	r29, 0x02	; 2
     478:	b8 01       	movw	r22, r16
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	0d 3b       	cpi	r16, 0xBD	; 189
     47e:	18 07       	cpc	r17, r24
     480:	14 f0       	brlt	.+4      	; 0x486 <move_back_XY+0x4c>
     482:	6c eb       	ldi	r22, 0xBC	; 188
     484:	72 e0       	ldi	r23, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     486:	cf 30       	cpi	r28, 0x0F	; 15
     488:	d1 05       	cpc	r29, r1
     48a:	14 f4       	brge	.+4      	; 0x490 <move_back_XY+0x56>
     48c:	cf e0       	ldi	r28, 0x0F	; 15
     48e:	d0 e0       	ldi	r29, 0x00	; 0
		if(y_in<15) y_in = 15;
     490:	6f 30       	cpi	r22, 0x0F	; 15
     492:	71 05       	cpc	r23, r1
     494:	14 f4       	brge	.+4      	; 0x49a <move_back_XY+0x60>
     496:	6f e0       	ldi	r22, 0x0F	; 15
     498:	70 e0       	ldi	r23, 0x00	; 0

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     49a:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     49e:	81 ec       	ldi	r24, 0xC1	; 193
     4a0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     4a4:	80 91 7a 00 	lds	r24, 0x007A
     4a8:	80 64       	ori	r24, 0x40	; 64
     4aa:	80 93 7a 00 	sts	0x007A, r24
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
		if(y_in<15) y_in = 15;
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     4ae:	80 91 7a 00 	lds	r24, 0x007A
     4b2:	86 fd       	sbrc	r24, 6
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <move_back_XY+0x74>
		y_pos = (int)ADCL;
     4b6:	80 91 78 00 	lds	r24, 0x0078
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	90 93 99 03 	sts	0x0399, r25
     4c0:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     4c4:	40 91 98 03 	lds	r20, 0x0398
     4c8:	50 91 99 03 	lds	r21, 0x0399
     4cc:	20 91 79 00 	lds	r18, 0x0079
     4d0:	92 2f       	mov	r25, r18
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	84 0f       	add	r24, r20
     4d6:	95 1f       	adc	r25, r21
     4d8:	90 93 99 03 	sts	0x0399, r25
     4dc:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     4e0:	80 91 98 03 	lds	r24, 0x0398
     4e4:	90 91 99 03 	lds	r25, 0x0399
     4e8:	68 17       	cp	r22, r24
     4ea:	79 07       	cpc	r23, r25
     4ec:	80 f1       	brcs	.+96     	; 0x54e <move_back_XY+0x114>
     4ee:	63 c0       	rjmp	.+198    	; 0x5b6 <move_back_XY+0x17c>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4f0:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4f4:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     4f8:	80 91 7a 00 	lds	r24, 0x007A
     4fc:	80 64       	ori	r24, 0x40	; 64
     4fe:	80 93 7a 00 	sts	0x007A, r24
     502:	03 c0       	rjmp	.+6      	; 0x50a <move_back_XY+0xd0>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     504:	8b b1       	in	r24, 0x0b	; 11
     506:	8f 73       	andi	r24, 0x3F	; 63
     508:	8b b9       	out	0x0b, r24	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
     50a:	80 91 7a 00 	lds	r24, 0x007A
     50e:	86 fd       	sbrc	r24, 6
     510:	f9 cf       	rjmp	.-14     	; 0x504 <move_back_XY+0xca>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     512:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     514:	8e 2f       	mov	r24, r30
     516:	8a 95       	dec	r24
     518:	f1 f7       	brne	.-4      	; 0x516 <move_back_XY+0xdc>
	_delay_us(5);
	PORTD |= 0x80;
     51a:	5f 9a       	sbi	0x0b, 7	; 11
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
				move_negative_y();
				y_pos = (int)ADCL;
     51c:	80 91 78 00 	lds	r24, 0x0078
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	90 93 99 03 	sts	0x0399, r25
     526:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     52a:	80 91 98 03 	lds	r24, 0x0398
     52e:	90 91 99 03 	lds	r25, 0x0399
     532:	20 91 79 00 	lds	r18, 0x0079
     536:	32 2f       	mov	r19, r18
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	82 0f       	add	r24, r18
     53c:	93 1f       	adc	r25, r19
     53e:	90 93 99 03 	sts	0x0399, r25
     542:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     546:	ca 01       	movw	r24, r20
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <move_back_XY+0x10e>
     54c:	04 c0       	rjmp	.+8      	; 0x556 <move_back_XY+0x11c>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     54e:	f1 ec       	ldi	r31, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     550:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     552:	40 ed       	ldi	r20, 0xD0	; 208
     554:	57 e0       	ldi	r21, 0x07	; 7
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     556:	80 91 98 03 	lds	r24, 0x0398
     55a:	90 91 99 03 	lds	r25, 0x0399
     55e:	68 17       	cp	r22, r24
     560:	79 07       	cpc	r23, r25
     562:	30 f2       	brcs	.-116    	; 0x4f0 <move_back_XY+0xb6>
     564:	31 c0       	rjmp	.+98     	; 0x5c8 <move_back_XY+0x18e>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     566:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     56a:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     56e:	80 91 7a 00 	lds	r24, 0x007A
     572:	80 64       	ori	r24, 0x40	; 64
     574:	80 93 7a 00 	sts	0x007A, r24
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)); //stop_y();
     578:	80 91 7a 00 	lds	r24, 0x007A
     57c:	86 fd       	sbrc	r24, 6
     57e:	fc cf       	rjmp	.-8      	; 0x578 <move_back_XY+0x13e>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     580:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     582:	84 2f       	mov	r24, r20
     584:	8a 95       	dec	r24
     586:	f1 f7       	brne	.-4      	; 0x584 <move_back_XY+0x14a>
	_delay_us(5);
	PORTD |= 0x40;
     588:	5e 9a       	sbi	0x0b, 6	; 11
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)); //stop_y();
				move_positive_y();
				y_pos = (int)ADCL;
     58a:	80 91 78 00 	lds	r24, 0x0078
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	90 93 99 03 	sts	0x0399, r25
     594:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     598:	80 91 98 03 	lds	r24, 0x0398
     59c:	90 91 99 03 	lds	r25, 0x0399
     5a0:	20 91 79 00 	lds	r18, 0x0079
     5a4:	32 2f       	mov	r19, r18
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	90 93 99 03 	sts	0x0399, r25
     5b0:	80 93 98 03 	sts	0x0398, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <move_back_XY+0x180>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5b6:	51 ec       	ldi	r21, 0xC1	; 193
     5b8:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     5ba:	80 91 98 03 	lds	r24, 0x0398
     5be:	90 91 99 03 	lds	r25, 0x0399
     5c2:	86 17       	cp	r24, r22
     5c4:	97 07       	cpc	r25, r23
     5c6:	78 f2       	brcs	.-98     	; 0x566 <move_back_XY+0x12c>
				move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
				//_delay_us(500);
			end
			stop_all();
     5c8:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5cc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5d0:	80 ec       	ldi	r24, 0xC0	; 192
     5d2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     5d6:	80 91 7a 00 	lds	r24, 0x007A
     5da:	80 64       	ori	r24, 0x40	; 64
     5dc:	80 93 7a 00 	sts	0x007A, r24
			stop_all();
		end

		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     5e0:	80 91 7a 00 	lds	r24, 0x007A
     5e4:	86 fd       	sbrc	r24, 6
     5e6:	fc cf       	rjmp	.-8      	; 0x5e0 <move_back_XY+0x1a6>
		x_pos = (int)ADCL;
     5e8:	80 91 78 00 	lds	r24, 0x0078
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	90 93 cf 02 	sts	0x02CF, r25
     5f2:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     5f6:	40 91 ce 02 	lds	r20, 0x02CE
     5fa:	50 91 cf 02 	lds	r21, 0x02CF
     5fe:	20 91 79 00 	lds	r18, 0x0079
     602:	92 2f       	mov	r25, r18
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	84 0f       	add	r24, r20
     608:	95 1f       	adc	r25, r21
     60a:	90 93 cf 02 	sts	0x02CF, r25
     60e:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     612:	80 91 ce 02 	lds	r24, 0x02CE
     616:	90 91 cf 02 	lds	r25, 0x02CF
     61a:	c8 17       	cp	r28, r24
     61c:	d9 07       	cpc	r29, r25
     61e:	80 f1       	brcs	.+96     	; 0x680 <move_back_XY+0x246>
     620:	6a c0       	rjmp	.+212    	; 0x6f6 <move_back_XY+0x2bc>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     622:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     626:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     62a:	80 91 7a 00 	lds	r24, 0x007A
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	80 93 7a 00 	sts	0x007A, r24
     634:	03 c0       	rjmp	.+6      	; 0x63c <move_back_XY+0x202>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     636:	8b b1       	in	r24, 0x0b	; 11
     638:	83 7f       	andi	r24, 0xF3	; 243
     63a:	8b b9       	out	0x0b, r24	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
     63c:	80 91 7a 00 	lds	r24, 0x007A
     640:	86 fd       	sbrc	r24, 6
     642:	f9 cf       	rjmp	.-14     	; 0x636 <move_back_XY+0x1fc>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     644:	5b 98       	cbi	0x0b, 3	; 11
     646:	86 2f       	mov	r24, r22
     648:	8a 95       	dec	r24
     64a:	f1 f7       	brne	.-4      	; 0x648 <move_back_XY+0x20e>
	_delay_us(5);
	PORTD |= 0x04;
     64c:	5a 9a       	sbi	0x0b, 2	; 11
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
				move_negative_x();
				x_pos = (int)ADCL;
     64e:	80 91 78 00 	lds	r24, 0x0078
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	90 93 cf 02 	sts	0x02CF, r25
     658:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     65c:	80 91 ce 02 	lds	r24, 0x02CE
     660:	90 91 cf 02 	lds	r25, 0x02CF
     664:	20 91 79 00 	lds	r18, 0x0079
     668:	32 2f       	mov	r19, r18
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	82 0f       	add	r24, r18
     66e:	93 1f       	adc	r25, r19
     670:	90 93 cf 02 	sts	0x02CF, r25
     674:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     678:	ca 01       	movw	r24, r20
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <move_back_XY+0x240>
     67e:	04 c0       	rjmp	.+8      	; 0x688 <move_back_XY+0x24e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     680:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     682:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     684:	40 ed       	ldi	r20, 0xD0	; 208
     686:	57 e0       	ldi	r21, 0x07	; 7
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     688:	80 91 ce 02 	lds	r24, 0x02CE
     68c:	90 91 cf 02 	lds	r25, 0x02CF
     690:	c8 17       	cp	r28, r24
     692:	d9 07       	cpc	r29, r25
     694:	30 f2       	brcs	.-116    	; 0x622 <move_back_XY+0x1e8>
     696:	3a c0       	rjmp	.+116    	; 0x70c <move_back_XY+0x2d2>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     698:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     69c:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     6a0:	80 91 7a 00 	lds	r24, 0x007A
     6a4:	80 64       	ori	r24, 0x40	; 64
     6a6:	80 93 7a 00 	sts	0x007A, r24
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <move_back_XY+0x278>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     6ac:	8b b1       	in	r24, 0x0b	; 11
     6ae:	83 7f       	andi	r24, 0xF3	; 243
     6b0:	8b b9       	out	0x0b, r24	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
     6b2:	80 91 7a 00 	lds	r24, 0x007A
     6b6:	86 fd       	sbrc	r24, 6
     6b8:	f9 cf       	rjmp	.-14     	; 0x6ac <move_back_XY+0x272>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     6ba:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6bc:	86 2f       	mov	r24, r22
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <move_back_XY+0x284>
	_delay_us(5);
	PORTD |= 0x08;
     6c2:	5b 9a       	sbi	0x0b, 3	; 11
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
				move_positive_x();
				x_pos = (int)ADCL;
     6c4:	80 91 78 00 	lds	r24, 0x0078
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 cf 02 	sts	0x02CF, r25
     6ce:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     6d2:	80 91 ce 02 	lds	r24, 0x02CE
     6d6:	90 91 cf 02 	lds	r25, 0x02CF
     6da:	20 91 79 00 	lds	r18, 0x0079
     6de:	32 2f       	mov	r19, r18
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	90 93 cf 02 	sts	0x02CF, r25
     6ea:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6ee:	ca 01       	movw	r24, r20
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <move_back_XY+0x2b6>
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <move_back_XY+0x2c4>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     6f6:	70 ec       	ldi	r23, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6f8:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6fa:	40 ed       	ldi	r20, 0xD0	; 208
     6fc:	57 e0       	ldi	r21, 0x07	; 7
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     6fe:	80 91 ce 02 	lds	r24, 0x02CE
     702:	90 91 cf 02 	lds	r25, 0x02CF
     706:	8c 17       	cp	r24, r28
     708:	9d 07       	cpc	r25, r29
     70a:	30 f2       	brcs	.-116    	; 0x698 <move_back_XY+0x25e>
				move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
				_delay_us(500);
			end
			stop_all();
     70c:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     710:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24
     728:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     72a:	42 30       	cpi	r20, 0x02	; 2
     72c:	51 05       	cpc	r21, r1
     72e:	19 f4       	brne	.+6      	; 0x736 <move_to_XY+0x18>
     730:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <raise_pen>
     734:	05 c0       	rjmp	.+10     	; 0x740 <move_to_XY+0x22>
	if (d==1) lower_pen();
     736:	41 30       	cpi	r20, 0x01	; 1
     738:	51 05       	cpc	r21, r1
     73a:	11 f4       	brne	.+4      	; 0x740 <move_to_XY+0x22>
     73c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lower_pen>
	if(x_in>0 && y_in>0)
     740:	1c 16       	cp	r1, r28
     742:	1d 06       	cpc	r1, r29
     744:	0c f0       	brlt	.+2      	; 0x748 <move_to_XY+0x2a>
     746:	57 c1       	rjmp	.+686    	; 0x9f6 <move_to_XY+0x2d8>
     748:	10 16       	cp	r1, r16
     74a:	11 06       	cpc	r1, r17
     74c:	0c f0       	brlt	.+2      	; 0x750 <move_to_XY+0x32>
     74e:	53 c1       	rjmp	.+678    	; 0x9f6 <move_to_XY+0x2d8>
     750:	be 01       	movw	r22, r28
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	cd 3b       	cpi	r28, 0xBD	; 189
     756:	d8 07       	cpc	r29, r24
     758:	14 f0       	brlt	.+4      	; 0x75e <move_to_XY+0x40>
     75a:	6c eb       	ldi	r22, 0xBC	; 188
     75c:	72 e0       	ldi	r23, 0x02	; 2
     75e:	e8 01       	movw	r28, r16
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	0d 3b       	cpi	r16, 0xBD	; 189
     764:	18 07       	cpc	r17, r24
     766:	14 f0       	brlt	.+4      	; 0x76c <move_to_XY+0x4e>
     768:	cc eb       	ldi	r28, 0xBC	; 188
     76a:	d2 e0       	ldi	r29, 0x02	; 2
	begin
		if(x_in>700) x_in = 700;
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
     76c:	6f 30       	cpi	r22, 0x0F	; 15
     76e:	71 05       	cpc	r23, r1
     770:	14 f4       	brge	.+4      	; 0x776 <move_to_XY+0x58>
     772:	6f e0       	ldi	r22, 0x0F	; 15
     774:	70 e0       	ldi	r23, 0x00	; 0
		if(y_in<15) y_in = 15;
     776:	cf 30       	cpi	r28, 0x0F	; 15
     778:	d1 05       	cpc	r29, r1
     77a:	14 f4       	brge	.+4      	; 0x780 <move_to_XY+0x62>
     77c:	cf e0       	ldi	r28, 0x0F	; 15
     77e:	d0 e0       	ldi	r29, 0x00	; 0

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     780:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     784:	80 ec       	ldi	r24, 0xC0	; 192
     786:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     78a:	80 91 7a 00 	lds	r24, 0x007A
     78e:	80 64       	ori	r24, 0x40	; 64
     790:	80 93 7a 00 	sts	0x007A, r24
		if(y_in>700) y_in = 700;
		if(x_in<15) x_in = 15;
		if(y_in<15) y_in = 15;
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     794:	80 91 7a 00 	lds	r24, 0x007A
     798:	86 fd       	sbrc	r24, 6
     79a:	fc cf       	rjmp	.-8      	; 0x794 <move_to_XY+0x76>
		x_pos = (int)ADCL;
     79c:	80 91 78 00 	lds	r24, 0x0078
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 cf 02 	sts	0x02CF, r25
     7a6:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     7aa:	40 91 ce 02 	lds	r20, 0x02CE
     7ae:	50 91 cf 02 	lds	r21, 0x02CF
     7b2:	20 91 79 00 	lds	r18, 0x0079
     7b6:	92 2f       	mov	r25, r18
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	84 0f       	add	r24, r20
     7bc:	95 1f       	adc	r25, r21
     7be:	90 93 cf 02 	sts	0x02CF, r25
     7c2:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     7c6:	80 91 ce 02 	lds	r24, 0x02CE
     7ca:	90 91 cf 02 	lds	r25, 0x02CF
     7ce:	68 17       	cp	r22, r24
     7d0:	79 07       	cpc	r23, r25
     7d2:	80 f1       	brcs	.+96     	; 0x834 <move_to_XY+0x116>
     7d4:	6a c0       	rjmp	.+212    	; 0x8aa <move_to_XY+0x18c>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     7d6:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     7da:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     7de:	80 91 7a 00 	lds	r24, 0x007A
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	80 93 7a 00 	sts	0x007A, r24
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <move_to_XY+0xd2>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     7ea:	8b b1       	in	r24, 0x0b	; 11
     7ec:	83 7f       	andi	r24, 0xF3	; 243
     7ee:	8b b9       	out	0x0b, r24	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
     7f0:	80 91 7a 00 	lds	r24, 0x007A
     7f4:	86 fd       	sbrc	r24, 6
     7f6:	f9 cf       	rjmp	.-14     	; 0x7ea <move_to_XY+0xcc>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     7f8:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7fa:	8e 2f       	mov	r24, r30
     7fc:	8a 95       	dec	r24
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <move_to_XY+0xde>
	_delay_us(5);
	PORTD |= 0x04;
     800:	5a 9a       	sbi	0x0b, 2	; 11
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC)) stop_x();
				move_negative_x();
				x_pos = (int)ADCL;
     802:	80 91 78 00 	lds	r24, 0x0078
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	90 93 cf 02 	sts	0x02CF, r25
     80c:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     810:	80 91 ce 02 	lds	r24, 0x02CE
     814:	90 91 cf 02 	lds	r25, 0x02CF
     818:	20 91 79 00 	lds	r18, 0x0079
     81c:	32 2f       	mov	r19, r18
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	82 0f       	add	r24, r18
     822:	93 1f       	adc	r25, r19
     824:	90 93 cf 02 	sts	0x02CF, r25
     828:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     82c:	ca 01       	movw	r24, r20
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <move_to_XY+0x110>
     832:	04 c0       	rjmp	.+8      	; 0x83c <move_to_XY+0x11e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     834:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     836:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     838:	40 ed       	ldi	r20, 0xD0	; 208
     83a:	57 e0       	ldi	r21, 0x07	; 7
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     83c:	80 91 ce 02 	lds	r24, 0x02CE
     840:	90 91 cf 02 	lds	r25, 0x02CF
     844:	68 17       	cp	r22, r24
     846:	79 07       	cpc	r23, r25
     848:	30 f2       	brcs	.-116    	; 0x7d6 <move_to_XY+0xb8>
     84a:	3a c0       	rjmp	.+116    	; 0x8c0 <move_to_XY+0x1a2>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     84c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     850:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     854:	80 91 7a 00 	lds	r24, 0x007A
     858:	80 64       	ori	r24, 0x40	; 64
     85a:	80 93 7a 00 	sts	0x007A, r24
     85e:	03 c0       	rjmp	.+6      	; 0x866 <move_to_XY+0x148>
	_delay_ms(100);
end

void stop_x(void)
begin
	PORTD &= 0xf3;
     860:	8b b1       	in	r24, 0x0b	; 11
     862:	83 7f       	andi	r24, 0xF3	; 243
     864:	8b b9       	out	0x0b, r24	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
     866:	80 91 7a 00 	lds	r24, 0x007A
     86a:	86 fd       	sbrc	r24, 6
     86c:	f9 cf       	rjmp	.-14     	; 0x860 <move_to_XY+0x142>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     86e:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     870:	8e 2f       	mov	r24, r30
     872:	8a 95       	dec	r24
     874:	f1 f7       	brne	.-4      	; 0x872 <move_to_XY+0x154>
	_delay_us(5);
	PORTD |= 0x08;
     876:	5b 9a       	sbi	0x0b, 3	; 11
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))stop_x();
				move_positive_x();
				x_pos = (int)ADCL;
     878:	80 91 78 00 	lds	r24, 0x0078
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	90 93 cf 02 	sts	0x02CF, r25
     882:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     886:	80 91 ce 02 	lds	r24, 0x02CE
     88a:	90 91 cf 02 	lds	r25, 0x02CF
     88e:	20 91 79 00 	lds	r18, 0x0079
     892:	32 2f       	mov	r19, r18
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	82 0f       	add	r24, r18
     898:	93 1f       	adc	r25, r19
     89a:	90 93 cf 02 	sts	0x02CF, r25
     89e:	80 93 ce 02 	sts	0x02CE, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8a2:	ca 01       	movw	r24, r20
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <move_to_XY+0x186>
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <move_to_XY+0x194>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     8aa:	f0 ec       	ldi	r31, 0xC0	; 192
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8ac:	ea e1       	ldi	r30, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ae:	40 ed       	ldi	r20, 0xD0	; 208
     8b0:	57 e0       	ldi	r21, 0x07	; 7
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     8b2:	80 91 ce 02 	lds	r24, 0x02CE
     8b6:	90 91 cf 02 	lds	r25, 0x02CF
     8ba:	86 17       	cp	r24, r22
     8bc:	97 07       	cpc	r25, r23
     8be:	30 f2       	brcs	.-116    	; 0x84c <move_to_XY+0x12e>
				move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
				_delay_us(500);
			end
			stop_all();
     8c0:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     8c4:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     8c8:	81 ec       	ldi	r24, 0xC1	; 193
     8ca:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     8ce:	80 91 7a 00 	lds	r24, 0x007A
     8d2:	80 64       	ori	r24, 0x40	; 64
     8d4:	80 93 7a 00 	sts	0x007A, r24
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     8d8:	80 91 7a 00 	lds	r24, 0x007A
     8dc:	86 fd       	sbrc	r24, 6
     8de:	fc cf       	rjmp	.-8      	; 0x8d8 <move_to_XY+0x1ba>
		y_pos = (int)ADCL;
     8e0:	80 91 78 00 	lds	r24, 0x0078
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 99 03 	sts	0x0399, r25
     8ea:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     8ee:	40 91 98 03 	lds	r20, 0x0398
     8f2:	50 91 99 03 	lds	r21, 0x0399
     8f6:	20 91 79 00 	lds	r18, 0x0079
     8fa:	92 2f       	mov	r25, r18
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	84 0f       	add	r24, r20
     900:	95 1f       	adc	r25, r21
     902:	90 93 99 03 	sts	0x0399, r25
     906:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     90a:	80 91 98 03 	lds	r24, 0x0398
     90e:	90 91 99 03 	lds	r25, 0x0399
     912:	c8 17       	cp	r28, r24
     914:	d9 07       	cpc	r29, r25
     916:	80 f1       	brcs	.+96     	; 0x978 <move_to_XY+0x25a>
     918:	63 c0       	rjmp	.+198    	; 0x9e0 <move_to_XY+0x2c2>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     91a:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     91e:	70 93 7c 00 	sts	0x007C, r23
	ADCSRA |= (1<<ADSC);
     922:	80 91 7a 00 	lds	r24, 0x007A
     926:	80 64       	ori	r24, 0x40	; 64
     928:	80 93 7a 00 	sts	0x007A, r24
     92c:	03 c0       	rjmp	.+6      	; 0x934 <move_to_XY+0x216>
	PORTD &= 0xf3;
end

void stop_y(void)
begin
	PORTD &= 0x3f;
     92e:	8b b1       	in	r24, 0x0b	; 11
     930:	8f 73       	andi	r24, 0x3F	; 63
     932:	8b b9       	out	0x0b, r24	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
     934:	80 91 7a 00 	lds	r24, 0x007A
     938:	86 fd       	sbrc	r24, 6
     93a:	f9 cf       	rjmp	.-14     	; 0x92e <move_to_XY+0x210>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     93c:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     93e:	86 2f       	mov	r24, r22
     940:	8a 95       	dec	r24
     942:	f1 f7       	brne	.-4      	; 0x940 <move_to_XY+0x222>
	_delay_us(5);
	PORTD |= 0x80;
     944:	5f 9a       	sbi	0x0b, 7	; 11
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) stop_y();
				move_negative_y();
				y_pos = (int)ADCL;
     946:	80 91 78 00 	lds	r24, 0x0078
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 99 03 	sts	0x0399, r25
     950:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     954:	80 91 98 03 	lds	r24, 0x0398
     958:	90 91 99 03 	lds	r25, 0x0399
     95c:	20 91 79 00 	lds	r18, 0x0079
     960:	32 2f       	mov	r19, r18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	82 0f       	add	r24, r18
     966:	93 1f       	adc	r25, r19
     968:	90 93 99 03 	sts	0x0399, r25
     96c:	80 93 98 03 	sts	0x0398, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     970:	ca 01       	movw	r24, r20
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <move_to_XY+0x254>
     976:	04 c0       	rjmp	.+8      	; 0x980 <move_to_XY+0x262>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     978:	71 ec       	ldi	r23, 0xC1	; 193
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     97a:	6a e1       	ldi	r22, 0x1A	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     97c:	40 ed       	ldi	r20, 0xD0	; 208
     97e:	57 e0       	ldi	r21, 0x07	; 7
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     980:	80 91 98 03 	lds	r24, 0x0398
     984:	90 91 99 03 	lds	r25, 0x0399
     988:	c8 17       	cp	r28, r24
     98a:	d9 07       	cpc	r29, r25
     98c:	30 f2       	brcs	.-116    	; 0x91a <move_to_XY+0x1fc>
     98e:	31 c0       	rjmp	.+98     	; 0x9f2 <move_to_XY+0x2d4>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     990:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     994:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     998:	80 91 7a 00 	lds	r24, 0x007A
     99c:	80 64       	ori	r24, 0x40	; 64
     99e:	80 93 7a 00 	sts	0x007A, r24
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) ;//stop_y();
     9a2:	80 91 7a 00 	lds	r24, 0x007A
     9a6:	86 fd       	sbrc	r24, 6
     9a8:	fc cf       	rjmp	.-8      	; 0x9a2 <move_to_XY+0x284>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     9aa:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9ac:	84 2f       	mov	r24, r20
     9ae:	8a 95       	dec	r24
     9b0:	f1 f7       	brne	.-4      	; 0x9ae <move_to_XY+0x290>
	_delay_us(5);
	PORTD |= 0x40;
     9b2:	5e 9a       	sbi	0x0b, 6	; 11
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC)) ;//stop_y();
				move_positive_y();
				y_pos = (int)ADCL;
     9b4:	80 91 78 00 	lds	r24, 0x0078
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	90 93 99 03 	sts	0x0399, r25
     9be:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     9c2:	80 91 98 03 	lds	r24, 0x0398
     9c6:	90 91 99 03 	lds	r25, 0x0399
     9ca:	20 91 79 00 	lds	r18, 0x0079
     9ce:	32 2f       	mov	r19, r18
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	82 0f       	add	r24, r18
     9d4:	93 1f       	adc	r25, r19
     9d6:	90 93 99 03 	sts	0x0399, r25
     9da:	80 93 98 03 	sts	0x0398, r24
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <move_to_XY+0x2c6>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     9e0:	51 ec       	ldi	r21, 0xC1	; 193
     9e2:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     9e4:	80 91 98 03 	lds	r24, 0x0398
     9e8:	90 91 99 03 	lds	r25, 0x0399
     9ec:	8c 17       	cp	r24, r28
     9ee:	9d 07       	cpc	r25, r29
     9f0:	78 f2       	brcs	.-98     	; 0x990 <move_to_XY+0x272>
				move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
				//_delay_us(500);
			end
			stop_all();
     9f2:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     9f6:	0e 94 b8 01 	call	0x370	; 0x370 <print_position>
end
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <move_motor>:
		LCDstring(lcd_buffer, 10);

end

void move_motor()
begin
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
     a14:	80 91 ab 03 	lds	r24, 0x03AB
     a18:	90 91 ac 03 	lds	r25, 0x03AC
     a1c:	60 91 f4 01 	lds	r22, 0x01F4
     a20:	70 91 f5 01 	lds	r23, 0x01F5
     a24:	42 e0       	ldi	r20, 0x02	; 2
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	0e 94 8f 03 	call	0x71e	; 0x71e <move_to_XY>
     a2c:	c1 e0       	ldi	r28, 0x01	; 1
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     a30:	9e 01       	movw	r18, r28
     a32:	22 0f       	add	r18, r18
     a34:	33 1f       	adc	r19, r19
     a36:	5b ea       	ldi	r21, 0xAB	; 171
     a38:	c5 2e       	mov	r12, r21
     a3a:	53 e0       	ldi	r21, 0x03	; 3
     a3c:	d5 2e       	mov	r13, r21
     a3e:	c2 0e       	add	r12, r18
     a40:	d3 1e       	adc	r13, r19
     a42:	f6 01       	movw	r30, r12
     a44:	80 81       	ld	r24, Z
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	97 fd       	sbrc	r25, 7
     a4a:	3d c0       	rjmp	.+122    	; 0xac6 <move_motor+0xc2>
     a4c:	44 ef       	ldi	r20, 0xF4	; 244
     a4e:	e4 2e       	mov	r14, r20
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	f4 2e       	mov	r15, r20
     a54:	e2 0e       	add	r14, r18
     a56:	f3 1e       	adc	r15, r19
     a58:	f7 01       	movw	r30, r14
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	97 fd       	sbrc	r25, 7
     a60:	32 c0       	rjmp	.+100    	; 0xac6 <move_motor+0xc2>
		begin
			move_to_XY(x_vect[i],y_vect[i],d_vect[i]);
     a62:	f6 01       	movw	r30, r12
     a64:	80 81       	ld	r24, Z
     a66:	91 81       	ldd	r25, Z+1	; 0x01
     a68:	f7 01       	movw	r30, r14
     a6a:	60 81       	ld	r22, Z
     a6c:	71 81       	ldd	r23, Z+1	; 0x01
     a6e:	89 01       	movw	r16, r18
     a70:	00 53       	subi	r16, 0x30	; 48
     a72:	1d 4f       	sbci	r17, 0xFD	; 253
     a74:	f8 01       	movw	r30, r16
     a76:	40 81       	ld	r20, Z
     a78:	51 81       	ldd	r21, Z+1	; 0x01
     a7a:	0e 94 8f 03 	call	0x71e	; 0x71e <move_to_XY>
     a7e:	21 97       	sbiw	r28, 0x01	; 1
			move_back_XY(x_vect[i-1],y_vect[i-1],d_vect[i-1]);
     a80:	fe 01       	movw	r30, r28
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	df 01       	movw	r26, r30
     a88:	a5 55       	subi	r26, 0x55	; 85
     a8a:	bc 4f       	sbci	r27, 0xFC	; 252
     a8c:	8d 91       	ld	r24, X+
     a8e:	9c 91       	ld	r25, X
     a90:	df 01       	movw	r26, r30
     a92:	ac 50       	subi	r26, 0x0C	; 12
     a94:	be 4f       	sbci	r27, 0xFE	; 254
     a96:	6d 91       	ld	r22, X+
     a98:	7c 91       	ld	r23, X
     a9a:	e0 53       	subi	r30, 0x30	; 48
     a9c:	fd 4f       	sbci	r31, 0xFD	; 253
     a9e:	40 81       	ld	r20, Z
     aa0:	51 81       	ldd	r21, Z+1	; 0x01
     aa2:	0e 94 1d 02 	call	0x43a	; 0x43a <move_back_XY>
			move_to_XY(x_vect[i],y_vect[i],d_vect[i]);
     aa6:	f6 01       	movw	r30, r12
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	f7 01       	movw	r30, r14
     aae:	60 81       	ld	r22, Z
     ab0:	71 81       	ldd	r23, Z+1	; 0x01
     ab2:	f8 01       	movw	r30, r16
     ab4:	40 81       	ld	r20, Z
     ab6:	51 81       	ldd	r21, Z+1	; 0x01
     ab8:	0e 94 8f 03 	call	0x71e	; 0x71e <move_to_XY>
	int i =0;
	//_delay_ms(1000);
	//CopyStringtoLCD(LCD_hello, 0, 0);
	//_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
	for(i=1;i<100;i++)
     abc:	22 96       	adiw	r28, 0x02	; 2
     abe:	c4 36       	cpi	r28, 0x64	; 100
     ac0:	d1 05       	cpc	r29, r1
     ac2:	09 f0       	breq	.+2      	; 0xac6 <move_motor+0xc2>
     ac4:	b5 cf       	rjmp	.-150    	; 0xa30 <move_motor+0x2c>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2);
     ac6:	8c eb       	ldi	r24, 0xBC	; 188
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	6c eb       	ldi	r22, 0xBC	; 188
     acc:	72 e0       	ldi	r23, 0x02	; 2
     ace:	42 e0       	ldi	r20, 0x02	; 2
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	0e 94 8f 03 	call	0x71e	; 0x71e <move_to_XY>
end
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	df 90       	pop	r13
     ae4:	cf 90       	pop	r12
     ae6:	08 95       	ret

00000ae8 <get_frame>:
	// print where you end up
	print_position();			
end

void get_frame()
begin
     ae8:	2f 92       	push	r2
     aea:	3f 92       	push	r3
     aec:	4f 92       	push	r4
     aee:	5f 92       	push	r5
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	69 97       	sbiw	r28, 0x19	; 25
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
     b1c:	8e ef       	ldi	r24, 0xFE	; 254
     b1e:	9f ef       	ldi	r25, 0xFF	; 255
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	9e 83       	std	Y+6, r25	; 0x06
     b2a:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     b2c:	18 86       	std	Y+8, r1	; 0x08
     b2e:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
     b30:	0a e9       	ldi	r16, 0x9A	; 154
     b32:	13 e0       	ldi	r17, 0x03	; 3
     b34:	c8 01       	movw	r24, r16
     b36:	60 e1       	ldi	r22, 0x10	; 16
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	0e 94 ce 0a 	call	0x159c	; 0x159c <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     b3e:	60 91 75 04 	lds	r22, 0x0475
     b42:	70 91 76 04 	lds	r23, 0x0476
     b46:	c8 01       	movw	r24, r16
     b48:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <get_frame+0x66>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <get_frame+0x68>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <get_frame+0x6a>
     b52:	ed b7       	in	r30, 0x3d	; 61
     b54:	fe b7       	in	r31, 0x3e	; 62
     b56:	31 96       	adiw	r30, 0x01	; 1
     b58:	80 91 73 04 	lds	r24, 0x0473
     b5c:	90 91 74 04 	lds	r25, 0x0474
     b60:	ad b7       	in	r26, 0x3d	; 61
     b62:	be b7       	in	r27, 0x3e	; 62
     b64:	12 96       	adiw	r26, 0x02	; 2
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	11 97       	sbiw	r26, 0x01	; 1
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	93 83       	std	Z+3, r25	; 0x03
     b72:	82 83       	std	Z+2, r24	; 0x02
     b74:	ce 01       	movw	r24, r28
     b76:	07 96       	adiw	r24, 0x07	; 7
     b78:	95 83       	std	Z+5, r25	; 0x05
     b7a:	84 83       	std	Z+4, r24	; 0x04
     b7c:	0e 94 00 0b 	call	0x1600	; 0x1600 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     b80:	ed b7       	in	r30, 0x3d	; 61
     b82:	fe b7       	in	r31, 0x3e	; 62
     b84:	31 96       	adiw	r30, 0x01	; 1
     b86:	ad b7       	in	r26, 0x3d	; 61
     b88:	be b7       	in	r27, 0x3e	; 62
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	1c 93       	st	X, r17
     b8e:	0e 93       	st	-X, r16
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	82 e2       	ldi	r24, 0x22	; 34
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	93 83       	std	Z+3, r25	; 0x03
     b98:	82 83       	std	Z+2, r24	; 0x02
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	95 83       	std	Z+5, r25	; 0x05
     ba0:	84 83       	std	Z+4, r24	; 0x04
     ba2:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>

	LCDGotoXY(0, 0);
     ba6:	6d b7       	in	r22, 0x3d	; 61
     ba8:	7e b7       	in	r23, 0x3e	; 62
     baa:	6a 5f       	subi	r22, 0xFA	; 250
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	7e bf       	out	0x3e, r23	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	6d bf       	out	0x3d, r22	; 61
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     bc0:	f8 01       	movw	r30, r16
     bc2:	01 90       	ld	r0, Z+
     bc4:	00 20       	and	r0, r0
     bc6:	e9 f7       	brne	.-6      	; 0xbc2 <get_frame+0xda>
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	e0 1b       	sub	r30, r16
     bcc:	f1 0b       	sbc	r31, r17
     bce:	c8 01       	movw	r24, r16
     bd0:	6e 2f       	mov	r22, r30
     bd2:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     bda:	89 e0       	ldi	r24, 0x09	; 9
     bdc:	a8 2e       	mov	r10, r24
     bde:	b1 2c       	mov	r11, r1
     be0:	ac 0e       	add	r10, r28
     be2:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
     be4:	48 01       	movw	r8, r16
     be6:	b6 e4       	ldi	r27, 0x46	; 70
     be8:	2b 2e       	mov	r2, r27
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	3b 2e       	mov	r3, r27
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     bee:	0c eb       	ldi	r16, 0xBC	; 188
     bf0:	12 e0       	ldi	r17, 0x02	; 2
     bf2:	a5 e5       	ldi	r26, 0x55	; 85
     bf4:	4a 2e       	mov	r4, r26
     bf6:	a1 e0       	ldi	r26, 0x01	; 1
     bf8:	5a 2e       	mov	r5, r26
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     bfa:	fb e4       	ldi	r31, 0x4B	; 75
     bfc:	6f 2e       	mov	r6, r31
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	7f 2e       	mov	r7, r31
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     c02:	ee ef       	ldi	r30, 0xFE	; 254
     c04:	ce 2e       	mov	r12, r30
     c06:	ef ef       	ldi	r30, 0xFF	; 255
     c08:	de 2e       	mov	r13, r30
     c0a:	f7 c0       	rjmp	.+494    	; 0xdfa <get_frame+0x312>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     c0c:	60 91 75 04 	lds	r22, 0x0475
     c10:	70 91 76 04 	lds	r23, 0x0476
     c14:	84 e3       	ldi	r24, 0x34	; 52
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputs>
	fscanf(stdin, "%s", buffer) ;
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <get_frame+0x136>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <get_frame+0x138>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <get_frame+0x13a>
     c22:	ed b7       	in	r30, 0x3d	; 61
     c24:	fe b7       	in	r31, 0x3e	; 62
     c26:	31 96       	adiw	r30, 0x01	; 1
     c28:	80 91 73 04 	lds	r24, 0x0473
     c2c:	90 91 74 04 	lds	r25, 0x0474
     c30:	ad b7       	in	r26, 0x3d	; 61
     c32:	be b7       	in	r27, 0x3e	; 62
     c34:	12 96       	adiw	r26, 0x02	; 2
     c36:	9c 93       	st	X, r25
     c38:	8e 93       	st	-X, r24
     c3a:	11 97       	sbiw	r26, 0x01	; 1
     c3c:	69 e3       	ldi	r22, 0x39	; 57
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	73 83       	std	Z+3, r23	; 0x03
     c42:	62 83       	std	Z+2, r22	; 0x02
     c44:	b5 82       	std	Z+5, r11	; 0x05
     c46:	a4 82       	std	Z+4, r10	; 0x04
     c48:	0e 94 00 0b 	call	0x1600	; 0x1600 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <get_frame+0x166>
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <get_frame+0x168>
     c50:	ed b7       	in	r30, 0x3d	; 61
     c52:	fe b7       	in	r31, 0x3e	; 62
     c54:	31 96       	adiw	r30, 0x01	; 1
     c56:	ad b7       	in	r26, 0x3d	; 61
     c58:	be b7       	in	r27, 0x3e	; 62
     c5a:	12 96       	adiw	r26, 0x02	; 2
     c5c:	bc 92       	st	X, r11
     c5e:	ae 92       	st	-X, r10
     c60:	11 97       	sbiw	r26, 0x01	; 1
     c62:	6c e3       	ldi	r22, 0x3C	; 60
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	73 83       	std	Z+3, r23	; 0x03
     c68:	62 83       	std	Z+2, r22	; 0x02
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	8c 0f       	add	r24, r28
     c70:	9d 1f       	adc	r25, r29
     c72:	95 83       	std	Z+5, r25	; 0x05
     c74:	84 83       	std	Z+4, r24	; 0x04
     c76:	a3 e0       	ldi	r26, 0x03	; 3
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	ac 0f       	add	r26, r28
     c7c:	bd 1f       	adc	r27, r29
     c7e:	b7 83       	std	Z+7, r27	; 0x07
     c80:	a6 83       	std	Z+6, r26	; 0x06
     c82:	65 e0       	ldi	r22, 0x05	; 5
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	6c 0f       	add	r22, r28
     c88:	7d 1f       	adc	r23, r29
     c8a:	71 87       	std	Z+9, r23	; 0x09
     c8c:	60 87       	std	Z+8, r22	; 0x08
     c8e:	0e 94 42 0b 	call	0x1684	; 0x1684 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	ed b7       	in	r30, 0x3d	; 61
     c9c:	fe b7       	in	r31, 0x3e	; 62
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	ad b7       	in	r26, 0x3d	; 61
     ca2:	be b7       	in	r27, 0x3e	; 62
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	8c 92       	st	X, r8
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	12 96       	adiw	r26, 0x02	; 2
     cac:	9c 92       	st	X, r9
     cae:	33 82       	std	Z+3, r3	; 0x03
     cb0:	22 82       	std	Z+2, r2	; 0x02
     cb2:	f5 82       	std	Z+5, r15	; 0x05
     cb4:	e4 82       	std	Z+4, r14	; 0x04
     cb6:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
	LCDGotoXY(11, 0);
     cba:	6d b7       	in	r22, 0x3d	; 61
     cbc:	7e b7       	in	r23, 0x3e	; 62
     cbe:	6a 5f       	subi	r22, 0xFA	; 250
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	7e bf       	out	0x3e, r23	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	6d bf       	out	0x3d, r22	; 61
     ccc:	8b e0       	ldi	r24, 0x0B	; 11
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     cd4:	c4 01       	movw	r24, r8
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
	LCDstring(buffer,15);
     ce4:	c5 01       	movw	r24, r10
     ce6:	6f e0       	ldi	r22, 0x0F	; 15
     ce8:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     cec:	49 81       	ldd	r20, Y+1	; 0x01
     cee:	5a 81       	ldd	r21, Y+2	; 0x02
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	4f 3f       	cpi	r20, 0xFF	; 255
     cf4:	57 07       	cpc	r21, r23
     cf6:	0c f4       	brge	.+2      	; 0xcfa <get_frame+0x212>
     cf8:	5a c0       	rjmp	.+180    	; 0xdae <get_frame+0x2c6>
     cfa:	2b 81       	ldd	r18, Y+3	; 0x03
     cfc:	3c 81       	ldd	r19, Y+4	; 0x04
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	2f 3f       	cpi	r18, 0xFF	; 255
     d02:	38 07       	cpc	r19, r24
     d04:	0c f4       	brge	.+2      	; 0xd08 <get_frame+0x220>
     d06:	53 c0       	rjmp	.+166    	; 0xdae <get_frame+0x2c6>
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	af ef       	ldi	r26, 0xFF	; 255
     d0e:	8f 3f       	cpi	r24, 0xFF	; 255
     d10:	9a 07       	cpc	r25, r26
     d12:	0c f4       	brge	.+2      	; 0xd16 <get_frame+0x22e>
     d14:	4c c0       	rjmp	.+152    	; 0xdae <get_frame+0x2c6>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     d16:	6d b7       	in	r22, 0x3d	; 61
     d18:	7e b7       	in	r23, 0x3e	; 62
     d1a:	6a 50       	subi	r22, 0x0A	; 10
     d1c:	70 40       	sbci	r23, 0x00	; 0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	7e bf       	out	0x3e, r23	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	6d bf       	out	0x3d, r22	; 61
     d28:	ed b7       	in	r30, 0x3d	; 61
     d2a:	fe b7       	in	r31, 0x3e	; 62
     d2c:	31 96       	adiw	r30, 0x01	; 1
     d2e:	ad b7       	in	r26, 0x3d	; 61
     d30:	be b7       	in	r27, 0x3e	; 62
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	1c 93       	st	X, r17
     d36:	0e 93       	st	-X, r16
     d38:	11 97       	sbiw	r26, 0x01	; 1
     d3a:	73 82       	std	Z+3, r7	; 0x03
     d3c:	62 82       	std	Z+2, r6	; 0x02
     d3e:	55 83       	std	Z+5, r21	; 0x05
     d40:	44 83       	std	Z+4, r20	; 0x04
     d42:	37 83       	std	Z+7, r19	; 0x07
     d44:	26 83       	std	Z+6, r18	; 0x06
     d46:	91 87       	std	Z+9, r25	; 0x09
     d48:	80 87       	std	Z+8, r24	; 0x08
     d4a:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
		LCDGotoXY(0, 0);
     d4e:	6d b7       	in	r22, 0x3d	; 61
     d50:	7e b7       	in	r23, 0x3e	; 62
     d52:	66 5f       	subi	r22, 0xF6	; 246
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	7e bf       	out	0x3e, r23	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	6d bf       	out	0x3d, r22	; 61
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     d68:	c8 01       	movw	r24, r16
     d6a:	6a e0       	ldi	r22, 0x0A	; 10
     d6c:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
		x_vect[i] = x;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	d7 01       	movw	r26, r14
     d76:	aa 0f       	add	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	fd 01       	movw	r30, r26
     d7c:	e5 55       	subi	r30, 0x55	; 85
     d7e:	fc 4f       	sbci	r31, 0xFC	; 252
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	80 83       	st	Z, r24
		y_vect[i] = y;
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	fd 01       	movw	r30, r26
     d8a:	ec 50       	subi	r30, 0x0C	; 12
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	80 83       	st	Z, r24
		d_vect[i] = d;
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	a0 53       	subi	r26, 0x30	; 48
     d98:	bd 4f       	sbci	r27, 0xFD	; 253
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	9c 93       	st	X, r25
     d9e:	8e 93       	st	-X, r24
		x=-2;
     da0:	da 82       	std	Y+2, r13	; 0x02
     da2:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     da4:	dc 82       	std	Y+4, r13	; 0x04
     da6:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     da8:	de 82       	std	Y+6, r13	; 0x06
     daa:	cd 82       	std	Y+5, r12	; 0x05
     dac:	23 c0       	rjmp	.+70     	; 0xdf4 <get_frame+0x30c>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <get_frame+0x2c8>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <get_frame+0x2ca>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <get_frame+0x2cc>
     db4:	ed b7       	in	r30, 0x3d	; 61
     db6:	fe b7       	in	r31, 0x3e	; 62
     db8:	31 96       	adiw	r30, 0x01	; 1
     dba:	ad b7       	in	r26, 0x3d	; 61
     dbc:	be b7       	in	r27, 0x3e	; 62
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	1c 93       	st	X, r17
     dc2:	0e 93       	st	-X, r16
     dc4:	11 97       	sbiw	r26, 0x01	; 1
     dc6:	53 82       	std	Z+3, r5	; 0x03
     dc8:	42 82       	std	Z+2, r4	; 0x02
     dca:	f5 82       	std	Z+5, r15	; 0x05
     dcc:	e4 82       	std	Z+4, r14	; 0x04
     dce:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
		LCDGotoXY(0, 0);
     dd2:	6d b7       	in	r22, 0x3d	; 61
     dd4:	7e b7       	in	r23, 0x3e	; 62
     dd6:	6a 5f       	subi	r22, 0xFA	; 250
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	7e bf       	out	0x3e, r23	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	6d bf       	out	0x3d, r22	; 61
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     dec:	c8 01       	movw	r24, r16
     dee:	6a e0       	ldi	r22, 0x0A	; 10
     df0:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     df4:	08 94       	sec
     df6:	e1 1c       	adc	r14, r1
     df8:	f1 1c       	adc	r15, r1
     dfa:	8f 81       	ldd	r24, Y+7	; 0x07
     dfc:	98 85       	ldd	r25, Y+8	; 0x08
     dfe:	e8 16       	cp	r14, r24
     e00:	f9 06       	cpc	r15, r25
     e02:	08 f4       	brcc	.+2      	; 0xe06 <get_frame+0x31e>
     e04:	03 cf       	rjmp	.-506    	; 0xc0c <get_frame+0x124>
		LCDstring(lcd_buffer, 10);
	}
	//_delay_ms(1000);
  end
	//	_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     e06:	00 d0       	rcall	.+0      	; 0xe08 <get_frame+0x320>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <get_frame+0x322>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <get_frame+0x324>
     e0c:	ed b7       	in	r30, 0x3d	; 61
     e0e:	fe b7       	in	r31, 0x3e	; 62
     e10:	31 96       	adiw	r30, 0x01	; 1
     e12:	0c eb       	ldi	r16, 0xBC	; 188
     e14:	12 e0       	ldi	r17, 0x02	; 2
     e16:	ad b7       	in	r26, 0x3d	; 61
     e18:	be b7       	in	r27, 0x3e	; 62
     e1a:	12 96       	adiw	r26, 0x02	; 2
     e1c:	1c 93       	st	X, r17
     e1e:	0e 93       	st	-X, r16
     e20:	11 97       	sbiw	r26, 0x01	; 1
     e22:	81 e6       	ldi	r24, 0x61	; 97
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	93 83       	std	Z+3, r25	; 0x03
     e28:	82 83       	std	Z+2, r24	; 0x02
     e2a:	f5 82       	std	Z+5, r15	; 0x05
     e2c:	e4 82       	std	Z+4, r14	; 0x04
     e2e:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
		LCDGotoXY(0, 0);
     e32:	6d b7       	in	r22, 0x3d	; 61
     e34:	7e b7       	in	r23, 0x3e	; 62
     e36:	6a 5f       	subi	r22, 0xFA	; 250
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	7e bf       	out	0x3e, r23	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	6d bf       	out	0x3d, r22	; 61
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     e4c:	c8 01       	movw	r24, r16
     e4e:	6a e0       	ldi	r22, 0x0A	; 10
     e50:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     e54:	20 91 ab 03 	lds	r18, 0x03AB
     e58:	30 91 ac 03 	lds	r19, 0x03AC
     e5c:	40 91 ad 03 	lds	r20, 0x03AD
     e60:	50 91 ae 03 	lds	r21, 0x03AE
     e64:	60 91 af 03 	lds	r22, 0x03AF
     e68:	70 91 b0 03 	lds	r23, 0x03B0
     e6c:	e0 90 b1 03 	lds	r14, 0x03B1
     e70:	f0 90 b2 03 	lds	r15, 0x03B2
     e74:	8d b7       	in	r24, 0x3d	; 61
     e76:	9e b7       	in	r25, 0x3e	; 62
     e78:	0c 97       	sbiw	r24, 0x0c	; 12
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	9e bf       	out	0x3e, r25	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	8d bf       	out	0x3d, r24	; 61
     e84:	ed b7       	in	r30, 0x3d	; 61
     e86:	fe b7       	in	r31, 0x3e	; 62
     e88:	31 96       	adiw	r30, 0x01	; 1
     e8a:	ad b7       	in	r26, 0x3d	; 61
     e8c:	be b7       	in	r27, 0x3e	; 62
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	1c 93       	st	X, r17
     e92:	0e 93       	st	-X, r16
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	8d e6       	ldi	r24, 0x6D	; 109
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	82 83       	std	Z+2, r24	; 0x02
     e9e:	35 83       	std	Z+5, r19	; 0x05
     ea0:	24 83       	std	Z+4, r18	; 0x04
     ea2:	57 83       	std	Z+7, r21	; 0x07
     ea4:	46 83       	std	Z+6, r20	; 0x06
     ea6:	71 87       	std	Z+9, r23	; 0x09
     ea8:	60 87       	std	Z+8, r22	; 0x08
     eaa:	f3 86       	std	Z+11, r15	; 0x0b
     eac:	e2 86       	std	Z+10, r14	; 0x0a
     eae:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
		LCDGotoXY(0, 0);
     eb2:	6d b7       	in	r22, 0x3d	; 61
     eb4:	7e b7       	in	r23, 0x3e	; 62
     eb6:	64 5f       	subi	r22, 0xF4	; 244
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	7e bf       	out	0x3e, r23	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	6d bf       	out	0x3d, r22	; 61
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     ecc:	c8 01       	movw	r24, r16
     ece:	6a e0       	ldi	r22, 0x0A	; 10
     ed0:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     ed4:	20 91 f4 01 	lds	r18, 0x01F4
     ed8:	30 91 f5 01 	lds	r19, 0x01F5
     edc:	40 91 f6 01 	lds	r20, 0x01F6
     ee0:	50 91 f7 01 	lds	r21, 0x01F7
     ee4:	60 91 f8 01 	lds	r22, 0x01F8
     ee8:	70 91 f9 01 	lds	r23, 0x01F9
     eec:	e0 90 fa 01 	lds	r14, 0x01FA
     ef0:	f0 90 fb 01 	lds	r15, 0x01FB
     ef4:	8d b7       	in	r24, 0x3d	; 61
     ef6:	9e b7       	in	r25, 0x3e	; 62
     ef8:	0c 97       	sbiw	r24, 0x0c	; 12
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	9e bf       	out	0x3e, r25	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	8d bf       	out	0x3d, r24	; 61
     f04:	ed b7       	in	r30, 0x3d	; 61
     f06:	fe b7       	in	r31, 0x3e	; 62
     f08:	31 96       	adiw	r30, 0x01	; 1
     f0a:	ad b7       	in	r26, 0x3d	; 61
     f0c:	be b7       	in	r27, 0x3e	; 62
     f0e:	12 96       	adiw	r26, 0x02	; 2
     f10:	1c 93       	st	X, r17
     f12:	0e 93       	st	-X, r16
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	87 e7       	ldi	r24, 0x77	; 119
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	93 83       	std	Z+3, r25	; 0x03
     f1c:	82 83       	std	Z+2, r24	; 0x02
     f1e:	35 83       	std	Z+5, r19	; 0x05
     f20:	24 83       	std	Z+4, r18	; 0x04
     f22:	57 83       	std	Z+7, r21	; 0x07
     f24:	46 83       	std	Z+6, r20	; 0x06
     f26:	71 87       	std	Z+9, r23	; 0x09
     f28:	60 87       	std	Z+8, r22	; 0x08
     f2a:	f3 86       	std	Z+11, r15	; 0x0b
     f2c:	e2 86       	std	Z+10, r14	; 0x0a
     f2e:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
		LCDGotoXY(0, 1);
     f32:	6d b7       	in	r22, 0x3d	; 61
     f34:	7e b7       	in	r23, 0x3e	; 62
     f36:	64 5f       	subi	r22, 0xF4	; 244
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	7e bf       	out	0x3e, r23	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	6d bf       	out	0x3d, r22	; 61
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     f4c:	c8 01       	movw	r24, r16
     f4e:	6a e0       	ldi	r22, 0x0A	; 10
     f50:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     f54:	20 91 d0 02 	lds	r18, 0x02D0
     f58:	30 91 d1 02 	lds	r19, 0x02D1
     f5c:	40 91 d2 02 	lds	r20, 0x02D2
     f60:	50 91 d3 02 	lds	r21, 0x02D3
     f64:	60 91 d4 02 	lds	r22, 0x02D4
     f68:	70 91 d5 02 	lds	r23, 0x02D5
     f6c:	e0 90 d6 02 	lds	r14, 0x02D6
     f70:	f0 90 d7 02 	lds	r15, 0x02D7
     f74:	8d b7       	in	r24, 0x3d	; 61
     f76:	9e b7       	in	r25, 0x3e	; 62
     f78:	0c 97       	sbiw	r24, 0x0c	; 12
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	9e bf       	out	0x3e, r25	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	8d bf       	out	0x3d, r24	; 61
     f84:	ed b7       	in	r30, 0x3d	; 61
     f86:	fe b7       	in	r31, 0x3e	; 62
     f88:	31 96       	adiw	r30, 0x01	; 1
     f8a:	ad b7       	in	r26, 0x3d	; 61
     f8c:	be b7       	in	r27, 0x3e	; 62
     f8e:	12 96       	adiw	r26, 0x02	; 2
     f90:	1c 93       	st	X, r17
     f92:	0e 93       	st	-X, r16
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	81 e8       	ldi	r24, 0x81	; 129
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	93 83       	std	Z+3, r25	; 0x03
     f9c:	82 83       	std	Z+2, r24	; 0x02
     f9e:	35 83       	std	Z+5, r19	; 0x05
     fa0:	24 83       	std	Z+4, r18	; 0x04
     fa2:	57 83       	std	Z+7, r21	; 0x07
     fa4:	46 83       	std	Z+6, r20	; 0x06
     fa6:	71 87       	std	Z+9, r23	; 0x09
     fa8:	60 87       	std	Z+8, r22	; 0x08
     faa:	f3 86       	std	Z+11, r15	; 0x0b
     fac:	e2 86       	std	Z+10, r14	; 0x0a
     fae:	0e 94 11 0b 	call	0x1622	; 0x1622 <sprintf>
		LCDGotoXY(10, 0);
     fb2:	6d b7       	in	r22, 0x3d	; 61
     fb4:	7e b7       	in	r23, 0x3e	; 62
     fb6:	64 5f       	subi	r22, 0xF4	; 244
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	7e bf       	out	0x3e, r23	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	6d bf       	out	0x3d, r22	; 61
     fc4:	8a e0       	ldi	r24, 0x0A	; 10
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     fcc:	c8 01       	movw	r24, r16
     fce:	6a e0       	ldi	r22, 0x0A	; 10
     fd0:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCDstring>

end
     fd4:	69 96       	adiw	r28, 0x19	; 25
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	2f 90       	pop	r2
    1004:	08 95       	ret

00001006 <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    1006:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <LCDinit>
	LCDcursorOFF();
    100a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <LCDcursorOFF>
	LCDclr();	//clear the display
    100e:	0e 94 84 08 	call	0x1108	; 0x1108 <LCDclr>
	LCDGotoXY(0,0);
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    101a:	8c e8       	ldi	r24, 0x8C	; 140
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 b0 08 	call	0x1160	; 0x1160 <CopyStringtoLCD>
	LCD_char_count = 0;
    1026:	10 92 cd 02 	sts	0x02CD, r1
end
    102a:	08 95       	ret

0000102c <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
    102c:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xef;    // all outputs - bottom 2 are USART top 6 are motor control
    102e:	8f ee       	ldi	r24, 0xEF	; 239
    1030:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
    1032:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x10;    // start with no power and a pullup on D.4
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	8b b9       	out	0x0b, r24	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
    1038:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
    103c:	ec e7       	ldi	r30, 0x7C	; 124
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	10 82       	st	Z, r1
	ADCSRA = 0;
    1042:	aa e7       	ldi	r26, 0x7A	; 122
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
    1048:	80 e4       	ldi	r24, 0x40	; 64
    104a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
    104c:	87 e8       	ldi	r24, 0x87	; 135
    104e:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
    1050:	08 95       	ret

00001052 <main>:
end

// --- Main Program ----------------------------------
int main(void) {
  
  initialize();
    1052:	0e 94 16 08 	call	0x102c	; 0x102c <initialize>
  stop_all();
    1056:	0e 94 20 01 	call	0x240	; 0x240 <stop_all>
	LCD_init();
    105a:	0e 94 03 08 	call	0x1006	; 0x1006 <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
    105e:	0e 94 bb 09 	call	0x1376	; 0x1376 <uart_init>
  stdout = stdin = stderr = &uart_str;
    1062:	8b e8       	ldi	r24, 0x8B	; 139
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	90 93 78 04 	sts	0x0478, r25
    106a:	80 93 77 04 	sts	0x0477, r24
    106e:	90 93 74 04 	sts	0x0474, r25
    1072:	80 93 73 04 	sts	0x0473, r24
    1076:	90 93 76 04 	sts	0x0476, r25
    107a:	80 93 75 04 	sts	0x0475, r24
    107e:	9a e1       	ldi	r25, 0x1A	; 26
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
    1080:	5f 98       	cbi	0x0b, 7	; 11
    1082:	89 2f       	mov	r24, r25
    1084:	8a 95       	dec	r24
    1086:	f1 f7       	brne	.-4      	; 0x1084 <main+0x32>
	_delay_us(5);
	PORTD |= 0x40;
    1088:	5e 9a       	sbi	0x0b, 6	; 11
    108a:	fa cf       	rjmp	.-12     	; 0x1080 <main+0x2e>

0000108c <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    108c:	28 2f       	mov	r18, r24
    108e:	20 7f       	andi	r18, 0xF0	; 240
    1090:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1092:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1094:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1096:	20 e4       	ldi	r18, 0x40	; 64
    1098:	3f e1       	ldi	r19, 0x1F	; 31
    109a:	f9 01       	movw	r30, r18
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    10a0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    10a2:	40 98       	cbi	0x08, 0	; 8
    10a4:	f9 01       	movw	r30, r18
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	44 e0       	ldi	r20, 0x04	; 4
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	4a 95       	dec	r20
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <LCDsendChar+0x22>
    10b6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    10b8:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    10ba:	42 9a       	sbi	0x08, 2	; 8
    10bc:	c9 01       	movw	r24, r18
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    10c2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    10c4:	40 98       	cbi	0x08, 0	; 8
    10c6:	c9 01       	movw	r24, r18
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    10cc:	08 95       	ret

000010ce <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    10ce:	28 2f       	mov	r18, r24
    10d0:	20 7f       	andi	r18, 0xF0	; 240
    10d2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    10d4:	42 9a       	sbi	0x08, 2	; 8
    10d6:	20 e4       	ldi	r18, 0x40	; 64
    10d8:	3f e1       	ldi	r19, 0x1F	; 31
    10da:	f9 01       	movw	r30, r18
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    10e0:	42 98       	cbi	0x08, 2	; 8
    10e2:	f9 01       	movw	r30, r18
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	54 e0       	ldi	r21, 0x04	; 4
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	5a 95       	dec	r21
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <LCDsendCommand+0x1e>
    10f4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    10f6:	42 9a       	sbi	0x08, 2	; 8
    10f8:	c9 01       	movw	r24, r18
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    10fe:	42 98       	cbi	0x08, 2	; 8
    1100:	c9 01       	movw	r24, r18
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    1106:	08 95       	ret

00001108 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    110e:	08 95       	ret

00001110 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    1116:	08 95       	ret

00001118 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	49 f0       	breq	.+18     	; 0x1138 <LCDstring+0x20>
    1126:	ec 01       	movw	r28, r24
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    112c:	89 91       	ld	r24, Y+
    112e:	0e 94 46 08 	call	0x108c	; 0x108c <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1132:	1f 5f       	subi	r17, 0xFF	; 255
    1134:	10 17       	cp	r17, r16
    1136:	d0 f3       	brcs	.-12     	; 0x112c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1142:	62 30       	cpi	r22, 0x02	; 2
    1144:	31 f0       	breq	.+12     	; 0x1152 <LCDGotoXY+0x10>
    1146:	63 30       	cpi	r22, 0x03	; 3
    1148:	31 f0       	breq	.+12     	; 0x1156 <LCDGotoXY+0x14>
    114a:	61 30       	cpi	r22, 0x01	; 1
    114c:	29 f4       	brne	.+10     	; 0x1158 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    114e:	80 5c       	subi	r24, 0xC0	; 192
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1152:	8c 5e       	subi	r24, 0xEC	; 236
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1156:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
	
}
    115e:	08 95       	ret

00001160 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    116a:	64 2f       	mov	r22, r20
    116c:	0e 94 a1 08 	call	0x1142	; 0x1142 <LCDGotoXY>
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	03 c0       	rjmp	.+6      	; 0x117a <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1174:	0e 94 46 08 	call	0x108c	; 0x108c <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1178:	1f 5f       	subi	r17, 0xFF	; 255
    117a:	fe 01       	movw	r30, r28
    117c:	e1 0f       	add	r30, r17
    117e:	f1 1d       	adc	r31, r1
    1180:	84 91       	lpm	r24, Z+
    1182:	88 23       	and	r24, r24
    1184:	b9 f7       	brne	.-18     	; 0x1174 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	08 95       	ret

0000118e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    118e:	ef 92       	push	r14
    1190:	ff 92       	push	r15
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	7c 01       	movw	r14, r24
    119c:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    119e:	11 0f       	add	r17, r17
    11a0:	11 0f       	add	r17, r17
    11a2:	11 0f       	add	r17, r17
    11a4:	10 64       	ori	r17, 0x40	; 64
    11a6:	c0 e0       	ldi	r28, 0x00	; 0
    11a8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    11aa:	f7 01       	movw	r30, r14
    11ac:	ec 0f       	add	r30, r28
    11ae:	fd 1f       	adc	r31, r29
    11b0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    11b2:	81 2f       	mov	r24, r17
    11b4:	8c 0f       	add	r24, r28
    11b6:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
		LCDsendChar(pcc);
    11ba:	80 2f       	mov	r24, r16
    11bc:	0e 94 46 08 	call	0x108c	; 0x108c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    11c0:	21 96       	adiw	r28, 0x01	; 1
    11c2:	c8 30       	cpi	r28, 0x08	; 8
    11c4:	d1 05       	cpc	r29, r1
    11c6:	89 f7       	brne	.-30     	; 0x11aa <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	08 95       	ret

000011d6 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	80 e6       	ldi	r24, 0x60	; 96
    11de:	9a ee       	ldi	r25, 0xEA	; 234
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    11e4:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    11e6:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    11e8:	87 b1       	in	r24, 0x07	; 7
    11ea:	80 6f       	ori	r24, 0xF0	; 240
    11ec:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    11ee:	87 b1       	in	r24, 0x07	; 7
    11f0:	87 60       	ori	r24, 0x07	; 7
    11f2:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    11f4:	80 e3       	ldi	r24, 0x30	; 48
    11f6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    11f8:	42 9a       	sbi	0x08, 2	; 8
    11fa:	20 e4       	ldi	r18, 0x40	; 64
    11fc:	3f e1       	ldi	r19, 0x1F	; 31
    11fe:	f9 01       	movw	r30, r18
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1204:	42 98       	cbi	0x08, 2	; 8
    1206:	f9 01       	movw	r30, r18
    1208:	31 97       	sbiw	r30, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    120c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    120e:	42 9a       	sbi	0x08, 2	; 8
    1210:	c9 01       	movw	r24, r18
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1216:	42 98       	cbi	0x08, 2	; 8
    1218:	c9 01       	movw	r24, r18
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1222:	42 9a       	sbi	0x08, 2	; 8
    1224:	c9 01       	movw	r24, r18
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    122a:	42 98       	cbi	0x08, 2	; 8
    122c:	c9 01       	movw	r24, r18
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1232:	88 e2       	ldi	r24, 0x28	; 40
    1234:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1238:	8c e0       	ldi	r24, 0x0C	; 12
    123a:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
    123e:	cc e1       	ldi	r28, 0x1C	; 28
    1240:	d1 e0       	ldi	r29, 0x01	; 1
    1242:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1244:	16 2f       	mov	r17, r22
    1246:	1f 5f       	subi	r17, 0xFF	; 255
    1248:	ce 01       	movw	r24, r28
    124a:	0e 94 c7 08 	call	0x118e	; 0x118e <LCDdefinechar>
    124e:	28 96       	adiw	r28, 0x08	; 8
    1250:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1252:	18 30       	cpi	r17, 0x08	; 8
    1254:	b9 f7       	brne	.-18     	; 0x1244 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	08 95       	ret

0000125e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	08 2f       	mov	r16, r24
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1268:	8e e1       	ldi	r24, 0x1E	; 30
    126a:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    126e:	1f 5f       	subi	r17, 0xFF	; 255
    1270:	10 17       	cp	r17, r16
    1272:	d0 f3       	brcs	.-12     	; 0x1268 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	08 95       	ret

0000127a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	08 2f       	mov	r16, r24
    1280:	10 e0       	ldi	r17, 0x00	; 0
    1282:	04 c0       	rjmp	.+8      	; 0x128c <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1284:	88 e1       	ldi	r24, 0x18	; 24
    1286:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    128a:	1f 5f       	subi	r17, 0xFF	; 255
    128c:	10 17       	cp	r17, r16
    128e:	d0 f3       	brcs	.-12     	; 0x1284 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1296:	8e e0       	ldi	r24, 0x0E	; 14
    1298:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    129c:	08 95       	ret

0000129e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    129e:	8f e0       	ldi	r24, 0x0F	; 15
    12a0:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    12a4:	08 95       	ret

000012a6 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    12a6:	8c e0       	ldi	r24, 0x0C	; 12
    12a8:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    12ac:	08 95       	ret

000012ae <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    12b4:	08 95       	ret

000012b6 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    12b6:	8c e0       	ldi	r24, 0x0C	; 12
    12b8:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
}
    12bc:	08 95       	ret

000012be <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	08 2f       	mov	r16, r24
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    12c8:	80 e1       	ldi	r24, 0x10	; 16
    12ca:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    12ce:	1f 5f       	subi	r17, 0xFF	; 255
    12d0:	10 17       	cp	r17, r16
    12d2:	d0 f3       	brcs	.-12     	; 0x12c8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	08 2f       	mov	r16, r24
    12e0:	10 e0       	ldi	r17, 0x00	; 0
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    12e4:	84 e1       	ldi	r24, 0x14	; 20
    12e6:	0e 94 67 08 	call	0x10ce	; 0x10ce <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    12ea:	1f 5f       	subi	r17, 0xFF	; 255
    12ec:	10 17       	cp	r17, r16
    12ee:	d0 f3       	brcs	.-12     	; 0x12e4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1306:	96 e0       	ldi	r25, 0x06	; 6
    1308:	89 9f       	mul	r24, r25
    130a:	c0 01       	movw	r24, r0
    130c:	11 24       	eor	r1, r1
    130e:	24 2f       	mov	r18, r20
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	ac 01       	movw	r20, r24
    1314:	42 9f       	mul	r20, r18
    1316:	c0 01       	movw	r24, r0
    1318:	43 9f       	mul	r20, r19
    131a:	90 0d       	add	r25, r0
    131c:	52 9f       	mul	r21, r18
    131e:	90 0d       	add	r25, r0
    1320:	11 24       	eor	r1, r1
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divmodhi4>
    1328:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    132a:	cb 01       	movw	r24, r22
    132c:	66 e0       	ldi	r22, 0x06	; 6
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
    1334:	e8 2e       	mov	r14, r24
    1336:	ff 24       	eor	r15, r15
    1338:	00 e0       	ldi	r16, 0x00	; 0
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	12 c0       	rjmp	.+36     	; 0x1362 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    133e:	c8 01       	movw	r24, r16
    1340:	05 96       	adiw	r24, 0x05	; 5
    1342:	c8 17       	cp	r28, r24
    1344:	d9 07       	cpc	r29, r25
    1346:	10 f0       	brcs	.+4      	; 0x134c <LCDprogressBar+0x56>
    1348:	85 e0       	ldi	r24, 0x05	; 5
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    134c:	c0 17       	cp	r28, r16
    134e:	d1 07       	cpc	r29, r17
    1350:	10 f0       	brcs	.+4      	; 0x1356 <LCDprogressBar+0x60>
    1352:	8e 2d       	mov	r24, r14
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <LCDprogressBar+0x62>
    1356:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1358:	0e 94 46 08 	call	0x108c	; 0x108c <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    135c:	f3 94       	inc	r15
    135e:	0a 5f       	subi	r16, 0xFA	; 250
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	fd 14       	cp	r15, r13
    1364:	60 f3       	brcs	.-40     	; 0x133e <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	08 95       	ret

00001376 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    1376:	87 e6       	ldi	r24, 0x67	; 103
    1378:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    137c:	88 e1       	ldi	r24, 0x18	; 24
    137e:	80 93 c1 00 	sts	0x00C1, r24
}
    1382:	08 95       	ret

00001384 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    1384:	1f 93       	push	r17
    1386:	18 2f       	mov	r17, r24

  if (c == '\a')
    1388:	87 30       	cpi	r24, 0x07	; 7
    138a:	49 f4       	brne	.+18     	; 0x139e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    138c:	60 91 77 04 	lds	r22, 0x0477
    1390:	70 91 78 04 	lds	r23, 0x0478
    1394:	89 e9       	ldi	r24, 0x99	; 153
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fputs>
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    139e:	8a 30       	cpi	r24, 0x0A	; 10
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    13a2:	8d e0       	ldi	r24, 0x0D	; 13
    13a4:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    13a8:	80 91 c0 00 	lds	r24, 0x00C0
    13ac:	85 ff       	sbrs	r24, 5
    13ae:	fc cf       	rjmp	.-8      	; 0x13a8 <uart_putchar+0x24>
  UDR0 = c;
    13b0:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	1f 91       	pop	r17
    13ba:	08 95       	ret

000013bc <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    13ca:	80 91 a2 01 	lds	r24, 0x01A2
    13ce:	90 91 a3 01 	lds	r25, 0x01A3
    13d2:	89 2b       	or	r24, r25
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <uart_getchar+0x1c>
    13d6:	9f c0       	rjmp	.+318    	; 0x1516 <uart_getchar+0x15a>
    13d8:	04 ea       	ldi	r16, 0xA4	; 164
    13da:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    13dc:	80 91 c0 00 	lds	r24, 0x00C0
    13e0:	87 ff       	sbrs	r24, 7
    13e2:	fc cf       	rjmp	.-8      	; 0x13dc <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
    13e4:	80 91 c0 00 	lds	r24, 0x00C0
    13e8:	84 ff       	sbrs	r24, 4
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <uart_getchar+0x36>
    13ec:	2e ef       	ldi	r18, 0xFE	; 254
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	a6 c0       	rjmp	.+332    	; 0x153e <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    13f2:	80 91 c0 00 	lds	r24, 0x00C0
    13f6:	83 fd       	sbrc	r24, 3
    13f8:	a0 c0       	rjmp	.+320    	; 0x153a <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    13fa:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    13fe:	9d 30       	cpi	r25, 0x0D	; 13
    1400:	11 f0       	breq	.+4      	; 0x1406 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1402:	9a 30       	cpi	r25, 0x0A	; 10
    1404:	69 f4       	brne	.+26     	; 0x1420 <uart_getchar+0x64>
	  {
	    *cp = c;
    1406:	8a e0       	ldi	r24, 0x0A	; 10
    1408:	f8 01       	movw	r30, r16
    140a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    140c:	b7 01       	movw	r22, r14
    140e:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
	    rxp = b;
    1412:	84 ea       	ldi	r24, 0xA4	; 164
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	90 93 a3 01 	sts	0x01A3, r25
    141a:	80 93 a2 01 	sts	0x01A2, r24
    141e:	7b c0       	rjmp	.+246    	; 0x1516 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1420:	99 30       	cpi	r25, 0x09	; 9
    1422:	09 f4       	brne	.+2      	; 0x1426 <uart_getchar+0x6a>
    1424:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    1426:	89 2f       	mov	r24, r25
    1428:	80 52       	subi	r24, 0x20	; 32
    142a:	8f 35       	cpi	r24, 0x5F	; 95
    142c:	10 f0       	brcs	.+4      	; 0x1432 <uart_getchar+0x76>
    142e:	90 3a       	cpi	r25, 0xA0	; 160
    1430:	70 f0       	brcs	.+28     	; 0x144e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	03 3f       	cpi	r16, 0xF3	; 243
    1436:	1f 07       	cpc	r17, r31
    1438:	11 f4       	brne	.+4      	; 0x143e <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    143a:	87 e0       	ldi	r24, 0x07	; 7
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    143e:	f8 01       	movw	r30, r16
    1440:	91 93       	st	Z+, r25
    1442:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1444:	89 2f       	mov	r24, r25
    1446:	b7 01       	movw	r22, r14
    1448:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
    144c:	c7 cf       	rjmp	.-114    	; 0x13dc <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    144e:	92 31       	cpi	r25, 0x12	; 18
    1450:	39 f1       	breq	.+78     	; 0x14a0 <uart_getchar+0xe4>
    1452:	93 31       	cpi	r25, 0x13	; 19
    1454:	38 f4       	brcc	.+14     	; 0x1464 <uart_getchar+0xa8>
    1456:	93 30       	cpi	r25, 0x03	; 3
    1458:	09 f4       	brne	.+2      	; 0x145c <uart_getchar+0xa0>
    145a:	6f c0       	rjmp	.+222    	; 0x153a <uart_getchar+0x17e>
    145c:	98 30       	cpi	r25, 0x08	; 8
    145e:	09 f0       	breq	.+2      	; 0x1462 <uart_getchar+0xa6>
    1460:	bd cf       	rjmp	.-134    	; 0x13dc <uart_getchar+0x20>
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <uart_getchar+0xba>
    1464:	97 31       	cpi	r25, 0x17	; 23
    1466:	09 f4       	brne	.+2      	; 0x146a <uart_getchar+0xae>
    1468:	4b c0       	rjmp	.+150    	; 0x1500 <uart_getchar+0x144>
    146a:	9f 37       	cpi	r25, 0x7F	; 127
    146c:	21 f0       	breq	.+8      	; 0x1476 <uart_getchar+0xba>
    146e:	95 31       	cpi	r25, 0x15	; 21
    1470:	09 f0       	breq	.+2      	; 0x1474 <uart_getchar+0xb8>
    1472:	b4 cf       	rjmp	.-152    	; 0x13dc <uart_getchar+0x20>
    1474:	32 c0       	rjmp	.+100    	; 0x14da <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1476:	f1 e0       	ldi	r31, 0x01	; 1
    1478:	04 3a       	cpi	r16, 0xA4	; 164
    147a:	1f 07       	cpc	r17, r31
    147c:	09 f0       	breq	.+2      	; 0x1480 <uart_getchar+0xc4>
    147e:	08 f4       	brcc	.+2      	; 0x1482 <uart_getchar+0xc6>
    1480:	ad cf       	rjmp	.-166    	; 0x13dc <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1482:	88 e0       	ldi	r24, 0x08	; 8
    1484:	b7 01       	movw	r22, r14
    1486:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		uart_putchar(' ', stream);
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	b7 01       	movw	r22, r14
    148e:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		uart_putchar('\b', stream);
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	b7 01       	movw	r22, r14
    1496:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		cp--;
    149a:	01 50       	subi	r16, 0x01	; 1
    149c:	10 40       	sbci	r17, 0x00	; 0
    149e:	9e cf       	rjmp	.-196    	; 0x13dc <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    14a0:	8d e0       	ldi	r24, 0x0D	; 13
    14a2:	b7 01       	movw	r22, r14
    14a4:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
    14a8:	c4 ea       	ldi	r28, 0xA4	; 164
    14aa:	d1 e0       	ldi	r29, 0x01	; 1
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    14ae:	89 91       	ld	r24, Y+
    14b0:	b7 01       	movw	r22, r14
    14b2:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    14b6:	c0 17       	cp	r28, r16
    14b8:	d1 07       	cpc	r29, r17
    14ba:	c8 f3       	brcs	.-14     	; 0x14ae <uart_getchar+0xf2>
    14bc:	8f cf       	rjmp	.-226    	; 0x13dc <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    14be:	88 e0       	ldi	r24, 0x08	; 8
    14c0:	b7 01       	movw	r22, r14
    14c2:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		uart_putchar(' ', stream);
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	b7 01       	movw	r22, r14
    14ca:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		uart_putchar('\b', stream);
    14ce:	88 e0       	ldi	r24, 0x08	; 8
    14d0:	b7 01       	movw	r22, r14
    14d2:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		cp--;
    14d6:	01 50       	subi	r16, 0x01	; 1
    14d8:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	04 3a       	cpi	r16, 0xA4	; 164
    14de:	18 07       	cpc	r17, r24
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <uart_getchar+0x128>
    14e2:	68 f7       	brcc	.-38     	; 0x14be <uart_getchar+0x102>
    14e4:	7b cf       	rjmp	.-266    	; 0x13dc <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    14e6:	88 e0       	ldi	r24, 0x08	; 8
    14e8:	b7 01       	movw	r22, r14
    14ea:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		uart_putchar(' ', stream);
    14ee:	80 e2       	ldi	r24, 0x20	; 32
    14f0:	b7 01       	movw	r22, r14
    14f2:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
		uart_putchar('\b', stream);
    14f6:	88 e0       	ldi	r24, 0x08	; 8
    14f8:	b7 01       	movw	r22, r14
    14fa:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_putchar>
    14fe:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1500:	e1 e0       	ldi	r30, 0x01	; 1
    1502:	04 3a       	cpi	r16, 0xA4	; 164
    1504:	1e 07       	cpc	r17, r30
    1506:	09 f0       	breq	.+2      	; 0x150a <uart_getchar+0x14e>
    1508:	08 f4       	brcc	.+2      	; 0x150c <uart_getchar+0x150>
    150a:	68 cf       	rjmp	.-304    	; 0x13dc <uart_getchar+0x20>
    150c:	e8 01       	movw	r28, r16
    150e:	8a 91       	ld	r24, -Y
    1510:	80 32       	cpi	r24, 0x20	; 32
    1512:	49 f7       	brne	.-46     	; 0x14e6 <uart_getchar+0x12a>
    1514:	63 cf       	rjmp	.-314    	; 0x13dc <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1516:	e0 91 a2 01 	lds	r30, 0x01A2
    151a:	f0 91 a3 01 	lds	r31, 0x01A3
    151e:	81 91       	ld	r24, Z+
    1520:	f0 93 a3 01 	sts	0x01A3, r31
    1524:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    1528:	8a 30       	cpi	r24, 0x0A	; 10
    152a:	21 f4       	brne	.+8      	; 0x1534 <uart_getchar+0x178>
    rxp = 0;
    152c:	10 92 a3 01 	sts	0x01A3, r1
    1530:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <uart_getchar+0x182>
    153a:	2f ef       	ldi	r18, 0xFF	; 255
    153c:	3f ef       	ldi	r19, 0xFF	; 255
}
    153e:	c9 01       	movw	r24, r18
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	08 95       	ret

0000154e <__udivmodhi4>:
    154e:	aa 1b       	sub	r26, r26
    1550:	bb 1b       	sub	r27, r27
    1552:	51 e1       	ldi	r21, 0x11	; 17
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <__udivmodhi4_ep>

00001556 <__udivmodhi4_loop>:
    1556:	aa 1f       	adc	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	a6 17       	cp	r26, r22
    155c:	b7 07       	cpc	r27, r23
    155e:	10 f0       	brcs	.+4      	; 0x1564 <__udivmodhi4_ep>
    1560:	a6 1b       	sub	r26, r22
    1562:	b7 0b       	sbc	r27, r23

00001564 <__udivmodhi4_ep>:
    1564:	88 1f       	adc	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	5a 95       	dec	r21
    156a:	a9 f7       	brne	.-22     	; 0x1556 <__udivmodhi4_loop>
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	08 95       	ret

00001576 <__divmodhi4>:
    1576:	97 fb       	bst	r25, 7
    1578:	09 2e       	mov	r0, r25
    157a:	07 26       	eor	r0, r23
    157c:	0a d0       	rcall	.+20     	; 0x1592 <__divmodhi4_neg1>
    157e:	77 fd       	sbrc	r23, 7
    1580:	04 d0       	rcall	.+8      	; 0x158a <__divmodhi4_neg2>
    1582:	e5 df       	rcall	.-54     	; 0x154e <__udivmodhi4>
    1584:	06 d0       	rcall	.+12     	; 0x1592 <__divmodhi4_neg1>
    1586:	00 20       	and	r0, r0
    1588:	1a f4       	brpl	.+6      	; 0x1590 <__divmodhi4_exit>

0000158a <__divmodhi4_neg2>:
    158a:	70 95       	com	r23
    158c:	61 95       	neg	r22
    158e:	7f 4f       	sbci	r23, 0xFF	; 255

00001590 <__divmodhi4_exit>:
    1590:	08 95       	ret

00001592 <__divmodhi4_neg1>:
    1592:	f6 f7       	brtc	.-4      	; 0x1590 <__divmodhi4_exit>
    1594:	90 95       	com	r25
    1596:	81 95       	neg	r24
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	08 95       	ret

0000159c <strcpy>:
    159c:	fb 01       	movw	r30, r22
    159e:	dc 01       	movw	r26, r24
    15a0:	01 90       	ld	r0, Z+
    15a2:	0d 92       	st	X+, r0
    15a4:	00 20       	and	r0, r0
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <strcpy+0x4>
    15a8:	08 95       	ret

000015aa <fputs>:
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	7c 01       	movw	r14, r24
    15b8:	8b 01       	movw	r16, r22
    15ba:	db 01       	movw	r26, r22
    15bc:	13 96       	adiw	r26, 0x03	; 3
    15be:	8c 91       	ld	r24, X
    15c0:	81 fd       	sbrc	r24, 1
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <fputs+0x20>
    15c4:	cf ef       	ldi	r28, 0xFF	; 255
    15c6:	df ef       	ldi	r29, 0xFF	; 255
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <fputs+0x46>
    15ca:	c0 e0       	ldi	r28, 0x00	; 0
    15cc:	d0 e0       	ldi	r29, 0x00	; 0
    15ce:	0b c0       	rjmp	.+22     	; 0x15e6 <fputs+0x3c>
    15d0:	d8 01       	movw	r26, r16
    15d2:	18 96       	adiw	r26, 0x08	; 8
    15d4:	ed 91       	ld	r30, X+
    15d6:	fc 91       	ld	r31, X
    15d8:	19 97       	sbiw	r26, 0x09	; 9
    15da:	b8 01       	movw	r22, r16
    15dc:	09 95       	icall
    15de:	89 2b       	or	r24, r25
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <fputs+0x3c>
    15e2:	cf ef       	ldi	r28, 0xFF	; 255
    15e4:	df ef       	ldi	r29, 0xFF	; 255
    15e6:	f7 01       	movw	r30, r14
    15e8:	81 91       	ld	r24, Z+
    15ea:	7f 01       	movw	r14, r30
    15ec:	88 23       	and	r24, r24
    15ee:	81 f7       	brne	.-32     	; 0x15d0 <fputs+0x26>
    15f0:	ce 01       	movw	r24, r28
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret

00001600 <fscanf>:
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9e 01       	movw	r18, r28
    160a:	27 5f       	subi	r18, 0xF7	; 247
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	a9 01       	movw	r20, r18
    1618:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <vfscanf>
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <sprintf>:
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	2e 97       	sbiw	r28, 0x0e	; 14
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	0d 89       	ldd	r16, Y+21	; 0x15
    163c:	1e 89       	ldd	r17, Y+22	; 0x16
    163e:	86 e0       	ldi	r24, 0x06	; 6
    1640:	8c 83       	std	Y+4, r24	; 0x04
    1642:	1a 83       	std	Y+2, r17	; 0x02
    1644:	09 83       	std	Y+1, r16	; 0x01
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	9f e7       	ldi	r25, 0x7F	; 127
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	9e 01       	movw	r18, r28
    1650:	27 5e       	subi	r18, 0xE7	; 231
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	6f 89       	ldd	r22, Y+23	; 0x17
    165a:	78 8d       	ldd	r23, Y+24	; 0x18
    165c:	a9 01       	movw	r20, r18
    165e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vfprintf>
    1662:	2f 81       	ldd	r18, Y+7	; 0x07
    1664:	38 85       	ldd	r19, Y+8	; 0x08
    1666:	02 0f       	add	r16, r18
    1668:	13 1f       	adc	r17, r19
    166a:	f8 01       	movw	r30, r16
    166c:	10 82       	st	Z, r1
    166e:	2e 96       	adiw	r28, 0x0e	; 14
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	08 95       	ret

00001684 <sscanf>:
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	2e 97       	sbiw	r28, 0x0e	; 14
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	85 e0       	ldi	r24, 0x05	; 5
    169a:	8c 83       	std	Y+4, r24	; 0x04
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	9c 89       	ldd	r25, Y+20	; 0x14
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	9e 01       	movw	r18, r28
    16a6:	29 5e       	subi	r18, 0xE9	; 233
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	6d 89       	ldd	r22, Y+21	; 0x15
    16b0:	7e 89       	ldd	r23, Y+22	; 0x16
    16b2:	a9 01       	movw	r20, r18
    16b4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <vfscanf>
    16b8:	2e 96       	adiw	r28, 0x0e	; 14
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <vfprintf>:
    16ca:	2f 92       	push	r2
    16cc:	3f 92       	push	r3
    16ce:	4f 92       	push	r4
    16d0:	5f 92       	push	r5
    16d2:	6f 92       	push	r6
    16d4:	7f 92       	push	r7
    16d6:	8f 92       	push	r8
    16d8:	9f 92       	push	r9
    16da:	af 92       	push	r10
    16dc:	bf 92       	push	r11
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	2b 97       	sbiw	r28, 0x0b	; 11
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	3c 01       	movw	r6, r24
    1700:	2b 01       	movw	r4, r22
    1702:	5a 01       	movw	r10, r20
    1704:	fc 01       	movw	r30, r24
    1706:	17 82       	std	Z+7, r1	; 0x07
    1708:	16 82       	std	Z+6, r1	; 0x06
    170a:	83 81       	ldd	r24, Z+3	; 0x03
    170c:	81 fd       	sbrc	r24, 1
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <vfprintf+0x4c>
    1710:	6f ef       	ldi	r22, 0xFF	; 255
    1712:	7f ef       	ldi	r23, 0xFF	; 255
    1714:	c6 c1       	rjmp	.+908    	; 0x1aa2 <vfprintf+0x3d8>
    1716:	9a e0       	ldi	r25, 0x0A	; 10
    1718:	89 2e       	mov	r8, r25
    171a:	1e 01       	movw	r2, r28
    171c:	08 94       	sec
    171e:	21 1c       	adc	r2, r1
    1720:	31 1c       	adc	r3, r1
    1722:	f3 01       	movw	r30, r6
    1724:	23 81       	ldd	r18, Z+3	; 0x03
    1726:	f2 01       	movw	r30, r4
    1728:	23 fd       	sbrc	r18, 3
    172a:	85 91       	lpm	r24, Z+
    172c:	23 ff       	sbrs	r18, 3
    172e:	81 91       	ld	r24, Z+
    1730:	2f 01       	movw	r4, r30
    1732:	88 23       	and	r24, r24
    1734:	09 f4       	brne	.+2      	; 0x1738 <vfprintf+0x6e>
    1736:	b2 c1       	rjmp	.+868    	; 0x1a9c <vfprintf+0x3d2>
    1738:	85 32       	cpi	r24, 0x25	; 37
    173a:	39 f4       	brne	.+14     	; 0x174a <vfprintf+0x80>
    173c:	23 fd       	sbrc	r18, 3
    173e:	85 91       	lpm	r24, Z+
    1740:	23 ff       	sbrs	r18, 3
    1742:	81 91       	ld	r24, Z+
    1744:	2f 01       	movw	r4, r30
    1746:	85 32       	cpi	r24, 0x25	; 37
    1748:	29 f4       	brne	.+10     	; 0x1754 <vfprintf+0x8a>
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	b3 01       	movw	r22, r6
    174e:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1752:	e7 cf       	rjmp	.-50     	; 0x1722 <vfprintf+0x58>
    1754:	98 2f       	mov	r25, r24
    1756:	ff 24       	eor	r15, r15
    1758:	ee 24       	eor	r14, r14
    175a:	99 24       	eor	r9, r9
    175c:	ff e1       	ldi	r31, 0x1F	; 31
    175e:	ff 15       	cp	r31, r15
    1760:	d0 f0       	brcs	.+52     	; 0x1796 <vfprintf+0xcc>
    1762:	9b 32       	cpi	r25, 0x2B	; 43
    1764:	69 f0       	breq	.+26     	; 0x1780 <vfprintf+0xb6>
    1766:	9c 32       	cpi	r25, 0x2C	; 44
    1768:	28 f4       	brcc	.+10     	; 0x1774 <vfprintf+0xaa>
    176a:	90 32       	cpi	r25, 0x20	; 32
    176c:	59 f0       	breq	.+22     	; 0x1784 <vfprintf+0xba>
    176e:	93 32       	cpi	r25, 0x23	; 35
    1770:	91 f4       	brne	.+36     	; 0x1796 <vfprintf+0xcc>
    1772:	0e c0       	rjmp	.+28     	; 0x1790 <vfprintf+0xc6>
    1774:	9d 32       	cpi	r25, 0x2D	; 45
    1776:	49 f0       	breq	.+18     	; 0x178a <vfprintf+0xc0>
    1778:	90 33       	cpi	r25, 0x30	; 48
    177a:	69 f4       	brne	.+26     	; 0x1796 <vfprintf+0xcc>
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	24 c0       	rjmp	.+72     	; 0x17c8 <vfprintf+0xfe>
    1780:	52 e0       	ldi	r21, 0x02	; 2
    1782:	f5 2a       	or	r15, r21
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	f8 2a       	or	r15, r24
    1788:	28 c0       	rjmp	.+80     	; 0x17da <vfprintf+0x110>
    178a:	98 e0       	ldi	r25, 0x08	; 8
    178c:	f9 2a       	or	r15, r25
    178e:	25 c0       	rjmp	.+74     	; 0x17da <vfprintf+0x110>
    1790:	e0 e1       	ldi	r30, 0x10	; 16
    1792:	fe 2a       	or	r15, r30
    1794:	22 c0       	rjmp	.+68     	; 0x17da <vfprintf+0x110>
    1796:	f7 fc       	sbrc	r15, 7
    1798:	29 c0       	rjmp	.+82     	; 0x17ec <vfprintf+0x122>
    179a:	89 2f       	mov	r24, r25
    179c:	80 53       	subi	r24, 0x30	; 48
    179e:	8a 30       	cpi	r24, 0x0A	; 10
    17a0:	70 f4       	brcc	.+28     	; 0x17be <vfprintf+0xf4>
    17a2:	f6 fe       	sbrs	r15, 6
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <vfprintf+0xe6>
    17a6:	98 9c       	mul	r9, r8
    17a8:	90 2c       	mov	r9, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	98 0e       	add	r9, r24
    17ae:	15 c0       	rjmp	.+42     	; 0x17da <vfprintf+0x110>
    17b0:	e8 9c       	mul	r14, r8
    17b2:	e0 2c       	mov	r14, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	e8 0e       	add	r14, r24
    17b8:	f0 e2       	ldi	r31, 0x20	; 32
    17ba:	ff 2a       	or	r15, r31
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <vfprintf+0x110>
    17be:	9e 32       	cpi	r25, 0x2E	; 46
    17c0:	29 f4       	brne	.+10     	; 0x17cc <vfprintf+0x102>
    17c2:	f6 fc       	sbrc	r15, 6
    17c4:	6b c1       	rjmp	.+726    	; 0x1a9c <vfprintf+0x3d2>
    17c6:	40 e4       	ldi	r20, 0x40	; 64
    17c8:	f4 2a       	or	r15, r20
    17ca:	07 c0       	rjmp	.+14     	; 0x17da <vfprintf+0x110>
    17cc:	9c 36       	cpi	r25, 0x6C	; 108
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <vfprintf+0x10c>
    17d0:	50 e8       	ldi	r21, 0x80	; 128
    17d2:	f5 2a       	or	r15, r21
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <vfprintf+0x110>
    17d6:	98 36       	cpi	r25, 0x68	; 104
    17d8:	49 f4       	brne	.+18     	; 0x17ec <vfprintf+0x122>
    17da:	f2 01       	movw	r30, r4
    17dc:	23 fd       	sbrc	r18, 3
    17de:	95 91       	lpm	r25, Z+
    17e0:	23 ff       	sbrs	r18, 3
    17e2:	91 91       	ld	r25, Z+
    17e4:	2f 01       	movw	r4, r30
    17e6:	99 23       	and	r25, r25
    17e8:	09 f0       	breq	.+2      	; 0x17ec <vfprintf+0x122>
    17ea:	b8 cf       	rjmp	.-144    	; 0x175c <vfprintf+0x92>
    17ec:	89 2f       	mov	r24, r25
    17ee:	85 54       	subi	r24, 0x45	; 69
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	18 f0       	brcs	.+6      	; 0x17fa <vfprintf+0x130>
    17f4:	80 52       	subi	r24, 0x20	; 32
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	38 f4       	brcc	.+14     	; 0x1808 <vfprintf+0x13e>
    17fa:	44 e0       	ldi	r20, 0x04	; 4
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	a4 0e       	add	r10, r20
    1800:	b5 1e       	adc	r11, r21
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	59 83       	std	Y+1, r21	; 0x01
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <vfprintf+0x15c>
    1808:	93 36       	cpi	r25, 0x63	; 99
    180a:	31 f0       	breq	.+12     	; 0x1818 <vfprintf+0x14e>
    180c:	93 37       	cpi	r25, 0x73	; 115
    180e:	79 f0       	breq	.+30     	; 0x182e <vfprintf+0x164>
    1810:	93 35       	cpi	r25, 0x53	; 83
    1812:	09 f0       	breq	.+2      	; 0x1816 <vfprintf+0x14c>
    1814:	56 c0       	rjmp	.+172    	; 0x18c2 <vfprintf+0x1f8>
    1816:	20 c0       	rjmp	.+64     	; 0x1858 <vfprintf+0x18e>
    1818:	f5 01       	movw	r30, r10
    181a:	80 81       	ld	r24, Z
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	42 e0       	ldi	r20, 0x02	; 2
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	a4 0e       	add	r10, r20
    1824:	b5 1e       	adc	r11, r21
    1826:	61 01       	movw	r12, r2
    1828:	01 e0       	ldi	r16, 0x01	; 1
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	12 c0       	rjmp	.+36     	; 0x1852 <vfprintf+0x188>
    182e:	f5 01       	movw	r30, r10
    1830:	c0 80       	ld	r12, Z
    1832:	d1 80       	ldd	r13, Z+1	; 0x01
    1834:	f6 fc       	sbrc	r15, 6
    1836:	03 c0       	rjmp	.+6      	; 0x183e <vfprintf+0x174>
    1838:	6f ef       	ldi	r22, 0xFF	; 255
    183a:	7f ef       	ldi	r23, 0xFF	; 255
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x178>
    183e:	69 2d       	mov	r22, r9
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	42 e0       	ldi	r20, 0x02	; 2
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	a4 0e       	add	r10, r20
    1848:	b5 1e       	adc	r11, r21
    184a:	c6 01       	movw	r24, r12
    184c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <strnlen>
    1850:	8c 01       	movw	r16, r24
    1852:	5f e7       	ldi	r21, 0x7F	; 127
    1854:	f5 22       	and	r15, r21
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <vfprintf+0x1b6>
    1858:	f5 01       	movw	r30, r10
    185a:	c0 80       	ld	r12, Z
    185c:	d1 80       	ldd	r13, Z+1	; 0x01
    185e:	f6 fc       	sbrc	r15, 6
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <vfprintf+0x19e>
    1862:	6f ef       	ldi	r22, 0xFF	; 255
    1864:	7f ef       	ldi	r23, 0xFF	; 255
    1866:	02 c0       	rjmp	.+4      	; 0x186c <vfprintf+0x1a2>
    1868:	69 2d       	mov	r22, r9
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	42 e0       	ldi	r20, 0x02	; 2
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	a4 0e       	add	r10, r20
    1872:	b5 1e       	adc	r11, r21
    1874:	c6 01       	movw	r24, r12
    1876:	0e 94 50 10 	call	0x20a0	; 0x20a0 <strnlen_P>
    187a:	8c 01       	movw	r16, r24
    187c:	50 e8       	ldi	r21, 0x80	; 128
    187e:	f5 2a       	or	r15, r21
    1880:	f3 fe       	sbrs	r15, 3
    1882:	07 c0       	rjmp	.+14     	; 0x1892 <vfprintf+0x1c8>
    1884:	1a c0       	rjmp	.+52     	; 0x18ba <vfprintf+0x1f0>
    1886:	80 e2       	ldi	r24, 0x20	; 32
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	b3 01       	movw	r22, r6
    188c:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1890:	ea 94       	dec	r14
    1892:	8e 2d       	mov	r24, r14
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	08 17       	cp	r16, r24
    1898:	19 07       	cpc	r17, r25
    189a:	a8 f3       	brcs	.-22     	; 0x1886 <vfprintf+0x1bc>
    189c:	0e c0       	rjmp	.+28     	; 0x18ba <vfprintf+0x1f0>
    189e:	f6 01       	movw	r30, r12
    18a0:	f7 fc       	sbrc	r15, 7
    18a2:	85 91       	lpm	r24, Z+
    18a4:	f7 fe       	sbrs	r15, 7
    18a6:	81 91       	ld	r24, Z+
    18a8:	6f 01       	movw	r12, r30
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	b3 01       	movw	r22, r6
    18ae:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    18b2:	e1 10       	cpse	r14, r1
    18b4:	ea 94       	dec	r14
    18b6:	01 50       	subi	r16, 0x01	; 1
    18b8:	10 40       	sbci	r17, 0x00	; 0
    18ba:	01 15       	cp	r16, r1
    18bc:	11 05       	cpc	r17, r1
    18be:	79 f7       	brne	.-34     	; 0x189e <vfprintf+0x1d4>
    18c0:	ea c0       	rjmp	.+468    	; 0x1a96 <vfprintf+0x3cc>
    18c2:	94 36       	cpi	r25, 0x64	; 100
    18c4:	11 f0       	breq	.+4      	; 0x18ca <vfprintf+0x200>
    18c6:	99 36       	cpi	r25, 0x69	; 105
    18c8:	69 f5       	brne	.+90     	; 0x1924 <vfprintf+0x25a>
    18ca:	f7 fe       	sbrs	r15, 7
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <vfprintf+0x214>
    18ce:	f5 01       	movw	r30, r10
    18d0:	20 81       	ld	r18, Z
    18d2:	31 81       	ldd	r19, Z+1	; 0x01
    18d4:	42 81       	ldd	r20, Z+2	; 0x02
    18d6:	53 81       	ldd	r21, Z+3	; 0x03
    18d8:	84 e0       	ldi	r24, 0x04	; 4
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0a c0       	rjmp	.+20     	; 0x18f2 <vfprintf+0x228>
    18de:	f5 01       	movw	r30, r10
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	9c 01       	movw	r18, r24
    18e6:	44 27       	eor	r20, r20
    18e8:	37 fd       	sbrc	r19, 7
    18ea:	40 95       	com	r20
    18ec:	54 2f       	mov	r21, r20
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a8 0e       	add	r10, r24
    18f4:	b9 1e       	adc	r11, r25
    18f6:	9f e6       	ldi	r25, 0x6F	; 111
    18f8:	f9 22       	and	r15, r25
    18fa:	57 ff       	sbrs	r21, 7
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <vfprintf+0x246>
    18fe:	50 95       	com	r21
    1900:	40 95       	com	r20
    1902:	30 95       	com	r19
    1904:	21 95       	neg	r18
    1906:	3f 4f       	sbci	r19, 0xFF	; 255
    1908:	4f 4f       	sbci	r20, 0xFF	; 255
    190a:	5f 4f       	sbci	r21, 0xFF	; 255
    190c:	e0 e8       	ldi	r30, 0x80	; 128
    190e:	fe 2a       	or	r15, r30
    1910:	ca 01       	movw	r24, r20
    1912:	b9 01       	movw	r22, r18
    1914:	a1 01       	movw	r20, r2
    1916:	2a e0       	ldi	r18, 0x0A	; 10
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ultoa_invert>
    191e:	d8 2e       	mov	r13, r24
    1920:	d2 18       	sub	r13, r2
    1922:	40 c0       	rjmp	.+128    	; 0x19a4 <vfprintf+0x2da>
    1924:	95 37       	cpi	r25, 0x75	; 117
    1926:	29 f4       	brne	.+10     	; 0x1932 <vfprintf+0x268>
    1928:	1f 2d       	mov	r17, r15
    192a:	1f 7e       	andi	r17, 0xEF	; 239
    192c:	2a e0       	ldi	r18, 0x0A	; 10
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	1d c0       	rjmp	.+58     	; 0x196c <vfprintf+0x2a2>
    1932:	1f 2d       	mov	r17, r15
    1934:	19 7f       	andi	r17, 0xF9	; 249
    1936:	9f 36       	cpi	r25, 0x6F	; 111
    1938:	61 f0       	breq	.+24     	; 0x1952 <vfprintf+0x288>
    193a:	90 37       	cpi	r25, 0x70	; 112
    193c:	20 f4       	brcc	.+8      	; 0x1946 <vfprintf+0x27c>
    193e:	98 35       	cpi	r25, 0x58	; 88
    1940:	09 f0       	breq	.+2      	; 0x1944 <vfprintf+0x27a>
    1942:	ac c0       	rjmp	.+344    	; 0x1a9c <vfprintf+0x3d2>
    1944:	0f c0       	rjmp	.+30     	; 0x1964 <vfprintf+0x29a>
    1946:	90 37       	cpi	r25, 0x70	; 112
    1948:	39 f0       	breq	.+14     	; 0x1958 <vfprintf+0x28e>
    194a:	98 37       	cpi	r25, 0x78	; 120
    194c:	09 f0       	breq	.+2      	; 0x1950 <vfprintf+0x286>
    194e:	a6 c0       	rjmp	.+332    	; 0x1a9c <vfprintf+0x3d2>
    1950:	04 c0       	rjmp	.+8      	; 0x195a <vfprintf+0x290>
    1952:	28 e0       	ldi	r18, 0x08	; 8
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	0a c0       	rjmp	.+20     	; 0x196c <vfprintf+0x2a2>
    1958:	10 61       	ori	r17, 0x10	; 16
    195a:	14 fd       	sbrc	r17, 4
    195c:	14 60       	ori	r17, 0x04	; 4
    195e:	20 e1       	ldi	r18, 0x10	; 16
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	04 c0       	rjmp	.+8      	; 0x196c <vfprintf+0x2a2>
    1964:	14 fd       	sbrc	r17, 4
    1966:	16 60       	ori	r17, 0x06	; 6
    1968:	20 e1       	ldi	r18, 0x10	; 16
    196a:	32 e0       	ldi	r19, 0x02	; 2
    196c:	17 ff       	sbrs	r17, 7
    196e:	08 c0       	rjmp	.+16     	; 0x1980 <vfprintf+0x2b6>
    1970:	f5 01       	movw	r30, r10
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	44 e0       	ldi	r20, 0x04	; 4
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	08 c0       	rjmp	.+16     	; 0x1990 <vfprintf+0x2c6>
    1980:	f5 01       	movw	r30, r10
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	bc 01       	movw	r22, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	42 e0       	ldi	r20, 0x02	; 2
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	a4 0e       	add	r10, r20
    1992:	b5 1e       	adc	r11, r21
    1994:	a1 01       	movw	r20, r2
    1996:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__ultoa_invert>
    199a:	d8 2e       	mov	r13, r24
    199c:	d2 18       	sub	r13, r2
    199e:	8f e7       	ldi	r24, 0x7F	; 127
    19a0:	f8 2e       	mov	r15, r24
    19a2:	f1 22       	and	r15, r17
    19a4:	f6 fe       	sbrs	r15, 6
    19a6:	0b c0       	rjmp	.+22     	; 0x19be <vfprintf+0x2f4>
    19a8:	5e ef       	ldi	r21, 0xFE	; 254
    19aa:	f5 22       	and	r15, r21
    19ac:	d9 14       	cp	r13, r9
    19ae:	38 f4       	brcc	.+14     	; 0x19be <vfprintf+0x2f4>
    19b0:	f4 fe       	sbrs	r15, 4
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <vfprintf+0x2f8>
    19b4:	f2 fc       	sbrc	r15, 2
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <vfprintf+0x2f8>
    19b8:	8f ee       	ldi	r24, 0xEF	; 239
    19ba:	f8 22       	and	r15, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <vfprintf+0x2f8>
    19be:	1d 2d       	mov	r17, r13
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <vfprintf+0x2fa>
    19c2:	19 2d       	mov	r17, r9
    19c4:	f4 fe       	sbrs	r15, 4
    19c6:	0d c0       	rjmp	.+26     	; 0x19e2 <vfprintf+0x318>
    19c8:	fe 01       	movw	r30, r28
    19ca:	ed 0d       	add	r30, r13
    19cc:	f1 1d       	adc	r31, r1
    19ce:	80 81       	ld	r24, Z
    19d0:	80 33       	cpi	r24, 0x30	; 48
    19d2:	19 f4       	brne	.+6      	; 0x19da <vfprintf+0x310>
    19d4:	99 ee       	ldi	r25, 0xE9	; 233
    19d6:	f9 22       	and	r15, r25
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <vfprintf+0x320>
    19da:	1f 5f       	subi	r17, 0xFF	; 255
    19dc:	f2 fe       	sbrs	r15, 2
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <vfprintf+0x320>
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <vfprintf+0x31e>
    19e2:	8f 2d       	mov	r24, r15
    19e4:	86 78       	andi	r24, 0x86	; 134
    19e6:	09 f0       	breq	.+2      	; 0x19ea <vfprintf+0x320>
    19e8:	1f 5f       	subi	r17, 0xFF	; 255
    19ea:	0f 2d       	mov	r16, r15
    19ec:	f3 fc       	sbrc	r15, 3
    19ee:	14 c0       	rjmp	.+40     	; 0x1a18 <vfprintf+0x34e>
    19f0:	f0 fe       	sbrs	r15, 0
    19f2:	0f c0       	rjmp	.+30     	; 0x1a12 <vfprintf+0x348>
    19f4:	1e 15       	cp	r17, r14
    19f6:	10 f0       	brcs	.+4      	; 0x19fc <vfprintf+0x332>
    19f8:	9d 2c       	mov	r9, r13
    19fa:	0b c0       	rjmp	.+22     	; 0x1a12 <vfprintf+0x348>
    19fc:	9d 2c       	mov	r9, r13
    19fe:	9e 0c       	add	r9, r14
    1a00:	91 1a       	sub	r9, r17
    1a02:	1e 2d       	mov	r17, r14
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <vfprintf+0x348>
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	b3 01       	movw	r22, r6
    1a0c:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1a10:	1f 5f       	subi	r17, 0xFF	; 255
    1a12:	1e 15       	cp	r17, r14
    1a14:	c0 f3       	brcs	.-16     	; 0x1a06 <vfprintf+0x33c>
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <vfprintf+0x356>
    1a18:	1e 15       	cp	r17, r14
    1a1a:	10 f4       	brcc	.+4      	; 0x1a20 <vfprintf+0x356>
    1a1c:	e1 1a       	sub	r14, r17
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <vfprintf+0x358>
    1a20:	ee 24       	eor	r14, r14
    1a22:	04 ff       	sbrs	r16, 4
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <vfprintf+0x37a>
    1a26:	80 e3       	ldi	r24, 0x30	; 48
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	b3 01       	movw	r22, r6
    1a2c:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1a30:	02 ff       	sbrs	r16, 2
    1a32:	1d c0       	rjmp	.+58     	; 0x1a6e <vfprintf+0x3a4>
    1a34:	01 fd       	sbrc	r16, 1
    1a36:	03 c0       	rjmp	.+6      	; 0x1a3e <vfprintf+0x374>
    1a38:	88 e7       	ldi	r24, 0x78	; 120
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e c0       	rjmp	.+28     	; 0x1a5a <vfprintf+0x390>
    1a3e:	88 e5       	ldi	r24, 0x58	; 88
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0b c0       	rjmp	.+22     	; 0x1a5a <vfprintf+0x390>
    1a44:	80 2f       	mov	r24, r16
    1a46:	86 78       	andi	r24, 0x86	; 134
    1a48:	91 f0       	breq	.+36     	; 0x1a6e <vfprintf+0x3a4>
    1a4a:	01 ff       	sbrs	r16, 1
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <vfprintf+0x388>
    1a4e:	8b e2       	ldi	r24, 0x2B	; 43
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <vfprintf+0x38a>
    1a52:	80 e2       	ldi	r24, 0x20	; 32
    1a54:	f7 fc       	sbrc	r15, 7
    1a56:	8d e2       	ldi	r24, 0x2D	; 45
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	b3 01       	movw	r22, r6
    1a5c:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <vfprintf+0x3a4>
    1a62:	80 e3       	ldi	r24, 0x30	; 48
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b3 01       	movw	r22, r6
    1a68:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1a6c:	9a 94       	dec	r9
    1a6e:	d9 14       	cp	r13, r9
    1a70:	c0 f3       	brcs	.-16     	; 0x1a62 <vfprintf+0x398>
    1a72:	da 94       	dec	r13
    1a74:	f1 01       	movw	r30, r2
    1a76:	ed 0d       	add	r30, r13
    1a78:	f1 1d       	adc	r31, r1
    1a7a:	80 81       	ld	r24, Z
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	b3 01       	movw	r22, r6
    1a80:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1a84:	dd 20       	and	r13, r13
    1a86:	a9 f7       	brne	.-22     	; 0x1a72 <vfprintf+0x3a8>
    1a88:	06 c0       	rjmp	.+12     	; 0x1a96 <vfprintf+0x3cc>
    1a8a:	80 e2       	ldi	r24, 0x20	; 32
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	b3 01       	movw	r22, r6
    1a90:	0e 94 a8 10 	call	0x2150	; 0x2150 <fputc>
    1a94:	ea 94       	dec	r14
    1a96:	ee 20       	and	r14, r14
    1a98:	c1 f7       	brne	.-16     	; 0x1a8a <vfprintf+0x3c0>
    1a9a:	43 ce       	rjmp	.-890    	; 0x1722 <vfprintf+0x58>
    1a9c:	f3 01       	movw	r30, r6
    1a9e:	66 81       	ldd	r22, Z+6	; 0x06
    1aa0:	77 81       	ldd	r23, Z+7	; 0x07
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	2b 96       	adiw	r28, 0x0b	; 11
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	bf 90       	pop	r11
    1ac2:	af 90       	pop	r10
    1ac4:	9f 90       	pop	r9
    1ac6:	8f 90       	pop	r8
    1ac8:	7f 90       	pop	r7
    1aca:	6f 90       	pop	r6
    1acc:	5f 90       	pop	r5
    1ace:	4f 90       	pop	r4
    1ad0:	3f 90       	pop	r3
    1ad2:	2f 90       	pop	r2
    1ad4:	08 95       	ret

00001ad6 <putval>:
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	20 fd       	sbrc	r18, 0
    1ada:	08 c0       	rjmp	.+16     	; 0x1aec <putval+0x16>
    1adc:	23 fd       	sbrc	r18, 3
    1ade:	05 c0       	rjmp	.+10     	; 0x1aea <putval+0x14>
    1ae0:	22 ff       	sbrs	r18, 2
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <putval+0x12>
    1ae4:	73 83       	std	Z+3, r23	; 0x03
    1ae6:	62 83       	std	Z+2, r22	; 0x02
    1ae8:	51 83       	std	Z+1, r21	; 0x01
    1aea:	40 83       	st	Z, r20
    1aec:	08 95       	ret

00001aee <mulacc>:
    1aee:	ef 92       	push	r14
    1af0:	ff 92       	push	r15
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	44 ff       	sbrs	r20, 4
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <mulacc+0x10>
    1afa:	33 e0       	ldi	r19, 0x03	; 3
    1afc:	11 c0       	rjmp	.+34     	; 0x1b20 <mulacc+0x32>
    1afe:	46 ff       	sbrs	r20, 6
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <mulacc+0x18>
    1b02:	34 e0       	ldi	r19, 0x04	; 4
    1b04:	0d c0       	rjmp	.+26     	; 0x1b20 <mulacc+0x32>
    1b06:	db 01       	movw	r26, r22
    1b08:	fc 01       	movw	r30, r24
    1b0a:	aa 0f       	add	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	ee 1f       	adc	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	10 94       	com	r1
    1b14:	d1 f7       	brne	.-12     	; 0x1b0a <mulacc+0x1c>
    1b16:	6a 0f       	add	r22, r26
    1b18:	7b 1f       	adc	r23, r27
    1b1a:	8e 1f       	adc	r24, r30
    1b1c:	9f 1f       	adc	r25, r31
    1b1e:	31 e0       	ldi	r19, 0x01	; 1
    1b20:	66 0f       	add	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	31 50       	subi	r19, 0x01	; 1
    1b2a:	d1 f7       	brne	.-12     	; 0x1b20 <mulacc+0x32>
    1b2c:	7b 01       	movw	r14, r22
    1b2e:	8c 01       	movw	r16, r24
    1b30:	e2 0e       	add	r14, r18
    1b32:	f1 1c       	adc	r15, r1
    1b34:	01 1d       	adc	r16, r1
    1b36:	11 1d       	adc	r17, r1
    1b38:	a8 01       	movw	r20, r16
    1b3a:	97 01       	movw	r18, r14
    1b3c:	b7 01       	movw	r22, r14
    1b3e:	ca 01       	movw	r24, r20
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	08 95       	ret

00001b4a <skip_spaces>:
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	8c 01       	movw	r16, r24
    1b54:	c8 01       	movw	r24, r16
    1b56:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	97 fd       	sbrc	r25, 7
    1b5e:	08 c0       	rjmp	.+16     	; 0x1b70 <skip_spaces+0x26>
    1b60:	0e 94 3d 10 	call	0x207a	; 0x207a <isspace>
    1b64:	89 2b       	or	r24, r25
    1b66:	b1 f7       	brne	.-20     	; 0x1b54 <skip_spaces+0xa>
    1b68:	ce 01       	movw	r24, r28
    1b6a:	b8 01       	movw	r22, r16
    1b6c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <ungetc>
    1b70:	ce 01       	movw	r24, r28
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <conv_int>:
    1b7c:	af 92       	push	r10
    1b7e:	bf 92       	push	r11
    1b80:	cf 92       	push	r12
    1b82:	df 92       	push	r13
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
    1b92:	c6 2e       	mov	r12, r22
    1b94:	5a 01       	movw	r10, r20
    1b96:	12 2f       	mov	r17, r18
    1b98:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	8b 32       	cpi	r24, 0x2B	; 43
    1ba0:	19 f0       	breq	.+6      	; 0x1ba8 <conv_int+0x2c>
    1ba2:	8d 32       	cpi	r24, 0x2D	; 45
    1ba4:	51 f4       	brne	.+20     	; 0x1bba <conv_int+0x3e>
    1ba6:	10 68       	ori	r17, 0x80	; 128
    1ba8:	ca 94       	dec	r12
    1baa:	09 f4       	brne	.+2      	; 0x1bae <conv_int+0x32>
    1bac:	6d c0       	rjmp	.+218    	; 0x1c88 <conv_int+0x10c>
    1bae:	ce 01       	movw	r24, r28
    1bb0:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	97 fd       	sbrc	r25, 7
    1bb8:	67 c0       	rjmp	.+206    	; 0x1c88 <conv_int+0x10c>
    1bba:	6d ef       	ldi	r22, 0xFD	; 253
    1bbc:	d6 2e       	mov	r13, r22
    1bbe:	d1 22       	and	r13, r17
    1bc0:	8d 2d       	mov	r24, r13
    1bc2:	80 73       	andi	r24, 0x30	; 48
    1bc4:	01 f5       	brne	.+64     	; 0x1c06 <conv_int+0x8a>
    1bc6:	40 33       	cpi	r20, 0x30	; 48
    1bc8:	f1 f4       	brne	.+60     	; 0x1c06 <conv_int+0x8a>
    1bca:	ca 94       	dec	r12
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <conv_int+0x54>
    1bce:	47 c0       	rjmp	.+142    	; 0x1c5e <conv_int+0xe2>
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1bd6:	ac 01       	movw	r20, r24
    1bd8:	97 fd       	sbrc	r25, 7
    1bda:	41 c0       	rjmp	.+130    	; 0x1c5e <conv_int+0xe2>
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	d8 2a       	or	r13, r24
    1be0:	48 37       	cpi	r20, 0x78	; 120
    1be2:	11 f0       	breq	.+4      	; 0x1be8 <conv_int+0x6c>
    1be4:	48 35       	cpi	r20, 0x58	; 88
    1be6:	59 f4       	brne	.+22     	; 0x1bfe <conv_int+0x82>
    1be8:	80 e4       	ldi	r24, 0x40	; 64
    1bea:	d8 2a       	or	r13, r24
    1bec:	ca 94       	dec	r12
    1bee:	b9 f1       	breq	.+110    	; 0x1c5e <conv_int+0xe2>
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	99 23       	and	r25, r25
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <conv_int+0x8a>
    1bfc:	30 c0       	rjmp	.+96     	; 0x1c5e <conv_int+0xe2>
    1bfe:	d6 fc       	sbrc	r13, 6
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <conv_int+0x8a>
    1c02:	80 e1       	ldi	r24, 0x10	; 16
    1c04:	d8 2a       	or	r13, r24
    1c06:	ee 24       	eor	r14, r14
    1c08:	ff 24       	eor	r15, r15
    1c0a:	87 01       	movw	r16, r14
    1c0c:	24 2f       	mov	r18, r20
    1c0e:	20 53       	subi	r18, 0x30	; 48
    1c10:	28 30       	cpi	r18, 0x08	; 8
    1c12:	88 f0       	brcs	.+34     	; 0x1c36 <conv_int+0xba>
    1c14:	d4 fc       	sbrc	r13, 4
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <conv_int+0xae>
    1c18:	2a 30       	cpi	r18, 0x0A	; 10
    1c1a:	68 f0       	brcs	.+26     	; 0x1c36 <conv_int+0xba>
    1c1c:	d6 fe       	sbrs	r13, 6
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <conv_int+0xae>
    1c20:	2f 7d       	andi	r18, 0xDF	; 223
    1c22:	82 2f       	mov	r24, r18
    1c24:	81 51       	subi	r24, 0x11	; 17
    1c26:	86 30       	cpi	r24, 0x06	; 6
    1c28:	28 f0       	brcs	.+10     	; 0x1c34 <conv_int+0xb8>
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	be 01       	movw	r22, r28
    1c2e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <ungetc>
    1c32:	12 c0       	rjmp	.+36     	; 0x1c58 <conv_int+0xdc>
    1c34:	27 50       	subi	r18, 0x07	; 7
    1c36:	c8 01       	movw	r24, r16
    1c38:	b7 01       	movw	r22, r14
    1c3a:	4d 2d       	mov	r20, r13
    1c3c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <mulacc>
    1c40:	7b 01       	movw	r14, r22
    1c42:	8c 01       	movw	r16, r24
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	d8 2a       	or	r13, r24
    1c48:	ca 94       	dec	r12
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <conv_int+0xe8>
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1c52:	ac 01       	movw	r20, r24
    1c54:	97 ff       	sbrs	r25, 7
    1c56:	da cf       	rjmp	.-76     	; 0x1c0c <conv_int+0x90>
    1c58:	d1 fc       	sbrc	r13, 1
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <conv_int+0xe8>
    1c5c:	15 c0       	rjmp	.+42     	; 0x1c88 <conv_int+0x10c>
    1c5e:	ee 24       	eor	r14, r14
    1c60:	ff 24       	eor	r15, r15
    1c62:	87 01       	movw	r16, r14
    1c64:	d7 fe       	sbrs	r13, 7
    1c66:	08 c0       	rjmp	.+16     	; 0x1c78 <conv_int+0xfc>
    1c68:	10 95       	com	r17
    1c6a:	00 95       	com	r16
    1c6c:	f0 94       	com	r15
    1c6e:	e0 94       	com	r14
    1c70:	e1 1c       	adc	r14, r1
    1c72:	f1 1c       	adc	r15, r1
    1c74:	01 1d       	adc	r16, r1
    1c76:	11 1d       	adc	r17, r1
    1c78:	c5 01       	movw	r24, r10
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	a7 01       	movw	r20, r14
    1c7e:	2d 2d       	mov	r18, r13
    1c80:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <putval>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <conv_int+0x10e>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	08 95       	ret

00001ca0 <conv_brk>:
    1ca0:	6f 92       	push	r6
    1ca2:	7f 92       	push	r7
    1ca4:	8f 92       	push	r8
    1ca6:	9f 92       	push	r9
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	a0 97       	sbiw	r28, 0x20	; 32
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	6c 01       	movw	r12, r24
    1cce:	a6 2e       	mov	r10, r22
    1cd0:	8a 01       	movw	r16, r20
    1cd2:	79 01       	movw	r14, r18
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	31 96       	adiw	r30, 0x01	; 1
    1cd8:	80 e2       	ldi	r24, 0x20	; 32
    1cda:	df 01       	movw	r26, r30
    1cdc:	1d 92       	st	X+, r1
    1cde:	8a 95       	dec	r24
    1ce0:	e9 f7       	brne	.-6      	; 0x1cdc <conv_brk+0x3c>
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	4f 01       	movw	r8, r30
    1cee:	a1 e0       	ldi	r26, 0x01	; 1
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	83 81       	ldd	r24, Z+3	; 0x03
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	83 fd       	sbrc	r24, 3
    1cfa:	25 91       	lpm	r18, Z+
    1cfc:	83 ff       	sbrs	r24, 3
    1cfe:	21 91       	ld	r18, Z+
    1d00:	7f 01       	movw	r14, r30
    1d02:	22 23       	and	r18, r18
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <conv_brk+0x68>
    1d06:	7e c0       	rjmp	.+252    	; 0x1e04 <conv_brk+0x164>
    1d08:	2e 35       	cpi	r18, 0x5E	; 94
    1d0a:	19 f4       	brne	.+6      	; 0x1d12 <conv_brk+0x72>
    1d0c:	41 15       	cp	r20, r1
    1d0e:	51 05       	cpc	r21, r1
    1d10:	69 f1       	breq	.+90     	; 0x1d6c <conv_brk+0xcc>
    1d12:	87 2f       	mov	r24, r23
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	84 17       	cp	r24, r20
    1d18:	95 07       	cpc	r25, r21
    1d1a:	44 f4       	brge	.+16     	; 0x1d2c <conv_brk+0x8c>
    1d1c:	2d 35       	cpi	r18, 0x5D	; 93
    1d1e:	51 f1       	breq	.+84     	; 0x1d74 <conv_brk+0xd4>
    1d20:	2d 32       	cpi	r18, 0x2D	; 45
    1d22:	21 f4       	brne	.+8      	; 0x1d2c <conv_brk+0x8c>
    1d24:	33 23       	and	r19, r19
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <conv_brk+0x92>
    1d28:	31 e0       	ldi	r19, 0x01	; 1
    1d2a:	21 c0       	rjmp	.+66     	; 0x1d6e <conv_brk+0xce>
    1d2c:	33 23       	and	r19, r19
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <conv_brk+0x92>
    1d30:	62 2f       	mov	r22, r18
    1d32:	32 2f       	mov	r19, r18
    1d34:	83 2f       	mov	r24, r19
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	86 95       	lsr	r24
    1d3c:	f4 01       	movw	r30, r8
    1d3e:	e8 0f       	add	r30, r24
    1d40:	f1 1d       	adc	r31, r1
    1d42:	83 2f       	mov	r24, r19
    1d44:	87 70       	andi	r24, 0x07	; 7
    1d46:	3d 01       	movw	r6, r26
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <conv_brk+0xae>
    1d4a:	66 0c       	add	r6, r6
    1d4c:	77 1c       	adc	r7, r7
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <conv_brk+0xaa>
    1d52:	20 81       	ld	r18, Z
    1d54:	26 29       	or	r18, r6
    1d56:	20 83       	st	Z, r18
    1d58:	36 17       	cp	r19, r22
    1d5a:	11 f4       	brne	.+4      	; 0x1d60 <conv_brk+0xc0>
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <conv_brk+0xce>
    1d60:	36 17       	cp	r19, r22
    1d62:	10 f4       	brcc	.+4      	; 0x1d68 <conv_brk+0xc8>
    1d64:	3f 5f       	subi	r19, 0xFF	; 255
    1d66:	e6 cf       	rjmp	.-52     	; 0x1d34 <conv_brk+0x94>
    1d68:	31 50       	subi	r19, 0x01	; 1
    1d6a:	e4 cf       	rjmp	.-56     	; 0x1d34 <conv_brk+0x94>
    1d6c:	71 e0       	ldi	r23, 0x01	; 1
    1d6e:	4f 5f       	subi	r20, 0xFF	; 255
    1d70:	5f 4f       	sbci	r21, 0xFF	; 255
    1d72:	bf cf       	rjmp	.-130    	; 0x1cf2 <conv_brk+0x52>
    1d74:	33 23       	and	r19, r19
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <conv_brk+0xde>
    1d78:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7a:	80 62       	ori	r24, 0x20	; 32
    1d7c:	8e 83       	std	Y+6, r24	; 0x06
    1d7e:	77 23       	and	r23, r23
    1d80:	59 f0       	breq	.+22     	; 0x1d98 <conv_brk+0xf8>
    1d82:	fe 01       	movw	r30, r28
    1d84:	31 96       	adiw	r30, 0x01	; 1
    1d86:	9e 01       	movw	r18, r28
    1d88:	2f 5d       	subi	r18, 0xDF	; 223
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	80 95       	com	r24
    1d90:	81 93       	st	Z+, r24
    1d92:	e2 17       	cp	r30, r18
    1d94:	f3 07       	cpc	r31, r19
    1d96:	d1 f7       	brne	.-12     	; 0x1d8c <conv_brk+0xec>
    1d98:	bb 24       	eor	r11, r11
    1d9a:	b3 94       	inc	r11
    1d9c:	4e 01       	movw	r8, r28
    1d9e:	08 94       	sec
    1da0:	81 1c       	adc	r8, r1
    1da2:	91 1c       	adc	r9, r1
    1da4:	c6 01       	movw	r24, r12
    1da6:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1daa:	ac 01       	movw	r20, r24
    1dac:	97 fd       	sbrc	r25, 7
    1dae:	22 c0       	rjmp	.+68     	; 0x1df4 <conv_brk+0x154>
    1db0:	86 95       	lsr	r24
    1db2:	86 95       	lsr	r24
    1db4:	86 95       	lsr	r24
    1db6:	f4 01       	movw	r30, r8
    1db8:	e8 0f       	add	r30, r24
    1dba:	f1 1d       	adc	r31, r1
    1dbc:	80 81       	ld	r24, Z
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9a 01       	movw	r18, r20
    1dc2:	27 70       	andi	r18, 0x07	; 7
    1dc4:	30 70       	andi	r19, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <conv_brk+0x12c>
    1dc8:	95 95       	asr	r25
    1dca:	87 95       	ror	r24
    1dcc:	2a 95       	dec	r18
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <conv_brk+0x128>
    1dd0:	80 fd       	sbrc	r24, 0
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <conv_brk+0x13e>
    1dd4:	ca 01       	movw	r24, r20
    1dd6:	b6 01       	movw	r22, r12
    1dd8:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <ungetc>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <conv_brk+0x154>
    1dde:	01 15       	cp	r16, r1
    1de0:	11 05       	cpc	r17, r1
    1de2:	19 f0       	breq	.+6      	; 0x1dea <conv_brk+0x14a>
    1de4:	d8 01       	movw	r26, r16
    1de6:	4d 93       	st	X+, r20
    1de8:	8d 01       	movw	r16, r26
    1dea:	aa 94       	dec	r10
    1dec:	bb 24       	eor	r11, r11
    1dee:	aa 20       	and	r10, r10
    1df0:	c9 f6       	brne	.-78     	; 0x1da4 <conv_brk+0x104>
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <conv_brk+0x158>
    1df4:	bb 20       	and	r11, r11
    1df6:	31 f4       	brne	.+12     	; 0x1e04 <conv_brk+0x164>
    1df8:	01 15       	cp	r16, r1
    1dfa:	11 05       	cpc	r17, r1
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <conv_brk+0x168>
    1dfe:	f8 01       	movw	r30, r16
    1e00:	10 82       	st	Z, r1
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <conv_brk+0x168>
    1e04:	ee 24       	eor	r14, r14
    1e06:	ff 24       	eor	r15, r15
    1e08:	c7 01       	movw	r24, r14
    1e0a:	a0 96       	adiw	r28, 0x20	; 32
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	cf 90       	pop	r12
    1e26:	bf 90       	pop	r11
    1e28:	af 90       	pop	r10
    1e2a:	9f 90       	pop	r9
    1e2c:	8f 90       	pop	r8
    1e2e:	7f 90       	pop	r7
    1e30:	6f 90       	pop	r6
    1e32:	08 95       	ret

00001e34 <vfscanf>:
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	5c 01       	movw	r10, r24
    1e52:	6b 01       	movw	r12, r22
    1e54:	3a 01       	movw	r6, r20
    1e56:	fc 01       	movw	r30, r24
    1e58:	17 82       	std	Z+7, r1	; 0x07
    1e5a:	16 82       	std	Z+6, r1	; 0x06
    1e5c:	88 24       	eor	r8, r8
    1e5e:	ea c0       	rjmp	.+468    	; 0x2034 <vfscanf+0x200>
    1e60:	81 2f       	mov	r24, r17
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 3d 10 	call	0x207a	; 0x207a <isspace>
    1e68:	89 2b       	or	r24, r25
    1e6a:	21 f0       	breq	.+8      	; 0x1e74 <vfscanf+0x40>
    1e6c:	c5 01       	movw	r24, r10
    1e6e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <skip_spaces>
    1e72:	e0 c0       	rjmp	.+448    	; 0x2034 <vfscanf+0x200>
    1e74:	15 32       	cpi	r17, 0x25	; 37
    1e76:	49 f4       	brne	.+18     	; 0x1e8a <vfscanf+0x56>
    1e78:	f6 01       	movw	r30, r12
    1e7a:	f3 fc       	sbrc	r15, 3
    1e7c:	65 91       	lpm	r22, Z+
    1e7e:	f3 fe       	sbrs	r15, 3
    1e80:	61 91       	ld	r22, Z+
    1e82:	6f 01       	movw	r12, r30
    1e84:	65 32       	cpi	r22, 0x25	; 37
    1e86:	69 f4       	brne	.+26     	; 0x1ea2 <vfscanf+0x6e>
    1e88:	15 e2       	ldi	r17, 0x25	; 37
    1e8a:	c5 01       	movw	r24, r10
    1e8c:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1e90:	97 fd       	sbrc	r25, 7
    1e92:	dc c0       	rjmp	.+440    	; 0x204c <vfscanf+0x218>
    1e94:	18 17       	cp	r17, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <vfscanf+0x66>
    1e98:	cd c0       	rjmp	.+410    	; 0x2034 <vfscanf+0x200>
    1e9a:	b5 01       	movw	r22, r10
    1e9c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <ungetc>
    1ea0:	da c0       	rjmp	.+436    	; 0x2056 <vfscanf+0x222>
    1ea2:	6a 32       	cpi	r22, 0x2A	; 42
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <vfscanf+0x78>
    1ea6:	16 2f       	mov	r17, r22
    1ea8:	00 e0       	ldi	r16, 0x00	; 0
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <vfscanf+0x84>
    1eac:	f3 fc       	sbrc	r15, 3
    1eae:	15 91       	lpm	r17, Z+
    1eb0:	f3 fe       	sbrs	r15, 3
    1eb2:	11 91       	ld	r17, Z+
    1eb4:	6f 01       	movw	r12, r30
    1eb6:	01 e0       	ldi	r16, 0x01	; 1
    1eb8:	99 24       	eor	r9, r9
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <vfscanf+0xa6>
    1ebc:	02 60       	ori	r16, 0x02	; 2
    1ebe:	69 2d       	mov	r22, r9
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <mulacc>
    1ecc:	96 2e       	mov	r9, r22
    1ece:	f6 01       	movw	r30, r12
    1ed0:	f3 fc       	sbrc	r15, 3
    1ed2:	15 91       	lpm	r17, Z+
    1ed4:	f3 fe       	sbrs	r15, 3
    1ed6:	11 91       	ld	r17, Z+
    1ed8:	6f 01       	movw	r12, r30
    1eda:	21 2f       	mov	r18, r17
    1edc:	20 53       	subi	r18, 0x30	; 48
    1ede:	2a 30       	cpi	r18, 0x0A	; 10
    1ee0:	68 f3       	brcs	.-38     	; 0x1ebc <vfscanf+0x88>
    1ee2:	01 fd       	sbrc	r16, 1
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <vfscanf+0xb8>
    1ee6:	99 24       	eor	r9, r9
    1ee8:	9a 94       	dec	r9
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <vfscanf+0xbe>
    1eec:	99 20       	and	r9, r9
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <vfscanf+0xbe>
    1ef0:	b2 c0       	rjmp	.+356    	; 0x2056 <vfscanf+0x222>
    1ef2:	18 36       	cpi	r17, 0x68	; 104
    1ef4:	21 f0       	breq	.+8      	; 0x1efe <vfscanf+0xca>
    1ef6:	1c 36       	cpi	r17, 0x6C	; 108
    1ef8:	99 f4       	brne	.+38     	; 0x1f20 <vfscanf+0xec>
    1efa:	f6 01       	movw	r30, r12
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <vfscanf+0xe0>
    1efe:	f6 01       	movw	r30, r12
    1f00:	f3 fc       	sbrc	r15, 3
    1f02:	65 91       	lpm	r22, Z+
    1f04:	f3 fe       	sbrs	r15, 3
    1f06:	61 91       	ld	r22, Z+
    1f08:	68 36       	cpi	r22, 0x68	; 104
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <vfscanf+0xde>
    1f0c:	6f 01       	movw	r12, r30
    1f0e:	16 2f       	mov	r17, r22
    1f10:	07 c0       	rjmp	.+14     	; 0x1f20 <vfscanf+0xec>
    1f12:	08 60       	ori	r16, 0x08	; 8
    1f14:	04 60       	ori	r16, 0x04	; 4
    1f16:	f3 fc       	sbrc	r15, 3
    1f18:	15 91       	lpm	r17, Z+
    1f1a:	f3 fe       	sbrs	r15, 3
    1f1c:	11 91       	ld	r17, Z+
    1f1e:	6f 01       	movw	r12, r30
    1f20:	11 23       	and	r17, r17
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <vfscanf+0xf2>
    1f24:	98 c0       	rjmp	.+304    	; 0x2056 <vfscanf+0x222>
    1f26:	8c e5       	ldi	r24, 0x5C	; 92
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	61 2f       	mov	r22, r17
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	0e 94 45 10 	call	0x208a	; 0x208a <strchr_P>
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <vfscanf+0x104>
    1f36:	8f c0       	rjmp	.+286    	; 0x2056 <vfscanf+0x222>
    1f38:	80 2f       	mov	r24, r16
    1f3a:	00 ff       	sbrs	r16, 0
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <vfscanf+0x110>
    1f3e:	ee 24       	eor	r14, r14
    1f40:	ff 24       	eor	r15, r15
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <vfscanf+0x11e>
    1f44:	f3 01       	movw	r30, r6
    1f46:	e0 80       	ld	r14, Z
    1f48:	f1 80       	ldd	r15, Z+1	; 0x01
    1f4a:	22 e0       	ldi	r18, 0x02	; 2
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	62 0e       	add	r6, r18
    1f50:	73 1e       	adc	r7, r19
    1f52:	1e 36       	cpi	r17, 0x6E	; 110
    1f54:	51 f4       	brne	.+20     	; 0x1f6a <vfscanf+0x136>
    1f56:	f5 01       	movw	r30, r10
    1f58:	46 81       	ldd	r20, Z+6	; 0x06
    1f5a:	57 81       	ldd	r21, Z+7	; 0x07
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	c7 01       	movw	r24, r14
    1f62:	20 2f       	mov	r18, r16
    1f64:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <putval>
    1f68:	65 c0       	rjmp	.+202    	; 0x2034 <vfscanf+0x200>
    1f6a:	13 36       	cpi	r17, 0x63	; 99
    1f6c:	91 f4       	brne	.+36     	; 0x1f92 <vfscanf+0x15e>
    1f6e:	81 fd       	sbrc	r24, 1
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <vfscanf+0x142>
    1f72:	99 24       	eor	r9, r9
    1f74:	93 94       	inc	r9
    1f76:	c5 01       	movw	r24, r10
    1f78:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1f7c:	97 fd       	sbrc	r25, 7
    1f7e:	66 c0       	rjmp	.+204    	; 0x204c <vfscanf+0x218>
    1f80:	e1 14       	cp	r14, r1
    1f82:	f1 04       	cpc	r15, r1
    1f84:	19 f0       	breq	.+6      	; 0x1f8c <vfscanf+0x158>
    1f86:	f7 01       	movw	r30, r14
    1f88:	81 93       	st	Z+, r24
    1f8a:	7f 01       	movw	r14, r30
    1f8c:	9a 94       	dec	r9
    1f8e:	99 f7       	brne	.-26     	; 0x1f76 <vfscanf+0x142>
    1f90:	4f c0       	rjmp	.+158    	; 0x2030 <vfscanf+0x1fc>
    1f92:	1b 35       	cpi	r17, 0x5B	; 91
    1f94:	59 f4       	brne	.+22     	; 0x1fac <vfscanf+0x178>
    1f96:	c5 01       	movw	r24, r10
    1f98:	69 2d       	mov	r22, r9
    1f9a:	a7 01       	movw	r20, r14
    1f9c:	96 01       	movw	r18, r12
    1f9e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <conv_brk>
    1fa2:	6c 01       	movw	r12, r24
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <vfscanf+0x176>
    1fa8:	43 c0       	rjmp	.+134    	; 0x2030 <vfscanf+0x1fc>
    1faa:	3d c0       	rjmp	.+122    	; 0x2026 <vfscanf+0x1f2>
    1fac:	c5 01       	movw	r24, r10
    1fae:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <skip_spaces>
    1fb2:	97 fd       	sbrc	r25, 7
    1fb4:	4b c0       	rjmp	.+150    	; 0x204c <vfscanf+0x218>
    1fb6:	1f 36       	cpi	r17, 0x6F	; 111
    1fb8:	59 f1       	breq	.+86     	; 0x2010 <vfscanf+0x1dc>
    1fba:	10 37       	cpi	r17, 0x70	; 112
    1fbc:	28 f4       	brcc	.+10     	; 0x1fc8 <vfscanf+0x194>
    1fbe:	14 36       	cpi	r17, 0x64	; 100
    1fc0:	29 f1       	breq	.+74     	; 0x200c <vfscanf+0x1d8>
    1fc2:	19 36       	cpi	r17, 0x69	; 105
    1fc4:	39 f5       	brne	.+78     	; 0x2014 <vfscanf+0x1e0>
    1fc6:	27 c0       	rjmp	.+78     	; 0x2016 <vfscanf+0x1e2>
    1fc8:	13 37       	cpi	r17, 0x73	; 115
    1fca:	19 f0       	breq	.+6      	; 0x1fd2 <vfscanf+0x19e>
    1fcc:	15 37       	cpi	r17, 0x75	; 117
    1fce:	11 f5       	brne	.+68     	; 0x2014 <vfscanf+0x1e0>
    1fd0:	1d c0       	rjmp	.+58     	; 0x200c <vfscanf+0x1d8>
    1fd2:	c5 01       	movw	r24, r10
    1fd4:	0e 94 66 10 	call	0x20cc	; 0x20cc <fgetc>
    1fd8:	ec 01       	movw	r28, r24
    1fda:	97 fd       	sbrc	r25, 7
    1fdc:	11 c0       	rjmp	.+34     	; 0x2000 <vfscanf+0x1cc>
    1fde:	0e 94 3d 10 	call	0x207a	; 0x207a <isspace>
    1fe2:	89 2b       	or	r24, r25
    1fe4:	29 f0       	breq	.+10     	; 0x1ff0 <vfscanf+0x1bc>
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	b5 01       	movw	r22, r10
    1fea:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <ungetc>
    1fee:	08 c0       	rjmp	.+16     	; 0x2000 <vfscanf+0x1cc>
    1ff0:	e1 14       	cp	r14, r1
    1ff2:	f1 04       	cpc	r15, r1
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <vfscanf+0x1c8>
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	c1 93       	st	Z+, r28
    1ffa:	7f 01       	movw	r14, r30
    1ffc:	9a 94       	dec	r9
    1ffe:	49 f7       	brne	.-46     	; 0x1fd2 <vfscanf+0x19e>
    2000:	e1 14       	cp	r14, r1
    2002:	f1 04       	cpc	r15, r1
    2004:	a9 f0       	breq	.+42     	; 0x2030 <vfscanf+0x1fc>
    2006:	f7 01       	movw	r30, r14
    2008:	10 82       	st	Z, r1
    200a:	12 c0       	rjmp	.+36     	; 0x2030 <vfscanf+0x1fc>
    200c:	00 62       	ori	r16, 0x20	; 32
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <vfscanf+0x1e2>
    2010:	00 61       	ori	r16, 0x10	; 16
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <vfscanf+0x1e2>
    2014:	00 64       	ori	r16, 0x40	; 64
    2016:	c5 01       	movw	r24, r10
    2018:	69 2d       	mov	r22, r9
    201a:	a7 01       	movw	r20, r14
    201c:	20 2f       	mov	r18, r16
    201e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <conv_int>
    2022:	88 23       	and	r24, r24
    2024:	29 f4       	brne	.+10     	; 0x2030 <vfscanf+0x1fc>
    2026:	f5 01       	movw	r30, r10
    2028:	83 81       	ldd	r24, Z+3	; 0x03
    202a:	80 73       	andi	r24, 0x30	; 48
    202c:	79 f4       	brne	.+30     	; 0x204c <vfscanf+0x218>
    202e:	13 c0       	rjmp	.+38     	; 0x2056 <vfscanf+0x222>
    2030:	00 ff       	sbrs	r16, 0
    2032:	83 94       	inc	r8
    2034:	f5 01       	movw	r30, r10
    2036:	f3 80       	ldd	r15, Z+3	; 0x03
    2038:	f6 01       	movw	r30, r12
    203a:	f3 fc       	sbrc	r15, 3
    203c:	15 91       	lpm	r17, Z+
    203e:	f3 fe       	sbrs	r15, 3
    2040:	11 91       	ld	r17, Z+
    2042:	6f 01       	movw	r12, r30
    2044:	11 23       	and	r17, r17
    2046:	09 f0       	breq	.+2      	; 0x204a <vfscanf+0x216>
    2048:	0b cf       	rjmp	.-490    	; 0x1e60 <vfscanf+0x2c>
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <vfscanf+0x222>
    204c:	88 20       	and	r8, r8
    204e:	19 f4       	brne	.+6      	; 0x2056 <vfscanf+0x222>
    2050:	2f ef       	ldi	r18, 0xFF	; 255
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	02 c0       	rjmp	.+4      	; 0x205a <vfscanf+0x226>
    2056:	28 2d       	mov	r18, r8
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	c9 01       	movw	r24, r18
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	ff 90       	pop	r15
    2066:	ef 90       	pop	r14
    2068:	df 90       	pop	r13
    206a:	cf 90       	pop	r12
    206c:	bf 90       	pop	r11
    206e:	af 90       	pop	r10
    2070:	9f 90       	pop	r9
    2072:	8f 90       	pop	r8
    2074:	7f 90       	pop	r7
    2076:	6f 90       	pop	r6
    2078:	08 95       	ret

0000207a <isspace>:
    207a:	91 11       	cpse	r25, r1
    207c:	0d c1       	rjmp	.+538    	; 0x2298 <__ctype_isfalse>
    207e:	80 32       	cpi	r24, 0x20	; 32
    2080:	19 f0       	breq	.+6      	; 0x2088 <isspace+0xe>
    2082:	89 50       	subi	r24, 0x09	; 9
    2084:	85 50       	subi	r24, 0x05	; 5
    2086:	d0 f7       	brcc	.-12     	; 0x207c <isspace+0x2>
    2088:	08 95       	ret

0000208a <strchr_P>:
    208a:	fc 01       	movw	r30, r24
    208c:	05 90       	lpm	r0, Z+
    208e:	06 16       	cp	r0, r22
    2090:	21 f0       	breq	.+8      	; 0x209a <strchr_P+0x10>
    2092:	00 20       	and	r0, r0
    2094:	d9 f7       	brne	.-10     	; 0x208c <strchr_P+0x2>
    2096:	c0 01       	movw	r24, r0
    2098:	08 95       	ret
    209a:	31 97       	sbiw	r30, 0x01	; 1
    209c:	cf 01       	movw	r24, r30
    209e:	08 95       	ret

000020a0 <strnlen_P>:
    20a0:	fc 01       	movw	r30, r24
    20a2:	05 90       	lpm	r0, Z+
    20a4:	61 50       	subi	r22, 0x01	; 1
    20a6:	70 40       	sbci	r23, 0x00	; 0
    20a8:	01 10       	cpse	r0, r1
    20aa:	d8 f7       	brcc	.-10     	; 0x20a2 <strnlen_P+0x2>
    20ac:	80 95       	com	r24
    20ae:	90 95       	com	r25
    20b0:	8e 0f       	add	r24, r30
    20b2:	9f 1f       	adc	r25, r31
    20b4:	08 95       	ret

000020b6 <strnlen>:
    20b6:	fc 01       	movw	r30, r24
    20b8:	61 50       	subi	r22, 0x01	; 1
    20ba:	70 40       	sbci	r23, 0x00	; 0
    20bc:	01 90       	ld	r0, Z+
    20be:	01 10       	cpse	r0, r1
    20c0:	d8 f7       	brcc	.-10     	; 0x20b8 <strnlen+0x2>
    20c2:	80 95       	com	r24
    20c4:	90 95       	com	r25
    20c6:	8e 0f       	add	r24, r30
    20c8:	9f 1f       	adc	r25, r31
    20ca:	08 95       	ret

000020cc <fgetc>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	ec 01       	movw	r28, r24
    20d2:	4b 81       	ldd	r20, Y+3	; 0x03
    20d4:	40 ff       	sbrs	r20, 0
    20d6:	1a c0       	rjmp	.+52     	; 0x210c <fgetc+0x40>
    20d8:	46 ff       	sbrs	r20, 6
    20da:	0a c0       	rjmp	.+20     	; 0x20f0 <fgetc+0x24>
    20dc:	4f 7b       	andi	r20, 0xBF	; 191
    20de:	4b 83       	std	Y+3, r20	; 0x03
    20e0:	8e 81       	ldd	r24, Y+6	; 0x06
    20e2:	9f 81       	ldd	r25, Y+7	; 0x07
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	9f 83       	std	Y+7, r25	; 0x07
    20e8:	8e 83       	std	Y+6, r24	; 0x06
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	2b c0       	rjmp	.+86     	; 0x2146 <fgetc+0x7a>
    20f0:	42 ff       	sbrs	r20, 2
    20f2:	13 c0       	rjmp	.+38     	; 0x211a <fgetc+0x4e>
    20f4:	e8 81       	ld	r30, Y
    20f6:	f9 81       	ldd	r31, Y+1	; 0x01
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	33 27       	eor	r19, r19
    20fe:	27 fd       	sbrc	r18, 7
    2100:	30 95       	com	r19
    2102:	21 15       	cp	r18, r1
    2104:	31 05       	cpc	r19, r1
    2106:	29 f4       	brne	.+10     	; 0x2112 <fgetc+0x46>
    2108:	40 62       	ori	r20, 0x20	; 32
    210a:	4b 83       	std	Y+3, r20	; 0x03
    210c:	2f ef       	ldi	r18, 0xFF	; 255
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	1b c0       	rjmp	.+54     	; 0x2148 <fgetc+0x7c>
    2112:	31 96       	adiw	r30, 0x01	; 1
    2114:	f9 83       	std	Y+1, r31	; 0x01
    2116:	e8 83       	st	Y, r30
    2118:	11 c0       	rjmp	.+34     	; 0x213c <fgetc+0x70>
    211a:	ea 85       	ldd	r30, Y+10	; 0x0a
    211c:	fb 85       	ldd	r31, Y+11	; 0x0b
    211e:	ce 01       	movw	r24, r28
    2120:	09 95       	icall
    2122:	9c 01       	movw	r18, r24
    2124:	97 ff       	sbrs	r25, 7
    2126:	0a c0       	rjmp	.+20     	; 0x213c <fgetc+0x70>
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	2f 5f       	subi	r18, 0xFF	; 255
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	11 f0       	breq	.+4      	; 0x2134 <fgetc+0x68>
    2130:	80 e2       	ldi	r24, 0x20	; 32
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <fgetc+0x6a>
    2134:	80 e1       	ldi	r24, 0x10	; 16
    2136:	89 2b       	or	r24, r25
    2138:	8b 83       	std	Y+3, r24	; 0x03
    213a:	e8 cf       	rjmp	.-48     	; 0x210c <fgetc+0x40>
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	9f 81       	ldd	r25, Y+7	; 0x07
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	9f 83       	std	Y+7, r25	; 0x07
    2144:	8e 83       	std	Y+6, r24	; 0x06
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	c9 01       	movw	r24, r18
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	08 95       	ret

00002150 <fputc>:
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	8c 01       	movw	r16, r24
    215a:	eb 01       	movw	r28, r22
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	81 ff       	sbrs	r24, 1
    2160:	1b c0       	rjmp	.+54     	; 0x2198 <fputc+0x48>
    2162:	82 ff       	sbrs	r24, 2
    2164:	0d c0       	rjmp	.+26     	; 0x2180 <fputc+0x30>
    2166:	2e 81       	ldd	r18, Y+6	; 0x06
    2168:	3f 81       	ldd	r19, Y+7	; 0x07
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	9d 81       	ldd	r25, Y+5	; 0x05
    216e:	28 17       	cp	r18, r24
    2170:	39 07       	cpc	r19, r25
    2172:	64 f4       	brge	.+24     	; 0x218c <fputc+0x3c>
    2174:	e8 81       	ld	r30, Y
    2176:	f9 81       	ldd	r31, Y+1	; 0x01
    2178:	01 93       	st	Z+, r16
    217a:	f9 83       	std	Y+1, r31	; 0x01
    217c:	e8 83       	st	Y, r30
    217e:	06 c0       	rjmp	.+12     	; 0x218c <fputc+0x3c>
    2180:	e8 85       	ldd	r30, Y+8	; 0x08
    2182:	f9 85       	ldd	r31, Y+9	; 0x09
    2184:	80 2f       	mov	r24, r16
    2186:	09 95       	icall
    2188:	89 2b       	or	r24, r25
    218a:	31 f4       	brne	.+12     	; 0x2198 <fputc+0x48>
    218c:	8e 81       	ldd	r24, Y+6	; 0x06
    218e:	9f 81       	ldd	r25, Y+7	; 0x07
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	9f 83       	std	Y+7, r25	; 0x07
    2194:	8e 83       	std	Y+6, r24	; 0x06
    2196:	02 c0       	rjmp	.+4      	; 0x219c <fputc+0x4c>
    2198:	0f ef       	ldi	r16, 0xFF	; 255
    219a:	1f ef       	ldi	r17, 0xFF	; 255
    219c:	c8 01       	movw	r24, r16
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <ungetc>:
    21a8:	9c 01       	movw	r18, r24
    21aa:	fb 01       	movw	r30, r22
    21ac:	83 81       	ldd	r24, Z+3	; 0x03
    21ae:	80 ff       	sbrs	r24, 0
    21b0:	11 c0       	rjmp	.+34     	; 0x21d4 <ungetc+0x2c>
    21b2:	86 fd       	sbrc	r24, 6
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <ungetc+0x2c>
    21b6:	9f ef       	ldi	r25, 0xFF	; 255
    21b8:	2f 3f       	cpi	r18, 0xFF	; 255
    21ba:	39 07       	cpc	r19, r25
    21bc:	59 f0       	breq	.+22     	; 0x21d4 <ungetc+0x2c>
    21be:	22 83       	std	Z+2, r18	; 0x02
    21c0:	80 64       	ori	r24, 0x40	; 64
    21c2:	8f 7d       	andi	r24, 0xDF	; 223
    21c4:	83 83       	std	Z+3, r24	; 0x03
    21c6:	86 81       	ldd	r24, Z+6	; 0x06
    21c8:	97 81       	ldd	r25, Z+7	; 0x07
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	97 83       	std	Z+7, r25	; 0x07
    21ce:	86 83       	std	Z+6, r24	; 0x06
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <ungetc+0x30>
    21d4:	2f ef       	ldi	r18, 0xFF	; 255
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	c9 01       	movw	r24, r18
    21da:	08 95       	ret

000021dc <__ultoa_invert>:
    21dc:	fa 01       	movw	r30, r20
    21de:	aa 27       	eor	r26, r26
    21e0:	28 30       	cpi	r18, 0x08	; 8
    21e2:	51 f1       	breq	.+84     	; 0x2238 <__ultoa_invert+0x5c>
    21e4:	20 31       	cpi	r18, 0x10	; 16
    21e6:	81 f1       	breq	.+96     	; 0x2248 <__ultoa_invert+0x6c>
    21e8:	e8 94       	clt
    21ea:	6f 93       	push	r22
    21ec:	6e 7f       	andi	r22, 0xFE	; 254
    21ee:	6e 5f       	subi	r22, 0xFE	; 254
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	8f 4f       	sbci	r24, 0xFF	; 255
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	af 4f       	sbci	r26, 0xFF	; 255
    21f8:	b1 e0       	ldi	r27, 0x01	; 1
    21fa:	3e d0       	rcall	.+124    	; 0x2278 <__ultoa_invert+0x9c>
    21fc:	b4 e0       	ldi	r27, 0x04	; 4
    21fe:	3c d0       	rcall	.+120    	; 0x2278 <__ultoa_invert+0x9c>
    2200:	67 0f       	add	r22, r23
    2202:	78 1f       	adc	r23, r24
    2204:	89 1f       	adc	r24, r25
    2206:	9a 1f       	adc	r25, r26
    2208:	a1 1d       	adc	r26, r1
    220a:	68 0f       	add	r22, r24
    220c:	79 1f       	adc	r23, r25
    220e:	8a 1f       	adc	r24, r26
    2210:	91 1d       	adc	r25, r1
    2212:	a1 1d       	adc	r26, r1
    2214:	6a 0f       	add	r22, r26
    2216:	71 1d       	adc	r23, r1
    2218:	81 1d       	adc	r24, r1
    221a:	91 1d       	adc	r25, r1
    221c:	a1 1d       	adc	r26, r1
    221e:	20 d0       	rcall	.+64     	; 0x2260 <__ultoa_invert+0x84>
    2220:	09 f4       	brne	.+2      	; 0x2224 <__ultoa_invert+0x48>
    2222:	68 94       	set
    2224:	3f 91       	pop	r19
    2226:	2a e0       	ldi	r18, 0x0A	; 10
    2228:	26 9f       	mul	r18, r22
    222a:	11 24       	eor	r1, r1
    222c:	30 19       	sub	r19, r0
    222e:	30 5d       	subi	r19, 0xD0	; 208
    2230:	31 93       	st	Z+, r19
    2232:	de f6       	brtc	.-74     	; 0x21ea <__ultoa_invert+0xe>
    2234:	cf 01       	movw	r24, r30
    2236:	08 95       	ret
    2238:	46 2f       	mov	r20, r22
    223a:	47 70       	andi	r20, 0x07	; 7
    223c:	40 5d       	subi	r20, 0xD0	; 208
    223e:	41 93       	st	Z+, r20
    2240:	b3 e0       	ldi	r27, 0x03	; 3
    2242:	0f d0       	rcall	.+30     	; 0x2262 <__ultoa_invert+0x86>
    2244:	c9 f7       	brne	.-14     	; 0x2238 <__ultoa_invert+0x5c>
    2246:	f6 cf       	rjmp	.-20     	; 0x2234 <__ultoa_invert+0x58>
    2248:	46 2f       	mov	r20, r22
    224a:	4f 70       	andi	r20, 0x0F	; 15
    224c:	40 5d       	subi	r20, 0xD0	; 208
    224e:	4a 33       	cpi	r20, 0x3A	; 58
    2250:	18 f0       	brcs	.+6      	; 0x2258 <__ultoa_invert+0x7c>
    2252:	49 5d       	subi	r20, 0xD9	; 217
    2254:	31 fd       	sbrc	r19, 1
    2256:	40 52       	subi	r20, 0x20	; 32
    2258:	41 93       	st	Z+, r20
    225a:	02 d0       	rcall	.+4      	; 0x2260 <__ultoa_invert+0x84>
    225c:	a9 f7       	brne	.-22     	; 0x2248 <__ultoa_invert+0x6c>
    225e:	ea cf       	rjmp	.-44     	; 0x2234 <__ultoa_invert+0x58>
    2260:	b4 e0       	ldi	r27, 0x04	; 4
    2262:	a6 95       	lsr	r26
    2264:	97 95       	ror	r25
    2266:	87 95       	ror	r24
    2268:	77 95       	ror	r23
    226a:	67 95       	ror	r22
    226c:	ba 95       	dec	r27
    226e:	c9 f7       	brne	.-14     	; 0x2262 <__ultoa_invert+0x86>
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	61 05       	cpc	r22, r1
    2274:	71 05       	cpc	r23, r1
    2276:	08 95       	ret
    2278:	9b 01       	movw	r18, r22
    227a:	ac 01       	movw	r20, r24
    227c:	0a 2e       	mov	r0, r26
    227e:	06 94       	lsr	r0
    2280:	57 95       	ror	r21
    2282:	47 95       	ror	r20
    2284:	37 95       	ror	r19
    2286:	27 95       	ror	r18
    2288:	ba 95       	dec	r27
    228a:	c9 f7       	brne	.-14     	; 0x227e <__ultoa_invert+0xa2>
    228c:	62 0f       	add	r22, r18
    228e:	73 1f       	adc	r23, r19
    2290:	84 1f       	adc	r24, r20
    2292:	95 1f       	adc	r25, r21
    2294:	a0 1d       	adc	r26, r0
    2296:	08 95       	ret

00002298 <__ctype_isfalse>:
    2298:	99 27       	eor	r25, r25
    229a:	88 27       	eor	r24, r24

0000229c <__ctype_istrue>:
    229c:	08 95       	ret

0000229e <_exit>:
    229e:	f8 94       	cli

000022a0 <__stop_program>:
    22a0:	ff cf       	rjmp	.-2      	; 0x22a0 <__stop_program>
