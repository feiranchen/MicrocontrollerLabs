
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000018c4  00001958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d3  00800198  00800198  000019f0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000249  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e23  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e3  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a70  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00003a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c7  00000000  00000000  00003ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      2c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      30:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      58:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      5c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      60:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      68:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      6c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      70:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      7c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      80:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      84:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LcdCustomChar>:
      b0:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      c0:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      d0:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      e0:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000f0 <__c.1988>:
      f0:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d0 e4       	ldi	r29, 0x40	; 64
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	e4 ec       	ldi	r30, 0xC4	; 196
     110:	f8 e1       	ldi	r31, 0x18	; 24
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a8 39       	cpi	r26, 0x98	; 152
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	14 e0       	ldi	r17, 0x04	; 4
     124:	a8 e9       	ldi	r26, 0x98	; 152
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	ab 36       	cpi	r26, 0x6B	; 107
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 b2 00 	call	0x164	; 0x164 <main>
     136:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <_exit>

0000013a <__bad_interrupt>:
     13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013e <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     13e:	0e 94 03 04 	call	0x806	; 0x806 <LCDinit>
	LCDcursorOFF();
     142:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <LCDcursorOFF>
	LCDclr();	//clear the display
     146:	0e 94 9c 03 	call	0x738	; 0x738 <LCDclr>
	LCDGotoXY(0,0);
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     152:	8c e8       	ldi	r24, 0x8C	; 140
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	0e 94 c8 03 	call	0x790	; 0x790 <CopyStringtoLCD>
	LCD_char_count = 0;
     15e:	10 92 c3 02 	sts	0x02C3, r1
end
     162:	08 95       	ret

00000164 <main>:

// --- Main Program ----------------------------------
int main(void) {
     164:	2f 92       	push	r2
     166:	3f 92       	push	r3
     168:	4f 92       	push	r4
     16a:	5f 92       	push	r5
     16c:	6f 92       	push	r6
     16e:	7f 92       	push	r7
     170:	8f 92       	push	r8
     172:	9f 92       	push	r9
     174:	af 92       	push	r10
     176:	bf 92       	push	r11
     178:	cf 92       	push	r12
     17a:	df 92       	push	r13
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
     18c:	69 97       	sbiw	r28, 0x19	; 25
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	f8 94       	cli
     192:	de bf       	out	0x3e, r29	; 62
     194:	0f be       	out	0x3f, r0	; 63
     196:	cd bf       	out	0x3d, r28	; 61
  int i =0;
  int x=-2 ,y=-2,d=-2;// container for parsed ints
     198:	8e ef       	ldi	r24, 0xFE	; 254
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	9a 83       	std	Y+2, r25	; 0x02
     19e:	89 83       	std	Y+1, r24	; 0x01
     1a0:	9c 83       	std	Y+4, r25	; 0x04
     1a2:	8b 83       	std	Y+3, r24	; 0x03
     1a4:	9e 83       	std	Y+6, r25	; 0x06
     1a6:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     1a8:	18 86       	std	Y+8, r1	; 0x08
     1aa:	1f 82       	std	Y+7, r1	; 0x07
  LCD_init();
     1ac:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     1b0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <uart_init>
  stdout = stdin = stderr = &uart_str;
     1b4:	62 e8       	ldi	r22, 0x82	; 130
     1b6:	71 e0       	ldi	r23, 0x01	; 1
     1b8:	70 93 6a 04 	sts	0x046A, r23
     1bc:	60 93 69 04 	sts	0x0469, r22
     1c0:	70 93 66 04 	sts	0x0466, r23
     1c4:	60 93 65 04 	sts	0x0465, r22
     1c8:	70 93 68 04 	sts	0x0468, r23
     1cc:	60 93 67 04 	sts	0x0467, r22

  // Allocate memory for the buffer	
  fprintf(stdout,"File Length\n\r");
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     1d8:	00 d0       	rcall	.+0      	; 0x1da <main+0x76>
     1da:	00 d0       	rcall	.+0      	; 0x1dc <main+0x78>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x7a>
     1de:	ed b7       	in	r30, 0x3d	; 61
     1e0:	fe b7       	in	r31, 0x3e	; 62
     1e2:	31 96       	adiw	r30, 0x01	; 1
     1e4:	80 91 65 04 	lds	r24, 0x0465
     1e8:	90 91 66 04 	lds	r25, 0x0466
     1ec:	ad b7       	in	r26, 0x3d	; 61
     1ee:	be b7       	in	r27, 0x3e	; 62
     1f0:	12 96       	adiw	r26, 0x02	; 2
     1f2:	9c 93       	st	X, r25
     1f4:	8e 93       	st	-X, r24
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	8e e0       	ldi	r24, 0x0E	; 14
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	93 83       	std	Z+3, r25	; 0x03
     1fe:	82 83       	std	Z+2, r24	; 0x02
     200:	ce 01       	movw	r24, r28
     202:	07 96       	adiw	r24, 0x07	; 7
     204:	95 83       	std	Z+5, r25	; 0x05
     206:	84 83       	std	Z+4, r24	; 0x04
     208:	0e 94 11 06 	call	0xc22	; 0xc22 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     20c:	ed b7       	in	r30, 0x3d	; 61
     20e:	fe b7       	in	r31, 0x3e	; 62
     210:	31 96       	adiw	r30, 0x01	; 1
     212:	0c e8       	ldi	r16, 0x8C	; 140
     214:	13 e0       	ldi	r17, 0x03	; 3
     216:	ad b7       	in	r26, 0x3d	; 61
     218:	be b7       	in	r27, 0x3e	; 62
     21a:	12 96       	adiw	r26, 0x02	; 2
     21c:	1c 93       	st	X, r17
     21e:	0e 93       	st	-X, r16
     220:	11 97       	sbiw	r26, 0x01	; 1
     222:	82 e1       	ldi	r24, 0x12	; 18
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	93 83       	std	Z+3, r25	; 0x03
     228:	82 83       	std	Z+2, r24	; 0x02
     22a:	8f 81       	ldd	r24, Y+7	; 0x07
     22c:	98 85       	ldd	r25, Y+8	; 0x08
     22e:	95 83       	std	Z+5, r25	; 0x05
     230:	84 83       	std	Z+4, r24	; 0x04
     232:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>

	LCDGotoXY(0, 0);
     236:	6d b7       	in	r22, 0x3d	; 61
     238:	7e b7       	in	r23, 0x3e	; 62
     23a:	6a 5f       	subi	r22, 0xFA	; 250
     23c:	7f 4f       	sbci	r23, 0xFF	; 255
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	7e bf       	out	0x3e, r23	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	6d bf       	out	0x3d, r22	; 61
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     250:	f8 01       	movw	r30, r16
     252:	01 90       	ld	r0, Z+
     254:	00 20       	and	r0, r0
     256:	e9 f7       	brne	.-6      	; 0x252 <main+0xee>
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	e0 1b       	sub	r30, r16
     25c:	f1 0b       	sbc	r31, r17
     25e:	c8 01       	movw	r24, r16
     260:	6e 2f       	mov	r22, r30
     262:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     26a:	79 e0       	ldi	r23, 0x09	; 9
     26c:	a7 2e       	mov	r10, r23
     26e:	b1 2c       	mov	r11, r1
     270:	ac 0e       	add	r10, r28
     272:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i  ", i);
     274:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid Input@%-i", i);
     276:	02 eb       	ldi	r16, 0xB2	; 178
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	66 e4       	ldi	r22, 0x46	; 70
     27c:	26 2e       	mov	r2, r22
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     282:	5c e3       	ldi	r21, 0x3C	; 60
     284:	45 2e       	mov	r4, r21
     286:	51 e0       	ldi	r21, 0x01	; 1
     288:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     28a:	4e ef       	ldi	r20, 0xFE	; 254
     28c:	c4 2e       	mov	r12, r20
     28e:	4f ef       	ldi	r20, 0xFF	; 255
     290:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     292:	30 e9       	ldi	r19, 0x90	; 144
     294:	63 2e       	mov	r6, r19
     296:	31 e0       	ldi	r19, 0x01	; 1
     298:	73 2e       	mov	r7, r19
     29a:	ff c0       	rjmp	.+510    	; 0x49a <main+0x336>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     29c:	60 91 67 04 	lds	r22, 0x0467
     2a0:	70 91 68 04 	lds	r23, 0x0468
     2a4:	84 e2       	ldi	r24, 0x24	; 36
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputs>
	fscanf(stdin, "%s", buffer) ;
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <main+0x14a>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <main+0x14c>
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <main+0x14e>
     2b2:	ed b7       	in	r30, 0x3d	; 61
     2b4:	fe b7       	in	r31, 0x3e	; 62
     2b6:	31 96       	adiw	r30, 0x01	; 1
     2b8:	80 91 65 04 	lds	r24, 0x0465
     2bc:	90 91 66 04 	lds	r25, 0x0466
     2c0:	ad b7       	in	r26, 0x3d	; 61
     2c2:	be b7       	in	r27, 0x3e	; 62
     2c4:	12 96       	adiw	r26, 0x02	; 2
     2c6:	9c 93       	st	X, r25
     2c8:	8e 93       	st	-X, r24
     2ca:	11 97       	sbiw	r26, 0x01	; 1
     2cc:	69 e2       	ldi	r22, 0x29	; 41
     2ce:	71 e0       	ldi	r23, 0x01	; 1
     2d0:	73 83       	std	Z+3, r23	; 0x03
     2d2:	62 83       	std	Z+2, r22	; 0x02
     2d4:	b5 82       	std	Z+5, r11	; 0x05
     2d6:	a4 82       	std	Z+4, r10	; 0x04
     2d8:	0e 94 11 06 	call	0xc22	; 0xc22 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     2dc:	00 d0       	rcall	.+0      	; 0x2de <main+0x17a>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0x17c>
     2e0:	ed b7       	in	r30, 0x3d	; 61
     2e2:	fe b7       	in	r31, 0x3e	; 62
     2e4:	31 96       	adiw	r30, 0x01	; 1
     2e6:	ad b7       	in	r26, 0x3d	; 61
     2e8:	be b7       	in	r27, 0x3e	; 62
     2ea:	12 96       	adiw	r26, 0x02	; 2
     2ec:	bc 92       	st	X, r11
     2ee:	ae 92       	st	-X, r10
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	6c e2       	ldi	r22, 0x2C	; 44
     2f4:	71 e0       	ldi	r23, 0x01	; 1
     2f6:	73 83       	std	Z+3, r23	; 0x03
     2f8:	62 83       	std	Z+2, r22	; 0x02
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	8c 0f       	add	r24, r28
     300:	9d 1f       	adc	r25, r29
     302:	95 83       	std	Z+5, r25	; 0x05
     304:	84 83       	std	Z+4, r24	; 0x04
     306:	a3 e0       	ldi	r26, 0x03	; 3
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	ac 0f       	add	r26, r28
     30c:	bd 1f       	adc	r27, r29
     30e:	b7 83       	std	Z+7, r27	; 0x07
     310:	a6 83       	std	Z+6, r26	; 0x06
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	6c 0f       	add	r22, r28
     318:	7d 1f       	adc	r23, r29
     31a:	71 87       	std	Z+9, r23	; 0x09
     31c:	60 87       	std	Z+8, r22	; 0x08
     31e:	0e 94 53 06 	call	0xca6	; 0xca6 <sscanf>

    sprintf(lcd_buffer2,"%-i  ", i);
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	ed b7       	in	r30, 0x3d	; 61
     32c:	fe b7       	in	r31, 0x3e	; 62
     32e:	31 96       	adiw	r30, 0x01	; 1
     330:	ad b7       	in	r26, 0x3d	; 61
     332:	be b7       	in	r27, 0x3e	; 62
     334:	11 96       	adiw	r26, 0x01	; 1
     336:	8c 92       	st	X, r8
     338:	11 97       	sbiw	r26, 0x01	; 1
     33a:	12 96       	adiw	r26, 0x02	; 2
     33c:	9c 92       	st	X, r9
     33e:	66 e3       	ldi	r22, 0x36	; 54
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	73 83       	std	Z+3, r23	; 0x03
     344:	62 83       	std	Z+2, r22	; 0x02
     346:	f5 82       	std	Z+5, r15	; 0x05
     348:	e4 82       	std	Z+4, r14	; 0x04
     34a:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
	LCDGotoXY(10, 0);
     34e:	8d b7       	in	r24, 0x3d	; 61
     350:	9e b7       	in	r25, 0x3e	; 62
     352:	06 96       	adiw	r24, 0x06	; 6
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	9e bf       	out	0x3e, r25	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	8d bf       	out	0x3d, r24	; 61
     35e:	8a e0       	ldi	r24, 0x0A	; 10
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     366:	c4 01       	movw	r24, r8
     368:	62 e0       	ldi	r22, 0x02	; 2
     36a:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
	LCDstring(buffer,15);
     376:	c5 01       	movw	r24, r10
     378:	6f e0       	ldi	r22, 0x0F	; 15
     37a:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     37e:	49 81       	ldd	r20, Y+1	; 0x01
     380:	5a 81       	ldd	r21, Y+2	; 0x02
     382:	9f ef       	ldi	r25, 0xFF	; 255
     384:	4f 3f       	cpi	r20, 0xFF	; 255
     386:	59 07       	cpc	r21, r25
     388:	0c f4       	brge	.+2      	; 0x38c <main+0x228>
     38a:	5a c0       	rjmp	.+180    	; 0x440 <main+0x2dc>
     38c:	2b 81       	ldd	r18, Y+3	; 0x03
     38e:	3c 81       	ldd	r19, Y+4	; 0x04
     390:	af ef       	ldi	r26, 0xFF	; 255
     392:	2f 3f       	cpi	r18, 0xFF	; 255
     394:	3a 07       	cpc	r19, r26
     396:	0c f4       	brge	.+2      	; 0x39a <main+0x236>
     398:	53 c0       	rjmp	.+166    	; 0x440 <main+0x2dc>
     39a:	8d 81       	ldd	r24, Y+5	; 0x05
     39c:	9e 81       	ldd	r25, Y+6	; 0x06
     39e:	bf ef       	ldi	r27, 0xFF	; 255
     3a0:	8f 3f       	cpi	r24, 0xFF	; 255
     3a2:	9b 07       	cpc	r25, r27
     3a4:	0c f4       	brge	.+2      	; 0x3a8 <main+0x244>
     3a6:	4c c0       	rjmp	.+152    	; 0x440 <main+0x2dc>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     3a8:	6d b7       	in	r22, 0x3d	; 61
     3aa:	7e b7       	in	r23, 0x3e	; 62
     3ac:	6a 50       	subi	r22, 0x0A	; 10
     3ae:	70 40       	sbci	r23, 0x00	; 0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	7e bf       	out	0x3e, r23	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	6d bf       	out	0x3d, r22	; 61
     3ba:	ed b7       	in	r30, 0x3d	; 61
     3bc:	fe b7       	in	r31, 0x3e	; 62
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	ad b7       	in	r26, 0x3d	; 61
     3c2:	be b7       	in	r27, 0x3e	; 62
     3c4:	12 96       	adiw	r26, 0x02	; 2
     3c6:	1c 93       	st	X, r17
     3c8:	0e 93       	st	-X, r16
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	53 82       	std	Z+3, r5	; 0x03
     3ce:	42 82       	std	Z+2, r4	; 0x02
     3d0:	55 83       	std	Z+5, r21	; 0x05
     3d2:	44 83       	std	Z+4, r20	; 0x04
     3d4:	37 83       	std	Z+7, r19	; 0x07
     3d6:	26 83       	std	Z+6, r18	; 0x06
     3d8:	91 87       	std	Z+9, r25	; 0x09
     3da:	80 87       	std	Z+8, r24	; 0x08
     3dc:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
		LCDGotoXY(0, 0);
     3e0:	6d b7       	in	r22, 0x3d	; 61
     3e2:	7e b7       	in	r23, 0x3e	; 62
     3e4:	66 5f       	subi	r22, 0xF6	; 246
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	7e bf       	out	0x3e, r23	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	6d bf       	out	0x3d, r22	; 61
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     3fa:	c8 01       	movw	r24, r16
     3fc:	6a e0       	ldi	r22, 0x0A	; 10
     3fe:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
		x_vect[i] = x;
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	9a 81       	ldd	r25, Y+2	; 0x02
     406:	d7 01       	movw	r26, r14
     408:	aa 0f       	add	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	fd 01       	movw	r30, r26
     40e:	e3 56       	subi	r30, 0x63	; 99
     410:	fc 4f       	sbci	r31, 0xFC	; 252
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
		y_vect[i] = y;
     416:	8b 81       	ldd	r24, Y+3	; 0x03
     418:	9c 81       	ldd	r25, Y+4	; 0x04
     41a:	fd 01       	movw	r30, r26
     41c:	e6 51       	subi	r30, 0x16	; 22
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	80 83       	st	Z, r24
		d_vect[i] = d;
     424:	8d 81       	ldd	r24, Y+5	; 0x05
     426:	9e 81       	ldd	r25, Y+6	; 0x06
     428:	ac 53       	subi	r26, 0x3C	; 60
     42a:	bd 4f       	sbci	r27, 0xFD	; 253
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	9c 93       	st	X, r25
     430:	8e 93       	st	-X, r24
		x=-2;
     432:	da 82       	std	Y+2, r13	; 0x02
     434:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     436:	dc 82       	std	Y+4, r13	; 0x04
     438:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     43a:	de 82       	std	Y+6, r13	; 0x06
     43c:	cd 82       	std	Y+5, r12	; 0x05
     43e:	23 c0       	rjmp	.+70     	; 0x486 <main+0x322>
	} else {
		sprintf(lcd_buffer,"Invalid Input@%-i", i);
     440:	00 d0       	rcall	.+0      	; 0x442 <main+0x2de>
     442:	00 d0       	rcall	.+0      	; 0x444 <main+0x2e0>
     444:	00 d0       	rcall	.+0      	; 0x446 <main+0x2e2>
     446:	ed b7       	in	r30, 0x3d	; 61
     448:	fe b7       	in	r31, 0x3e	; 62
     44a:	31 96       	adiw	r30, 0x01	; 1
     44c:	ad b7       	in	r26, 0x3d	; 61
     44e:	be b7       	in	r27, 0x3e	; 62
     450:	12 96       	adiw	r26, 0x02	; 2
     452:	1c 93       	st	X, r17
     454:	0e 93       	st	-X, r16
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	33 82       	std	Z+3, r3	; 0x03
     45a:	22 82       	std	Z+2, r2	; 0x02
     45c:	f5 82       	std	Z+5, r15	; 0x05
     45e:	e4 82       	std	Z+4, r14	; 0x04
     460:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
		LCDGotoXY(0, 0);
     464:	6d b7       	in	r22, 0x3d	; 61
     466:	7e b7       	in	r23, 0x3e	; 62
     468:	6a 5f       	subi	r22, 0xFA	; 250
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	7e bf       	out	0x3e, r23	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	6d bf       	out	0x3d, r22	; 61
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     47e:	c8 01       	movw	r24, r16
     480:	6a e0       	ldi	r22, 0x0A	; 10
     482:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
     486:	80 e1       	ldi	r24, 0x10	; 16
     488:	97 e2       	ldi	r25, 0x27	; 39
     48a:	f3 01       	movw	r30, r6
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <main+0x328>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     490:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     492:	d9 f7       	brne	.-10     	; 0x48a <main+0x326>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     494:	08 94       	sec
     496:	e1 1c       	adc	r14, r1
     498:	f1 1c       	adc	r15, r1
     49a:	8f 81       	ldd	r24, Y+7	; 0x07
     49c:	98 85       	ldd	r25, Y+8	; 0x08
     49e:	e8 16       	cp	r14, r24
     4a0:	f9 06       	cpc	r15, r25
     4a2:	08 f4       	brcc	.+2      	; 0x4a6 <main+0x342>
     4a4:	fb ce       	rjmp	.-522    	; 0x29c <main+0x138>
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	9e e4       	ldi	r25, 0x4E	; 78
     4aa:	20 e9       	ldi	r18, 0x90	; 144
     4ac:	31 e0       	ldi	r19, 0x01	; 1
     4ae:	f9 01       	movw	r30, r18
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <main+0x34c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <main+0x34a>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <main+0x356>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <main+0x358>
     4bc:	00 d0       	rcall	.+0      	; 0x4be <main+0x35a>
     4be:	ed b7       	in	r30, 0x3d	; 61
     4c0:	fe b7       	in	r31, 0x3e	; 62
     4c2:	31 96       	adiw	r30, 0x01	; 1
     4c4:	02 eb       	ldi	r16, 0xB2	; 178
     4c6:	12 e0       	ldi	r17, 0x02	; 2
     4c8:	ad b7       	in	r26, 0x3d	; 61
     4ca:	be b7       	in	r27, 0x3e	; 62
     4cc:	12 96       	adiw	r26, 0x02	; 2
     4ce:	1c 93       	st	X, r17
     4d0:	0e 93       	st	-X, r16
     4d2:	11 97       	sbiw	r26, 0x01	; 1
     4d4:	88 e5       	ldi	r24, 0x58	; 88
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
     4dc:	f5 82       	std	Z+5, r15	; 0x05
     4de:	e4 82       	std	Z+4, r14	; 0x04
     4e0:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
		LCDGotoXY(0, 0);
     4e4:	6d b7       	in	r22, 0x3d	; 61
     4e6:	7e b7       	in	r23, 0x3e	; 62
     4e8:	6a 5f       	subi	r22, 0xFA	; 250
     4ea:	7f 4f       	sbci	r23, 0xFF	; 255
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	7e bf       	out	0x3e, r23	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	6d bf       	out	0x3d, r22	; 61
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     4fe:	c8 01       	movw	r24, r16
     500:	6a e0       	ldi	r22, 0x0A	; 10
     502:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     506:	20 91 9d 03 	lds	r18, 0x039D
     50a:	30 91 9e 03 	lds	r19, 0x039E
     50e:	40 91 9f 03 	lds	r20, 0x039F
     512:	50 91 a0 03 	lds	r21, 0x03A0
     516:	60 91 a1 03 	lds	r22, 0x03A1
     51a:	70 91 a2 03 	lds	r23, 0x03A2
     51e:	e0 90 a3 03 	lds	r14, 0x03A3
     522:	f0 90 a4 03 	lds	r15, 0x03A4
     526:	8d b7       	in	r24, 0x3d	; 61
     528:	9e b7       	in	r25, 0x3e	; 62
     52a:	0c 97       	sbiw	r24, 0x0c	; 12
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	9e bf       	out	0x3e, r25	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	8d bf       	out	0x3d, r24	; 61
     536:	ed b7       	in	r30, 0x3d	; 61
     538:	fe b7       	in	r31, 0x3e	; 62
     53a:	31 96       	adiw	r30, 0x01	; 1
     53c:	ad b7       	in	r26, 0x3d	; 61
     53e:	be b7       	in	r27, 0x3e	; 62
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	1c 93       	st	X, r17
     544:	0e 93       	st	-X, r16
     546:	11 97       	sbiw	r26, 0x01	; 1
     548:	84 e6       	ldi	r24, 0x64	; 100
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	93 83       	std	Z+3, r25	; 0x03
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	35 83       	std	Z+5, r19	; 0x05
     552:	24 83       	std	Z+4, r18	; 0x04
     554:	57 83       	std	Z+7, r21	; 0x07
     556:	46 83       	std	Z+6, r20	; 0x06
     558:	71 87       	std	Z+9, r23	; 0x09
     55a:	60 87       	std	Z+8, r22	; 0x08
     55c:	f3 86       	std	Z+11, r15	; 0x0b
     55e:	e2 86       	std	Z+10, r14	; 0x0a
     560:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
		LCDGotoXY(0, 0);
     564:	6d b7       	in	r22, 0x3d	; 61
     566:	7e b7       	in	r23, 0x3e	; 62
     568:	64 5f       	subi	r22, 0xF4	; 244
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	7e bf       	out	0x3e, r23	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	6d bf       	out	0x3d, r22	; 61
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     57e:	c8 01       	movw	r24, r16
     580:	6a e0       	ldi	r22, 0x0A	; 10
     582:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     586:	20 91 ea 01 	lds	r18, 0x01EA
     58a:	30 91 eb 01 	lds	r19, 0x01EB
     58e:	40 91 ec 01 	lds	r20, 0x01EC
     592:	50 91 ed 01 	lds	r21, 0x01ED
     596:	60 91 ee 01 	lds	r22, 0x01EE
     59a:	70 91 ef 01 	lds	r23, 0x01EF
     59e:	e0 90 f0 01 	lds	r14, 0x01F0
     5a2:	f0 90 f1 01 	lds	r15, 0x01F1
     5a6:	8d b7       	in	r24, 0x3d	; 61
     5a8:	9e b7       	in	r25, 0x3e	; 62
     5aa:	0c 97       	sbiw	r24, 0x0c	; 12
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	9e bf       	out	0x3e, r25	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	8d bf       	out	0x3d, r24	; 61
     5b6:	ed b7       	in	r30, 0x3d	; 61
     5b8:	fe b7       	in	r31, 0x3e	; 62
     5ba:	31 96       	adiw	r30, 0x01	; 1
     5bc:	ad b7       	in	r26, 0x3d	; 61
     5be:	be b7       	in	r27, 0x3e	; 62
     5c0:	12 96       	adiw	r26, 0x02	; 2
     5c2:	1c 93       	st	X, r17
     5c4:	0e 93       	st	-X, r16
     5c6:	11 97       	sbiw	r26, 0x01	; 1
     5c8:	8e e6       	ldi	r24, 0x6E	; 110
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	93 83       	std	Z+3, r25	; 0x03
     5ce:	82 83       	std	Z+2, r24	; 0x02
     5d0:	35 83       	std	Z+5, r19	; 0x05
     5d2:	24 83       	std	Z+4, r18	; 0x04
     5d4:	57 83       	std	Z+7, r21	; 0x07
     5d6:	46 83       	std	Z+6, r20	; 0x06
     5d8:	71 87       	std	Z+9, r23	; 0x09
     5da:	60 87       	std	Z+8, r22	; 0x08
     5dc:	f3 86       	std	Z+11, r15	; 0x0b
     5de:	e2 86       	std	Z+10, r14	; 0x0a
     5e0:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
		LCDGotoXY(0, 1);
     5e4:	6d b7       	in	r22, 0x3d	; 61
     5e6:	7e b7       	in	r23, 0x3e	; 62
     5e8:	64 5f       	subi	r22, 0xF4	; 244
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	7e bf       	out	0x3e, r23	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	6d bf       	out	0x3d, r22	; 61
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     5fe:	c8 01       	movw	r24, r16
     600:	6a e0       	ldi	r22, 0x0A	; 10
     602:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     606:	20 91 c4 02 	lds	r18, 0x02C4
     60a:	30 91 c5 02 	lds	r19, 0x02C5
     60e:	40 91 c6 02 	lds	r20, 0x02C6
     612:	50 91 c7 02 	lds	r21, 0x02C7
     616:	60 91 c8 02 	lds	r22, 0x02C8
     61a:	70 91 c9 02 	lds	r23, 0x02C9
     61e:	e0 90 ca 02 	lds	r14, 0x02CA
     622:	f0 90 cb 02 	lds	r15, 0x02CB
     626:	8d b7       	in	r24, 0x3d	; 61
     628:	9e b7       	in	r25, 0x3e	; 62
     62a:	0c 97       	sbiw	r24, 0x0c	; 12
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	9e bf       	out	0x3e, r25	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	8d bf       	out	0x3d, r24	; 61
     636:	ed b7       	in	r30, 0x3d	; 61
     638:	fe b7       	in	r31, 0x3e	; 62
     63a:	31 96       	adiw	r30, 0x01	; 1
     63c:	ad b7       	in	r26, 0x3d	; 61
     63e:	be b7       	in	r27, 0x3e	; 62
     640:	12 96       	adiw	r26, 0x02	; 2
     642:	1c 93       	st	X, r17
     644:	0e 93       	st	-X, r16
     646:	11 97       	sbiw	r26, 0x01	; 1
     648:	88 e7       	ldi	r24, 0x78	; 120
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	93 83       	std	Z+3, r25	; 0x03
     64e:	82 83       	std	Z+2, r24	; 0x02
     650:	35 83       	std	Z+5, r19	; 0x05
     652:	24 83       	std	Z+4, r18	; 0x04
     654:	57 83       	std	Z+7, r21	; 0x07
     656:	46 83       	std	Z+6, r20	; 0x06
     658:	71 87       	std	Z+9, r23	; 0x09
     65a:	60 87       	std	Z+8, r22	; 0x08
     65c:	f3 86       	std	Z+11, r15	; 0x0b
     65e:	e2 86       	std	Z+10, r14	; 0x0a
     660:	0e 94 22 06 	call	0xc44	; 0xc44 <sprintf>
		LCDGotoXY(10, 0);
     664:	6d b7       	in	r22, 0x3d	; 61
     666:	7e b7       	in	r23, 0x3e	; 62
     668:	64 5f       	subi	r22, 0xF4	; 244
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	7e bf       	out	0x3e, r23	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	6d bf       	out	0x3d, r22	; 61
     676:	8a e0       	ldi	r24, 0x0A	; 10
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     67e:	c8 01       	movw	r24, r16
     680:	6a e0       	ldi	r22, 0x0A	; 10
     682:	0e 94 a4 03 	call	0x748	; 0x748 <LCDstring>
} // main
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	69 96       	adiw	r28, 0x19	; 25
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	9f 90       	pop	r9
     6ac:	8f 90       	pop	r8
     6ae:	7f 90       	pop	r7
     6b0:	6f 90       	pop	r6
     6b2:	5f 90       	pop	r5
     6b4:	4f 90       	pop	r4
     6b6:	3f 90       	pop	r3
     6b8:	2f 90       	pop	r2
     6ba:	08 95       	ret

000006bc <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     6bc:	28 2f       	mov	r18, r24
     6be:	20 7f       	andi	r18, 0xF0	; 240
     6c0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     6c2:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     6c4:	42 9a       	sbi	0x08, 2	; 8
     6c6:	20 e4       	ldi	r18, 0x40	; 64
     6c8:	3f e1       	ldi	r19, 0x1F	; 31
     6ca:	f9 01       	movw	r30, r18
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     6d0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     6d2:	40 98       	cbi	0x08, 0	; 8
     6d4:	f9 01       	movw	r30, r18
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	44 e0       	ldi	r20, 0x04	; 4
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	4a 95       	dec	r20
     6e4:	e1 f7       	brne	.-8      	; 0x6de <LCDsendChar+0x22>
     6e6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     6e8:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     6ea:	42 9a       	sbi	0x08, 2	; 8
     6ec:	c9 01       	movw	r24, r18
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     6f2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     6f4:	40 98       	cbi	0x08, 0	; 8
     6f6:	c9 01       	movw	r24, r18
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     6fc:	08 95       	ret

000006fe <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     6fe:	28 2f       	mov	r18, r24
     700:	20 7f       	andi	r18, 0xF0	; 240
     702:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     704:	42 9a       	sbi	0x08, 2	; 8
     706:	20 e4       	ldi	r18, 0x40	; 64
     708:	3f e1       	ldi	r19, 0x1F	; 31
     70a:	f9 01       	movw	r30, r18
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     710:	42 98       	cbi	0x08, 2	; 8
     712:	f9 01       	movw	r30, r18
     714:	31 97       	sbiw	r30, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	54 e0       	ldi	r21, 0x04	; 4
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	5a 95       	dec	r21
     722:	e1 f7       	brne	.-8      	; 0x71c <LCDsendCommand+0x1e>
     724:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     726:	42 9a       	sbi	0x08, 2	; 8
     728:	c9 01       	movw	r24, r18
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     72e:	42 98       	cbi	0x08, 2	; 8
     730:	c9 01       	movw	r24, r18
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     736:	08 95       	ret

00000738 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     73e:	08 95       	ret

00000740 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     746:	08 95       	ret

00000748 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	49 f0       	breq	.+18     	; 0x768 <LCDstring+0x20>
     756:	ec 01       	movw	r28, r24
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	04 c0       	rjmp	.+8      	; 0x764 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     75c:	89 91       	ld	r24, Y+
     75e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     762:	1f 5f       	subi	r17, 0xFF	; 255
     764:	10 17       	cp	r17, r16
     766:	d0 f3       	brcs	.-12     	; 0x75c <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	08 95       	ret

00000772 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     772:	62 30       	cpi	r22, 0x02	; 2
     774:	31 f0       	breq	.+12     	; 0x782 <LCDGotoXY+0x10>
     776:	63 30       	cpi	r22, 0x03	; 3
     778:	31 f0       	breq	.+12     	; 0x786 <LCDGotoXY+0x14>
     77a:	61 30       	cpi	r22, 0x01	; 1
     77c:	29 f4       	brne	.+10     	; 0x788 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     77e:	80 5c       	subi	r24, 0xC0	; 192
     780:	03 c0       	rjmp	.+6      	; 0x788 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     782:	8c 5e       	subi	r24, 0xEC	; 236
     784:	01 c0       	rjmp	.+2      	; 0x788 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     786:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     788:	80 68       	ori	r24, 0x80	; 128
     78a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
	
}
     78e:	08 95       	ret

00000790 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     79a:	64 2f       	mov	r22, r20
     79c:	0e 94 b9 03 	call	0x772	; 0x772 <LCDGotoXY>
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     7a4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     7a8:	1f 5f       	subi	r17, 0xFF	; 255
     7aa:	fe 01       	movw	r30, r28
     7ac:	e1 0f       	add	r30, r17
     7ae:	f1 1d       	adc	r31, r1
     7b0:	84 91       	lpm	r24, Z+
     7b2:	88 23       	and	r24, r24
     7b4:	b9 f7       	brne	.-18     	; 0x7a4 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	08 95       	ret

000007be <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	7c 01       	movw	r14, r24
     7cc:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     7ce:	11 0f       	add	r17, r17
     7d0:	11 0f       	add	r17, r17
     7d2:	11 0f       	add	r17, r17
     7d4:	10 64       	ori	r17, 0x40	; 64
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     7da:	f7 01       	movw	r30, r14
     7dc:	ec 0f       	add	r30, r28
     7de:	fd 1f       	adc	r31, r29
     7e0:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     7e2:	81 2f       	mov	r24, r17
     7e4:	8c 0f       	add	r24, r28
     7e6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
		LCDsendChar(pcc);
     7ea:	80 2f       	mov	r24, r16
     7ec:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     7f0:	21 96       	adiw	r28, 0x01	; 1
     7f2:	c8 30       	cpi	r28, 0x08	; 8
     7f4:	d1 05       	cpc	r29, r1
     7f6:	89 f7       	brne	.-30     	; 0x7da <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	08 95       	ret

00000806 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	80 e6       	ldi	r24, 0x60	; 96
     80e:	9a ee       	ldi	r25, 0xEA	; 234
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     814:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     816:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     818:	87 b1       	in	r24, 0x07	; 7
     81a:	80 6f       	ori	r24, 0xF0	; 240
     81c:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     81e:	87 b1       	in	r24, 0x07	; 7
     820:	87 60       	ori	r24, 0x07	; 7
     822:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     824:	80 e3       	ldi	r24, 0x30	; 48
     826:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     828:	42 9a       	sbi	0x08, 2	; 8
     82a:	20 e4       	ldi	r18, 0x40	; 64
     82c:	3f e1       	ldi	r19, 0x1F	; 31
     82e:	f9 01       	movw	r30, r18
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     834:	42 98       	cbi	0x08, 2	; 8
     836:	f9 01       	movw	r30, r18
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     83c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     83e:	42 9a       	sbi	0x08, 2	; 8
     840:	c9 01       	movw	r24, r18
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     846:	42 98       	cbi	0x08, 2	; 8
     848:	c9 01       	movw	r24, r18
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     84e:	80 e2       	ldi	r24, 0x20	; 32
     850:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     852:	42 9a       	sbi	0x08, 2	; 8
     854:	c9 01       	movw	r24, r18
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     85a:	42 98       	cbi	0x08, 2	; 8
     85c:	c9 01       	movw	r24, r18
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     862:	88 e2       	ldi	r24, 0x28	; 40
     864:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     868:	8c e0       	ldi	r24, 0x0C	; 12
     86a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
     86e:	c0 eb       	ldi	r28, 0xB0	; 176
     870:	d0 e0       	ldi	r29, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     874:	16 2f       	mov	r17, r22
     876:	1f 5f       	subi	r17, 0xFF	; 255
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 df 03 	call	0x7be	; 0x7be <LCDdefinechar>
     87e:	28 96       	adiw	r28, 0x08	; 8
     880:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     882:	18 30       	cpi	r17, 0x08	; 8
     884:	b9 f7       	brne	.-18     	; 0x874 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	08 95       	ret

0000088e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	08 2f       	mov	r16, r24
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     89e:	1f 5f       	subi	r17, 0xFF	; 255
     8a0:	10 17       	cp	r17, r16
     8a2:	d0 f3       	brcs	.-12     	; 0x898 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	08 2f       	mov	r16, r24
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	04 c0       	rjmp	.+8      	; 0x8bc <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     8b4:	88 e1       	ldi	r24, 0x18	; 24
     8b6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     8ba:	1f 5f       	subi	r17, 0xFF	; 255
     8bc:	10 17       	cp	r17, r16
     8be:	d0 f3       	brcs	.-12     	; 0x8b4 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     8c6:	8e e0       	ldi	r24, 0x0E	; 14
     8c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     8cc:	08 95       	ret

000008ce <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     8ce:	8f e0       	ldi	r24, 0x0F	; 15
     8d0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     8d4:	08 95       	ret

000008d6 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     8d6:	8c e0       	ldi	r24, 0x0C	; 12
     8d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     8dc:	08 95       	ret

000008de <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     8de:	88 e0       	ldi	r24, 0x08	; 8
     8e0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     8e4:	08 95       	ret

000008e6 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     8e6:	8c e0       	ldi	r24, 0x0C	; 12
     8e8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
}
     8ec:	08 95       	ret

000008ee <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	08 2f       	mov	r16, r24
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	04 c0       	rjmp	.+8      	; 0x900 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     8f8:	80 e1       	ldi	r24, 0x10	; 16
     8fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     8fe:	1f 5f       	subi	r17, 0xFF	; 255
     900:	10 17       	cp	r17, r16
     902:	d0 f3       	brcs	.-12     	; 0x8f8 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	08 2f       	mov	r16, r24
     910:	10 e0       	ldi	r17, 0x00	; 0
     912:	04 c0       	rjmp	.+8      	; 0x91c <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     914:	84 e1       	ldi	r24, 0x14	; 20
     916:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     91a:	1f 5f       	subi	r17, 0xFF	; 255
     91c:	10 17       	cp	r17, r16
     91e:	d0 f3       	brcs	.-12     	; 0x914 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	08 95       	ret

00000926 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     926:	df 92       	push	r13
     928:	ef 92       	push	r14
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     936:	96 e0       	ldi	r25, 0x06	; 6
     938:	89 9f       	mul	r24, r25
     93a:	c0 01       	movw	r24, r0
     93c:	11 24       	eor	r1, r1
     93e:	24 2f       	mov	r18, r20
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	ac 01       	movw	r20, r24
     944:	42 9f       	mul	r20, r18
     946:	c0 01       	movw	r24, r0
     948:	43 9f       	mul	r20, r19
     94a:	90 0d       	add	r25, r0
     94c:	52 9f       	mul	r21, r18
     94e:	90 0d       	add	r25, r0
     950:	11 24       	eor	r1, r1
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	0e 94 d3 05 	call	0xba6	; 0xba6 <__divmodhi4>
     958:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     95a:	cb 01       	movw	r24, r22
     95c:	66 e0       	ldi	r22, 0x06	; 6
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__udivmodhi4>
     964:	e8 2e       	mov	r14, r24
     966:	ff 24       	eor	r15, r15
     968:	00 e0       	ldi	r16, 0x00	; 0
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	12 c0       	rjmp	.+36     	; 0x992 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     96e:	c8 01       	movw	r24, r16
     970:	05 96       	adiw	r24, 0x05	; 5
     972:	c8 17       	cp	r28, r24
     974:	d9 07       	cpc	r29, r25
     976:	10 f0       	brcs	.+4      	; 0x97c <LCDprogressBar+0x56>
     978:	85 e0       	ldi	r24, 0x05	; 5
     97a:	06 c0       	rjmp	.+12     	; 0x988 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     97c:	c0 17       	cp	r28, r16
     97e:	d1 07       	cpc	r29, r17
     980:	10 f0       	brcs	.+4      	; 0x986 <LCDprogressBar+0x60>
     982:	8e 2d       	mov	r24, r14
     984:	01 c0       	rjmp	.+2      	; 0x988 <LCDprogressBar+0x62>
     986:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     988:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     98c:	f3 94       	inc	r15
     98e:	0a 5f       	subi	r16, 0xFA	; 250
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	fd 14       	cp	r15, r13
     994:	60 f3       	brcs	.-40     	; 0x96e <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	08 95       	ret

000009a6 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     9a6:	87 e6       	ldi	r24, 0x67	; 103
     9a8:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     9ac:	88 e1       	ldi	r24, 0x18	; 24
     9ae:	80 93 c1 00 	sts	0x00C1, r24
}
     9b2:	08 95       	ret

000009b4 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     9b4:	1f 93       	push	r17
     9b6:	18 2f       	mov	r17, r24

  if (c == '\a')
     9b8:	87 30       	cpi	r24, 0x07	; 7
     9ba:	49 f4       	brne	.+18     	; 0x9ce <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     9bc:	60 91 69 04 	lds	r22, 0x0469
     9c0:	70 91 6a 04 	lds	r23, 0x046A
     9c4:	80 e9       	ldi	r24, 0x90	; 144
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fputs>
     9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     9ce:	8a 30       	cpi	r24, 0x0A	; 10
     9d0:	19 f4       	brne	.+6      	; 0x9d8 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     9d2:	8d e0       	ldi	r24, 0x0D	; 13
     9d4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     9d8:	80 91 c0 00 	lds	r24, 0x00C0
     9dc:	85 ff       	sbrs	r24, 5
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <uart_putchar+0x24>
  UDR0 = c;
     9e0:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	1f 91       	pop	r17
     9ea:	08 95       	ret

000009ec <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     9fa:	80 91 98 01 	lds	r24, 0x0198
     9fe:	90 91 99 01 	lds	r25, 0x0199
     a02:	89 2b       	or	r24, r25
     a04:	09 f0       	breq	.+2      	; 0xa08 <uart_getchar+0x1c>
     a06:	9f c0       	rjmp	.+318    	; 0xb46 <uart_getchar+0x15a>
     a08:	0a e9       	ldi	r16, 0x9A	; 154
     a0a:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     a0c:	80 91 c0 00 	lds	r24, 0x00C0
     a10:	87 ff       	sbrs	r24, 7
     a12:	fc cf       	rjmp	.-8      	; 0xa0c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     a14:	80 91 c0 00 	lds	r24, 0x00C0
     a18:	84 ff       	sbrs	r24, 4
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <uart_getchar+0x36>
     a1c:	2e ef       	ldi	r18, 0xFE	; 254
     a1e:	3f ef       	ldi	r19, 0xFF	; 255
     a20:	a6 c0       	rjmp	.+332    	; 0xb6e <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     a22:	80 91 c0 00 	lds	r24, 0x00C0
     a26:	83 fd       	sbrc	r24, 3
     a28:	a0 c0       	rjmp	.+320    	; 0xb6a <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     a2a:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     a2e:	9d 30       	cpi	r25, 0x0D	; 13
     a30:	11 f0       	breq	.+4      	; 0xa36 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     a32:	9a 30       	cpi	r25, 0x0A	; 10
     a34:	69 f4       	brne	.+26     	; 0xa50 <uart_getchar+0x64>
	  {
	    *cp = c;
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	f8 01       	movw	r30, r16
     a3a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     a3c:	b7 01       	movw	r22, r14
     a3e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
	    rxp = b;
     a42:	8a e9       	ldi	r24, 0x9A	; 154
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	90 93 99 01 	sts	0x0199, r25
     a4a:	80 93 98 01 	sts	0x0198, r24
     a4e:	7b c0       	rjmp	.+246    	; 0xb46 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     a50:	99 30       	cpi	r25, 0x09	; 9
     a52:	09 f4       	brne	.+2      	; 0xa56 <uart_getchar+0x6a>
     a54:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a56:	89 2f       	mov	r24, r25
     a58:	80 52       	subi	r24, 0x20	; 32
     a5a:	8f 35       	cpi	r24, 0x5F	; 95
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <uart_getchar+0x76>
     a5e:	90 3a       	cpi	r25, 0xA0	; 160
     a60:	70 f0       	brcs	.+28     	; 0xa7e <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	09 3e       	cpi	r16, 0xE9	; 233
     a66:	1f 07       	cpc	r17, r31
     a68:	11 f4       	brne	.+4      	; 0xa6e <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     a6a:	87 e0       	ldi	r24, 0x07	; 7
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     a6e:	f8 01       	movw	r30, r16
     a70:	91 93       	st	Z+, r25
     a72:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     a74:	89 2f       	mov	r24, r25
     a76:	b7 01       	movw	r22, r14
     a78:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
     a7c:	c7 cf       	rjmp	.-114    	; 0xa0c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     a7e:	92 31       	cpi	r25, 0x12	; 18
     a80:	39 f1       	breq	.+78     	; 0xad0 <uart_getchar+0xe4>
     a82:	93 31       	cpi	r25, 0x13	; 19
     a84:	38 f4       	brcc	.+14     	; 0xa94 <uart_getchar+0xa8>
     a86:	93 30       	cpi	r25, 0x03	; 3
     a88:	09 f4       	brne	.+2      	; 0xa8c <uart_getchar+0xa0>
     a8a:	6f c0       	rjmp	.+222    	; 0xb6a <uart_getchar+0x17e>
     a8c:	98 30       	cpi	r25, 0x08	; 8
     a8e:	09 f0       	breq	.+2      	; 0xa92 <uart_getchar+0xa6>
     a90:	bd cf       	rjmp	.-134    	; 0xa0c <uart_getchar+0x20>
     a92:	09 c0       	rjmp	.+18     	; 0xaa6 <uart_getchar+0xba>
     a94:	97 31       	cpi	r25, 0x17	; 23
     a96:	09 f4       	brne	.+2      	; 0xa9a <uart_getchar+0xae>
     a98:	4b c0       	rjmp	.+150    	; 0xb30 <uart_getchar+0x144>
     a9a:	9f 37       	cpi	r25, 0x7F	; 127
     a9c:	21 f0       	breq	.+8      	; 0xaa6 <uart_getchar+0xba>
     a9e:	95 31       	cpi	r25, 0x15	; 21
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <uart_getchar+0xb8>
     aa2:	b4 cf       	rjmp	.-152    	; 0xa0c <uart_getchar+0x20>
     aa4:	32 c0       	rjmp	.+100    	; 0xb0a <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	0a 39       	cpi	r16, 0x9A	; 154
     aaa:	1f 07       	cpc	r17, r31
     aac:	09 f0       	breq	.+2      	; 0xab0 <uart_getchar+0xc4>
     aae:	08 f4       	brcc	.+2      	; 0xab2 <uart_getchar+0xc6>
     ab0:	ad cf       	rjmp	.-166    	; 0xa0c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     ab2:	88 e0       	ldi	r24, 0x08	; 8
     ab4:	b7 01       	movw	r22, r14
     ab6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		uart_putchar(' ', stream);
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	b7 01       	movw	r22, r14
     abe:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		uart_putchar('\b', stream);
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	b7 01       	movw	r22, r14
     ac6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		cp--;
     aca:	01 50       	subi	r16, 0x01	; 1
     acc:	10 40       	sbci	r17, 0x00	; 0
     ace:	9e cf       	rjmp	.-196    	; 0xa0c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     ad0:	8d e0       	ldi	r24, 0x0D	; 13
     ad2:	b7 01       	movw	r22, r14
     ad4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
     ad8:	ca e9       	ldi	r28, 0x9A	; 154
     ada:	d1 e0       	ldi	r29, 0x01	; 1
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     ade:	89 91       	ld	r24, Y+
     ae0:	b7 01       	movw	r22, r14
     ae2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     ae6:	c0 17       	cp	r28, r16
     ae8:	d1 07       	cpc	r29, r17
     aea:	c8 f3       	brcs	.-14     	; 0xade <uart_getchar+0xf2>
     aec:	8f cf       	rjmp	.-226    	; 0xa0c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	b7 01       	movw	r22, r14
     af2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		uart_putchar(' ', stream);
     af6:	80 e2       	ldi	r24, 0x20	; 32
     af8:	b7 01       	movw	r22, r14
     afa:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		uart_putchar('\b', stream);
     afe:	88 e0       	ldi	r24, 0x08	; 8
     b00:	b7 01       	movw	r22, r14
     b02:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		cp--;
     b06:	01 50       	subi	r16, 0x01	; 1
     b08:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0a 39       	cpi	r16, 0x9A	; 154
     b0e:	18 07       	cpc	r17, r24
     b10:	09 f0       	breq	.+2      	; 0xb14 <uart_getchar+0x128>
     b12:	68 f7       	brcc	.-38     	; 0xaee <uart_getchar+0x102>
     b14:	7b cf       	rjmp	.-266    	; 0xa0c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b16:	88 e0       	ldi	r24, 0x08	; 8
     b18:	b7 01       	movw	r22, r14
     b1a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		uart_putchar(' ', stream);
     b1e:	80 e2       	ldi	r24, 0x20	; 32
     b20:	b7 01       	movw	r22, r14
     b22:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
		uart_putchar('\b', stream);
     b26:	88 e0       	ldi	r24, 0x08	; 8
     b28:	b7 01       	movw	r22, r14
     b2a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <uart_putchar>
     b2e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b30:	e1 e0       	ldi	r30, 0x01	; 1
     b32:	0a 39       	cpi	r16, 0x9A	; 154
     b34:	1e 07       	cpc	r17, r30
     b36:	09 f0       	breq	.+2      	; 0xb3a <uart_getchar+0x14e>
     b38:	08 f4       	brcc	.+2      	; 0xb3c <uart_getchar+0x150>
     b3a:	68 cf       	rjmp	.-304    	; 0xa0c <uart_getchar+0x20>
     b3c:	e8 01       	movw	r28, r16
     b3e:	8a 91       	ld	r24, -Y
     b40:	80 32       	cpi	r24, 0x20	; 32
     b42:	49 f7       	brne	.-46     	; 0xb16 <uart_getchar+0x12a>
     b44:	63 cf       	rjmp	.-314    	; 0xa0c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b46:	e0 91 98 01 	lds	r30, 0x0198
     b4a:	f0 91 99 01 	lds	r31, 0x0199
     b4e:	81 91       	ld	r24, Z+
     b50:	f0 93 99 01 	sts	0x0199, r31
     b54:	e0 93 98 01 	sts	0x0198, r30
  if (c == '\n')
     b58:	8a 30       	cpi	r24, 0x0A	; 10
     b5a:	21 f4       	brne	.+8      	; 0xb64 <uart_getchar+0x178>
    rxp = 0;
     b5c:	10 92 99 01 	sts	0x0199, r1
     b60:	10 92 98 01 	sts	0x0198, r1

  return c;
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <uart_getchar+0x182>
     b6a:	2f ef       	ldi	r18, 0xFF	; 255
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
}
     b6e:	c9 01       	movw	r24, r18
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <__udivmodhi4>:
     b7e:	aa 1b       	sub	r26, r26
     b80:	bb 1b       	sub	r27, r27
     b82:	51 e1       	ldi	r21, 0x11	; 17
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <__udivmodhi4_ep>

00000b86 <__udivmodhi4_loop>:
     b86:	aa 1f       	adc	r26, r26
     b88:	bb 1f       	adc	r27, r27
     b8a:	a6 17       	cp	r26, r22
     b8c:	b7 07       	cpc	r27, r23
     b8e:	10 f0       	brcs	.+4      	; 0xb94 <__udivmodhi4_ep>
     b90:	a6 1b       	sub	r26, r22
     b92:	b7 0b       	sbc	r27, r23

00000b94 <__udivmodhi4_ep>:
     b94:	88 1f       	adc	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	5a 95       	dec	r21
     b9a:	a9 f7       	brne	.-22     	; 0xb86 <__udivmodhi4_loop>
     b9c:	80 95       	com	r24
     b9e:	90 95       	com	r25
     ba0:	bc 01       	movw	r22, r24
     ba2:	cd 01       	movw	r24, r26
     ba4:	08 95       	ret

00000ba6 <__divmodhi4>:
     ba6:	97 fb       	bst	r25, 7
     ba8:	09 2e       	mov	r0, r25
     baa:	07 26       	eor	r0, r23
     bac:	0a d0       	rcall	.+20     	; 0xbc2 <__divmodhi4_neg1>
     bae:	77 fd       	sbrc	r23, 7
     bb0:	04 d0       	rcall	.+8      	; 0xbba <__divmodhi4_neg2>
     bb2:	e5 df       	rcall	.-54     	; 0xb7e <__udivmodhi4>
     bb4:	06 d0       	rcall	.+12     	; 0xbc2 <__divmodhi4_neg1>
     bb6:	00 20       	and	r0, r0
     bb8:	1a f4       	brpl	.+6      	; 0xbc0 <__divmodhi4_exit>

00000bba <__divmodhi4_neg2>:
     bba:	70 95       	com	r23
     bbc:	61 95       	neg	r22
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc0 <__divmodhi4_exit>:
     bc0:	08 95       	ret

00000bc2 <__divmodhi4_neg1>:
     bc2:	f6 f7       	brtc	.-4      	; 0xbc0 <__divmodhi4_exit>
     bc4:	90 95       	com	r25
     bc6:	81 95       	neg	r24
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	08 95       	ret

00000bcc <fputs>:
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	7c 01       	movw	r14, r24
     bda:	8b 01       	movw	r16, r22
     bdc:	db 01       	movw	r26, r22
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	8c 91       	ld	r24, X
     be2:	81 fd       	sbrc	r24, 1
     be4:	03 c0       	rjmp	.+6      	; 0xbec <fputs+0x20>
     be6:	cf ef       	ldi	r28, 0xFF	; 255
     be8:	df ef       	ldi	r29, 0xFF	; 255
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <fputs+0x46>
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	d0 e0       	ldi	r29, 0x00	; 0
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <fputs+0x3c>
     bf2:	d8 01       	movw	r26, r16
     bf4:	18 96       	adiw	r26, 0x08	; 8
     bf6:	ed 91       	ld	r30, X+
     bf8:	fc 91       	ld	r31, X
     bfa:	19 97       	sbiw	r26, 0x09	; 9
     bfc:	b8 01       	movw	r22, r16
     bfe:	09 95       	icall
     c00:	89 2b       	or	r24, r25
     c02:	11 f0       	breq	.+4      	; 0xc08 <fputs+0x3c>
     c04:	cf ef       	ldi	r28, 0xFF	; 255
     c06:	df ef       	ldi	r29, 0xFF	; 255
     c08:	f7 01       	movw	r30, r14
     c0a:	81 91       	ld	r24, Z+
     c0c:	7f 01       	movw	r14, r30
     c0e:	88 23       	and	r24, r24
     c10:	81 f7       	brne	.-32     	; 0xbf2 <fputs+0x26>
     c12:	ce 01       	movw	r24, r28
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	08 95       	ret

00000c22 <fscanf>:
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9e 01       	movw	r18, r28
     c2c:	27 5f       	subi	r18, 0xF7	; 247
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	6f 81       	ldd	r22, Y+7	; 0x07
     c36:	78 85       	ldd	r23, Y+8	; 0x08
     c38:	a9 01       	movw	r20, r18
     c3a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <vfscanf>
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <sprintf>:
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	2e 97       	sbiw	r28, 0x0e	; 14
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	0d 89       	ldd	r16, Y+21	; 0x15
     c5e:	1e 89       	ldd	r17, Y+22	; 0x16
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	8c 83       	std	Y+4, r24	; 0x04
     c64:	1a 83       	std	Y+2, r17	; 0x02
     c66:	09 83       	std	Y+1, r16	; 0x01
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f e7       	ldi	r25, 0x7F	; 127
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	9e 01       	movw	r18, r28
     c72:	27 5e       	subi	r18, 0xE7	; 231
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	6f 89       	ldd	r22, Y+23	; 0x17
     c7c:	78 8d       	ldd	r23, Y+24	; 0x18
     c7e:	a9 01       	movw	r20, r18
     c80:	0e 94 76 06 	call	0xcec	; 0xcec <vfprintf>
     c84:	2f 81       	ldd	r18, Y+7	; 0x07
     c86:	38 85       	ldd	r19, Y+8	; 0x08
     c88:	02 0f       	add	r16, r18
     c8a:	13 1f       	adc	r17, r19
     c8c:	f8 01       	movw	r30, r16
     c8e:	10 82       	st	Z, r1
     c90:	2e 96       	adiw	r28, 0x0e	; 14
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <sscanf>:
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	2e 97       	sbiw	r28, 0x0e	; 14
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	85 e0       	ldi	r24, 0x05	; 5
     cbc:	8c 83       	std	Y+4, r24	; 0x04
     cbe:	8b 89       	ldd	r24, Y+19	; 0x13
     cc0:	9c 89       	ldd	r25, Y+20	; 0x14
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	9e 01       	movw	r18, r28
     cc8:	29 5e       	subi	r18, 0xE9	; 233
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	6d 89       	ldd	r22, Y+21	; 0x15
     cd2:	7e 89       	ldd	r23, Y+22	; 0x16
     cd4:	a9 01       	movw	r20, r18
     cd6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <vfscanf>
     cda:	2e 96       	adiw	r28, 0x0e	; 14
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <vfprintf>:
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	2b 97       	sbiw	r28, 0x0b	; 11
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	3c 01       	movw	r6, r24
     d22:	2b 01       	movw	r4, r22
     d24:	5a 01       	movw	r10, r20
     d26:	fc 01       	movw	r30, r24
     d28:	17 82       	std	Z+7, r1	; 0x07
     d2a:	16 82       	std	Z+6, r1	; 0x06
     d2c:	83 81       	ldd	r24, Z+3	; 0x03
     d2e:	81 fd       	sbrc	r24, 1
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x4c>
     d32:	6f ef       	ldi	r22, 0xFF	; 255
     d34:	7f ef       	ldi	r23, 0xFF	; 255
     d36:	c6 c1       	rjmp	.+908    	; 0x10c4 <vfprintf+0x3d8>
     d38:	9a e0       	ldi	r25, 0x0A	; 10
     d3a:	89 2e       	mov	r8, r25
     d3c:	1e 01       	movw	r2, r28
     d3e:	08 94       	sec
     d40:	21 1c       	adc	r2, r1
     d42:	31 1c       	adc	r3, r1
     d44:	f3 01       	movw	r30, r6
     d46:	23 81       	ldd	r18, Z+3	; 0x03
     d48:	f2 01       	movw	r30, r4
     d4a:	23 fd       	sbrc	r18, 3
     d4c:	85 91       	lpm	r24, Z+
     d4e:	23 ff       	sbrs	r18, 3
     d50:	81 91       	ld	r24, Z+
     d52:	2f 01       	movw	r4, r30
     d54:	88 23       	and	r24, r24
     d56:	09 f4       	brne	.+2      	; 0xd5a <vfprintf+0x6e>
     d58:	b2 c1       	rjmp	.+868    	; 0x10be <vfprintf+0x3d2>
     d5a:	85 32       	cpi	r24, 0x25	; 37
     d5c:	39 f4       	brne	.+14     	; 0xd6c <vfprintf+0x80>
     d5e:	23 fd       	sbrc	r18, 3
     d60:	85 91       	lpm	r24, Z+
     d62:	23 ff       	sbrs	r18, 3
     d64:	81 91       	ld	r24, Z+
     d66:	2f 01       	movw	r4, r30
     d68:	85 32       	cpi	r24, 0x25	; 37
     d6a:	29 f4       	brne	.+10     	; 0xd76 <vfprintf+0x8a>
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	b3 01       	movw	r22, r6
     d70:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
     d74:	e7 cf       	rjmp	.-50     	; 0xd44 <vfprintf+0x58>
     d76:	98 2f       	mov	r25, r24
     d78:	ff 24       	eor	r15, r15
     d7a:	ee 24       	eor	r14, r14
     d7c:	99 24       	eor	r9, r9
     d7e:	ff e1       	ldi	r31, 0x1F	; 31
     d80:	ff 15       	cp	r31, r15
     d82:	d0 f0       	brcs	.+52     	; 0xdb8 <vfprintf+0xcc>
     d84:	9b 32       	cpi	r25, 0x2B	; 43
     d86:	69 f0       	breq	.+26     	; 0xda2 <vfprintf+0xb6>
     d88:	9c 32       	cpi	r25, 0x2C	; 44
     d8a:	28 f4       	brcc	.+10     	; 0xd96 <vfprintf+0xaa>
     d8c:	90 32       	cpi	r25, 0x20	; 32
     d8e:	59 f0       	breq	.+22     	; 0xda6 <vfprintf+0xba>
     d90:	93 32       	cpi	r25, 0x23	; 35
     d92:	91 f4       	brne	.+36     	; 0xdb8 <vfprintf+0xcc>
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <vfprintf+0xc6>
     d96:	9d 32       	cpi	r25, 0x2D	; 45
     d98:	49 f0       	breq	.+18     	; 0xdac <vfprintf+0xc0>
     d9a:	90 33       	cpi	r25, 0x30	; 48
     d9c:	69 f4       	brne	.+26     	; 0xdb8 <vfprintf+0xcc>
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	24 c0       	rjmp	.+72     	; 0xdea <vfprintf+0xfe>
     da2:	52 e0       	ldi	r21, 0x02	; 2
     da4:	f5 2a       	or	r15, r21
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	f8 2a       	or	r15, r24
     daa:	28 c0       	rjmp	.+80     	; 0xdfc <vfprintf+0x110>
     dac:	98 e0       	ldi	r25, 0x08	; 8
     dae:	f9 2a       	or	r15, r25
     db0:	25 c0       	rjmp	.+74     	; 0xdfc <vfprintf+0x110>
     db2:	e0 e1       	ldi	r30, 0x10	; 16
     db4:	fe 2a       	or	r15, r30
     db6:	22 c0       	rjmp	.+68     	; 0xdfc <vfprintf+0x110>
     db8:	f7 fc       	sbrc	r15, 7
     dba:	29 c0       	rjmp	.+82     	; 0xe0e <vfprintf+0x122>
     dbc:	89 2f       	mov	r24, r25
     dbe:	80 53       	subi	r24, 0x30	; 48
     dc0:	8a 30       	cpi	r24, 0x0A	; 10
     dc2:	70 f4       	brcc	.+28     	; 0xde0 <vfprintf+0xf4>
     dc4:	f6 fe       	sbrs	r15, 6
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <vfprintf+0xe6>
     dc8:	98 9c       	mul	r9, r8
     dca:	90 2c       	mov	r9, r0
     dcc:	11 24       	eor	r1, r1
     dce:	98 0e       	add	r9, r24
     dd0:	15 c0       	rjmp	.+42     	; 0xdfc <vfprintf+0x110>
     dd2:	e8 9c       	mul	r14, r8
     dd4:	e0 2c       	mov	r14, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	e8 0e       	add	r14, r24
     dda:	f0 e2       	ldi	r31, 0x20	; 32
     ddc:	ff 2a       	or	r15, r31
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <vfprintf+0x110>
     de0:	9e 32       	cpi	r25, 0x2E	; 46
     de2:	29 f4       	brne	.+10     	; 0xdee <vfprintf+0x102>
     de4:	f6 fc       	sbrc	r15, 6
     de6:	6b c1       	rjmp	.+726    	; 0x10be <vfprintf+0x3d2>
     de8:	40 e4       	ldi	r20, 0x40	; 64
     dea:	f4 2a       	or	r15, r20
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <vfprintf+0x110>
     dee:	9c 36       	cpi	r25, 0x6C	; 108
     df0:	19 f4       	brne	.+6      	; 0xdf8 <vfprintf+0x10c>
     df2:	50 e8       	ldi	r21, 0x80	; 128
     df4:	f5 2a       	or	r15, r21
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x110>
     df8:	98 36       	cpi	r25, 0x68	; 104
     dfa:	49 f4       	brne	.+18     	; 0xe0e <vfprintf+0x122>
     dfc:	f2 01       	movw	r30, r4
     dfe:	23 fd       	sbrc	r18, 3
     e00:	95 91       	lpm	r25, Z+
     e02:	23 ff       	sbrs	r18, 3
     e04:	91 91       	ld	r25, Z+
     e06:	2f 01       	movw	r4, r30
     e08:	99 23       	and	r25, r25
     e0a:	09 f0       	breq	.+2      	; 0xe0e <vfprintf+0x122>
     e0c:	b8 cf       	rjmp	.-144    	; 0xd7e <vfprintf+0x92>
     e0e:	89 2f       	mov	r24, r25
     e10:	85 54       	subi	r24, 0x45	; 69
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	18 f0       	brcs	.+6      	; 0xe1c <vfprintf+0x130>
     e16:	80 52       	subi	r24, 0x20	; 32
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	38 f4       	brcc	.+14     	; 0xe2a <vfprintf+0x13e>
     e1c:	44 e0       	ldi	r20, 0x04	; 4
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	a4 0e       	add	r10, r20
     e22:	b5 1e       	adc	r11, r21
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	59 83       	std	Y+1, r21	; 0x01
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <vfprintf+0x15c>
     e2a:	93 36       	cpi	r25, 0x63	; 99
     e2c:	31 f0       	breq	.+12     	; 0xe3a <vfprintf+0x14e>
     e2e:	93 37       	cpi	r25, 0x73	; 115
     e30:	79 f0       	breq	.+30     	; 0xe50 <vfprintf+0x164>
     e32:	93 35       	cpi	r25, 0x53	; 83
     e34:	09 f0       	breq	.+2      	; 0xe38 <vfprintf+0x14c>
     e36:	56 c0       	rjmp	.+172    	; 0xee4 <vfprintf+0x1f8>
     e38:	20 c0       	rjmp	.+64     	; 0xe7a <vfprintf+0x18e>
     e3a:	f5 01       	movw	r30, r10
     e3c:	80 81       	ld	r24, Z
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	42 e0       	ldi	r20, 0x02	; 2
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	a4 0e       	add	r10, r20
     e46:	b5 1e       	adc	r11, r21
     e48:	61 01       	movw	r12, r2
     e4a:	01 e0       	ldi	r16, 0x01	; 1
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	12 c0       	rjmp	.+36     	; 0xe74 <vfprintf+0x188>
     e50:	f5 01       	movw	r30, r10
     e52:	c0 80       	ld	r12, Z
     e54:	d1 80       	ldd	r13, Z+1	; 0x01
     e56:	f6 fc       	sbrc	r15, 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x174>
     e5a:	6f ef       	ldi	r22, 0xFF	; 255
     e5c:	7f ef       	ldi	r23, 0xFF	; 255
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x178>
     e60:	69 2d       	mov	r22, r9
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	42 e0       	ldi	r20, 0x02	; 2
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	a4 0e       	add	r10, r20
     e6a:	b5 1e       	adc	r11, r21
     e6c:	c6 01       	movw	r24, r12
     e6e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <strnlen>
     e72:	8c 01       	movw	r16, r24
     e74:	5f e7       	ldi	r21, 0x7F	; 127
     e76:	f5 22       	and	r15, r21
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <vfprintf+0x1b6>
     e7a:	f5 01       	movw	r30, r10
     e7c:	c0 80       	ld	r12, Z
     e7e:	d1 80       	ldd	r13, Z+1	; 0x01
     e80:	f6 fc       	sbrc	r15, 6
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <vfprintf+0x19e>
     e84:	6f ef       	ldi	r22, 0xFF	; 255
     e86:	7f ef       	ldi	r23, 0xFF	; 255
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x1a2>
     e8a:	69 2d       	mov	r22, r9
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	42 e0       	ldi	r20, 0x02	; 2
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	a4 0e       	add	r10, r20
     e94:	b5 1e       	adc	r11, r21
     e96:	c6 01       	movw	r24, r12
     e98:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <strnlen_P>
     e9c:	8c 01       	movw	r16, r24
     e9e:	50 e8       	ldi	r21, 0x80	; 128
     ea0:	f5 2a       	or	r15, r21
     ea2:	f3 fe       	sbrs	r15, 3
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <vfprintf+0x1c8>
     ea6:	1a c0       	rjmp	.+52     	; 0xedc <vfprintf+0x1f0>
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	b3 01       	movw	r22, r6
     eae:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
     eb2:	ea 94       	dec	r14
     eb4:	8e 2d       	mov	r24, r14
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	08 17       	cp	r16, r24
     eba:	19 07       	cpc	r17, r25
     ebc:	a8 f3       	brcs	.-22     	; 0xea8 <vfprintf+0x1bc>
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <vfprintf+0x1f0>
     ec0:	f6 01       	movw	r30, r12
     ec2:	f7 fc       	sbrc	r15, 7
     ec4:	85 91       	lpm	r24, Z+
     ec6:	f7 fe       	sbrs	r15, 7
     ec8:	81 91       	ld	r24, Z+
     eca:	6f 01       	movw	r12, r30
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	b3 01       	movw	r22, r6
     ed0:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
     ed4:	e1 10       	cpse	r14, r1
     ed6:	ea 94       	dec	r14
     ed8:	01 50       	subi	r16, 0x01	; 1
     eda:	10 40       	sbci	r17, 0x00	; 0
     edc:	01 15       	cp	r16, r1
     ede:	11 05       	cpc	r17, r1
     ee0:	79 f7       	brne	.-34     	; 0xec0 <vfprintf+0x1d4>
     ee2:	ea c0       	rjmp	.+468    	; 0x10b8 <vfprintf+0x3cc>
     ee4:	94 36       	cpi	r25, 0x64	; 100
     ee6:	11 f0       	breq	.+4      	; 0xeec <vfprintf+0x200>
     ee8:	99 36       	cpi	r25, 0x69	; 105
     eea:	69 f5       	brne	.+90     	; 0xf46 <vfprintf+0x25a>
     eec:	f7 fe       	sbrs	r15, 7
     eee:	08 c0       	rjmp	.+16     	; 0xf00 <vfprintf+0x214>
     ef0:	f5 01       	movw	r30, r10
     ef2:	20 81       	ld	r18, Z
     ef4:	31 81       	ldd	r19, Z+1	; 0x01
     ef6:	42 81       	ldd	r20, Z+2	; 0x02
     ef8:	53 81       	ldd	r21, Z+3	; 0x03
     efa:	84 e0       	ldi	r24, 0x04	; 4
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0a c0       	rjmp	.+20     	; 0xf14 <vfprintf+0x228>
     f00:	f5 01       	movw	r30, r10
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	9c 01       	movw	r18, r24
     f08:	44 27       	eor	r20, r20
     f0a:	37 fd       	sbrc	r19, 7
     f0c:	40 95       	com	r20
     f0e:	54 2f       	mov	r21, r20
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	a8 0e       	add	r10, r24
     f16:	b9 1e       	adc	r11, r25
     f18:	9f e6       	ldi	r25, 0x6F	; 111
     f1a:	f9 22       	and	r15, r25
     f1c:	57 ff       	sbrs	r21, 7
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <vfprintf+0x246>
     f20:	50 95       	com	r21
     f22:	40 95       	com	r20
     f24:	30 95       	com	r19
     f26:	21 95       	neg	r18
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	4f 4f       	sbci	r20, 0xFF	; 255
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	e0 e8       	ldi	r30, 0x80	; 128
     f30:	fe 2a       	or	r15, r30
     f32:	ca 01       	movw	r24, r20
     f34:	b9 01       	movw	r22, r18
     f36:	a1 01       	movw	r20, r2
     f38:	2a e0       	ldi	r18, 0x0A	; 10
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__ultoa_invert>
     f40:	d8 2e       	mov	r13, r24
     f42:	d2 18       	sub	r13, r2
     f44:	40 c0       	rjmp	.+128    	; 0xfc6 <vfprintf+0x2da>
     f46:	95 37       	cpi	r25, 0x75	; 117
     f48:	29 f4       	brne	.+10     	; 0xf54 <vfprintf+0x268>
     f4a:	1f 2d       	mov	r17, r15
     f4c:	1f 7e       	andi	r17, 0xEF	; 239
     f4e:	2a e0       	ldi	r18, 0x0A	; 10
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	1d c0       	rjmp	.+58     	; 0xf8e <vfprintf+0x2a2>
     f54:	1f 2d       	mov	r17, r15
     f56:	19 7f       	andi	r17, 0xF9	; 249
     f58:	9f 36       	cpi	r25, 0x6F	; 111
     f5a:	61 f0       	breq	.+24     	; 0xf74 <vfprintf+0x288>
     f5c:	90 37       	cpi	r25, 0x70	; 112
     f5e:	20 f4       	brcc	.+8      	; 0xf68 <vfprintf+0x27c>
     f60:	98 35       	cpi	r25, 0x58	; 88
     f62:	09 f0       	breq	.+2      	; 0xf66 <vfprintf+0x27a>
     f64:	ac c0       	rjmp	.+344    	; 0x10be <vfprintf+0x3d2>
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <vfprintf+0x29a>
     f68:	90 37       	cpi	r25, 0x70	; 112
     f6a:	39 f0       	breq	.+14     	; 0xf7a <vfprintf+0x28e>
     f6c:	98 37       	cpi	r25, 0x78	; 120
     f6e:	09 f0       	breq	.+2      	; 0xf72 <vfprintf+0x286>
     f70:	a6 c0       	rjmp	.+332    	; 0x10be <vfprintf+0x3d2>
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <vfprintf+0x290>
     f74:	28 e0       	ldi	r18, 0x08	; 8
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	0a c0       	rjmp	.+20     	; 0xf8e <vfprintf+0x2a2>
     f7a:	10 61       	ori	r17, 0x10	; 16
     f7c:	14 fd       	sbrc	r17, 4
     f7e:	14 60       	ori	r17, 0x04	; 4
     f80:	20 e1       	ldi	r18, 0x10	; 16
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <vfprintf+0x2a2>
     f86:	14 fd       	sbrc	r17, 4
     f88:	16 60       	ori	r17, 0x06	; 6
     f8a:	20 e1       	ldi	r18, 0x10	; 16
     f8c:	32 e0       	ldi	r19, 0x02	; 2
     f8e:	17 ff       	sbrs	r17, 7
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <vfprintf+0x2b6>
     f92:	f5 01       	movw	r30, r10
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	44 e0       	ldi	r20, 0x04	; 4
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <vfprintf+0x2c6>
     fa2:	f5 01       	movw	r30, r10
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	bc 01       	movw	r22, r24
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	42 e0       	ldi	r20, 0x02	; 2
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	a4 0e       	add	r10, r20
     fb4:	b5 1e       	adc	r11, r21
     fb6:	a1 01       	movw	r20, r2
     fb8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__ultoa_invert>
     fbc:	d8 2e       	mov	r13, r24
     fbe:	d2 18       	sub	r13, r2
     fc0:	8f e7       	ldi	r24, 0x7F	; 127
     fc2:	f8 2e       	mov	r15, r24
     fc4:	f1 22       	and	r15, r17
     fc6:	f6 fe       	sbrs	r15, 6
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <vfprintf+0x2f4>
     fca:	5e ef       	ldi	r21, 0xFE	; 254
     fcc:	f5 22       	and	r15, r21
     fce:	d9 14       	cp	r13, r9
     fd0:	38 f4       	brcc	.+14     	; 0xfe0 <vfprintf+0x2f4>
     fd2:	f4 fe       	sbrs	r15, 4
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <vfprintf+0x2f8>
     fd6:	f2 fc       	sbrc	r15, 2
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <vfprintf+0x2f8>
     fda:	8f ee       	ldi	r24, 0xEF	; 239
     fdc:	f8 22       	and	r15, r24
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x2f8>
     fe0:	1d 2d       	mov	r17, r13
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <vfprintf+0x2fa>
     fe4:	19 2d       	mov	r17, r9
     fe6:	f4 fe       	sbrs	r15, 4
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <vfprintf+0x318>
     fea:	fe 01       	movw	r30, r28
     fec:	ed 0d       	add	r30, r13
     fee:	f1 1d       	adc	r31, r1
     ff0:	80 81       	ld	r24, Z
     ff2:	80 33       	cpi	r24, 0x30	; 48
     ff4:	19 f4       	brne	.+6      	; 0xffc <vfprintf+0x310>
     ff6:	99 ee       	ldi	r25, 0xE9	; 233
     ff8:	f9 22       	and	r15, r25
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <vfprintf+0x320>
     ffc:	1f 5f       	subi	r17, 0xFF	; 255
     ffe:	f2 fe       	sbrs	r15, 2
    1000:	05 c0       	rjmp	.+10     	; 0x100c <vfprintf+0x320>
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x31e>
    1004:	8f 2d       	mov	r24, r15
    1006:	86 78       	andi	r24, 0x86	; 134
    1008:	09 f0       	breq	.+2      	; 0x100c <vfprintf+0x320>
    100a:	1f 5f       	subi	r17, 0xFF	; 255
    100c:	0f 2d       	mov	r16, r15
    100e:	f3 fc       	sbrc	r15, 3
    1010:	14 c0       	rjmp	.+40     	; 0x103a <vfprintf+0x34e>
    1012:	f0 fe       	sbrs	r15, 0
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <vfprintf+0x348>
    1016:	1e 15       	cp	r17, r14
    1018:	10 f0       	brcs	.+4      	; 0x101e <vfprintf+0x332>
    101a:	9d 2c       	mov	r9, r13
    101c:	0b c0       	rjmp	.+22     	; 0x1034 <vfprintf+0x348>
    101e:	9d 2c       	mov	r9, r13
    1020:	9e 0c       	add	r9, r14
    1022:	91 1a       	sub	r9, r17
    1024:	1e 2d       	mov	r17, r14
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <vfprintf+0x348>
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	b3 01       	movw	r22, r6
    102e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
    1032:	1f 5f       	subi	r17, 0xFF	; 255
    1034:	1e 15       	cp	r17, r14
    1036:	c0 f3       	brcs	.-16     	; 0x1028 <vfprintf+0x33c>
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <vfprintf+0x356>
    103a:	1e 15       	cp	r17, r14
    103c:	10 f4       	brcc	.+4      	; 0x1042 <vfprintf+0x356>
    103e:	e1 1a       	sub	r14, r17
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <vfprintf+0x358>
    1042:	ee 24       	eor	r14, r14
    1044:	04 ff       	sbrs	r16, 4
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <vfprintf+0x37a>
    1048:	80 e3       	ldi	r24, 0x30	; 48
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	b3 01       	movw	r22, r6
    104e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
    1052:	02 ff       	sbrs	r16, 2
    1054:	1d c0       	rjmp	.+58     	; 0x1090 <vfprintf+0x3a4>
    1056:	01 fd       	sbrc	r16, 1
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x374>
    105a:	88 e7       	ldi	r24, 0x78	; 120
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e c0       	rjmp	.+28     	; 0x107c <vfprintf+0x390>
    1060:	88 e5       	ldi	r24, 0x58	; 88
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0b c0       	rjmp	.+22     	; 0x107c <vfprintf+0x390>
    1066:	80 2f       	mov	r24, r16
    1068:	86 78       	andi	r24, 0x86	; 134
    106a:	91 f0       	breq	.+36     	; 0x1090 <vfprintf+0x3a4>
    106c:	01 ff       	sbrs	r16, 1
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <vfprintf+0x388>
    1070:	8b e2       	ldi	r24, 0x2B	; 43
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <vfprintf+0x38a>
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	f7 fc       	sbrc	r15, 7
    1078:	8d e2       	ldi	r24, 0x2D	; 45
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	b3 01       	movw	r22, r6
    107e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <vfprintf+0x3a4>
    1084:	80 e3       	ldi	r24, 0x30	; 48
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	b3 01       	movw	r22, r6
    108a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
    108e:	9a 94       	dec	r9
    1090:	d9 14       	cp	r13, r9
    1092:	c0 f3       	brcs	.-16     	; 0x1084 <vfprintf+0x398>
    1094:	da 94       	dec	r13
    1096:	f1 01       	movw	r30, r2
    1098:	ed 0d       	add	r30, r13
    109a:	f1 1d       	adc	r31, r1
    109c:	80 81       	ld	r24, Z
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	b3 01       	movw	r22, r6
    10a2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
    10a6:	dd 20       	and	r13, r13
    10a8:	a9 f7       	brne	.-22     	; 0x1094 <vfprintf+0x3a8>
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <vfprintf+0x3cc>
    10ac:	80 e2       	ldi	r24, 0x20	; 32
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b3 01       	movw	r22, r6
    10b2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <fputc>
    10b6:	ea 94       	dec	r14
    10b8:	ee 20       	and	r14, r14
    10ba:	c1 f7       	brne	.-16     	; 0x10ac <vfprintf+0x3c0>
    10bc:	43 ce       	rjmp	.-890    	; 0xd44 <vfprintf+0x58>
    10be:	f3 01       	movw	r30, r6
    10c0:	66 81       	ldd	r22, Z+6	; 0x06
    10c2:	77 81       	ldd	r23, Z+7	; 0x07
    10c4:	cb 01       	movw	r24, r22
    10c6:	2b 96       	adiw	r28, 0x0b	; 11
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	9f 90       	pop	r9
    10e8:	8f 90       	pop	r8
    10ea:	7f 90       	pop	r7
    10ec:	6f 90       	pop	r6
    10ee:	5f 90       	pop	r5
    10f0:	4f 90       	pop	r4
    10f2:	3f 90       	pop	r3
    10f4:	2f 90       	pop	r2
    10f6:	08 95       	ret

000010f8 <putval>:
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 fd       	sbrc	r18, 0
    10fc:	08 c0       	rjmp	.+16     	; 0x110e <putval+0x16>
    10fe:	23 fd       	sbrc	r18, 3
    1100:	05 c0       	rjmp	.+10     	; 0x110c <putval+0x14>
    1102:	22 ff       	sbrs	r18, 2
    1104:	02 c0       	rjmp	.+4      	; 0x110a <putval+0x12>
    1106:	73 83       	std	Z+3, r23	; 0x03
    1108:	62 83       	std	Z+2, r22	; 0x02
    110a:	51 83       	std	Z+1, r21	; 0x01
    110c:	40 83       	st	Z, r20
    110e:	08 95       	ret

00001110 <mulacc>:
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	44 ff       	sbrs	r20, 4
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <mulacc+0x10>
    111c:	33 e0       	ldi	r19, 0x03	; 3
    111e:	11 c0       	rjmp	.+34     	; 0x1142 <mulacc+0x32>
    1120:	46 ff       	sbrs	r20, 6
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <mulacc+0x18>
    1124:	34 e0       	ldi	r19, 0x04	; 4
    1126:	0d c0       	rjmp	.+26     	; 0x1142 <mulacc+0x32>
    1128:	db 01       	movw	r26, r22
    112a:	fc 01       	movw	r30, r24
    112c:	aa 0f       	add	r26, r26
    112e:	bb 1f       	adc	r27, r27
    1130:	ee 1f       	adc	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	10 94       	com	r1
    1136:	d1 f7       	brne	.-12     	; 0x112c <mulacc+0x1c>
    1138:	6a 0f       	add	r22, r26
    113a:	7b 1f       	adc	r23, r27
    113c:	8e 1f       	adc	r24, r30
    113e:	9f 1f       	adc	r25, r31
    1140:	31 e0       	ldi	r19, 0x01	; 1
    1142:	66 0f       	add	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	31 50       	subi	r19, 0x01	; 1
    114c:	d1 f7       	brne	.-12     	; 0x1142 <mulacc+0x32>
    114e:	7b 01       	movw	r14, r22
    1150:	8c 01       	movw	r16, r24
    1152:	e2 0e       	add	r14, r18
    1154:	f1 1c       	adc	r15, r1
    1156:	01 1d       	adc	r16, r1
    1158:	11 1d       	adc	r17, r1
    115a:	a8 01       	movw	r20, r16
    115c:	97 01       	movw	r18, r14
    115e:	b7 01       	movw	r22, r14
    1160:	ca 01       	movw	r24, r20
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	08 95       	ret

0000116c <skip_spaces>:
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	8c 01       	movw	r16, r24
    1176:	c8 01       	movw	r24, r16
    1178:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    117c:	ec 01       	movw	r28, r24
    117e:	97 fd       	sbrc	r25, 7
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <skip_spaces+0x26>
    1182:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    1186:	89 2b       	or	r24, r25
    1188:	b1 f7       	brne	.-20     	; 0x1176 <skip_spaces+0xa>
    118a:	ce 01       	movw	r24, r28
    118c:	b8 01       	movw	r22, r16
    118e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ungetc>
    1192:	ce 01       	movw	r24, r28
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <conv_int>:
    119e:	af 92       	push	r10
    11a0:	bf 92       	push	r11
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	ec 01       	movw	r28, r24
    11b4:	c6 2e       	mov	r12, r22
    11b6:	5a 01       	movw	r10, r20
    11b8:	12 2f       	mov	r17, r18
    11ba:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    11be:	ac 01       	movw	r20, r24
    11c0:	8b 32       	cpi	r24, 0x2B	; 43
    11c2:	19 f0       	breq	.+6      	; 0x11ca <conv_int+0x2c>
    11c4:	8d 32       	cpi	r24, 0x2D	; 45
    11c6:	51 f4       	brne	.+20     	; 0x11dc <conv_int+0x3e>
    11c8:	10 68       	ori	r17, 0x80	; 128
    11ca:	ca 94       	dec	r12
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <conv_int+0x32>
    11ce:	6d c0       	rjmp	.+218    	; 0x12aa <conv_int+0x10c>
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    11d6:	ac 01       	movw	r20, r24
    11d8:	97 fd       	sbrc	r25, 7
    11da:	67 c0       	rjmp	.+206    	; 0x12aa <conv_int+0x10c>
    11dc:	6d ef       	ldi	r22, 0xFD	; 253
    11de:	d6 2e       	mov	r13, r22
    11e0:	d1 22       	and	r13, r17
    11e2:	8d 2d       	mov	r24, r13
    11e4:	80 73       	andi	r24, 0x30	; 48
    11e6:	01 f5       	brne	.+64     	; 0x1228 <conv_int+0x8a>
    11e8:	40 33       	cpi	r20, 0x30	; 48
    11ea:	f1 f4       	brne	.+60     	; 0x1228 <conv_int+0x8a>
    11ec:	ca 94       	dec	r12
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <conv_int+0x54>
    11f0:	47 c0       	rjmp	.+142    	; 0x1280 <conv_int+0xe2>
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    11f8:	ac 01       	movw	r20, r24
    11fa:	97 fd       	sbrc	r25, 7
    11fc:	41 c0       	rjmp	.+130    	; 0x1280 <conv_int+0xe2>
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	d8 2a       	or	r13, r24
    1202:	48 37       	cpi	r20, 0x78	; 120
    1204:	11 f0       	breq	.+4      	; 0x120a <conv_int+0x6c>
    1206:	48 35       	cpi	r20, 0x58	; 88
    1208:	59 f4       	brne	.+22     	; 0x1220 <conv_int+0x82>
    120a:	80 e4       	ldi	r24, 0x40	; 64
    120c:	d8 2a       	or	r13, r24
    120e:	ca 94       	dec	r12
    1210:	b9 f1       	breq	.+110    	; 0x1280 <conv_int+0xe2>
    1212:	ce 01       	movw	r24, r28
    1214:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    1218:	ac 01       	movw	r20, r24
    121a:	99 23       	and	r25, r25
    121c:	2c f4       	brge	.+10     	; 0x1228 <conv_int+0x8a>
    121e:	30 c0       	rjmp	.+96     	; 0x1280 <conv_int+0xe2>
    1220:	d6 fc       	sbrc	r13, 6
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <conv_int+0x8a>
    1224:	80 e1       	ldi	r24, 0x10	; 16
    1226:	d8 2a       	or	r13, r24
    1228:	ee 24       	eor	r14, r14
    122a:	ff 24       	eor	r15, r15
    122c:	87 01       	movw	r16, r14
    122e:	24 2f       	mov	r18, r20
    1230:	20 53       	subi	r18, 0x30	; 48
    1232:	28 30       	cpi	r18, 0x08	; 8
    1234:	88 f0       	brcs	.+34     	; 0x1258 <conv_int+0xba>
    1236:	d4 fc       	sbrc	r13, 4
    1238:	09 c0       	rjmp	.+18     	; 0x124c <conv_int+0xae>
    123a:	2a 30       	cpi	r18, 0x0A	; 10
    123c:	68 f0       	brcs	.+26     	; 0x1258 <conv_int+0xba>
    123e:	d6 fe       	sbrs	r13, 6
    1240:	05 c0       	rjmp	.+10     	; 0x124c <conv_int+0xae>
    1242:	2f 7d       	andi	r18, 0xDF	; 223
    1244:	82 2f       	mov	r24, r18
    1246:	81 51       	subi	r24, 0x11	; 17
    1248:	86 30       	cpi	r24, 0x06	; 6
    124a:	28 f0       	brcs	.+10     	; 0x1256 <conv_int+0xb8>
    124c:	ca 01       	movw	r24, r20
    124e:	be 01       	movw	r22, r28
    1250:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ungetc>
    1254:	12 c0       	rjmp	.+36     	; 0x127a <conv_int+0xdc>
    1256:	27 50       	subi	r18, 0x07	; 7
    1258:	c8 01       	movw	r24, r16
    125a:	b7 01       	movw	r22, r14
    125c:	4d 2d       	mov	r20, r13
    125e:	0e 94 88 08 	call	0x1110	; 0x1110 <mulacc>
    1262:	7b 01       	movw	r14, r22
    1264:	8c 01       	movw	r16, r24
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	d8 2a       	or	r13, r24
    126a:	ca 94       	dec	r12
    126c:	61 f0       	breq	.+24     	; 0x1286 <conv_int+0xe8>
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    1274:	ac 01       	movw	r20, r24
    1276:	97 ff       	sbrs	r25, 7
    1278:	da cf       	rjmp	.-76     	; 0x122e <conv_int+0x90>
    127a:	d1 fc       	sbrc	r13, 1
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <conv_int+0xe8>
    127e:	15 c0       	rjmp	.+42     	; 0x12aa <conv_int+0x10c>
    1280:	ee 24       	eor	r14, r14
    1282:	ff 24       	eor	r15, r15
    1284:	87 01       	movw	r16, r14
    1286:	d7 fe       	sbrs	r13, 7
    1288:	08 c0       	rjmp	.+16     	; 0x129a <conv_int+0xfc>
    128a:	10 95       	com	r17
    128c:	00 95       	com	r16
    128e:	f0 94       	com	r15
    1290:	e0 94       	com	r14
    1292:	e1 1c       	adc	r14, r1
    1294:	f1 1c       	adc	r15, r1
    1296:	01 1d       	adc	r16, r1
    1298:	11 1d       	adc	r17, r1
    129a:	c5 01       	movw	r24, r10
    129c:	b8 01       	movw	r22, r16
    129e:	a7 01       	movw	r20, r14
    12a0:	2d 2d       	mov	r18, r13
    12a2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <putval>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <conv_int+0x10e>
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	08 95       	ret

000012c2 <conv_brk>:
    12c2:	6f 92       	push	r6
    12c4:	7f 92       	push	r7
    12c6:	8f 92       	push	r8
    12c8:	9f 92       	push	r9
    12ca:	af 92       	push	r10
    12cc:	bf 92       	push	r11
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	a0 97       	sbiw	r28, 0x20	; 32
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	6c 01       	movw	r12, r24
    12f0:	a6 2e       	mov	r10, r22
    12f2:	8a 01       	movw	r16, r20
    12f4:	79 01       	movw	r14, r18
    12f6:	fe 01       	movw	r30, r28
    12f8:	31 96       	adiw	r30, 0x01	; 1
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	df 01       	movw	r26, r30
    12fe:	1d 92       	st	X+, r1
    1300:	8a 95       	dec	r24
    1302:	e9 f7       	brne	.-6      	; 0x12fe <conv_brk+0x3c>
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	4f 01       	movw	r8, r30
    1310:	a1 e0       	ldi	r26, 0x01	; 1
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	f6 01       	movw	r30, r12
    1316:	83 81       	ldd	r24, Z+3	; 0x03
    1318:	f7 01       	movw	r30, r14
    131a:	83 fd       	sbrc	r24, 3
    131c:	25 91       	lpm	r18, Z+
    131e:	83 ff       	sbrs	r24, 3
    1320:	21 91       	ld	r18, Z+
    1322:	7f 01       	movw	r14, r30
    1324:	22 23       	and	r18, r18
    1326:	09 f4       	brne	.+2      	; 0x132a <conv_brk+0x68>
    1328:	7e c0       	rjmp	.+252    	; 0x1426 <conv_brk+0x164>
    132a:	2e 35       	cpi	r18, 0x5E	; 94
    132c:	19 f4       	brne	.+6      	; 0x1334 <conv_brk+0x72>
    132e:	41 15       	cp	r20, r1
    1330:	51 05       	cpc	r21, r1
    1332:	69 f1       	breq	.+90     	; 0x138e <conv_brk+0xcc>
    1334:	87 2f       	mov	r24, r23
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	84 17       	cp	r24, r20
    133a:	95 07       	cpc	r25, r21
    133c:	44 f4       	brge	.+16     	; 0x134e <conv_brk+0x8c>
    133e:	2d 35       	cpi	r18, 0x5D	; 93
    1340:	51 f1       	breq	.+84     	; 0x1396 <conv_brk+0xd4>
    1342:	2d 32       	cpi	r18, 0x2D	; 45
    1344:	21 f4       	brne	.+8      	; 0x134e <conv_brk+0x8c>
    1346:	33 23       	and	r19, r19
    1348:	29 f4       	brne	.+10     	; 0x1354 <conv_brk+0x92>
    134a:	31 e0       	ldi	r19, 0x01	; 1
    134c:	21 c0       	rjmp	.+66     	; 0x1390 <conv_brk+0xce>
    134e:	33 23       	and	r19, r19
    1350:	09 f4       	brne	.+2      	; 0x1354 <conv_brk+0x92>
    1352:	62 2f       	mov	r22, r18
    1354:	32 2f       	mov	r19, r18
    1356:	83 2f       	mov	r24, r19
    1358:	86 95       	lsr	r24
    135a:	86 95       	lsr	r24
    135c:	86 95       	lsr	r24
    135e:	f4 01       	movw	r30, r8
    1360:	e8 0f       	add	r30, r24
    1362:	f1 1d       	adc	r31, r1
    1364:	83 2f       	mov	r24, r19
    1366:	87 70       	andi	r24, 0x07	; 7
    1368:	3d 01       	movw	r6, r26
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <conv_brk+0xae>
    136c:	66 0c       	add	r6, r6
    136e:	77 1c       	adc	r7, r7
    1370:	8a 95       	dec	r24
    1372:	e2 f7       	brpl	.-8      	; 0x136c <conv_brk+0xaa>
    1374:	20 81       	ld	r18, Z
    1376:	26 29       	or	r18, r6
    1378:	20 83       	st	Z, r18
    137a:	36 17       	cp	r19, r22
    137c:	11 f4       	brne	.+4      	; 0x1382 <conv_brk+0xc0>
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <conv_brk+0xce>
    1382:	36 17       	cp	r19, r22
    1384:	10 f4       	brcc	.+4      	; 0x138a <conv_brk+0xc8>
    1386:	3f 5f       	subi	r19, 0xFF	; 255
    1388:	e6 cf       	rjmp	.-52     	; 0x1356 <conv_brk+0x94>
    138a:	31 50       	subi	r19, 0x01	; 1
    138c:	e4 cf       	rjmp	.-56     	; 0x1356 <conv_brk+0x94>
    138e:	71 e0       	ldi	r23, 0x01	; 1
    1390:	4f 5f       	subi	r20, 0xFF	; 255
    1392:	5f 4f       	sbci	r21, 0xFF	; 255
    1394:	bf cf       	rjmp	.-130    	; 0x1314 <conv_brk+0x52>
    1396:	33 23       	and	r19, r19
    1398:	19 f0       	breq	.+6      	; 0x13a0 <conv_brk+0xde>
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	80 62       	ori	r24, 0x20	; 32
    139e:	8e 83       	std	Y+6, r24	; 0x06
    13a0:	77 23       	and	r23, r23
    13a2:	59 f0       	breq	.+22     	; 0x13ba <conv_brk+0xf8>
    13a4:	fe 01       	movw	r30, r28
    13a6:	31 96       	adiw	r30, 0x01	; 1
    13a8:	9e 01       	movw	r18, r28
    13aa:	2f 5d       	subi	r18, 0xDF	; 223
    13ac:	3f 4f       	sbci	r19, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	80 95       	com	r24
    13b2:	81 93       	st	Z+, r24
    13b4:	e2 17       	cp	r30, r18
    13b6:	f3 07       	cpc	r31, r19
    13b8:	d1 f7       	brne	.-12     	; 0x13ae <conv_brk+0xec>
    13ba:	bb 24       	eor	r11, r11
    13bc:	b3 94       	inc	r11
    13be:	4e 01       	movw	r8, r28
    13c0:	08 94       	sec
    13c2:	81 1c       	adc	r8, r1
    13c4:	91 1c       	adc	r9, r1
    13c6:	c6 01       	movw	r24, r12
    13c8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    13cc:	ac 01       	movw	r20, r24
    13ce:	97 fd       	sbrc	r25, 7
    13d0:	22 c0       	rjmp	.+68     	; 0x1416 <conv_brk+0x154>
    13d2:	86 95       	lsr	r24
    13d4:	86 95       	lsr	r24
    13d6:	86 95       	lsr	r24
    13d8:	f4 01       	movw	r30, r8
    13da:	e8 0f       	add	r30, r24
    13dc:	f1 1d       	adc	r31, r1
    13de:	80 81       	ld	r24, Z
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a 01       	movw	r18, r20
    13e4:	27 70       	andi	r18, 0x07	; 7
    13e6:	30 70       	andi	r19, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <conv_brk+0x12c>
    13ea:	95 95       	asr	r25
    13ec:	87 95       	ror	r24
    13ee:	2a 95       	dec	r18
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <conv_brk+0x128>
    13f2:	80 fd       	sbrc	r24, 0
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <conv_brk+0x13e>
    13f6:	ca 01       	movw	r24, r20
    13f8:	b6 01       	movw	r22, r12
    13fa:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ungetc>
    13fe:	0b c0       	rjmp	.+22     	; 0x1416 <conv_brk+0x154>
    1400:	01 15       	cp	r16, r1
    1402:	11 05       	cpc	r17, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <conv_brk+0x14a>
    1406:	d8 01       	movw	r26, r16
    1408:	4d 93       	st	X+, r20
    140a:	8d 01       	movw	r16, r26
    140c:	aa 94       	dec	r10
    140e:	bb 24       	eor	r11, r11
    1410:	aa 20       	and	r10, r10
    1412:	c9 f6       	brne	.-78     	; 0x13c6 <conv_brk+0x104>
    1414:	02 c0       	rjmp	.+4      	; 0x141a <conv_brk+0x158>
    1416:	bb 20       	and	r11, r11
    1418:	31 f4       	brne	.+12     	; 0x1426 <conv_brk+0x164>
    141a:	01 15       	cp	r16, r1
    141c:	11 05       	cpc	r17, r1
    141e:	29 f0       	breq	.+10     	; 0x142a <conv_brk+0x168>
    1420:	f8 01       	movw	r30, r16
    1422:	10 82       	st	Z, r1
    1424:	02 c0       	rjmp	.+4      	; 0x142a <conv_brk+0x168>
    1426:	ee 24       	eor	r14, r14
    1428:	ff 24       	eor	r15, r15
    142a:	c7 01       	movw	r24, r14
    142c:	a0 96       	adiw	r28, 0x20	; 32
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	08 95       	ret

00001456 <vfscanf>:
    1456:	6f 92       	push	r6
    1458:	7f 92       	push	r7
    145a:	8f 92       	push	r8
    145c:	9f 92       	push	r9
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	5c 01       	movw	r10, r24
    1474:	6b 01       	movw	r12, r22
    1476:	3a 01       	movw	r6, r20
    1478:	fc 01       	movw	r30, r24
    147a:	17 82       	std	Z+7, r1	; 0x07
    147c:	16 82       	std	Z+6, r1	; 0x06
    147e:	88 24       	eor	r8, r8
    1480:	ea c0       	rjmp	.+468    	; 0x1656 <vfscanf+0x200>
    1482:	81 2f       	mov	r24, r17
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    148a:	89 2b       	or	r24, r25
    148c:	21 f0       	breq	.+8      	; 0x1496 <vfscanf+0x40>
    148e:	c5 01       	movw	r24, r10
    1490:	0e 94 b6 08 	call	0x116c	; 0x116c <skip_spaces>
    1494:	e0 c0       	rjmp	.+448    	; 0x1656 <vfscanf+0x200>
    1496:	15 32       	cpi	r17, 0x25	; 37
    1498:	49 f4       	brne	.+18     	; 0x14ac <vfscanf+0x56>
    149a:	f6 01       	movw	r30, r12
    149c:	f3 fc       	sbrc	r15, 3
    149e:	65 91       	lpm	r22, Z+
    14a0:	f3 fe       	sbrs	r15, 3
    14a2:	61 91       	ld	r22, Z+
    14a4:	6f 01       	movw	r12, r30
    14a6:	65 32       	cpi	r22, 0x25	; 37
    14a8:	69 f4       	brne	.+26     	; 0x14c4 <vfscanf+0x6e>
    14aa:	15 e2       	ldi	r17, 0x25	; 37
    14ac:	c5 01       	movw	r24, r10
    14ae:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    14b2:	97 fd       	sbrc	r25, 7
    14b4:	dc c0       	rjmp	.+440    	; 0x166e <vfscanf+0x218>
    14b6:	18 17       	cp	r17, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <vfscanf+0x66>
    14ba:	cd c0       	rjmp	.+410    	; 0x1656 <vfscanf+0x200>
    14bc:	b5 01       	movw	r22, r10
    14be:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ungetc>
    14c2:	da c0       	rjmp	.+436    	; 0x1678 <vfscanf+0x222>
    14c4:	6a 32       	cpi	r22, 0x2A	; 42
    14c6:	19 f0       	breq	.+6      	; 0x14ce <vfscanf+0x78>
    14c8:	16 2f       	mov	r17, r22
    14ca:	00 e0       	ldi	r16, 0x00	; 0
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <vfscanf+0x84>
    14ce:	f3 fc       	sbrc	r15, 3
    14d0:	15 91       	lpm	r17, Z+
    14d2:	f3 fe       	sbrs	r15, 3
    14d4:	11 91       	ld	r17, Z+
    14d6:	6f 01       	movw	r12, r30
    14d8:	01 e0       	ldi	r16, 0x01	; 1
    14da:	99 24       	eor	r9, r9
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <vfscanf+0xa6>
    14de:	02 60       	ori	r16, 0x02	; 2
    14e0:	69 2d       	mov	r22, r9
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	0e 94 88 08 	call	0x1110	; 0x1110 <mulacc>
    14ee:	96 2e       	mov	r9, r22
    14f0:	f6 01       	movw	r30, r12
    14f2:	f3 fc       	sbrc	r15, 3
    14f4:	15 91       	lpm	r17, Z+
    14f6:	f3 fe       	sbrs	r15, 3
    14f8:	11 91       	ld	r17, Z+
    14fa:	6f 01       	movw	r12, r30
    14fc:	21 2f       	mov	r18, r17
    14fe:	20 53       	subi	r18, 0x30	; 48
    1500:	2a 30       	cpi	r18, 0x0A	; 10
    1502:	68 f3       	brcs	.-38     	; 0x14de <vfscanf+0x88>
    1504:	01 fd       	sbrc	r16, 1
    1506:	03 c0       	rjmp	.+6      	; 0x150e <vfscanf+0xb8>
    1508:	99 24       	eor	r9, r9
    150a:	9a 94       	dec	r9
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <vfscanf+0xbe>
    150e:	99 20       	and	r9, r9
    1510:	09 f4       	brne	.+2      	; 0x1514 <vfscanf+0xbe>
    1512:	b2 c0       	rjmp	.+356    	; 0x1678 <vfscanf+0x222>
    1514:	18 36       	cpi	r17, 0x68	; 104
    1516:	21 f0       	breq	.+8      	; 0x1520 <vfscanf+0xca>
    1518:	1c 36       	cpi	r17, 0x6C	; 108
    151a:	99 f4       	brne	.+38     	; 0x1542 <vfscanf+0xec>
    151c:	f6 01       	movw	r30, r12
    151e:	0b c0       	rjmp	.+22     	; 0x1536 <vfscanf+0xe0>
    1520:	f6 01       	movw	r30, r12
    1522:	f3 fc       	sbrc	r15, 3
    1524:	65 91       	lpm	r22, Z+
    1526:	f3 fe       	sbrs	r15, 3
    1528:	61 91       	ld	r22, Z+
    152a:	68 36       	cpi	r22, 0x68	; 104
    152c:	19 f0       	breq	.+6      	; 0x1534 <vfscanf+0xde>
    152e:	6f 01       	movw	r12, r30
    1530:	16 2f       	mov	r17, r22
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <vfscanf+0xec>
    1534:	08 60       	ori	r16, 0x08	; 8
    1536:	04 60       	ori	r16, 0x04	; 4
    1538:	f3 fc       	sbrc	r15, 3
    153a:	15 91       	lpm	r17, Z+
    153c:	f3 fe       	sbrs	r15, 3
    153e:	11 91       	ld	r17, Z+
    1540:	6f 01       	movw	r12, r30
    1542:	11 23       	and	r17, r17
    1544:	09 f4       	brne	.+2      	; 0x1548 <vfscanf+0xf2>
    1546:	98 c0       	rjmp	.+304    	; 0x1678 <vfscanf+0x222>
    1548:	80 ef       	ldi	r24, 0xF0	; 240
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	61 2f       	mov	r22, r17
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	0e 94 56 0b 	call	0x16ac	; 0x16ac <strchr_P>
    1554:	89 2b       	or	r24, r25
    1556:	09 f4       	brne	.+2      	; 0x155a <vfscanf+0x104>
    1558:	8f c0       	rjmp	.+286    	; 0x1678 <vfscanf+0x222>
    155a:	80 2f       	mov	r24, r16
    155c:	00 ff       	sbrs	r16, 0
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <vfscanf+0x110>
    1560:	ee 24       	eor	r14, r14
    1562:	ff 24       	eor	r15, r15
    1564:	07 c0       	rjmp	.+14     	; 0x1574 <vfscanf+0x11e>
    1566:	f3 01       	movw	r30, r6
    1568:	e0 80       	ld	r14, Z
    156a:	f1 80       	ldd	r15, Z+1	; 0x01
    156c:	22 e0       	ldi	r18, 0x02	; 2
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	62 0e       	add	r6, r18
    1572:	73 1e       	adc	r7, r19
    1574:	1e 36       	cpi	r17, 0x6E	; 110
    1576:	51 f4       	brne	.+20     	; 0x158c <vfscanf+0x136>
    1578:	f5 01       	movw	r30, r10
    157a:	46 81       	ldd	r20, Z+6	; 0x06
    157c:	57 81       	ldd	r21, Z+7	; 0x07
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	c7 01       	movw	r24, r14
    1584:	20 2f       	mov	r18, r16
    1586:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <putval>
    158a:	65 c0       	rjmp	.+202    	; 0x1656 <vfscanf+0x200>
    158c:	13 36       	cpi	r17, 0x63	; 99
    158e:	91 f4       	brne	.+36     	; 0x15b4 <vfscanf+0x15e>
    1590:	81 fd       	sbrc	r24, 1
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <vfscanf+0x142>
    1594:	99 24       	eor	r9, r9
    1596:	93 94       	inc	r9
    1598:	c5 01       	movw	r24, r10
    159a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    159e:	97 fd       	sbrc	r25, 7
    15a0:	66 c0       	rjmp	.+204    	; 0x166e <vfscanf+0x218>
    15a2:	e1 14       	cp	r14, r1
    15a4:	f1 04       	cpc	r15, r1
    15a6:	19 f0       	breq	.+6      	; 0x15ae <vfscanf+0x158>
    15a8:	f7 01       	movw	r30, r14
    15aa:	81 93       	st	Z+, r24
    15ac:	7f 01       	movw	r14, r30
    15ae:	9a 94       	dec	r9
    15b0:	99 f7       	brne	.-26     	; 0x1598 <vfscanf+0x142>
    15b2:	4f c0       	rjmp	.+158    	; 0x1652 <vfscanf+0x1fc>
    15b4:	1b 35       	cpi	r17, 0x5B	; 91
    15b6:	59 f4       	brne	.+22     	; 0x15ce <vfscanf+0x178>
    15b8:	c5 01       	movw	r24, r10
    15ba:	69 2d       	mov	r22, r9
    15bc:	a7 01       	movw	r20, r14
    15be:	96 01       	movw	r18, r12
    15c0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <conv_brk>
    15c4:	6c 01       	movw	r12, r24
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	09 f0       	breq	.+2      	; 0x15cc <vfscanf+0x176>
    15ca:	43 c0       	rjmp	.+134    	; 0x1652 <vfscanf+0x1fc>
    15cc:	3d c0       	rjmp	.+122    	; 0x1648 <vfscanf+0x1f2>
    15ce:	c5 01       	movw	r24, r10
    15d0:	0e 94 b6 08 	call	0x116c	; 0x116c <skip_spaces>
    15d4:	97 fd       	sbrc	r25, 7
    15d6:	4b c0       	rjmp	.+150    	; 0x166e <vfscanf+0x218>
    15d8:	1f 36       	cpi	r17, 0x6F	; 111
    15da:	59 f1       	breq	.+86     	; 0x1632 <vfscanf+0x1dc>
    15dc:	10 37       	cpi	r17, 0x70	; 112
    15de:	28 f4       	brcc	.+10     	; 0x15ea <vfscanf+0x194>
    15e0:	14 36       	cpi	r17, 0x64	; 100
    15e2:	29 f1       	breq	.+74     	; 0x162e <vfscanf+0x1d8>
    15e4:	19 36       	cpi	r17, 0x69	; 105
    15e6:	39 f5       	brne	.+78     	; 0x1636 <vfscanf+0x1e0>
    15e8:	27 c0       	rjmp	.+78     	; 0x1638 <vfscanf+0x1e2>
    15ea:	13 37       	cpi	r17, 0x73	; 115
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <vfscanf+0x19e>
    15ee:	15 37       	cpi	r17, 0x75	; 117
    15f0:	11 f5       	brne	.+68     	; 0x1636 <vfscanf+0x1e0>
    15f2:	1d c0       	rjmp	.+58     	; 0x162e <vfscanf+0x1d8>
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fgetc>
    15fa:	ec 01       	movw	r28, r24
    15fc:	97 fd       	sbrc	r25, 7
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <vfscanf+0x1cc>
    1600:	0e 94 4e 0b 	call	0x169c	; 0x169c <isspace>
    1604:	89 2b       	or	r24, r25
    1606:	29 f0       	breq	.+10     	; 0x1612 <vfscanf+0x1bc>
    1608:	ce 01       	movw	r24, r28
    160a:	b5 01       	movw	r22, r10
    160c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ungetc>
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vfscanf+0x1cc>
    1612:	e1 14       	cp	r14, r1
    1614:	f1 04       	cpc	r15, r1
    1616:	19 f0       	breq	.+6      	; 0x161e <vfscanf+0x1c8>
    1618:	f7 01       	movw	r30, r14
    161a:	c1 93       	st	Z+, r28
    161c:	7f 01       	movw	r14, r30
    161e:	9a 94       	dec	r9
    1620:	49 f7       	brne	.-46     	; 0x15f4 <vfscanf+0x19e>
    1622:	e1 14       	cp	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	a9 f0       	breq	.+42     	; 0x1652 <vfscanf+0x1fc>
    1628:	f7 01       	movw	r30, r14
    162a:	10 82       	st	Z, r1
    162c:	12 c0       	rjmp	.+36     	; 0x1652 <vfscanf+0x1fc>
    162e:	00 62       	ori	r16, 0x20	; 32
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <vfscanf+0x1e2>
    1632:	00 61       	ori	r16, 0x10	; 16
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <vfscanf+0x1e2>
    1636:	00 64       	ori	r16, 0x40	; 64
    1638:	c5 01       	movw	r24, r10
    163a:	69 2d       	mov	r22, r9
    163c:	a7 01       	movw	r20, r14
    163e:	20 2f       	mov	r18, r16
    1640:	0e 94 cf 08 	call	0x119e	; 0x119e <conv_int>
    1644:	88 23       	and	r24, r24
    1646:	29 f4       	brne	.+10     	; 0x1652 <vfscanf+0x1fc>
    1648:	f5 01       	movw	r30, r10
    164a:	83 81       	ldd	r24, Z+3	; 0x03
    164c:	80 73       	andi	r24, 0x30	; 48
    164e:	79 f4       	brne	.+30     	; 0x166e <vfscanf+0x218>
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <vfscanf+0x222>
    1652:	00 ff       	sbrs	r16, 0
    1654:	83 94       	inc	r8
    1656:	f5 01       	movw	r30, r10
    1658:	f3 80       	ldd	r15, Z+3	; 0x03
    165a:	f6 01       	movw	r30, r12
    165c:	f3 fc       	sbrc	r15, 3
    165e:	15 91       	lpm	r17, Z+
    1660:	f3 fe       	sbrs	r15, 3
    1662:	11 91       	ld	r17, Z+
    1664:	6f 01       	movw	r12, r30
    1666:	11 23       	and	r17, r17
    1668:	09 f0       	breq	.+2      	; 0x166c <vfscanf+0x216>
    166a:	0b cf       	rjmp	.-490    	; 0x1482 <vfscanf+0x2c>
    166c:	05 c0       	rjmp	.+10     	; 0x1678 <vfscanf+0x222>
    166e:	88 20       	and	r8, r8
    1670:	19 f4       	brne	.+6      	; 0x1678 <vfscanf+0x222>
    1672:	2f ef       	ldi	r18, 0xFF	; 255
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfscanf+0x226>
    1678:	28 2d       	mov	r18, r8
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	c9 01       	movw	r24, r18
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	08 95       	ret

0000169c <isspace>:
    169c:	91 11       	cpse	r25, r1
    169e:	0d c1       	rjmp	.+538    	; 0x18ba <__ctype_isfalse>
    16a0:	80 32       	cpi	r24, 0x20	; 32
    16a2:	19 f0       	breq	.+6      	; 0x16aa <isspace+0xe>
    16a4:	89 50       	subi	r24, 0x09	; 9
    16a6:	85 50       	subi	r24, 0x05	; 5
    16a8:	d0 f7       	brcc	.-12     	; 0x169e <isspace+0x2>
    16aa:	08 95       	ret

000016ac <strchr_P>:
    16ac:	fc 01       	movw	r30, r24
    16ae:	05 90       	lpm	r0, Z+
    16b0:	06 16       	cp	r0, r22
    16b2:	21 f0       	breq	.+8      	; 0x16bc <strchr_P+0x10>
    16b4:	00 20       	and	r0, r0
    16b6:	d9 f7       	brne	.-10     	; 0x16ae <strchr_P+0x2>
    16b8:	c0 01       	movw	r24, r0
    16ba:	08 95       	ret
    16bc:	31 97       	sbiw	r30, 0x01	; 1
    16be:	cf 01       	movw	r24, r30
    16c0:	08 95       	ret

000016c2 <strnlen_P>:
    16c2:	fc 01       	movw	r30, r24
    16c4:	05 90       	lpm	r0, Z+
    16c6:	61 50       	subi	r22, 0x01	; 1
    16c8:	70 40       	sbci	r23, 0x00	; 0
    16ca:	01 10       	cpse	r0, r1
    16cc:	d8 f7       	brcc	.-10     	; 0x16c4 <strnlen_P+0x2>
    16ce:	80 95       	com	r24
    16d0:	90 95       	com	r25
    16d2:	8e 0f       	add	r24, r30
    16d4:	9f 1f       	adc	r25, r31
    16d6:	08 95       	ret

000016d8 <strnlen>:
    16d8:	fc 01       	movw	r30, r24
    16da:	61 50       	subi	r22, 0x01	; 1
    16dc:	70 40       	sbci	r23, 0x00	; 0
    16de:	01 90       	ld	r0, Z+
    16e0:	01 10       	cpse	r0, r1
    16e2:	d8 f7       	brcc	.-10     	; 0x16da <strnlen+0x2>
    16e4:	80 95       	com	r24
    16e6:	90 95       	com	r25
    16e8:	8e 0f       	add	r24, r30
    16ea:	9f 1f       	adc	r25, r31
    16ec:	08 95       	ret

000016ee <fgetc>:
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
    16f4:	4b 81       	ldd	r20, Y+3	; 0x03
    16f6:	40 ff       	sbrs	r20, 0
    16f8:	1a c0       	rjmp	.+52     	; 0x172e <fgetc+0x40>
    16fa:	46 ff       	sbrs	r20, 6
    16fc:	0a c0       	rjmp	.+20     	; 0x1712 <fgetc+0x24>
    16fe:	4f 7b       	andi	r20, 0xBF	; 191
    1700:	4b 83       	std	Y+3, r20	; 0x03
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	9f 81       	ldd	r25, Y+7	; 0x07
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	9f 83       	std	Y+7, r25	; 0x07
    170a:	8e 83       	std	Y+6, r24	; 0x06
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	2b c0       	rjmp	.+86     	; 0x1768 <fgetc+0x7a>
    1712:	42 ff       	sbrs	r20, 2
    1714:	13 c0       	rjmp	.+38     	; 0x173c <fgetc+0x4e>
    1716:	e8 81       	ld	r30, Y
    1718:	f9 81       	ldd	r31, Y+1	; 0x01
    171a:	80 81       	ld	r24, Z
    171c:	28 2f       	mov	r18, r24
    171e:	33 27       	eor	r19, r19
    1720:	27 fd       	sbrc	r18, 7
    1722:	30 95       	com	r19
    1724:	21 15       	cp	r18, r1
    1726:	31 05       	cpc	r19, r1
    1728:	29 f4       	brne	.+10     	; 0x1734 <fgetc+0x46>
    172a:	40 62       	ori	r20, 0x20	; 32
    172c:	4b 83       	std	Y+3, r20	; 0x03
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	1b c0       	rjmp	.+54     	; 0x176a <fgetc+0x7c>
    1734:	31 96       	adiw	r30, 0x01	; 1
    1736:	f9 83       	std	Y+1, r31	; 0x01
    1738:	e8 83       	st	Y, r30
    173a:	11 c0       	rjmp	.+34     	; 0x175e <fgetc+0x70>
    173c:	ea 85       	ldd	r30, Y+10	; 0x0a
    173e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1740:	ce 01       	movw	r24, r28
    1742:	09 95       	icall
    1744:	9c 01       	movw	r18, r24
    1746:	97 ff       	sbrs	r25, 7
    1748:	0a c0       	rjmp	.+20     	; 0x175e <fgetc+0x70>
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	2f 5f       	subi	r18, 0xFF	; 255
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	11 f0       	breq	.+4      	; 0x1756 <fgetc+0x68>
    1752:	80 e2       	ldi	r24, 0x20	; 32
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <fgetc+0x6a>
    1756:	80 e1       	ldi	r24, 0x10	; 16
    1758:	89 2b       	or	r24, r25
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	e8 cf       	rjmp	.-48     	; 0x172e <fgetc+0x40>
    175e:	8e 81       	ldd	r24, Y+6	; 0x06
    1760:	9f 81       	ldd	r25, Y+7	; 0x07
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	9f 83       	std	Y+7, r25	; 0x07
    1766:	8e 83       	std	Y+6, r24	; 0x06
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	c9 01       	movw	r24, r18
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <fputc>:
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	8c 01       	movw	r16, r24
    177c:	eb 01       	movw	r28, r22
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	81 ff       	sbrs	r24, 1
    1782:	1b c0       	rjmp	.+54     	; 0x17ba <fputc+0x48>
    1784:	82 ff       	sbrs	r24, 2
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <fputc+0x30>
    1788:	2e 81       	ldd	r18, Y+6	; 0x06
    178a:	3f 81       	ldd	r19, Y+7	; 0x07
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
    178e:	9d 81       	ldd	r25, Y+5	; 0x05
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	64 f4       	brge	.+24     	; 0x17ae <fputc+0x3c>
    1796:	e8 81       	ld	r30, Y
    1798:	f9 81       	ldd	r31, Y+1	; 0x01
    179a:	01 93       	st	Z+, r16
    179c:	f9 83       	std	Y+1, r31	; 0x01
    179e:	e8 83       	st	Y, r30
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <fputc+0x3c>
    17a2:	e8 85       	ldd	r30, Y+8	; 0x08
    17a4:	f9 85       	ldd	r31, Y+9	; 0x09
    17a6:	80 2f       	mov	r24, r16
    17a8:	09 95       	icall
    17aa:	89 2b       	or	r24, r25
    17ac:	31 f4       	brne	.+12     	; 0x17ba <fputc+0x48>
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	9f 81       	ldd	r25, Y+7	; 0x07
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	9f 83       	std	Y+7, r25	; 0x07
    17b6:	8e 83       	std	Y+6, r24	; 0x06
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <fputc+0x4c>
    17ba:	0f ef       	ldi	r16, 0xFF	; 255
    17bc:	1f ef       	ldi	r17, 0xFF	; 255
    17be:	c8 01       	movw	r24, r16
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <ungetc>:
    17ca:	9c 01       	movw	r18, r24
    17cc:	fb 01       	movw	r30, r22
    17ce:	83 81       	ldd	r24, Z+3	; 0x03
    17d0:	80 ff       	sbrs	r24, 0
    17d2:	11 c0       	rjmp	.+34     	; 0x17f6 <ungetc+0x2c>
    17d4:	86 fd       	sbrc	r24, 6
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <ungetc+0x2c>
    17d8:	9f ef       	ldi	r25, 0xFF	; 255
    17da:	2f 3f       	cpi	r18, 0xFF	; 255
    17dc:	39 07       	cpc	r19, r25
    17de:	59 f0       	breq	.+22     	; 0x17f6 <ungetc+0x2c>
    17e0:	22 83       	std	Z+2, r18	; 0x02
    17e2:	80 64       	ori	r24, 0x40	; 64
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	83 83       	std	Z+3, r24	; 0x03
    17e8:	86 81       	ldd	r24, Z+6	; 0x06
    17ea:	97 81       	ldd	r25, Z+7	; 0x07
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	97 83       	std	Z+7, r25	; 0x07
    17f0:	86 83       	std	Z+6, r24	; 0x06
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <ungetc+0x30>
    17f6:	2f ef       	ldi	r18, 0xFF	; 255
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	c9 01       	movw	r24, r18
    17fc:	08 95       	ret

000017fe <__ultoa_invert>:
    17fe:	fa 01       	movw	r30, r20
    1800:	aa 27       	eor	r26, r26
    1802:	28 30       	cpi	r18, 0x08	; 8
    1804:	51 f1       	breq	.+84     	; 0x185a <__ultoa_invert+0x5c>
    1806:	20 31       	cpi	r18, 0x10	; 16
    1808:	81 f1       	breq	.+96     	; 0x186a <__ultoa_invert+0x6c>
    180a:	e8 94       	clt
    180c:	6f 93       	push	r22
    180e:	6e 7f       	andi	r22, 0xFE	; 254
    1810:	6e 5f       	subi	r22, 0xFE	; 254
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	af 4f       	sbci	r26, 0xFF	; 255
    181a:	b1 e0       	ldi	r27, 0x01	; 1
    181c:	3e d0       	rcall	.+124    	; 0x189a <__ultoa_invert+0x9c>
    181e:	b4 e0       	ldi	r27, 0x04	; 4
    1820:	3c d0       	rcall	.+120    	; 0x189a <__ultoa_invert+0x9c>
    1822:	67 0f       	add	r22, r23
    1824:	78 1f       	adc	r23, r24
    1826:	89 1f       	adc	r24, r25
    1828:	9a 1f       	adc	r25, r26
    182a:	a1 1d       	adc	r26, r1
    182c:	68 0f       	add	r22, r24
    182e:	79 1f       	adc	r23, r25
    1830:	8a 1f       	adc	r24, r26
    1832:	91 1d       	adc	r25, r1
    1834:	a1 1d       	adc	r26, r1
    1836:	6a 0f       	add	r22, r26
    1838:	71 1d       	adc	r23, r1
    183a:	81 1d       	adc	r24, r1
    183c:	91 1d       	adc	r25, r1
    183e:	a1 1d       	adc	r26, r1
    1840:	20 d0       	rcall	.+64     	; 0x1882 <__ultoa_invert+0x84>
    1842:	09 f4       	brne	.+2      	; 0x1846 <__ultoa_invert+0x48>
    1844:	68 94       	set
    1846:	3f 91       	pop	r19
    1848:	2a e0       	ldi	r18, 0x0A	; 10
    184a:	26 9f       	mul	r18, r22
    184c:	11 24       	eor	r1, r1
    184e:	30 19       	sub	r19, r0
    1850:	30 5d       	subi	r19, 0xD0	; 208
    1852:	31 93       	st	Z+, r19
    1854:	de f6       	brtc	.-74     	; 0x180c <__ultoa_invert+0xe>
    1856:	cf 01       	movw	r24, r30
    1858:	08 95       	ret
    185a:	46 2f       	mov	r20, r22
    185c:	47 70       	andi	r20, 0x07	; 7
    185e:	40 5d       	subi	r20, 0xD0	; 208
    1860:	41 93       	st	Z+, r20
    1862:	b3 e0       	ldi	r27, 0x03	; 3
    1864:	0f d0       	rcall	.+30     	; 0x1884 <__ultoa_invert+0x86>
    1866:	c9 f7       	brne	.-14     	; 0x185a <__ultoa_invert+0x5c>
    1868:	f6 cf       	rjmp	.-20     	; 0x1856 <__ultoa_invert+0x58>
    186a:	46 2f       	mov	r20, r22
    186c:	4f 70       	andi	r20, 0x0F	; 15
    186e:	40 5d       	subi	r20, 0xD0	; 208
    1870:	4a 33       	cpi	r20, 0x3A	; 58
    1872:	18 f0       	brcs	.+6      	; 0x187a <__ultoa_invert+0x7c>
    1874:	49 5d       	subi	r20, 0xD9	; 217
    1876:	31 fd       	sbrc	r19, 1
    1878:	40 52       	subi	r20, 0x20	; 32
    187a:	41 93       	st	Z+, r20
    187c:	02 d0       	rcall	.+4      	; 0x1882 <__ultoa_invert+0x84>
    187e:	a9 f7       	brne	.-22     	; 0x186a <__ultoa_invert+0x6c>
    1880:	ea cf       	rjmp	.-44     	; 0x1856 <__ultoa_invert+0x58>
    1882:	b4 e0       	ldi	r27, 0x04	; 4
    1884:	a6 95       	lsr	r26
    1886:	97 95       	ror	r25
    1888:	87 95       	ror	r24
    188a:	77 95       	ror	r23
    188c:	67 95       	ror	r22
    188e:	ba 95       	dec	r27
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__ultoa_invert+0x86>
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	61 05       	cpc	r22, r1
    1896:	71 05       	cpc	r23, r1
    1898:	08 95       	ret
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	0a 2e       	mov	r0, r26
    18a0:	06 94       	lsr	r0
    18a2:	57 95       	ror	r21
    18a4:	47 95       	ror	r20
    18a6:	37 95       	ror	r19
    18a8:	27 95       	ror	r18
    18aa:	ba 95       	dec	r27
    18ac:	c9 f7       	brne	.-14     	; 0x18a0 <__ultoa_invert+0xa2>
    18ae:	62 0f       	add	r22, r18
    18b0:	73 1f       	adc	r23, r19
    18b2:	84 1f       	adc	r24, r20
    18b4:	95 1f       	adc	r25, r21
    18b6:	a0 1d       	adc	r26, r0
    18b8:	08 95       	ret

000018ba <__ctype_isfalse>:
    18ba:	99 27       	eor	r25, r25
    18bc:	88 27       	eor	r24, r24

000018be <__ctype_istrue>:
    18be:	08 95       	ret

000018c0 <_exit>:
    18c0:	f8 94       	cli

000018c2 <__stop_program>:
    18c2:	ff cf       	rjmp	.-2      	; 0x18c2 <__stop_program>
