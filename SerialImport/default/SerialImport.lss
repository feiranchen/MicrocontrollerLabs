
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001742  000017d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800164  00800164  0000183a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d0  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e56  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048b  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000990  00000000  00000000  00002e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  000039ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000076f  00000000  00000000  00003d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      68:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      70:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      7c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      80:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      84:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

000000d3 <LCD_dur_syllable>:
      d3:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

000000e4 <LCD_rpt_interval>:
      e4:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

000000f4 <LCD_playing>:
      f4:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000103 <LCD_line_clear>:
     103:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000115 <LcdCustomChar>:
     115:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     125:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     135:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     145:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000155 <__c.1988>:
     155:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d0 e4       	ldi	r29, 0x40	; 64
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e2 e4       	ldi	r30, 0x42	; 66
     176:	f7 e1       	ldi	r31, 0x17	; 23
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0b bf       	out	0x3b, r16	; 59
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
     17e:	07 90       	elpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	a4 36       	cpi	r26, 0x64	; 100
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	a4 e6       	ldi	r26, 0x64	; 100
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a6 3f       	cpi	r26, 0xF6	; 246
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 39 01 	call	0x272	; 0x272 <main>
     19c:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <port_init>:
int args[3] ;

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     1a4:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     1a6:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     1ac:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     1ae:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     1b0:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     1b2:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     1b4:	5a 9a       	sbi	0x0b, 2	; 11
end
     1b6:	08 95       	ret

000001b8 <get_User_Input>:
	CopyStringtoLCD(LCD_initialize, 0, 0);
	LCD_char_count = 0;
end

void get_User_Input(void* args) 
begin
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	28 97       	sbiw	r28, 0x08	; 8
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	c9 2e       	mov	r12, r25
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	d9 2e       	mov	r13, r25
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	e8 2e       	mov	r14, r24
     1e4:	f1 2c       	mov	r15, r1
     1e6:	ec 0e       	add	r14, r28
     1e8:	fd 1e       	adc	r15, r29
     1ea:	8e 01       	movw	r16, r28
     1ec:	0f 5f       	subi	r16, 0xFF	; 255
     1ee:	1f 4f       	sbci	r17, 0xFF	; 255
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     1f0:	60 91 f2 01 	lds	r22, 0x01F2
     1f4:	70 91 f3 01 	lds	r23, 0x01F3
     1f8:	8e e3       	ldi	r24, 0x3E	; 62
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
     200:	8d b7       	in	r24, 0x3d	; 61
     202:	9e b7       	in	r25, 0x3e	; 62
     204:	08 97       	sbiw	r24, 0x08	; 8
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	9e bf       	out	0x3e, r25	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	8d bf       	out	0x3d, r24	; 61
     210:	ed b7       	in	r30, 0x3d	; 61
     212:	fe b7       	in	r31, 0x3e	; 62
     214:	31 96       	adiw	r30, 0x01	; 1
     216:	80 91 f0 01 	lds	r24, 0x01F0
     21a:	90 91 f1 01 	lds	r25, 0x01F1
     21e:	ad b7       	in	r26, 0x3d	; 61
     220:	be b7       	in	r27, 0x3e	; 62
     222:	12 96       	adiw	r26, 0x02	; 2
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	11 97       	sbiw	r26, 0x01	; 1
     22a:	d3 82       	std	Z+3, r13	; 0x03
     22c:	c2 82       	std	Z+2, r12	; 0x02
     22e:	f5 82       	std	Z+5, r15	; 0x05
     230:	e4 82       	std	Z+4, r14	; 0x04
     232:	17 83       	std	Z+7, r17	; 0x07
     234:	06 83       	std	Z+6, r16	; 0x06
     236:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <fscanf>
     23a:	8d b7       	in	r24, 0x3d	; 61
     23c:	9e b7       	in	r25, 0x3e	; 62
     23e:	08 96       	adiw	r24, 0x08	; 8
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	9e bf       	out	0x3e, r25	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	8d bf       	out	0x3d, r24	; 61
     24a:	d2 cf       	rjmp	.-92     	; 0x1f0 <get_User_Input+0x38>

0000024c <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     24c:	0e 94 42 03 	call	0x684	; 0x684 <LCDinit>
	LCDcursorOFF();
     250:	0e 94 aa 03 	call	0x754	; 0x754 <LCDcursorOFF>
	LCDclr();	//clear the display
     254:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCDclr>
	LCDGotoXY(0,0);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     260:	8c e8       	ldi	r24, 0x8C	; 140
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	0e 94 07 03 	call	0x60e	; 0x60e <CopyStringtoLCD>
	LCD_char_count = 0;
     26c:	10 92 cd 01 	sts	0x01CD, r1
end
     270:	08 95       	ret

00000272 <main>:




// --- Main Program ----------------------------------
int main(void) {
     272:	2f 92       	push	r2
     274:	3f 92       	push	r3
     276:	4f 92       	push	r4
     278:	5f 92       	push	r5
     27a:	6f 92       	push	r6
     27c:	7f 92       	push	r7
     27e:	8f 92       	push	r8
     280:	9f 92       	push	r9
     282:	af 92       	push	r10
     284:	bf 92       	push	r11
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	69 97       	sbiw	r28, 0x19	; 25
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
  int i =0;
  int x=-2 ,y=-2,d=-2;// container for parsed ints
     2a6:	8e ef       	ldi	r24, 0xFE	; 254
     2a8:	9f ef       	ldi	r25, 0xFF	; 255
     2aa:	9a 83       	std	Y+2, r25	; 0x02
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	9c 83       	std	Y+4, r25	; 0x04
     2b0:	8b 83       	std	Y+3, r24	; 0x03
     2b2:	9e 83       	std	Y+6, r25	; 0x06
     2b4:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     2b6:	18 86       	std	Y+8, r1	; 0x08
     2b8:	1f 82       	std	Y+7, r1	; 0x07
  char* file;
  LCD_init();
     2ba:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     2be:	0e 94 12 04 	call	0x824	; 0x824 <uart_init>
  stdout = stdin = stderr = &uart_str;
     2c2:	6d e4       	ldi	r22, 0x4D	; 77
     2c4:	71 e0       	ldi	r23, 0x01	; 1
     2c6:	70 93 f5 01 	sts	0x01F5, r23
     2ca:	60 93 f4 01 	sts	0x01F4, r22
     2ce:	70 93 f1 01 	sts	0x01F1, r23
     2d2:	60 93 f0 01 	sts	0x01F0, r22
     2d6:	70 93 f3 01 	sts	0x01F3, r23
     2da:	60 93 f2 01 	sts	0x01F2, r22

  // Allocate memory for the buffer	
  fprintf(stdout,"File Length\n\r");
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <main+0x76>
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <main+0x78>
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <main+0x7a>
     2ec:	ed b7       	in	r30, 0x3d	; 61
     2ee:	fe b7       	in	r31, 0x3e	; 62
     2f0:	31 96       	adiw	r30, 0x01	; 1
     2f2:	80 91 f0 01 	lds	r24, 0x01F0
     2f6:	90 91 f1 01 	lds	r25, 0x01F1
     2fa:	ad b7       	in	r26, 0x3d	; 61
     2fc:	be b7       	in	r27, 0x3e	; 62
     2fe:	12 96       	adiw	r26, 0x02	; 2
     300:	9c 93       	st	X, r25
     302:	8e 93       	st	-X, r24
     304:	11 97       	sbiw	r26, 0x01	; 1
     306:	84 e1       	ldi	r24, 0x14	; 20
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	93 83       	std	Z+3, r25	; 0x03
     30c:	82 83       	std	Z+2, r24	; 0x02
     30e:	ce 01       	movw	r24, r28
     310:	07 96       	adiw	r24, 0x07	; 7
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	84 83       	std	Z+4, r24	; 0x04
     316:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     31a:	ed b7       	in	r30, 0x3d	; 61
     31c:	fe b7       	in	r31, 0x3e	; 62
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	0f ed       	ldi	r16, 0xDF	; 223
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	ad b7       	in	r26, 0x3d	; 61
     326:	be b7       	in	r27, 0x3e	; 62
     328:	12 96       	adiw	r26, 0x02	; 2
     32a:	1c 93       	st	X, r17
     32c:	0e 93       	st	-X, r16
     32e:	11 97       	sbiw	r26, 0x01	; 1
     330:	88 e1       	ldi	r24, 0x18	; 24
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	93 83       	std	Z+3, r25	; 0x03
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	8f 81       	ldd	r24, Y+7	; 0x07
     33a:	98 85       	ldd	r25, Y+8	; 0x08
     33c:	95 83       	std	Z+5, r25	; 0x05
     33e:	84 83       	std	Z+4, r24	; 0x04
     340:	0e 94 8d 05 	call	0xb1a	; 0xb1a <sprintf>

	LCDGotoXY(0, 0);
     344:	6d b7       	in	r22, 0x3d	; 61
     346:	7e b7       	in	r23, 0x3e	; 62
     348:	6a 5f       	subi	r22, 0xFA	; 250
     34a:	7f 4f       	sbci	r23, 0xFF	; 255
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	7e bf       	out	0x3e, r23	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	6d bf       	out	0x3d, r22	; 61
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     35e:	f8 01       	movw	r30, r16
     360:	01 90       	ld	r0, Z+
     362:	00 20       	and	r0, r0
     364:	e9 f7       	brne	.-6      	; 0x360 <main+0xee>
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	e0 1b       	sub	r30, r16
     36a:	f1 0b       	sbc	r31, r17
     36c:	c8 01       	movw	r24, r16
     36e:	6e 2f       	mov	r22, r30
     370:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDstring>
     374:	ee 24       	eor	r14, r14
     376:	ff 24       	eor	r15, r15

for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     378:	69 e0       	ldi	r22, 0x09	; 9
     37a:	c6 2e       	mov	r12, r22
     37c:	d1 2c       	mov	r13, r1
     37e:	cc 0e       	add	r12, r28
     380:	dd 1e       	adc	r13, r29
	sscanf(buffer, "X%dY%dD%d*", &x,&y,&d);
     382:	53 e0       	ldi	r21, 0x03	; 3
     384:	25 2e       	mov	r2, r21
     386:	31 2c       	mov	r3, r1
     388:	2c 0e       	add	r2, r28
     38a:	3d 1e       	adc	r3, r29
     38c:	45 e0       	ldi	r20, 0x05	; 5
     38e:	44 2e       	mov	r4, r20
     390:	51 2c       	mov	r5, r1
     392:	4c 0e       	add	r4, r28
     394:	5d 1e       	adc	r5, r29

    sprintf(lcd_buffer2,"%-i  ", i++);
     396:	58 01       	movw	r10, r16
     398:	3d e3       	ldi	r19, 0x3D	; 61
     39a:	63 2e       	mov	r6, r19
     39c:	31 e0       	ldi	r19, 0x01	; 1
     39e:	73 2e       	mov	r7, r19
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>0 && y>0 && d>0){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     3a0:	0c eb       	ldi	r16, 0xBC	; 188
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	23 e4       	ldi	r18, 0x43	; 67
     3a6:	82 2e       	mov	r8, r18
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	92 2e       	mov	r9, r18
     3ac:	a5 c0       	rjmp	.+330    	; 0x4f8 <main+0x286>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     3ae:	60 91 f2 01 	lds	r22, 0x01F2
     3b2:	70 91 f3 01 	lds	r23, 0x01F3
     3b6:	8a e2       	ldi	r24, 0x2A	; 42
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 51 05 	call	0xaa2	; 0xaa2 <fputs>
	fscanf(stdin, "%s", buffer) ;
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <main+0x14e>
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <main+0x150>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <main+0x152>
     3c4:	ed b7       	in	r30, 0x3d	; 61
     3c6:	fe b7       	in	r31, 0x3e	; 62
     3c8:	31 96       	adiw	r30, 0x01	; 1
     3ca:	80 91 f0 01 	lds	r24, 0x01F0
     3ce:	90 91 f1 01 	lds	r25, 0x01F1
     3d2:	ad b7       	in	r26, 0x3d	; 61
     3d4:	be b7       	in	r27, 0x3e	; 62
     3d6:	12 96       	adiw	r26, 0x02	; 2
     3d8:	9c 93       	st	X, r25
     3da:	8e 93       	st	-X, r24
     3dc:	11 97       	sbiw	r26, 0x01	; 1
     3de:	6f e2       	ldi	r22, 0x2F	; 47
     3e0:	71 e0       	ldi	r23, 0x01	; 1
     3e2:	73 83       	std	Z+3, r23	; 0x03
     3e4:	62 83       	std	Z+2, r22	; 0x02
     3e6:	d5 82       	std	Z+5, r13	; 0x05
     3e8:	c4 82       	std	Z+4, r12	; 0x04
     3ea:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <fscanf>
	sscanf(buffer, "X%dY%dD%d*", &x,&y,&d);
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <main+0x17e>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <main+0x180>
     3f2:	ed b7       	in	r30, 0x3d	; 61
     3f4:	fe b7       	in	r31, 0x3e	; 62
     3f6:	31 96       	adiw	r30, 0x01	; 1
     3f8:	ad b7       	in	r26, 0x3d	; 61
     3fa:	be b7       	in	r27, 0x3e	; 62
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	dc 92       	st	X, r13
     400:	ce 92       	st	-X, r12
     402:	11 97       	sbiw	r26, 0x01	; 1
     404:	62 e3       	ldi	r22, 0x32	; 50
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	73 83       	std	Z+3, r23	; 0x03
     40a:	62 83       	std	Z+2, r22	; 0x02
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	8c 0f       	add	r24, r28
     412:	9d 1f       	adc	r25, r29
     414:	95 83       	std	Z+5, r25	; 0x05
     416:	84 83       	std	Z+4, r24	; 0x04
     418:	37 82       	std	Z+7, r3	; 0x07
     41a:	26 82       	std	Z+6, r2	; 0x06
     41c:	51 86       	std	Z+9, r5	; 0x09
     41e:	40 86       	std	Z+8, r4	; 0x08
     420:	0e 94 be 05 	call	0xb7c	; 0xb7c <sscanf>

    sprintf(lcd_buffer2,"%-i  ", i++);
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	ed b7       	in	r30, 0x3d	; 61
     42e:	fe b7       	in	r31, 0x3e	; 62
     430:	31 96       	adiw	r30, 0x01	; 1
     432:	ad b7       	in	r26, 0x3d	; 61
     434:	be b7       	in	r27, 0x3e	; 62
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	ac 92       	st	X, r10
     43a:	11 97       	sbiw	r26, 0x01	; 1
     43c:	12 96       	adiw	r26, 0x02	; 2
     43e:	bc 92       	st	X, r11
     440:	73 82       	std	Z+3, r7	; 0x03
     442:	62 82       	std	Z+2, r6	; 0x02
     444:	f5 82       	std	Z+5, r15	; 0x05
     446:	e4 82       	std	Z+4, r14	; 0x04
     448:	0e 94 8d 05 	call	0xb1a	; 0xb1a <sprintf>
	LCDGotoXY(10, 0);
     44c:	6d b7       	in	r22, 0x3d	; 61
     44e:	7e b7       	in	r23, 0x3e	; 62
     450:	6a 5f       	subi	r22, 0xFA	; 250
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	7e bf       	out	0x3e, r23	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	6d bf       	out	0x3d, r22	; 61
     45e:	8a e0       	ldi	r24, 0x0A	; 10
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     466:	c5 01       	movw	r24, r10
     468:	62 e0       	ldi	r22, 0x02	; 2
     46a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCDGotoXY>
	LCDstring(buffer,15);
     476:	c6 01       	movw	r24, r12
     478:	6f e0       	ldi	r22, 0x0F	; 15
     47a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDstring>

	//print parsed
	if (x>0 && y>0 && d>0){
     47e:	49 81       	ldd	r20, Y+1	; 0x01
     480:	5a 81       	ldd	r21, Y+2	; 0x02
     482:	14 16       	cp	r1, r20
     484:	15 06       	cpc	r1, r21
     486:	a4 f5       	brge	.+104    	; 0x4f0 <main+0x27e>
     488:	2b 81       	ldd	r18, Y+3	; 0x03
     48a:	3c 81       	ldd	r19, Y+4	; 0x04
     48c:	12 16       	cp	r1, r18
     48e:	13 06       	cpc	r1, r19
     490:	7c f5       	brge	.+94     	; 0x4f0 <main+0x27e>
     492:	8d 81       	ldd	r24, Y+5	; 0x05
     494:	9e 81       	ldd	r25, Y+6	; 0x06
     496:	18 16       	cp	r1, r24
     498:	19 06       	cpc	r1, r25
     49a:	54 f5       	brge	.+84     	; 0x4f0 <main+0x27e>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     49c:	ad b7       	in	r26, 0x3d	; 61
     49e:	be b7       	in	r27, 0x3e	; 62
     4a0:	1a 97       	sbiw	r26, 0x0a	; 10
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	be bf       	out	0x3e, r27	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	ad bf       	out	0x3d, r26	; 61
     4ac:	ed b7       	in	r30, 0x3d	; 61
     4ae:	fe b7       	in	r31, 0x3e	; 62
     4b0:	31 96       	adiw	r30, 0x01	; 1
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	1c 93       	st	X, r17
     4b6:	0e 93       	st	-X, r16
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	93 82       	std	Z+3, r9	; 0x03
     4bc:	82 82       	std	Z+2, r8	; 0x02
     4be:	55 83       	std	Z+5, r21	; 0x05
     4c0:	44 83       	std	Z+4, r20	; 0x04
     4c2:	37 83       	std	Z+7, r19	; 0x07
     4c4:	26 83       	std	Z+6, r18	; 0x06
     4c6:	91 87       	std	Z+9, r25	; 0x09
     4c8:	80 87       	std	Z+8, r24	; 0x08
     4ca:	0e 94 8d 05 	call	0xb1a	; 0xb1a <sprintf>
		LCDGotoXY(0, 0);
     4ce:	6d b7       	in	r22, 0x3d	; 61
     4d0:	7e b7       	in	r23, 0x3e	; 62
     4d2:	66 5f       	subi	r22, 0xF6	; 246
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	7e bf       	out	0x3e, r23	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	6d bf       	out	0x3d, r22	; 61
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     4e8:	c8 01       	movw	r24, r16
     4ea:	6a e0       	ldi	r22, 0x0A	; 10
     4ec:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCDstring>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

for (i=0; i<file_size; i++)
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	e8 0e       	add	r14, r24
     4f6:	f9 1e       	adc	r15, r25
     4f8:	8f 81       	ldd	r24, Y+7	; 0x07
     4fa:	98 85       	ldd	r25, Y+8	; 0x08
     4fc:	e8 16       	cp	r14, r24
     4fe:	f9 06       	cpc	r15, r25
     500:	08 f4       	brcc	.+2      	; 0x504 <main+0x292>
     502:	55 cf       	rjmp	.-342    	; 0x3ae <main+0x13c>
	}
	//_delay_ms(1000);
  end


} // main
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	69 96       	adiw	r28, 0x19	; 25
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	bf 90       	pop	r11
     526:	af 90       	pop	r10
     528:	9f 90       	pop	r9
     52a:	8f 90       	pop	r8
     52c:	7f 90       	pop	r7
     52e:	6f 90       	pop	r6
     530:	5f 90       	pop	r5
     532:	4f 90       	pop	r4
     534:	3f 90       	pop	r3
     536:	2f 90       	pop	r2
     538:	08 95       	ret

0000053a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     53a:	28 2f       	mov	r18, r24
     53c:	20 7f       	andi	r18, 0xF0	; 240
     53e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     540:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     542:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     544:	20 e4       	ldi	r18, 0x40	; 64
     546:	3f e1       	ldi	r19, 0x1F	; 31
     548:	f9 01       	movw	r30, r18
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     54e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     550:	40 98       	cbi	0x08, 0	; 8
     552:	f9 01       	movw	r30, r18
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	44 e0       	ldi	r20, 0x04	; 4
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	4a 95       	dec	r20
     562:	e1 f7       	brne	.-8      	; 0x55c <LCDsendChar+0x22>
     564:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     566:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     568:	42 9a       	sbi	0x08, 2	; 8
     56a:	c9 01       	movw	r24, r18
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     570:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     572:	40 98       	cbi	0x08, 0	; 8
     574:	c9 01       	movw	r24, r18
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     57a:	08 95       	ret

0000057c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     57c:	28 2f       	mov	r18, r24
     57e:	20 7f       	andi	r18, 0xF0	; 240
     580:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     582:	42 9a       	sbi	0x08, 2	; 8
     584:	20 e4       	ldi	r18, 0x40	; 64
     586:	3f e1       	ldi	r19, 0x1F	; 31
     588:	f9 01       	movw	r30, r18
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	f1 f7       	brne	.-4      	; 0x58a <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     58e:	42 98       	cbi	0x08, 2	; 8
     590:	f9 01       	movw	r30, r18
     592:	31 97       	sbiw	r30, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	54 e0       	ldi	r21, 0x04	; 4
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	5a 95       	dec	r21
     5a0:	e1 f7       	brne	.-8      	; 0x59a <LCDsendCommand+0x1e>
     5a2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     5a4:	42 9a       	sbi	0x08, 2	; 8
     5a6:	c9 01       	movw	r24, r18
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     5ac:	42 98       	cbi	0x08, 2	; 8
     5ae:	c9 01       	movw	r24, r18
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     5b4:	08 95       	ret

000005b6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     5bc:	08 95       	ret

000005be <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     5c4:	08 95       	ret

000005c6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     5c6:	0f 93       	push	r16
     5c8:	1f 93       	push	r17
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	49 f0       	breq	.+18     	; 0x5e6 <LCDstring+0x20>
     5d4:	ec 01       	movw	r28, r24
     5d6:	10 e0       	ldi	r17, 0x00	; 0
     5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     5da:	89 91       	ld	r24, Y+
     5dc:	0e 94 9d 02 	call	0x53a	; 0x53a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     5e0:	1f 5f       	subi	r17, 0xFF	; 255
     5e2:	10 17       	cp	r17, r16
     5e4:	d0 f3       	brcs	.-12     	; 0x5da <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	08 95       	ret

000005f0 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     5f0:	62 30       	cpi	r22, 0x02	; 2
     5f2:	31 f0       	breq	.+12     	; 0x600 <LCDGotoXY+0x10>
     5f4:	63 30       	cpi	r22, 0x03	; 3
     5f6:	31 f0       	breq	.+12     	; 0x604 <LCDGotoXY+0x14>
     5f8:	61 30       	cpi	r22, 0x01	; 1
     5fa:	29 f4       	brne	.+10     	; 0x606 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     5fc:	80 5c       	subi	r24, 0xC0	; 192
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     600:	8c 5e       	subi	r24, 0xEC	; 236
     602:	01 c0       	rjmp	.+2      	; 0x606 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     604:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     606:	80 68       	ori	r24, 0x80	; 128
     608:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
	
}
     60c:	08 95       	ret

0000060e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
     616:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     618:	64 2f       	mov	r22, r20
     61a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCDGotoXY>
     61e:	10 e0       	ldi	r17, 0x00	; 0
     620:	03 c0       	rjmp	.+6      	; 0x628 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     622:	0e 94 9d 02 	call	0x53a	; 0x53a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     626:	1f 5f       	subi	r17, 0xFF	; 255
     628:	fe 01       	movw	r30, r28
     62a:	e1 0f       	add	r30, r17
     62c:	f1 1d       	adc	r31, r1
     62e:	84 91       	lpm	r24, Z+
     630:	88 23       	and	r24, r24
     632:	b9 f7       	brne	.-18     	; 0x622 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	7c 01       	movw	r14, r24
     64a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     64c:	11 0f       	add	r17, r17
     64e:	11 0f       	add	r17, r17
     650:	11 0f       	add	r17, r17
     652:	10 64       	ori	r17, 0x40	; 64
     654:	c0 e0       	ldi	r28, 0x00	; 0
     656:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     658:	f7 01       	movw	r30, r14
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     660:	81 2f       	mov	r24, r17
     662:	8c 0f       	add	r24, r28
     664:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
		LCDsendChar(pcc);
     668:	80 2f       	mov	r24, r16
     66a:	0e 94 9d 02 	call	0x53a	; 0x53a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     66e:	21 96       	adiw	r28, 0x01	; 1
     670:	c8 30       	cpi	r28, 0x08	; 8
     672:	d1 05       	cpc	r29, r1
     674:	89 f7       	brne	.-30     	; 0x658 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	08 95       	ret

00000684 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	80 e6       	ldi	r24, 0x60	; 96
     68c:	9a ee       	ldi	r25, 0xEA	; 234
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     692:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     694:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     696:	87 b1       	in	r24, 0x07	; 7
     698:	80 6f       	ori	r24, 0xF0	; 240
     69a:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     69c:	87 b1       	in	r24, 0x07	; 7
     69e:	87 60       	ori	r24, 0x07	; 7
     6a0:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     6a2:	80 e3       	ldi	r24, 0x30	; 48
     6a4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     6a6:	42 9a       	sbi	0x08, 2	; 8
     6a8:	20 e4       	ldi	r18, 0x40	; 64
     6aa:	3f e1       	ldi	r19, 0x1F	; 31
     6ac:	f9 01       	movw	r30, r18
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6b2:	42 98       	cbi	0x08, 2	; 8
     6b4:	f9 01       	movw	r30, r18
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     6ba:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     6bc:	42 9a       	sbi	0x08, 2	; 8
     6be:	c9 01       	movw	r24, r18
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6c4:	42 98       	cbi	0x08, 2	; 8
     6c6:	c9 01       	movw	r24, r18
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     6cc:	80 e2       	ldi	r24, 0x20	; 32
     6ce:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     6d0:	42 9a       	sbi	0x08, 2	; 8
     6d2:	c9 01       	movw	r24, r18
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6d8:	42 98       	cbi	0x08, 2	; 8
     6da:	c9 01       	movw	r24, r18
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     6e0:	88 e2       	ldi	r24, 0x28	; 40
     6e2:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     6e6:	8c e0       	ldi	r24, 0x0C	; 12
     6e8:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
     6ec:	c5 e1       	ldi	r28, 0x15	; 21
     6ee:	d1 e0       	ldi	r29, 0x01	; 1
     6f0:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     6f2:	16 2f       	mov	r17, r22
     6f4:	1f 5f       	subi	r17, 0xFF	; 255
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 1e 03 	call	0x63c	; 0x63c <LCDdefinechar>
     6fc:	28 96       	adiw	r28, 0x08	; 8
     6fe:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     700:	18 30       	cpi	r17, 0x08	; 8
     702:	b9 f7       	brne	.-18     	; 0x6f2 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	08 95       	ret

0000070c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	08 2f       	mov	r16, r24
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	04 c0       	rjmp	.+8      	; 0x71e <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     716:	8e e1       	ldi	r24, 0x1E	; 30
     718:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     71c:	1f 5f       	subi	r17, 0xFF	; 255
     71e:	10 17       	cp	r17, r16
     720:	d0 f3       	brcs	.-12     	; 0x716 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	08 2f       	mov	r16, r24
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	04 c0       	rjmp	.+8      	; 0x73a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     732:	88 e1       	ldi	r24, 0x18	; 24
     734:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     738:	1f 5f       	subi	r17, 0xFF	; 255
     73a:	10 17       	cp	r17, r16
     73c:	d0 f3       	brcs	.-12     	; 0x732 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	08 95       	ret

00000744 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     744:	8e e0       	ldi	r24, 0x0E	; 14
     746:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     74a:	08 95       	ret

0000074c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     74c:	8f e0       	ldi	r24, 0x0F	; 15
     74e:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     752:	08 95       	ret

00000754 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     754:	8c e0       	ldi	r24, 0x0C	; 12
     756:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     75a:	08 95       	ret

0000075c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     75c:	88 e0       	ldi	r24, 0x08	; 8
     75e:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     762:	08 95       	ret

00000764 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     764:	8c e0       	ldi	r24, 0x0C	; 12
     766:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
}
     76a:	08 95       	ret

0000076c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	08 2f       	mov	r16, r24
     772:	10 e0       	ldi	r17, 0x00	; 0
     774:	04 c0       	rjmp	.+8      	; 0x77e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     776:	80 e1       	ldi	r24, 0x10	; 16
     778:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     77c:	1f 5f       	subi	r17, 0xFF	; 255
     77e:	10 17       	cp	r17, r16
     780:	d0 f3       	brcs	.-12     	; 0x776 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	08 2f       	mov	r16, r24
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	04 c0       	rjmp	.+8      	; 0x79a <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     792:	84 e1       	ldi	r24, 0x14	; 20
     794:	0e 94 be 02 	call	0x57c	; 0x57c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     798:	1f 5f       	subi	r17, 0xFF	; 255
     79a:	10 17       	cp	r17, r16
     79c:	d0 f3       	brcs	.-12     	; 0x792 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     7b4:	96 e0       	ldi	r25, 0x06	; 6
     7b6:	89 9f       	mul	r24, r25
     7b8:	c0 01       	movw	r24, r0
     7ba:	11 24       	eor	r1, r1
     7bc:	24 2f       	mov	r18, r20
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	ac 01       	movw	r20, r24
     7c2:	42 9f       	mul	r20, r18
     7c4:	c0 01       	movw	r24, r0
     7c6:	43 9f       	mul	r20, r19
     7c8:	90 0d       	add	r25, r0
     7ca:	52 9f       	mul	r21, r18
     7cc:	90 0d       	add	r25, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	0e 94 12 05 	call	0xa24	; 0xa24 <__divmodhi4>
     7d6:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     7d8:	cb 01       	movw	r24, r22
     7da:	66 e0       	ldi	r22, 0x06	; 6
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__udivmodhi4>
     7e2:	e8 2e       	mov	r14, r24
     7e4:	ff 24       	eor	r15, r15
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	12 c0       	rjmp	.+36     	; 0x810 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     7ec:	c8 01       	movw	r24, r16
     7ee:	05 96       	adiw	r24, 0x05	; 5
     7f0:	c8 17       	cp	r28, r24
     7f2:	d9 07       	cpc	r29, r25
     7f4:	10 f0       	brcs	.+4      	; 0x7fa <LCDprogressBar+0x56>
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	06 c0       	rjmp	.+12     	; 0x806 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     7fa:	c0 17       	cp	r28, r16
     7fc:	d1 07       	cpc	r29, r17
     7fe:	10 f0       	brcs	.+4      	; 0x804 <LCDprogressBar+0x60>
     800:	8e 2d       	mov	r24, r14
     802:	01 c0       	rjmp	.+2      	; 0x806 <LCDprogressBar+0x62>
     804:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     806:	0e 94 9d 02 	call	0x53a	; 0x53a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     80a:	f3 94       	inc	r15
     80c:	0a 5f       	subi	r16, 0xFA	; 250
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	fd 14       	cp	r15, r13
     812:	60 f3       	brcs	.-40     	; 0x7ec <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	08 95       	ret

00000824 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     824:	87 e6       	ldi	r24, 0x67	; 103
     826:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     82a:	88 e1       	ldi	r24, 0x18	; 24
     82c:	80 93 c1 00 	sts	0x00C1, r24
}
     830:	08 95       	ret

00000832 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     832:	1f 93       	push	r17
     834:	18 2f       	mov	r17, r24

  if (c == '\a')
     836:	87 30       	cpi	r24, 0x07	; 7
     838:	49 f4       	brne	.+18     	; 0x84c <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     83a:	60 91 f4 01 	lds	r22, 0x01F4
     83e:	70 91 f5 01 	lds	r23, 0x01F5
     842:	8b e5       	ldi	r24, 0x5B	; 91
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 51 05 	call	0xaa2	; 0xaa2 <fputs>
     84a:	0b c0       	rjmp	.+22     	; 0x862 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     84c:	8a 30       	cpi	r24, 0x0A	; 10
     84e:	19 f4       	brne	.+6      	; 0x856 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     850:	8d e0       	ldi	r24, 0x0D	; 13
     852:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     856:	80 91 c0 00 	lds	r24, 0x00C0
     85a:	85 ff       	sbrs	r24, 5
     85c:	fc cf       	rjmp	.-8      	; 0x856 <uart_putchar+0x24>
  UDR0 = c;
     85e:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	1f 91       	pop	r17
     868:	08 95       	ret

0000086a <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     878:	80 91 64 01 	lds	r24, 0x0164
     87c:	90 91 65 01 	lds	r25, 0x0165
     880:	89 2b       	or	r24, r25
     882:	09 f0       	breq	.+2      	; 0x886 <uart_getchar+0x1c>
     884:	9f c0       	rjmp	.+318    	; 0x9c4 <uart_getchar+0x15a>
     886:	06 e6       	ldi	r16, 0x66	; 102
     888:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     88a:	80 91 c0 00 	lds	r24, 0x00C0
     88e:	87 ff       	sbrs	r24, 7
     890:	fc cf       	rjmp	.-8      	; 0x88a <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     892:	80 91 c0 00 	lds	r24, 0x00C0
     896:	84 ff       	sbrs	r24, 4
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <uart_getchar+0x36>
     89a:	2e ef       	ldi	r18, 0xFE	; 254
     89c:	3f ef       	ldi	r19, 0xFF	; 255
     89e:	a6 c0       	rjmp	.+332    	; 0x9ec <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     8a0:	80 91 c0 00 	lds	r24, 0x00C0
     8a4:	83 fd       	sbrc	r24, 3
     8a6:	a0 c0       	rjmp	.+320    	; 0x9e8 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     8a8:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     8ac:	9d 30       	cpi	r25, 0x0D	; 13
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     8b0:	9a 30       	cpi	r25, 0x0A	; 10
     8b2:	69 f4       	brne	.+26     	; 0x8ce <uart_getchar+0x64>
	  {
	    *cp = c;
     8b4:	8a e0       	ldi	r24, 0x0A	; 10
     8b6:	f8 01       	movw	r30, r16
     8b8:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     8ba:	b7 01       	movw	r22, r14
     8bc:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
	    rxp = b;
     8c0:	86 e6       	ldi	r24, 0x66	; 102
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 65 01 	sts	0x0165, r25
     8c8:	80 93 64 01 	sts	0x0164, r24
     8cc:	7b c0       	rjmp	.+246    	; 0x9c4 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     8ce:	99 30       	cpi	r25, 0x09	; 9
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <uart_getchar+0x6a>
     8d2:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8d4:	89 2f       	mov	r24, r25
     8d6:	80 52       	subi	r24, 0x20	; 32
     8d8:	8f 35       	cpi	r24, 0x5F	; 95
     8da:	10 f0       	brcs	.+4      	; 0x8e0 <uart_getchar+0x76>
     8dc:	90 3a       	cpi	r25, 0xA0	; 160
     8de:	70 f0       	brcs	.+28     	; 0x8fc <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	05 3b       	cpi	r16, 0xB5	; 181
     8e4:	1f 07       	cpc	r17, r31
     8e6:	11 f4       	brne	.+4      	; 0x8ec <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     8e8:	87 e0       	ldi	r24, 0x07	; 7
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     8ec:	f8 01       	movw	r30, r16
     8ee:	91 93       	st	Z+, r25
     8f0:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8f2:	89 2f       	mov	r24, r25
     8f4:	b7 01       	movw	r22, r14
     8f6:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
     8fa:	c7 cf       	rjmp	.-114    	; 0x88a <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8fc:	92 31       	cpi	r25, 0x12	; 18
     8fe:	39 f1       	breq	.+78     	; 0x94e <uart_getchar+0xe4>
     900:	93 31       	cpi	r25, 0x13	; 19
     902:	38 f4       	brcc	.+14     	; 0x912 <uart_getchar+0xa8>
     904:	93 30       	cpi	r25, 0x03	; 3
     906:	09 f4       	brne	.+2      	; 0x90a <uart_getchar+0xa0>
     908:	6f c0       	rjmp	.+222    	; 0x9e8 <uart_getchar+0x17e>
     90a:	98 30       	cpi	r25, 0x08	; 8
     90c:	09 f0       	breq	.+2      	; 0x910 <uart_getchar+0xa6>
     90e:	bd cf       	rjmp	.-134    	; 0x88a <uart_getchar+0x20>
     910:	09 c0       	rjmp	.+18     	; 0x924 <uart_getchar+0xba>
     912:	97 31       	cpi	r25, 0x17	; 23
     914:	09 f4       	brne	.+2      	; 0x918 <uart_getchar+0xae>
     916:	4b c0       	rjmp	.+150    	; 0x9ae <uart_getchar+0x144>
     918:	9f 37       	cpi	r25, 0x7F	; 127
     91a:	21 f0       	breq	.+8      	; 0x924 <uart_getchar+0xba>
     91c:	95 31       	cpi	r25, 0x15	; 21
     91e:	09 f0       	breq	.+2      	; 0x922 <uart_getchar+0xb8>
     920:	b4 cf       	rjmp	.-152    	; 0x88a <uart_getchar+0x20>
     922:	32 c0       	rjmp	.+100    	; 0x988 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	06 36       	cpi	r16, 0x66	; 102
     928:	1f 07       	cpc	r17, r31
     92a:	09 f0       	breq	.+2      	; 0x92e <uart_getchar+0xc4>
     92c:	08 f4       	brcc	.+2      	; 0x930 <uart_getchar+0xc6>
     92e:	ad cf       	rjmp	.-166    	; 0x88a <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	b7 01       	movw	r22, r14
     934:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		uart_putchar(' ', stream);
     938:	80 e2       	ldi	r24, 0x20	; 32
     93a:	b7 01       	movw	r22, r14
     93c:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		uart_putchar('\b', stream);
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	b7 01       	movw	r22, r14
     944:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		cp--;
     948:	01 50       	subi	r16, 0x01	; 1
     94a:	10 40       	sbci	r17, 0x00	; 0
     94c:	9e cf       	rjmp	.-196    	; 0x88a <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     94e:	8d e0       	ldi	r24, 0x0D	; 13
     950:	b7 01       	movw	r22, r14
     952:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
     956:	c6 e6       	ldi	r28, 0x66	; 102
     958:	d1 e0       	ldi	r29, 0x01	; 1
     95a:	04 c0       	rjmp	.+8      	; 0x964 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     95c:	89 91       	ld	r24, Y+
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     964:	c0 17       	cp	r28, r16
     966:	d1 07       	cpc	r29, r17
     968:	c8 f3       	brcs	.-14     	; 0x95c <uart_getchar+0xf2>
     96a:	8f cf       	rjmp	.-226    	; 0x88a <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     96c:	88 e0       	ldi	r24, 0x08	; 8
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		uart_putchar(' ', stream);
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	b7 01       	movw	r22, r14
     978:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		uart_putchar('\b', stream);
     97c:	88 e0       	ldi	r24, 0x08	; 8
     97e:	b7 01       	movw	r22, r14
     980:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		cp--;
     984:	01 50       	subi	r16, 0x01	; 1
     986:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	06 36       	cpi	r16, 0x66	; 102
     98c:	18 07       	cpc	r17, r24
     98e:	09 f0       	breq	.+2      	; 0x992 <uart_getchar+0x128>
     990:	68 f7       	brcc	.-38     	; 0x96c <uart_getchar+0x102>
     992:	7b cf       	rjmp	.-266    	; 0x88a <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     994:	88 e0       	ldi	r24, 0x08	; 8
     996:	b7 01       	movw	r22, r14
     998:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		uart_putchar(' ', stream);
     99c:	80 e2       	ldi	r24, 0x20	; 32
     99e:	b7 01       	movw	r22, r14
     9a0:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
		uart_putchar('\b', stream);
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	b7 01       	movw	r22, r14
     9a8:	0e 94 19 04 	call	0x832	; 0x832 <uart_putchar>
     9ac:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     9ae:	e1 e0       	ldi	r30, 0x01	; 1
     9b0:	06 36       	cpi	r16, 0x66	; 102
     9b2:	1e 07       	cpc	r17, r30
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <uart_getchar+0x14e>
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <uart_getchar+0x150>
     9b8:	68 cf       	rjmp	.-304    	; 0x88a <uart_getchar+0x20>
     9ba:	e8 01       	movw	r28, r16
     9bc:	8a 91       	ld	r24, -Y
     9be:	80 32       	cpi	r24, 0x20	; 32
     9c0:	49 f7       	brne	.-46     	; 0x994 <uart_getchar+0x12a>
     9c2:	63 cf       	rjmp	.-314    	; 0x88a <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     9c4:	e0 91 64 01 	lds	r30, 0x0164
     9c8:	f0 91 65 01 	lds	r31, 0x0165
     9cc:	81 91       	ld	r24, Z+
     9ce:	f0 93 65 01 	sts	0x0165, r31
     9d2:	e0 93 64 01 	sts	0x0164, r30
  if (c == '\n')
     9d6:	8a 30       	cpi	r24, 0x0A	; 10
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <uart_getchar+0x178>
    rxp = 0;
     9da:	10 92 65 01 	sts	0x0165, r1
     9de:	10 92 64 01 	sts	0x0164, r1

  return c;
     9e2:	28 2f       	mov	r18, r24
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <uart_getchar+0x182>
     9e8:	2f ef       	ldi	r18, 0xFF	; 255
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
}
     9ec:	c9 01       	movw	r24, r18
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	08 95       	ret

000009fc <__udivmodhi4>:
     9fc:	aa 1b       	sub	r26, r26
     9fe:	bb 1b       	sub	r27, r27
     a00:	51 e1       	ldi	r21, 0x11	; 17
     a02:	07 c0       	rjmp	.+14     	; 0xa12 <__udivmodhi4_ep>

00000a04 <__udivmodhi4_loop>:
     a04:	aa 1f       	adc	r26, r26
     a06:	bb 1f       	adc	r27, r27
     a08:	a6 17       	cp	r26, r22
     a0a:	b7 07       	cpc	r27, r23
     a0c:	10 f0       	brcs	.+4      	; 0xa12 <__udivmodhi4_ep>
     a0e:	a6 1b       	sub	r26, r22
     a10:	b7 0b       	sbc	r27, r23

00000a12 <__udivmodhi4_ep>:
     a12:	88 1f       	adc	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	5a 95       	dec	r21
     a18:	a9 f7       	brne	.-22     	; 0xa04 <__udivmodhi4_loop>
     a1a:	80 95       	com	r24
     a1c:	90 95       	com	r25
     a1e:	bc 01       	movw	r22, r24
     a20:	cd 01       	movw	r24, r26
     a22:	08 95       	ret

00000a24 <__divmodhi4>:
     a24:	97 fb       	bst	r25, 7
     a26:	09 2e       	mov	r0, r25
     a28:	07 26       	eor	r0, r23
     a2a:	0a d0       	rcall	.+20     	; 0xa40 <__divmodhi4_neg1>
     a2c:	77 fd       	sbrc	r23, 7
     a2e:	04 d0       	rcall	.+8      	; 0xa38 <__divmodhi4_neg2>
     a30:	e5 df       	rcall	.-54     	; 0x9fc <__udivmodhi4>
     a32:	06 d0       	rcall	.+12     	; 0xa40 <__divmodhi4_neg1>
     a34:	00 20       	and	r0, r0
     a36:	1a f4       	brpl	.+6      	; 0xa3e <__divmodhi4_exit>

00000a38 <__divmodhi4_neg2>:
     a38:	70 95       	com	r23
     a3a:	61 95       	neg	r22
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a3e <__divmodhi4_exit>:
     a3e:	08 95       	ret

00000a40 <__divmodhi4_neg1>:
     a40:	f6 f7       	brtc	.-4      	; 0xa3e <__divmodhi4_exit>
     a42:	90 95       	com	r25
     a44:	81 95       	neg	r24
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	08 95       	ret

00000a4a <fputc>:
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	8c 01       	movw	r16, r24
     a54:	eb 01       	movw	r28, r22
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	81 ff       	sbrs	r24, 1
     a5a:	1b c0       	rjmp	.+54     	; 0xa92 <fputc+0x48>
     a5c:	82 ff       	sbrs	r24, 2
     a5e:	0d c0       	rjmp	.+26     	; 0xa7a <fputc+0x30>
     a60:	2e 81       	ldd	r18, Y+6	; 0x06
     a62:	3f 81       	ldd	r19, Y+7	; 0x07
     a64:	8c 81       	ldd	r24, Y+4	; 0x04
     a66:	9d 81       	ldd	r25, Y+5	; 0x05
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	64 f4       	brge	.+24     	; 0xa86 <fputc+0x3c>
     a6e:	e8 81       	ld	r30, Y
     a70:	f9 81       	ldd	r31, Y+1	; 0x01
     a72:	01 93       	st	Z+, r16
     a74:	f9 83       	std	Y+1, r31	; 0x01
     a76:	e8 83       	st	Y, r30
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <fputc+0x3c>
     a7a:	e8 85       	ldd	r30, Y+8	; 0x08
     a7c:	f9 85       	ldd	r31, Y+9	; 0x09
     a7e:	80 2f       	mov	r24, r16
     a80:	09 95       	icall
     a82:	89 2b       	or	r24, r25
     a84:	31 f4       	brne	.+12     	; 0xa92 <fputc+0x48>
     a86:	8e 81       	ldd	r24, Y+6	; 0x06
     a88:	9f 81       	ldd	r25, Y+7	; 0x07
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	9f 83       	std	Y+7, r25	; 0x07
     a8e:	8e 83       	std	Y+6, r24	; 0x06
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <fputc+0x4c>
     a92:	0f ef       	ldi	r16, 0xFF	; 255
     a94:	1f ef       	ldi	r17, 0xFF	; 255
     a96:	c8 01       	movw	r24, r16
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <fputs>:
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	7c 01       	movw	r14, r24
     ab0:	8b 01       	movw	r16, r22
     ab2:	db 01       	movw	r26, r22
     ab4:	13 96       	adiw	r26, 0x03	; 3
     ab6:	8c 91       	ld	r24, X
     ab8:	81 fd       	sbrc	r24, 1
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <fputs+0x20>
     abc:	cf ef       	ldi	r28, 0xFF	; 255
     abe:	df ef       	ldi	r29, 0xFF	; 255
     ac0:	13 c0       	rjmp	.+38     	; 0xae8 <fputs+0x46>
     ac2:	c0 e0       	ldi	r28, 0x00	; 0
     ac4:	d0 e0       	ldi	r29, 0x00	; 0
     ac6:	0b c0       	rjmp	.+22     	; 0xade <fputs+0x3c>
     ac8:	d8 01       	movw	r26, r16
     aca:	18 96       	adiw	r26, 0x08	; 8
     acc:	ed 91       	ld	r30, X+
     ace:	fc 91       	ld	r31, X
     ad0:	19 97       	sbiw	r26, 0x09	; 9
     ad2:	b8 01       	movw	r22, r16
     ad4:	09 95       	icall
     ad6:	89 2b       	or	r24, r25
     ad8:	11 f0       	breq	.+4      	; 0xade <fputs+0x3c>
     ada:	cf ef       	ldi	r28, 0xFF	; 255
     adc:	df ef       	ldi	r29, 0xFF	; 255
     ade:	f7 01       	movw	r30, r14
     ae0:	81 91       	ld	r24, Z+
     ae2:	7f 01       	movw	r14, r30
     ae4:	88 23       	and	r24, r24
     ae6:	81 f7       	brne	.-32     	; 0xac8 <fputs+0x26>
     ae8:	ce 01       	movw	r24, r28
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <fscanf>:
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	9e 01       	movw	r18, r28
     b02:	27 5f       	subi	r18, 0xF7	; 247
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	8d 81       	ldd	r24, Y+5	; 0x05
     b08:	9e 81       	ldd	r25, Y+6	; 0x06
     b0a:	6f 81       	ldd	r22, Y+7	; 0x07
     b0c:	78 85       	ldd	r23, Y+8	; 0x08
     b0e:	a9 01       	movw	r20, r18
     b10:	0e 94 96 09 	call	0x132c	; 0x132c <vfscanf>
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <sprintf>:
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	2e 97       	sbiw	r28, 0x0e	; 14
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	0d 89       	ldd	r16, Y+21	; 0x15
     b34:	1e 89       	ldd	r17, Y+22	; 0x16
     b36:	86 e0       	ldi	r24, 0x06	; 6
     b38:	8c 83       	std	Y+4, r24	; 0x04
     b3a:	1a 83       	std	Y+2, r17	; 0x02
     b3c:	09 83       	std	Y+1, r16	; 0x01
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	9f e7       	ldi	r25, 0x7F	; 127
     b42:	9e 83       	std	Y+6, r25	; 0x06
     b44:	8d 83       	std	Y+5, r24	; 0x05
     b46:	9e 01       	movw	r18, r28
     b48:	27 5e       	subi	r18, 0xE7	; 231
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	6f 89       	ldd	r22, Y+23	; 0x17
     b52:	78 8d       	ldd	r23, Y+24	; 0x18
     b54:	a9 01       	movw	r20, r18
     b56:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vfprintf>
     b5a:	2f 81       	ldd	r18, Y+7	; 0x07
     b5c:	38 85       	ldd	r19, Y+8	; 0x08
     b5e:	02 0f       	add	r16, r18
     b60:	13 1f       	adc	r17, r19
     b62:	f8 01       	movw	r30, r16
     b64:	10 82       	st	Z, r1
     b66:	2e 96       	adiw	r28, 0x0e	; 14
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <sscanf>:
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	2e 97       	sbiw	r28, 0x0e	; 14
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	85 e0       	ldi	r24, 0x05	; 5
     b92:	8c 83       	std	Y+4, r24	; 0x04
     b94:	8b 89       	ldd	r24, Y+19	; 0x13
     b96:	9c 89       	ldd	r25, Y+20	; 0x14
     b98:	9a 83       	std	Y+2, r25	; 0x02
     b9a:	89 83       	std	Y+1, r24	; 0x01
     b9c:	9e 01       	movw	r18, r28
     b9e:	29 5e       	subi	r18, 0xE9	; 233
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	6d 89       	ldd	r22, Y+21	; 0x15
     ba8:	7e 89       	ldd	r23, Y+22	; 0x16
     baa:	a9 01       	movw	r20, r18
     bac:	0e 94 96 09 	call	0x132c	; 0x132c <vfscanf>
     bb0:	2e 96       	adiw	r28, 0x0e	; 14
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <vfprintf>:
     bc2:	2f 92       	push	r2
     bc4:	3f 92       	push	r3
     bc6:	4f 92       	push	r4
     bc8:	5f 92       	push	r5
     bca:	6f 92       	push	r6
     bcc:	7f 92       	push	r7
     bce:	8f 92       	push	r8
     bd0:	9f 92       	push	r9
     bd2:	af 92       	push	r10
     bd4:	bf 92       	push	r11
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	2b 97       	sbiw	r28, 0x0b	; 11
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	3c 01       	movw	r6, r24
     bf8:	2b 01       	movw	r4, r22
     bfa:	5a 01       	movw	r10, r20
     bfc:	fc 01       	movw	r30, r24
     bfe:	17 82       	std	Z+7, r1	; 0x07
     c00:	16 82       	std	Z+6, r1	; 0x06
     c02:	83 81       	ldd	r24, Z+3	; 0x03
     c04:	81 fd       	sbrc	r24, 1
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <vfprintf+0x4c>
     c08:	6f ef       	ldi	r22, 0xFF	; 255
     c0a:	7f ef       	ldi	r23, 0xFF	; 255
     c0c:	c6 c1       	rjmp	.+908    	; 0xf9a <vfprintf+0x3d8>
     c0e:	9a e0       	ldi	r25, 0x0A	; 10
     c10:	89 2e       	mov	r8, r25
     c12:	1e 01       	movw	r2, r28
     c14:	08 94       	sec
     c16:	21 1c       	adc	r2, r1
     c18:	31 1c       	adc	r3, r1
     c1a:	f3 01       	movw	r30, r6
     c1c:	23 81       	ldd	r18, Z+3	; 0x03
     c1e:	f2 01       	movw	r30, r4
     c20:	23 fd       	sbrc	r18, 3
     c22:	85 91       	lpm	r24, Z+
     c24:	23 ff       	sbrs	r18, 3
     c26:	81 91       	ld	r24, Z+
     c28:	2f 01       	movw	r4, r30
     c2a:	88 23       	and	r24, r24
     c2c:	09 f4       	brne	.+2      	; 0xc30 <vfprintf+0x6e>
     c2e:	b2 c1       	rjmp	.+868    	; 0xf94 <vfprintf+0x3d2>
     c30:	85 32       	cpi	r24, 0x25	; 37
     c32:	39 f4       	brne	.+14     	; 0xc42 <vfprintf+0x80>
     c34:	23 fd       	sbrc	r18, 3
     c36:	85 91       	lpm	r24, Z+
     c38:	23 ff       	sbrs	r18, 3
     c3a:	81 91       	ld	r24, Z+
     c3c:	2f 01       	movw	r4, r30
     c3e:	85 32       	cpi	r24, 0x25	; 37
     c40:	29 f4       	brne	.+10     	; 0xc4c <vfprintf+0x8a>
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	b3 01       	movw	r22, r6
     c46:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     c4a:	e7 cf       	rjmp	.-50     	; 0xc1a <vfprintf+0x58>
     c4c:	98 2f       	mov	r25, r24
     c4e:	ff 24       	eor	r15, r15
     c50:	ee 24       	eor	r14, r14
     c52:	99 24       	eor	r9, r9
     c54:	ff e1       	ldi	r31, 0x1F	; 31
     c56:	ff 15       	cp	r31, r15
     c58:	d0 f0       	brcs	.+52     	; 0xc8e <vfprintf+0xcc>
     c5a:	9b 32       	cpi	r25, 0x2B	; 43
     c5c:	69 f0       	breq	.+26     	; 0xc78 <vfprintf+0xb6>
     c5e:	9c 32       	cpi	r25, 0x2C	; 44
     c60:	28 f4       	brcc	.+10     	; 0xc6c <vfprintf+0xaa>
     c62:	90 32       	cpi	r25, 0x20	; 32
     c64:	59 f0       	breq	.+22     	; 0xc7c <vfprintf+0xba>
     c66:	93 32       	cpi	r25, 0x23	; 35
     c68:	91 f4       	brne	.+36     	; 0xc8e <vfprintf+0xcc>
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <vfprintf+0xc6>
     c6c:	9d 32       	cpi	r25, 0x2D	; 45
     c6e:	49 f0       	breq	.+18     	; 0xc82 <vfprintf+0xc0>
     c70:	90 33       	cpi	r25, 0x30	; 48
     c72:	69 f4       	brne	.+26     	; 0xc8e <vfprintf+0xcc>
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	24 c0       	rjmp	.+72     	; 0xcc0 <vfprintf+0xfe>
     c78:	52 e0       	ldi	r21, 0x02	; 2
     c7a:	f5 2a       	or	r15, r21
     c7c:	84 e0       	ldi	r24, 0x04	; 4
     c7e:	f8 2a       	or	r15, r24
     c80:	28 c0       	rjmp	.+80     	; 0xcd2 <vfprintf+0x110>
     c82:	98 e0       	ldi	r25, 0x08	; 8
     c84:	f9 2a       	or	r15, r25
     c86:	25 c0       	rjmp	.+74     	; 0xcd2 <vfprintf+0x110>
     c88:	e0 e1       	ldi	r30, 0x10	; 16
     c8a:	fe 2a       	or	r15, r30
     c8c:	22 c0       	rjmp	.+68     	; 0xcd2 <vfprintf+0x110>
     c8e:	f7 fc       	sbrc	r15, 7
     c90:	29 c0       	rjmp	.+82     	; 0xce4 <vfprintf+0x122>
     c92:	89 2f       	mov	r24, r25
     c94:	80 53       	subi	r24, 0x30	; 48
     c96:	8a 30       	cpi	r24, 0x0A	; 10
     c98:	70 f4       	brcc	.+28     	; 0xcb6 <vfprintf+0xf4>
     c9a:	f6 fe       	sbrs	r15, 6
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <vfprintf+0xe6>
     c9e:	98 9c       	mul	r9, r8
     ca0:	90 2c       	mov	r9, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	98 0e       	add	r9, r24
     ca6:	15 c0       	rjmp	.+42     	; 0xcd2 <vfprintf+0x110>
     ca8:	e8 9c       	mul	r14, r8
     caa:	e0 2c       	mov	r14, r0
     cac:	11 24       	eor	r1, r1
     cae:	e8 0e       	add	r14, r24
     cb0:	f0 e2       	ldi	r31, 0x20	; 32
     cb2:	ff 2a       	or	r15, r31
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <vfprintf+0x110>
     cb6:	9e 32       	cpi	r25, 0x2E	; 46
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <vfprintf+0x102>
     cba:	f6 fc       	sbrc	r15, 6
     cbc:	6b c1       	rjmp	.+726    	; 0xf94 <vfprintf+0x3d2>
     cbe:	40 e4       	ldi	r20, 0x40	; 64
     cc0:	f4 2a       	or	r15, r20
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <vfprintf+0x110>
     cc4:	9c 36       	cpi	r25, 0x6C	; 108
     cc6:	19 f4       	brne	.+6      	; 0xcce <vfprintf+0x10c>
     cc8:	50 e8       	ldi	r21, 0x80	; 128
     cca:	f5 2a       	or	r15, r21
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x110>
     cce:	98 36       	cpi	r25, 0x68	; 104
     cd0:	49 f4       	brne	.+18     	; 0xce4 <vfprintf+0x122>
     cd2:	f2 01       	movw	r30, r4
     cd4:	23 fd       	sbrc	r18, 3
     cd6:	95 91       	lpm	r25, Z+
     cd8:	23 ff       	sbrs	r18, 3
     cda:	91 91       	ld	r25, Z+
     cdc:	2f 01       	movw	r4, r30
     cde:	99 23       	and	r25, r25
     ce0:	09 f0       	breq	.+2      	; 0xce4 <vfprintf+0x122>
     ce2:	b8 cf       	rjmp	.-144    	; 0xc54 <vfprintf+0x92>
     ce4:	89 2f       	mov	r24, r25
     ce6:	85 54       	subi	r24, 0x45	; 69
     ce8:	83 30       	cpi	r24, 0x03	; 3
     cea:	18 f0       	brcs	.+6      	; 0xcf2 <vfprintf+0x130>
     cec:	80 52       	subi	r24, 0x20	; 32
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	38 f4       	brcc	.+14     	; 0xd00 <vfprintf+0x13e>
     cf2:	44 e0       	ldi	r20, 0x04	; 4
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	a4 0e       	add	r10, r20
     cf8:	b5 1e       	adc	r11, r21
     cfa:	5f e3       	ldi	r21, 0x3F	; 63
     cfc:	59 83       	std	Y+1, r21	; 0x01
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <vfprintf+0x15c>
     d00:	93 36       	cpi	r25, 0x63	; 99
     d02:	31 f0       	breq	.+12     	; 0xd10 <vfprintf+0x14e>
     d04:	93 37       	cpi	r25, 0x73	; 115
     d06:	79 f0       	breq	.+30     	; 0xd26 <vfprintf+0x164>
     d08:	93 35       	cpi	r25, 0x53	; 83
     d0a:	09 f0       	breq	.+2      	; 0xd0e <vfprintf+0x14c>
     d0c:	56 c0       	rjmp	.+172    	; 0xdba <vfprintf+0x1f8>
     d0e:	20 c0       	rjmp	.+64     	; 0xd50 <vfprintf+0x18e>
     d10:	f5 01       	movw	r30, r10
     d12:	80 81       	ld	r24, Z
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	42 e0       	ldi	r20, 0x02	; 2
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	a4 0e       	add	r10, r20
     d1c:	b5 1e       	adc	r11, r21
     d1e:	61 01       	movw	r12, r2
     d20:	01 e0       	ldi	r16, 0x01	; 1
     d22:	10 e0       	ldi	r17, 0x00	; 0
     d24:	12 c0       	rjmp	.+36     	; 0xd4a <vfprintf+0x188>
     d26:	f5 01       	movw	r30, r10
     d28:	c0 80       	ld	r12, Z
     d2a:	d1 80       	ldd	r13, Z+1	; 0x01
     d2c:	f6 fc       	sbrc	r15, 6
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <vfprintf+0x174>
     d30:	6f ef       	ldi	r22, 0xFF	; 255
     d32:	7f ef       	ldi	r23, 0xFF	; 255
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <vfprintf+0x178>
     d36:	69 2d       	mov	r22, r9
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	42 e0       	ldi	r20, 0x02	; 2
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	a4 0e       	add	r10, r20
     d40:	b5 1e       	adc	r11, r21
     d42:	c6 01       	movw	r24, r12
     d44:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <strnlen>
     d48:	8c 01       	movw	r16, r24
     d4a:	5f e7       	ldi	r21, 0x7F	; 127
     d4c:	f5 22       	and	r15, r21
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <vfprintf+0x1b6>
     d50:	f5 01       	movw	r30, r10
     d52:	c0 80       	ld	r12, Z
     d54:	d1 80       	ldd	r13, Z+1	; 0x01
     d56:	f6 fc       	sbrc	r15, 6
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <vfprintf+0x19e>
     d5a:	6f ef       	ldi	r22, 0xFF	; 255
     d5c:	7f ef       	ldi	r23, 0xFF	; 255
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x1a2>
     d60:	69 2d       	mov	r22, r9
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	42 e0       	ldi	r20, 0x02	; 2
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	a4 0e       	add	r10, r20
     d6a:	b5 1e       	adc	r11, r21
     d6c:	c6 01       	movw	r24, r12
     d6e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <strnlen_P>
     d72:	8c 01       	movw	r16, r24
     d74:	50 e8       	ldi	r21, 0x80	; 128
     d76:	f5 2a       	or	r15, r21
     d78:	f3 fe       	sbrs	r15, 3
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <vfprintf+0x1c8>
     d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <vfprintf+0x1f0>
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	b3 01       	movw	r22, r6
     d84:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     d88:	ea 94       	dec	r14
     d8a:	8e 2d       	mov	r24, r14
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	08 17       	cp	r16, r24
     d90:	19 07       	cpc	r17, r25
     d92:	a8 f3       	brcs	.-22     	; 0xd7e <vfprintf+0x1bc>
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <vfprintf+0x1f0>
     d96:	f6 01       	movw	r30, r12
     d98:	f7 fc       	sbrc	r15, 7
     d9a:	85 91       	lpm	r24, Z+
     d9c:	f7 fe       	sbrs	r15, 7
     d9e:	81 91       	ld	r24, Z+
     da0:	6f 01       	movw	r12, r30
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	b3 01       	movw	r22, r6
     da6:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     daa:	e1 10       	cpse	r14, r1
     dac:	ea 94       	dec	r14
     dae:	01 50       	subi	r16, 0x01	; 1
     db0:	10 40       	sbci	r17, 0x00	; 0
     db2:	01 15       	cp	r16, r1
     db4:	11 05       	cpc	r17, r1
     db6:	79 f7       	brne	.-34     	; 0xd96 <vfprintf+0x1d4>
     db8:	ea c0       	rjmp	.+468    	; 0xf8e <vfprintf+0x3cc>
     dba:	94 36       	cpi	r25, 0x64	; 100
     dbc:	11 f0       	breq	.+4      	; 0xdc2 <vfprintf+0x200>
     dbe:	99 36       	cpi	r25, 0x69	; 105
     dc0:	69 f5       	brne	.+90     	; 0xe1c <vfprintf+0x25a>
     dc2:	f7 fe       	sbrs	r15, 7
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <vfprintf+0x214>
     dc6:	f5 01       	movw	r30, r10
     dc8:	20 81       	ld	r18, Z
     dca:	31 81       	ldd	r19, Z+1	; 0x01
     dcc:	42 81       	ldd	r20, Z+2	; 0x02
     dce:	53 81       	ldd	r21, Z+3	; 0x03
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <vfprintf+0x228>
     dd6:	f5 01       	movw	r30, r10
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	9c 01       	movw	r18, r24
     dde:	44 27       	eor	r20, r20
     de0:	37 fd       	sbrc	r19, 7
     de2:	40 95       	com	r20
     de4:	54 2f       	mov	r21, r20
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a8 0e       	add	r10, r24
     dec:	b9 1e       	adc	r11, r25
     dee:	9f e6       	ldi	r25, 0x6F	; 111
     df0:	f9 22       	and	r15, r25
     df2:	57 ff       	sbrs	r21, 7
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <vfprintf+0x246>
     df6:	50 95       	com	r21
     df8:	40 95       	com	r20
     dfa:	30 95       	com	r19
     dfc:	21 95       	neg	r18
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	4f 4f       	sbci	r20, 0xFF	; 255
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	e0 e8       	ldi	r30, 0x80	; 128
     e06:	fe 2a       	or	r15, r30
     e08:	ca 01       	movw	r24, r20
     e0a:	b9 01       	movw	r22, r18
     e0c:	a1 01       	movw	r20, r2
     e0e:	2a e0       	ldi	r18, 0x0A	; 10
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	0e 94 3e 0b 	call	0x167c	; 0x167c <__ultoa_invert>
     e16:	d8 2e       	mov	r13, r24
     e18:	d2 18       	sub	r13, r2
     e1a:	40 c0       	rjmp	.+128    	; 0xe9c <vfprintf+0x2da>
     e1c:	95 37       	cpi	r25, 0x75	; 117
     e1e:	29 f4       	brne	.+10     	; 0xe2a <vfprintf+0x268>
     e20:	1f 2d       	mov	r17, r15
     e22:	1f 7e       	andi	r17, 0xEF	; 239
     e24:	2a e0       	ldi	r18, 0x0A	; 10
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	1d c0       	rjmp	.+58     	; 0xe64 <vfprintf+0x2a2>
     e2a:	1f 2d       	mov	r17, r15
     e2c:	19 7f       	andi	r17, 0xF9	; 249
     e2e:	9f 36       	cpi	r25, 0x6F	; 111
     e30:	61 f0       	breq	.+24     	; 0xe4a <vfprintf+0x288>
     e32:	90 37       	cpi	r25, 0x70	; 112
     e34:	20 f4       	brcc	.+8      	; 0xe3e <vfprintf+0x27c>
     e36:	98 35       	cpi	r25, 0x58	; 88
     e38:	09 f0       	breq	.+2      	; 0xe3c <vfprintf+0x27a>
     e3a:	ac c0       	rjmp	.+344    	; 0xf94 <vfprintf+0x3d2>
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <vfprintf+0x29a>
     e3e:	90 37       	cpi	r25, 0x70	; 112
     e40:	39 f0       	breq	.+14     	; 0xe50 <vfprintf+0x28e>
     e42:	98 37       	cpi	r25, 0x78	; 120
     e44:	09 f0       	breq	.+2      	; 0xe48 <vfprintf+0x286>
     e46:	a6 c0       	rjmp	.+332    	; 0xf94 <vfprintf+0x3d2>
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <vfprintf+0x290>
     e4a:	28 e0       	ldi	r18, 0x08	; 8
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <vfprintf+0x2a2>
     e50:	10 61       	ori	r17, 0x10	; 16
     e52:	14 fd       	sbrc	r17, 4
     e54:	14 60       	ori	r17, 0x04	; 4
     e56:	20 e1       	ldi	r18, 0x10	; 16
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <vfprintf+0x2a2>
     e5c:	14 fd       	sbrc	r17, 4
     e5e:	16 60       	ori	r17, 0x06	; 6
     e60:	20 e1       	ldi	r18, 0x10	; 16
     e62:	32 e0       	ldi	r19, 0x02	; 2
     e64:	17 ff       	sbrs	r17, 7
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <vfprintf+0x2b6>
     e68:	f5 01       	movw	r30, r10
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	44 e0       	ldi	r20, 0x04	; 4
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0x2c6>
     e78:	f5 01       	movw	r30, r10
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	bc 01       	movw	r22, r24
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	42 e0       	ldi	r20, 0x02	; 2
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	a4 0e       	add	r10, r20
     e8a:	b5 1e       	adc	r11, r21
     e8c:	a1 01       	movw	r20, r2
     e8e:	0e 94 3e 0b 	call	0x167c	; 0x167c <__ultoa_invert>
     e92:	d8 2e       	mov	r13, r24
     e94:	d2 18       	sub	r13, r2
     e96:	8f e7       	ldi	r24, 0x7F	; 127
     e98:	f8 2e       	mov	r15, r24
     e9a:	f1 22       	and	r15, r17
     e9c:	f6 fe       	sbrs	r15, 6
     e9e:	0b c0       	rjmp	.+22     	; 0xeb6 <vfprintf+0x2f4>
     ea0:	5e ef       	ldi	r21, 0xFE	; 254
     ea2:	f5 22       	and	r15, r21
     ea4:	d9 14       	cp	r13, r9
     ea6:	38 f4       	brcc	.+14     	; 0xeb6 <vfprintf+0x2f4>
     ea8:	f4 fe       	sbrs	r15, 4
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <vfprintf+0x2f8>
     eac:	f2 fc       	sbrc	r15, 2
     eae:	05 c0       	rjmp	.+10     	; 0xeba <vfprintf+0x2f8>
     eb0:	8f ee       	ldi	r24, 0xEF	; 239
     eb2:	f8 22       	and	r15, r24
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x2f8>
     eb6:	1d 2d       	mov	r17, r13
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <vfprintf+0x2fa>
     eba:	19 2d       	mov	r17, r9
     ebc:	f4 fe       	sbrs	r15, 4
     ebe:	0d c0       	rjmp	.+26     	; 0xeda <vfprintf+0x318>
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 0d       	add	r30, r13
     ec4:	f1 1d       	adc	r31, r1
     ec6:	80 81       	ld	r24, Z
     ec8:	80 33       	cpi	r24, 0x30	; 48
     eca:	19 f4       	brne	.+6      	; 0xed2 <vfprintf+0x310>
     ecc:	99 ee       	ldi	r25, 0xE9	; 233
     ece:	f9 22       	and	r15, r25
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <vfprintf+0x320>
     ed2:	1f 5f       	subi	r17, 0xFF	; 255
     ed4:	f2 fe       	sbrs	r15, 2
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <vfprintf+0x320>
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <vfprintf+0x31e>
     eda:	8f 2d       	mov	r24, r15
     edc:	86 78       	andi	r24, 0x86	; 134
     ede:	09 f0       	breq	.+2      	; 0xee2 <vfprintf+0x320>
     ee0:	1f 5f       	subi	r17, 0xFF	; 255
     ee2:	0f 2d       	mov	r16, r15
     ee4:	f3 fc       	sbrc	r15, 3
     ee6:	14 c0       	rjmp	.+40     	; 0xf10 <vfprintf+0x34e>
     ee8:	f0 fe       	sbrs	r15, 0
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <vfprintf+0x348>
     eec:	1e 15       	cp	r17, r14
     eee:	10 f0       	brcs	.+4      	; 0xef4 <vfprintf+0x332>
     ef0:	9d 2c       	mov	r9, r13
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <vfprintf+0x348>
     ef4:	9d 2c       	mov	r9, r13
     ef6:	9e 0c       	add	r9, r14
     ef8:	91 1a       	sub	r9, r17
     efa:	1e 2d       	mov	r17, r14
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <vfprintf+0x348>
     efe:	80 e2       	ldi	r24, 0x20	; 32
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	b3 01       	movw	r22, r6
     f04:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     f08:	1f 5f       	subi	r17, 0xFF	; 255
     f0a:	1e 15       	cp	r17, r14
     f0c:	c0 f3       	brcs	.-16     	; 0xefe <vfprintf+0x33c>
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <vfprintf+0x356>
     f10:	1e 15       	cp	r17, r14
     f12:	10 f4       	brcc	.+4      	; 0xf18 <vfprintf+0x356>
     f14:	e1 1a       	sub	r14, r17
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <vfprintf+0x358>
     f18:	ee 24       	eor	r14, r14
     f1a:	04 ff       	sbrs	r16, 4
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <vfprintf+0x37a>
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	b3 01       	movw	r22, r6
     f24:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     f28:	02 ff       	sbrs	r16, 2
     f2a:	1d c0       	rjmp	.+58     	; 0xf66 <vfprintf+0x3a4>
     f2c:	01 fd       	sbrc	r16, 1
     f2e:	03 c0       	rjmp	.+6      	; 0xf36 <vfprintf+0x374>
     f30:	88 e7       	ldi	r24, 0x78	; 120
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e c0       	rjmp	.+28     	; 0xf52 <vfprintf+0x390>
     f36:	88 e5       	ldi	r24, 0x58	; 88
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <vfprintf+0x390>
     f3c:	80 2f       	mov	r24, r16
     f3e:	86 78       	andi	r24, 0x86	; 134
     f40:	91 f0       	breq	.+36     	; 0xf66 <vfprintf+0x3a4>
     f42:	01 ff       	sbrs	r16, 1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x388>
     f46:	8b e2       	ldi	r24, 0x2B	; 43
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <vfprintf+0x38a>
     f4a:	80 e2       	ldi	r24, 0x20	; 32
     f4c:	f7 fc       	sbrc	r15, 7
     f4e:	8d e2       	ldi	r24, 0x2D	; 45
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b3 01       	movw	r22, r6
     f54:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <vfprintf+0x3a4>
     f5a:	80 e3       	ldi	r24, 0x30	; 48
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	b3 01       	movw	r22, r6
     f60:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     f64:	9a 94       	dec	r9
     f66:	d9 14       	cp	r13, r9
     f68:	c0 f3       	brcs	.-16     	; 0xf5a <vfprintf+0x398>
     f6a:	da 94       	dec	r13
     f6c:	f1 01       	movw	r30, r2
     f6e:	ed 0d       	add	r30, r13
     f70:	f1 1d       	adc	r31, r1
     f72:	80 81       	ld	r24, Z
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	b3 01       	movw	r22, r6
     f78:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     f7c:	dd 20       	and	r13, r13
     f7e:	a9 f7       	brne	.-22     	; 0xf6a <vfprintf+0x3a8>
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <vfprintf+0x3cc>
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	b3 01       	movw	r22, r6
     f88:	0e 94 25 05 	call	0xa4a	; 0xa4a <fputc>
     f8c:	ea 94       	dec	r14
     f8e:	ee 20       	and	r14, r14
     f90:	c1 f7       	brne	.-16     	; 0xf82 <vfprintf+0x3c0>
     f92:	43 ce       	rjmp	.-890    	; 0xc1a <vfprintf+0x58>
     f94:	f3 01       	movw	r30, r6
     f96:	66 81       	ldd	r22, Z+6	; 0x06
     f98:	77 81       	ldd	r23, Z+7	; 0x07
     f9a:	cb 01       	movw	r24, r22
     f9c:	2b 96       	adiw	r28, 0x0b	; 11
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	9f 90       	pop	r9
     fbe:	8f 90       	pop	r8
     fc0:	7f 90       	pop	r7
     fc2:	6f 90       	pop	r6
     fc4:	5f 90       	pop	r5
     fc6:	4f 90       	pop	r4
     fc8:	3f 90       	pop	r3
     fca:	2f 90       	pop	r2
     fcc:	08 95       	ret

00000fce <putval>:
     fce:	fc 01       	movw	r30, r24
     fd0:	20 fd       	sbrc	r18, 0
     fd2:	08 c0       	rjmp	.+16     	; 0xfe4 <putval+0x16>
     fd4:	23 fd       	sbrc	r18, 3
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <putval+0x14>
     fd8:	22 ff       	sbrs	r18, 2
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <putval+0x12>
     fdc:	73 83       	std	Z+3, r23	; 0x03
     fde:	62 83       	std	Z+2, r22	; 0x02
     fe0:	51 83       	std	Z+1, r21	; 0x01
     fe2:	40 83       	st	Z, r20
     fe4:	08 95       	ret

00000fe6 <mulacc>:
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	44 ff       	sbrs	r20, 4
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <mulacc+0x10>
     ff2:	33 e0       	ldi	r19, 0x03	; 3
     ff4:	11 c0       	rjmp	.+34     	; 0x1018 <mulacc+0x32>
     ff6:	46 ff       	sbrs	r20, 6
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <mulacc+0x18>
     ffa:	34 e0       	ldi	r19, 0x04	; 4
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <mulacc+0x32>
     ffe:	db 01       	movw	r26, r22
    1000:	fc 01       	movw	r30, r24
    1002:	aa 0f       	add	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	ee 1f       	adc	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	10 94       	com	r1
    100c:	d1 f7       	brne	.-12     	; 0x1002 <mulacc+0x1c>
    100e:	6a 0f       	add	r22, r26
    1010:	7b 1f       	adc	r23, r27
    1012:	8e 1f       	adc	r24, r30
    1014:	9f 1f       	adc	r25, r31
    1016:	31 e0       	ldi	r19, 0x01	; 1
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	31 50       	subi	r19, 0x01	; 1
    1022:	d1 f7       	brne	.-12     	; 0x1018 <mulacc+0x32>
    1024:	7b 01       	movw	r14, r22
    1026:	8c 01       	movw	r16, r24
    1028:	e2 0e       	add	r14, r18
    102a:	f1 1c       	adc	r15, r1
    102c:	01 1d       	adc	r16, r1
    102e:	11 1d       	adc	r17, r1
    1030:	a8 01       	movw	r20, r16
    1032:	97 01       	movw	r18, r14
    1034:	b7 01       	movw	r22, r14
    1036:	ca 01       	movw	r24, r20
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	08 95       	ret

00001042 <skip_spaces>:
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	8c 01       	movw	r16, r24
    104c:	c8 01       	movw	r24, r16
    104e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    1052:	ec 01       	movw	r28, r24
    1054:	97 fd       	sbrc	r25, 7
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <skip_spaces+0x26>
    1058:	0e 94 b9 0a 	call	0x1572	; 0x1572 <isspace>
    105c:	89 2b       	or	r24, r25
    105e:	b1 f7       	brne	.-20     	; 0x104c <skip_spaces+0xa>
    1060:	ce 01       	movw	r24, r28
    1062:	b8 01       	movw	r22, r16
    1064:	0e 94 24 0b 	call	0x1648	; 0x1648 <ungetc>
    1068:	ce 01       	movw	r24, r28
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <conv_int>:
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	ec 01       	movw	r28, r24
    108a:	c6 2e       	mov	r12, r22
    108c:	5a 01       	movw	r10, r20
    108e:	12 2f       	mov	r17, r18
    1090:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    1094:	ac 01       	movw	r20, r24
    1096:	8b 32       	cpi	r24, 0x2B	; 43
    1098:	19 f0       	breq	.+6      	; 0x10a0 <conv_int+0x2c>
    109a:	8d 32       	cpi	r24, 0x2D	; 45
    109c:	51 f4       	brne	.+20     	; 0x10b2 <conv_int+0x3e>
    109e:	10 68       	ori	r17, 0x80	; 128
    10a0:	ca 94       	dec	r12
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <conv_int+0x32>
    10a4:	6d c0       	rjmp	.+218    	; 0x1180 <conv_int+0x10c>
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    10ac:	ac 01       	movw	r20, r24
    10ae:	97 fd       	sbrc	r25, 7
    10b0:	67 c0       	rjmp	.+206    	; 0x1180 <conv_int+0x10c>
    10b2:	6d ef       	ldi	r22, 0xFD	; 253
    10b4:	d6 2e       	mov	r13, r22
    10b6:	d1 22       	and	r13, r17
    10b8:	8d 2d       	mov	r24, r13
    10ba:	80 73       	andi	r24, 0x30	; 48
    10bc:	01 f5       	brne	.+64     	; 0x10fe <conv_int+0x8a>
    10be:	40 33       	cpi	r20, 0x30	; 48
    10c0:	f1 f4       	brne	.+60     	; 0x10fe <conv_int+0x8a>
    10c2:	ca 94       	dec	r12
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <conv_int+0x54>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <conv_int+0xe2>
    10c8:	ce 01       	movw	r24, r28
    10ca:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    10ce:	ac 01       	movw	r20, r24
    10d0:	97 fd       	sbrc	r25, 7
    10d2:	41 c0       	rjmp	.+130    	; 0x1156 <conv_int+0xe2>
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	d8 2a       	or	r13, r24
    10d8:	48 37       	cpi	r20, 0x78	; 120
    10da:	11 f0       	breq	.+4      	; 0x10e0 <conv_int+0x6c>
    10dc:	48 35       	cpi	r20, 0x58	; 88
    10de:	59 f4       	brne	.+22     	; 0x10f6 <conv_int+0x82>
    10e0:	80 e4       	ldi	r24, 0x40	; 64
    10e2:	d8 2a       	or	r13, r24
    10e4:	ca 94       	dec	r12
    10e6:	b9 f1       	breq	.+110    	; 0x1156 <conv_int+0xe2>
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    10ee:	ac 01       	movw	r20, r24
    10f0:	99 23       	and	r25, r25
    10f2:	2c f4       	brge	.+10     	; 0x10fe <conv_int+0x8a>
    10f4:	30 c0       	rjmp	.+96     	; 0x1156 <conv_int+0xe2>
    10f6:	d6 fc       	sbrc	r13, 6
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <conv_int+0x8a>
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	d8 2a       	or	r13, r24
    10fe:	ee 24       	eor	r14, r14
    1100:	ff 24       	eor	r15, r15
    1102:	87 01       	movw	r16, r14
    1104:	24 2f       	mov	r18, r20
    1106:	20 53       	subi	r18, 0x30	; 48
    1108:	28 30       	cpi	r18, 0x08	; 8
    110a:	88 f0       	brcs	.+34     	; 0x112e <conv_int+0xba>
    110c:	d4 fc       	sbrc	r13, 4
    110e:	09 c0       	rjmp	.+18     	; 0x1122 <conv_int+0xae>
    1110:	2a 30       	cpi	r18, 0x0A	; 10
    1112:	68 f0       	brcs	.+26     	; 0x112e <conv_int+0xba>
    1114:	d6 fe       	sbrs	r13, 6
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <conv_int+0xae>
    1118:	2f 7d       	andi	r18, 0xDF	; 223
    111a:	82 2f       	mov	r24, r18
    111c:	81 51       	subi	r24, 0x11	; 17
    111e:	86 30       	cpi	r24, 0x06	; 6
    1120:	28 f0       	brcs	.+10     	; 0x112c <conv_int+0xb8>
    1122:	ca 01       	movw	r24, r20
    1124:	be 01       	movw	r22, r28
    1126:	0e 94 24 0b 	call	0x1648	; 0x1648 <ungetc>
    112a:	12 c0       	rjmp	.+36     	; 0x1150 <conv_int+0xdc>
    112c:	27 50       	subi	r18, 0x07	; 7
    112e:	c8 01       	movw	r24, r16
    1130:	b7 01       	movw	r22, r14
    1132:	4d 2d       	mov	r20, r13
    1134:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <mulacc>
    1138:	7b 01       	movw	r14, r22
    113a:	8c 01       	movw	r16, r24
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	d8 2a       	or	r13, r24
    1140:	ca 94       	dec	r12
    1142:	61 f0       	breq	.+24     	; 0x115c <conv_int+0xe8>
    1144:	ce 01       	movw	r24, r28
    1146:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    114a:	ac 01       	movw	r20, r24
    114c:	97 ff       	sbrs	r25, 7
    114e:	da cf       	rjmp	.-76     	; 0x1104 <conv_int+0x90>
    1150:	d1 fc       	sbrc	r13, 1
    1152:	04 c0       	rjmp	.+8      	; 0x115c <conv_int+0xe8>
    1154:	15 c0       	rjmp	.+42     	; 0x1180 <conv_int+0x10c>
    1156:	ee 24       	eor	r14, r14
    1158:	ff 24       	eor	r15, r15
    115a:	87 01       	movw	r16, r14
    115c:	d7 fe       	sbrs	r13, 7
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <conv_int+0xfc>
    1160:	10 95       	com	r17
    1162:	00 95       	com	r16
    1164:	f0 94       	com	r15
    1166:	e0 94       	com	r14
    1168:	e1 1c       	adc	r14, r1
    116a:	f1 1c       	adc	r15, r1
    116c:	01 1d       	adc	r16, r1
    116e:	11 1d       	adc	r17, r1
    1170:	c5 01       	movw	r24, r10
    1172:	b8 01       	movw	r22, r16
    1174:	a7 01       	movw	r20, r14
    1176:	2d 2d       	mov	r18, r13
    1178:	0e 94 e7 07 	call	0xfce	; 0xfce <putval>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <conv_int+0x10e>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	08 95       	ret

00001198 <conv_brk>:
    1198:	6f 92       	push	r6
    119a:	7f 92       	push	r7
    119c:	8f 92       	push	r8
    119e:	9f 92       	push	r9
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	a0 97       	sbiw	r28, 0x20	; 32
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	6c 01       	movw	r12, r24
    11c6:	a6 2e       	mov	r10, r22
    11c8:	8a 01       	movw	r16, r20
    11ca:	79 01       	movw	r14, r18
    11cc:	fe 01       	movw	r30, r28
    11ce:	31 96       	adiw	r30, 0x01	; 1
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	df 01       	movw	r26, r30
    11d4:	1d 92       	st	X+, r1
    11d6:	8a 95       	dec	r24
    11d8:	e9 f7       	brne	.-6      	; 0x11d4 <conv_brk+0x3c>
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	4f 01       	movw	r8, r30
    11e6:	a1 e0       	ldi	r26, 0x01	; 1
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	f6 01       	movw	r30, r12
    11ec:	83 81       	ldd	r24, Z+3	; 0x03
    11ee:	f7 01       	movw	r30, r14
    11f0:	83 fd       	sbrc	r24, 3
    11f2:	25 91       	lpm	r18, Z+
    11f4:	83 ff       	sbrs	r24, 3
    11f6:	21 91       	ld	r18, Z+
    11f8:	7f 01       	movw	r14, r30
    11fa:	22 23       	and	r18, r18
    11fc:	09 f4       	brne	.+2      	; 0x1200 <conv_brk+0x68>
    11fe:	7e c0       	rjmp	.+252    	; 0x12fc <conv_brk+0x164>
    1200:	2e 35       	cpi	r18, 0x5E	; 94
    1202:	19 f4       	brne	.+6      	; 0x120a <conv_brk+0x72>
    1204:	41 15       	cp	r20, r1
    1206:	51 05       	cpc	r21, r1
    1208:	69 f1       	breq	.+90     	; 0x1264 <conv_brk+0xcc>
    120a:	87 2f       	mov	r24, r23
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	44 f4       	brge	.+16     	; 0x1224 <conv_brk+0x8c>
    1214:	2d 35       	cpi	r18, 0x5D	; 93
    1216:	51 f1       	breq	.+84     	; 0x126c <conv_brk+0xd4>
    1218:	2d 32       	cpi	r18, 0x2D	; 45
    121a:	21 f4       	brne	.+8      	; 0x1224 <conv_brk+0x8c>
    121c:	33 23       	and	r19, r19
    121e:	29 f4       	brne	.+10     	; 0x122a <conv_brk+0x92>
    1220:	31 e0       	ldi	r19, 0x01	; 1
    1222:	21 c0       	rjmp	.+66     	; 0x1266 <conv_brk+0xce>
    1224:	33 23       	and	r19, r19
    1226:	09 f4       	brne	.+2      	; 0x122a <conv_brk+0x92>
    1228:	62 2f       	mov	r22, r18
    122a:	32 2f       	mov	r19, r18
    122c:	83 2f       	mov	r24, r19
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	86 95       	lsr	r24
    1234:	f4 01       	movw	r30, r8
    1236:	e8 0f       	add	r30, r24
    1238:	f1 1d       	adc	r31, r1
    123a:	83 2f       	mov	r24, r19
    123c:	87 70       	andi	r24, 0x07	; 7
    123e:	3d 01       	movw	r6, r26
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <conv_brk+0xae>
    1242:	66 0c       	add	r6, r6
    1244:	77 1c       	adc	r7, r7
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <conv_brk+0xaa>
    124a:	20 81       	ld	r18, Z
    124c:	26 29       	or	r18, r6
    124e:	20 83       	st	Z, r18
    1250:	36 17       	cp	r19, r22
    1252:	11 f4       	brne	.+4      	; 0x1258 <conv_brk+0xc0>
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	07 c0       	rjmp	.+14     	; 0x1266 <conv_brk+0xce>
    1258:	36 17       	cp	r19, r22
    125a:	10 f4       	brcc	.+4      	; 0x1260 <conv_brk+0xc8>
    125c:	3f 5f       	subi	r19, 0xFF	; 255
    125e:	e6 cf       	rjmp	.-52     	; 0x122c <conv_brk+0x94>
    1260:	31 50       	subi	r19, 0x01	; 1
    1262:	e4 cf       	rjmp	.-56     	; 0x122c <conv_brk+0x94>
    1264:	71 e0       	ldi	r23, 0x01	; 1
    1266:	4f 5f       	subi	r20, 0xFF	; 255
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	bf cf       	rjmp	.-130    	; 0x11ea <conv_brk+0x52>
    126c:	33 23       	and	r19, r19
    126e:	19 f0       	breq	.+6      	; 0x1276 <conv_brk+0xde>
    1270:	8e 81       	ldd	r24, Y+6	; 0x06
    1272:	80 62       	ori	r24, 0x20	; 32
    1274:	8e 83       	std	Y+6, r24	; 0x06
    1276:	77 23       	and	r23, r23
    1278:	59 f0       	breq	.+22     	; 0x1290 <conv_brk+0xf8>
    127a:	fe 01       	movw	r30, r28
    127c:	31 96       	adiw	r30, 0x01	; 1
    127e:	9e 01       	movw	r18, r28
    1280:	2f 5d       	subi	r18, 0xDF	; 223
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	80 95       	com	r24
    1288:	81 93       	st	Z+, r24
    128a:	e2 17       	cp	r30, r18
    128c:	f3 07       	cpc	r31, r19
    128e:	d1 f7       	brne	.-12     	; 0x1284 <conv_brk+0xec>
    1290:	bb 24       	eor	r11, r11
    1292:	b3 94       	inc	r11
    1294:	4e 01       	movw	r8, r28
    1296:	08 94       	sec
    1298:	81 1c       	adc	r8, r1
    129a:	91 1c       	adc	r9, r1
    129c:	c6 01       	movw	r24, r12
    129e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    12a2:	ac 01       	movw	r20, r24
    12a4:	97 fd       	sbrc	r25, 7
    12a6:	22 c0       	rjmp	.+68     	; 0x12ec <conv_brk+0x154>
    12a8:	86 95       	lsr	r24
    12aa:	86 95       	lsr	r24
    12ac:	86 95       	lsr	r24
    12ae:	f4 01       	movw	r30, r8
    12b0:	e8 0f       	add	r30, r24
    12b2:	f1 1d       	adc	r31, r1
    12b4:	80 81       	ld	r24, Z
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9a 01       	movw	r18, r20
    12ba:	27 70       	andi	r18, 0x07	; 7
    12bc:	30 70       	andi	r19, 0x00	; 0
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <conv_brk+0x12c>
    12c0:	95 95       	asr	r25
    12c2:	87 95       	ror	r24
    12c4:	2a 95       	dec	r18
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <conv_brk+0x128>
    12c8:	80 fd       	sbrc	r24, 0
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <conv_brk+0x13e>
    12cc:	ca 01       	movw	r24, r20
    12ce:	b6 01       	movw	r22, r12
    12d0:	0e 94 24 0b 	call	0x1648	; 0x1648 <ungetc>
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <conv_brk+0x154>
    12d6:	01 15       	cp	r16, r1
    12d8:	11 05       	cpc	r17, r1
    12da:	19 f0       	breq	.+6      	; 0x12e2 <conv_brk+0x14a>
    12dc:	d8 01       	movw	r26, r16
    12de:	4d 93       	st	X+, r20
    12e0:	8d 01       	movw	r16, r26
    12e2:	aa 94       	dec	r10
    12e4:	bb 24       	eor	r11, r11
    12e6:	aa 20       	and	r10, r10
    12e8:	c9 f6       	brne	.-78     	; 0x129c <conv_brk+0x104>
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <conv_brk+0x158>
    12ec:	bb 20       	and	r11, r11
    12ee:	31 f4       	brne	.+12     	; 0x12fc <conv_brk+0x164>
    12f0:	01 15       	cp	r16, r1
    12f2:	11 05       	cpc	r17, r1
    12f4:	29 f0       	breq	.+10     	; 0x1300 <conv_brk+0x168>
    12f6:	f8 01       	movw	r30, r16
    12f8:	10 82       	st	Z, r1
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <conv_brk+0x168>
    12fc:	ee 24       	eor	r14, r14
    12fe:	ff 24       	eor	r15, r15
    1300:	c7 01       	movw	r24, r14
    1302:	a0 96       	adiw	r28, 0x20	; 32
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	af 90       	pop	r10
    1322:	9f 90       	pop	r9
    1324:	8f 90       	pop	r8
    1326:	7f 90       	pop	r7
    1328:	6f 90       	pop	r6
    132a:	08 95       	ret

0000132c <vfscanf>:
    132c:	6f 92       	push	r6
    132e:	7f 92       	push	r7
    1330:	8f 92       	push	r8
    1332:	9f 92       	push	r9
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	5c 01       	movw	r10, r24
    134a:	6b 01       	movw	r12, r22
    134c:	3a 01       	movw	r6, r20
    134e:	fc 01       	movw	r30, r24
    1350:	17 82       	std	Z+7, r1	; 0x07
    1352:	16 82       	std	Z+6, r1	; 0x06
    1354:	88 24       	eor	r8, r8
    1356:	ea c0       	rjmp	.+468    	; 0x152c <vfscanf+0x200>
    1358:	81 2f       	mov	r24, r17
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <isspace>
    1360:	89 2b       	or	r24, r25
    1362:	21 f0       	breq	.+8      	; 0x136c <vfscanf+0x40>
    1364:	c5 01       	movw	r24, r10
    1366:	0e 94 21 08 	call	0x1042	; 0x1042 <skip_spaces>
    136a:	e0 c0       	rjmp	.+448    	; 0x152c <vfscanf+0x200>
    136c:	15 32       	cpi	r17, 0x25	; 37
    136e:	49 f4       	brne	.+18     	; 0x1382 <vfscanf+0x56>
    1370:	f6 01       	movw	r30, r12
    1372:	f3 fc       	sbrc	r15, 3
    1374:	65 91       	lpm	r22, Z+
    1376:	f3 fe       	sbrs	r15, 3
    1378:	61 91       	ld	r22, Z+
    137a:	6f 01       	movw	r12, r30
    137c:	65 32       	cpi	r22, 0x25	; 37
    137e:	69 f4       	brne	.+26     	; 0x139a <vfscanf+0x6e>
    1380:	15 e2       	ldi	r17, 0x25	; 37
    1382:	c5 01       	movw	r24, r10
    1384:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    1388:	97 fd       	sbrc	r25, 7
    138a:	dc c0       	rjmp	.+440    	; 0x1544 <vfscanf+0x218>
    138c:	18 17       	cp	r17, r24
    138e:	09 f4       	brne	.+2      	; 0x1392 <vfscanf+0x66>
    1390:	cd c0       	rjmp	.+410    	; 0x152c <vfscanf+0x200>
    1392:	b5 01       	movw	r22, r10
    1394:	0e 94 24 0b 	call	0x1648	; 0x1648 <ungetc>
    1398:	da c0       	rjmp	.+436    	; 0x154e <vfscanf+0x222>
    139a:	6a 32       	cpi	r22, 0x2A	; 42
    139c:	19 f0       	breq	.+6      	; 0x13a4 <vfscanf+0x78>
    139e:	16 2f       	mov	r17, r22
    13a0:	00 e0       	ldi	r16, 0x00	; 0
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <vfscanf+0x84>
    13a4:	f3 fc       	sbrc	r15, 3
    13a6:	15 91       	lpm	r17, Z+
    13a8:	f3 fe       	sbrs	r15, 3
    13aa:	11 91       	ld	r17, Z+
    13ac:	6f 01       	movw	r12, r30
    13ae:	01 e0       	ldi	r16, 0x01	; 1
    13b0:	99 24       	eor	r9, r9
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <vfscanf+0xa6>
    13b4:	02 60       	ori	r16, 0x02	; 2
    13b6:	69 2d       	mov	r22, r9
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <mulacc>
    13c4:	96 2e       	mov	r9, r22
    13c6:	f6 01       	movw	r30, r12
    13c8:	f3 fc       	sbrc	r15, 3
    13ca:	15 91       	lpm	r17, Z+
    13cc:	f3 fe       	sbrs	r15, 3
    13ce:	11 91       	ld	r17, Z+
    13d0:	6f 01       	movw	r12, r30
    13d2:	21 2f       	mov	r18, r17
    13d4:	20 53       	subi	r18, 0x30	; 48
    13d6:	2a 30       	cpi	r18, 0x0A	; 10
    13d8:	68 f3       	brcs	.-38     	; 0x13b4 <vfscanf+0x88>
    13da:	01 fd       	sbrc	r16, 1
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <vfscanf+0xb8>
    13de:	99 24       	eor	r9, r9
    13e0:	9a 94       	dec	r9
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <vfscanf+0xbe>
    13e4:	99 20       	and	r9, r9
    13e6:	09 f4       	brne	.+2      	; 0x13ea <vfscanf+0xbe>
    13e8:	b2 c0       	rjmp	.+356    	; 0x154e <vfscanf+0x222>
    13ea:	18 36       	cpi	r17, 0x68	; 104
    13ec:	21 f0       	breq	.+8      	; 0x13f6 <vfscanf+0xca>
    13ee:	1c 36       	cpi	r17, 0x6C	; 108
    13f0:	99 f4       	brne	.+38     	; 0x1418 <vfscanf+0xec>
    13f2:	f6 01       	movw	r30, r12
    13f4:	0b c0       	rjmp	.+22     	; 0x140c <vfscanf+0xe0>
    13f6:	f6 01       	movw	r30, r12
    13f8:	f3 fc       	sbrc	r15, 3
    13fa:	65 91       	lpm	r22, Z+
    13fc:	f3 fe       	sbrs	r15, 3
    13fe:	61 91       	ld	r22, Z+
    1400:	68 36       	cpi	r22, 0x68	; 104
    1402:	19 f0       	breq	.+6      	; 0x140a <vfscanf+0xde>
    1404:	6f 01       	movw	r12, r30
    1406:	16 2f       	mov	r17, r22
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <vfscanf+0xec>
    140a:	08 60       	ori	r16, 0x08	; 8
    140c:	04 60       	ori	r16, 0x04	; 4
    140e:	f3 fc       	sbrc	r15, 3
    1410:	15 91       	lpm	r17, Z+
    1412:	f3 fe       	sbrs	r15, 3
    1414:	11 91       	ld	r17, Z+
    1416:	6f 01       	movw	r12, r30
    1418:	11 23       	and	r17, r17
    141a:	09 f4       	brne	.+2      	; 0x141e <vfscanf+0xf2>
    141c:	98 c0       	rjmp	.+304    	; 0x154e <vfscanf+0x222>
    141e:	85 e5       	ldi	r24, 0x55	; 85
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	61 2f       	mov	r22, r17
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 c1 0a 	call	0x1582	; 0x1582 <strchr_P>
    142a:	89 2b       	or	r24, r25
    142c:	09 f4       	brne	.+2      	; 0x1430 <vfscanf+0x104>
    142e:	8f c0       	rjmp	.+286    	; 0x154e <vfscanf+0x222>
    1430:	80 2f       	mov	r24, r16
    1432:	00 ff       	sbrs	r16, 0
    1434:	03 c0       	rjmp	.+6      	; 0x143c <vfscanf+0x110>
    1436:	ee 24       	eor	r14, r14
    1438:	ff 24       	eor	r15, r15
    143a:	07 c0       	rjmp	.+14     	; 0x144a <vfscanf+0x11e>
    143c:	f3 01       	movw	r30, r6
    143e:	e0 80       	ld	r14, Z
    1440:	f1 80       	ldd	r15, Z+1	; 0x01
    1442:	22 e0       	ldi	r18, 0x02	; 2
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	62 0e       	add	r6, r18
    1448:	73 1e       	adc	r7, r19
    144a:	1e 36       	cpi	r17, 0x6E	; 110
    144c:	51 f4       	brne	.+20     	; 0x1462 <vfscanf+0x136>
    144e:	f5 01       	movw	r30, r10
    1450:	46 81       	ldd	r20, Z+6	; 0x06
    1452:	57 81       	ldd	r21, Z+7	; 0x07
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	c7 01       	movw	r24, r14
    145a:	20 2f       	mov	r18, r16
    145c:	0e 94 e7 07 	call	0xfce	; 0xfce <putval>
    1460:	65 c0       	rjmp	.+202    	; 0x152c <vfscanf+0x200>
    1462:	13 36       	cpi	r17, 0x63	; 99
    1464:	91 f4       	brne	.+36     	; 0x148a <vfscanf+0x15e>
    1466:	81 fd       	sbrc	r24, 1
    1468:	02 c0       	rjmp	.+4      	; 0x146e <vfscanf+0x142>
    146a:	99 24       	eor	r9, r9
    146c:	93 94       	inc	r9
    146e:	c5 01       	movw	r24, r10
    1470:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    1474:	97 fd       	sbrc	r25, 7
    1476:	66 c0       	rjmp	.+204    	; 0x1544 <vfscanf+0x218>
    1478:	e1 14       	cp	r14, r1
    147a:	f1 04       	cpc	r15, r1
    147c:	19 f0       	breq	.+6      	; 0x1484 <vfscanf+0x158>
    147e:	f7 01       	movw	r30, r14
    1480:	81 93       	st	Z+, r24
    1482:	7f 01       	movw	r14, r30
    1484:	9a 94       	dec	r9
    1486:	99 f7       	brne	.-26     	; 0x146e <vfscanf+0x142>
    1488:	4f c0       	rjmp	.+158    	; 0x1528 <vfscanf+0x1fc>
    148a:	1b 35       	cpi	r17, 0x5B	; 91
    148c:	59 f4       	brne	.+22     	; 0x14a4 <vfscanf+0x178>
    148e:	c5 01       	movw	r24, r10
    1490:	69 2d       	mov	r22, r9
    1492:	a7 01       	movw	r20, r14
    1494:	96 01       	movw	r18, r12
    1496:	0e 94 cc 08 	call	0x1198	; 0x1198 <conv_brk>
    149a:	6c 01       	movw	r12, r24
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	09 f0       	breq	.+2      	; 0x14a2 <vfscanf+0x176>
    14a0:	43 c0       	rjmp	.+134    	; 0x1528 <vfscanf+0x1fc>
    14a2:	3d c0       	rjmp	.+122    	; 0x151e <vfscanf+0x1f2>
    14a4:	c5 01       	movw	r24, r10
    14a6:	0e 94 21 08 	call	0x1042	; 0x1042 <skip_spaces>
    14aa:	97 fd       	sbrc	r25, 7
    14ac:	4b c0       	rjmp	.+150    	; 0x1544 <vfscanf+0x218>
    14ae:	1f 36       	cpi	r17, 0x6F	; 111
    14b0:	59 f1       	breq	.+86     	; 0x1508 <vfscanf+0x1dc>
    14b2:	10 37       	cpi	r17, 0x70	; 112
    14b4:	28 f4       	brcc	.+10     	; 0x14c0 <vfscanf+0x194>
    14b6:	14 36       	cpi	r17, 0x64	; 100
    14b8:	29 f1       	breq	.+74     	; 0x1504 <vfscanf+0x1d8>
    14ba:	19 36       	cpi	r17, 0x69	; 105
    14bc:	39 f5       	brne	.+78     	; 0x150c <vfscanf+0x1e0>
    14be:	27 c0       	rjmp	.+78     	; 0x150e <vfscanf+0x1e2>
    14c0:	13 37       	cpi	r17, 0x73	; 115
    14c2:	19 f0       	breq	.+6      	; 0x14ca <vfscanf+0x19e>
    14c4:	15 37       	cpi	r17, 0x75	; 117
    14c6:	11 f5       	brne	.+68     	; 0x150c <vfscanf+0x1e0>
    14c8:	1d c0       	rjmp	.+58     	; 0x1504 <vfscanf+0x1d8>
    14ca:	c5 01       	movw	r24, r10
    14cc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <fgetc>
    14d0:	ec 01       	movw	r28, r24
    14d2:	97 fd       	sbrc	r25, 7
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <vfscanf+0x1cc>
    14d6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <isspace>
    14da:	89 2b       	or	r24, r25
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <vfscanf+0x1bc>
    14de:	ce 01       	movw	r24, r28
    14e0:	b5 01       	movw	r22, r10
    14e2:	0e 94 24 0b 	call	0x1648	; 0x1648 <ungetc>
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <vfscanf+0x1cc>
    14e8:	e1 14       	cp	r14, r1
    14ea:	f1 04       	cpc	r15, r1
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <vfscanf+0x1c8>
    14ee:	f7 01       	movw	r30, r14
    14f0:	c1 93       	st	Z+, r28
    14f2:	7f 01       	movw	r14, r30
    14f4:	9a 94       	dec	r9
    14f6:	49 f7       	brne	.-46     	; 0x14ca <vfscanf+0x19e>
    14f8:	e1 14       	cp	r14, r1
    14fa:	f1 04       	cpc	r15, r1
    14fc:	a9 f0       	breq	.+42     	; 0x1528 <vfscanf+0x1fc>
    14fe:	f7 01       	movw	r30, r14
    1500:	10 82       	st	Z, r1
    1502:	12 c0       	rjmp	.+36     	; 0x1528 <vfscanf+0x1fc>
    1504:	00 62       	ori	r16, 0x20	; 32
    1506:	03 c0       	rjmp	.+6      	; 0x150e <vfscanf+0x1e2>
    1508:	00 61       	ori	r16, 0x10	; 16
    150a:	01 c0       	rjmp	.+2      	; 0x150e <vfscanf+0x1e2>
    150c:	00 64       	ori	r16, 0x40	; 64
    150e:	c5 01       	movw	r24, r10
    1510:	69 2d       	mov	r22, r9
    1512:	a7 01       	movw	r20, r14
    1514:	20 2f       	mov	r18, r16
    1516:	0e 94 3a 08 	call	0x1074	; 0x1074 <conv_int>
    151a:	88 23       	and	r24, r24
    151c:	29 f4       	brne	.+10     	; 0x1528 <vfscanf+0x1fc>
    151e:	f5 01       	movw	r30, r10
    1520:	83 81       	ldd	r24, Z+3	; 0x03
    1522:	80 73       	andi	r24, 0x30	; 48
    1524:	79 f4       	brne	.+30     	; 0x1544 <vfscanf+0x218>
    1526:	13 c0       	rjmp	.+38     	; 0x154e <vfscanf+0x222>
    1528:	00 ff       	sbrs	r16, 0
    152a:	83 94       	inc	r8
    152c:	f5 01       	movw	r30, r10
    152e:	f3 80       	ldd	r15, Z+3	; 0x03
    1530:	f6 01       	movw	r30, r12
    1532:	f3 fc       	sbrc	r15, 3
    1534:	15 91       	lpm	r17, Z+
    1536:	f3 fe       	sbrs	r15, 3
    1538:	11 91       	ld	r17, Z+
    153a:	6f 01       	movw	r12, r30
    153c:	11 23       	and	r17, r17
    153e:	09 f0       	breq	.+2      	; 0x1542 <vfscanf+0x216>
    1540:	0b cf       	rjmp	.-490    	; 0x1358 <vfscanf+0x2c>
    1542:	05 c0       	rjmp	.+10     	; 0x154e <vfscanf+0x222>
    1544:	88 20       	and	r8, r8
    1546:	19 f4       	brne	.+6      	; 0x154e <vfscanf+0x222>
    1548:	2f ef       	ldi	r18, 0xFF	; 255
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfscanf+0x226>
    154e:	28 2d       	mov	r18, r8
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	c9 01       	movw	r24, r18
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	8f 90       	pop	r8
    156c:	7f 90       	pop	r7
    156e:	6f 90       	pop	r6
    1570:	08 95       	ret

00001572 <isspace>:
    1572:	91 11       	cpse	r25, r1
    1574:	e1 c0       	rjmp	.+450    	; 0x1738 <__ctype_isfalse>
    1576:	80 32       	cpi	r24, 0x20	; 32
    1578:	19 f0       	breq	.+6      	; 0x1580 <isspace+0xe>
    157a:	89 50       	subi	r24, 0x09	; 9
    157c:	85 50       	subi	r24, 0x05	; 5
    157e:	d0 f7       	brcc	.-12     	; 0x1574 <isspace+0x2>
    1580:	08 95       	ret

00001582 <strchr_P>:
    1582:	fc 01       	movw	r30, r24
    1584:	05 90       	lpm	r0, Z+
    1586:	06 16       	cp	r0, r22
    1588:	21 f0       	breq	.+8      	; 0x1592 <strchr_P+0x10>
    158a:	00 20       	and	r0, r0
    158c:	d9 f7       	brne	.-10     	; 0x1584 <strchr_P+0x2>
    158e:	c0 01       	movw	r24, r0
    1590:	08 95       	ret
    1592:	31 97       	sbiw	r30, 0x01	; 1
    1594:	cf 01       	movw	r24, r30
    1596:	08 95       	ret

00001598 <strnlen_P>:
    1598:	fc 01       	movw	r30, r24
    159a:	05 90       	lpm	r0, Z+
    159c:	61 50       	subi	r22, 0x01	; 1
    159e:	70 40       	sbci	r23, 0x00	; 0
    15a0:	01 10       	cpse	r0, r1
    15a2:	d8 f7       	brcc	.-10     	; 0x159a <strnlen_P+0x2>
    15a4:	80 95       	com	r24
    15a6:	90 95       	com	r25
    15a8:	8e 0f       	add	r24, r30
    15aa:	9f 1f       	adc	r25, r31
    15ac:	08 95       	ret

000015ae <strnlen>:
    15ae:	fc 01       	movw	r30, r24
    15b0:	61 50       	subi	r22, 0x01	; 1
    15b2:	70 40       	sbci	r23, 0x00	; 0
    15b4:	01 90       	ld	r0, Z+
    15b6:	01 10       	cpse	r0, r1
    15b8:	d8 f7       	brcc	.-10     	; 0x15b0 <strnlen+0x2>
    15ba:	80 95       	com	r24
    15bc:	90 95       	com	r25
    15be:	8e 0f       	add	r24, r30
    15c0:	9f 1f       	adc	r25, r31
    15c2:	08 95       	ret

000015c4 <fgetc>:
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	4b 81       	ldd	r20, Y+3	; 0x03
    15cc:	40 ff       	sbrs	r20, 0
    15ce:	1a c0       	rjmp	.+52     	; 0x1604 <fgetc+0x40>
    15d0:	46 ff       	sbrs	r20, 6
    15d2:	0a c0       	rjmp	.+20     	; 0x15e8 <fgetc+0x24>
    15d4:	4f 7b       	andi	r20, 0xBF	; 191
    15d6:	4b 83       	std	Y+3, r20	; 0x03
    15d8:	8e 81       	ldd	r24, Y+6	; 0x06
    15da:	9f 81       	ldd	r25, Y+7	; 0x07
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	9f 83       	std	Y+7, r25	; 0x07
    15e0:	8e 83       	std	Y+6, r24	; 0x06
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	2b c0       	rjmp	.+86     	; 0x163e <fgetc+0x7a>
    15e8:	42 ff       	sbrs	r20, 2
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <fgetc+0x4e>
    15ec:	e8 81       	ld	r30, Y
    15ee:	f9 81       	ldd	r31, Y+1	; 0x01
    15f0:	80 81       	ld	r24, Z
    15f2:	28 2f       	mov	r18, r24
    15f4:	33 27       	eor	r19, r19
    15f6:	27 fd       	sbrc	r18, 7
    15f8:	30 95       	com	r19
    15fa:	21 15       	cp	r18, r1
    15fc:	31 05       	cpc	r19, r1
    15fe:	29 f4       	brne	.+10     	; 0x160a <fgetc+0x46>
    1600:	40 62       	ori	r20, 0x20	; 32
    1602:	4b 83       	std	Y+3, r20	; 0x03
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <fgetc+0x7c>
    160a:	31 96       	adiw	r30, 0x01	; 1
    160c:	f9 83       	std	Y+1, r31	; 0x01
    160e:	e8 83       	st	Y, r30
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <fgetc+0x70>
    1612:	ea 85       	ldd	r30, Y+10	; 0x0a
    1614:	fb 85       	ldd	r31, Y+11	; 0x0b
    1616:	ce 01       	movw	r24, r28
    1618:	09 95       	icall
    161a:	9c 01       	movw	r18, r24
    161c:	97 ff       	sbrs	r25, 7
    161e:	0a c0       	rjmp	.+20     	; 0x1634 <fgetc+0x70>
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	2f 5f       	subi	r18, 0xFF	; 255
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	11 f0       	breq	.+4      	; 0x162c <fgetc+0x68>
    1628:	80 e2       	ldi	r24, 0x20	; 32
    162a:	01 c0       	rjmp	.+2      	; 0x162e <fgetc+0x6a>
    162c:	80 e1       	ldi	r24, 0x10	; 16
    162e:	89 2b       	or	r24, r25
    1630:	8b 83       	std	Y+3, r24	; 0x03
    1632:	e8 cf       	rjmp	.-48     	; 0x1604 <fgetc+0x40>
    1634:	8e 81       	ldd	r24, Y+6	; 0x06
    1636:	9f 81       	ldd	r25, Y+7	; 0x07
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	9f 83       	std	Y+7, r25	; 0x07
    163c:	8e 83       	std	Y+6, r24	; 0x06
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	c9 01       	movw	r24, r18
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <ungetc>:
    1648:	9c 01       	movw	r18, r24
    164a:	fb 01       	movw	r30, r22
    164c:	83 81       	ldd	r24, Z+3	; 0x03
    164e:	80 ff       	sbrs	r24, 0
    1650:	11 c0       	rjmp	.+34     	; 0x1674 <ungetc+0x2c>
    1652:	86 fd       	sbrc	r24, 6
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <ungetc+0x2c>
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	2f 3f       	cpi	r18, 0xFF	; 255
    165a:	39 07       	cpc	r19, r25
    165c:	59 f0       	breq	.+22     	; 0x1674 <ungetc+0x2c>
    165e:	22 83       	std	Z+2, r18	; 0x02
    1660:	80 64       	ori	r24, 0x40	; 64
    1662:	8f 7d       	andi	r24, 0xDF	; 223
    1664:	83 83       	std	Z+3, r24	; 0x03
    1666:	86 81       	ldd	r24, Z+6	; 0x06
    1668:	97 81       	ldd	r25, Z+7	; 0x07
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	97 83       	std	Z+7, r25	; 0x07
    166e:	86 83       	std	Z+6, r24	; 0x06
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <ungetc+0x30>
    1674:	2f ef       	ldi	r18, 0xFF	; 255
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	c9 01       	movw	r24, r18
    167a:	08 95       	ret

0000167c <__ultoa_invert>:
    167c:	fa 01       	movw	r30, r20
    167e:	aa 27       	eor	r26, r26
    1680:	28 30       	cpi	r18, 0x08	; 8
    1682:	51 f1       	breq	.+84     	; 0x16d8 <__ultoa_invert+0x5c>
    1684:	20 31       	cpi	r18, 0x10	; 16
    1686:	81 f1       	breq	.+96     	; 0x16e8 <__ultoa_invert+0x6c>
    1688:	e8 94       	clt
    168a:	6f 93       	push	r22
    168c:	6e 7f       	andi	r22, 0xFE	; 254
    168e:	6e 5f       	subi	r22, 0xFE	; 254
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	af 4f       	sbci	r26, 0xFF	; 255
    1698:	b1 e0       	ldi	r27, 0x01	; 1
    169a:	3e d0       	rcall	.+124    	; 0x1718 <__ultoa_invert+0x9c>
    169c:	b4 e0       	ldi	r27, 0x04	; 4
    169e:	3c d0       	rcall	.+120    	; 0x1718 <__ultoa_invert+0x9c>
    16a0:	67 0f       	add	r22, r23
    16a2:	78 1f       	adc	r23, r24
    16a4:	89 1f       	adc	r24, r25
    16a6:	9a 1f       	adc	r25, r26
    16a8:	a1 1d       	adc	r26, r1
    16aa:	68 0f       	add	r22, r24
    16ac:	79 1f       	adc	r23, r25
    16ae:	8a 1f       	adc	r24, r26
    16b0:	91 1d       	adc	r25, r1
    16b2:	a1 1d       	adc	r26, r1
    16b4:	6a 0f       	add	r22, r26
    16b6:	71 1d       	adc	r23, r1
    16b8:	81 1d       	adc	r24, r1
    16ba:	91 1d       	adc	r25, r1
    16bc:	a1 1d       	adc	r26, r1
    16be:	20 d0       	rcall	.+64     	; 0x1700 <__ultoa_invert+0x84>
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <__ultoa_invert+0x48>
    16c2:	68 94       	set
    16c4:	3f 91       	pop	r19
    16c6:	2a e0       	ldi	r18, 0x0A	; 10
    16c8:	26 9f       	mul	r18, r22
    16ca:	11 24       	eor	r1, r1
    16cc:	30 19       	sub	r19, r0
    16ce:	30 5d       	subi	r19, 0xD0	; 208
    16d0:	31 93       	st	Z+, r19
    16d2:	de f6       	brtc	.-74     	; 0x168a <__ultoa_invert+0xe>
    16d4:	cf 01       	movw	r24, r30
    16d6:	08 95       	ret
    16d8:	46 2f       	mov	r20, r22
    16da:	47 70       	andi	r20, 0x07	; 7
    16dc:	40 5d       	subi	r20, 0xD0	; 208
    16de:	41 93       	st	Z+, r20
    16e0:	b3 e0       	ldi	r27, 0x03	; 3
    16e2:	0f d0       	rcall	.+30     	; 0x1702 <__ultoa_invert+0x86>
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__ultoa_invert+0x5c>
    16e6:	f6 cf       	rjmp	.-20     	; 0x16d4 <__ultoa_invert+0x58>
    16e8:	46 2f       	mov	r20, r22
    16ea:	4f 70       	andi	r20, 0x0F	; 15
    16ec:	40 5d       	subi	r20, 0xD0	; 208
    16ee:	4a 33       	cpi	r20, 0x3A	; 58
    16f0:	18 f0       	brcs	.+6      	; 0x16f8 <__ultoa_invert+0x7c>
    16f2:	49 5d       	subi	r20, 0xD9	; 217
    16f4:	31 fd       	sbrc	r19, 1
    16f6:	40 52       	subi	r20, 0x20	; 32
    16f8:	41 93       	st	Z+, r20
    16fa:	02 d0       	rcall	.+4      	; 0x1700 <__ultoa_invert+0x84>
    16fc:	a9 f7       	brne	.-22     	; 0x16e8 <__ultoa_invert+0x6c>
    16fe:	ea cf       	rjmp	.-44     	; 0x16d4 <__ultoa_invert+0x58>
    1700:	b4 e0       	ldi	r27, 0x04	; 4
    1702:	a6 95       	lsr	r26
    1704:	97 95       	ror	r25
    1706:	87 95       	ror	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	ba 95       	dec	r27
    170e:	c9 f7       	brne	.-14     	; 0x1702 <__ultoa_invert+0x86>
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	61 05       	cpc	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	08 95       	ret
    1718:	9b 01       	movw	r18, r22
    171a:	ac 01       	movw	r20, r24
    171c:	0a 2e       	mov	r0, r26
    171e:	06 94       	lsr	r0
    1720:	57 95       	ror	r21
    1722:	47 95       	ror	r20
    1724:	37 95       	ror	r19
    1726:	27 95       	ror	r18
    1728:	ba 95       	dec	r27
    172a:	c9 f7       	brne	.-14     	; 0x171e <__ultoa_invert+0xa2>
    172c:	62 0f       	add	r22, r18
    172e:	73 1f       	adc	r23, r19
    1730:	84 1f       	adc	r24, r20
    1732:	95 1f       	adc	r25, r21
    1734:	a0 1d       	adc	r26, r0
    1736:	08 95       	ret

00001738 <__ctype_isfalse>:
    1738:	99 27       	eor	r25, r25
    173a:	88 27       	eor	r24, r24

0000173c <__ctype_istrue>:
    173c:	08 95       	ret

0000173e <_exit>:
    173e:	f8 94       	cli

00001740 <__stop_program>:
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <__stop_program>
