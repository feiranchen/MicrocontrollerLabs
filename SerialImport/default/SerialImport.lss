
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000162a  000016be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000162a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080014e  0080014e  0000170c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d0  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ebd  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e2  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d2  00000000  00000000  00002ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  000037b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007af  00000000  00000000  00003d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000044bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      68:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      70:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      7c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      80:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      84:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

000000d3 <LCD_dur_syllable>:
      d3:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

000000e4 <LCD_rpt_interval>:
      e4:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

000000f4 <LCD_playing>:
      f4:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000103 <LCD_line_clear>:
     103:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000115 <LcdCustomChar>:
     115:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     125:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     135:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     145:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000155 <__c.1988>:
     155:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d0 e4       	ldi	r29, 0x40	; 64
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ea e2       	ldi	r30, 0x2A	; 42
     176:	f6 e1       	ldi	r31, 0x16	; 22
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0b bf       	out	0x3b, r16	; 59
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
     17e:	07 90       	elpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	ae 34       	cpi	r26, 0x4E	; 78
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	ae e4       	ldi	r26, 0x4E	; 78
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a0 3e       	cpi	r26, 0xE0	; 224
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 39 01 	call	0x272	; 0x272 <main>
     19c:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <port_init>:
int args[3] ;

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     1a4:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     1a6:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     1ac:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     1ae:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     1b0:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     1b2:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     1b4:	5a 9a       	sbi	0x0b, 2	; 11
end
     1b6:	08 95       	ret

000001b8 <get_User_Input>:
	CopyStringtoLCD(LCD_initialize, 0, 0);
	LCD_char_count = 0;
end

void get_User_Input(void* args) 
begin
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	28 97       	sbiw	r28, 0x08	; 8
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	c9 2e       	mov	r12, r25
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	d9 2e       	mov	r13, r25
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	e8 2e       	mov	r14, r24
     1e4:	f1 2c       	mov	r15, r1
     1e6:	ec 0e       	add	r14, r28
     1e8:	fd 1e       	adc	r15, r29
     1ea:	8e 01       	movw	r16, r28
     1ec:	0f 5f       	subi	r16, 0xFF	; 255
     1ee:	1f 4f       	sbci	r17, 0xFF	; 255
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     1f0:	60 91 dc 01 	lds	r22, 0x01DC
     1f4:	70 91 dd 01 	lds	r23, 0x01DD
     1f8:	8e e3       	ldi	r24, 0x3E	; 62
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
     200:	8d b7       	in	r24, 0x3d	; 61
     202:	9e b7       	in	r25, 0x3e	; 62
     204:	08 97       	sbiw	r24, 0x08	; 8
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	9e bf       	out	0x3e, r25	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	8d bf       	out	0x3d, r24	; 61
     210:	ed b7       	in	r30, 0x3d	; 61
     212:	fe b7       	in	r31, 0x3e	; 62
     214:	31 96       	adiw	r30, 0x01	; 1
     216:	80 91 da 01 	lds	r24, 0x01DA
     21a:	90 91 db 01 	lds	r25, 0x01DB
     21e:	ad b7       	in	r26, 0x3d	; 61
     220:	be b7       	in	r27, 0x3e	; 62
     222:	12 96       	adiw	r26, 0x02	; 2
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	11 97       	sbiw	r26, 0x01	; 1
     22a:	d3 82       	std	Z+3, r13	; 0x03
     22c:	c2 82       	std	Z+2, r12	; 0x02
     22e:	f5 82       	std	Z+5, r15	; 0x05
     230:	e4 82       	std	Z+4, r14	; 0x04
     232:	17 83       	std	Z+7, r17	; 0x07
     234:	06 83       	std	Z+6, r16	; 0x06
     236:	0e 94 13 05 	call	0xa26	; 0xa26 <fscanf>
     23a:	8d b7       	in	r24, 0x3d	; 61
     23c:	9e b7       	in	r25, 0x3e	; 62
     23e:	08 96       	adiw	r24, 0x08	; 8
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	9e bf       	out	0x3e, r25	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	8d bf       	out	0x3d, r24	; 61
     24a:	d2 cf       	rjmp	.-92     	; 0x1f0 <get_User_Input+0x38>

0000024c <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     24c:	0e 94 c5 03 	call	0x78a	; 0x78a <LCDinit>
	LCDcursorOFF();
     250:	0e 94 2d 04 	call	0x85a	; 0x85a <LCDcursorOFF>
	LCDclr();	//clear the display
     254:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LCDclr>
	LCDGotoXY(0,0);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     260:	8c e8       	ldi	r24, 0x8C	; 140
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	0e 94 8a 03 	call	0x714	; 0x714 <CopyStringtoLCD>
	LCD_char_count = 0;
     26c:	10 92 b7 01 	sts	0x01B7, r1
end
     270:	08 95       	ret

00000272 <main>:




// --- Main Program ----------------------------------
int main(void) {
     272:	4f 92       	push	r4
     274:	5f 92       	push	r5
     276:	6f 92       	push	r6
     278:	7f 92       	push	r7
     27a:	8f 92       	push	r8
     27c:	9f 92       	push	r9
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	63 97       	sbiw	r28, 0x13	; 19
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
  int i =0;
  char buffer[17];
  uint16_t file_size = 0;
     2a0:	1a 82       	std	Y+2, r1	; 0x02
     2a2:	19 82       	std	Y+1, r1	; 0x01
  char* file;
  LCD_init();
     2a4:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     2a8:	0e 94 34 02 	call	0x468	; 0x468 <uart_init>
  stdout = stdin = stderr = &uart_str;
     2ac:	68 e3       	ldi	r22, 0x38	; 56
     2ae:	71 e0       	ldi	r23, 0x01	; 1
     2b0:	70 93 df 01 	sts	0x01DF, r23
     2b4:	60 93 de 01 	sts	0x01DE, r22
     2b8:	70 93 db 01 	sts	0x01DB, r23
     2bc:	60 93 da 01 	sts	0x01DA, r22
     2c0:	70 93 dd 01 	sts	0x01DD, r23
     2c4:	60 93 dc 01 	sts	0x01DC, r22

  // Allocate memory for the buffer	
  fprintf(stdout,"File Length\n\r");
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <main+0x60>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <main+0x62>
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <main+0x64>
     2d6:	ed b7       	in	r30, 0x3d	; 61
     2d8:	fe b7       	in	r31, 0x3e	; 62
     2da:	31 96       	adiw	r30, 0x01	; 1
     2dc:	80 91 da 01 	lds	r24, 0x01DA
     2e0:	90 91 db 01 	lds	r25, 0x01DB
     2e4:	ad b7       	in	r26, 0x3d	; 61
     2e6:	be b7       	in	r27, 0x3e	; 62
     2e8:	12 96       	adiw	r26, 0x02	; 2
     2ea:	9c 93       	st	X, r25
     2ec:	8e 93       	st	-X, r24
     2ee:	11 97       	sbiw	r26, 0x01	; 1
     2f0:	84 e1       	ldi	r24, 0x14	; 20
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	95 83       	std	Z+5, r25	; 0x05
     2fe:	84 83       	std	Z+4, r24	; 0x04
     300:	0e 94 13 05 	call	0xa26	; 0xa26 <fscanf>
  sprintf(lcd_buffer2,"File Len:%-i.    ", file_size);
     304:	ed b7       	in	r30, 0x3d	; 61
     306:	fe b7       	in	r31, 0x3e	; 62
     308:	31 96       	adiw	r30, 0x01	; 1
     30a:	09 ec       	ldi	r16, 0xC9	; 201
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	ad b7       	in	r26, 0x3d	; 61
     310:	be b7       	in	r27, 0x3e	; 62
     312:	12 96       	adiw	r26, 0x02	; 2
     314:	1c 93       	st	X, r17
     316:	0e 93       	st	-X, r16
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	88 e1       	ldi	r24, 0x18	; 24
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	93 83       	std	Z+3, r25	; 0x03
     320:	82 83       	std	Z+2, r24	; 0x02
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	95 83       	std	Z+5, r25	; 0x05
     328:	84 83       	std	Z+4, r24	; 0x04
     32a:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>

	LCDGotoXY(0, 0);
     32e:	8d b7       	in	r24, 0x3d	; 61
     330:	9e b7       	in	r25, 0x3e	; 62
     332:	06 96       	adiw	r24, 0x06	; 6
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	9e bf       	out	0x3e, r25	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	8d bf       	out	0x3d, r24	; 61
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     346:	f8 01       	movw	r30, r16
     348:	01 90       	ld	r0, Z+
     34a:	00 20       	and	r0, r0
     34c:	e9 f7       	brne	.-6      	; 0x348 <main+0xd6>
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	e0 1b       	sub	r30, r16
     352:	f1 0b       	sbc	r31, r17
     354:	c8 01       	movw	r24, r16
     356:	6e 2f       	mov	r22, r30
     358:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCDstring>
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15

for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     360:	5f e2       	ldi	r21, 0x2F	; 47
     362:	45 2e       	mov	r4, r21
     364:	51 e0       	ldi	r21, 0x01	; 1
     366:	55 2e       	mov	r5, r21
     368:	43 e0       	ldi	r20, 0x03	; 3
     36a:	a4 2e       	mov	r10, r20
     36c:	b1 2c       	mov	r11, r1
     36e:	ac 0e       	add	r10, r28
     370:	bd 1e       	adc	r11, r29

    sprintf(lcd_buffer2,"%-i  ", i++);
     372:	d0 2e       	mov	r13, r16
     374:	01 2f       	mov	r16, r17
     376:	32 e3       	ldi	r19, 0x32	; 50
     378:	63 2e       	mov	r6, r19
     37a:	31 e0       	ldi	r19, 0x01	; 1
     37c:	73 2e       	mov	r7, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     37e:	20 e9       	ldi	r18, 0x90	; 144
     380:	82 2e       	mov	r8, r18
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	92 2e       	mov	r9, r18
     386:	52 c0       	rjmp	.+164    	; 0x42c <main+0x1ba>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     388:	60 91 dc 01 	lds	r22, 0x01DC
     38c:	70 91 dd 01 	lds	r23, 0x01DD
     390:	8a e2       	ldi	r24, 0x2A	; 42
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <fputs>
	fscanf(stdin, "%s", buffer) ;
     398:	00 d0       	rcall	.+0      	; 0x39a <main+0x128>
     39a:	00 d0       	rcall	.+0      	; 0x39c <main+0x12a>
     39c:	00 d0       	rcall	.+0      	; 0x39e <main+0x12c>
     39e:	ed b7       	in	r30, 0x3d	; 61
     3a0:	fe b7       	in	r31, 0x3e	; 62
     3a2:	31 96       	adiw	r30, 0x01	; 1
     3a4:	80 91 da 01 	lds	r24, 0x01DA
     3a8:	90 91 db 01 	lds	r25, 0x01DB
     3ac:	ad b7       	in	r26, 0x3d	; 61
     3ae:	be b7       	in	r27, 0x3e	; 62
     3b0:	12 96       	adiw	r26, 0x02	; 2
     3b2:	9c 93       	st	X, r25
     3b4:	8e 93       	st	-X, r24
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	53 82       	std	Z+3, r5	; 0x03
     3ba:	42 82       	std	Z+2, r4	; 0x02
     3bc:	b5 82       	std	Z+5, r11	; 0x05
     3be:	a4 82       	std	Z+4, r10	; 0x04
     3c0:	0e 94 13 05 	call	0xa26	; 0xa26 <fscanf>

    sprintf(lcd_buffer2,"%-i  ", i++);
     3c4:	ed b7       	in	r30, 0x3d	; 61
     3c6:	fe b7       	in	r31, 0x3e	; 62
     3c8:	31 96       	adiw	r30, 0x01	; 1
     3ca:	ad b7       	in	r26, 0x3d	; 61
     3cc:	be b7       	in	r27, 0x3e	; 62
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	dc 92       	st	X, r13
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	12 96       	adiw	r26, 0x02	; 2
     3d6:	0c 93       	st	X, r16
     3d8:	73 82       	std	Z+3, r7	; 0x03
     3da:	62 82       	std	Z+2, r6	; 0x02
     3dc:	f5 82       	std	Z+5, r15	; 0x05
     3de:	e4 82       	std	Z+4, r14	; 0x04
     3e0:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
	LCDGotoXY(14, 0);
     3e4:	8d b7       	in	r24, 0x3d	; 61
     3e6:	9e b7       	in	r25, 0x3e	; 62
     3e8:	06 96       	adiw	r24, 0x06	; 6
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	9e bf       	out	0x3e, r25	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	8d bf       	out	0x3d, r24	; 61
     3f4:	8e e0       	ldi	r24, 0x0E	; 14
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     3fc:	8d 2d       	mov	r24, r13
     3fe:	90 2f       	mov	r25, r16
     400:	62 e0       	ldi	r22, 0x02	; 2
     402:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCDstring>

	LCDGotoXY(0, 1);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCDGotoXY>
	LCDstring(buffer,15);
     40e:	c5 01       	movw	r24, r10
     410:	6f e0       	ldi	r22, 0x0F	; 15
     412:	0e 94 66 03 	call	0x6cc	; 0x6cc <LCDstring>
     416:	80 e1       	ldi	r24, 0x10	; 16
     418:	97 e2       	ldi	r25, 0x27	; 39
     41a:	f4 01       	movw	r30, r8
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <main+0x1aa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     420:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     422:	d9 f7       	brne	.-10     	; 0x41a <main+0x1a8>
  sprintf(lcd_buffer2,"File Len:%-i.    ", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

for (i=0; i<file_size; i++)
     424:	a2 e0       	ldi	r26, 0x02	; 2
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	ea 0e       	add	r14, r26
     42a:	fb 1e       	adc	r15, r27
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	e8 16       	cp	r14, r24
     432:	f9 06       	cpc	r15, r25
     434:	08 f4       	brcc	.+2      	; 0x438 <main+0x1c6>
     436:	a8 cf       	rjmp	.-176    	; 0x388 <main+0x116>
	LCDstring(buffer,15);
	_delay_ms(1000);
  end


} // main
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	63 96       	adiw	r28, 0x13	; 19
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	9f 90       	pop	r9
     45c:	8f 90       	pop	r8
     45e:	7f 90       	pop	r7
     460:	6f 90       	pop	r6
     462:	5f 90       	pop	r5
     464:	4f 90       	pop	r4
     466:	08 95       	ret

00000468 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     468:	87 e6       	ldi	r24, 0x67	; 103
     46a:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     46e:	88 e1       	ldi	r24, 0x18	; 24
     470:	80 93 c1 00 	sts	0x00C1, r24
}
     474:	08 95       	ret

00000476 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     476:	1f 93       	push	r17
     478:	18 2f       	mov	r17, r24

  if (c == '\a')
     47a:	87 30       	cpi	r24, 0x07	; 7
     47c:	49 f4       	brne	.+18     	; 0x490 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     47e:	60 91 de 01 	lds	r22, 0x01DE
     482:	70 91 df 01 	lds	r23, 0x01DF
     486:	86 e4       	ldi	r24, 0x46	; 70
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <fputs>
     48e:	0b c0       	rjmp	.+22     	; 0x4a6 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     490:	8a 30       	cpi	r24, 0x0A	; 10
     492:	19 f4       	brne	.+6      	; 0x49a <uart_putchar+0x24>
    uart_putchar('\r', stream);
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     49a:	80 91 c0 00 	lds	r24, 0x00C0
     49e:	85 ff       	sbrs	r24, 5
     4a0:	fc cf       	rjmp	.-8      	; 0x49a <uart_putchar+0x24>
  UDR0 = c;
     4a2:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     4bc:	80 91 4e 01 	lds	r24, 0x014E
     4c0:	90 91 4f 01 	lds	r25, 0x014F
     4c4:	89 2b       	or	r24, r25
     4c6:	09 f0       	breq	.+2      	; 0x4ca <uart_getchar+0x1c>
     4c8:	9f c0       	rjmp	.+318    	; 0x608 <uart_getchar+0x15a>
     4ca:	00 e5       	ldi	r16, 0x50	; 80
     4cc:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     4ce:	80 91 c0 00 	lds	r24, 0x00C0
     4d2:	87 ff       	sbrs	r24, 7
     4d4:	fc cf       	rjmp	.-8      	; 0x4ce <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     4d6:	80 91 c0 00 	lds	r24, 0x00C0
     4da:	84 ff       	sbrs	r24, 4
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <uart_getchar+0x36>
     4de:	2e ef       	ldi	r18, 0xFE	; 254
     4e0:	3f ef       	ldi	r19, 0xFF	; 255
     4e2:	a6 c0       	rjmp	.+332    	; 0x630 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     4e4:	80 91 c0 00 	lds	r24, 0x00C0
     4e8:	83 fd       	sbrc	r24, 3
     4ea:	a0 c0       	rjmp	.+320    	; 0x62c <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     4ec:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     4f0:	9d 30       	cpi	r25, 0x0D	; 13
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     4f4:	9a 30       	cpi	r25, 0x0A	; 10
     4f6:	69 f4       	brne	.+26     	; 0x512 <uart_getchar+0x64>
	  {
	    *cp = c;
     4f8:	8a e0       	ldi	r24, 0x0A	; 10
     4fa:	f8 01       	movw	r30, r16
     4fc:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     4fe:	b7 01       	movw	r22, r14
     500:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
	    rxp = b;
     504:	80 e5       	ldi	r24, 0x50	; 80
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	90 93 4f 01 	sts	0x014F, r25
     50c:	80 93 4e 01 	sts	0x014E, r24
     510:	7b c0       	rjmp	.+246    	; 0x608 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     512:	99 30       	cpi	r25, 0x09	; 9
     514:	09 f4       	brne	.+2      	; 0x518 <uart_getchar+0x6a>
     516:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     518:	89 2f       	mov	r24, r25
     51a:	80 52       	subi	r24, 0x20	; 32
     51c:	8f 35       	cpi	r24, 0x5F	; 95
     51e:	10 f0       	brcs	.+4      	; 0x524 <uart_getchar+0x76>
     520:	90 3a       	cpi	r25, 0xA0	; 160
     522:	70 f0       	brcs	.+28     	; 0x540 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	0f 39       	cpi	r16, 0x9F	; 159
     528:	1f 07       	cpc	r17, r31
     52a:	11 f4       	brne	.+4      	; 0x530 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     52c:	87 e0       	ldi	r24, 0x07	; 7
     52e:	04 c0       	rjmp	.+8      	; 0x538 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     530:	f8 01       	movw	r30, r16
     532:	91 93       	st	Z+, r25
     534:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     536:	89 2f       	mov	r24, r25
     538:	b7 01       	movw	r22, r14
     53a:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
     53e:	c7 cf       	rjmp	.-114    	; 0x4ce <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     540:	92 31       	cpi	r25, 0x12	; 18
     542:	39 f1       	breq	.+78     	; 0x592 <uart_getchar+0xe4>
     544:	93 31       	cpi	r25, 0x13	; 19
     546:	38 f4       	brcc	.+14     	; 0x556 <uart_getchar+0xa8>
     548:	93 30       	cpi	r25, 0x03	; 3
     54a:	09 f4       	brne	.+2      	; 0x54e <uart_getchar+0xa0>
     54c:	6f c0       	rjmp	.+222    	; 0x62c <uart_getchar+0x17e>
     54e:	98 30       	cpi	r25, 0x08	; 8
     550:	09 f0       	breq	.+2      	; 0x554 <uart_getchar+0xa6>
     552:	bd cf       	rjmp	.-134    	; 0x4ce <uart_getchar+0x20>
     554:	09 c0       	rjmp	.+18     	; 0x568 <uart_getchar+0xba>
     556:	97 31       	cpi	r25, 0x17	; 23
     558:	09 f4       	brne	.+2      	; 0x55c <uart_getchar+0xae>
     55a:	4b c0       	rjmp	.+150    	; 0x5f2 <uart_getchar+0x144>
     55c:	9f 37       	cpi	r25, 0x7F	; 127
     55e:	21 f0       	breq	.+8      	; 0x568 <uart_getchar+0xba>
     560:	95 31       	cpi	r25, 0x15	; 21
     562:	09 f0       	breq	.+2      	; 0x566 <uart_getchar+0xb8>
     564:	b4 cf       	rjmp	.-152    	; 0x4ce <uart_getchar+0x20>
     566:	32 c0       	rjmp	.+100    	; 0x5cc <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	00 35       	cpi	r16, 0x50	; 80
     56c:	1f 07       	cpc	r17, r31
     56e:	09 f0       	breq	.+2      	; 0x572 <uart_getchar+0xc4>
     570:	08 f4       	brcc	.+2      	; 0x574 <uart_getchar+0xc6>
     572:	ad cf       	rjmp	.-166    	; 0x4ce <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     574:	88 e0       	ldi	r24, 0x08	; 8
     576:	b7 01       	movw	r22, r14
     578:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		uart_putchar(' ', stream);
     57c:	80 e2       	ldi	r24, 0x20	; 32
     57e:	b7 01       	movw	r22, r14
     580:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		uart_putchar('\b', stream);
     584:	88 e0       	ldi	r24, 0x08	; 8
     586:	b7 01       	movw	r22, r14
     588:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		cp--;
     58c:	01 50       	subi	r16, 0x01	; 1
     58e:	10 40       	sbci	r17, 0x00	; 0
     590:	9e cf       	rjmp	.-196    	; 0x4ce <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     592:	8d e0       	ldi	r24, 0x0D	; 13
     594:	b7 01       	movw	r22, r14
     596:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
     59a:	c0 e5       	ldi	r28, 0x50	; 80
     59c:	d1 e0       	ldi	r29, 0x01	; 1
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     5a0:	89 91       	ld	r24, Y+
     5a2:	b7 01       	movw	r22, r14
     5a4:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     5a8:	c0 17       	cp	r28, r16
     5aa:	d1 07       	cpc	r29, r17
     5ac:	c8 f3       	brcs	.-14     	; 0x5a0 <uart_getchar+0xf2>
     5ae:	8f cf       	rjmp	.-226    	; 0x4ce <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     5b0:	88 e0       	ldi	r24, 0x08	; 8
     5b2:	b7 01       	movw	r22, r14
     5b4:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		uart_putchar(' ', stream);
     5b8:	80 e2       	ldi	r24, 0x20	; 32
     5ba:	b7 01       	movw	r22, r14
     5bc:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		uart_putchar('\b', stream);
     5c0:	88 e0       	ldi	r24, 0x08	; 8
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		cp--;
     5c8:	01 50       	subi	r16, 0x01	; 1
     5ca:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	00 35       	cpi	r16, 0x50	; 80
     5d0:	18 07       	cpc	r17, r24
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <uart_getchar+0x128>
     5d4:	68 f7       	brcc	.-38     	; 0x5b0 <uart_getchar+0x102>
     5d6:	7b cf       	rjmp	.-266    	; 0x4ce <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     5d8:	88 e0       	ldi	r24, 0x08	; 8
     5da:	b7 01       	movw	r22, r14
     5dc:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		uart_putchar(' ', stream);
     5e0:	80 e2       	ldi	r24, 0x20	; 32
     5e2:	b7 01       	movw	r22, r14
     5e4:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
		uart_putchar('\b', stream);
     5e8:	88 e0       	ldi	r24, 0x08	; 8
     5ea:	b7 01       	movw	r22, r14
     5ec:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putchar>
     5f0:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     5f2:	e1 e0       	ldi	r30, 0x01	; 1
     5f4:	00 35       	cpi	r16, 0x50	; 80
     5f6:	1e 07       	cpc	r17, r30
     5f8:	09 f0       	breq	.+2      	; 0x5fc <uart_getchar+0x14e>
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <uart_getchar+0x150>
     5fc:	68 cf       	rjmp	.-304    	; 0x4ce <uart_getchar+0x20>
     5fe:	e8 01       	movw	r28, r16
     600:	8a 91       	ld	r24, -Y
     602:	80 32       	cpi	r24, 0x20	; 32
     604:	49 f7       	brne	.-46     	; 0x5d8 <uart_getchar+0x12a>
     606:	63 cf       	rjmp	.-314    	; 0x4ce <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     608:	e0 91 4e 01 	lds	r30, 0x014E
     60c:	f0 91 4f 01 	lds	r31, 0x014F
     610:	81 91       	ld	r24, Z+
     612:	f0 93 4f 01 	sts	0x014F, r31
     616:	e0 93 4e 01 	sts	0x014E, r30
  if (c == '\n')
     61a:	8a 30       	cpi	r24, 0x0A	; 10
     61c:	21 f4       	brne	.+8      	; 0x626 <uart_getchar+0x178>
    rxp = 0;
     61e:	10 92 4f 01 	sts	0x014F, r1
     622:	10 92 4e 01 	sts	0x014E, r1

  return c;
     626:	28 2f       	mov	r18, r24
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <uart_getchar+0x182>
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	3f ef       	ldi	r19, 0xFF	; 255
}
     630:	c9 01       	movw	r24, r18
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     640:	28 2f       	mov	r18, r24
     642:	20 7f       	andi	r18, 0xF0	; 240
     644:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     646:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     648:	42 9a       	sbi	0x08, 2	; 8
     64a:	24 ef       	ldi	r18, 0xF4	; 244
     64c:	31 e0       	ldi	r19, 0x01	; 1
     64e:	f9 01       	movw	r30, r18
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     654:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     656:	40 98       	cbi	0x08, 0	; 8
     658:	f9 01       	movw	r30, r18
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	44 e0       	ldi	r20, 0x04	; 4
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	4a 95       	dec	r20
     668:	e1 f7       	brne	.-8      	; 0x662 <LCDsendChar+0x22>
     66a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     66c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     66e:	42 9a       	sbi	0x08, 2	; 8
     670:	c9 01       	movw	r24, r18
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     676:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     678:	40 98       	cbi	0x08, 0	; 8
     67a:	c9 01       	movw	r24, r18
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     680:	08 95       	ret

00000682 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     682:	28 2f       	mov	r18, r24
     684:	20 7f       	andi	r18, 0xF0	; 240
     686:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     688:	42 9a       	sbi	0x08, 2	; 8
     68a:	24 ef       	ldi	r18, 0xF4	; 244
     68c:	31 e0       	ldi	r19, 0x01	; 1
     68e:	f9 01       	movw	r30, r18
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     694:	42 98       	cbi	0x08, 2	; 8
     696:	f9 01       	movw	r30, r18
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	54 e0       	ldi	r21, 0x04	; 4
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	5a 95       	dec	r21
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <LCDsendCommand+0x1e>
     6a8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     6aa:	42 9a       	sbi	0x08, 2	; 8
     6ac:	c9 01       	movw	r24, r18
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6b2:	42 98       	cbi	0x08, 2	; 8
     6b4:	c9 01       	movw	r24, r18
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     6ba:	08 95       	ret

000006bc <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     6c2:	08 95       	ret

000006c4 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     6ca:	08 95       	ret

000006cc <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	49 f0       	breq	.+18     	; 0x6ec <LCDstring+0x20>
     6da:	ec 01       	movw	r28, r24
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     6e0:	89 91       	ld	r24, Y+
     6e2:	0e 94 20 03 	call	0x640	; 0x640 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     6e6:	1f 5f       	subi	r17, 0xFF	; 255
     6e8:	10 17       	cp	r17, r16
     6ea:	d0 f3       	brcs	.-12     	; 0x6e0 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	08 95       	ret

000006f6 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     6f6:	62 30       	cpi	r22, 0x02	; 2
     6f8:	31 f0       	breq	.+12     	; 0x706 <LCDGotoXY+0x10>
     6fa:	63 30       	cpi	r22, 0x03	; 3
     6fc:	31 f0       	breq	.+12     	; 0x70a <LCDGotoXY+0x14>
     6fe:	61 30       	cpi	r22, 0x01	; 1
     700:	29 f4       	brne	.+10     	; 0x70c <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     702:	80 5c       	subi	r24, 0xC0	; 192
     704:	03 c0       	rjmp	.+6      	; 0x70c <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     706:	8c 5e       	subi	r24, 0xEC	; 236
     708:	01 c0       	rjmp	.+2      	; 0x70c <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     70a:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     70c:	80 68       	ori	r24, 0x80	; 128
     70e:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
	
}
     712:	08 95       	ret

00000714 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     71e:	64 2f       	mov	r22, r20
     720:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LCDGotoXY>
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	03 c0       	rjmp	.+6      	; 0x72e <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     728:	0e 94 20 03 	call	0x640	; 0x640 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     72c:	1f 5f       	subi	r17, 0xFF	; 255
     72e:	fe 01       	movw	r30, r28
     730:	e1 0f       	add	r30, r17
     732:	f1 1d       	adc	r31, r1
     734:	84 91       	lpm	r24, Z+
     736:	88 23       	and	r24, r24
     738:	b9 f7       	brne	.-18     	; 0x728 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	08 95       	ret

00000742 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	7c 01       	movw	r14, r24
     750:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     752:	11 0f       	add	r17, r17
     754:	11 0f       	add	r17, r17
     756:	11 0f       	add	r17, r17
     758:	10 64       	ori	r17, 0x40	; 64
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     75e:	f7 01       	movw	r30, r14
     760:	ec 0f       	add	r30, r28
     762:	fd 1f       	adc	r31, r29
     764:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     766:	81 2f       	mov	r24, r17
     768:	8c 0f       	add	r24, r28
     76a:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
		LCDsendChar(pcc);
     76e:	80 2f       	mov	r24, r16
     770:	0e 94 20 03 	call	0x640	; 0x640 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     774:	21 96       	adiw	r28, 0x01	; 1
     776:	c8 30       	cpi	r28, 0x08	; 8
     778:	d1 05       	cpc	r29, r1
     77a:	89 f7       	brne	.-30     	; 0x75e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	08 95       	ret

0000078a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	86 ea       	ldi	r24, 0xA6	; 166
     792:	9e e0       	ldi	r25, 0x0E	; 14
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     798:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     79a:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     79c:	87 b1       	in	r24, 0x07	; 7
     79e:	80 6f       	ori	r24, 0xF0	; 240
     7a0:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     7a2:	87 b1       	in	r24, 0x07	; 7
     7a4:	87 60       	ori	r24, 0x07	; 7
     7a6:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     7a8:	80 e3       	ldi	r24, 0x30	; 48
     7aa:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7ac:	42 9a       	sbi	0x08, 2	; 8
     7ae:	24 ef       	ldi	r18, 0xF4	; 244
     7b0:	31 e0       	ldi	r19, 0x01	; 1
     7b2:	f9 01       	movw	r30, r18
     7b4:	31 97       	sbiw	r30, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7b8:	42 98       	cbi	0x08, 2	; 8
     7ba:	f9 01       	movw	r30, r18
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     7c0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7c2:	42 9a       	sbi	0x08, 2	; 8
     7c4:	c9 01       	movw	r24, r18
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7ca:	42 98       	cbi	0x08, 2	; 8
     7cc:	c9 01       	movw	r24, r18
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     7d2:	80 e2       	ldi	r24, 0x20	; 32
     7d4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7d6:	42 9a       	sbi	0x08, 2	; 8
     7d8:	c9 01       	movw	r24, r18
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7de:	42 98       	cbi	0x08, 2	; 8
     7e0:	c9 01       	movw	r24, r18
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     7e6:	88 e2       	ldi	r24, 0x28	; 40
     7e8:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     7ec:	8c e0       	ldi	r24, 0x0C	; 12
     7ee:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
     7f2:	c5 e1       	ldi	r28, 0x15	; 21
     7f4:	d1 e0       	ldi	r29, 0x01	; 1
     7f6:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     7f8:	16 2f       	mov	r17, r22
     7fa:	1f 5f       	subi	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	0e 94 a1 03 	call	0x742	; 0x742 <LCDdefinechar>
     802:	28 96       	adiw	r28, 0x08	; 8
     804:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     806:	18 30       	cpi	r17, 0x08	; 8
     808:	b9 f7       	brne	.-18     	; 0x7f8 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	08 95       	ret

00000812 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	08 2f       	mov	r16, r24
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	04 c0       	rjmp	.+8      	; 0x824 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     81c:	8e e1       	ldi	r24, 0x1E	; 30
     81e:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     822:	1f 5f       	subi	r17, 0xFF	; 255
     824:	10 17       	cp	r17, r16
     826:	d0 f3       	brcs	.-12     	; 0x81c <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	08 2f       	mov	r16, r24
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	04 c0       	rjmp	.+8      	; 0x840 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     838:	88 e1       	ldi	r24, 0x18	; 24
     83a:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     83e:	1f 5f       	subi	r17, 0xFF	; 255
     840:	10 17       	cp	r17, r16
     842:	d0 f3       	brcs	.-12     	; 0x838 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     84a:	8e e0       	ldi	r24, 0x0E	; 14
     84c:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     850:	08 95       	ret

00000852 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     852:	8f e0       	ldi	r24, 0x0F	; 15
     854:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     858:	08 95       	ret

0000085a <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     85a:	8c e0       	ldi	r24, 0x0C	; 12
     85c:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     860:	08 95       	ret

00000862 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     868:	08 95       	ret

0000086a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     86a:	8c e0       	ldi	r24, 0x0C	; 12
     86c:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
}
     870:	08 95       	ret

00000872 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	08 2f       	mov	r16, r24
     878:	10 e0       	ldi	r17, 0x00	; 0
     87a:	04 c0       	rjmp	.+8      	; 0x884 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     87c:	80 e1       	ldi	r24, 0x10	; 16
     87e:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     882:	1f 5f       	subi	r17, 0xFF	; 255
     884:	10 17       	cp	r17, r16
     886:	d0 f3       	brcs	.-12     	; 0x87c <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	08 95       	ret

0000088e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	08 2f       	mov	r16, r24
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     898:	84 e1       	ldi	r24, 0x14	; 20
     89a:	0e 94 41 03 	call	0x682	; 0x682 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     89e:	1f 5f       	subi	r17, 0xFF	; 255
     8a0:	10 17       	cp	r17, r16
     8a2:	d0 f3       	brcs	.-12     	; 0x898 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     8ba:	96 e0       	ldi	r25, 0x06	; 6
     8bc:	89 9f       	mul	r24, r25
     8be:	c0 01       	movw	r24, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	24 2f       	mov	r18, r20
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	ac 01       	movw	r20, r24
     8c8:	42 9f       	mul	r20, r18
     8ca:	c0 01       	movw	r24, r0
     8cc:	43 9f       	mul	r20, r19
     8ce:	90 0d       	add	r25, r0
     8d0:	52 9f       	mul	r21, r18
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	0e 94 a9 04 	call	0x952	; 0x952 <__divmodhi4>
     8dc:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     8de:	cb 01       	movw	r24, r22
     8e0:	66 e0       	ldi	r22, 0x06	; 6
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	0e 94 95 04 	call	0x92a	; 0x92a <__udivmodhi4>
     8e8:	e8 2e       	mov	r14, r24
     8ea:	ff 24       	eor	r15, r15
     8ec:	00 e0       	ldi	r16, 0x00	; 0
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	12 c0       	rjmp	.+36     	; 0x916 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     8f2:	c8 01       	movw	r24, r16
     8f4:	05 96       	adiw	r24, 0x05	; 5
     8f6:	c8 17       	cp	r28, r24
     8f8:	d9 07       	cpc	r29, r25
     8fa:	10 f0       	brcs	.+4      	; 0x900 <LCDprogressBar+0x56>
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     900:	c0 17       	cp	r28, r16
     902:	d1 07       	cpc	r29, r17
     904:	10 f0       	brcs	.+4      	; 0x90a <LCDprogressBar+0x60>
     906:	8e 2d       	mov	r24, r14
     908:	01 c0       	rjmp	.+2      	; 0x90c <LCDprogressBar+0x62>
     90a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     90c:	0e 94 20 03 	call	0x640	; 0x640 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     910:	f3 94       	inc	r15
     912:	0a 5f       	subi	r16, 0xFA	; 250
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	fd 14       	cp	r15, r13
     918:	60 f3       	brcs	.-40     	; 0x8f2 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	08 95       	ret

0000092a <__udivmodhi4>:
     92a:	aa 1b       	sub	r26, r26
     92c:	bb 1b       	sub	r27, r27
     92e:	51 e1       	ldi	r21, 0x11	; 17
     930:	07 c0       	rjmp	.+14     	; 0x940 <__udivmodhi4_ep>

00000932 <__udivmodhi4_loop>:
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	a6 17       	cp	r26, r22
     938:	b7 07       	cpc	r27, r23
     93a:	10 f0       	brcs	.+4      	; 0x940 <__udivmodhi4_ep>
     93c:	a6 1b       	sub	r26, r22
     93e:	b7 0b       	sbc	r27, r23

00000940 <__udivmodhi4_ep>:
     940:	88 1f       	adc	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	5a 95       	dec	r21
     946:	a9 f7       	brne	.-22     	; 0x932 <__udivmodhi4_loop>
     948:	80 95       	com	r24
     94a:	90 95       	com	r25
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	08 95       	ret

00000952 <__divmodhi4>:
     952:	97 fb       	bst	r25, 7
     954:	09 2e       	mov	r0, r25
     956:	07 26       	eor	r0, r23
     958:	0a d0       	rcall	.+20     	; 0x96e <__divmodhi4_neg1>
     95a:	77 fd       	sbrc	r23, 7
     95c:	04 d0       	rcall	.+8      	; 0x966 <__divmodhi4_neg2>
     95e:	e5 df       	rcall	.-54     	; 0x92a <__udivmodhi4>
     960:	06 d0       	rcall	.+12     	; 0x96e <__divmodhi4_neg1>
     962:	00 20       	and	r0, r0
     964:	1a f4       	brpl	.+6      	; 0x96c <__divmodhi4_exit>

00000966 <__divmodhi4_neg2>:
     966:	70 95       	com	r23
     968:	61 95       	neg	r22
     96a:	7f 4f       	sbci	r23, 0xFF	; 255

0000096c <__divmodhi4_exit>:
     96c:	08 95       	ret

0000096e <__divmodhi4_neg1>:
     96e:	f6 f7       	brtc	.-4      	; 0x96c <__divmodhi4_exit>
     970:	90 95       	com	r25
     972:	81 95       	neg	r24
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	08 95       	ret

00000978 <fputc>:
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	8c 01       	movw	r16, r24
     982:	eb 01       	movw	r28, r22
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	81 ff       	sbrs	r24, 1
     988:	1b c0       	rjmp	.+54     	; 0x9c0 <fputc+0x48>
     98a:	82 ff       	sbrs	r24, 2
     98c:	0d c0       	rjmp	.+26     	; 0x9a8 <fputc+0x30>
     98e:	2e 81       	ldd	r18, Y+6	; 0x06
     990:	3f 81       	ldd	r19, Y+7	; 0x07
     992:	8c 81       	ldd	r24, Y+4	; 0x04
     994:	9d 81       	ldd	r25, Y+5	; 0x05
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	64 f4       	brge	.+24     	; 0x9b4 <fputc+0x3c>
     99c:	e8 81       	ld	r30, Y
     99e:	f9 81       	ldd	r31, Y+1	; 0x01
     9a0:	01 93       	st	Z+, r16
     9a2:	f9 83       	std	Y+1, r31	; 0x01
     9a4:	e8 83       	st	Y, r30
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <fputc+0x3c>
     9a8:	e8 85       	ldd	r30, Y+8	; 0x08
     9aa:	f9 85       	ldd	r31, Y+9	; 0x09
     9ac:	80 2f       	mov	r24, r16
     9ae:	09 95       	icall
     9b0:	89 2b       	or	r24, r25
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <fputc+0x48>
     9b4:	8e 81       	ldd	r24, Y+6	; 0x06
     9b6:	9f 81       	ldd	r25, Y+7	; 0x07
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	9f 83       	std	Y+7, r25	; 0x07
     9bc:	8e 83       	std	Y+6, r24	; 0x06
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <fputc+0x4c>
     9c0:	0f ef       	ldi	r16, 0xFF	; 255
     9c2:	1f ef       	ldi	r17, 0xFF	; 255
     9c4:	c8 01       	movw	r24, r16
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <fputs>:
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	7c 01       	movw	r14, r24
     9de:	8b 01       	movw	r16, r22
     9e0:	db 01       	movw	r26, r22
     9e2:	13 96       	adiw	r26, 0x03	; 3
     9e4:	8c 91       	ld	r24, X
     9e6:	81 fd       	sbrc	r24, 1
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <fputs+0x20>
     9ea:	cf ef       	ldi	r28, 0xFF	; 255
     9ec:	df ef       	ldi	r29, 0xFF	; 255
     9ee:	13 c0       	rjmp	.+38     	; 0xa16 <fputs+0x46>
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	0b c0       	rjmp	.+22     	; 0xa0c <fputs+0x3c>
     9f6:	d8 01       	movw	r26, r16
     9f8:	18 96       	adiw	r26, 0x08	; 8
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	19 97       	sbiw	r26, 0x09	; 9
     a00:	b8 01       	movw	r22, r16
     a02:	09 95       	icall
     a04:	89 2b       	or	r24, r25
     a06:	11 f0       	breq	.+4      	; 0xa0c <fputs+0x3c>
     a08:	cf ef       	ldi	r28, 0xFF	; 255
     a0a:	df ef       	ldi	r29, 0xFF	; 255
     a0c:	f7 01       	movw	r30, r14
     a0e:	81 91       	ld	r24, Z+
     a10:	7f 01       	movw	r14, r30
     a12:	88 23       	and	r24, r24
     a14:	81 f7       	brne	.-32     	; 0x9f6 <fputs+0x26>
     a16:	ce 01       	movw	r24, r28
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	08 95       	ret

00000a26 <fscanf>:
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	9e 01       	movw	r18, r28
     a30:	27 5f       	subi	r18, 0xF7	; 247
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	8d 81       	ldd	r24, Y+5	; 0x05
     a36:	9e 81       	ldd	r25, Y+6	; 0x06
     a38:	6f 81       	ldd	r22, Y+7	; 0x07
     a3a:	78 85       	ldd	r23, Y+8	; 0x08
     a3c:	a9 01       	movw	r20, r18
     a3e:	0e 94 0a 09 	call	0x1214	; 0x1214 <vfscanf>
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	08 95       	ret

00000a48 <sprintf>:
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	df 93       	push	r29
     a4e:	cf 93       	push	r28
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	2e 97       	sbiw	r28, 0x0e	; 14
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
     a60:	0d 89       	ldd	r16, Y+21	; 0x15
     a62:	1e 89       	ldd	r17, Y+22	; 0x16
     a64:	86 e0       	ldi	r24, 0x06	; 6
     a66:	8c 83       	std	Y+4, r24	; 0x04
     a68:	1a 83       	std	Y+2, r17	; 0x02
     a6a:	09 83       	std	Y+1, r16	; 0x01
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	9f e7       	ldi	r25, 0x7F	; 127
     a70:	9e 83       	std	Y+6, r25	; 0x06
     a72:	8d 83       	std	Y+5, r24	; 0x05
     a74:	9e 01       	movw	r18, r28
     a76:	27 5e       	subi	r18, 0xE7	; 231
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	6f 89       	ldd	r22, Y+23	; 0x17
     a80:	78 8d       	ldd	r23, Y+24	; 0x18
     a82:	a9 01       	movw	r20, r18
     a84:	0e 94 55 05 	call	0xaaa	; 0xaaa <vfprintf>
     a88:	2f 81       	ldd	r18, Y+7	; 0x07
     a8a:	38 85       	ldd	r19, Y+8	; 0x08
     a8c:	02 0f       	add	r16, r18
     a8e:	13 1f       	adc	r17, r19
     a90:	f8 01       	movw	r30, r16
     a92:	10 82       	st	Z, r1
     a94:	2e 96       	adiw	r28, 0x0e	; 14
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	cf 91       	pop	r28
     aa2:	df 91       	pop	r29
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <vfprintf>:
     aaa:	2f 92       	push	r2
     aac:	3f 92       	push	r3
     aae:	4f 92       	push	r4
     ab0:	5f 92       	push	r5
     ab2:	6f 92       	push	r6
     ab4:	7f 92       	push	r7
     ab6:	8f 92       	push	r8
     ab8:	9f 92       	push	r9
     aba:	af 92       	push	r10
     abc:	bf 92       	push	r11
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	df 93       	push	r29
     acc:	cf 93       	push	r28
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	2b 97       	sbiw	r28, 0x0b	; 11
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	f8 94       	cli
     ad8:	de bf       	out	0x3e, r29	; 62
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	cd bf       	out	0x3d, r28	; 61
     ade:	3c 01       	movw	r6, r24
     ae0:	2b 01       	movw	r4, r22
     ae2:	5a 01       	movw	r10, r20
     ae4:	fc 01       	movw	r30, r24
     ae6:	17 82       	std	Z+7, r1	; 0x07
     ae8:	16 82       	std	Z+6, r1	; 0x06
     aea:	83 81       	ldd	r24, Z+3	; 0x03
     aec:	81 fd       	sbrc	r24, 1
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <vfprintf+0x4c>
     af0:	6f ef       	ldi	r22, 0xFF	; 255
     af2:	7f ef       	ldi	r23, 0xFF	; 255
     af4:	c6 c1       	rjmp	.+908    	; 0xe82 <vfprintf+0x3d8>
     af6:	9a e0       	ldi	r25, 0x0A	; 10
     af8:	89 2e       	mov	r8, r25
     afa:	1e 01       	movw	r2, r28
     afc:	08 94       	sec
     afe:	21 1c       	adc	r2, r1
     b00:	31 1c       	adc	r3, r1
     b02:	f3 01       	movw	r30, r6
     b04:	23 81       	ldd	r18, Z+3	; 0x03
     b06:	f2 01       	movw	r30, r4
     b08:	23 fd       	sbrc	r18, 3
     b0a:	85 91       	lpm	r24, Z+
     b0c:	23 ff       	sbrs	r18, 3
     b0e:	81 91       	ld	r24, Z+
     b10:	2f 01       	movw	r4, r30
     b12:	88 23       	and	r24, r24
     b14:	09 f4       	brne	.+2      	; 0xb18 <vfprintf+0x6e>
     b16:	b2 c1       	rjmp	.+868    	; 0xe7c <vfprintf+0x3d2>
     b18:	85 32       	cpi	r24, 0x25	; 37
     b1a:	39 f4       	brne	.+14     	; 0xb2a <vfprintf+0x80>
     b1c:	23 fd       	sbrc	r18, 3
     b1e:	85 91       	lpm	r24, Z+
     b20:	23 ff       	sbrs	r18, 3
     b22:	81 91       	ld	r24, Z+
     b24:	2f 01       	movw	r4, r30
     b26:	85 32       	cpi	r24, 0x25	; 37
     b28:	29 f4       	brne	.+10     	; 0xb34 <vfprintf+0x8a>
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	b3 01       	movw	r22, r6
     b2e:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     b32:	e7 cf       	rjmp	.-50     	; 0xb02 <vfprintf+0x58>
     b34:	98 2f       	mov	r25, r24
     b36:	ff 24       	eor	r15, r15
     b38:	ee 24       	eor	r14, r14
     b3a:	99 24       	eor	r9, r9
     b3c:	ff e1       	ldi	r31, 0x1F	; 31
     b3e:	ff 15       	cp	r31, r15
     b40:	d0 f0       	brcs	.+52     	; 0xb76 <vfprintf+0xcc>
     b42:	9b 32       	cpi	r25, 0x2B	; 43
     b44:	69 f0       	breq	.+26     	; 0xb60 <vfprintf+0xb6>
     b46:	9c 32       	cpi	r25, 0x2C	; 44
     b48:	28 f4       	brcc	.+10     	; 0xb54 <vfprintf+0xaa>
     b4a:	90 32       	cpi	r25, 0x20	; 32
     b4c:	59 f0       	breq	.+22     	; 0xb64 <vfprintf+0xba>
     b4e:	93 32       	cpi	r25, 0x23	; 35
     b50:	91 f4       	brne	.+36     	; 0xb76 <vfprintf+0xcc>
     b52:	0e c0       	rjmp	.+28     	; 0xb70 <vfprintf+0xc6>
     b54:	9d 32       	cpi	r25, 0x2D	; 45
     b56:	49 f0       	breq	.+18     	; 0xb6a <vfprintf+0xc0>
     b58:	90 33       	cpi	r25, 0x30	; 48
     b5a:	69 f4       	brne	.+26     	; 0xb76 <vfprintf+0xcc>
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	24 c0       	rjmp	.+72     	; 0xba8 <vfprintf+0xfe>
     b60:	52 e0       	ldi	r21, 0x02	; 2
     b62:	f5 2a       	or	r15, r21
     b64:	84 e0       	ldi	r24, 0x04	; 4
     b66:	f8 2a       	or	r15, r24
     b68:	28 c0       	rjmp	.+80     	; 0xbba <vfprintf+0x110>
     b6a:	98 e0       	ldi	r25, 0x08	; 8
     b6c:	f9 2a       	or	r15, r25
     b6e:	25 c0       	rjmp	.+74     	; 0xbba <vfprintf+0x110>
     b70:	e0 e1       	ldi	r30, 0x10	; 16
     b72:	fe 2a       	or	r15, r30
     b74:	22 c0       	rjmp	.+68     	; 0xbba <vfprintf+0x110>
     b76:	f7 fc       	sbrc	r15, 7
     b78:	29 c0       	rjmp	.+82     	; 0xbcc <vfprintf+0x122>
     b7a:	89 2f       	mov	r24, r25
     b7c:	80 53       	subi	r24, 0x30	; 48
     b7e:	8a 30       	cpi	r24, 0x0A	; 10
     b80:	70 f4       	brcc	.+28     	; 0xb9e <vfprintf+0xf4>
     b82:	f6 fe       	sbrs	r15, 6
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <vfprintf+0xe6>
     b86:	98 9c       	mul	r9, r8
     b88:	90 2c       	mov	r9, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	98 0e       	add	r9, r24
     b8e:	15 c0       	rjmp	.+42     	; 0xbba <vfprintf+0x110>
     b90:	e8 9c       	mul	r14, r8
     b92:	e0 2c       	mov	r14, r0
     b94:	11 24       	eor	r1, r1
     b96:	e8 0e       	add	r14, r24
     b98:	f0 e2       	ldi	r31, 0x20	; 32
     b9a:	ff 2a       	or	r15, r31
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <vfprintf+0x110>
     b9e:	9e 32       	cpi	r25, 0x2E	; 46
     ba0:	29 f4       	brne	.+10     	; 0xbac <vfprintf+0x102>
     ba2:	f6 fc       	sbrc	r15, 6
     ba4:	6b c1       	rjmp	.+726    	; 0xe7c <vfprintf+0x3d2>
     ba6:	40 e4       	ldi	r20, 0x40	; 64
     ba8:	f4 2a       	or	r15, r20
     baa:	07 c0       	rjmp	.+14     	; 0xbba <vfprintf+0x110>
     bac:	9c 36       	cpi	r25, 0x6C	; 108
     bae:	19 f4       	brne	.+6      	; 0xbb6 <vfprintf+0x10c>
     bb0:	50 e8       	ldi	r21, 0x80	; 128
     bb2:	f5 2a       	or	r15, r21
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <vfprintf+0x110>
     bb6:	98 36       	cpi	r25, 0x68	; 104
     bb8:	49 f4       	brne	.+18     	; 0xbcc <vfprintf+0x122>
     bba:	f2 01       	movw	r30, r4
     bbc:	23 fd       	sbrc	r18, 3
     bbe:	95 91       	lpm	r25, Z+
     bc0:	23 ff       	sbrs	r18, 3
     bc2:	91 91       	ld	r25, Z+
     bc4:	2f 01       	movw	r4, r30
     bc6:	99 23       	and	r25, r25
     bc8:	09 f0       	breq	.+2      	; 0xbcc <vfprintf+0x122>
     bca:	b8 cf       	rjmp	.-144    	; 0xb3c <vfprintf+0x92>
     bcc:	89 2f       	mov	r24, r25
     bce:	85 54       	subi	r24, 0x45	; 69
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	18 f0       	brcs	.+6      	; 0xbda <vfprintf+0x130>
     bd4:	80 52       	subi	r24, 0x20	; 32
     bd6:	83 30       	cpi	r24, 0x03	; 3
     bd8:	38 f4       	brcc	.+14     	; 0xbe8 <vfprintf+0x13e>
     bda:	44 e0       	ldi	r20, 0x04	; 4
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	a4 0e       	add	r10, r20
     be0:	b5 1e       	adc	r11, r21
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	59 83       	std	Y+1, r21	; 0x01
     be6:	0f c0       	rjmp	.+30     	; 0xc06 <vfprintf+0x15c>
     be8:	93 36       	cpi	r25, 0x63	; 99
     bea:	31 f0       	breq	.+12     	; 0xbf8 <vfprintf+0x14e>
     bec:	93 37       	cpi	r25, 0x73	; 115
     bee:	79 f0       	breq	.+30     	; 0xc0e <vfprintf+0x164>
     bf0:	93 35       	cpi	r25, 0x53	; 83
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <vfprintf+0x14c>
     bf4:	56 c0       	rjmp	.+172    	; 0xca2 <vfprintf+0x1f8>
     bf6:	20 c0       	rjmp	.+64     	; 0xc38 <vfprintf+0x18e>
     bf8:	f5 01       	movw	r30, r10
     bfa:	80 81       	ld	r24, Z
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	42 e0       	ldi	r20, 0x02	; 2
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	a4 0e       	add	r10, r20
     c04:	b5 1e       	adc	r11, r21
     c06:	61 01       	movw	r12, r2
     c08:	01 e0       	ldi	r16, 0x01	; 1
     c0a:	10 e0       	ldi	r17, 0x00	; 0
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <vfprintf+0x188>
     c0e:	f5 01       	movw	r30, r10
     c10:	c0 80       	ld	r12, Z
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	f6 fc       	sbrc	r15, 6
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <vfprintf+0x174>
     c18:	6f ef       	ldi	r22, 0xFF	; 255
     c1a:	7f ef       	ldi	r23, 0xFF	; 255
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <vfprintf+0x178>
     c1e:	69 2d       	mov	r22, r9
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	42 e0       	ldi	r20, 0x02	; 2
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	a4 0e       	add	r10, r20
     c28:	b5 1e       	adc	r11, r21
     c2a:	c6 01       	movw	r24, r12
     c2c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <strnlen>
     c30:	8c 01       	movw	r16, r24
     c32:	5f e7       	ldi	r21, 0x7F	; 127
     c34:	f5 22       	and	r15, r21
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <vfprintf+0x1b6>
     c38:	f5 01       	movw	r30, r10
     c3a:	c0 80       	ld	r12, Z
     c3c:	d1 80       	ldd	r13, Z+1	; 0x01
     c3e:	f6 fc       	sbrc	r15, 6
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <vfprintf+0x19e>
     c42:	6f ef       	ldi	r22, 0xFF	; 255
     c44:	7f ef       	ldi	r23, 0xFF	; 255
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <vfprintf+0x1a2>
     c48:	69 2d       	mov	r22, r9
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	42 e0       	ldi	r20, 0x02	; 2
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	a4 0e       	add	r10, r20
     c52:	b5 1e       	adc	r11, r21
     c54:	c6 01       	movw	r24, r12
     c56:	0e 94 40 0a 	call	0x1480	; 0x1480 <strnlen_P>
     c5a:	8c 01       	movw	r16, r24
     c5c:	50 e8       	ldi	r21, 0x80	; 128
     c5e:	f5 2a       	or	r15, r21
     c60:	f3 fe       	sbrs	r15, 3
     c62:	07 c0       	rjmp	.+14     	; 0xc72 <vfprintf+0x1c8>
     c64:	1a c0       	rjmp	.+52     	; 0xc9a <vfprintf+0x1f0>
     c66:	80 e2       	ldi	r24, 0x20	; 32
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	b3 01       	movw	r22, r6
     c6c:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     c70:	ea 94       	dec	r14
     c72:	8e 2d       	mov	r24, r14
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	08 17       	cp	r16, r24
     c78:	19 07       	cpc	r17, r25
     c7a:	a8 f3       	brcs	.-22     	; 0xc66 <vfprintf+0x1bc>
     c7c:	0e c0       	rjmp	.+28     	; 0xc9a <vfprintf+0x1f0>
     c7e:	f6 01       	movw	r30, r12
     c80:	f7 fc       	sbrc	r15, 7
     c82:	85 91       	lpm	r24, Z+
     c84:	f7 fe       	sbrs	r15, 7
     c86:	81 91       	ld	r24, Z+
     c88:	6f 01       	movw	r12, r30
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	b3 01       	movw	r22, r6
     c8e:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     c92:	e1 10       	cpse	r14, r1
     c94:	ea 94       	dec	r14
     c96:	01 50       	subi	r16, 0x01	; 1
     c98:	10 40       	sbci	r17, 0x00	; 0
     c9a:	01 15       	cp	r16, r1
     c9c:	11 05       	cpc	r17, r1
     c9e:	79 f7       	brne	.-34     	; 0xc7e <vfprintf+0x1d4>
     ca0:	ea c0       	rjmp	.+468    	; 0xe76 <vfprintf+0x3cc>
     ca2:	94 36       	cpi	r25, 0x64	; 100
     ca4:	11 f0       	breq	.+4      	; 0xcaa <vfprintf+0x200>
     ca6:	99 36       	cpi	r25, 0x69	; 105
     ca8:	69 f5       	brne	.+90     	; 0xd04 <vfprintf+0x25a>
     caa:	f7 fe       	sbrs	r15, 7
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <vfprintf+0x214>
     cae:	f5 01       	movw	r30, r10
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	42 81       	ldd	r20, Z+2	; 0x02
     cb6:	53 81       	ldd	r21, Z+3	; 0x03
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <vfprintf+0x228>
     cbe:	f5 01       	movw	r30, r10
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	9c 01       	movw	r18, r24
     cc6:	44 27       	eor	r20, r20
     cc8:	37 fd       	sbrc	r19, 7
     cca:	40 95       	com	r20
     ccc:	54 2f       	mov	r21, r20
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a8 0e       	add	r10, r24
     cd4:	b9 1e       	adc	r11, r25
     cd6:	9f e6       	ldi	r25, 0x6F	; 111
     cd8:	f9 22       	and	r15, r25
     cda:	57 ff       	sbrs	r21, 7
     cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x246>
     cde:	50 95       	com	r21
     ce0:	40 95       	com	r20
     ce2:	30 95       	com	r19
     ce4:	21 95       	neg	r18
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	4f 4f       	sbci	r20, 0xFF	; 255
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	e0 e8       	ldi	r30, 0x80	; 128
     cee:	fe 2a       	or	r15, r30
     cf0:	ca 01       	movw	r24, r20
     cf2:	b9 01       	movw	r22, r18
     cf4:	a1 01       	movw	r20, r2
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__ultoa_invert>
     cfe:	d8 2e       	mov	r13, r24
     d00:	d2 18       	sub	r13, r2
     d02:	40 c0       	rjmp	.+128    	; 0xd84 <vfprintf+0x2da>
     d04:	95 37       	cpi	r25, 0x75	; 117
     d06:	29 f4       	brne	.+10     	; 0xd12 <vfprintf+0x268>
     d08:	1f 2d       	mov	r17, r15
     d0a:	1f 7e       	andi	r17, 0xEF	; 239
     d0c:	2a e0       	ldi	r18, 0x0A	; 10
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	1d c0       	rjmp	.+58     	; 0xd4c <vfprintf+0x2a2>
     d12:	1f 2d       	mov	r17, r15
     d14:	19 7f       	andi	r17, 0xF9	; 249
     d16:	9f 36       	cpi	r25, 0x6F	; 111
     d18:	61 f0       	breq	.+24     	; 0xd32 <vfprintf+0x288>
     d1a:	90 37       	cpi	r25, 0x70	; 112
     d1c:	20 f4       	brcc	.+8      	; 0xd26 <vfprintf+0x27c>
     d1e:	98 35       	cpi	r25, 0x58	; 88
     d20:	09 f0       	breq	.+2      	; 0xd24 <vfprintf+0x27a>
     d22:	ac c0       	rjmp	.+344    	; 0xe7c <vfprintf+0x3d2>
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <vfprintf+0x29a>
     d26:	90 37       	cpi	r25, 0x70	; 112
     d28:	39 f0       	breq	.+14     	; 0xd38 <vfprintf+0x28e>
     d2a:	98 37       	cpi	r25, 0x78	; 120
     d2c:	09 f0       	breq	.+2      	; 0xd30 <vfprintf+0x286>
     d2e:	a6 c0       	rjmp	.+332    	; 0xe7c <vfprintf+0x3d2>
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <vfprintf+0x290>
     d32:	28 e0       	ldi	r18, 0x08	; 8
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	0a c0       	rjmp	.+20     	; 0xd4c <vfprintf+0x2a2>
     d38:	10 61       	ori	r17, 0x10	; 16
     d3a:	14 fd       	sbrc	r17, 4
     d3c:	14 60       	ori	r17, 0x04	; 4
     d3e:	20 e1       	ldi	r18, 0x10	; 16
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <vfprintf+0x2a2>
     d44:	14 fd       	sbrc	r17, 4
     d46:	16 60       	ori	r17, 0x06	; 6
     d48:	20 e1       	ldi	r18, 0x10	; 16
     d4a:	32 e0       	ldi	r19, 0x02	; 2
     d4c:	17 ff       	sbrs	r17, 7
     d4e:	08 c0       	rjmp	.+16     	; 0xd60 <vfprintf+0x2b6>
     d50:	f5 01       	movw	r30, r10
     d52:	60 81       	ld	r22, Z
     d54:	71 81       	ldd	r23, Z+1	; 0x01
     d56:	82 81       	ldd	r24, Z+2	; 0x02
     d58:	93 81       	ldd	r25, Z+3	; 0x03
     d5a:	44 e0       	ldi	r20, 0x04	; 4
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <vfprintf+0x2c6>
     d60:	f5 01       	movw	r30, r10
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	bc 01       	movw	r22, r24
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	42 e0       	ldi	r20, 0x02	; 2
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	a4 0e       	add	r10, r20
     d72:	b5 1e       	adc	r11, r21
     d74:	a1 01       	movw	r20, r2
     d76:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__ultoa_invert>
     d7a:	d8 2e       	mov	r13, r24
     d7c:	d2 18       	sub	r13, r2
     d7e:	8f e7       	ldi	r24, 0x7F	; 127
     d80:	f8 2e       	mov	r15, r24
     d82:	f1 22       	and	r15, r17
     d84:	f6 fe       	sbrs	r15, 6
     d86:	0b c0       	rjmp	.+22     	; 0xd9e <vfprintf+0x2f4>
     d88:	5e ef       	ldi	r21, 0xFE	; 254
     d8a:	f5 22       	and	r15, r21
     d8c:	d9 14       	cp	r13, r9
     d8e:	38 f4       	brcc	.+14     	; 0xd9e <vfprintf+0x2f4>
     d90:	f4 fe       	sbrs	r15, 4
     d92:	07 c0       	rjmp	.+14     	; 0xda2 <vfprintf+0x2f8>
     d94:	f2 fc       	sbrc	r15, 2
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <vfprintf+0x2f8>
     d98:	8f ee       	ldi	r24, 0xEF	; 239
     d9a:	f8 22       	and	r15, r24
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <vfprintf+0x2f8>
     d9e:	1d 2d       	mov	r17, r13
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <vfprintf+0x2fa>
     da2:	19 2d       	mov	r17, r9
     da4:	f4 fe       	sbrs	r15, 4
     da6:	0d c0       	rjmp	.+26     	; 0xdc2 <vfprintf+0x318>
     da8:	fe 01       	movw	r30, r28
     daa:	ed 0d       	add	r30, r13
     dac:	f1 1d       	adc	r31, r1
     dae:	80 81       	ld	r24, Z
     db0:	80 33       	cpi	r24, 0x30	; 48
     db2:	19 f4       	brne	.+6      	; 0xdba <vfprintf+0x310>
     db4:	99 ee       	ldi	r25, 0xE9	; 233
     db6:	f9 22       	and	r15, r25
     db8:	08 c0       	rjmp	.+16     	; 0xdca <vfprintf+0x320>
     dba:	1f 5f       	subi	r17, 0xFF	; 255
     dbc:	f2 fe       	sbrs	r15, 2
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x320>
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <vfprintf+0x31e>
     dc2:	8f 2d       	mov	r24, r15
     dc4:	86 78       	andi	r24, 0x86	; 134
     dc6:	09 f0       	breq	.+2      	; 0xdca <vfprintf+0x320>
     dc8:	1f 5f       	subi	r17, 0xFF	; 255
     dca:	0f 2d       	mov	r16, r15
     dcc:	f3 fc       	sbrc	r15, 3
     dce:	14 c0       	rjmp	.+40     	; 0xdf8 <vfprintf+0x34e>
     dd0:	f0 fe       	sbrs	r15, 0
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <vfprintf+0x348>
     dd4:	1e 15       	cp	r17, r14
     dd6:	10 f0       	brcs	.+4      	; 0xddc <vfprintf+0x332>
     dd8:	9d 2c       	mov	r9, r13
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <vfprintf+0x348>
     ddc:	9d 2c       	mov	r9, r13
     dde:	9e 0c       	add	r9, r14
     de0:	91 1a       	sub	r9, r17
     de2:	1e 2d       	mov	r17, r14
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <vfprintf+0x348>
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	b3 01       	movw	r22, r6
     dec:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     df0:	1f 5f       	subi	r17, 0xFF	; 255
     df2:	1e 15       	cp	r17, r14
     df4:	c0 f3       	brcs	.-16     	; 0xde6 <vfprintf+0x33c>
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <vfprintf+0x356>
     df8:	1e 15       	cp	r17, r14
     dfa:	10 f4       	brcc	.+4      	; 0xe00 <vfprintf+0x356>
     dfc:	e1 1a       	sub	r14, r17
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <vfprintf+0x358>
     e00:	ee 24       	eor	r14, r14
     e02:	04 ff       	sbrs	r16, 4
     e04:	0f c0       	rjmp	.+30     	; 0xe24 <vfprintf+0x37a>
     e06:	80 e3       	ldi	r24, 0x30	; 48
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	b3 01       	movw	r22, r6
     e0c:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     e10:	02 ff       	sbrs	r16, 2
     e12:	1d c0       	rjmp	.+58     	; 0xe4e <vfprintf+0x3a4>
     e14:	01 fd       	sbrc	r16, 1
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <vfprintf+0x374>
     e18:	88 e7       	ldi	r24, 0x78	; 120
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <vfprintf+0x390>
     e1e:	88 e5       	ldi	r24, 0x58	; 88
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <vfprintf+0x390>
     e24:	80 2f       	mov	r24, r16
     e26:	86 78       	andi	r24, 0x86	; 134
     e28:	91 f0       	breq	.+36     	; 0xe4e <vfprintf+0x3a4>
     e2a:	01 ff       	sbrs	r16, 1
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <vfprintf+0x388>
     e2e:	8b e2       	ldi	r24, 0x2B	; 43
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <vfprintf+0x38a>
     e32:	80 e2       	ldi	r24, 0x20	; 32
     e34:	f7 fc       	sbrc	r15, 7
     e36:	8d e2       	ldi	r24, 0x2D	; 45
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	b3 01       	movw	r22, r6
     e3c:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0x3a4>
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	b3 01       	movw	r22, r6
     e48:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     e4c:	9a 94       	dec	r9
     e4e:	d9 14       	cp	r13, r9
     e50:	c0 f3       	brcs	.-16     	; 0xe42 <vfprintf+0x398>
     e52:	da 94       	dec	r13
     e54:	f1 01       	movw	r30, r2
     e56:	ed 0d       	add	r30, r13
     e58:	f1 1d       	adc	r31, r1
     e5a:	80 81       	ld	r24, Z
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	b3 01       	movw	r22, r6
     e60:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     e64:	dd 20       	and	r13, r13
     e66:	a9 f7       	brne	.-22     	; 0xe52 <vfprintf+0x3a8>
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x3cc>
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	b3 01       	movw	r22, r6
     e70:	0e 94 bc 04 	call	0x978	; 0x978 <fputc>
     e74:	ea 94       	dec	r14
     e76:	ee 20       	and	r14, r14
     e78:	c1 f7       	brne	.-16     	; 0xe6a <vfprintf+0x3c0>
     e7a:	43 ce       	rjmp	.-890    	; 0xb02 <vfprintf+0x58>
     e7c:	f3 01       	movw	r30, r6
     e7e:	66 81       	ldd	r22, Z+6	; 0x06
     e80:	77 81       	ldd	r23, Z+7	; 0x07
     e82:	cb 01       	movw	r24, r22
     e84:	2b 96       	adiw	r28, 0x0b	; 11
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	9f 90       	pop	r9
     ea6:	8f 90       	pop	r8
     ea8:	7f 90       	pop	r7
     eaa:	6f 90       	pop	r6
     eac:	5f 90       	pop	r5
     eae:	4f 90       	pop	r4
     eb0:	3f 90       	pop	r3
     eb2:	2f 90       	pop	r2
     eb4:	08 95       	ret

00000eb6 <putval>:
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 fd       	sbrc	r18, 0
     eba:	08 c0       	rjmp	.+16     	; 0xecc <putval+0x16>
     ebc:	23 fd       	sbrc	r18, 3
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <putval+0x14>
     ec0:	22 ff       	sbrs	r18, 2
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <putval+0x12>
     ec4:	73 83       	std	Z+3, r23	; 0x03
     ec6:	62 83       	std	Z+2, r22	; 0x02
     ec8:	51 83       	std	Z+1, r21	; 0x01
     eca:	40 83       	st	Z, r20
     ecc:	08 95       	ret

00000ece <mulacc>:
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	44 ff       	sbrs	r20, 4
     ed8:	02 c0       	rjmp	.+4      	; 0xede <mulacc+0x10>
     eda:	33 e0       	ldi	r19, 0x03	; 3
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <mulacc+0x32>
     ede:	46 ff       	sbrs	r20, 6
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <mulacc+0x18>
     ee2:	34 e0       	ldi	r19, 0x04	; 4
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <mulacc+0x32>
     ee6:	db 01       	movw	r26, r22
     ee8:	fc 01       	movw	r30, r24
     eea:	aa 0f       	add	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	ee 1f       	adc	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	10 94       	com	r1
     ef4:	d1 f7       	brne	.-12     	; 0xeea <mulacc+0x1c>
     ef6:	6a 0f       	add	r22, r26
     ef8:	7b 1f       	adc	r23, r27
     efa:	8e 1f       	adc	r24, r30
     efc:	9f 1f       	adc	r25, r31
     efe:	31 e0       	ldi	r19, 0x01	; 1
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	31 50       	subi	r19, 0x01	; 1
     f0a:	d1 f7       	brne	.-12     	; 0xf00 <mulacc+0x32>
     f0c:	7b 01       	movw	r14, r22
     f0e:	8c 01       	movw	r16, r24
     f10:	e2 0e       	add	r14, r18
     f12:	f1 1c       	adc	r15, r1
     f14:	01 1d       	adc	r16, r1
     f16:	11 1d       	adc	r17, r1
     f18:	a8 01       	movw	r20, r16
     f1a:	97 01       	movw	r18, r14
     f1c:	b7 01       	movw	r22, r14
     f1e:	ca 01       	movw	r24, r20
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	08 95       	ret

00000f2a <skip_spaces>:
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	8c 01       	movw	r16, r24
     f34:	c8 01       	movw	r24, r16
     f36:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
     f3a:	ec 01       	movw	r28, r24
     f3c:	97 fd       	sbrc	r25, 7
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <skip_spaces+0x26>
     f40:	0e 94 2d 0a 	call	0x145a	; 0x145a <isspace>
     f44:	89 2b       	or	r24, r25
     f46:	b1 f7       	brne	.-20     	; 0xf34 <skip_spaces+0xa>
     f48:	ce 01       	movw	r24, r28
     f4a:	b8 01       	movw	r22, r16
     f4c:	0e 94 98 0a 	call	0x1530	; 0x1530 <ungetc>
     f50:	ce 01       	movw	r24, r28
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <conv_int>:
     f5c:	af 92       	push	r10
     f5e:	bf 92       	push	r11
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	c6 2e       	mov	r12, r22
     f74:	5a 01       	movw	r10, r20
     f76:	12 2f       	mov	r17, r18
     f78:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
     f7c:	ac 01       	movw	r20, r24
     f7e:	8b 32       	cpi	r24, 0x2B	; 43
     f80:	19 f0       	breq	.+6      	; 0xf88 <conv_int+0x2c>
     f82:	8d 32       	cpi	r24, 0x2D	; 45
     f84:	51 f4       	brne	.+20     	; 0xf9a <conv_int+0x3e>
     f86:	10 68       	ori	r17, 0x80	; 128
     f88:	ca 94       	dec	r12
     f8a:	09 f4       	brne	.+2      	; 0xf8e <conv_int+0x32>
     f8c:	6d c0       	rjmp	.+218    	; 0x1068 <conv_int+0x10c>
     f8e:	ce 01       	movw	r24, r28
     f90:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
     f94:	ac 01       	movw	r20, r24
     f96:	97 fd       	sbrc	r25, 7
     f98:	67 c0       	rjmp	.+206    	; 0x1068 <conv_int+0x10c>
     f9a:	6d ef       	ldi	r22, 0xFD	; 253
     f9c:	d6 2e       	mov	r13, r22
     f9e:	d1 22       	and	r13, r17
     fa0:	8d 2d       	mov	r24, r13
     fa2:	80 73       	andi	r24, 0x30	; 48
     fa4:	01 f5       	brne	.+64     	; 0xfe6 <conv_int+0x8a>
     fa6:	40 33       	cpi	r20, 0x30	; 48
     fa8:	f1 f4       	brne	.+60     	; 0xfe6 <conv_int+0x8a>
     faa:	ca 94       	dec	r12
     fac:	09 f4       	brne	.+2      	; 0xfb0 <conv_int+0x54>
     fae:	47 c0       	rjmp	.+142    	; 0x103e <conv_int+0xe2>
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
     fb6:	ac 01       	movw	r20, r24
     fb8:	97 fd       	sbrc	r25, 7
     fba:	41 c0       	rjmp	.+130    	; 0x103e <conv_int+0xe2>
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	d8 2a       	or	r13, r24
     fc0:	48 37       	cpi	r20, 0x78	; 120
     fc2:	11 f0       	breq	.+4      	; 0xfc8 <conv_int+0x6c>
     fc4:	48 35       	cpi	r20, 0x58	; 88
     fc6:	59 f4       	brne	.+22     	; 0xfde <conv_int+0x82>
     fc8:	80 e4       	ldi	r24, 0x40	; 64
     fca:	d8 2a       	or	r13, r24
     fcc:	ca 94       	dec	r12
     fce:	b9 f1       	breq	.+110    	; 0x103e <conv_int+0xe2>
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
     fd6:	ac 01       	movw	r20, r24
     fd8:	99 23       	and	r25, r25
     fda:	2c f4       	brge	.+10     	; 0xfe6 <conv_int+0x8a>
     fdc:	30 c0       	rjmp	.+96     	; 0x103e <conv_int+0xe2>
     fde:	d6 fc       	sbrc	r13, 6
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <conv_int+0x8a>
     fe2:	80 e1       	ldi	r24, 0x10	; 16
     fe4:	d8 2a       	or	r13, r24
     fe6:	ee 24       	eor	r14, r14
     fe8:	ff 24       	eor	r15, r15
     fea:	87 01       	movw	r16, r14
     fec:	24 2f       	mov	r18, r20
     fee:	20 53       	subi	r18, 0x30	; 48
     ff0:	28 30       	cpi	r18, 0x08	; 8
     ff2:	88 f0       	brcs	.+34     	; 0x1016 <conv_int+0xba>
     ff4:	d4 fc       	sbrc	r13, 4
     ff6:	09 c0       	rjmp	.+18     	; 0x100a <conv_int+0xae>
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	68 f0       	brcs	.+26     	; 0x1016 <conv_int+0xba>
     ffc:	d6 fe       	sbrs	r13, 6
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <conv_int+0xae>
    1000:	2f 7d       	andi	r18, 0xDF	; 223
    1002:	82 2f       	mov	r24, r18
    1004:	81 51       	subi	r24, 0x11	; 17
    1006:	86 30       	cpi	r24, 0x06	; 6
    1008:	28 f0       	brcs	.+10     	; 0x1014 <conv_int+0xb8>
    100a:	ca 01       	movw	r24, r20
    100c:	be 01       	movw	r22, r28
    100e:	0e 94 98 0a 	call	0x1530	; 0x1530 <ungetc>
    1012:	12 c0       	rjmp	.+36     	; 0x1038 <conv_int+0xdc>
    1014:	27 50       	subi	r18, 0x07	; 7
    1016:	c8 01       	movw	r24, r16
    1018:	b7 01       	movw	r22, r14
    101a:	4d 2d       	mov	r20, r13
    101c:	0e 94 67 07 	call	0xece	; 0xece <mulacc>
    1020:	7b 01       	movw	r14, r22
    1022:	8c 01       	movw	r16, r24
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	d8 2a       	or	r13, r24
    1028:	ca 94       	dec	r12
    102a:	61 f0       	breq	.+24     	; 0x1044 <conv_int+0xe8>
    102c:	ce 01       	movw	r24, r28
    102e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
    1032:	ac 01       	movw	r20, r24
    1034:	97 ff       	sbrs	r25, 7
    1036:	da cf       	rjmp	.-76     	; 0xfec <conv_int+0x90>
    1038:	d1 fc       	sbrc	r13, 1
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <conv_int+0xe8>
    103c:	15 c0       	rjmp	.+42     	; 0x1068 <conv_int+0x10c>
    103e:	ee 24       	eor	r14, r14
    1040:	ff 24       	eor	r15, r15
    1042:	87 01       	movw	r16, r14
    1044:	d7 fe       	sbrs	r13, 7
    1046:	08 c0       	rjmp	.+16     	; 0x1058 <conv_int+0xfc>
    1048:	10 95       	com	r17
    104a:	00 95       	com	r16
    104c:	f0 94       	com	r15
    104e:	e0 94       	com	r14
    1050:	e1 1c       	adc	r14, r1
    1052:	f1 1c       	adc	r15, r1
    1054:	01 1d       	adc	r16, r1
    1056:	11 1d       	adc	r17, r1
    1058:	c5 01       	movw	r24, r10
    105a:	b8 01       	movw	r22, r16
    105c:	a7 01       	movw	r20, r14
    105e:	2d 2d       	mov	r18, r13
    1060:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <putval>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	01 c0       	rjmp	.+2      	; 0x106a <conv_int+0x10e>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	af 90       	pop	r10
    107e:	08 95       	ret

00001080 <conv_brk>:
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	a0 97       	sbiw	r28, 0x20	; 32
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	6c 01       	movw	r12, r24
    10ae:	a6 2e       	mov	r10, r22
    10b0:	8a 01       	movw	r16, r20
    10b2:	79 01       	movw	r14, r18
    10b4:	fe 01       	movw	r30, r28
    10b6:	31 96       	adiw	r30, 0x01	; 1
    10b8:	80 e2       	ldi	r24, 0x20	; 32
    10ba:	df 01       	movw	r26, r30
    10bc:	1d 92       	st	X+, r1
    10be:	8a 95       	dec	r24
    10c0:	e9 f7       	brne	.-6      	; 0x10bc <conv_brk+0x3c>
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	4f 01       	movw	r8, r30
    10ce:	a1 e0       	ldi	r26, 0x01	; 1
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	f6 01       	movw	r30, r12
    10d4:	83 81       	ldd	r24, Z+3	; 0x03
    10d6:	f7 01       	movw	r30, r14
    10d8:	83 fd       	sbrc	r24, 3
    10da:	25 91       	lpm	r18, Z+
    10dc:	83 ff       	sbrs	r24, 3
    10de:	21 91       	ld	r18, Z+
    10e0:	7f 01       	movw	r14, r30
    10e2:	22 23       	and	r18, r18
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <conv_brk+0x68>
    10e6:	7e c0       	rjmp	.+252    	; 0x11e4 <conv_brk+0x164>
    10e8:	2e 35       	cpi	r18, 0x5E	; 94
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <conv_brk+0x72>
    10ec:	41 15       	cp	r20, r1
    10ee:	51 05       	cpc	r21, r1
    10f0:	69 f1       	breq	.+90     	; 0x114c <conv_brk+0xcc>
    10f2:	87 2f       	mov	r24, r23
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	84 17       	cp	r24, r20
    10f8:	95 07       	cpc	r25, r21
    10fa:	44 f4       	brge	.+16     	; 0x110c <conv_brk+0x8c>
    10fc:	2d 35       	cpi	r18, 0x5D	; 93
    10fe:	51 f1       	breq	.+84     	; 0x1154 <conv_brk+0xd4>
    1100:	2d 32       	cpi	r18, 0x2D	; 45
    1102:	21 f4       	brne	.+8      	; 0x110c <conv_brk+0x8c>
    1104:	33 23       	and	r19, r19
    1106:	29 f4       	brne	.+10     	; 0x1112 <conv_brk+0x92>
    1108:	31 e0       	ldi	r19, 0x01	; 1
    110a:	21 c0       	rjmp	.+66     	; 0x114e <conv_brk+0xce>
    110c:	33 23       	and	r19, r19
    110e:	09 f4       	brne	.+2      	; 0x1112 <conv_brk+0x92>
    1110:	62 2f       	mov	r22, r18
    1112:	32 2f       	mov	r19, r18
    1114:	83 2f       	mov	r24, r19
    1116:	86 95       	lsr	r24
    1118:	86 95       	lsr	r24
    111a:	86 95       	lsr	r24
    111c:	f4 01       	movw	r30, r8
    111e:	e8 0f       	add	r30, r24
    1120:	f1 1d       	adc	r31, r1
    1122:	83 2f       	mov	r24, r19
    1124:	87 70       	andi	r24, 0x07	; 7
    1126:	3d 01       	movw	r6, r26
    1128:	02 c0       	rjmp	.+4      	; 0x112e <conv_brk+0xae>
    112a:	66 0c       	add	r6, r6
    112c:	77 1c       	adc	r7, r7
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <conv_brk+0xaa>
    1132:	20 81       	ld	r18, Z
    1134:	26 29       	or	r18, r6
    1136:	20 83       	st	Z, r18
    1138:	36 17       	cp	r19, r22
    113a:	11 f4       	brne	.+4      	; 0x1140 <conv_brk+0xc0>
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	07 c0       	rjmp	.+14     	; 0x114e <conv_brk+0xce>
    1140:	36 17       	cp	r19, r22
    1142:	10 f4       	brcc	.+4      	; 0x1148 <conv_brk+0xc8>
    1144:	3f 5f       	subi	r19, 0xFF	; 255
    1146:	e6 cf       	rjmp	.-52     	; 0x1114 <conv_brk+0x94>
    1148:	31 50       	subi	r19, 0x01	; 1
    114a:	e4 cf       	rjmp	.-56     	; 0x1114 <conv_brk+0x94>
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	4f 5f       	subi	r20, 0xFF	; 255
    1150:	5f 4f       	sbci	r21, 0xFF	; 255
    1152:	bf cf       	rjmp	.-130    	; 0x10d2 <conv_brk+0x52>
    1154:	33 23       	and	r19, r19
    1156:	19 f0       	breq	.+6      	; 0x115e <conv_brk+0xde>
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	80 62       	ori	r24, 0x20	; 32
    115c:	8e 83       	std	Y+6, r24	; 0x06
    115e:	77 23       	and	r23, r23
    1160:	59 f0       	breq	.+22     	; 0x1178 <conv_brk+0xf8>
    1162:	fe 01       	movw	r30, r28
    1164:	31 96       	adiw	r30, 0x01	; 1
    1166:	9e 01       	movw	r18, r28
    1168:	2f 5d       	subi	r18, 0xDF	; 223
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	80 81       	ld	r24, Z
    116e:	80 95       	com	r24
    1170:	81 93       	st	Z+, r24
    1172:	e2 17       	cp	r30, r18
    1174:	f3 07       	cpc	r31, r19
    1176:	d1 f7       	brne	.-12     	; 0x116c <conv_brk+0xec>
    1178:	bb 24       	eor	r11, r11
    117a:	b3 94       	inc	r11
    117c:	4e 01       	movw	r8, r28
    117e:	08 94       	sec
    1180:	81 1c       	adc	r8, r1
    1182:	91 1c       	adc	r9, r1
    1184:	c6 01       	movw	r24, r12
    1186:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
    118a:	ac 01       	movw	r20, r24
    118c:	97 fd       	sbrc	r25, 7
    118e:	22 c0       	rjmp	.+68     	; 0x11d4 <conv_brk+0x154>
    1190:	86 95       	lsr	r24
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	f4 01       	movw	r30, r8
    1198:	e8 0f       	add	r30, r24
    119a:	f1 1d       	adc	r31, r1
    119c:	80 81       	ld	r24, Z
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9a 01       	movw	r18, r20
    11a2:	27 70       	andi	r18, 0x07	; 7
    11a4:	30 70       	andi	r19, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <conv_brk+0x12c>
    11a8:	95 95       	asr	r25
    11aa:	87 95       	ror	r24
    11ac:	2a 95       	dec	r18
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <conv_brk+0x128>
    11b0:	80 fd       	sbrc	r24, 0
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <conv_brk+0x13e>
    11b4:	ca 01       	movw	r24, r20
    11b6:	b6 01       	movw	r22, r12
    11b8:	0e 94 98 0a 	call	0x1530	; 0x1530 <ungetc>
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <conv_brk+0x154>
    11be:	01 15       	cp	r16, r1
    11c0:	11 05       	cpc	r17, r1
    11c2:	19 f0       	breq	.+6      	; 0x11ca <conv_brk+0x14a>
    11c4:	d8 01       	movw	r26, r16
    11c6:	4d 93       	st	X+, r20
    11c8:	8d 01       	movw	r16, r26
    11ca:	aa 94       	dec	r10
    11cc:	bb 24       	eor	r11, r11
    11ce:	aa 20       	and	r10, r10
    11d0:	c9 f6       	brne	.-78     	; 0x1184 <conv_brk+0x104>
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <conv_brk+0x158>
    11d4:	bb 20       	and	r11, r11
    11d6:	31 f4       	brne	.+12     	; 0x11e4 <conv_brk+0x164>
    11d8:	01 15       	cp	r16, r1
    11da:	11 05       	cpc	r17, r1
    11dc:	29 f0       	breq	.+10     	; 0x11e8 <conv_brk+0x168>
    11de:	f8 01       	movw	r30, r16
    11e0:	10 82       	st	Z, r1
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <conv_brk+0x168>
    11e4:	ee 24       	eor	r14, r14
    11e6:	ff 24       	eor	r15, r15
    11e8:	c7 01       	movw	r24, r14
    11ea:	a0 96       	adiw	r28, 0x20	; 32
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	08 95       	ret

00001214 <vfscanf>:
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	5c 01       	movw	r10, r24
    1232:	6b 01       	movw	r12, r22
    1234:	3a 01       	movw	r6, r20
    1236:	fc 01       	movw	r30, r24
    1238:	17 82       	std	Z+7, r1	; 0x07
    123a:	16 82       	std	Z+6, r1	; 0x06
    123c:	88 24       	eor	r8, r8
    123e:	ea c0       	rjmp	.+468    	; 0x1414 <vfscanf+0x200>
    1240:	81 2f       	mov	r24, r17
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 2d 0a 	call	0x145a	; 0x145a <isspace>
    1248:	89 2b       	or	r24, r25
    124a:	21 f0       	breq	.+8      	; 0x1254 <vfscanf+0x40>
    124c:	c5 01       	movw	r24, r10
    124e:	0e 94 95 07 	call	0xf2a	; 0xf2a <skip_spaces>
    1252:	e0 c0       	rjmp	.+448    	; 0x1414 <vfscanf+0x200>
    1254:	15 32       	cpi	r17, 0x25	; 37
    1256:	49 f4       	brne	.+18     	; 0x126a <vfscanf+0x56>
    1258:	f6 01       	movw	r30, r12
    125a:	f3 fc       	sbrc	r15, 3
    125c:	65 91       	lpm	r22, Z+
    125e:	f3 fe       	sbrs	r15, 3
    1260:	61 91       	ld	r22, Z+
    1262:	6f 01       	movw	r12, r30
    1264:	65 32       	cpi	r22, 0x25	; 37
    1266:	69 f4       	brne	.+26     	; 0x1282 <vfscanf+0x6e>
    1268:	15 e2       	ldi	r17, 0x25	; 37
    126a:	c5 01       	movw	r24, r10
    126c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
    1270:	97 fd       	sbrc	r25, 7
    1272:	dc c0       	rjmp	.+440    	; 0x142c <vfscanf+0x218>
    1274:	18 17       	cp	r17, r24
    1276:	09 f4       	brne	.+2      	; 0x127a <vfscanf+0x66>
    1278:	cd c0       	rjmp	.+410    	; 0x1414 <vfscanf+0x200>
    127a:	b5 01       	movw	r22, r10
    127c:	0e 94 98 0a 	call	0x1530	; 0x1530 <ungetc>
    1280:	da c0       	rjmp	.+436    	; 0x1436 <vfscanf+0x222>
    1282:	6a 32       	cpi	r22, 0x2A	; 42
    1284:	19 f0       	breq	.+6      	; 0x128c <vfscanf+0x78>
    1286:	16 2f       	mov	r17, r22
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	06 c0       	rjmp	.+12     	; 0x1298 <vfscanf+0x84>
    128c:	f3 fc       	sbrc	r15, 3
    128e:	15 91       	lpm	r17, Z+
    1290:	f3 fe       	sbrs	r15, 3
    1292:	11 91       	ld	r17, Z+
    1294:	6f 01       	movw	r12, r30
    1296:	01 e0       	ldi	r16, 0x01	; 1
    1298:	99 24       	eor	r9, r9
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <vfscanf+0xa6>
    129c:	02 60       	ori	r16, 0x02	; 2
    129e:	69 2d       	mov	r22, r9
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	40 e2       	ldi	r20, 0x20	; 32
    12a8:	0e 94 67 07 	call	0xece	; 0xece <mulacc>
    12ac:	96 2e       	mov	r9, r22
    12ae:	f6 01       	movw	r30, r12
    12b0:	f3 fc       	sbrc	r15, 3
    12b2:	15 91       	lpm	r17, Z+
    12b4:	f3 fe       	sbrs	r15, 3
    12b6:	11 91       	ld	r17, Z+
    12b8:	6f 01       	movw	r12, r30
    12ba:	21 2f       	mov	r18, r17
    12bc:	20 53       	subi	r18, 0x30	; 48
    12be:	2a 30       	cpi	r18, 0x0A	; 10
    12c0:	68 f3       	brcs	.-38     	; 0x129c <vfscanf+0x88>
    12c2:	01 fd       	sbrc	r16, 1
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <vfscanf+0xb8>
    12c6:	99 24       	eor	r9, r9
    12c8:	9a 94       	dec	r9
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <vfscanf+0xbe>
    12cc:	99 20       	and	r9, r9
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <vfscanf+0xbe>
    12d0:	b2 c0       	rjmp	.+356    	; 0x1436 <vfscanf+0x222>
    12d2:	18 36       	cpi	r17, 0x68	; 104
    12d4:	21 f0       	breq	.+8      	; 0x12de <vfscanf+0xca>
    12d6:	1c 36       	cpi	r17, 0x6C	; 108
    12d8:	99 f4       	brne	.+38     	; 0x1300 <vfscanf+0xec>
    12da:	f6 01       	movw	r30, r12
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <vfscanf+0xe0>
    12de:	f6 01       	movw	r30, r12
    12e0:	f3 fc       	sbrc	r15, 3
    12e2:	65 91       	lpm	r22, Z+
    12e4:	f3 fe       	sbrs	r15, 3
    12e6:	61 91       	ld	r22, Z+
    12e8:	68 36       	cpi	r22, 0x68	; 104
    12ea:	19 f0       	breq	.+6      	; 0x12f2 <vfscanf+0xde>
    12ec:	6f 01       	movw	r12, r30
    12ee:	16 2f       	mov	r17, r22
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <vfscanf+0xec>
    12f2:	08 60       	ori	r16, 0x08	; 8
    12f4:	04 60       	ori	r16, 0x04	; 4
    12f6:	f3 fc       	sbrc	r15, 3
    12f8:	15 91       	lpm	r17, Z+
    12fa:	f3 fe       	sbrs	r15, 3
    12fc:	11 91       	ld	r17, Z+
    12fe:	6f 01       	movw	r12, r30
    1300:	11 23       	and	r17, r17
    1302:	09 f4       	brne	.+2      	; 0x1306 <vfscanf+0xf2>
    1304:	98 c0       	rjmp	.+304    	; 0x1436 <vfscanf+0x222>
    1306:	85 e5       	ldi	r24, 0x55	; 85
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	61 2f       	mov	r22, r17
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	0e 94 35 0a 	call	0x146a	; 0x146a <strchr_P>
    1312:	89 2b       	or	r24, r25
    1314:	09 f4       	brne	.+2      	; 0x1318 <vfscanf+0x104>
    1316:	8f c0       	rjmp	.+286    	; 0x1436 <vfscanf+0x222>
    1318:	80 2f       	mov	r24, r16
    131a:	00 ff       	sbrs	r16, 0
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <vfscanf+0x110>
    131e:	ee 24       	eor	r14, r14
    1320:	ff 24       	eor	r15, r15
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <vfscanf+0x11e>
    1324:	f3 01       	movw	r30, r6
    1326:	e0 80       	ld	r14, Z
    1328:	f1 80       	ldd	r15, Z+1	; 0x01
    132a:	22 e0       	ldi	r18, 0x02	; 2
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	62 0e       	add	r6, r18
    1330:	73 1e       	adc	r7, r19
    1332:	1e 36       	cpi	r17, 0x6E	; 110
    1334:	51 f4       	brne	.+20     	; 0x134a <vfscanf+0x136>
    1336:	f5 01       	movw	r30, r10
    1338:	46 81       	ldd	r20, Z+6	; 0x06
    133a:	57 81       	ldd	r21, Z+7	; 0x07
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	c7 01       	movw	r24, r14
    1342:	20 2f       	mov	r18, r16
    1344:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <putval>
    1348:	65 c0       	rjmp	.+202    	; 0x1414 <vfscanf+0x200>
    134a:	13 36       	cpi	r17, 0x63	; 99
    134c:	91 f4       	brne	.+36     	; 0x1372 <vfscanf+0x15e>
    134e:	81 fd       	sbrc	r24, 1
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfscanf+0x142>
    1352:	99 24       	eor	r9, r9
    1354:	93 94       	inc	r9
    1356:	c5 01       	movw	r24, r10
    1358:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
    135c:	97 fd       	sbrc	r25, 7
    135e:	66 c0       	rjmp	.+204    	; 0x142c <vfscanf+0x218>
    1360:	e1 14       	cp	r14, r1
    1362:	f1 04       	cpc	r15, r1
    1364:	19 f0       	breq	.+6      	; 0x136c <vfscanf+0x158>
    1366:	f7 01       	movw	r30, r14
    1368:	81 93       	st	Z+, r24
    136a:	7f 01       	movw	r14, r30
    136c:	9a 94       	dec	r9
    136e:	99 f7       	brne	.-26     	; 0x1356 <vfscanf+0x142>
    1370:	4f c0       	rjmp	.+158    	; 0x1410 <vfscanf+0x1fc>
    1372:	1b 35       	cpi	r17, 0x5B	; 91
    1374:	59 f4       	brne	.+22     	; 0x138c <vfscanf+0x178>
    1376:	c5 01       	movw	r24, r10
    1378:	69 2d       	mov	r22, r9
    137a:	a7 01       	movw	r20, r14
    137c:	96 01       	movw	r18, r12
    137e:	0e 94 40 08 	call	0x1080	; 0x1080 <conv_brk>
    1382:	6c 01       	movw	r12, r24
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	09 f0       	breq	.+2      	; 0x138a <vfscanf+0x176>
    1388:	43 c0       	rjmp	.+134    	; 0x1410 <vfscanf+0x1fc>
    138a:	3d c0       	rjmp	.+122    	; 0x1406 <vfscanf+0x1f2>
    138c:	c5 01       	movw	r24, r10
    138e:	0e 94 95 07 	call	0xf2a	; 0xf2a <skip_spaces>
    1392:	97 fd       	sbrc	r25, 7
    1394:	4b c0       	rjmp	.+150    	; 0x142c <vfscanf+0x218>
    1396:	1f 36       	cpi	r17, 0x6F	; 111
    1398:	59 f1       	breq	.+86     	; 0x13f0 <vfscanf+0x1dc>
    139a:	10 37       	cpi	r17, 0x70	; 112
    139c:	28 f4       	brcc	.+10     	; 0x13a8 <vfscanf+0x194>
    139e:	14 36       	cpi	r17, 0x64	; 100
    13a0:	29 f1       	breq	.+74     	; 0x13ec <vfscanf+0x1d8>
    13a2:	19 36       	cpi	r17, 0x69	; 105
    13a4:	39 f5       	brne	.+78     	; 0x13f4 <vfscanf+0x1e0>
    13a6:	27 c0       	rjmp	.+78     	; 0x13f6 <vfscanf+0x1e2>
    13a8:	13 37       	cpi	r17, 0x73	; 115
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <vfscanf+0x19e>
    13ac:	15 37       	cpi	r17, 0x75	; 117
    13ae:	11 f5       	brne	.+68     	; 0x13f4 <vfscanf+0x1e0>
    13b0:	1d c0       	rjmp	.+58     	; 0x13ec <vfscanf+0x1d8>
    13b2:	c5 01       	movw	r24, r10
    13b4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <fgetc>
    13b8:	ec 01       	movw	r28, r24
    13ba:	97 fd       	sbrc	r25, 7
    13bc:	11 c0       	rjmp	.+34     	; 0x13e0 <vfscanf+0x1cc>
    13be:	0e 94 2d 0a 	call	0x145a	; 0x145a <isspace>
    13c2:	89 2b       	or	r24, r25
    13c4:	29 f0       	breq	.+10     	; 0x13d0 <vfscanf+0x1bc>
    13c6:	ce 01       	movw	r24, r28
    13c8:	b5 01       	movw	r22, r10
    13ca:	0e 94 98 0a 	call	0x1530	; 0x1530 <ungetc>
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <vfscanf+0x1cc>
    13d0:	e1 14       	cp	r14, r1
    13d2:	f1 04       	cpc	r15, r1
    13d4:	19 f0       	breq	.+6      	; 0x13dc <vfscanf+0x1c8>
    13d6:	f7 01       	movw	r30, r14
    13d8:	c1 93       	st	Z+, r28
    13da:	7f 01       	movw	r14, r30
    13dc:	9a 94       	dec	r9
    13de:	49 f7       	brne	.-46     	; 0x13b2 <vfscanf+0x19e>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	a9 f0       	breq	.+42     	; 0x1410 <vfscanf+0x1fc>
    13e6:	f7 01       	movw	r30, r14
    13e8:	10 82       	st	Z, r1
    13ea:	12 c0       	rjmp	.+36     	; 0x1410 <vfscanf+0x1fc>
    13ec:	00 62       	ori	r16, 0x20	; 32
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <vfscanf+0x1e2>
    13f0:	00 61       	ori	r16, 0x10	; 16
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <vfscanf+0x1e2>
    13f4:	00 64       	ori	r16, 0x40	; 64
    13f6:	c5 01       	movw	r24, r10
    13f8:	69 2d       	mov	r22, r9
    13fa:	a7 01       	movw	r20, r14
    13fc:	20 2f       	mov	r18, r16
    13fe:	0e 94 ae 07 	call	0xf5c	; 0xf5c <conv_int>
    1402:	88 23       	and	r24, r24
    1404:	29 f4       	brne	.+10     	; 0x1410 <vfscanf+0x1fc>
    1406:	f5 01       	movw	r30, r10
    1408:	83 81       	ldd	r24, Z+3	; 0x03
    140a:	80 73       	andi	r24, 0x30	; 48
    140c:	79 f4       	brne	.+30     	; 0x142c <vfscanf+0x218>
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <vfscanf+0x222>
    1410:	00 ff       	sbrs	r16, 0
    1412:	83 94       	inc	r8
    1414:	f5 01       	movw	r30, r10
    1416:	f3 80       	ldd	r15, Z+3	; 0x03
    1418:	f6 01       	movw	r30, r12
    141a:	f3 fc       	sbrc	r15, 3
    141c:	15 91       	lpm	r17, Z+
    141e:	f3 fe       	sbrs	r15, 3
    1420:	11 91       	ld	r17, Z+
    1422:	6f 01       	movw	r12, r30
    1424:	11 23       	and	r17, r17
    1426:	09 f0       	breq	.+2      	; 0x142a <vfscanf+0x216>
    1428:	0b cf       	rjmp	.-490    	; 0x1240 <vfscanf+0x2c>
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <vfscanf+0x222>
    142c:	88 20       	and	r8, r8
    142e:	19 f4       	brne	.+6      	; 0x1436 <vfscanf+0x222>
    1430:	2f ef       	ldi	r18, 0xFF	; 255
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	02 c0       	rjmp	.+4      	; 0x143a <vfscanf+0x226>
    1436:	28 2d       	mov	r18, r8
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	c9 01       	movw	r24, r18
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	bf 90       	pop	r11
    144e:	af 90       	pop	r10
    1450:	9f 90       	pop	r9
    1452:	8f 90       	pop	r8
    1454:	7f 90       	pop	r7
    1456:	6f 90       	pop	r6
    1458:	08 95       	ret

0000145a <isspace>:
    145a:	91 11       	cpse	r25, r1
    145c:	e1 c0       	rjmp	.+450    	; 0x1620 <__ctype_isfalse>
    145e:	80 32       	cpi	r24, 0x20	; 32
    1460:	19 f0       	breq	.+6      	; 0x1468 <isspace+0xe>
    1462:	89 50       	subi	r24, 0x09	; 9
    1464:	85 50       	subi	r24, 0x05	; 5
    1466:	d0 f7       	brcc	.-12     	; 0x145c <isspace+0x2>
    1468:	08 95       	ret

0000146a <strchr_P>:
    146a:	fc 01       	movw	r30, r24
    146c:	05 90       	lpm	r0, Z+
    146e:	06 16       	cp	r0, r22
    1470:	21 f0       	breq	.+8      	; 0x147a <strchr_P+0x10>
    1472:	00 20       	and	r0, r0
    1474:	d9 f7       	brne	.-10     	; 0x146c <strchr_P+0x2>
    1476:	c0 01       	movw	r24, r0
    1478:	08 95       	ret
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	cf 01       	movw	r24, r30
    147e:	08 95       	ret

00001480 <strnlen_P>:
    1480:	fc 01       	movw	r30, r24
    1482:	05 90       	lpm	r0, Z+
    1484:	61 50       	subi	r22, 0x01	; 1
    1486:	70 40       	sbci	r23, 0x00	; 0
    1488:	01 10       	cpse	r0, r1
    148a:	d8 f7       	brcc	.-10     	; 0x1482 <strnlen_P+0x2>
    148c:	80 95       	com	r24
    148e:	90 95       	com	r25
    1490:	8e 0f       	add	r24, r30
    1492:	9f 1f       	adc	r25, r31
    1494:	08 95       	ret

00001496 <strnlen>:
    1496:	fc 01       	movw	r30, r24
    1498:	61 50       	subi	r22, 0x01	; 1
    149a:	70 40       	sbci	r23, 0x00	; 0
    149c:	01 90       	ld	r0, Z+
    149e:	01 10       	cpse	r0, r1
    14a0:	d8 f7       	brcc	.-10     	; 0x1498 <strnlen+0x2>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	8e 0f       	add	r24, r30
    14a8:	9f 1f       	adc	r25, r31
    14aa:	08 95       	ret

000014ac <fgetc>:
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	ec 01       	movw	r28, r24
    14b2:	4b 81       	ldd	r20, Y+3	; 0x03
    14b4:	40 ff       	sbrs	r20, 0
    14b6:	1a c0       	rjmp	.+52     	; 0x14ec <fgetc+0x40>
    14b8:	46 ff       	sbrs	r20, 6
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <fgetc+0x24>
    14bc:	4f 7b       	andi	r20, 0xBF	; 191
    14be:	4b 83       	std	Y+3, r20	; 0x03
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	9f 81       	ldd	r25, Y+7	; 0x07
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	9f 83       	std	Y+7, r25	; 0x07
    14c8:	8e 83       	std	Y+6, r24	; 0x06
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	2b c0       	rjmp	.+86     	; 0x1526 <fgetc+0x7a>
    14d0:	42 ff       	sbrs	r20, 2
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <fgetc+0x4e>
    14d4:	e8 81       	ld	r30, Y
    14d6:	f9 81       	ldd	r31, Y+1	; 0x01
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	33 27       	eor	r19, r19
    14de:	27 fd       	sbrc	r18, 7
    14e0:	30 95       	com	r19
    14e2:	21 15       	cp	r18, r1
    14e4:	31 05       	cpc	r19, r1
    14e6:	29 f4       	brne	.+10     	; 0x14f2 <fgetc+0x46>
    14e8:	40 62       	ori	r20, 0x20	; 32
    14ea:	4b 83       	std	Y+3, r20	; 0x03
    14ec:	2f ef       	ldi	r18, 0xFF	; 255
    14ee:	3f ef       	ldi	r19, 0xFF	; 255
    14f0:	1b c0       	rjmp	.+54     	; 0x1528 <fgetc+0x7c>
    14f2:	31 96       	adiw	r30, 0x01	; 1
    14f4:	f9 83       	std	Y+1, r31	; 0x01
    14f6:	e8 83       	st	Y, r30
    14f8:	11 c0       	rjmp	.+34     	; 0x151c <fgetc+0x70>
    14fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    14fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    14fe:	ce 01       	movw	r24, r28
    1500:	09 95       	icall
    1502:	9c 01       	movw	r18, r24
    1504:	97 ff       	sbrs	r25, 7
    1506:	0a c0       	rjmp	.+20     	; 0x151c <fgetc+0x70>
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	11 f0       	breq	.+4      	; 0x1514 <fgetc+0x68>
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <fgetc+0x6a>
    1514:	80 e1       	ldi	r24, 0x10	; 16
    1516:	89 2b       	or	r24, r25
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	e8 cf       	rjmp	.-48     	; 0x14ec <fgetc+0x40>
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	9f 81       	ldd	r25, Y+7	; 0x07
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	9f 83       	std	Y+7, r25	; 0x07
    1524:	8e 83       	std	Y+6, r24	; 0x06
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	c9 01       	movw	r24, r18
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	08 95       	ret

00001530 <ungetc>:
    1530:	9c 01       	movw	r18, r24
    1532:	fb 01       	movw	r30, r22
    1534:	83 81       	ldd	r24, Z+3	; 0x03
    1536:	80 ff       	sbrs	r24, 0
    1538:	11 c0       	rjmp	.+34     	; 0x155c <ungetc+0x2c>
    153a:	86 fd       	sbrc	r24, 6
    153c:	0f c0       	rjmp	.+30     	; 0x155c <ungetc+0x2c>
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	2f 3f       	cpi	r18, 0xFF	; 255
    1542:	39 07       	cpc	r19, r25
    1544:	59 f0       	breq	.+22     	; 0x155c <ungetc+0x2c>
    1546:	22 83       	std	Z+2, r18	; 0x02
    1548:	80 64       	ori	r24, 0x40	; 64
    154a:	8f 7d       	andi	r24, 0xDF	; 223
    154c:	83 83       	std	Z+3, r24	; 0x03
    154e:	86 81       	ldd	r24, Z+6	; 0x06
    1550:	97 81       	ldd	r25, Z+7	; 0x07
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	97 83       	std	Z+7, r25	; 0x07
    1556:	86 83       	std	Z+6, r24	; 0x06
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <ungetc+0x30>
    155c:	2f ef       	ldi	r18, 0xFF	; 255
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	c9 01       	movw	r24, r18
    1562:	08 95       	ret

00001564 <__ultoa_invert>:
    1564:	fa 01       	movw	r30, r20
    1566:	aa 27       	eor	r26, r26
    1568:	28 30       	cpi	r18, 0x08	; 8
    156a:	51 f1       	breq	.+84     	; 0x15c0 <__ultoa_invert+0x5c>
    156c:	20 31       	cpi	r18, 0x10	; 16
    156e:	81 f1       	breq	.+96     	; 0x15d0 <__ultoa_invert+0x6c>
    1570:	e8 94       	clt
    1572:	6f 93       	push	r22
    1574:	6e 7f       	andi	r22, 0xFE	; 254
    1576:	6e 5f       	subi	r22, 0xFE	; 254
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	8f 4f       	sbci	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	af 4f       	sbci	r26, 0xFF	; 255
    1580:	b1 e0       	ldi	r27, 0x01	; 1
    1582:	3e d0       	rcall	.+124    	; 0x1600 <__ultoa_invert+0x9c>
    1584:	b4 e0       	ldi	r27, 0x04	; 4
    1586:	3c d0       	rcall	.+120    	; 0x1600 <__ultoa_invert+0x9c>
    1588:	67 0f       	add	r22, r23
    158a:	78 1f       	adc	r23, r24
    158c:	89 1f       	adc	r24, r25
    158e:	9a 1f       	adc	r25, r26
    1590:	a1 1d       	adc	r26, r1
    1592:	68 0f       	add	r22, r24
    1594:	79 1f       	adc	r23, r25
    1596:	8a 1f       	adc	r24, r26
    1598:	91 1d       	adc	r25, r1
    159a:	a1 1d       	adc	r26, r1
    159c:	6a 0f       	add	r22, r26
    159e:	71 1d       	adc	r23, r1
    15a0:	81 1d       	adc	r24, r1
    15a2:	91 1d       	adc	r25, r1
    15a4:	a1 1d       	adc	r26, r1
    15a6:	20 d0       	rcall	.+64     	; 0x15e8 <__ultoa_invert+0x84>
    15a8:	09 f4       	brne	.+2      	; 0x15ac <__ultoa_invert+0x48>
    15aa:	68 94       	set
    15ac:	3f 91       	pop	r19
    15ae:	2a e0       	ldi	r18, 0x0A	; 10
    15b0:	26 9f       	mul	r18, r22
    15b2:	11 24       	eor	r1, r1
    15b4:	30 19       	sub	r19, r0
    15b6:	30 5d       	subi	r19, 0xD0	; 208
    15b8:	31 93       	st	Z+, r19
    15ba:	de f6       	brtc	.-74     	; 0x1572 <__ultoa_invert+0xe>
    15bc:	cf 01       	movw	r24, r30
    15be:	08 95       	ret
    15c0:	46 2f       	mov	r20, r22
    15c2:	47 70       	andi	r20, 0x07	; 7
    15c4:	40 5d       	subi	r20, 0xD0	; 208
    15c6:	41 93       	st	Z+, r20
    15c8:	b3 e0       	ldi	r27, 0x03	; 3
    15ca:	0f d0       	rcall	.+30     	; 0x15ea <__ultoa_invert+0x86>
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__ultoa_invert+0x5c>
    15ce:	f6 cf       	rjmp	.-20     	; 0x15bc <__ultoa_invert+0x58>
    15d0:	46 2f       	mov	r20, r22
    15d2:	4f 70       	andi	r20, 0x0F	; 15
    15d4:	40 5d       	subi	r20, 0xD0	; 208
    15d6:	4a 33       	cpi	r20, 0x3A	; 58
    15d8:	18 f0       	brcs	.+6      	; 0x15e0 <__ultoa_invert+0x7c>
    15da:	49 5d       	subi	r20, 0xD9	; 217
    15dc:	31 fd       	sbrc	r19, 1
    15de:	40 52       	subi	r20, 0x20	; 32
    15e0:	41 93       	st	Z+, r20
    15e2:	02 d0       	rcall	.+4      	; 0x15e8 <__ultoa_invert+0x84>
    15e4:	a9 f7       	brne	.-22     	; 0x15d0 <__ultoa_invert+0x6c>
    15e6:	ea cf       	rjmp	.-44     	; 0x15bc <__ultoa_invert+0x58>
    15e8:	b4 e0       	ldi	r27, 0x04	; 4
    15ea:	a6 95       	lsr	r26
    15ec:	97 95       	ror	r25
    15ee:	87 95       	ror	r24
    15f0:	77 95       	ror	r23
    15f2:	67 95       	ror	r22
    15f4:	ba 95       	dec	r27
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__ultoa_invert+0x86>
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	61 05       	cpc	r22, r1
    15fc:	71 05       	cpc	r23, r1
    15fe:	08 95       	ret
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	0a 2e       	mov	r0, r26
    1606:	06 94       	lsr	r0
    1608:	57 95       	ror	r21
    160a:	47 95       	ror	r20
    160c:	37 95       	ror	r19
    160e:	27 95       	ror	r18
    1610:	ba 95       	dec	r27
    1612:	c9 f7       	brne	.-14     	; 0x1606 <__ultoa_invert+0xa2>
    1614:	62 0f       	add	r22, r18
    1616:	73 1f       	adc	r23, r19
    1618:	84 1f       	adc	r24, r20
    161a:	95 1f       	adc	r25, r21
    161c:	a0 1d       	adc	r26, r0
    161e:	08 95       	ret

00001620 <__ctype_isfalse>:
    1620:	99 27       	eor	r25, r25
    1622:	88 27       	eor	r24, r24

00001624 <__ctype_istrue>:
    1624:	08 95       	ret

00001626 <_exit>:
    1626:	f8 94       	cli

00001628 <__stop_program>:
    1628:	ff cf       	rjmp	.-2      	; 0x1628 <__stop_program>
