
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001e22  00001eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  00001f58  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000375  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c05  00000000  00000000  0000232d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000600  00000000  00000000  00003f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012b5  00000000  00000000  00004532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000057e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  00005aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b22  00000000  00000000  00005eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  000069db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LcdCustomChar>:
      c2:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d2:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e2:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f2:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000102 <__c.1988>:
     102:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 e2       	ldi	r30, 0x22	; 34
     122:	fe e1       	ldi	r31, 0x1E	; 30
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a2 3a       	cpi	r26, 0xA2	; 162
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	14 e0       	ldi	r17, 0x04	; 4
     136:	a2 ea       	ldi	r26, 0xA2	; 162
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a9 37       	cpi	r26, 0x79	; 121
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 a0 05 	call	0xb40	; 0xb40 <main>
     148:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     150:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0;
     152:	16 b8       	out	0x06, r1	; 6

	ADMUX = (1<<REFS0);
     154:	80 e4       	ldi	r24, 0x40	; 64
     156:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) + 7; 
     158:	87 e8       	ldi	r24, 0x87	; 135
     15a:	86 b9       	out	0x06, r24	; 6
end
     15c:	08 95       	ret

0000015e <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     15e:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x00;    // no pull up resistors
     164:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00;    // start with no power
     166:	12 ba       	out	0x12, r1	; 18
end
     168:	08 95       	ret

0000016a <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     16a:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     16c:	80 54       	subi	r24, 0x40	; 64
     16e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     170:	36 9a       	sbi	0x06, 6	; 6
end
     172:	08 95       	ret

00000174 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     174:	95 98       	cbi	0x12, 5	; 18
     176:	88 e8       	ldi	r24, 0x88	; 136
     178:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17a:	20 e9       	ldi	r18, 0x90	; 144
     17c:	31 e0       	ldi	r19, 0x01	; 1
     17e:	f9 01       	movw	r30, r18
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     186:	d9 f7       	brne	.-10     	; 0x17e <raise_pen+0xa>
	_delay_ms(500);
end
     188:	08 95       	ret

0000018a <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     18a:	95 9a       	sbi	0x12, 5	; 18
     18c:	80 ea       	ldi	r24, 0xA0	; 160
     18e:	9f e0       	ldi	r25, 0x0F	; 15
     190:	20 e9       	ldi	r18, 0x90	; 144
     192:	31 e0       	ldi	r19, 0x01	; 1
     194:	f9 01       	movw	r30, r18
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	d9 f7       	brne	.-10     	; 0x194 <lower_pen+0xa>
	_delay_ms(400);
end
     19e:	08 95       	ret

000001a0 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     1a0:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1a2:	8a e1       	ldi	r24, 0x1A	; 26
     1a4:	8a 95       	dec	r24
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     1a8:	92 9a       	sbi	0x12, 2	; 18
end
     1aa:	08 95       	ret

000001ac <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     1ac:	92 98       	cbi	0x12, 2	; 18
     1ae:	8a e1       	ldi	r24, 0x1A	; 26
     1b0:	8a 95       	dec	r24
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     1b4:	93 9a       	sbi	0x12, 3	; 18
end
     1b6:	08 95       	ret

000001b8 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     1b8:	96 98       	cbi	0x12, 6	; 18
     1ba:	8a e1       	ldi	r24, 0x1A	; 26
     1bc:	8a 95       	dec	r24
     1be:	f1 f7       	brne	.-4      	; 0x1bc <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     1c0:	97 9a       	sbi	0x12, 7	; 18
end
     1c2:	08 95       	ret

000001c4 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     1c4:	97 98       	cbi	0x12, 7	; 18
     1c6:	8a e1       	ldi	r24, 0x1A	; 26
     1c8:	8a 95       	dec	r24
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     1cc:	96 9a       	sbi	0x12, 6	; 18
end
     1ce:	08 95       	ret

000001d0 <stop_x>:

void stop_x(void)
begin
	PORTD &= ~0x18;
     1d0:	82 b3       	in	r24, 0x12	; 18
     1d2:	87 7e       	andi	r24, 0xE7	; 231
     1d4:	82 bb       	out	0x12, r24	; 18
end
     1d6:	08 95       	ret

000001d8 <stop_y>:

void stop_y(void)
begin
	PORTD &= ~0xc0; 
     1d8:	82 b3       	in	r24, 0x12	; 18
     1da:	8f 73       	andi	r24, 0x3F	; 63
     1dc:	82 bb       	out	0x12, r24	; 18

end
     1de:	08 95       	ret

000001e0 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x23;
     1e0:	82 b3       	in	r24, 0x12	; 18
     1e2:	83 72       	andi	r24, 0x23	; 35
     1e4:	82 bb       	out	0x12, r24	; 18
     1e6:	88 ee       	ldi	r24, 0xE8	; 232
     1e8:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <stop_all+0xe>
	_delay_ms(100);
end
     1f8:	08 95       	ret

000001fa <circle>:

// draw a circle
void circle(void)
begin
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     200:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     202:	8a e1       	ldi	r24, 0x1A	; 26
     204:	f8 2e       	mov	r15, r24
     206:	8f 2d       	mov	r24, r15
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     20c:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     20e:	00 e8       	ldi	r16, 0x80	; 128
     210:	1e e3       	ldi	r17, 0x3E	; 62
     212:	c8 01       	movw	r24, r16
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     218:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     21c:	97 98       	cbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     21e:	8f 2d       	mov	r24, r15
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     224:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     226:	c8 01       	movw	r24, r16
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     22c:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     22e:	8f 2d       	mov	r24, r15
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     234:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     236:	c8 01       	movw	r24, r16
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     23c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     240:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     242:	8f 2d       	mov	r24, r15
     244:	8a 95       	dec	r24
     246:	f1 f7       	brne	.-4      	; 0x244 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     248:	97 9a       	sbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	80 ee       	ldi	r24, 0xE0	; 224
     24c:	9e e2       	ldi	r25, 0x2E	; 46
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     252:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     256:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     258:	8f 2d       	mov	r24, r15
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     25e:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     260:	00 e8       	ldi	r16, 0x80	; 128
     262:	15 e2       	ldi	r17, 0x25	; 37
     264:	c8 01       	movw	r24, r16
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     26a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     26e:	97 98       	cbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     270:	8f 2d       	mov	r24, r15
     272:	8a 95       	dec	r24
     274:	f1 f7       	brne	.-4      	; 0x272 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     276:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     278:	c8 01       	movw	r24, r16
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     27e:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     280:	8f 2d       	mov	r24, r15
     282:	8a 95       	dec	r24
     284:	f1 f7       	brne	.-4      	; 0x282 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     286:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     288:	c8 01       	movw	r24, r16
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     28e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     292:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     294:	8f 2d       	mov	r24, r15
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     29a:	97 9a       	sbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	97 e1       	ldi	r25, 0x17	; 23
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     2a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2a8:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2aa:	8f 2d       	mov	r24, r15
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     2b0:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b2:	00 ea       	ldi	r16, 0xA0	; 160
     2b4:	1f e0       	ldi	r17, 0x0F	; 15
     2b6:	c8 01       	movw	r24, r16
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     2bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2c0:	97 98       	cbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c2:	8f 2d       	mov	r24, r15
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     2c8:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ca:	c8 01       	movw	r24, r16
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2d0:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2d2:	8f 2d       	mov	r24, r15
     2d4:	8a 95       	dec	r24
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     2d8:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2da:	c8 01       	movw	r24, r16
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     2e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2e4:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e6:	fa 94       	dec	r15
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     2ea:	97 9a       	sbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ec:	80 ef       	ldi	r24, 0xF0	; 240
     2ee:	9a e0       	ldi	r25, 0x0A	; 10
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     2f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
end
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	08 95       	ret

00000300 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     304:	20 91 ce 02 	lds	r18, 0x02CE
     308:	30 91 cf 02 	lds	r19, 0x02CF
     30c:	00 d0       	rcall	.+0      	; 0x30e <print_position+0xe>
     30e:	00 d0       	rcall	.+0      	; 0x310 <print_position+0x10>
     310:	00 d0       	rcall	.+0      	; 0x312 <print_position+0x12>
     312:	ed b7       	in	r30, 0x3d	; 61
     314:	fe b7       	in	r31, 0x3e	; 62
     316:	31 96       	adiw	r30, 0x01	; 1
     318:	0c eb       	ldi	r16, 0xBC	; 188
     31a:	12 e0       	ldi	r17, 0x02	; 2
     31c:	ad b7       	in	r26, 0x3d	; 61
     31e:	be b7       	in	r27, 0x3e	; 62
     320:	12 96       	adiw	r26, 0x02	; 2
     322:	1c 93       	st	X, r17
     324:	0e 93       	st	-X, r16
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	93 83       	std	Z+3, r25	; 0x03
     32e:	82 83       	std	Z+2, r24	; 0x02
     330:	35 83       	std	Z+5, r19	; 0x05
     332:	24 83       	std	Z+4, r18	; 0x04
     334:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
	LCDGotoXY(0,1);
     338:	8d b7       	in	r24, 0x3d	; 61
     33a:	9e b7       	in	r25, 0x3e	; 62
     33c:	06 96       	adiw	r24, 0x06	; 6
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	9e bf       	out	0x3e, r25	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	8d bf       	out	0x3d, r24	; 61
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     350:	f8 01       	movw	r30, r16
     352:	01 90       	ld	r0, Z+
     354:	00 20       	and	r0, r0
     356:	e9 f7       	brne	.-6      	; 0x352 <print_position+0x52>
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	e0 1b       	sub	r30, r16
     35c:	f1 0b       	sbc	r31, r17
     35e:	c8 01       	movw	r24, r16
     360:	6e 2f       	mov	r22, r30
     362:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     366:	20 91 98 03 	lds	r18, 0x0398
     36a:	30 91 99 03 	lds	r19, 0x0399
     36e:	00 d0       	rcall	.+0      	; 0x370 <print_position+0x70>
     370:	00 d0       	rcall	.+0      	; 0x372 <print_position+0x72>
     372:	00 d0       	rcall	.+0      	; 0x374 <print_position+0x74>
     374:	ed b7       	in	r30, 0x3d	; 61
     376:	fe b7       	in	r31, 0x3e	; 62
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	ad b7       	in	r26, 0x3d	; 61
     37c:	be b7       	in	r27, 0x3e	; 62
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	1c 93       	st	X, r17
     382:	0e 93       	st	-X, r16
     384:	11 97       	sbiw	r26, 0x01	; 1
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	93 83       	std	Z+3, r25	; 0x03
     38c:	82 83       	std	Z+2, r24	; 0x02
     38e:	35 83       	std	Z+5, r19	; 0x05
     390:	24 83       	std	Z+4, r18	; 0x04
     392:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
	LCDGotoXY(8,1);
     396:	8d b7       	in	r24, 0x3d	; 61
     398:	9e b7       	in	r25, 0x3e	; 62
     39a:	06 96       	adiw	r24, 0x06	; 6
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	9e bf       	out	0x3e, r25	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	8d bf       	out	0x3d, r24	; 61
     3a6:	88 e0       	ldi	r24, 0x08	; 8
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3ae:	f8 01       	movw	r30, r16
     3b0:	01 90       	ld	r0, Z+
     3b2:	00 20       	and	r0, r0
     3b4:	e9 f7       	brne	.-6      	; 0x3b0 <print_position+0xb0>
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	e0 1b       	sub	r30, r16
     3ba:	f1 0b       	sbc	r31, r17
     3bc:	c8 01       	movw	r24, r16
     3be:	6e 2f       	mov	r22, r30
     3c0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
end
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
     3d4:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     3d6:	42 30       	cpi	r20, 0x02	; 2
     3d8:	51 05       	cpc	r21, r1
     3da:	19 f4       	brne	.+6      	; 0x3e2 <move_to_XY+0x18>
     3dc:	0e 94 ba 00 	call	0x174	; 0x174 <raise_pen>
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <move_to_XY+0x22>
	if (d==1) lower_pen();
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	51 05       	cpc	r21, r1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <move_to_XY+0x22>
     3e8:	0e 94 c5 00 	call	0x18a	; 0x18a <lower_pen>
	if(x_in>0 && y_in>0)
     3ec:	1c 16       	cp	r1, r28
     3ee:	1d 06       	cpc	r1, r29
     3f0:	0c f0       	brlt	.+2      	; 0x3f4 <move_to_XY+0x2a>
     3f2:	ec c0       	rjmp	.+472    	; 0x5cc <move_to_XY+0x202>
     3f4:	10 16       	cp	r1, r16
     3f6:	11 06       	cpc	r1, r17
     3f8:	0c f0       	brlt	.+2      	; 0x3fc <move_to_XY+0x32>
     3fa:	e8 c0       	rjmp	.+464    	; 0x5cc <move_to_XY+0x202>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     3fc:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     3fe:	80 ec       	ldi	r24, 0xC0	; 192
     400:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     402:	36 9a       	sbi	0x06, 6	; 6
	if (d==1) lower_pen();
	if(x_in>0 && y_in>0)
	begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     404:	36 99       	sbic	0x06, 6	; 6
     406:	fe cf       	rjmp	.-4      	; 0x404 <move_to_XY+0x3a>
		x_pos = (int)ADCL;
     408:	84 b1       	in	r24, 0x04	; 4
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 cf 02 	sts	0x02CF, r25
     410:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     414:	40 91 ce 02 	lds	r20, 0x02CE
     418:	50 91 cf 02 	lds	r21, 0x02CF
     41c:	25 b1       	in	r18, 0x05	; 5
     41e:	92 2f       	mov	r25, r18
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	84 0f       	add	r24, r20
     424:	95 1f       	adc	r25, r21
     426:	90 93 cf 02 	sts	0x02CF, r25
     42a:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     42e:	80 91 ce 02 	lds	r24, 0x02CE
     432:	90 91 cf 02 	lds	r25, 0x02CF
     436:	c8 17       	cp	r28, r24
     438:	d9 07       	cpc	r29, r25
     43a:	00 f1       	brcs	.+64     	; 0x47c <move_to_XY+0xb2>
     43c:	48 c0       	rjmp	.+144    	; 0x4ce <move_to_XY+0x104>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     43e:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     440:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     442:	36 9a       	sbi	0x06, 6	; 6
     444:	05 c0       	rjmp	.+10     	; 0x450 <move_to_XY+0x86>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     446:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     448:	84 2f       	mov	r24, r20
     44a:	8a 95       	dec	r24
     44c:	f1 f7       	brne	.-4      	; 0x44a <move_to_XY+0x80>
	_delay_us(5);
	PORTD |= 0x04;
     44e:	92 9a       	sbi	0x12, 2	; 18
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_negative_x();
     450:	36 99       	sbic	0x06, 6	; 6
     452:	f9 cf       	rjmp	.-14     	; 0x446 <move_to_XY+0x7c>
				x_pos = (int)ADCL;
     454:	84 b1       	in	r24, 0x04	; 4
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	90 93 cf 02 	sts	0x02CF, r25
     45c:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     460:	80 91 ce 02 	lds	r24, 0x02CE
     464:	90 91 cf 02 	lds	r25, 0x02CF
     468:	25 b1       	in	r18, 0x05	; 5
     46a:	32 2f       	mov	r19, r18
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	90 93 cf 02 	sts	0x02CF, r25
     476:	80 93 ce 02 	sts	0x02CE, r24
     47a:	02 c0       	rjmp	.+4      	; 0x480 <move_to_XY+0xb6>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     47c:	50 ec       	ldi	r21, 0xC0	; 192
     47e:	4a e1       	ldi	r20, 0x1A	; 26
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     480:	80 91 ce 02 	lds	r24, 0x02CE
     484:	90 91 cf 02 	lds	r25, 0x02CF
     488:	c8 17       	cp	r28, r24
     48a:	d9 07       	cpc	r29, r25
     48c:	c0 f2       	brcs	.-80     	; 0x43e <move_to_XY+0x74>
     48e:	28 c0       	rjmp	.+80     	; 0x4e0 <move_to_XY+0x116>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     490:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     492:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     494:	36 9a       	sbi	0x06, 6	; 6
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <move_to_XY+0xd8>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     498:	92 98       	cbi	0x12, 2	; 18
     49a:	84 2f       	mov	r24, r20
     49c:	8a 95       	dec	r24
     49e:	f1 f7       	brne	.-4      	; 0x49c <move_to_XY+0xd2>
	_delay_us(5);
	PORTD |= 0x08;
     4a0:	93 9a       	sbi	0x12, 3	; 18
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
     4a2:	36 99       	sbic	0x06, 6	; 6
     4a4:	f9 cf       	rjmp	.-14     	; 0x498 <move_to_XY+0xce>
				x_pos = (int)ADCL;
     4a6:	84 b1       	in	r24, 0x04	; 4
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	90 93 cf 02 	sts	0x02CF, r25
     4ae:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     4b2:	80 91 ce 02 	lds	r24, 0x02CE
     4b6:	90 91 cf 02 	lds	r25, 0x02CF
     4ba:	25 b1       	in	r18, 0x05	; 5
     4bc:	32 2f       	mov	r19, r18
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	90 93 cf 02 	sts	0x02CF, r25
     4c8:	80 93 ce 02 	sts	0x02CE, r24
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <move_to_XY+0x108>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4ce:	50 ec       	ldi	r21, 0xC0	; 192
     4d0:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     4d2:	80 91 ce 02 	lds	r24, 0x02CE
     4d6:	90 91 cf 02 	lds	r25, 0x02CF
     4da:	8c 17       	cp	r24, r28
     4dc:	9d 07       	cpc	r25, r29
     4de:	c0 f2       	brcs	.-80     	; 0x490 <move_to_XY+0xc6>
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
			end
			stop_all();
     4e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4e4:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4e6:	81 ec       	ldi	r24, 0xC1	; 193
     4e8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     4ea:	36 9a       	sbi	0x06, 6	; 6
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     4ec:	36 99       	sbic	0x06, 6	; 6
     4ee:	fe cf       	rjmp	.-4      	; 0x4ec <move_to_XY+0x122>
		y_pos = (int)ADCL;
     4f0:	84 b1       	in	r24, 0x04	; 4
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	90 93 99 03 	sts	0x0399, r25
     4f8:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     4fc:	40 91 98 03 	lds	r20, 0x0398
     500:	50 91 99 03 	lds	r21, 0x0399
     504:	25 b1       	in	r18, 0x05	; 5
     506:	92 2f       	mov	r25, r18
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	84 0f       	add	r24, r20
     50c:	95 1f       	adc	r25, r21
     50e:	90 93 99 03 	sts	0x0399, r25
     512:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     516:	80 91 98 03 	lds	r24, 0x0398
     51a:	90 91 99 03 	lds	r25, 0x0399
     51e:	08 17       	cp	r16, r24
     520:	19 07       	cpc	r17, r25
     522:	00 f1       	brcs	.+64     	; 0x564 <move_to_XY+0x19a>
     524:	48 c0       	rjmp	.+144    	; 0x5b6 <move_to_XY+0x1ec>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     526:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     528:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     52a:	36 9a       	sbi	0x06, 6	; 6
     52c:	05 c0       	rjmp	.+10     	; 0x538 <move_to_XY+0x16e>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     52e:	96 98       	cbi	0x12, 6	; 18
     530:	84 2f       	mov	r24, r20
     532:	8a 95       	dec	r24
     534:	f1 f7       	brne	.-4      	; 0x532 <move_to_XY+0x168>
	_delay_us(5);
	PORTD |= 0x80;
     536:	97 9a       	sbi	0x12, 7	; 18
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_negative_y();
     538:	36 99       	sbic	0x06, 6	; 6
     53a:	f9 cf       	rjmp	.-14     	; 0x52e <move_to_XY+0x164>
				y_pos = (int)ADCL;
     53c:	84 b1       	in	r24, 0x04	; 4
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 99 03 	sts	0x0399, r25
     544:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     548:	80 91 98 03 	lds	r24, 0x0398
     54c:	90 91 99 03 	lds	r25, 0x0399
     550:	25 b1       	in	r18, 0x05	; 5
     552:	32 2f       	mov	r19, r18
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	82 0f       	add	r24, r18
     558:	93 1f       	adc	r25, r19
     55a:	90 93 99 03 	sts	0x0399, r25
     55e:	80 93 98 03 	sts	0x0398, r24
     562:	02 c0       	rjmp	.+4      	; 0x568 <move_to_XY+0x19e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     564:	51 ec       	ldi	r21, 0xC1	; 193
     566:	4a e1       	ldi	r20, 0x1A	; 26
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     568:	80 91 98 03 	lds	r24, 0x0398
     56c:	90 91 99 03 	lds	r25, 0x0399
     570:	08 17       	cp	r16, r24
     572:	19 07       	cpc	r17, r25
     574:	c0 f2       	brcs	.-80     	; 0x526 <move_to_XY+0x15c>
     576:	28 c0       	rjmp	.+80     	; 0x5c8 <move_to_XY+0x1fe>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     578:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     57a:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     57c:	36 9a       	sbi	0x06, 6	; 6
     57e:	05 c0       	rjmp	.+10     	; 0x58a <move_to_XY+0x1c0>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     580:	97 98       	cbi	0x12, 7	; 18
     582:	84 2f       	mov	r24, r20
     584:	8a 95       	dec	r24
     586:	f1 f7       	brne	.-4      	; 0x584 <move_to_XY+0x1ba>
	_delay_us(5);
	PORTD |= 0x40;
     588:	96 9a       	sbi	0x12, 6	; 18
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
     58a:	36 99       	sbic	0x06, 6	; 6
     58c:	f9 cf       	rjmp	.-14     	; 0x580 <move_to_XY+0x1b6>
				y_pos = (int)ADCL;
     58e:	84 b1       	in	r24, 0x04	; 4
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 99 03 	sts	0x0399, r25
     596:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     59a:	80 91 98 03 	lds	r24, 0x0398
     59e:	90 91 99 03 	lds	r25, 0x0399
     5a2:	25 b1       	in	r18, 0x05	; 5
     5a4:	32 2f       	mov	r19, r18
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	90 93 99 03 	sts	0x0399, r25
     5b0:	80 93 98 03 	sts	0x0398, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <move_to_XY+0x1f0>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5b6:	51 ec       	ldi	r21, 0xC1	; 193
     5b8:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     5ba:	80 91 98 03 	lds	r24, 0x0398
     5be:	90 91 99 03 	lds	r25, 0x0399
     5c2:	80 17       	cp	r24, r16
     5c4:	91 07       	cpc	r25, r17
     5c6:	c0 f2       	brcs	.-80     	; 0x578 <move_to_XY+0x1ae>
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
			end
			stop_all();
     5c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     5cc:	0e 94 80 01 	call	0x300	; 0x300 <print_position>
end
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <get_frame>:

void get_frame()
begin
     5da:	2f 92       	push	r2
     5dc:	3f 92       	push	r3
     5de:	4f 92       	push	r4
     5e0:	5f 92       	push	r5
     5e2:	6f 92       	push	r6
     5e4:	7f 92       	push	r7
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	69 97       	sbiw	r28, 0x19	; 25
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
     60e:	8e ef       	ldi	r24, 0xFE	; 254
     610:	9f ef       	ldi	r25, 0xFF	; 255
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	9c 83       	std	Y+4, r25	; 0x04
     618:	8b 83       	std	Y+3, r24	; 0x03
     61a:	9e 83       	std	Y+6, r25	; 0x06
     61c:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     61e:	18 86       	std	Y+8, r1	; 0x08
     620:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
     622:	0a e9       	ldi	r16, 0x9A	; 154
     624:	13 e0       	ldi	r17, 0x03	; 3
     626:	c8 01       	movw	r24, r16
     628:	60 e1       	ldi	r22, 0x10	; 16
     62a:	71 e0       	ldi	r23, 0x01	; 1
     62c:	0e 94 8e 08 	call	0x111c	; 0x111c <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     630:	60 91 75 04 	lds	r22, 0x0475
     634:	70 91 76 04 	lds	r23, 0x0476
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 95 08 	call	0x112a	; 0x112a <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     63e:	00 d0       	rcall	.+0      	; 0x640 <get_frame+0x66>
     640:	00 d0       	rcall	.+0      	; 0x642 <get_frame+0x68>
     642:	00 d0       	rcall	.+0      	; 0x644 <get_frame+0x6a>
     644:	ed b7       	in	r30, 0x3d	; 61
     646:	fe b7       	in	r31, 0x3e	; 62
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	80 91 73 04 	lds	r24, 0x0473
     64e:	90 91 74 04 	lds	r25, 0x0474
     652:	ad b7       	in	r26, 0x3d	; 61
     654:	be b7       	in	r27, 0x3e	; 62
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	9c 93       	st	X, r25
     65a:	8e 93       	st	-X, r24
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	8e e1       	ldi	r24, 0x1E	; 30
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	93 83       	std	Z+3, r25	; 0x03
     664:	82 83       	std	Z+2, r24	; 0x02
     666:	ce 01       	movw	r24, r28
     668:	07 96       	adiw	r24, 0x07	; 7
     66a:	95 83       	std	Z+5, r25	; 0x05
     66c:	84 83       	std	Z+4, r24	; 0x04
     66e:	0e 94 c0 08 	call	0x1180	; 0x1180 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     672:	ed b7       	in	r30, 0x3d	; 61
     674:	fe b7       	in	r31, 0x3e	; 62
     676:	31 96       	adiw	r30, 0x01	; 1
     678:	ad b7       	in	r26, 0x3d	; 61
     67a:	be b7       	in	r27, 0x3e	; 62
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	1c 93       	st	X, r17
     680:	0e 93       	st	-X, r16
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	82 e2       	ldi	r24, 0x22	; 34
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	93 83       	std	Z+3, r25	; 0x03
     68a:	82 83       	std	Z+2, r24	; 0x02
     68c:	8f 81       	ldd	r24, Y+7	; 0x07
     68e:	98 85       	ldd	r25, Y+8	; 0x08
     690:	95 83       	std	Z+5, r25	; 0x05
     692:	84 83       	std	Z+4, r24	; 0x04
     694:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>

	LCDGotoXY(0, 0);
     698:	6d b7       	in	r22, 0x3d	; 61
     69a:	7e b7       	in	r23, 0x3e	; 62
     69c:	6a 5f       	subi	r22, 0xFA	; 250
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	7e bf       	out	0x3e, r23	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	6d bf       	out	0x3d, r22	; 61
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     6b2:	f8 01       	movw	r30, r16
     6b4:	01 90       	ld	r0, Z+
     6b6:	00 20       	and	r0, r0
     6b8:	e9 f7       	brne	.-6      	; 0x6b4 <get_frame+0xda>
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	e0 1b       	sub	r30, r16
     6be:	f1 0b       	sbc	r31, r17
     6c0:	c8 01       	movw	r24, r16
     6c2:	6e 2f       	mov	r22, r30
     6c4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
     6c8:	ee 24       	eor	r14, r14
     6ca:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     6cc:	79 e0       	ldi	r23, 0x09	; 9
     6ce:	a7 2e       	mov	r10, r23
     6d0:	b1 2c       	mov	r11, r1
     6d2:	ac 0e       	add	r10, r28
     6d4:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
     6d6:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     6d8:	0c eb       	ldi	r16, 0xBC	; 188
     6da:	12 e0       	ldi	r17, 0x02	; 2
     6dc:	65 e5       	ldi	r22, 0x55	; 85
     6de:	26 2e       	mov	r2, r22
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     6e4:	5b e4       	ldi	r21, 0x4B	; 75
     6e6:	45 2e       	mov	r4, r21
     6e8:	51 e0       	ldi	r21, 0x01	; 1
     6ea:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     6ec:	4e ef       	ldi	r20, 0xFE	; 254
     6ee:	c4 2e       	mov	r12, r20
     6f0:	4f ef       	ldi	r20, 0xFF	; 255
     6f2:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6f4:	30 e9       	ldi	r19, 0x90	; 144
     6f6:	63 2e       	mov	r6, r19
     6f8:	31 e0       	ldi	r19, 0x01	; 1
     6fa:	73 2e       	mov	r7, r19
     6fc:	ff c0       	rjmp	.+510    	; 0x8fc <get_frame+0x322>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     6fe:	60 91 75 04 	lds	r22, 0x0475
     702:	70 91 76 04 	lds	r23, 0x0476
     706:	84 e3       	ldi	r24, 0x34	; 52
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 95 08 	call	0x112a	; 0x112a <fputs>
	fscanf(stdin, "%s", buffer) ;
     70e:	00 d0       	rcall	.+0      	; 0x710 <get_frame+0x136>
     710:	00 d0       	rcall	.+0      	; 0x712 <get_frame+0x138>
     712:	00 d0       	rcall	.+0      	; 0x714 <get_frame+0x13a>
     714:	ed b7       	in	r30, 0x3d	; 61
     716:	fe b7       	in	r31, 0x3e	; 62
     718:	31 96       	adiw	r30, 0x01	; 1
     71a:	80 91 73 04 	lds	r24, 0x0473
     71e:	90 91 74 04 	lds	r25, 0x0474
     722:	ad b7       	in	r26, 0x3d	; 61
     724:	be b7       	in	r27, 0x3e	; 62
     726:	12 96       	adiw	r26, 0x02	; 2
     728:	9c 93       	st	X, r25
     72a:	8e 93       	st	-X, r24
     72c:	11 97       	sbiw	r26, 0x01	; 1
     72e:	69 e3       	ldi	r22, 0x39	; 57
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	73 83       	std	Z+3, r23	; 0x03
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	b5 82       	std	Z+5, r11	; 0x05
     738:	a4 82       	std	Z+4, r10	; 0x04
     73a:	0e 94 c0 08 	call	0x1180	; 0x1180 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     73e:	00 d0       	rcall	.+0      	; 0x740 <get_frame+0x166>
     740:	00 d0       	rcall	.+0      	; 0x742 <get_frame+0x168>
     742:	ed b7       	in	r30, 0x3d	; 61
     744:	fe b7       	in	r31, 0x3e	; 62
     746:	31 96       	adiw	r30, 0x01	; 1
     748:	ad b7       	in	r26, 0x3d	; 61
     74a:	be b7       	in	r27, 0x3e	; 62
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	bc 92       	st	X, r11
     750:	ae 92       	st	-X, r10
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	6c e3       	ldi	r22, 0x3C	; 60
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	73 83       	std	Z+3, r23	; 0x03
     75a:	62 83       	std	Z+2, r22	; 0x02
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	8c 0f       	add	r24, r28
     762:	9d 1f       	adc	r25, r29
     764:	95 83       	std	Z+5, r25	; 0x05
     766:	84 83       	std	Z+4, r24	; 0x04
     768:	a3 e0       	ldi	r26, 0x03	; 3
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	ac 0f       	add	r26, r28
     76e:	bd 1f       	adc	r27, r29
     770:	b7 83       	std	Z+7, r27	; 0x07
     772:	a6 83       	std	Z+6, r26	; 0x06
     774:	65 e0       	ldi	r22, 0x05	; 5
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	6c 0f       	add	r22, r28
     77a:	7d 1f       	adc	r23, r29
     77c:	71 87       	std	Z+9, r23	; 0x09
     77e:	60 87       	std	Z+8, r22	; 0x08
     780:	0e 94 02 09 	call	0x1204	; 0x1204 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	ed b7       	in	r30, 0x3d	; 61
     78e:	fe b7       	in	r31, 0x3e	; 62
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	ad b7       	in	r26, 0x3d	; 61
     794:	be b7       	in	r27, 0x3e	; 62
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	8c 92       	st	X, r8
     79a:	11 97       	sbiw	r26, 0x01	; 1
     79c:	12 96       	adiw	r26, 0x02	; 2
     79e:	9c 92       	st	X, r9
     7a0:	66 e4       	ldi	r22, 0x46	; 70
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	73 83       	std	Z+3, r23	; 0x03
     7a6:	62 83       	std	Z+2, r22	; 0x02
     7a8:	f5 82       	std	Z+5, r15	; 0x05
     7aa:	e4 82       	std	Z+4, r14	; 0x04
     7ac:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
	LCDGotoXY(11, 0);
     7b0:	8d b7       	in	r24, 0x3d	; 61
     7b2:	9e b7       	in	r25, 0x3e	; 62
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	9e bf       	out	0x3e, r25	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	8d bf       	out	0x3d, r24	; 61
     7c0:	8b e0       	ldi	r24, 0x0B	; 11
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     7c8:	c4 01       	movw	r24, r8
     7ca:	62 e0       	ldi	r22, 0x02	; 2
     7cc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
	LCDstring(buffer,15);
     7d8:	c5 01       	movw	r24, r10
     7da:	6f e0       	ldi	r22, 0x0F	; 15
     7dc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     7e0:	49 81       	ldd	r20, Y+1	; 0x01
     7e2:	5a 81       	ldd	r21, Y+2	; 0x02
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	4f 3f       	cpi	r20, 0xFF	; 255
     7e8:	59 07       	cpc	r21, r25
     7ea:	0c f4       	brge	.+2      	; 0x7ee <get_frame+0x214>
     7ec:	5a c0       	rjmp	.+180    	; 0x8a2 <get_frame+0x2c8>
     7ee:	2b 81       	ldd	r18, Y+3	; 0x03
     7f0:	3c 81       	ldd	r19, Y+4	; 0x04
     7f2:	af ef       	ldi	r26, 0xFF	; 255
     7f4:	2f 3f       	cpi	r18, 0xFF	; 255
     7f6:	3a 07       	cpc	r19, r26
     7f8:	0c f4       	brge	.+2      	; 0x7fc <get_frame+0x222>
     7fa:	53 c0       	rjmp	.+166    	; 0x8a2 <get_frame+0x2c8>
     7fc:	8d 81       	ldd	r24, Y+5	; 0x05
     7fe:	9e 81       	ldd	r25, Y+6	; 0x06
     800:	bf ef       	ldi	r27, 0xFF	; 255
     802:	8f 3f       	cpi	r24, 0xFF	; 255
     804:	9b 07       	cpc	r25, r27
     806:	0c f4       	brge	.+2      	; 0x80a <get_frame+0x230>
     808:	4c c0       	rjmp	.+152    	; 0x8a2 <get_frame+0x2c8>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     80a:	6d b7       	in	r22, 0x3d	; 61
     80c:	7e b7       	in	r23, 0x3e	; 62
     80e:	6a 50       	subi	r22, 0x0A	; 10
     810:	70 40       	sbci	r23, 0x00	; 0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	7e bf       	out	0x3e, r23	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	6d bf       	out	0x3d, r22	; 61
     81c:	ed b7       	in	r30, 0x3d	; 61
     81e:	fe b7       	in	r31, 0x3e	; 62
     820:	31 96       	adiw	r30, 0x01	; 1
     822:	ad b7       	in	r26, 0x3d	; 61
     824:	be b7       	in	r27, 0x3e	; 62
     826:	12 96       	adiw	r26, 0x02	; 2
     828:	1c 93       	st	X, r17
     82a:	0e 93       	st	-X, r16
     82c:	11 97       	sbiw	r26, 0x01	; 1
     82e:	53 82       	std	Z+3, r5	; 0x03
     830:	42 82       	std	Z+2, r4	; 0x02
     832:	55 83       	std	Z+5, r21	; 0x05
     834:	44 83       	std	Z+4, r20	; 0x04
     836:	37 83       	std	Z+7, r19	; 0x07
     838:	26 83       	std	Z+6, r18	; 0x06
     83a:	91 87       	std	Z+9, r25	; 0x09
     83c:	80 87       	std	Z+8, r24	; 0x08
     83e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		LCDGotoXY(0, 0);
     842:	6d b7       	in	r22, 0x3d	; 61
     844:	7e b7       	in	r23, 0x3e	; 62
     846:	66 5f       	subi	r22, 0xF6	; 246
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	7e bf       	out	0x3e, r23	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	6d bf       	out	0x3d, r22	; 61
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     85c:	c8 01       	movw	r24, r16
     85e:	6a e0       	ldi	r22, 0x0A	; 10
     860:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
		x_vect[i] = x;
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	d7 01       	movw	r26, r14
     86a:	aa 0f       	add	r26, r26
     86c:	bb 1f       	adc	r27, r27
     86e:	fd 01       	movw	r30, r26
     870:	e5 55       	subi	r30, 0x55	; 85
     872:	fc 4f       	sbci	r31, 0xFC	; 252
     874:	91 83       	std	Z+1, r25	; 0x01
     876:	80 83       	st	Z, r24
		y_vect[i] = y;
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	fd 01       	movw	r30, r26
     87e:	ec 50       	subi	r30, 0x0C	; 12
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	91 83       	std	Z+1, r25	; 0x01
     884:	80 83       	st	Z, r24
		d_vect[i] = d;
     886:	8d 81       	ldd	r24, Y+5	; 0x05
     888:	9e 81       	ldd	r25, Y+6	; 0x06
     88a:	a0 53       	subi	r26, 0x30	; 48
     88c:	bd 4f       	sbci	r27, 0xFD	; 253
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	9c 93       	st	X, r25
     892:	8e 93       	st	-X, r24
		x=-2;
     894:	da 82       	std	Y+2, r13	; 0x02
     896:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     898:	dc 82       	std	Y+4, r13	; 0x04
     89a:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     89c:	de 82       	std	Y+6, r13	; 0x06
     89e:	cd 82       	std	Y+5, r12	; 0x05
     8a0:	23 c0       	rjmp	.+70     	; 0x8e8 <get_frame+0x30e>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <get_frame+0x2ca>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <get_frame+0x2cc>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <get_frame+0x2ce>
     8a8:	ed b7       	in	r30, 0x3d	; 61
     8aa:	fe b7       	in	r31, 0x3e	; 62
     8ac:	31 96       	adiw	r30, 0x01	; 1
     8ae:	ad b7       	in	r26, 0x3d	; 61
     8b0:	be b7       	in	r27, 0x3e	; 62
     8b2:	12 96       	adiw	r26, 0x02	; 2
     8b4:	1c 93       	st	X, r17
     8b6:	0e 93       	st	-X, r16
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	33 82       	std	Z+3, r3	; 0x03
     8bc:	22 82       	std	Z+2, r2	; 0x02
     8be:	f5 82       	std	Z+5, r15	; 0x05
     8c0:	e4 82       	std	Z+4, r14	; 0x04
     8c2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		LCDGotoXY(0, 0);
     8c6:	6d b7       	in	r22, 0x3d	; 61
     8c8:	7e b7       	in	r23, 0x3e	; 62
     8ca:	6a 5f       	subi	r22, 0xFA	; 250
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	7e bf       	out	0x3e, r23	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	6d bf       	out	0x3d, r22	; 61
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     8e0:	c8 01       	movw	r24, r16
     8e2:	6a e0       	ldi	r22, 0x0A	; 10
     8e4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	97 e2       	ldi	r25, 0x27	; 39
     8ec:	f3 01       	movw	r30, r6
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <get_frame+0x314>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f4:	d9 f7       	brne	.-10     	; 0x8ec <get_frame+0x312>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     8f6:	08 94       	sec
     8f8:	e1 1c       	adc	r14, r1
     8fa:	f1 1c       	adc	r15, r1
     8fc:	8f 81       	ldd	r24, Y+7	; 0x07
     8fe:	98 85       	ldd	r25, Y+8	; 0x08
     900:	e8 16       	cp	r14, r24
     902:	f9 06       	cpc	r15, r25
     904:	08 f4       	brcc	.+2      	; 0x908 <get_frame+0x32e>
     906:	fb ce       	rjmp	.-522    	; 0x6fe <get_frame+0x124>
     908:	80 e2       	ldi	r24, 0x20	; 32
     90a:	9e e4       	ldi	r25, 0x4E	; 78
     90c:	20 e9       	ldi	r18, 0x90	; 144
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	f9 01       	movw	r30, r18
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <get_frame+0x338>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     916:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     918:	d9 f7       	brne	.-10     	; 0x910 <get_frame+0x336>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     91a:	00 d0       	rcall	.+0      	; 0x91c <get_frame+0x342>
     91c:	00 d0       	rcall	.+0      	; 0x91e <get_frame+0x344>
     91e:	00 d0       	rcall	.+0      	; 0x920 <get_frame+0x346>
     920:	ed b7       	in	r30, 0x3d	; 61
     922:	fe b7       	in	r31, 0x3e	; 62
     924:	31 96       	adiw	r30, 0x01	; 1
     926:	0c eb       	ldi	r16, 0xBC	; 188
     928:	12 e0       	ldi	r17, 0x02	; 2
     92a:	ad b7       	in	r26, 0x3d	; 61
     92c:	be b7       	in	r27, 0x3e	; 62
     92e:	12 96       	adiw	r26, 0x02	; 2
     930:	1c 93       	st	X, r17
     932:	0e 93       	st	-X, r16
     934:	11 97       	sbiw	r26, 0x01	; 1
     936:	81 e6       	ldi	r24, 0x61	; 97
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	93 83       	std	Z+3, r25	; 0x03
     93c:	82 83       	std	Z+2, r24	; 0x02
     93e:	f5 82       	std	Z+5, r15	; 0x05
     940:	e4 82       	std	Z+4, r14	; 0x04
     942:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		LCDGotoXY(0, 0);
     946:	6d b7       	in	r22, 0x3d	; 61
     948:	7e b7       	in	r23, 0x3e	; 62
     94a:	6a 5f       	subi	r22, 0xFA	; 250
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	7e bf       	out	0x3e, r23	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	6d bf       	out	0x3d, r22	; 61
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     960:	c8 01       	movw	r24, r16
     962:	6a e0       	ldi	r22, 0x0A	; 10
     964:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     968:	20 91 ab 03 	lds	r18, 0x03AB
     96c:	30 91 ac 03 	lds	r19, 0x03AC
     970:	40 91 ad 03 	lds	r20, 0x03AD
     974:	50 91 ae 03 	lds	r21, 0x03AE
     978:	60 91 af 03 	lds	r22, 0x03AF
     97c:	70 91 b0 03 	lds	r23, 0x03B0
     980:	e0 90 b1 03 	lds	r14, 0x03B1
     984:	f0 90 b2 03 	lds	r15, 0x03B2
     988:	8d b7       	in	r24, 0x3d	; 61
     98a:	9e b7       	in	r25, 0x3e	; 62
     98c:	0c 97       	sbiw	r24, 0x0c	; 12
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	9e bf       	out	0x3e, r25	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	8d bf       	out	0x3d, r24	; 61
     998:	ed b7       	in	r30, 0x3d	; 61
     99a:	fe b7       	in	r31, 0x3e	; 62
     99c:	31 96       	adiw	r30, 0x01	; 1
     99e:	ad b7       	in	r26, 0x3d	; 61
     9a0:	be b7       	in	r27, 0x3e	; 62
     9a2:	12 96       	adiw	r26, 0x02	; 2
     9a4:	1c 93       	st	X, r17
     9a6:	0e 93       	st	-X, r16
     9a8:	11 97       	sbiw	r26, 0x01	; 1
     9aa:	8d e6       	ldi	r24, 0x6D	; 109
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	93 83       	std	Z+3, r25	; 0x03
     9b0:	82 83       	std	Z+2, r24	; 0x02
     9b2:	35 83       	std	Z+5, r19	; 0x05
     9b4:	24 83       	std	Z+4, r18	; 0x04
     9b6:	57 83       	std	Z+7, r21	; 0x07
     9b8:	46 83       	std	Z+6, r20	; 0x06
     9ba:	71 87       	std	Z+9, r23	; 0x09
     9bc:	60 87       	std	Z+8, r22	; 0x08
     9be:	f3 86       	std	Z+11, r15	; 0x0b
     9c0:	e2 86       	std	Z+10, r14	; 0x0a
     9c2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		LCDGotoXY(0, 0);
     9c6:	6d b7       	in	r22, 0x3d	; 61
     9c8:	7e b7       	in	r23, 0x3e	; 62
     9ca:	64 5f       	subi	r22, 0xF4	; 244
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	7e bf       	out	0x3e, r23	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	6d bf       	out	0x3d, r22	; 61
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     9e0:	c8 01       	movw	r24, r16
     9e2:	6a e0       	ldi	r22, 0x0A	; 10
     9e4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     9e8:	20 91 f4 01 	lds	r18, 0x01F4
     9ec:	30 91 f5 01 	lds	r19, 0x01F5
     9f0:	40 91 f6 01 	lds	r20, 0x01F6
     9f4:	50 91 f7 01 	lds	r21, 0x01F7
     9f8:	60 91 f8 01 	lds	r22, 0x01F8
     9fc:	70 91 f9 01 	lds	r23, 0x01F9
     a00:	e0 90 fa 01 	lds	r14, 0x01FA
     a04:	f0 90 fb 01 	lds	r15, 0x01FB
     a08:	8d b7       	in	r24, 0x3d	; 61
     a0a:	9e b7       	in	r25, 0x3e	; 62
     a0c:	0c 97       	sbiw	r24, 0x0c	; 12
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	9e bf       	out	0x3e, r25	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	8d bf       	out	0x3d, r24	; 61
     a18:	ed b7       	in	r30, 0x3d	; 61
     a1a:	fe b7       	in	r31, 0x3e	; 62
     a1c:	31 96       	adiw	r30, 0x01	; 1
     a1e:	ad b7       	in	r26, 0x3d	; 61
     a20:	be b7       	in	r27, 0x3e	; 62
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	1c 93       	st	X, r17
     a26:	0e 93       	st	-X, r16
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	87 e7       	ldi	r24, 0x77	; 119
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	93 83       	std	Z+3, r25	; 0x03
     a30:	82 83       	std	Z+2, r24	; 0x02
     a32:	35 83       	std	Z+5, r19	; 0x05
     a34:	24 83       	std	Z+4, r18	; 0x04
     a36:	57 83       	std	Z+7, r21	; 0x07
     a38:	46 83       	std	Z+6, r20	; 0x06
     a3a:	71 87       	std	Z+9, r23	; 0x09
     a3c:	60 87       	std	Z+8, r22	; 0x08
     a3e:	f3 86       	std	Z+11, r15	; 0x0b
     a40:	e2 86       	std	Z+10, r14	; 0x0a
     a42:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		LCDGotoXY(0, 1);
     a46:	6d b7       	in	r22, 0x3d	; 61
     a48:	7e b7       	in	r23, 0x3e	; 62
     a4a:	64 5f       	subi	r22, 0xF4	; 244
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	7e bf       	out	0x3e, r23	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	6d bf       	out	0x3d, r22	; 61
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a60:	c8 01       	movw	r24, r16
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     a68:	20 91 d0 02 	lds	r18, 0x02D0
     a6c:	30 91 d1 02 	lds	r19, 0x02D1
     a70:	40 91 d2 02 	lds	r20, 0x02D2
     a74:	50 91 d3 02 	lds	r21, 0x02D3
     a78:	60 91 d4 02 	lds	r22, 0x02D4
     a7c:	70 91 d5 02 	lds	r23, 0x02D5
     a80:	e0 90 d6 02 	lds	r14, 0x02D6
     a84:	f0 90 d7 02 	lds	r15, 0x02D7
     a88:	8d b7       	in	r24, 0x3d	; 61
     a8a:	9e b7       	in	r25, 0x3e	; 62
     a8c:	0c 97       	sbiw	r24, 0x0c	; 12
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	9e bf       	out	0x3e, r25	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	8d bf       	out	0x3d, r24	; 61
     a98:	ed b7       	in	r30, 0x3d	; 61
     a9a:	fe b7       	in	r31, 0x3e	; 62
     a9c:	31 96       	adiw	r30, 0x01	; 1
     a9e:	ad b7       	in	r26, 0x3d	; 61
     aa0:	be b7       	in	r27, 0x3e	; 62
     aa2:	12 96       	adiw	r26, 0x02	; 2
     aa4:	1c 93       	st	X, r17
     aa6:	0e 93       	st	-X, r16
     aa8:	11 97       	sbiw	r26, 0x01	; 1
     aaa:	81 e8       	ldi	r24, 0x81	; 129
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	93 83       	std	Z+3, r25	; 0x03
     ab0:	82 83       	std	Z+2, r24	; 0x02
     ab2:	35 83       	std	Z+5, r19	; 0x05
     ab4:	24 83       	std	Z+4, r18	; 0x04
     ab6:	57 83       	std	Z+7, r21	; 0x07
     ab8:	46 83       	std	Z+6, r20	; 0x06
     aba:	71 87       	std	Z+9, r23	; 0x09
     abc:	60 87       	std	Z+8, r22	; 0x08
     abe:	f3 86       	std	Z+11, r15	; 0x0b
     ac0:	e2 86       	std	Z+10, r14	; 0x0a
     ac2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <sprintf>
		LCDGotoXY(10, 0);
     ac6:	6d b7       	in	r22, 0x3d	; 61
     ac8:	7e b7       	in	r23, 0x3e	; 62
     aca:	64 5f       	subi	r22, 0xF4	; 244
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	7e bf       	out	0x3e, r23	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	6d bf       	out	0x3d, r22	; 61
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     ae0:	c8 01       	movw	r24, r16
     ae2:	6a e0       	ldi	r22, 0x0A	; 10
     ae4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCDstring>

end
     ae8:	69 96       	adiw	r28, 0x19	; 25
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	cf 91       	pop	r28
     af6:	df 91       	pop	r29
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	3f 90       	pop	r3
     b16:	2f 90       	pop	r2
     b18:	08 95       	ret

00000b1a <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     b1a:	0e 94 b8 06 	call	0xd70	; 0xd70 <LCDinit>
	LCDcursorOFF();
     b1e:	0e 94 20 07 	call	0xe40	; 0xe40 <LCDcursorOFF>
	LCDclr();	//clear the display
     b22:	0e 94 51 06 	call	0xca2	; 0xca2 <LCDclr>
	LCDGotoXY(0,0);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     b2e:	8c e8       	ldi	r24, 0x8C	; 140
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CopyStringtoLCD>
	LCD_char_count = 0;
     b3a:	10 92 cd 02 	sts	0x02CD, r1
end
     b3e:	08 95       	ret

00000b40 <main>:
end



// --- Main Program ----------------------------------
int main(void) {
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
  int i =0;
  
  //initialize();
  
	LCD_init();
     b44:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     b48:	0e 94 88 07 	call	0xf10	; 0xf10 <uart_init>
  stdout = stdin = stderr = &uart_str;
     b4c:	8b e8       	ldi	r24, 0x8B	; 139
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	90 93 78 04 	sts	0x0478, r25
     b54:	80 93 77 04 	sts	0x0477, r24
     b58:	90 93 74 04 	sts	0x0474, r25
     b5c:	80 93 73 04 	sts	0x0473, r24
     b60:	90 93 76 04 	sts	0x0476, r25
     b64:	80 93 75 04 	sts	0x0475, r24
  
  get_frame();
     b68:	0e 94 ed 02 	call	0x5da	; 0x5da <get_frame>
  get_frame();
     b6c:	0e 94 ed 02 	call	0x5da	; 0x5da <get_frame>
     b70:	80 e1       	ldi	r24, 0x10	; 16
     b72:	97 e2       	ldi	r25, 0x27	; 39
     b74:	20 e9       	ldi	r18, 0x90	; 144
     b76:	31 e0       	ldi	r19, 0x01	; 1
     b78:	f9 01       	movw	r30, r18
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b80:	d9 f7       	brne	.-10     	; 0xb78 <main+0x38>


		
	_delay_ms(1000);
	CopyStringtoLCD(LCD_hello, 0, 0);
     b82:	80 eb       	ldi	r24, 0xB0	; 176
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CopyStringtoLCD>
     b8e:	80 e1       	ldi	r24, 0x10	; 16
     b90:	97 e2       	ldi	r25, 0x27	; 39
     b92:	20 e9       	ldi	r18, 0x90	; 144
     b94:	31 e0       	ldi	r19, 0x01	; 1
     b96:	f9 01       	movw	r30, r18
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9e:	d9 f7       	brne	.-10     	; 0xb96 <main+0x56>
	_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
     ba0:	80 91 ab 03 	lds	r24, 0x03AB
     ba4:	90 91 ac 03 	lds	r25, 0x03AC
     ba8:	60 91 f4 01 	lds	r22, 0x01F4
     bac:	70 91 f5 01 	lds	r23, 0x01F5
     bb0:	42 e0       	ldi	r20, 0x02	; 2
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <move_to_XY>
     bb8:	c1 e0       	ldi	r28, 0x01	; 1
     bba:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     bbc:	be 01       	movw	r22, r28
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	db 01       	movw	r26, r22
     bc4:	a5 55       	subi	r26, 0x55	; 85
     bc6:	bc 4f       	sbci	r27, 0xFC	; 252
     bc8:	8d 91       	ld	r24, X+
     bca:	9c 91       	ld	r25, X
     bcc:	11 97       	sbiw	r26, 0x01	; 1
     bce:	97 fd       	sbrc	r25, 7
     bd0:	13 c0       	rjmp	.+38     	; 0xbf8 <main+0xb8>
     bd2:	fb 01       	movw	r30, r22
     bd4:	ec 50       	subi	r30, 0x0C	; 12
     bd6:	fe 4f       	sbci	r31, 0xFE	; 254
     bd8:	80 81       	ld	r24, Z
     bda:	91 81       	ldd	r25, Z+1	; 0x01
     bdc:	97 fd       	sbrc	r25, 7
     bde:	0c c0       	rjmp	.+24     	; 0xbf8 <main+0xb8>
		begin
			move_to_XY(x_vect[i],y_vect[i],1);
     be0:	8d 91       	ld	r24, X+
     be2:	9c 91       	ld	r25, X
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	0e 94 e5 01 	call	0x3ca	; 0x3ca <move_to_XY>
		
	_delay_ms(1000);
	CopyStringtoLCD(LCD_hello, 0, 0);
	_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
	for(i=1;i<100;i++)
     bf0:	21 96       	adiw	r28, 0x01	; 1
     bf2:	c4 36       	cpi	r28, 0x64	; 100
     bf4:	d1 05       	cpc	r29, r1
     bf6:	11 f7       	brne	.-60     	; 0xbbc <main+0x7c>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2);
     bf8:	8c eb       	ldi	r24, 0xBC	; 188
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	6c eb       	ldi	r22, 0xBC	; 188
     bfe:	72 e0       	ldi	r23, 0x02	; 2
     c00:	42 e0       	ldi	r20, 0x02	; 2
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 e5 01 	call	0x3ca	; 0x3ca <move_to_XY>
     c08:	ff cf       	rjmp	.-2      	; 0xc08 <main+0xc8>

00000c0a <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     c0a:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x00;    // no pull up resistors
     c10:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00;    // start with no power
     c12:	12 ba       	out	0x12, r1	; 18
end

void initialize(void)
begin
	port_init();
	LCD_init();
     c14:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     c18:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0;
     c1a:	16 b8       	out	0x06, r1	; 6

	ADMUX = (1<<REFS0);
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) + 7; 
     c20:	87 e8       	ldi	r24, 0x87	; 135
     c22:	86 b9       	out	0x06, r24	; 6
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
     c24:	08 95       	ret

00000c26 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     c26:	28 2f       	mov	r18, r24
     c28:	20 7f       	andi	r18, 0xF0	; 240
     c2a:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
     c2c:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
     c2e:	aa 9a       	sbi	0x15, 2	; 21
     c30:	24 ef       	ldi	r18, 0xF4	; 244
     c32:	31 e0       	ldi	r19, 0x01	; 1
     c34:	f9 01       	movw	r30, r18
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c3a:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
     c3c:	a8 98       	cbi	0x15, 0	; 21
     c3e:	f9 01       	movw	r30, r18
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	44 e0       	ldi	r20, 0x04	; 4
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	4a 95       	dec	r20
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <LCDsendChar+0x22>
     c50:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
     c52:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
     c54:	aa 9a       	sbi	0x15, 2	; 21
     c56:	c9 01       	movw	r24, r18
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c5c:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
     c5e:	a8 98       	cbi	0x15, 0	; 21
     c60:	c9 01       	movw	r24, r18
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     c66:	08 95       	ret

00000c68 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     c68:	28 2f       	mov	r18, r24
     c6a:	20 7f       	andi	r18, 0xF0	; 240
     c6c:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
     c6e:	aa 9a       	sbi	0x15, 2	; 21
     c70:	24 ef       	ldi	r18, 0xF4	; 244
     c72:	31 e0       	ldi	r19, 0x01	; 1
     c74:	f9 01       	movw	r30, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c7a:	aa 98       	cbi	0x15, 2	; 21
     c7c:	f9 01       	movw	r30, r18
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	54 e0       	ldi	r21, 0x04	; 4
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	5a 95       	dec	r21
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <LCDsendCommand+0x1e>
     c8e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
     c90:	aa 9a       	sbi	0x15, 2	; 21
     c92:	c9 01       	movw	r24, r18
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c98:	aa 98       	cbi	0x15, 2	; 21
     c9a:	c9 01       	movw	r24, r18
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     ca0:	08 95       	ret

00000ca2 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     ca8:	08 95       	ret

00000caa <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     cb0:	08 95       	ret

00000cb2 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	49 f0       	breq	.+18     	; 0xcd2 <LCDstring+0x20>
     cc0:	ec 01       	movw	r28, r24
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     cc6:	89 91       	ld	r24, Y+
     cc8:	0e 94 13 06 	call	0xc26	; 0xc26 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     ccc:	1f 5f       	subi	r17, 0xFF	; 255
     cce:	10 17       	cp	r17, r16
     cd0:	d0 f3       	brcs	.-12     	; 0xcc6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	08 95       	ret

00000cdc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     cdc:	62 30       	cpi	r22, 0x02	; 2
     cde:	31 f0       	breq	.+12     	; 0xcec <LCDGotoXY+0x10>
     ce0:	63 30       	cpi	r22, 0x03	; 3
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <LCDGotoXY+0x14>
     ce4:	61 30       	cpi	r22, 0x01	; 1
     ce6:	29 f4       	brne	.+10     	; 0xcf2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     ce8:	80 5c       	subi	r24, 0xC0	; 192
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     cec:	8c 5e       	subi	r24, 0xEC	; 236
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     cf0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
	
}
     cf8:	08 95       	ret

00000cfa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     d04:	64 2f       	mov	r22, r20
     d06:	0e 94 6e 06 	call	0xcdc	; 0xcdc <LCDGotoXY>
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     d0e:	0e 94 13 06 	call	0xc26	; 0xc26 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     d12:	1f 5f       	subi	r17, 0xFF	; 255
     d14:	fe 01       	movw	r30, r28
     d16:	e1 0f       	add	r30, r17
     d18:	f1 1d       	adc	r31, r1
     d1a:	84 91       	lpm	r24, Z+
     d1c:	88 23       	and	r24, r24
     d1e:	b9 f7       	brne	.-18     	; 0xd0e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	08 95       	ret

00000d28 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	7c 01       	movw	r14, r24
     d36:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     d38:	11 0f       	add	r17, r17
     d3a:	11 0f       	add	r17, r17
     d3c:	11 0f       	add	r17, r17
     d3e:	10 64       	ori	r17, 0x40	; 64
     d40:	c0 e0       	ldi	r28, 0x00	; 0
     d42:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     d44:	f7 01       	movw	r30, r14
     d46:	ec 0f       	add	r30, r28
     d48:	fd 1f       	adc	r31, r29
     d4a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     d4c:	81 2f       	mov	r24, r17
     d4e:	8c 0f       	add	r24, r28
     d50:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
		LCDsendChar(pcc);
     d54:	80 2f       	mov	r24, r16
     d56:	0e 94 13 06 	call	0xc26	; 0xc26 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     d5a:	21 96       	adiw	r28, 0x01	; 1
     d5c:	c8 30       	cpi	r28, 0x08	; 8
     d5e:	d1 05       	cpc	r29, r1
     d60:	89 f7       	brne	.-30     	; 0xd44 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	86 ea       	ldi	r24, 0xA6	; 166
     d78:	9e e0       	ldi	r25, 0x0E	; 14
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     d7e:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
     d80:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     d82:	84 b3       	in	r24, 0x14	; 20
     d84:	80 6f       	ori	r24, 0xF0	; 240
     d86:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     d88:	84 b3       	in	r24, 0x14	; 20
     d8a:	87 60       	ori	r24, 0x07	; 7
     d8c:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d8e:	80 e3       	ldi	r24, 0x30	; 48
     d90:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d92:	aa 9a       	sbi	0x15, 2	; 21
     d94:	24 ef       	ldi	r18, 0xF4	; 244
     d96:	31 e0       	ldi	r19, 0x01	; 1
     d98:	f9 01       	movw	r30, r18
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d9e:	aa 98       	cbi	0x15, 2	; 21
     da0:	f9 01       	movw	r30, r18
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     da6:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     da8:	aa 9a       	sbi	0x15, 2	; 21
     daa:	c9 01       	movw	r24, r18
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     db0:	aa 98       	cbi	0x15, 2	; 21
     db2:	c9 01       	movw	r24, r18
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     db8:	80 e2       	ldi	r24, 0x20	; 32
     dba:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     dbc:	aa 9a       	sbi	0x15, 2	; 21
     dbe:	c9 01       	movw	r24, r18
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     dc4:	aa 98       	cbi	0x15, 2	; 21
     dc6:	c9 01       	movw	r24, r18
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     dcc:	88 e2       	ldi	r24, 0x28	; 40
     dce:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     dd2:	8c e0       	ldi	r24, 0x0C	; 12
     dd4:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
     dd8:	c2 ec       	ldi	r28, 0xC2	; 194
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     dde:	16 2f       	mov	r17, r22
     de0:	1f 5f       	subi	r17, 0xFF	; 255
     de2:	ce 01       	movw	r24, r28
     de4:	0e 94 94 06 	call	0xd28	; 0xd28 <LCDdefinechar>
     de8:	28 96       	adiw	r28, 0x08	; 8
     dea:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     dec:	18 30       	cpi	r17, 0x08	; 8
     dee:	b9 f7       	brne	.-18     	; 0xdde <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	08 2f       	mov	r16, r24
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     e02:	8e e1       	ldi	r24, 0x1E	; 30
     e04:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     e08:	1f 5f       	subi	r17, 0xFF	; 255
     e0a:	10 17       	cp	r17, r16
     e0c:	d0 f3       	brcs	.-12     	; 0xe02 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	08 2f       	mov	r16, r24
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     e1e:	88 e1       	ldi	r24, 0x18	; 24
     e20:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     e24:	1f 5f       	subi	r17, 0xFF	; 255
     e26:	10 17       	cp	r17, r16
     e28:	d0 f3       	brcs	.-12     	; 0xe1e <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	08 95       	ret

00000e30 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     e30:	8e e0       	ldi	r24, 0x0E	; 14
     e32:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     e36:	08 95       	ret

00000e38 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     e38:	8f e0       	ldi	r24, 0x0F	; 15
     e3a:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     e3e:	08 95       	ret

00000e40 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     e46:	08 95       	ret

00000e48 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     e48:	88 e0       	ldi	r24, 0x08	; 8
     e4a:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     e4e:	08 95       	ret

00000e50 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     e50:	8c e0       	ldi	r24, 0x0C	; 12
     e52:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
}
     e56:	08 95       	ret

00000e58 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	08 2f       	mov	r16, r24
     e5e:	10 e0       	ldi	r17, 0x00	; 0
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     e62:	80 e1       	ldi	r24, 0x10	; 16
     e64:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e68:	1f 5f       	subi	r17, 0xFF	; 255
     e6a:	10 17       	cp	r17, r16
     e6c:	d0 f3       	brcs	.-12     	; 0xe62 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	08 2f       	mov	r16, r24
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     e7e:	84 e1       	ldi	r24, 0x14	; 20
     e80:	0e 94 34 06 	call	0xc68	; 0xc68 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e84:	1f 5f       	subi	r17, 0xFF	; 255
     e86:	10 17       	cp	r17, r16
     e88:	d0 f3       	brcs	.-12     	; 0xe7e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     e90:	df 92       	push	r13
     e92:	ef 92       	push	r14
     e94:	ff 92       	push	r15
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     ea0:	96 e0       	ldi	r25, 0x06	; 6
     ea2:	89 9f       	mul	r24, r25
     ea4:	c0 01       	movw	r24, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	24 2f       	mov	r18, r20
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	ac 01       	movw	r20, r24
     eae:	42 9f       	mul	r20, r18
     eb0:	c0 01       	movw	r24, r0
     eb2:	43 9f       	mul	r20, r19
     eb4:	90 0d       	add	r25, r0
     eb6:	52 9f       	mul	r21, r18
     eb8:	90 0d       	add	r25, r0
     eba:	11 24       	eor	r1, r1
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__divmodhi4>
     ec2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     ec4:	cb 01       	movw	r24, r22
     ec6:	66 e0       	ldi	r22, 0x06	; 6
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	0e 94 67 08 	call	0x10ce	; 0x10ce <__udivmodhi4>
     ece:	e8 2e       	mov	r14, r24
     ed0:	ff 24       	eor	r15, r15
     ed2:	00 e0       	ldi	r16, 0x00	; 0
     ed4:	10 e0       	ldi	r17, 0x00	; 0
     ed6:	12 c0       	rjmp	.+36     	; 0xefc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     ed8:	c8 01       	movw	r24, r16
     eda:	05 96       	adiw	r24, 0x05	; 5
     edc:	c8 17       	cp	r28, r24
     ede:	d9 07       	cpc	r29, r25
     ee0:	10 f0       	brcs	.+4      	; 0xee6 <LCDprogressBar+0x56>
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ee6:	c0 17       	cp	r28, r16
     ee8:	d1 07       	cpc	r29, r17
     eea:	10 f0       	brcs	.+4      	; 0xef0 <LCDprogressBar+0x60>
     eec:	8e 2d       	mov	r24, r14
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <LCDprogressBar+0x62>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     ef2:	0e 94 13 06 	call	0xc26	; 0xc26 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     ef6:	f3 94       	inc	r15
     ef8:	0a 5f       	subi	r16, 0xFA	; 250
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	fd 14       	cp	r15, r13
     efe:	60 f3       	brcs	.-40     	; 0xed8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	08 95       	ret

00000f10 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     f10:	87 e6       	ldi	r24, 0x67	; 103
     f12:	89 b9       	out	0x09, r24	; 9
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     f14:	88 e1       	ldi	r24, 0x18	; 24
     f16:	8a b9       	out	0x0a, r24	; 10
}
     f18:	08 95       	ret

00000f1a <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     f1a:	1f 93       	push	r17
     f1c:	18 2f       	mov	r17, r24

  if (c == '\a')
     f1e:	87 30       	cpi	r24, 0x07	; 7
     f20:	49 f4       	brne	.+18     	; 0xf34 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     f22:	60 91 77 04 	lds	r22, 0x0477
     f26:	70 91 78 04 	lds	r23, 0x0478
     f2a:	89 e9       	ldi	r24, 0x99	; 153
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 95 08 	call	0x112a	; 0x112a <fputs>
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <uart_putchar+0x2a>
      return 0;
    }

  if (c == '\n')
     f34:	8a 30       	cpi	r24, 0x0A	; 10
     f36:	19 f4       	brne	.+6      	; 0xf3e <uart_putchar+0x24>
    uart_putchar('\r', stream);
     f38:	8d e0       	ldi	r24, 0x0D	; 13
     f3a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     f3e:	5d 9b       	sbis	0x0b, 5	; 11
     f40:	fe cf       	rjmp	.-4      	; 0xf3e <uart_putchar+0x24>
  UDR0 = c;
     f42:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	1f 91       	pop	r17
     f4a:	08 95       	ret

00000f4c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     f5a:	80 91 a2 01 	lds	r24, 0x01A2
     f5e:	90 91 a3 01 	lds	r25, 0x01A3
     f62:	89 2b       	or	r24, r25
     f64:	09 f0       	breq	.+2      	; 0xf68 <uart_getchar+0x1c>
     f66:	97 c0       	rjmp	.+302    	; 0x1096 <uart_getchar+0x14a>
     f68:	04 ea       	ldi	r16, 0xA4	; 164
     f6a:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     f6c:	5f 9b       	sbis	0x0b, 7	; 11
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     f70:	5c 9b       	sbis	0x0b, 4	; 11
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <uart_getchar+0x2e>
     f74:	2e ef       	ldi	r18, 0xFE	; 254
     f76:	3f ef       	ldi	r19, 0xFF	; 255
     f78:	a2 c0       	rjmp	.+324    	; 0x10be <uart_getchar+0x172>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     f7a:	5b 99       	sbic	0x0b, 3	; 11
     f7c:	9e c0       	rjmp	.+316    	; 0x10ba <uart_getchar+0x16e>
	  return _FDEV_ERR;
	c = UDR0;
     f7e:	9c b1       	in	r25, 0x0c	; 12
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     f80:	9d 30       	cpi	r25, 0x0D	; 13
     f82:	11 f0       	breq	.+4      	; 0xf88 <uart_getchar+0x3c>
	  c = '\n';
	if (c == '\n')
     f84:	9a 30       	cpi	r25, 0x0A	; 10
     f86:	69 f4       	brne	.+26     	; 0xfa2 <uart_getchar+0x56>
	  {
	    *cp = c;
     f88:	8a e0       	ldi	r24, 0x0A	; 10
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     f8e:	b7 01       	movw	r22, r14
     f90:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
	    rxp = b;
     f94:	84 ea       	ldi	r24, 0xA4	; 164
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	90 93 a3 01 	sts	0x01A3, r25
     f9c:	80 93 a2 01 	sts	0x01A2, r24
     fa0:	7a c0       	rjmp	.+244    	; 0x1096 <uart_getchar+0x14a>
	    break;
	  }
	else if (c == '\t')
     fa2:	99 30       	cpi	r25, 0x09	; 9
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <uart_getchar+0x5c>
     fa6:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     fa8:	89 2f       	mov	r24, r25
     faa:	80 52       	subi	r24, 0x20	; 32
     fac:	8f 35       	cpi	r24, 0x5F	; 95
     fae:	10 f0       	brcs	.+4      	; 0xfb4 <uart_getchar+0x68>
     fb0:	90 3a       	cpi	r25, 0xA0	; 160
     fb2:	70 f0       	brcs	.+28     	; 0xfd0 <uart_getchar+0x84>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	03 3f       	cpi	r16, 0xF3	; 243
     fb8:	1f 07       	cpc	r17, r31
     fba:	11 f4       	brne	.+4      	; 0xfc0 <uart_getchar+0x74>
	      uart_putchar('\a', stream);
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <uart_getchar+0x7c>
	    else
	      {
		*cp++ = c;
     fc0:	f8 01       	movw	r30, r16
     fc2:	91 93       	st	Z+, r25
     fc4:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     fc6:	89 2f       	mov	r24, r25
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
     fce:	ce cf       	rjmp	.-100    	; 0xf6c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     fd0:	92 31       	cpi	r25, 0x12	; 18
     fd2:	31 f1       	breq	.+76     	; 0x1020 <uart_getchar+0xd4>
     fd4:	93 31       	cpi	r25, 0x13	; 19
     fd6:	30 f4       	brcc	.+12     	; 0xfe4 <uart_getchar+0x98>
     fd8:	93 30       	cpi	r25, 0x03	; 3
     fda:	09 f4       	brne	.+2      	; 0xfde <uart_getchar+0x92>
     fdc:	6e c0       	rjmp	.+220    	; 0x10ba <uart_getchar+0x16e>
     fde:	98 30       	cpi	r25, 0x08	; 8
     fe0:	29 f6       	brne	.-118    	; 0xf6c <uart_getchar+0x20>
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <uart_getchar+0xaa>
     fe4:	97 31       	cpi	r25, 0x17	; 23
     fe6:	09 f4       	brne	.+2      	; 0xfea <uart_getchar+0x9e>
     fe8:	4b c0       	rjmp	.+150    	; 0x1080 <uart_getchar+0x134>
     fea:	9f 37       	cpi	r25, 0x7F	; 127
     fec:	21 f0       	breq	.+8      	; 0xff6 <uart_getchar+0xaa>
     fee:	95 31       	cpi	r25, 0x15	; 21
     ff0:	09 f0       	breq	.+2      	; 0xff4 <uart_getchar+0xa8>
     ff2:	bc cf       	rjmp	.-136    	; 0xf6c <uart_getchar+0x20>
     ff4:	32 c0       	rjmp	.+100    	; 0x105a <uart_getchar+0x10e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     ff6:	f1 e0       	ldi	r31, 0x01	; 1
     ff8:	04 3a       	cpi	r16, 0xA4	; 164
     ffa:	1f 07       	cpc	r17, r31
     ffc:	09 f0       	breq	.+2      	; 0x1000 <uart_getchar+0xb4>
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <uart_getchar+0xb6>
    1000:	b5 cf       	rjmp	.-150    	; 0xf6c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    1002:	88 e0       	ldi	r24, 0x08	; 8
    1004:	b7 01       	movw	r22, r14
    1006:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		uart_putchar(' ', stream);
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	b7 01       	movw	r22, r14
    100e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		uart_putchar('\b', stream);
    1012:	88 e0       	ldi	r24, 0x08	; 8
    1014:	b7 01       	movw	r22, r14
    1016:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		cp--;
    101a:	01 50       	subi	r16, 0x01	; 1
    101c:	10 40       	sbci	r17, 0x00	; 0
    101e:	a6 cf       	rjmp	.-180    	; 0xf6c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1020:	8d e0       	ldi	r24, 0x0D	; 13
    1022:	b7 01       	movw	r22, r14
    1024:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
    1028:	c4 ea       	ldi	r28, 0xA4	; 164
    102a:	d1 e0       	ldi	r29, 0x01	; 1
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <uart_getchar+0xea>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    102e:	89 91       	ld	r24, Y+
    1030:	b7 01       	movw	r22, r14
    1032:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1036:	c0 17       	cp	r28, r16
    1038:	d1 07       	cpc	r29, r17
    103a:	c8 f3       	brcs	.-14     	; 0x102e <uart_getchar+0xe2>
    103c:	97 cf       	rjmp	.-210    	; 0xf6c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    103e:	88 e0       	ldi	r24, 0x08	; 8
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		uart_putchar(' ', stream);
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	b7 01       	movw	r22, r14
    104a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		uart_putchar('\b', stream);
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	b7 01       	movw	r22, r14
    1052:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		cp--;
    1056:	01 50       	subi	r16, 0x01	; 1
    1058:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	04 3a       	cpi	r16, 0xA4	; 164
    105e:	18 07       	cpc	r17, r24
    1060:	09 f0       	breq	.+2      	; 0x1064 <uart_getchar+0x118>
    1062:	68 f7       	brcc	.-38     	; 0x103e <uart_getchar+0xf2>
    1064:	83 cf       	rjmp	.-250    	; 0xf6c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1066:	88 e0       	ldi	r24, 0x08	; 8
    1068:	b7 01       	movw	r22, r14
    106a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		uart_putchar(' ', stream);
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	b7 01       	movw	r22, r14
    1072:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
		uart_putchar('\b', stream);
    1076:	88 e0       	ldi	r24, 0x08	; 8
    1078:	b7 01       	movw	r22, r14
    107a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <uart_putchar>
    107e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1080:	e1 e0       	ldi	r30, 0x01	; 1
    1082:	04 3a       	cpi	r16, 0xA4	; 164
    1084:	1e 07       	cpc	r17, r30
    1086:	09 f0       	breq	.+2      	; 0x108a <uart_getchar+0x13e>
    1088:	08 f4       	brcc	.+2      	; 0x108c <uart_getchar+0x140>
    108a:	70 cf       	rjmp	.-288    	; 0xf6c <uart_getchar+0x20>
    108c:	e8 01       	movw	r28, r16
    108e:	8a 91       	ld	r24, -Y
    1090:	80 32       	cpi	r24, 0x20	; 32
    1092:	49 f7       	brne	.-46     	; 0x1066 <uart_getchar+0x11a>
    1094:	6b cf       	rjmp	.-298    	; 0xf6c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1096:	e0 91 a2 01 	lds	r30, 0x01A2
    109a:	f0 91 a3 01 	lds	r31, 0x01A3
    109e:	81 91       	ld	r24, Z+
    10a0:	f0 93 a3 01 	sts	0x01A3, r31
    10a4:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
    10a8:	8a 30       	cpi	r24, 0x0A	; 10
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <uart_getchar+0x168>
    rxp = 0;
    10ac:	10 92 a3 01 	sts	0x01A3, r1
    10b0:	10 92 a2 01 	sts	0x01A2, r1

  return c;
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <uart_getchar+0x172>
    10ba:	2f ef       	ldi	r18, 0xFF	; 255
    10bc:	3f ef       	ldi	r19, 0xFF	; 255
}
    10be:	c9 01       	movw	r24, r18
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <__udivmodhi4>:
    10ce:	aa 1b       	sub	r26, r26
    10d0:	bb 1b       	sub	r27, r27
    10d2:	51 e1       	ldi	r21, 0x11	; 17
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <__udivmodhi4_ep>

000010d6 <__udivmodhi4_loop>:
    10d6:	aa 1f       	adc	r26, r26
    10d8:	bb 1f       	adc	r27, r27
    10da:	a6 17       	cp	r26, r22
    10dc:	b7 07       	cpc	r27, r23
    10de:	10 f0       	brcs	.+4      	; 0x10e4 <__udivmodhi4_ep>
    10e0:	a6 1b       	sub	r26, r22
    10e2:	b7 0b       	sbc	r27, r23

000010e4 <__udivmodhi4_ep>:
    10e4:	88 1f       	adc	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	5a 95       	dec	r21
    10ea:	a9 f7       	brne	.-22     	; 0x10d6 <__udivmodhi4_loop>
    10ec:	80 95       	com	r24
    10ee:	90 95       	com	r25
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	08 95       	ret

000010f6 <__divmodhi4>:
    10f6:	97 fb       	bst	r25, 7
    10f8:	09 2e       	mov	r0, r25
    10fa:	07 26       	eor	r0, r23
    10fc:	0a d0       	rcall	.+20     	; 0x1112 <__divmodhi4_neg1>
    10fe:	77 fd       	sbrc	r23, 7
    1100:	04 d0       	rcall	.+8      	; 0x110a <__divmodhi4_neg2>
    1102:	e5 df       	rcall	.-54     	; 0x10ce <__udivmodhi4>
    1104:	06 d0       	rcall	.+12     	; 0x1112 <__divmodhi4_neg1>
    1106:	00 20       	and	r0, r0
    1108:	1a f4       	brpl	.+6      	; 0x1110 <__divmodhi4_exit>

0000110a <__divmodhi4_neg2>:
    110a:	70 95       	com	r23
    110c:	61 95       	neg	r22
    110e:	7f 4f       	sbci	r23, 0xFF	; 255

00001110 <__divmodhi4_exit>:
    1110:	08 95       	ret

00001112 <__divmodhi4_neg1>:
    1112:	f6 f7       	brtc	.-4      	; 0x1110 <__divmodhi4_exit>
    1114:	90 95       	com	r25
    1116:	81 95       	neg	r24
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	08 95       	ret

0000111c <strcpy>:
    111c:	fb 01       	movw	r30, r22
    111e:	dc 01       	movw	r26, r24
    1120:	01 90       	ld	r0, Z+
    1122:	0d 92       	st	X+, r0
    1124:	00 20       	and	r0, r0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <strcpy+0x4>
    1128:	08 95       	ret

0000112a <fputs>:
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	7c 01       	movw	r14, r24
    1138:	8b 01       	movw	r16, r22
    113a:	db 01       	movw	r26, r22
    113c:	13 96       	adiw	r26, 0x03	; 3
    113e:	8c 91       	ld	r24, X
    1140:	81 fd       	sbrc	r24, 1
    1142:	03 c0       	rjmp	.+6      	; 0x114a <fputs+0x20>
    1144:	cf ef       	ldi	r28, 0xFF	; 255
    1146:	df ef       	ldi	r29, 0xFF	; 255
    1148:	13 c0       	rjmp	.+38     	; 0x1170 <fputs+0x46>
    114a:	c0 e0       	ldi	r28, 0x00	; 0
    114c:	d0 e0       	ldi	r29, 0x00	; 0
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <fputs+0x3c>
    1150:	d8 01       	movw	r26, r16
    1152:	18 96       	adiw	r26, 0x08	; 8
    1154:	ed 91       	ld	r30, X+
    1156:	fc 91       	ld	r31, X
    1158:	19 97       	sbiw	r26, 0x09	; 9
    115a:	b8 01       	movw	r22, r16
    115c:	09 95       	icall
    115e:	89 2b       	or	r24, r25
    1160:	11 f0       	breq	.+4      	; 0x1166 <fputs+0x3c>
    1162:	cf ef       	ldi	r28, 0xFF	; 255
    1164:	df ef       	ldi	r29, 0xFF	; 255
    1166:	f7 01       	movw	r30, r14
    1168:	81 91       	ld	r24, Z+
    116a:	7f 01       	movw	r14, r30
    116c:	88 23       	and	r24, r24
    116e:	81 f7       	brne	.-32     	; 0x1150 <fputs+0x26>
    1170:	ce 01       	movw	r24, r28
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	08 95       	ret

00001180 <fscanf>:
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	9e 01       	movw	r18, r28
    118a:	27 5f       	subi	r18, 0xF7	; 247
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	a9 01       	movw	r20, r18
    1198:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vfscanf>
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <sprintf>:
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	2e 97       	sbiw	r28, 0x0e	; 14
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	0d 89       	ldd	r16, Y+21	; 0x15
    11bc:	1e 89       	ldd	r17, Y+22	; 0x16
    11be:	86 e0       	ldi	r24, 0x06	; 6
    11c0:	8c 83       	std	Y+4, r24	; 0x04
    11c2:	1a 83       	std	Y+2, r17	; 0x02
    11c4:	09 83       	std	Y+1, r16	; 0x01
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	9f e7       	ldi	r25, 0x7F	; 127
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	9e 01       	movw	r18, r28
    11d0:	27 5e       	subi	r18, 0xE7	; 231
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	6f 89       	ldd	r22, Y+23	; 0x17
    11da:	78 8d       	ldd	r23, Y+24	; 0x18
    11dc:	a9 01       	movw	r20, r18
    11de:	0e 94 25 09 	call	0x124a	; 0x124a <vfprintf>
    11e2:	2f 81       	ldd	r18, Y+7	; 0x07
    11e4:	38 85       	ldd	r19, Y+8	; 0x08
    11e6:	02 0f       	add	r16, r18
    11e8:	13 1f       	adc	r17, r19
    11ea:	f8 01       	movw	r30, r16
    11ec:	10 82       	st	Z, r1
    11ee:	2e 96       	adiw	r28, 0x0e	; 14
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <sscanf>:
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	2e 97       	sbiw	r28, 0x0e	; 14
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	85 e0       	ldi	r24, 0x05	; 5
    121a:	8c 83       	std	Y+4, r24	; 0x04
    121c:	8b 89       	ldd	r24, Y+19	; 0x13
    121e:	9c 89       	ldd	r25, Y+20	; 0x14
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	9e 01       	movw	r18, r28
    1226:	29 5e       	subi	r18, 0xE9	; 233
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	6d 89       	ldd	r22, Y+21	; 0x15
    1230:	7e 89       	ldd	r23, Y+22	; 0x16
    1232:	a9 01       	movw	r20, r18
    1234:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <vfscanf>
    1238:	2e 96       	adiw	r28, 0x0e	; 14
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <vfprintf>:
    124a:	2f 92       	push	r2
    124c:	3f 92       	push	r3
    124e:	4f 92       	push	r4
    1250:	5f 92       	push	r5
    1252:	6f 92       	push	r6
    1254:	7f 92       	push	r7
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	2b 97       	sbiw	r28, 0x0b	; 11
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	3c 01       	movw	r6, r24
    1280:	2b 01       	movw	r4, r22
    1282:	5a 01       	movw	r10, r20
    1284:	fc 01       	movw	r30, r24
    1286:	17 82       	std	Z+7, r1	; 0x07
    1288:	16 82       	std	Z+6, r1	; 0x06
    128a:	83 81       	ldd	r24, Z+3	; 0x03
    128c:	81 fd       	sbrc	r24, 1
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <vfprintf+0x4c>
    1290:	6f ef       	ldi	r22, 0xFF	; 255
    1292:	7f ef       	ldi	r23, 0xFF	; 255
    1294:	c6 c1       	rjmp	.+908    	; 0x1622 <vfprintf+0x3d8>
    1296:	9a e0       	ldi	r25, 0x0A	; 10
    1298:	89 2e       	mov	r8, r25
    129a:	1e 01       	movw	r2, r28
    129c:	08 94       	sec
    129e:	21 1c       	adc	r2, r1
    12a0:	31 1c       	adc	r3, r1
    12a2:	f3 01       	movw	r30, r6
    12a4:	23 81       	ldd	r18, Z+3	; 0x03
    12a6:	f2 01       	movw	r30, r4
    12a8:	23 fd       	sbrc	r18, 3
    12aa:	85 91       	lpm	r24, Z+
    12ac:	23 ff       	sbrs	r18, 3
    12ae:	81 91       	ld	r24, Z+
    12b0:	2f 01       	movw	r4, r30
    12b2:	88 23       	and	r24, r24
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <vfprintf+0x6e>
    12b6:	b2 c1       	rjmp	.+868    	; 0x161c <vfprintf+0x3d2>
    12b8:	85 32       	cpi	r24, 0x25	; 37
    12ba:	39 f4       	brne	.+14     	; 0x12ca <vfprintf+0x80>
    12bc:	23 fd       	sbrc	r18, 3
    12be:	85 91       	lpm	r24, Z+
    12c0:	23 ff       	sbrs	r18, 3
    12c2:	81 91       	ld	r24, Z+
    12c4:	2f 01       	movw	r4, r30
    12c6:	85 32       	cpi	r24, 0x25	; 37
    12c8:	29 f4       	brne	.+10     	; 0x12d4 <vfprintf+0x8a>
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	b3 01       	movw	r22, r6
    12ce:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    12d2:	e7 cf       	rjmp	.-50     	; 0x12a2 <vfprintf+0x58>
    12d4:	98 2f       	mov	r25, r24
    12d6:	ff 24       	eor	r15, r15
    12d8:	ee 24       	eor	r14, r14
    12da:	99 24       	eor	r9, r9
    12dc:	ff e1       	ldi	r31, 0x1F	; 31
    12de:	ff 15       	cp	r31, r15
    12e0:	d0 f0       	brcs	.+52     	; 0x1316 <vfprintf+0xcc>
    12e2:	9b 32       	cpi	r25, 0x2B	; 43
    12e4:	69 f0       	breq	.+26     	; 0x1300 <vfprintf+0xb6>
    12e6:	9c 32       	cpi	r25, 0x2C	; 44
    12e8:	28 f4       	brcc	.+10     	; 0x12f4 <vfprintf+0xaa>
    12ea:	90 32       	cpi	r25, 0x20	; 32
    12ec:	59 f0       	breq	.+22     	; 0x1304 <vfprintf+0xba>
    12ee:	93 32       	cpi	r25, 0x23	; 35
    12f0:	91 f4       	brne	.+36     	; 0x1316 <vfprintf+0xcc>
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <vfprintf+0xc6>
    12f4:	9d 32       	cpi	r25, 0x2D	; 45
    12f6:	49 f0       	breq	.+18     	; 0x130a <vfprintf+0xc0>
    12f8:	90 33       	cpi	r25, 0x30	; 48
    12fa:	69 f4       	brne	.+26     	; 0x1316 <vfprintf+0xcc>
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	24 c0       	rjmp	.+72     	; 0x1348 <vfprintf+0xfe>
    1300:	52 e0       	ldi	r21, 0x02	; 2
    1302:	f5 2a       	or	r15, r21
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	f8 2a       	or	r15, r24
    1308:	28 c0       	rjmp	.+80     	; 0x135a <vfprintf+0x110>
    130a:	98 e0       	ldi	r25, 0x08	; 8
    130c:	f9 2a       	or	r15, r25
    130e:	25 c0       	rjmp	.+74     	; 0x135a <vfprintf+0x110>
    1310:	e0 e1       	ldi	r30, 0x10	; 16
    1312:	fe 2a       	or	r15, r30
    1314:	22 c0       	rjmp	.+68     	; 0x135a <vfprintf+0x110>
    1316:	f7 fc       	sbrc	r15, 7
    1318:	29 c0       	rjmp	.+82     	; 0x136c <vfprintf+0x122>
    131a:	89 2f       	mov	r24, r25
    131c:	80 53       	subi	r24, 0x30	; 48
    131e:	8a 30       	cpi	r24, 0x0A	; 10
    1320:	70 f4       	brcc	.+28     	; 0x133e <vfprintf+0xf4>
    1322:	f6 fe       	sbrs	r15, 6
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <vfprintf+0xe6>
    1326:	98 9c       	mul	r9, r8
    1328:	90 2c       	mov	r9, r0
    132a:	11 24       	eor	r1, r1
    132c:	98 0e       	add	r9, r24
    132e:	15 c0       	rjmp	.+42     	; 0x135a <vfprintf+0x110>
    1330:	e8 9c       	mul	r14, r8
    1332:	e0 2c       	mov	r14, r0
    1334:	11 24       	eor	r1, r1
    1336:	e8 0e       	add	r14, r24
    1338:	f0 e2       	ldi	r31, 0x20	; 32
    133a:	ff 2a       	or	r15, r31
    133c:	0e c0       	rjmp	.+28     	; 0x135a <vfprintf+0x110>
    133e:	9e 32       	cpi	r25, 0x2E	; 46
    1340:	29 f4       	brne	.+10     	; 0x134c <vfprintf+0x102>
    1342:	f6 fc       	sbrc	r15, 6
    1344:	6b c1       	rjmp	.+726    	; 0x161c <vfprintf+0x3d2>
    1346:	40 e4       	ldi	r20, 0x40	; 64
    1348:	f4 2a       	or	r15, r20
    134a:	07 c0       	rjmp	.+14     	; 0x135a <vfprintf+0x110>
    134c:	9c 36       	cpi	r25, 0x6C	; 108
    134e:	19 f4       	brne	.+6      	; 0x1356 <vfprintf+0x10c>
    1350:	50 e8       	ldi	r21, 0x80	; 128
    1352:	f5 2a       	or	r15, r21
    1354:	02 c0       	rjmp	.+4      	; 0x135a <vfprintf+0x110>
    1356:	98 36       	cpi	r25, 0x68	; 104
    1358:	49 f4       	brne	.+18     	; 0x136c <vfprintf+0x122>
    135a:	f2 01       	movw	r30, r4
    135c:	23 fd       	sbrc	r18, 3
    135e:	95 91       	lpm	r25, Z+
    1360:	23 ff       	sbrs	r18, 3
    1362:	91 91       	ld	r25, Z+
    1364:	2f 01       	movw	r4, r30
    1366:	99 23       	and	r25, r25
    1368:	09 f0       	breq	.+2      	; 0x136c <vfprintf+0x122>
    136a:	b8 cf       	rjmp	.-144    	; 0x12dc <vfprintf+0x92>
    136c:	89 2f       	mov	r24, r25
    136e:	85 54       	subi	r24, 0x45	; 69
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	18 f0       	brcs	.+6      	; 0x137a <vfprintf+0x130>
    1374:	80 52       	subi	r24, 0x20	; 32
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	38 f4       	brcc	.+14     	; 0x1388 <vfprintf+0x13e>
    137a:	44 e0       	ldi	r20, 0x04	; 4
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	a4 0e       	add	r10, r20
    1380:	b5 1e       	adc	r11, r21
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	59 83       	std	Y+1, r21	; 0x01
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <vfprintf+0x15c>
    1388:	93 36       	cpi	r25, 0x63	; 99
    138a:	31 f0       	breq	.+12     	; 0x1398 <vfprintf+0x14e>
    138c:	93 37       	cpi	r25, 0x73	; 115
    138e:	79 f0       	breq	.+30     	; 0x13ae <vfprintf+0x164>
    1390:	93 35       	cpi	r25, 0x53	; 83
    1392:	09 f0       	breq	.+2      	; 0x1396 <vfprintf+0x14c>
    1394:	56 c0       	rjmp	.+172    	; 0x1442 <vfprintf+0x1f8>
    1396:	20 c0       	rjmp	.+64     	; 0x13d8 <vfprintf+0x18e>
    1398:	f5 01       	movw	r30, r10
    139a:	80 81       	ld	r24, Z
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	42 e0       	ldi	r20, 0x02	; 2
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	a4 0e       	add	r10, r20
    13a4:	b5 1e       	adc	r11, r21
    13a6:	61 01       	movw	r12, r2
    13a8:	01 e0       	ldi	r16, 0x01	; 1
    13aa:	10 e0       	ldi	r17, 0x00	; 0
    13ac:	12 c0       	rjmp	.+36     	; 0x13d2 <vfprintf+0x188>
    13ae:	f5 01       	movw	r30, r10
    13b0:	c0 80       	ld	r12, Z
    13b2:	d1 80       	ldd	r13, Z+1	; 0x01
    13b4:	f6 fc       	sbrc	r15, 6
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <vfprintf+0x174>
    13b8:	6f ef       	ldi	r22, 0xFF	; 255
    13ba:	7f ef       	ldi	r23, 0xFF	; 255
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0x178>
    13be:	69 2d       	mov	r22, r9
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	42 e0       	ldi	r20, 0x02	; 2
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	a4 0e       	add	r10, r20
    13c8:	b5 1e       	adc	r11, r21
    13ca:	c6 01       	movw	r24, r12
    13cc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <strnlen>
    13d0:	8c 01       	movw	r16, r24
    13d2:	5f e7       	ldi	r21, 0x7F	; 127
    13d4:	f5 22       	and	r15, r21
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <vfprintf+0x1b6>
    13d8:	f5 01       	movw	r30, r10
    13da:	c0 80       	ld	r12, Z
    13dc:	d1 80       	ldd	r13, Z+1	; 0x01
    13de:	f6 fc       	sbrc	r15, 6
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <vfprintf+0x19e>
    13e2:	6f ef       	ldi	r22, 0xFF	; 255
    13e4:	7f ef       	ldi	r23, 0xFF	; 255
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x1a2>
    13e8:	69 2d       	mov	r22, r9
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	42 e0       	ldi	r20, 0x02	; 2
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	a4 0e       	add	r10, r20
    13f2:	b5 1e       	adc	r11, r21
    13f4:	c6 01       	movw	r24, r12
    13f6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <strnlen_P>
    13fa:	8c 01       	movw	r16, r24
    13fc:	50 e8       	ldi	r21, 0x80	; 128
    13fe:	f5 2a       	or	r15, r21
    1400:	f3 fe       	sbrs	r15, 3
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <vfprintf+0x1c8>
    1404:	1a c0       	rjmp	.+52     	; 0x143a <vfprintf+0x1f0>
    1406:	80 e2       	ldi	r24, 0x20	; 32
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	b3 01       	movw	r22, r6
    140c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    1410:	ea 94       	dec	r14
    1412:	8e 2d       	mov	r24, r14
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	08 17       	cp	r16, r24
    1418:	19 07       	cpc	r17, r25
    141a:	a8 f3       	brcs	.-22     	; 0x1406 <vfprintf+0x1bc>
    141c:	0e c0       	rjmp	.+28     	; 0x143a <vfprintf+0x1f0>
    141e:	f6 01       	movw	r30, r12
    1420:	f7 fc       	sbrc	r15, 7
    1422:	85 91       	lpm	r24, Z+
    1424:	f7 fe       	sbrs	r15, 7
    1426:	81 91       	ld	r24, Z+
    1428:	6f 01       	movw	r12, r30
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	b3 01       	movw	r22, r6
    142e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    1432:	e1 10       	cpse	r14, r1
    1434:	ea 94       	dec	r14
    1436:	01 50       	subi	r16, 0x01	; 1
    1438:	10 40       	sbci	r17, 0x00	; 0
    143a:	01 15       	cp	r16, r1
    143c:	11 05       	cpc	r17, r1
    143e:	79 f7       	brne	.-34     	; 0x141e <vfprintf+0x1d4>
    1440:	ea c0       	rjmp	.+468    	; 0x1616 <vfprintf+0x3cc>
    1442:	94 36       	cpi	r25, 0x64	; 100
    1444:	11 f0       	breq	.+4      	; 0x144a <vfprintf+0x200>
    1446:	99 36       	cpi	r25, 0x69	; 105
    1448:	69 f5       	brne	.+90     	; 0x14a4 <vfprintf+0x25a>
    144a:	f7 fe       	sbrs	r15, 7
    144c:	08 c0       	rjmp	.+16     	; 0x145e <vfprintf+0x214>
    144e:	f5 01       	movw	r30, r10
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	42 81       	ldd	r20, Z+2	; 0x02
    1456:	53 81       	ldd	r21, Z+3	; 0x03
    1458:	84 e0       	ldi	r24, 0x04	; 4
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <vfprintf+0x228>
    145e:	f5 01       	movw	r30, r10
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	9c 01       	movw	r18, r24
    1466:	44 27       	eor	r20, r20
    1468:	37 fd       	sbrc	r19, 7
    146a:	40 95       	com	r20
    146c:	54 2f       	mov	r21, r20
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a8 0e       	add	r10, r24
    1474:	b9 1e       	adc	r11, r25
    1476:	9f e6       	ldi	r25, 0x6F	; 111
    1478:	f9 22       	and	r15, r25
    147a:	57 ff       	sbrs	r21, 7
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <vfprintf+0x246>
    147e:	50 95       	com	r21
    1480:	40 95       	com	r20
    1482:	30 95       	com	r19
    1484:	21 95       	neg	r18
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	4f 4f       	sbci	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	e0 e8       	ldi	r30, 0x80	; 128
    148e:	fe 2a       	or	r15, r30
    1490:	ca 01       	movw	r24, r20
    1492:	b9 01       	movw	r22, r18
    1494:	a1 01       	movw	r20, r2
    1496:	2a e0       	ldi	r18, 0x0A	; 10
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__ultoa_invert>
    149e:	d8 2e       	mov	r13, r24
    14a0:	d2 18       	sub	r13, r2
    14a2:	40 c0       	rjmp	.+128    	; 0x1524 <vfprintf+0x2da>
    14a4:	95 37       	cpi	r25, 0x75	; 117
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <vfprintf+0x268>
    14a8:	1f 2d       	mov	r17, r15
    14aa:	1f 7e       	andi	r17, 0xEF	; 239
    14ac:	2a e0       	ldi	r18, 0x0A	; 10
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	1d c0       	rjmp	.+58     	; 0x14ec <vfprintf+0x2a2>
    14b2:	1f 2d       	mov	r17, r15
    14b4:	19 7f       	andi	r17, 0xF9	; 249
    14b6:	9f 36       	cpi	r25, 0x6F	; 111
    14b8:	61 f0       	breq	.+24     	; 0x14d2 <vfprintf+0x288>
    14ba:	90 37       	cpi	r25, 0x70	; 112
    14bc:	20 f4       	brcc	.+8      	; 0x14c6 <vfprintf+0x27c>
    14be:	98 35       	cpi	r25, 0x58	; 88
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <vfprintf+0x27a>
    14c2:	ac c0       	rjmp	.+344    	; 0x161c <vfprintf+0x3d2>
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <vfprintf+0x29a>
    14c6:	90 37       	cpi	r25, 0x70	; 112
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <vfprintf+0x28e>
    14ca:	98 37       	cpi	r25, 0x78	; 120
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <vfprintf+0x286>
    14ce:	a6 c0       	rjmp	.+332    	; 0x161c <vfprintf+0x3d2>
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <vfprintf+0x290>
    14d2:	28 e0       	ldi	r18, 0x08	; 8
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	0a c0       	rjmp	.+20     	; 0x14ec <vfprintf+0x2a2>
    14d8:	10 61       	ori	r17, 0x10	; 16
    14da:	14 fd       	sbrc	r17, 4
    14dc:	14 60       	ori	r17, 0x04	; 4
    14de:	20 e1       	ldi	r18, 0x10	; 16
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <vfprintf+0x2a2>
    14e4:	14 fd       	sbrc	r17, 4
    14e6:	16 60       	ori	r17, 0x06	; 6
    14e8:	20 e1       	ldi	r18, 0x10	; 16
    14ea:	32 e0       	ldi	r19, 0x02	; 2
    14ec:	17 ff       	sbrs	r17, 7
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <vfprintf+0x2b6>
    14f0:	f5 01       	movw	r30, r10
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	44 e0       	ldi	r20, 0x04	; 4
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <vfprintf+0x2c6>
    1500:	f5 01       	movw	r30, r10
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	bc 01       	movw	r22, r24
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	42 e0       	ldi	r20, 0x02	; 2
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	a4 0e       	add	r10, r20
    1512:	b5 1e       	adc	r11, r21
    1514:	a1 01       	movw	r20, r2
    1516:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__ultoa_invert>
    151a:	d8 2e       	mov	r13, r24
    151c:	d2 18       	sub	r13, r2
    151e:	8f e7       	ldi	r24, 0x7F	; 127
    1520:	f8 2e       	mov	r15, r24
    1522:	f1 22       	and	r15, r17
    1524:	f6 fe       	sbrs	r15, 6
    1526:	0b c0       	rjmp	.+22     	; 0x153e <vfprintf+0x2f4>
    1528:	5e ef       	ldi	r21, 0xFE	; 254
    152a:	f5 22       	and	r15, r21
    152c:	d9 14       	cp	r13, r9
    152e:	38 f4       	brcc	.+14     	; 0x153e <vfprintf+0x2f4>
    1530:	f4 fe       	sbrs	r15, 4
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <vfprintf+0x2f8>
    1534:	f2 fc       	sbrc	r15, 2
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <vfprintf+0x2f8>
    1538:	8f ee       	ldi	r24, 0xEF	; 239
    153a:	f8 22       	and	r15, r24
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x2f8>
    153e:	1d 2d       	mov	r17, r13
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <vfprintf+0x2fa>
    1542:	19 2d       	mov	r17, r9
    1544:	f4 fe       	sbrs	r15, 4
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <vfprintf+0x318>
    1548:	fe 01       	movw	r30, r28
    154a:	ed 0d       	add	r30, r13
    154c:	f1 1d       	adc	r31, r1
    154e:	80 81       	ld	r24, Z
    1550:	80 33       	cpi	r24, 0x30	; 48
    1552:	19 f4       	brne	.+6      	; 0x155a <vfprintf+0x310>
    1554:	99 ee       	ldi	r25, 0xE9	; 233
    1556:	f9 22       	and	r15, r25
    1558:	08 c0       	rjmp	.+16     	; 0x156a <vfprintf+0x320>
    155a:	1f 5f       	subi	r17, 0xFF	; 255
    155c:	f2 fe       	sbrs	r15, 2
    155e:	05 c0       	rjmp	.+10     	; 0x156a <vfprintf+0x320>
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <vfprintf+0x31e>
    1562:	8f 2d       	mov	r24, r15
    1564:	86 78       	andi	r24, 0x86	; 134
    1566:	09 f0       	breq	.+2      	; 0x156a <vfprintf+0x320>
    1568:	1f 5f       	subi	r17, 0xFF	; 255
    156a:	0f 2d       	mov	r16, r15
    156c:	f3 fc       	sbrc	r15, 3
    156e:	14 c0       	rjmp	.+40     	; 0x1598 <vfprintf+0x34e>
    1570:	f0 fe       	sbrs	r15, 0
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <vfprintf+0x348>
    1574:	1e 15       	cp	r17, r14
    1576:	10 f0       	brcs	.+4      	; 0x157c <vfprintf+0x332>
    1578:	9d 2c       	mov	r9, r13
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <vfprintf+0x348>
    157c:	9d 2c       	mov	r9, r13
    157e:	9e 0c       	add	r9, r14
    1580:	91 1a       	sub	r9, r17
    1582:	1e 2d       	mov	r17, r14
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <vfprintf+0x348>
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	b3 01       	movw	r22, r6
    158c:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    1590:	1f 5f       	subi	r17, 0xFF	; 255
    1592:	1e 15       	cp	r17, r14
    1594:	c0 f3       	brcs	.-16     	; 0x1586 <vfprintf+0x33c>
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <vfprintf+0x356>
    1598:	1e 15       	cp	r17, r14
    159a:	10 f4       	brcc	.+4      	; 0x15a0 <vfprintf+0x356>
    159c:	e1 1a       	sub	r14, r17
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <vfprintf+0x358>
    15a0:	ee 24       	eor	r14, r14
    15a2:	04 ff       	sbrs	r16, 4
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <vfprintf+0x37a>
    15a6:	80 e3       	ldi	r24, 0x30	; 48
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	b3 01       	movw	r22, r6
    15ac:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    15b0:	02 ff       	sbrs	r16, 2
    15b2:	1d c0       	rjmp	.+58     	; 0x15ee <vfprintf+0x3a4>
    15b4:	01 fd       	sbrc	r16, 1
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <vfprintf+0x374>
    15b8:	88 e7       	ldi	r24, 0x78	; 120
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e c0       	rjmp	.+28     	; 0x15da <vfprintf+0x390>
    15be:	88 e5       	ldi	r24, 0x58	; 88
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <vfprintf+0x390>
    15c4:	80 2f       	mov	r24, r16
    15c6:	86 78       	andi	r24, 0x86	; 134
    15c8:	91 f0       	breq	.+36     	; 0x15ee <vfprintf+0x3a4>
    15ca:	01 ff       	sbrs	r16, 1
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <vfprintf+0x388>
    15ce:	8b e2       	ldi	r24, 0x2B	; 43
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <vfprintf+0x38a>
    15d2:	80 e2       	ldi	r24, 0x20	; 32
    15d4:	f7 fc       	sbrc	r15, 7
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	b3 01       	movw	r22, r6
    15dc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <vfprintf+0x3a4>
    15e2:	80 e3       	ldi	r24, 0x30	; 48
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	b3 01       	movw	r22, r6
    15e8:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    15ec:	9a 94       	dec	r9
    15ee:	d9 14       	cp	r13, r9
    15f0:	c0 f3       	brcs	.-16     	; 0x15e2 <vfprintf+0x398>
    15f2:	da 94       	dec	r13
    15f4:	f1 01       	movw	r30, r2
    15f6:	ed 0d       	add	r30, r13
    15f8:	f1 1d       	adc	r31, r1
    15fa:	80 81       	ld	r24, Z
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	b3 01       	movw	r22, r6
    1600:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    1604:	dd 20       	and	r13, r13
    1606:	a9 f7       	brne	.-22     	; 0x15f2 <vfprintf+0x3a8>
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <vfprintf+0x3cc>
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	b3 01       	movw	r22, r6
    1610:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <fputc>
    1614:	ea 94       	dec	r14
    1616:	ee 20       	and	r14, r14
    1618:	c1 f7       	brne	.-16     	; 0x160a <vfprintf+0x3c0>
    161a:	43 ce       	rjmp	.-890    	; 0x12a2 <vfprintf+0x58>
    161c:	f3 01       	movw	r30, r6
    161e:	66 81       	ldd	r22, Z+6	; 0x06
    1620:	77 81       	ldd	r23, Z+7	; 0x07
    1622:	cb 01       	movw	r24, r22
    1624:	2b 96       	adiw	r28, 0x0b	; 11
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	7f 90       	pop	r7
    164a:	6f 90       	pop	r6
    164c:	5f 90       	pop	r5
    164e:	4f 90       	pop	r4
    1650:	3f 90       	pop	r3
    1652:	2f 90       	pop	r2
    1654:	08 95       	ret

00001656 <putval>:
    1656:	fc 01       	movw	r30, r24
    1658:	20 fd       	sbrc	r18, 0
    165a:	08 c0       	rjmp	.+16     	; 0x166c <putval+0x16>
    165c:	23 fd       	sbrc	r18, 3
    165e:	05 c0       	rjmp	.+10     	; 0x166a <putval+0x14>
    1660:	22 ff       	sbrs	r18, 2
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <putval+0x12>
    1664:	73 83       	std	Z+3, r23	; 0x03
    1666:	62 83       	std	Z+2, r22	; 0x02
    1668:	51 83       	std	Z+1, r21	; 0x01
    166a:	40 83       	st	Z, r20
    166c:	08 95       	ret

0000166e <mulacc>:
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	44 ff       	sbrs	r20, 4
    1678:	02 c0       	rjmp	.+4      	; 0x167e <mulacc+0x10>
    167a:	33 e0       	ldi	r19, 0x03	; 3
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <mulacc+0x32>
    167e:	46 ff       	sbrs	r20, 6
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <mulacc+0x18>
    1682:	34 e0       	ldi	r19, 0x04	; 4
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <mulacc+0x32>
    1686:	db 01       	movw	r26, r22
    1688:	fc 01       	movw	r30, r24
    168a:	aa 0f       	add	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	ee 1f       	adc	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	10 94       	com	r1
    1694:	d1 f7       	brne	.-12     	; 0x168a <mulacc+0x1c>
    1696:	6a 0f       	add	r22, r26
    1698:	7b 1f       	adc	r23, r27
    169a:	8e 1f       	adc	r24, r30
    169c:	9f 1f       	adc	r25, r31
    169e:	31 e0       	ldi	r19, 0x01	; 1
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	31 50       	subi	r19, 0x01	; 1
    16aa:	d1 f7       	brne	.-12     	; 0x16a0 <mulacc+0x32>
    16ac:	7b 01       	movw	r14, r22
    16ae:	8c 01       	movw	r16, r24
    16b0:	e2 0e       	add	r14, r18
    16b2:	f1 1c       	adc	r15, r1
    16b4:	01 1d       	adc	r16, r1
    16b6:	11 1d       	adc	r17, r1
    16b8:	a8 01       	movw	r20, r16
    16ba:	97 01       	movw	r18, r14
    16bc:	b7 01       	movw	r22, r14
    16be:	ca 01       	movw	r24, r20
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	08 95       	ret

000016ca <skip_spaces>:
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	8c 01       	movw	r16, r24
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    16da:	ec 01       	movw	r28, r24
    16dc:	97 fd       	sbrc	r25, 7
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <skip_spaces+0x26>
    16e0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <isspace>
    16e4:	89 2b       	or	r24, r25
    16e6:	b1 f7       	brne	.-20     	; 0x16d4 <skip_spaces+0xa>
    16e8:	ce 01       	movw	r24, r28
    16ea:	b8 01       	movw	r22, r16
    16ec:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <ungetc>
    16f0:	ce 01       	movw	r24, r28
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <conv_int>:
    16fc:	af 92       	push	r10
    16fe:	bf 92       	push	r11
    1700:	cf 92       	push	r12
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
    1712:	c6 2e       	mov	r12, r22
    1714:	5a 01       	movw	r10, r20
    1716:	12 2f       	mov	r17, r18
    1718:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    171c:	ac 01       	movw	r20, r24
    171e:	8b 32       	cpi	r24, 0x2B	; 43
    1720:	19 f0       	breq	.+6      	; 0x1728 <conv_int+0x2c>
    1722:	8d 32       	cpi	r24, 0x2D	; 45
    1724:	51 f4       	brne	.+20     	; 0x173a <conv_int+0x3e>
    1726:	10 68       	ori	r17, 0x80	; 128
    1728:	ca 94       	dec	r12
    172a:	09 f4       	brne	.+2      	; 0x172e <conv_int+0x32>
    172c:	6d c0       	rjmp	.+218    	; 0x1808 <conv_int+0x10c>
    172e:	ce 01       	movw	r24, r28
    1730:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    1734:	ac 01       	movw	r20, r24
    1736:	97 fd       	sbrc	r25, 7
    1738:	67 c0       	rjmp	.+206    	; 0x1808 <conv_int+0x10c>
    173a:	6d ef       	ldi	r22, 0xFD	; 253
    173c:	d6 2e       	mov	r13, r22
    173e:	d1 22       	and	r13, r17
    1740:	8d 2d       	mov	r24, r13
    1742:	80 73       	andi	r24, 0x30	; 48
    1744:	01 f5       	brne	.+64     	; 0x1786 <conv_int+0x8a>
    1746:	40 33       	cpi	r20, 0x30	; 48
    1748:	f1 f4       	brne	.+60     	; 0x1786 <conv_int+0x8a>
    174a:	ca 94       	dec	r12
    174c:	09 f4       	brne	.+2      	; 0x1750 <conv_int+0x54>
    174e:	47 c0       	rjmp	.+142    	; 0x17de <conv_int+0xe2>
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    1756:	ac 01       	movw	r20, r24
    1758:	97 fd       	sbrc	r25, 7
    175a:	41 c0       	rjmp	.+130    	; 0x17de <conv_int+0xe2>
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	d8 2a       	or	r13, r24
    1760:	48 37       	cpi	r20, 0x78	; 120
    1762:	11 f0       	breq	.+4      	; 0x1768 <conv_int+0x6c>
    1764:	48 35       	cpi	r20, 0x58	; 88
    1766:	59 f4       	brne	.+22     	; 0x177e <conv_int+0x82>
    1768:	80 e4       	ldi	r24, 0x40	; 64
    176a:	d8 2a       	or	r13, r24
    176c:	ca 94       	dec	r12
    176e:	b9 f1       	breq	.+110    	; 0x17de <conv_int+0xe2>
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    1776:	ac 01       	movw	r20, r24
    1778:	99 23       	and	r25, r25
    177a:	2c f4       	brge	.+10     	; 0x1786 <conv_int+0x8a>
    177c:	30 c0       	rjmp	.+96     	; 0x17de <conv_int+0xe2>
    177e:	d6 fc       	sbrc	r13, 6
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <conv_int+0x8a>
    1782:	80 e1       	ldi	r24, 0x10	; 16
    1784:	d8 2a       	or	r13, r24
    1786:	ee 24       	eor	r14, r14
    1788:	ff 24       	eor	r15, r15
    178a:	87 01       	movw	r16, r14
    178c:	24 2f       	mov	r18, r20
    178e:	20 53       	subi	r18, 0x30	; 48
    1790:	28 30       	cpi	r18, 0x08	; 8
    1792:	88 f0       	brcs	.+34     	; 0x17b6 <conv_int+0xba>
    1794:	d4 fc       	sbrc	r13, 4
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <conv_int+0xae>
    1798:	2a 30       	cpi	r18, 0x0A	; 10
    179a:	68 f0       	brcs	.+26     	; 0x17b6 <conv_int+0xba>
    179c:	d6 fe       	sbrs	r13, 6
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <conv_int+0xae>
    17a0:	2f 7d       	andi	r18, 0xDF	; 223
    17a2:	82 2f       	mov	r24, r18
    17a4:	81 51       	subi	r24, 0x11	; 17
    17a6:	86 30       	cpi	r24, 0x06	; 6
    17a8:	28 f0       	brcs	.+10     	; 0x17b4 <conv_int+0xb8>
    17aa:	ca 01       	movw	r24, r20
    17ac:	be 01       	movw	r22, r28
    17ae:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <ungetc>
    17b2:	12 c0       	rjmp	.+36     	; 0x17d8 <conv_int+0xdc>
    17b4:	27 50       	subi	r18, 0x07	; 7
    17b6:	c8 01       	movw	r24, r16
    17b8:	b7 01       	movw	r22, r14
    17ba:	4d 2d       	mov	r20, r13
    17bc:	0e 94 37 0b 	call	0x166e	; 0x166e <mulacc>
    17c0:	7b 01       	movw	r14, r22
    17c2:	8c 01       	movw	r16, r24
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	d8 2a       	or	r13, r24
    17c8:	ca 94       	dec	r12
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <conv_int+0xe8>
    17cc:	ce 01       	movw	r24, r28
    17ce:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    17d2:	ac 01       	movw	r20, r24
    17d4:	97 ff       	sbrs	r25, 7
    17d6:	da cf       	rjmp	.-76     	; 0x178c <conv_int+0x90>
    17d8:	d1 fc       	sbrc	r13, 1
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <conv_int+0xe8>
    17dc:	15 c0       	rjmp	.+42     	; 0x1808 <conv_int+0x10c>
    17de:	ee 24       	eor	r14, r14
    17e0:	ff 24       	eor	r15, r15
    17e2:	87 01       	movw	r16, r14
    17e4:	d7 fe       	sbrs	r13, 7
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <conv_int+0xfc>
    17e8:	10 95       	com	r17
    17ea:	00 95       	com	r16
    17ec:	f0 94       	com	r15
    17ee:	e0 94       	com	r14
    17f0:	e1 1c       	adc	r14, r1
    17f2:	f1 1c       	adc	r15, r1
    17f4:	01 1d       	adc	r16, r1
    17f6:	11 1d       	adc	r17, r1
    17f8:	c5 01       	movw	r24, r10
    17fa:	b8 01       	movw	r22, r16
    17fc:	a7 01       	movw	r20, r14
    17fe:	2d 2d       	mov	r18, r13
    1800:	0e 94 2b 0b 	call	0x1656	; 0x1656 <putval>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	01 c0       	rjmp	.+2      	; 0x180a <conv_int+0x10e>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	cf 90       	pop	r12
    181a:	bf 90       	pop	r11
    181c:	af 90       	pop	r10
    181e:	08 95       	ret

00001820 <conv_brk>:
    1820:	6f 92       	push	r6
    1822:	7f 92       	push	r7
    1824:	8f 92       	push	r8
    1826:	9f 92       	push	r9
    1828:	af 92       	push	r10
    182a:	bf 92       	push	r11
    182c:	cf 92       	push	r12
    182e:	df 92       	push	r13
    1830:	ef 92       	push	r14
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	a0 97       	sbiw	r28, 0x20	; 32
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	6c 01       	movw	r12, r24
    184e:	a6 2e       	mov	r10, r22
    1850:	8a 01       	movw	r16, r20
    1852:	79 01       	movw	r14, r18
    1854:	fe 01       	movw	r30, r28
    1856:	31 96       	adiw	r30, 0x01	; 1
    1858:	80 e2       	ldi	r24, 0x20	; 32
    185a:	df 01       	movw	r26, r30
    185c:	1d 92       	st	X+, r1
    185e:	8a 95       	dec	r24
    1860:	e9 f7       	brne	.-6      	; 0x185c <conv_brk+0x3c>
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	4f 01       	movw	r8, r30
    186e:	a1 e0       	ldi	r26, 0x01	; 1
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	f6 01       	movw	r30, r12
    1874:	83 81       	ldd	r24, Z+3	; 0x03
    1876:	f7 01       	movw	r30, r14
    1878:	83 fd       	sbrc	r24, 3
    187a:	25 91       	lpm	r18, Z+
    187c:	83 ff       	sbrs	r24, 3
    187e:	21 91       	ld	r18, Z+
    1880:	7f 01       	movw	r14, r30
    1882:	22 23       	and	r18, r18
    1884:	09 f4       	brne	.+2      	; 0x1888 <conv_brk+0x68>
    1886:	7e c0       	rjmp	.+252    	; 0x1984 <conv_brk+0x164>
    1888:	2e 35       	cpi	r18, 0x5E	; 94
    188a:	19 f4       	brne	.+6      	; 0x1892 <conv_brk+0x72>
    188c:	41 15       	cp	r20, r1
    188e:	51 05       	cpc	r21, r1
    1890:	69 f1       	breq	.+90     	; 0x18ec <conv_brk+0xcc>
    1892:	87 2f       	mov	r24, r23
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	84 17       	cp	r24, r20
    1898:	95 07       	cpc	r25, r21
    189a:	44 f4       	brge	.+16     	; 0x18ac <conv_brk+0x8c>
    189c:	2d 35       	cpi	r18, 0x5D	; 93
    189e:	51 f1       	breq	.+84     	; 0x18f4 <conv_brk+0xd4>
    18a0:	2d 32       	cpi	r18, 0x2D	; 45
    18a2:	21 f4       	brne	.+8      	; 0x18ac <conv_brk+0x8c>
    18a4:	33 23       	and	r19, r19
    18a6:	29 f4       	brne	.+10     	; 0x18b2 <conv_brk+0x92>
    18a8:	31 e0       	ldi	r19, 0x01	; 1
    18aa:	21 c0       	rjmp	.+66     	; 0x18ee <conv_brk+0xce>
    18ac:	33 23       	and	r19, r19
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <conv_brk+0x92>
    18b0:	62 2f       	mov	r22, r18
    18b2:	32 2f       	mov	r19, r18
    18b4:	83 2f       	mov	r24, r19
    18b6:	86 95       	lsr	r24
    18b8:	86 95       	lsr	r24
    18ba:	86 95       	lsr	r24
    18bc:	f4 01       	movw	r30, r8
    18be:	e8 0f       	add	r30, r24
    18c0:	f1 1d       	adc	r31, r1
    18c2:	83 2f       	mov	r24, r19
    18c4:	87 70       	andi	r24, 0x07	; 7
    18c6:	3d 01       	movw	r6, r26
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <conv_brk+0xae>
    18ca:	66 0c       	add	r6, r6
    18cc:	77 1c       	adc	r7, r7
    18ce:	8a 95       	dec	r24
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <conv_brk+0xaa>
    18d2:	20 81       	ld	r18, Z
    18d4:	26 29       	or	r18, r6
    18d6:	20 83       	st	Z, r18
    18d8:	36 17       	cp	r19, r22
    18da:	11 f4       	brne	.+4      	; 0x18e0 <conv_brk+0xc0>
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	07 c0       	rjmp	.+14     	; 0x18ee <conv_brk+0xce>
    18e0:	36 17       	cp	r19, r22
    18e2:	10 f4       	brcc	.+4      	; 0x18e8 <conv_brk+0xc8>
    18e4:	3f 5f       	subi	r19, 0xFF	; 255
    18e6:	e6 cf       	rjmp	.-52     	; 0x18b4 <conv_brk+0x94>
    18e8:	31 50       	subi	r19, 0x01	; 1
    18ea:	e4 cf       	rjmp	.-56     	; 0x18b4 <conv_brk+0x94>
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	4f 5f       	subi	r20, 0xFF	; 255
    18f0:	5f 4f       	sbci	r21, 0xFF	; 255
    18f2:	bf cf       	rjmp	.-130    	; 0x1872 <conv_brk+0x52>
    18f4:	33 23       	and	r19, r19
    18f6:	19 f0       	breq	.+6      	; 0x18fe <conv_brk+0xde>
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	80 62       	ori	r24, 0x20	; 32
    18fc:	8e 83       	std	Y+6, r24	; 0x06
    18fe:	77 23       	and	r23, r23
    1900:	59 f0       	breq	.+22     	; 0x1918 <conv_brk+0xf8>
    1902:	fe 01       	movw	r30, r28
    1904:	31 96       	adiw	r30, 0x01	; 1
    1906:	9e 01       	movw	r18, r28
    1908:	2f 5d       	subi	r18, 0xDF	; 223
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	80 81       	ld	r24, Z
    190e:	80 95       	com	r24
    1910:	81 93       	st	Z+, r24
    1912:	e2 17       	cp	r30, r18
    1914:	f3 07       	cpc	r31, r19
    1916:	d1 f7       	brne	.-12     	; 0x190c <conv_brk+0xec>
    1918:	bb 24       	eor	r11, r11
    191a:	b3 94       	inc	r11
    191c:	4e 01       	movw	r8, r28
    191e:	08 94       	sec
    1920:	81 1c       	adc	r8, r1
    1922:	91 1c       	adc	r9, r1
    1924:	c6 01       	movw	r24, r12
    1926:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    192a:	ac 01       	movw	r20, r24
    192c:	97 fd       	sbrc	r25, 7
    192e:	22 c0       	rjmp	.+68     	; 0x1974 <conv_brk+0x154>
    1930:	86 95       	lsr	r24
    1932:	86 95       	lsr	r24
    1934:	86 95       	lsr	r24
    1936:	f4 01       	movw	r30, r8
    1938:	e8 0f       	add	r30, r24
    193a:	f1 1d       	adc	r31, r1
    193c:	80 81       	ld	r24, Z
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9a 01       	movw	r18, r20
    1942:	27 70       	andi	r18, 0x07	; 7
    1944:	30 70       	andi	r19, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <conv_brk+0x12c>
    1948:	95 95       	asr	r25
    194a:	87 95       	ror	r24
    194c:	2a 95       	dec	r18
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <conv_brk+0x128>
    1950:	80 fd       	sbrc	r24, 0
    1952:	05 c0       	rjmp	.+10     	; 0x195e <conv_brk+0x13e>
    1954:	ca 01       	movw	r24, r20
    1956:	b6 01       	movw	r22, r12
    1958:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <ungetc>
    195c:	0b c0       	rjmp	.+22     	; 0x1974 <conv_brk+0x154>
    195e:	01 15       	cp	r16, r1
    1960:	11 05       	cpc	r17, r1
    1962:	19 f0       	breq	.+6      	; 0x196a <conv_brk+0x14a>
    1964:	d8 01       	movw	r26, r16
    1966:	4d 93       	st	X+, r20
    1968:	8d 01       	movw	r16, r26
    196a:	aa 94       	dec	r10
    196c:	bb 24       	eor	r11, r11
    196e:	aa 20       	and	r10, r10
    1970:	c9 f6       	brne	.-78     	; 0x1924 <conv_brk+0x104>
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <conv_brk+0x158>
    1974:	bb 20       	and	r11, r11
    1976:	31 f4       	brne	.+12     	; 0x1984 <conv_brk+0x164>
    1978:	01 15       	cp	r16, r1
    197a:	11 05       	cpc	r17, r1
    197c:	29 f0       	breq	.+10     	; 0x1988 <conv_brk+0x168>
    197e:	f8 01       	movw	r30, r16
    1980:	10 82       	st	Z, r1
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <conv_brk+0x168>
    1984:	ee 24       	eor	r14, r14
    1986:	ff 24       	eor	r15, r15
    1988:	c7 01       	movw	r24, r14
    198a:	a0 96       	adiw	r28, 0x20	; 32
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	df 90       	pop	r13
    19a4:	cf 90       	pop	r12
    19a6:	bf 90       	pop	r11
    19a8:	af 90       	pop	r10
    19aa:	9f 90       	pop	r9
    19ac:	8f 90       	pop	r8
    19ae:	7f 90       	pop	r7
    19b0:	6f 90       	pop	r6
    19b2:	08 95       	ret

000019b4 <vfscanf>:
    19b4:	6f 92       	push	r6
    19b6:	7f 92       	push	r7
    19b8:	8f 92       	push	r8
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	5c 01       	movw	r10, r24
    19d2:	6b 01       	movw	r12, r22
    19d4:	3a 01       	movw	r6, r20
    19d6:	fc 01       	movw	r30, r24
    19d8:	17 82       	std	Z+7, r1	; 0x07
    19da:	16 82       	std	Z+6, r1	; 0x06
    19dc:	88 24       	eor	r8, r8
    19de:	ea c0       	rjmp	.+468    	; 0x1bb4 <vfscanf+0x200>
    19e0:	81 2f       	mov	r24, r17
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <isspace>
    19e8:	89 2b       	or	r24, r25
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <vfscanf+0x40>
    19ec:	c5 01       	movw	r24, r10
    19ee:	0e 94 65 0b 	call	0x16ca	; 0x16ca <skip_spaces>
    19f2:	e0 c0       	rjmp	.+448    	; 0x1bb4 <vfscanf+0x200>
    19f4:	15 32       	cpi	r17, 0x25	; 37
    19f6:	49 f4       	brne	.+18     	; 0x1a0a <vfscanf+0x56>
    19f8:	f6 01       	movw	r30, r12
    19fa:	f3 fc       	sbrc	r15, 3
    19fc:	65 91       	lpm	r22, Z+
    19fe:	f3 fe       	sbrs	r15, 3
    1a00:	61 91       	ld	r22, Z+
    1a02:	6f 01       	movw	r12, r30
    1a04:	65 32       	cpi	r22, 0x25	; 37
    1a06:	69 f4       	brne	.+26     	; 0x1a22 <vfscanf+0x6e>
    1a08:	15 e2       	ldi	r17, 0x25	; 37
    1a0a:	c5 01       	movw	r24, r10
    1a0c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    1a10:	97 fd       	sbrc	r25, 7
    1a12:	dc c0       	rjmp	.+440    	; 0x1bcc <vfscanf+0x218>
    1a14:	18 17       	cp	r17, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <vfscanf+0x66>
    1a18:	cd c0       	rjmp	.+410    	; 0x1bb4 <vfscanf+0x200>
    1a1a:	b5 01       	movw	r22, r10
    1a1c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <ungetc>
    1a20:	da c0       	rjmp	.+436    	; 0x1bd6 <vfscanf+0x222>
    1a22:	6a 32       	cpi	r22, 0x2A	; 42
    1a24:	19 f0       	breq	.+6      	; 0x1a2c <vfscanf+0x78>
    1a26:	16 2f       	mov	r17, r22
    1a28:	00 e0       	ldi	r16, 0x00	; 0
    1a2a:	06 c0       	rjmp	.+12     	; 0x1a38 <vfscanf+0x84>
    1a2c:	f3 fc       	sbrc	r15, 3
    1a2e:	15 91       	lpm	r17, Z+
    1a30:	f3 fe       	sbrs	r15, 3
    1a32:	11 91       	ld	r17, Z+
    1a34:	6f 01       	movw	r12, r30
    1a36:	01 e0       	ldi	r16, 0x01	; 1
    1a38:	99 24       	eor	r9, r9
    1a3a:	0f c0       	rjmp	.+30     	; 0x1a5a <vfscanf+0xa6>
    1a3c:	02 60       	ori	r16, 0x02	; 2
    1a3e:	69 2d       	mov	r22, r9
    1a40:	70 e0       	ldi	r23, 0x00	; 0
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	0e 94 37 0b 	call	0x166e	; 0x166e <mulacc>
    1a4c:	96 2e       	mov	r9, r22
    1a4e:	f6 01       	movw	r30, r12
    1a50:	f3 fc       	sbrc	r15, 3
    1a52:	15 91       	lpm	r17, Z+
    1a54:	f3 fe       	sbrs	r15, 3
    1a56:	11 91       	ld	r17, Z+
    1a58:	6f 01       	movw	r12, r30
    1a5a:	21 2f       	mov	r18, r17
    1a5c:	20 53       	subi	r18, 0x30	; 48
    1a5e:	2a 30       	cpi	r18, 0x0A	; 10
    1a60:	68 f3       	brcs	.-38     	; 0x1a3c <vfscanf+0x88>
    1a62:	01 fd       	sbrc	r16, 1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <vfscanf+0xb8>
    1a66:	99 24       	eor	r9, r9
    1a68:	9a 94       	dec	r9
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <vfscanf+0xbe>
    1a6c:	99 20       	and	r9, r9
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <vfscanf+0xbe>
    1a70:	b2 c0       	rjmp	.+356    	; 0x1bd6 <vfscanf+0x222>
    1a72:	18 36       	cpi	r17, 0x68	; 104
    1a74:	21 f0       	breq	.+8      	; 0x1a7e <vfscanf+0xca>
    1a76:	1c 36       	cpi	r17, 0x6C	; 108
    1a78:	99 f4       	brne	.+38     	; 0x1aa0 <vfscanf+0xec>
    1a7a:	f6 01       	movw	r30, r12
    1a7c:	0b c0       	rjmp	.+22     	; 0x1a94 <vfscanf+0xe0>
    1a7e:	f6 01       	movw	r30, r12
    1a80:	f3 fc       	sbrc	r15, 3
    1a82:	65 91       	lpm	r22, Z+
    1a84:	f3 fe       	sbrs	r15, 3
    1a86:	61 91       	ld	r22, Z+
    1a88:	68 36       	cpi	r22, 0x68	; 104
    1a8a:	19 f0       	breq	.+6      	; 0x1a92 <vfscanf+0xde>
    1a8c:	6f 01       	movw	r12, r30
    1a8e:	16 2f       	mov	r17, r22
    1a90:	07 c0       	rjmp	.+14     	; 0x1aa0 <vfscanf+0xec>
    1a92:	08 60       	ori	r16, 0x08	; 8
    1a94:	04 60       	ori	r16, 0x04	; 4
    1a96:	f3 fc       	sbrc	r15, 3
    1a98:	15 91       	lpm	r17, Z+
    1a9a:	f3 fe       	sbrs	r15, 3
    1a9c:	11 91       	ld	r17, Z+
    1a9e:	6f 01       	movw	r12, r30
    1aa0:	11 23       	and	r17, r17
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <vfscanf+0xf2>
    1aa4:	98 c0       	rjmp	.+304    	; 0x1bd6 <vfscanf+0x222>
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	61 2f       	mov	r22, r17
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <strchr_P>
    1ab2:	89 2b       	or	r24, r25
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <vfscanf+0x104>
    1ab6:	8f c0       	rjmp	.+286    	; 0x1bd6 <vfscanf+0x222>
    1ab8:	80 2f       	mov	r24, r16
    1aba:	00 ff       	sbrs	r16, 0
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <vfscanf+0x110>
    1abe:	ee 24       	eor	r14, r14
    1ac0:	ff 24       	eor	r15, r15
    1ac2:	07 c0       	rjmp	.+14     	; 0x1ad2 <vfscanf+0x11e>
    1ac4:	f3 01       	movw	r30, r6
    1ac6:	e0 80       	ld	r14, Z
    1ac8:	f1 80       	ldd	r15, Z+1	; 0x01
    1aca:	22 e0       	ldi	r18, 0x02	; 2
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	62 0e       	add	r6, r18
    1ad0:	73 1e       	adc	r7, r19
    1ad2:	1e 36       	cpi	r17, 0x6E	; 110
    1ad4:	51 f4       	brne	.+20     	; 0x1aea <vfscanf+0x136>
    1ad6:	f5 01       	movw	r30, r10
    1ad8:	46 81       	ldd	r20, Z+6	; 0x06
    1ada:	57 81       	ldd	r21, Z+7	; 0x07
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	20 2f       	mov	r18, r16
    1ae4:	0e 94 2b 0b 	call	0x1656	; 0x1656 <putval>
    1ae8:	65 c0       	rjmp	.+202    	; 0x1bb4 <vfscanf+0x200>
    1aea:	13 36       	cpi	r17, 0x63	; 99
    1aec:	91 f4       	brne	.+36     	; 0x1b12 <vfscanf+0x15e>
    1aee:	81 fd       	sbrc	r24, 1
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfscanf+0x142>
    1af2:	99 24       	eor	r9, r9
    1af4:	93 94       	inc	r9
    1af6:	c5 01       	movw	r24, r10
    1af8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    1afc:	97 fd       	sbrc	r25, 7
    1afe:	66 c0       	rjmp	.+204    	; 0x1bcc <vfscanf+0x218>
    1b00:	e1 14       	cp	r14, r1
    1b02:	f1 04       	cpc	r15, r1
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <vfscanf+0x158>
    1b06:	f7 01       	movw	r30, r14
    1b08:	81 93       	st	Z+, r24
    1b0a:	7f 01       	movw	r14, r30
    1b0c:	9a 94       	dec	r9
    1b0e:	99 f7       	brne	.-26     	; 0x1af6 <vfscanf+0x142>
    1b10:	4f c0       	rjmp	.+158    	; 0x1bb0 <vfscanf+0x1fc>
    1b12:	1b 35       	cpi	r17, 0x5B	; 91
    1b14:	59 f4       	brne	.+22     	; 0x1b2c <vfscanf+0x178>
    1b16:	c5 01       	movw	r24, r10
    1b18:	69 2d       	mov	r22, r9
    1b1a:	a7 01       	movw	r20, r14
    1b1c:	96 01       	movw	r18, r12
    1b1e:	0e 94 10 0c 	call	0x1820	; 0x1820 <conv_brk>
    1b22:	6c 01       	movw	r12, r24
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <vfscanf+0x176>
    1b28:	43 c0       	rjmp	.+134    	; 0x1bb0 <vfscanf+0x1fc>
    1b2a:	3d c0       	rjmp	.+122    	; 0x1ba6 <vfscanf+0x1f2>
    1b2c:	c5 01       	movw	r24, r10
    1b2e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <skip_spaces>
    1b32:	97 fd       	sbrc	r25, 7
    1b34:	4b c0       	rjmp	.+150    	; 0x1bcc <vfscanf+0x218>
    1b36:	1f 36       	cpi	r17, 0x6F	; 111
    1b38:	59 f1       	breq	.+86     	; 0x1b90 <vfscanf+0x1dc>
    1b3a:	10 37       	cpi	r17, 0x70	; 112
    1b3c:	28 f4       	brcc	.+10     	; 0x1b48 <vfscanf+0x194>
    1b3e:	14 36       	cpi	r17, 0x64	; 100
    1b40:	29 f1       	breq	.+74     	; 0x1b8c <vfscanf+0x1d8>
    1b42:	19 36       	cpi	r17, 0x69	; 105
    1b44:	39 f5       	brne	.+78     	; 0x1b94 <vfscanf+0x1e0>
    1b46:	27 c0       	rjmp	.+78     	; 0x1b96 <vfscanf+0x1e2>
    1b48:	13 37       	cpi	r17, 0x73	; 115
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <vfscanf+0x19e>
    1b4c:	15 37       	cpi	r17, 0x75	; 117
    1b4e:	11 f5       	brne	.+68     	; 0x1b94 <vfscanf+0x1e0>
    1b50:	1d c0       	rjmp	.+58     	; 0x1b8c <vfscanf+0x1d8>
    1b52:	c5 01       	movw	r24, r10
    1b54:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <fgetc>
    1b58:	ec 01       	movw	r28, r24
    1b5a:	97 fd       	sbrc	r25, 7
    1b5c:	11 c0       	rjmp	.+34     	; 0x1b80 <vfscanf+0x1cc>
    1b5e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <isspace>
    1b62:	89 2b       	or	r24, r25
    1b64:	29 f0       	breq	.+10     	; 0x1b70 <vfscanf+0x1bc>
    1b66:	ce 01       	movw	r24, r28
    1b68:	b5 01       	movw	r22, r10
    1b6a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <ungetc>
    1b6e:	08 c0       	rjmp	.+16     	; 0x1b80 <vfscanf+0x1cc>
    1b70:	e1 14       	cp	r14, r1
    1b72:	f1 04       	cpc	r15, r1
    1b74:	19 f0       	breq	.+6      	; 0x1b7c <vfscanf+0x1c8>
    1b76:	f7 01       	movw	r30, r14
    1b78:	c1 93       	st	Z+, r28
    1b7a:	7f 01       	movw	r14, r30
    1b7c:	9a 94       	dec	r9
    1b7e:	49 f7       	brne	.-46     	; 0x1b52 <vfscanf+0x19e>
    1b80:	e1 14       	cp	r14, r1
    1b82:	f1 04       	cpc	r15, r1
    1b84:	a9 f0       	breq	.+42     	; 0x1bb0 <vfscanf+0x1fc>
    1b86:	f7 01       	movw	r30, r14
    1b88:	10 82       	st	Z, r1
    1b8a:	12 c0       	rjmp	.+36     	; 0x1bb0 <vfscanf+0x1fc>
    1b8c:	00 62       	ori	r16, 0x20	; 32
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <vfscanf+0x1e2>
    1b90:	00 61       	ori	r16, 0x10	; 16
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <vfscanf+0x1e2>
    1b94:	00 64       	ori	r16, 0x40	; 64
    1b96:	c5 01       	movw	r24, r10
    1b98:	69 2d       	mov	r22, r9
    1b9a:	a7 01       	movw	r20, r14
    1b9c:	20 2f       	mov	r18, r16
    1b9e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <conv_int>
    1ba2:	88 23       	and	r24, r24
    1ba4:	29 f4       	brne	.+10     	; 0x1bb0 <vfscanf+0x1fc>
    1ba6:	f5 01       	movw	r30, r10
    1ba8:	83 81       	ldd	r24, Z+3	; 0x03
    1baa:	80 73       	andi	r24, 0x30	; 48
    1bac:	79 f4       	brne	.+30     	; 0x1bcc <vfscanf+0x218>
    1bae:	13 c0       	rjmp	.+38     	; 0x1bd6 <vfscanf+0x222>
    1bb0:	00 ff       	sbrs	r16, 0
    1bb2:	83 94       	inc	r8
    1bb4:	f5 01       	movw	r30, r10
    1bb6:	f3 80       	ldd	r15, Z+3	; 0x03
    1bb8:	f6 01       	movw	r30, r12
    1bba:	f3 fc       	sbrc	r15, 3
    1bbc:	15 91       	lpm	r17, Z+
    1bbe:	f3 fe       	sbrs	r15, 3
    1bc0:	11 91       	ld	r17, Z+
    1bc2:	6f 01       	movw	r12, r30
    1bc4:	11 23       	and	r17, r17
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <vfscanf+0x216>
    1bc8:	0b cf       	rjmp	.-490    	; 0x19e0 <vfscanf+0x2c>
    1bca:	05 c0       	rjmp	.+10     	; 0x1bd6 <vfscanf+0x222>
    1bcc:	88 20       	and	r8, r8
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <vfscanf+0x222>
    1bd0:	2f ef       	ldi	r18, 0xFF	; 255
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <vfscanf+0x226>
    1bd6:	28 2d       	mov	r18, r8
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	c9 01       	movw	r24, r18
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	bf 90       	pop	r11
    1bee:	af 90       	pop	r10
    1bf0:	9f 90       	pop	r9
    1bf2:	8f 90       	pop	r8
    1bf4:	7f 90       	pop	r7
    1bf6:	6f 90       	pop	r6
    1bf8:	08 95       	ret

00001bfa <isspace>:
    1bfa:	91 11       	cpse	r25, r1
    1bfc:	0d c1       	rjmp	.+538    	; 0x1e18 <__ctype_isfalse>
    1bfe:	80 32       	cpi	r24, 0x20	; 32
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <isspace+0xe>
    1c02:	89 50       	subi	r24, 0x09	; 9
    1c04:	85 50       	subi	r24, 0x05	; 5
    1c06:	d0 f7       	brcc	.-12     	; 0x1bfc <isspace+0x2>
    1c08:	08 95       	ret

00001c0a <strchr_P>:
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	05 90       	lpm	r0, Z+
    1c0e:	06 16       	cp	r0, r22
    1c10:	21 f0       	breq	.+8      	; 0x1c1a <strchr_P+0x10>
    1c12:	00 20       	and	r0, r0
    1c14:	d9 f7       	brne	.-10     	; 0x1c0c <strchr_P+0x2>
    1c16:	c0 01       	movw	r24, r0
    1c18:	08 95       	ret
    1c1a:	31 97       	sbiw	r30, 0x01	; 1
    1c1c:	cf 01       	movw	r24, r30
    1c1e:	08 95       	ret

00001c20 <strnlen_P>:
    1c20:	fc 01       	movw	r30, r24
    1c22:	05 90       	lpm	r0, Z+
    1c24:	61 50       	subi	r22, 0x01	; 1
    1c26:	70 40       	sbci	r23, 0x00	; 0
    1c28:	01 10       	cpse	r0, r1
    1c2a:	d8 f7       	brcc	.-10     	; 0x1c22 <strnlen_P+0x2>
    1c2c:	80 95       	com	r24
    1c2e:	90 95       	com	r25
    1c30:	8e 0f       	add	r24, r30
    1c32:	9f 1f       	adc	r25, r31
    1c34:	08 95       	ret

00001c36 <strnlen>:
    1c36:	fc 01       	movw	r30, r24
    1c38:	61 50       	subi	r22, 0x01	; 1
    1c3a:	70 40       	sbci	r23, 0x00	; 0
    1c3c:	01 90       	ld	r0, Z+
    1c3e:	01 10       	cpse	r0, r1
    1c40:	d8 f7       	brcc	.-10     	; 0x1c38 <strnlen+0x2>
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	8e 0f       	add	r24, r30
    1c48:	9f 1f       	adc	r25, r31
    1c4a:	08 95       	ret

00001c4c <fgetc>:
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	4b 81       	ldd	r20, Y+3	; 0x03
    1c54:	40 ff       	sbrs	r20, 0
    1c56:	1a c0       	rjmp	.+52     	; 0x1c8c <fgetc+0x40>
    1c58:	46 ff       	sbrs	r20, 6
    1c5a:	0a c0       	rjmp	.+20     	; 0x1c70 <fgetc+0x24>
    1c5c:	4f 7b       	andi	r20, 0xBF	; 191
    1c5e:	4b 83       	std	Y+3, r20	; 0x03
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	9f 81       	ldd	r25, Y+7	; 0x07
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	9f 83       	std	Y+7, r25	; 0x07
    1c68:	8e 83       	std	Y+6, r24	; 0x06
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	2b c0       	rjmp	.+86     	; 0x1cc6 <fgetc+0x7a>
    1c70:	42 ff       	sbrs	r20, 2
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <fgetc+0x4e>
    1c74:	e8 81       	ld	r30, Y
    1c76:	f9 81       	ldd	r31, Y+1	; 0x01
    1c78:	80 81       	ld	r24, Z
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	33 27       	eor	r19, r19
    1c7e:	27 fd       	sbrc	r18, 7
    1c80:	30 95       	com	r19
    1c82:	21 15       	cp	r18, r1
    1c84:	31 05       	cpc	r19, r1
    1c86:	29 f4       	brne	.+10     	; 0x1c92 <fgetc+0x46>
    1c88:	40 62       	ori	r20, 0x20	; 32
    1c8a:	4b 83       	std	Y+3, r20	; 0x03
    1c8c:	2f ef       	ldi	r18, 0xFF	; 255
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	1b c0       	rjmp	.+54     	; 0x1cc8 <fgetc+0x7c>
    1c92:	31 96       	adiw	r30, 0x01	; 1
    1c94:	f9 83       	std	Y+1, r31	; 0x01
    1c96:	e8 83       	st	Y, r30
    1c98:	11 c0       	rjmp	.+34     	; 0x1cbc <fgetc+0x70>
    1c9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c9c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	09 95       	icall
    1ca2:	9c 01       	movw	r18, r24
    1ca4:	97 ff       	sbrs	r25, 7
    1ca6:	0a c0       	rjmp	.+20     	; 0x1cbc <fgetc+0x70>
    1ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    1caa:	2f 5f       	subi	r18, 0xFF	; 255
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	11 f0       	breq	.+4      	; 0x1cb4 <fgetc+0x68>
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <fgetc+0x6a>
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	89 2b       	or	r24, r25
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
    1cba:	e8 cf       	rjmp	.-48     	; 0x1c8c <fgetc+0x40>
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	9f 83       	std	Y+7, r25	; 0x07
    1cc4:	8e 83       	std	Y+6, r24	; 0x06
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	c9 01       	movw	r24, r18
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <fputc>:
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	8c 01       	movw	r16, r24
    1cda:	eb 01       	movw	r28, r22
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	81 ff       	sbrs	r24, 1
    1ce0:	1b c0       	rjmp	.+54     	; 0x1d18 <fputc+0x48>
    1ce2:	82 ff       	sbrs	r24, 2
    1ce4:	0d c0       	rjmp	.+26     	; 0x1d00 <fputc+0x30>
    1ce6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce8:	3f 81       	ldd	r19, Y+7	; 0x07
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	28 17       	cp	r18, r24
    1cf0:	39 07       	cpc	r19, r25
    1cf2:	64 f4       	brge	.+24     	; 0x1d0c <fputc+0x3c>
    1cf4:	e8 81       	ld	r30, Y
    1cf6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cf8:	01 93       	st	Z+, r16
    1cfa:	f9 83       	std	Y+1, r31	; 0x01
    1cfc:	e8 83       	st	Y, r30
    1cfe:	06 c0       	rjmp	.+12     	; 0x1d0c <fputc+0x3c>
    1d00:	e8 85       	ldd	r30, Y+8	; 0x08
    1d02:	f9 85       	ldd	r31, Y+9	; 0x09
    1d04:	80 2f       	mov	r24, r16
    1d06:	09 95       	icall
    1d08:	89 2b       	or	r24, r25
    1d0a:	31 f4       	brne	.+12     	; 0x1d18 <fputc+0x48>
    1d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	9f 83       	std	Y+7, r25	; 0x07
    1d14:	8e 83       	std	Y+6, r24	; 0x06
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <fputc+0x4c>
    1d18:	0f ef       	ldi	r16, 0xFF	; 255
    1d1a:	1f ef       	ldi	r17, 0xFF	; 255
    1d1c:	c8 01       	movw	r24, r16
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	08 95       	ret

00001d28 <ungetc>:
    1d28:	9c 01       	movw	r18, r24
    1d2a:	fb 01       	movw	r30, r22
    1d2c:	83 81       	ldd	r24, Z+3	; 0x03
    1d2e:	80 ff       	sbrs	r24, 0
    1d30:	11 c0       	rjmp	.+34     	; 0x1d54 <ungetc+0x2c>
    1d32:	86 fd       	sbrc	r24, 6
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <ungetc+0x2c>
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	2f 3f       	cpi	r18, 0xFF	; 255
    1d3a:	39 07       	cpc	r19, r25
    1d3c:	59 f0       	breq	.+22     	; 0x1d54 <ungetc+0x2c>
    1d3e:	22 83       	std	Z+2, r18	; 0x02
    1d40:	80 64       	ori	r24, 0x40	; 64
    1d42:	8f 7d       	andi	r24, 0xDF	; 223
    1d44:	83 83       	std	Z+3, r24	; 0x03
    1d46:	86 81       	ldd	r24, Z+6	; 0x06
    1d48:	97 81       	ldd	r25, Z+7	; 0x07
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	97 83       	std	Z+7, r25	; 0x07
    1d4e:	86 83       	std	Z+6, r24	; 0x06
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <ungetc+0x30>
    1d54:	2f ef       	ldi	r18, 0xFF	; 255
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	c9 01       	movw	r24, r18
    1d5a:	08 95       	ret

00001d5c <__ultoa_invert>:
    1d5c:	fa 01       	movw	r30, r20
    1d5e:	aa 27       	eor	r26, r26
    1d60:	28 30       	cpi	r18, 0x08	; 8
    1d62:	51 f1       	breq	.+84     	; 0x1db8 <__ultoa_invert+0x5c>
    1d64:	20 31       	cpi	r18, 0x10	; 16
    1d66:	81 f1       	breq	.+96     	; 0x1dc8 <__ultoa_invert+0x6c>
    1d68:	e8 94       	clt
    1d6a:	6f 93       	push	r22
    1d6c:	6e 7f       	andi	r22, 0xFE	; 254
    1d6e:	6e 5f       	subi	r22, 0xFE	; 254
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	8f 4f       	sbci	r24, 0xFF	; 255
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	af 4f       	sbci	r26, 0xFF	; 255
    1d78:	b1 e0       	ldi	r27, 0x01	; 1
    1d7a:	3e d0       	rcall	.+124    	; 0x1df8 <__ultoa_invert+0x9c>
    1d7c:	b4 e0       	ldi	r27, 0x04	; 4
    1d7e:	3c d0       	rcall	.+120    	; 0x1df8 <__ultoa_invert+0x9c>
    1d80:	67 0f       	add	r22, r23
    1d82:	78 1f       	adc	r23, r24
    1d84:	89 1f       	adc	r24, r25
    1d86:	9a 1f       	adc	r25, r26
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	68 0f       	add	r22, r24
    1d8c:	79 1f       	adc	r23, r25
    1d8e:	8a 1f       	adc	r24, r26
    1d90:	91 1d       	adc	r25, r1
    1d92:	a1 1d       	adc	r26, r1
    1d94:	6a 0f       	add	r22, r26
    1d96:	71 1d       	adc	r23, r1
    1d98:	81 1d       	adc	r24, r1
    1d9a:	91 1d       	adc	r25, r1
    1d9c:	a1 1d       	adc	r26, r1
    1d9e:	20 d0       	rcall	.+64     	; 0x1de0 <__ultoa_invert+0x84>
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <__ultoa_invert+0x48>
    1da2:	68 94       	set
    1da4:	3f 91       	pop	r19
    1da6:	2a e0       	ldi	r18, 0x0A	; 10
    1da8:	26 9f       	mul	r18, r22
    1daa:	11 24       	eor	r1, r1
    1dac:	30 19       	sub	r19, r0
    1dae:	30 5d       	subi	r19, 0xD0	; 208
    1db0:	31 93       	st	Z+, r19
    1db2:	de f6       	brtc	.-74     	; 0x1d6a <__ultoa_invert+0xe>
    1db4:	cf 01       	movw	r24, r30
    1db6:	08 95       	ret
    1db8:	46 2f       	mov	r20, r22
    1dba:	47 70       	andi	r20, 0x07	; 7
    1dbc:	40 5d       	subi	r20, 0xD0	; 208
    1dbe:	41 93       	st	Z+, r20
    1dc0:	b3 e0       	ldi	r27, 0x03	; 3
    1dc2:	0f d0       	rcall	.+30     	; 0x1de2 <__ultoa_invert+0x86>
    1dc4:	c9 f7       	brne	.-14     	; 0x1db8 <__ultoa_invert+0x5c>
    1dc6:	f6 cf       	rjmp	.-20     	; 0x1db4 <__ultoa_invert+0x58>
    1dc8:	46 2f       	mov	r20, r22
    1dca:	4f 70       	andi	r20, 0x0F	; 15
    1dcc:	40 5d       	subi	r20, 0xD0	; 208
    1dce:	4a 33       	cpi	r20, 0x3A	; 58
    1dd0:	18 f0       	brcs	.+6      	; 0x1dd8 <__ultoa_invert+0x7c>
    1dd2:	49 5d       	subi	r20, 0xD9	; 217
    1dd4:	31 fd       	sbrc	r19, 1
    1dd6:	40 52       	subi	r20, 0x20	; 32
    1dd8:	41 93       	st	Z+, r20
    1dda:	02 d0       	rcall	.+4      	; 0x1de0 <__ultoa_invert+0x84>
    1ddc:	a9 f7       	brne	.-22     	; 0x1dc8 <__ultoa_invert+0x6c>
    1dde:	ea cf       	rjmp	.-44     	; 0x1db4 <__ultoa_invert+0x58>
    1de0:	b4 e0       	ldi	r27, 0x04	; 4
    1de2:	a6 95       	lsr	r26
    1de4:	97 95       	ror	r25
    1de6:	87 95       	ror	r24
    1de8:	77 95       	ror	r23
    1dea:	67 95       	ror	r22
    1dec:	ba 95       	dec	r27
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <__ultoa_invert+0x86>
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 05       	cpc	r22, r1
    1df4:	71 05       	cpc	r23, r1
    1df6:	08 95       	ret
    1df8:	9b 01       	movw	r18, r22
    1dfa:	ac 01       	movw	r20, r24
    1dfc:	0a 2e       	mov	r0, r26
    1dfe:	06 94       	lsr	r0
    1e00:	57 95       	ror	r21
    1e02:	47 95       	ror	r20
    1e04:	37 95       	ror	r19
    1e06:	27 95       	ror	r18
    1e08:	ba 95       	dec	r27
    1e0a:	c9 f7       	brne	.-14     	; 0x1dfe <__ultoa_invert+0xa2>
    1e0c:	62 0f       	add	r22, r18
    1e0e:	73 1f       	adc	r23, r19
    1e10:	84 1f       	adc	r24, r20
    1e12:	95 1f       	adc	r25, r21
    1e14:	a0 1d       	adc	r26, r0
    1e16:	08 95       	ret

00001e18 <__ctype_isfalse>:
    1e18:	99 27       	eor	r25, r25
    1e1a:	88 27       	eor	r24, r24

00001e1c <__ctype_istrue>:
    1e1c:	08 95       	ret

00001e1e <_exit>:
    1e1e:	f8 94       	cli

00001e20 <__stop_program>:
    1e20:	ff cf       	rjmp	.-2      	; 0x1e20 <__stop_program>
