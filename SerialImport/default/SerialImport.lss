
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00001e1c  00001eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a8  008001a8  00001f58  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000359  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b32  00000000  00000000  00002311  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005da  00000000  00000000  00003e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001224  00000000  00000000  0000441d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00005644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fd  00000000  00000000  000058f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ac2  00000000  00000000  00005cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  000067b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
       c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      14:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      18:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      1c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      20:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      24:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      28:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      2c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      30:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      34:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      38:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      3c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      40:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      48:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      4c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      50:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      58:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      5c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      60:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      68:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      6c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      70:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      7c:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      80:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      84:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>
      88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LcdCustomChar>:
      b0:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      c0:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      d0:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      e0:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000f0 <__c.1988>:
      f0:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d0 e4       	ldi	r29, 0x40	; 64
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
     108:	11 e0       	ldi	r17, 0x01	; 1
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	ec e1       	ldi	r30, 0x1C	; 28
     110:	fe e1       	ldi	r31, 0x1E	; 30
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a8 3a       	cpi	r26, 0xA8	; 168
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	14 e0       	ldi	r17, 0x04	; 4
     124:	a8 ea       	ldi	r26, 0xA8	; 168
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	af 37       	cpi	r26, 0x7F	; 127
     12e:	b1 07       	cpc	r27, r17
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
     136:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <_exit>

0000013a <__bad_interrupt>:
     13a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013e <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     13e:	ec e7       	ldi	r30, 0x7C	; 124
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	10 82       	st	Z, r1
	ADCSRA = 0;
     144:	aa e7       	ldi	r26, 0x7A	; 122
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     14a:	80 e4       	ldi	r24, 0x40	; 64
     14c:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     14e:	87 e8       	ldi	r24, 0x87	; 135
     150:	8c 93       	st	X, r24
end
     152:	08 95       	ret

00000154 <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     154:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     156:	8f ef       	ldi	r24, 0xFF	; 255
     158:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     15a:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x00;    // start with no power
     15c:	1b b8       	out	0x0b, r1	; 11
end
     15e:	08 95       	ret

00000160 <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     160:	ec e7       	ldi	r30, 0x7C	; 124
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	10 82       	st	Z, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     166:	80 54       	subi	r24, 0x40	; 64
     168:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     16a:	ea e7       	ldi	r30, 0x7A	; 122
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	80 81       	ld	r24, Z
     170:	80 64       	ori	r24, 0x40	; 64
     172:	80 83       	st	Z, r24
end
     174:	08 95       	ret

00000176 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     176:	5d 98       	cbi	0x0b, 5	; 11
     178:	88 e8       	ldi	r24, 0x88	; 136
     17a:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17c:	20 e9       	ldi	r18, 0x90	; 144
     17e:	31 e0       	ldi	r19, 0x01	; 1
     180:	f9 01       	movw	r30, r18
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     188:	d9 f7       	brne	.-10     	; 0x180 <raise_pen+0xa>
	_delay_ms(500);
end
     18a:	08 95       	ret

0000018c <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     18c:	5d 9a       	sbi	0x0b, 5	; 11
     18e:	80 ea       	ldi	r24, 0xA0	; 160
     190:	9f e0       	ldi	r25, 0x0F	; 15
     192:	20 e9       	ldi	r18, 0x90	; 144
     194:	31 e0       	ldi	r19, 0x01	; 1
     196:	f9 01       	movw	r30, r18
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19e:	d9 f7       	brne	.-10     	; 0x196 <lower_pen+0xa>
	_delay_ms(400);
end
     1a0:	08 95       	ret

000001a2 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     1a2:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1a4:	8a e1       	ldi	r24, 0x1A	; 26
     1a6:	8a 95       	dec	r24
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     1aa:	5a 9a       	sbi	0x0b, 2	; 11
end
     1ac:	08 95       	ret

000001ae <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     1ae:	5a 98       	cbi	0x0b, 2	; 11
     1b0:	8a e1       	ldi	r24, 0x1A	; 26
     1b2:	8a 95       	dec	r24
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     1b6:	5b 9a       	sbi	0x0b, 3	; 11
end
     1b8:	08 95       	ret

000001ba <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     1ba:	5e 98       	cbi	0x0b, 6	; 11
     1bc:	8a e1       	ldi	r24, 0x1A	; 26
     1be:	8a 95       	dec	r24
     1c0:	f1 f7       	brne	.-4      	; 0x1be <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     1c2:	5f 9a       	sbi	0x0b, 7	; 11
end
     1c4:	08 95       	ret

000001c6 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     1c6:	5f 98       	cbi	0x0b, 7	; 11
     1c8:	8a e1       	ldi	r24, 0x1A	; 26
     1ca:	8a 95       	dec	r24
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     1ce:	5e 9a       	sbi	0x0b, 6	; 11
end
     1d0:	08 95       	ret

000001d2 <stop_x>:

void stop_x(void)
begin
	PORTD &= ~0x18;
     1d2:	8b b1       	in	r24, 0x0b	; 11
     1d4:	87 7e       	andi	r24, 0xE7	; 231
     1d6:	8b b9       	out	0x0b, r24	; 11
end
     1d8:	08 95       	ret

000001da <stop_y>:

void stop_y(void)
begin
	PORTD &= ~0xc0; 
     1da:	8b b1       	in	r24, 0x0b	; 11
     1dc:	8f 73       	andi	r24, 0x3F	; 63
     1de:	8b b9       	out	0x0b, r24	; 11

end
     1e0:	08 95       	ret

000001e2 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x23;
     1e2:	8b b1       	in	r24, 0x0b	; 11
     1e4:	83 72       	andi	r24, 0x23	; 35
     1e6:	8b b9       	out	0x0b, r24	; 11
     1e8:	88 ee       	ldi	r24, 0xE8	; 232
     1ea:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ec:	20 e9       	ldi	r18, 0x90	; 144
     1ee:	31 e0       	ldi	r19, 0x01	; 1
     1f0:	f9 01       	movw	r30, r18
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <stop_all+0xe>
	_delay_ms(100);
end
     1fa:	08 95       	ret

000001fc <circle>:

// draw a circle
void circle(void)
begin
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     202:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     204:	8a e1       	ldi	r24, 0x1A	; 26
     206:	f8 2e       	mov	r15, r24
     208:	8f 2d       	mov	r24, r15
     20a:	8a 95       	dec	r24
     20c:	f1 f7       	brne	.-4      	; 0x20a <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     20e:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     210:	00 e8       	ldi	r16, 0x80	; 128
     212:	1e e3       	ldi	r17, 0x3E	; 62
     214:	c8 01       	movw	r24, r16
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     21a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     21e:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     220:	8f 2d       	mov	r24, r15
     222:	8a 95       	dec	r24
     224:	f1 f7       	brne	.-4      	; 0x222 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     226:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     228:	c8 01       	movw	r24, r16
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     22e:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     230:	8f 2d       	mov	r24, r15
     232:	8a 95       	dec	r24
     234:	f1 f7       	brne	.-4      	; 0x232 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     236:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     238:	c8 01       	movw	r24, r16
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     23e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     242:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     244:	8f 2d       	mov	r24, r15
     246:	8a 95       	dec	r24
     248:	f1 f7       	brne	.-4      	; 0x246 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     24a:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24c:	80 ee       	ldi	r24, 0xE0	; 224
     24e:	9e e2       	ldi	r25, 0x2E	; 46
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     254:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     258:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     25a:	8f 2d       	mov	r24, r15
     25c:	8a 95       	dec	r24
     25e:	f1 f7       	brne	.-4      	; 0x25c <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     260:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     262:	00 e8       	ldi	r16, 0x80	; 128
     264:	15 e2       	ldi	r17, 0x25	; 37
     266:	c8 01       	movw	r24, r16
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     26c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     270:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     272:	8f 2d       	mov	r24, r15
     274:	8a 95       	dec	r24
     276:	f1 f7       	brne	.-4      	; 0x274 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     278:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     27a:	c8 01       	movw	r24, r16
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     280:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     282:	8f 2d       	mov	r24, r15
     284:	8a 95       	dec	r24
     286:	f1 f7       	brne	.-4      	; 0x284 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     288:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     28a:	c8 01       	movw	r24, r16
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     290:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     294:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     296:	8f 2d       	mov	r24, r15
     298:	8a 95       	dec	r24
     29a:	f1 f7       	brne	.-4      	; 0x298 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     29c:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	80 e7       	ldi	r24, 0x70	; 112
     2a0:	97 e1       	ldi	r25, 0x17	; 23
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     2a6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2aa:	5a 98       	cbi	0x0b, 2	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ac:	8f 2d       	mov	r24, r15
     2ae:	8a 95       	dec	r24
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     2b2:	5b 9a       	sbi	0x0b, 3	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b4:	00 ea       	ldi	r16, 0xA0	; 160
     2b6:	1f e0       	ldi	r17, 0x0F	; 15
     2b8:	c8 01       	movw	r24, r16
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     2be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2c2:	5f 98       	cbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c4:	8f 2d       	mov	r24, r15
     2c6:	8a 95       	dec	r24
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     2ca:	5e 9a       	sbi	0x0b, 6	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2cc:	c8 01       	movw	r24, r16
     2ce:	01 97       	sbiw	r24, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2d2:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2d4:	8f 2d       	mov	r24, r15
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     2da:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2dc:	c8 01       	movw	r24, r16
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     2e2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2e6:	5e 98       	cbi	0x0b, 6	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e8:	fa 94       	dec	r15
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     2ec:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ee:	80 ef       	ldi	r24, 0xF0	; 240
     2f0:	9a e0       	ldi	r25, 0x0A	; 10
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     2f6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
end
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	08 95       	ret

00000302 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     306:	20 91 d4 02 	lds	r18, 0x02D4
     30a:	30 91 d5 02 	lds	r19, 0x02D5
     30e:	00 d0       	rcall	.+0      	; 0x310 <print_position+0xe>
     310:	00 d0       	rcall	.+0      	; 0x312 <print_position+0x10>
     312:	00 d0       	rcall	.+0      	; 0x314 <print_position+0x12>
     314:	ed b7       	in	r30, 0x3d	; 61
     316:	fe b7       	in	r31, 0x3e	; 62
     318:	31 96       	adiw	r30, 0x01	; 1
     31a:	02 ec       	ldi	r16, 0xC2	; 194
     31c:	12 e0       	ldi	r17, 0x02	; 2
     31e:	ad b7       	in	r26, 0x3d	; 61
     320:	be b7       	in	r27, 0x3e	; 62
     322:	12 96       	adiw	r26, 0x02	; 2
     324:	1c 93       	st	X, r17
     326:	0e 93       	st	-X, r16
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	93 83       	std	Z+3, r25	; 0x03
     330:	82 83       	std	Z+2, r24	; 0x02
     332:	35 83       	std	Z+5, r19	; 0x05
     334:	24 83       	std	Z+4, r18	; 0x04
     336:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
	LCDGotoXY(0,1);
     33a:	8d b7       	in	r24, 0x3d	; 61
     33c:	9e b7       	in	r25, 0x3e	; 62
     33e:	06 96       	adiw	r24, 0x06	; 6
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	9e bf       	out	0x3e, r25	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	8d bf       	out	0x3d, r24	; 61
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     352:	f8 01       	movw	r30, r16
     354:	01 90       	ld	r0, Z+
     356:	00 20       	and	r0, r0
     358:	e9 f7       	brne	.-6      	; 0x354 <print_position+0x52>
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	e0 1b       	sub	r30, r16
     35e:	f1 0b       	sbc	r31, r17
     360:	c8 01       	movw	r24, r16
     362:	6e 2f       	mov	r22, r30
     364:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     368:	20 91 9e 03 	lds	r18, 0x039E
     36c:	30 91 9f 03 	lds	r19, 0x039F
     370:	00 d0       	rcall	.+0      	; 0x372 <print_position+0x70>
     372:	00 d0       	rcall	.+0      	; 0x374 <print_position+0x72>
     374:	00 d0       	rcall	.+0      	; 0x376 <print_position+0x74>
     376:	ed b7       	in	r30, 0x3d	; 61
     378:	fe b7       	in	r31, 0x3e	; 62
     37a:	31 96       	adiw	r30, 0x01	; 1
     37c:	ad b7       	in	r26, 0x3d	; 61
     37e:	be b7       	in	r27, 0x3e	; 62
     380:	12 96       	adiw	r26, 0x02	; 2
     382:	1c 93       	st	X, r17
     384:	0e 93       	st	-X, r16
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	88 e0       	ldi	r24, 0x08	; 8
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	35 83       	std	Z+5, r19	; 0x05
     392:	24 83       	std	Z+4, r18	; 0x04
     394:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
	LCDGotoXY(8,1);
     398:	8d b7       	in	r24, 0x3d	; 61
     39a:	9e b7       	in	r25, 0x3e	; 62
     39c:	06 96       	adiw	r24, 0x06	; 6
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	9e bf       	out	0x3e, r25	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	8d bf       	out	0x3d, r24	; 61
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3b0:	f8 01       	movw	r30, r16
     3b2:	01 90       	ld	r0, Z+
     3b4:	00 20       	and	r0, r0
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <print_position+0xb0>
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	e0 1b       	sub	r30, r16
     3bc:	f1 0b       	sbc	r31, r17
     3be:	c8 01       	movw	r24, r16
     3c0:	6e 2f       	mov	r22, r30
     3c2:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
end
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	08 95       	ret

000003cc <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     3d8:	42 30       	cpi	r20, 0x02	; 2
     3da:	51 05       	cpc	r21, r1
     3dc:	19 f4       	brne	.+6      	; 0x3e4 <move_to_XY+0x18>
     3de:	0e 94 bb 00 	call	0x176	; 0x176 <raise_pen>
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <move_to_XY+0x22>
	if (d==1) lower_pen();
     3e4:	41 30       	cpi	r20, 0x01	; 1
     3e6:	51 05       	cpc	r21, r1
     3e8:	11 f4       	brne	.+4      	; 0x3ee <move_to_XY+0x22>
     3ea:	0e 94 c6 00 	call	0x18c	; 0x18c <lower_pen>
	if(x_in>0 && y_in>0)
     3ee:	1c 16       	cp	r1, r28
     3f0:	1d 06       	cpc	r1, r29
     3f2:	0c f0       	brlt	.+2      	; 0x3f6 <move_to_XY+0x2a>
     3f4:	28 c1       	rjmp	.+592    	; 0x646 <move_to_XY+0x27a>
     3f6:	10 16       	cp	r1, r16
     3f8:	11 06       	cpc	r1, r17
     3fa:	0c f0       	brlt	.+2      	; 0x3fe <move_to_XY+0x32>
     3fc:	24 c1       	rjmp	.+584    	; 0x646 <move_to_XY+0x27a>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     3fe:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     402:	80 ec       	ldi	r24, 0xC0	; 192
     404:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     408:	80 91 7a 00 	lds	r24, 0x007A
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	80 93 7a 00 	sts	0x007A, r24
	if (d==1) lower_pen();
	if(x_in>0 && y_in>0)
	begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     412:	80 91 7a 00 	lds	r24, 0x007A
     416:	86 fd       	sbrc	r24, 6
     418:	fc cf       	rjmp	.-8      	; 0x412 <move_to_XY+0x46>
		x_pos = (int)ADCL;
     41a:	80 91 78 00 	lds	r24, 0x0078
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	90 93 d5 02 	sts	0x02D5, r25
     424:	80 93 d4 02 	sts	0x02D4, r24
		x_pos += (int)(ADCH*256);
     428:	40 91 d4 02 	lds	r20, 0x02D4
     42c:	50 91 d5 02 	lds	r21, 0x02D5
     430:	20 91 79 00 	lds	r18, 0x0079
     434:	92 2f       	mov	r25, r18
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	84 0f       	add	r24, r20
     43a:	95 1f       	adc	r25, r21
     43c:	90 93 d5 02 	sts	0x02D5, r25
     440:	80 93 d4 02 	sts	0x02D4, r24

		if (x_pos > x_in)
     444:	80 91 d4 02 	lds	r24, 0x02D4
     448:	90 91 d5 02 	lds	r25, 0x02D5
     44c:	c8 17       	cp	r28, r24
     44e:	d9 07       	cpc	r29, r25
     450:	50 f1       	brcs	.+84     	; 0x4a6 <move_to_XY+0xda>
     452:	5c c0       	rjmp	.+184    	; 0x50c <move_to_XY+0x140>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     454:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     458:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     45c:	80 91 7a 00 	lds	r24, 0x007A
     460:	80 64       	ori	r24, 0x40	; 64
     462:	80 93 7a 00 	sts	0x007A, r24
     466:	05 c0       	rjmp	.+10     	; 0x472 <move_to_XY+0xa6>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     468:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     46a:	84 2f       	mov	r24, r20
     46c:	8a 95       	dec	r24
     46e:	f1 f7       	brne	.-4      	; 0x46c <move_to_XY+0xa0>
	_delay_us(5);
	PORTD |= 0x04;
     470:	5a 9a       	sbi	0x0b, 2	; 11
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_negative_x();
     472:	80 91 7a 00 	lds	r24, 0x007A
     476:	86 fd       	sbrc	r24, 6
     478:	f7 cf       	rjmp	.-18     	; 0x468 <move_to_XY+0x9c>
				x_pos = (int)ADCL;
     47a:	80 91 78 00 	lds	r24, 0x0078
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	90 93 d5 02 	sts	0x02D5, r25
     484:	80 93 d4 02 	sts	0x02D4, r24
				x_pos += (int)(ADCH*256);
     488:	80 91 d4 02 	lds	r24, 0x02D4
     48c:	90 91 d5 02 	lds	r25, 0x02D5
     490:	20 91 79 00 	lds	r18, 0x0079
     494:	32 2f       	mov	r19, r18
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	90 93 d5 02 	sts	0x02D5, r25
     4a0:	80 93 d4 02 	sts	0x02D4, r24
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <move_to_XY+0xde>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4a6:	50 ec       	ldi	r21, 0xC0	; 192
     4a8:	4a e1       	ldi	r20, 0x1A	; 26
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     4aa:	80 91 d4 02 	lds	r24, 0x02D4
     4ae:	90 91 d5 02 	lds	r25, 0x02D5
     4b2:	c8 17       	cp	r28, r24
     4b4:	d9 07       	cpc	r29, r25
     4b6:	70 f2       	brcs	.-100    	; 0x454 <move_to_XY+0x88>
     4b8:	32 c0       	rjmp	.+100    	; 0x51e <move_to_XY+0x152>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4ba:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4be:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     4c2:	80 91 7a 00 	lds	r24, 0x007A
     4c6:	80 64       	ori	r24, 0x40	; 64
     4c8:	80 93 7a 00 	sts	0x007A, r24
     4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <move_to_XY+0x10c>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     4ce:	5a 98       	cbi	0x0b, 2	; 11
     4d0:	84 2f       	mov	r24, r20
     4d2:	8a 95       	dec	r24
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <move_to_XY+0x106>
	_delay_us(5);
	PORTD |= 0x08;
     4d6:	5b 9a       	sbi	0x0b, 3	; 11
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
     4d8:	80 91 7a 00 	lds	r24, 0x007A
     4dc:	86 fd       	sbrc	r24, 6
     4de:	f7 cf       	rjmp	.-18     	; 0x4ce <move_to_XY+0x102>
				x_pos = (int)ADCL;
     4e0:	80 91 78 00 	lds	r24, 0x0078
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	90 93 d5 02 	sts	0x02D5, r25
     4ea:	80 93 d4 02 	sts	0x02D4, r24
				x_pos += (int)(ADCH*256);
     4ee:	80 91 d4 02 	lds	r24, 0x02D4
     4f2:	90 91 d5 02 	lds	r25, 0x02D5
     4f6:	20 91 79 00 	lds	r18, 0x0079
     4fa:	32 2f       	mov	r19, r18
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	82 0f       	add	r24, r18
     500:	93 1f       	adc	r25, r19
     502:	90 93 d5 02 	sts	0x02D5, r25
     506:	80 93 d4 02 	sts	0x02D4, r24
     50a:	02 c0       	rjmp	.+4      	; 0x510 <move_to_XY+0x144>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     50c:	50 ec       	ldi	r21, 0xC0	; 192
     50e:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     510:	80 91 d4 02 	lds	r24, 0x02D4
     514:	90 91 d5 02 	lds	r25, 0x02D5
     518:	8c 17       	cp	r24, r28
     51a:	9d 07       	cpc	r25, r29
     51c:	70 f2       	brcs	.-100    	; 0x4ba <move_to_XY+0xee>
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
			end
			stop_all();
     51e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     522:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     526:	81 ec       	ldi	r24, 0xC1	; 193
     528:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1<<ADSC);
     52c:	80 91 7a 00 	lds	r24, 0x007A
     530:	80 64       	ori	r24, 0x40	; 64
     532:	80 93 7a 00 	sts	0x007A, r24
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     536:	80 91 7a 00 	lds	r24, 0x007A
     53a:	86 fd       	sbrc	r24, 6
     53c:	fc cf       	rjmp	.-8      	; 0x536 <move_to_XY+0x16a>
		y_pos = (int)ADCL;
     53e:	80 91 78 00 	lds	r24, 0x0078
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	90 93 9f 03 	sts	0x039F, r25
     548:	80 93 9e 03 	sts	0x039E, r24
		y_pos += (int)(ADCH*256);
     54c:	40 91 9e 03 	lds	r20, 0x039E
     550:	50 91 9f 03 	lds	r21, 0x039F
     554:	20 91 79 00 	lds	r18, 0x0079
     558:	92 2f       	mov	r25, r18
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	84 0f       	add	r24, r20
     55e:	95 1f       	adc	r25, r21
     560:	90 93 9f 03 	sts	0x039F, r25
     564:	80 93 9e 03 	sts	0x039E, r24

		if (y_pos > y_in)
     568:	80 91 9e 03 	lds	r24, 0x039E
     56c:	90 91 9f 03 	lds	r25, 0x039F
     570:	08 17       	cp	r16, r24
     572:	19 07       	cpc	r17, r25
     574:	50 f1       	brcs	.+84     	; 0x5ca <move_to_XY+0x1fe>
     576:	5c c0       	rjmp	.+184    	; 0x630 <move_to_XY+0x264>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     578:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     57c:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     580:	80 91 7a 00 	lds	r24, 0x007A
     584:	80 64       	ori	r24, 0x40	; 64
     586:	80 93 7a 00 	sts	0x007A, r24
     58a:	05 c0       	rjmp	.+10     	; 0x596 <move_to_XY+0x1ca>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     58c:	5e 98       	cbi	0x0b, 6	; 11
     58e:	84 2f       	mov	r24, r20
     590:	8a 95       	dec	r24
     592:	f1 f7       	brne	.-4      	; 0x590 <move_to_XY+0x1c4>
	_delay_us(5);
	PORTD |= 0x80;
     594:	5f 9a       	sbi	0x0b, 7	; 11
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_negative_y();
     596:	80 91 7a 00 	lds	r24, 0x007A
     59a:	86 fd       	sbrc	r24, 6
     59c:	f7 cf       	rjmp	.-18     	; 0x58c <move_to_XY+0x1c0>
				y_pos = (int)ADCL;
     59e:	80 91 78 00 	lds	r24, 0x0078
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 9f 03 	sts	0x039F, r25
     5a8:	80 93 9e 03 	sts	0x039E, r24
				y_pos += (int)(ADCH*256);
     5ac:	80 91 9e 03 	lds	r24, 0x039E
     5b0:	90 91 9f 03 	lds	r25, 0x039F
     5b4:	20 91 79 00 	lds	r18, 0x0079
     5b8:	32 2f       	mov	r19, r18
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	90 93 9f 03 	sts	0x039F, r25
     5c4:	80 93 9e 03 	sts	0x039E, r24
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <move_to_XY+0x202>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5ca:	51 ec       	ldi	r21, 0xC1	; 193
     5cc:	4a e1       	ldi	r20, 0x1A	; 26
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     5ce:	80 91 9e 03 	lds	r24, 0x039E
     5d2:	90 91 9f 03 	lds	r25, 0x039F
     5d6:	08 17       	cp	r16, r24
     5d8:	19 07       	cpc	r17, r25
     5da:	70 f2       	brcs	.-100    	; 0x578 <move_to_XY+0x1ac>
     5dc:	32 c0       	rjmp	.+100    	; 0x642 <move_to_XY+0x276>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     5de:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5e2:	50 93 7c 00 	sts	0x007C, r21
	ADCSRA |= (1<<ADSC);
     5e6:	80 91 7a 00 	lds	r24, 0x007A
     5ea:	80 64       	ori	r24, 0x40	; 64
     5ec:	80 93 7a 00 	sts	0x007A, r24
     5f0:	05 c0       	rjmp	.+10     	; 0x5fc <move_to_XY+0x230>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     5f2:	5f 98       	cbi	0x0b, 7	; 11
     5f4:	84 2f       	mov	r24, r20
     5f6:	8a 95       	dec	r24
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <move_to_XY+0x22a>
	_delay_us(5);
	PORTD |= 0x40;
     5fa:	5e 9a       	sbi	0x0b, 6	; 11
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
     5fc:	80 91 7a 00 	lds	r24, 0x007A
     600:	86 fd       	sbrc	r24, 6
     602:	f7 cf       	rjmp	.-18     	; 0x5f2 <move_to_XY+0x226>
				y_pos = (int)ADCL;
     604:	80 91 78 00 	lds	r24, 0x0078
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 9f 03 	sts	0x039F, r25
     60e:	80 93 9e 03 	sts	0x039E, r24
				y_pos += (int)(ADCH*256);
     612:	80 91 9e 03 	lds	r24, 0x039E
     616:	90 91 9f 03 	lds	r25, 0x039F
     61a:	20 91 79 00 	lds	r18, 0x0079
     61e:	32 2f       	mov	r19, r18
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	82 0f       	add	r24, r18
     624:	93 1f       	adc	r25, r19
     626:	90 93 9f 03 	sts	0x039F, r25
     62a:	80 93 9e 03 	sts	0x039E, r24
     62e:	02 c0       	rjmp	.+4      	; 0x634 <move_to_XY+0x268>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     630:	51 ec       	ldi	r21, 0xC1	; 193
     632:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     634:	80 91 9e 03 	lds	r24, 0x039E
     638:	90 91 9f 03 	lds	r25, 0x039F
     63c:	80 17       	cp	r24, r16
     63e:	91 07       	cpc	r25, r17
     640:	70 f2       	brcs	.-100    	; 0x5de <move_to_XY+0x212>
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
			end
			stop_all();
     642:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     646:	0e 94 81 01 	call	0x302	; 0x302 <print_position>
end
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     654:	0e 94 a8 06 	call	0xd50	; 0xd50 <LCDinit>
	LCDcursorOFF();
     658:	0e 94 10 07 	call	0xe20	; 0xe20 <LCDcursorOFF>
	LCDclr();	//clear the display
     65c:	0e 94 41 06 	call	0xc82	; 0xc82 <LCDclr>
	LCDGotoXY(0,0);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     668:	8c e8       	ldi	r24, 0x8C	; 140
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	0e 94 6d 06 	call	0xcda	; 0xcda <CopyStringtoLCD>
	LCD_char_count = 0;
     674:	10 92 d3 02 	sts	0x02D3, r1
end
     678:	08 95       	ret

0000067a <main>:




// --- Main Program ----------------------------------
int main(void) {
     67a:	2f 92       	push	r2
     67c:	3f 92       	push	r3
     67e:	4f 92       	push	r4
     680:	5f 92       	push	r5
     682:	6f 92       	push	r6
     684:	7f 92       	push	r7
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	69 97       	sbiw	r28, 0x19	; 25
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
  int i =0;
  int x=-2 ,y=-2,d=-2;// container for parsed ints
     6ae:	8e ef       	ldi	r24, 0xFE	; 254
     6b0:	9f ef       	ldi	r25, 0xFF	; 255
     6b2:	9a 83       	std	Y+2, r25	; 0x02
     6b4:	89 83       	std	Y+1, r24	; 0x01
     6b6:	9c 83       	std	Y+4, r25	; 0x04
     6b8:	8b 83       	std	Y+3, r24	; 0x03
     6ba:	9e 83       	std	Y+6, r25	; 0x06
     6bc:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     6be:	18 86       	std	Y+8, r1	; 0x08
     6c0:	1f 82       	std	Y+7, r1	; 0x07
  
  //initialize();
  
	LCD_init();
     6c2:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_init>
  //init the UART -- uart_init() is in uart.c
  uart_init();
     6c6:	0e 94 78 07 	call	0xef0	; 0xef0 <uart_init>
  stdout = stdin = stderr = &uart_str;
     6ca:	82 e9       	ldi	r24, 0x92	; 146
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	90 93 7e 04 	sts	0x047E, r25
     6d2:	80 93 7d 04 	sts	0x047D, r24
     6d6:	90 93 7a 04 	sts	0x047A, r25
     6da:	80 93 79 04 	sts	0x0479, r24
     6de:	90 93 7c 04 	sts	0x047C, r25
     6e2:	80 93 7b 04 	sts	0x047B, r24

  // Allocate memory for the buffer	
  
  sprintf(lcd_buffer2,"File Length\n\r");
     6e6:	00 ea       	ldi	r16, 0xA0	; 160
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	c8 01       	movw	r24, r16
     6ec:	60 e1       	ldi	r22, 0x10	; 16
     6ee:	71 e0       	ldi	r23, 0x01	; 1
     6f0:	0e 94 8b 08 	call	0x1116	; 0x1116 <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     6f4:	60 91 7b 04 	lds	r22, 0x047B
     6f8:	70 91 7c 04 	lds	r23, 0x047C
     6fc:	c8 01       	movw	r24, r16
     6fe:	0e 94 92 08 	call	0x1124	; 0x1124 <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     702:	00 d0       	rcall	.+0      	; 0x704 <main+0x8a>
     704:	00 d0       	rcall	.+0      	; 0x706 <main+0x8c>
     706:	00 d0       	rcall	.+0      	; 0x708 <main+0x8e>
     708:	ed b7       	in	r30, 0x3d	; 61
     70a:	fe b7       	in	r31, 0x3e	; 62
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	80 91 79 04 	lds	r24, 0x0479
     712:	90 91 7a 04 	lds	r25, 0x047A
     716:	ad b7       	in	r26, 0x3d	; 61
     718:	be b7       	in	r27, 0x3e	; 62
     71a:	12 96       	adiw	r26, 0x02	; 2
     71c:	9c 93       	st	X, r25
     71e:	8e 93       	st	-X, r24
     720:	11 97       	sbiw	r26, 0x01	; 1
     722:	8e e1       	ldi	r24, 0x1E	; 30
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	93 83       	std	Z+3, r25	; 0x03
     728:	82 83       	std	Z+2, r24	; 0x02
     72a:	ce 01       	movw	r24, r28
     72c:	07 96       	adiw	r24, 0x07	; 7
     72e:	95 83       	std	Z+5, r25	; 0x05
     730:	84 83       	std	Z+4, r24	; 0x04
     732:	0e 94 bd 08 	call	0x117a	; 0x117a <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     736:	ed b7       	in	r30, 0x3d	; 61
     738:	fe b7       	in	r31, 0x3e	; 62
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	ad b7       	in	r26, 0x3d	; 61
     73e:	be b7       	in	r27, 0x3e	; 62
     740:	12 96       	adiw	r26, 0x02	; 2
     742:	1c 93       	st	X, r17
     744:	0e 93       	st	-X, r16
     746:	11 97       	sbiw	r26, 0x01	; 1
     748:	82 e2       	ldi	r24, 0x22	; 34
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	93 83       	std	Z+3, r25	; 0x03
     74e:	82 83       	std	Z+2, r24	; 0x02
     750:	8f 81       	ldd	r24, Y+7	; 0x07
     752:	98 85       	ldd	r25, Y+8	; 0x08
     754:	95 83       	std	Z+5, r25	; 0x05
     756:	84 83       	std	Z+4, r24	; 0x04
     758:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>

	LCDGotoXY(0, 0);
     75c:	6d b7       	in	r22, 0x3d	; 61
     75e:	7e b7       	in	r23, 0x3e	; 62
     760:	6a 5f       	subi	r22, 0xFA	; 250
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	7e bf       	out	0x3e, r23	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	6d bf       	out	0x3d, r22	; 61
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     776:	f8 01       	movw	r30, r16
     778:	01 90       	ld	r0, Z+
     77a:	00 20       	and	r0, r0
     77c:	e9 f7       	brne	.-6      	; 0x778 <main+0xfe>
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	e0 1b       	sub	r30, r16
     782:	f1 0b       	sbc	r31, r17
     784:	c8 01       	movw	r24, r16
     786:	6e 2f       	mov	r22, r30
     788:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
     78c:	ee 24       	eor	r14, r14
     78e:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     790:	79 e0       	ldi	r23, 0x09	; 9
     792:	a7 2e       	mov	r10, r23
     794:	b1 2c       	mov	r11, r1
     796:	ac 0e       	add	r10, r28
     798:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i  ", i);
     79a:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid Input@%-i", i);
     79c:	02 ec       	ldi	r16, 0xC2	; 194
     79e:	12 e0       	ldi	r17, 0x02	; 2
     7a0:	66 e5       	ldi	r22, 0x56	; 86
     7a2:	26 2e       	mov	r2, r22
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     7a8:	5c e4       	ldi	r21, 0x4C	; 76
     7aa:	45 2e       	mov	r4, r21
     7ac:	51 e0       	ldi	r21, 0x01	; 1
     7ae:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     7b0:	4e ef       	ldi	r20, 0xFE	; 254
     7b2:	c4 2e       	mov	r12, r20
     7b4:	4f ef       	ldi	r20, 0xFF	; 255
     7b6:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b8:	30 e9       	ldi	r19, 0x90	; 144
     7ba:	63 2e       	mov	r6, r19
     7bc:	31 e0       	ldi	r19, 0x01	; 1
     7be:	73 2e       	mov	r7, r19
     7c0:	ff c0       	rjmp	.+510    	; 0x9c0 <main+0x346>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     7c2:	60 91 7b 04 	lds	r22, 0x047B
     7c6:	70 91 7c 04 	lds	r23, 0x047C
     7ca:	84 e3       	ldi	r24, 0x34	; 52
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 92 08 	call	0x1124	; 0x1124 <fputs>
	fscanf(stdin, "%s", buffer) ;
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <main+0x15a>
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <main+0x15c>
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <main+0x15e>
     7d8:	ed b7       	in	r30, 0x3d	; 61
     7da:	fe b7       	in	r31, 0x3e	; 62
     7dc:	31 96       	adiw	r30, 0x01	; 1
     7de:	80 91 79 04 	lds	r24, 0x0479
     7e2:	90 91 7a 04 	lds	r25, 0x047A
     7e6:	ad b7       	in	r26, 0x3d	; 61
     7e8:	be b7       	in	r27, 0x3e	; 62
     7ea:	12 96       	adiw	r26, 0x02	; 2
     7ec:	9c 93       	st	X, r25
     7ee:	8e 93       	st	-X, r24
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	69 e3       	ldi	r22, 0x39	; 57
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	73 83       	std	Z+3, r23	; 0x03
     7f8:	62 83       	std	Z+2, r22	; 0x02
     7fa:	b5 82       	std	Z+5, r11	; 0x05
     7fc:	a4 82       	std	Z+4, r10	; 0x04
     7fe:	0e 94 bd 08 	call	0x117a	; 0x117a <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     802:	00 d0       	rcall	.+0      	; 0x804 <main+0x18a>
     804:	00 d0       	rcall	.+0      	; 0x806 <main+0x18c>
     806:	ed b7       	in	r30, 0x3d	; 61
     808:	fe b7       	in	r31, 0x3e	; 62
     80a:	31 96       	adiw	r30, 0x01	; 1
     80c:	ad b7       	in	r26, 0x3d	; 61
     80e:	be b7       	in	r27, 0x3e	; 62
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	bc 92       	st	X, r11
     814:	ae 92       	st	-X, r10
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	6c e3       	ldi	r22, 0x3C	; 60
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	73 83       	std	Z+3, r23	; 0x03
     81e:	62 83       	std	Z+2, r22	; 0x02
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	8c 0f       	add	r24, r28
     826:	9d 1f       	adc	r25, r29
     828:	95 83       	std	Z+5, r25	; 0x05
     82a:	84 83       	std	Z+4, r24	; 0x04
     82c:	a3 e0       	ldi	r26, 0x03	; 3
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ac 0f       	add	r26, r28
     832:	bd 1f       	adc	r27, r29
     834:	b7 83       	std	Z+7, r27	; 0x07
     836:	a6 83       	std	Z+6, r26	; 0x06
     838:	65 e0       	ldi	r22, 0x05	; 5
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	6c 0f       	add	r22, r28
     83e:	7d 1f       	adc	r23, r29
     840:	71 87       	std	Z+9, r23	; 0x09
     842:	60 87       	std	Z+8, r22	; 0x08
     844:	0e 94 ff 08 	call	0x11fe	; 0x11fe <sscanf>

    sprintf(lcd_buffer2,"%-i  ", i);
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	ed b7       	in	r30, 0x3d	; 61
     852:	fe b7       	in	r31, 0x3e	; 62
     854:	31 96       	adiw	r30, 0x01	; 1
     856:	ad b7       	in	r26, 0x3d	; 61
     858:	be b7       	in	r27, 0x3e	; 62
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	8c 92       	st	X, r8
     85e:	11 97       	sbiw	r26, 0x01	; 1
     860:	12 96       	adiw	r26, 0x02	; 2
     862:	9c 92       	st	X, r9
     864:	66 e4       	ldi	r22, 0x46	; 70
     866:	71 e0       	ldi	r23, 0x01	; 1
     868:	73 83       	std	Z+3, r23	; 0x03
     86a:	62 83       	std	Z+2, r22	; 0x02
     86c:	f5 82       	std	Z+5, r15	; 0x05
     86e:	e4 82       	std	Z+4, r14	; 0x04
     870:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
	LCDGotoXY(10, 0);
     874:	8d b7       	in	r24, 0x3d	; 61
     876:	9e b7       	in	r25, 0x3e	; 62
     878:	06 96       	adiw	r24, 0x06	; 6
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	9e bf       	out	0x3e, r25	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	8d bf       	out	0x3d, r24	; 61
     884:	8a e0       	ldi	r24, 0x0A	; 10
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     88c:	c4 01       	movw	r24, r8
     88e:	62 e0       	ldi	r22, 0x02	; 2
     890:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
	LCDstring(buffer,15);
     89c:	c5 01       	movw	r24, r10
     89e:	6f e0       	ldi	r22, 0x0F	; 15
     8a0:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     8a4:	49 81       	ldd	r20, Y+1	; 0x01
     8a6:	5a 81       	ldd	r21, Y+2	; 0x02
     8a8:	9f ef       	ldi	r25, 0xFF	; 255
     8aa:	4f 3f       	cpi	r20, 0xFF	; 255
     8ac:	59 07       	cpc	r21, r25
     8ae:	0c f4       	brge	.+2      	; 0x8b2 <main+0x238>
     8b0:	5a c0       	rjmp	.+180    	; 0x966 <main+0x2ec>
     8b2:	2b 81       	ldd	r18, Y+3	; 0x03
     8b4:	3c 81       	ldd	r19, Y+4	; 0x04
     8b6:	af ef       	ldi	r26, 0xFF	; 255
     8b8:	2f 3f       	cpi	r18, 0xFF	; 255
     8ba:	3a 07       	cpc	r19, r26
     8bc:	0c f4       	brge	.+2      	; 0x8c0 <main+0x246>
     8be:	53 c0       	rjmp	.+166    	; 0x966 <main+0x2ec>
     8c0:	8d 81       	ldd	r24, Y+5	; 0x05
     8c2:	9e 81       	ldd	r25, Y+6	; 0x06
     8c4:	bf ef       	ldi	r27, 0xFF	; 255
     8c6:	8f 3f       	cpi	r24, 0xFF	; 255
     8c8:	9b 07       	cpc	r25, r27
     8ca:	0c f4       	brge	.+2      	; 0x8ce <main+0x254>
     8cc:	4c c0       	rjmp	.+152    	; 0x966 <main+0x2ec>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     8ce:	6d b7       	in	r22, 0x3d	; 61
     8d0:	7e b7       	in	r23, 0x3e	; 62
     8d2:	6a 50       	subi	r22, 0x0A	; 10
     8d4:	70 40       	sbci	r23, 0x00	; 0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	7e bf       	out	0x3e, r23	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	6d bf       	out	0x3d, r22	; 61
     8e0:	ed b7       	in	r30, 0x3d	; 61
     8e2:	fe b7       	in	r31, 0x3e	; 62
     8e4:	31 96       	adiw	r30, 0x01	; 1
     8e6:	ad b7       	in	r26, 0x3d	; 61
     8e8:	be b7       	in	r27, 0x3e	; 62
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	1c 93       	st	X, r17
     8ee:	0e 93       	st	-X, r16
     8f0:	11 97       	sbiw	r26, 0x01	; 1
     8f2:	53 82       	std	Z+3, r5	; 0x03
     8f4:	42 82       	std	Z+2, r4	; 0x02
     8f6:	55 83       	std	Z+5, r21	; 0x05
     8f8:	44 83       	std	Z+4, r20	; 0x04
     8fa:	37 83       	std	Z+7, r19	; 0x07
     8fc:	26 83       	std	Z+6, r18	; 0x06
     8fe:	91 87       	std	Z+9, r25	; 0x09
     900:	80 87       	std	Z+8, r24	; 0x08
     902:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
		LCDGotoXY(0, 0);
     906:	6d b7       	in	r22, 0x3d	; 61
     908:	7e b7       	in	r23, 0x3e	; 62
     90a:	66 5f       	subi	r22, 0xF6	; 246
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	7e bf       	out	0x3e, r23	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	6d bf       	out	0x3d, r22	; 61
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     920:	c8 01       	movw	r24, r16
     922:	6a e0       	ldi	r22, 0x0A	; 10
     924:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
		x_vect[i] = x;
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	d7 01       	movw	r26, r14
     92e:	aa 0f       	add	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	fd 01       	movw	r30, r26
     934:	ef 54       	subi	r30, 0x4F	; 79
     936:	fc 4f       	sbci	r31, 0xFC	; 252
     938:	91 83       	std	Z+1, r25	; 0x01
     93a:	80 83       	st	Z, r24
		y_vect[i] = y;
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	fd 01       	movw	r30, r26
     942:	e6 50       	subi	r30, 0x06	; 6
     944:	fe 4f       	sbci	r31, 0xFE	; 254
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
		d_vect[i] = d;
     94a:	8d 81       	ldd	r24, Y+5	; 0x05
     94c:	9e 81       	ldd	r25, Y+6	; 0x06
     94e:	aa 52       	subi	r26, 0x2A	; 42
     950:	bd 4f       	sbci	r27, 0xFD	; 253
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
		x=-2;
     958:	da 82       	std	Y+2, r13	; 0x02
     95a:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     95c:	dc 82       	std	Y+4, r13	; 0x04
     95e:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     960:	de 82       	std	Y+6, r13	; 0x06
     962:	cd 82       	std	Y+5, r12	; 0x05
     964:	23 c0       	rjmp	.+70     	; 0x9ac <main+0x332>
	} else {
		sprintf(lcd_buffer,"Invalid Input@%-i", i);
     966:	00 d0       	rcall	.+0      	; 0x968 <main+0x2ee>
     968:	00 d0       	rcall	.+0      	; 0x96a <main+0x2f0>
     96a:	00 d0       	rcall	.+0      	; 0x96c <main+0x2f2>
     96c:	ed b7       	in	r30, 0x3d	; 61
     96e:	fe b7       	in	r31, 0x3e	; 62
     970:	31 96       	adiw	r30, 0x01	; 1
     972:	ad b7       	in	r26, 0x3d	; 61
     974:	be b7       	in	r27, 0x3e	; 62
     976:	12 96       	adiw	r26, 0x02	; 2
     978:	1c 93       	st	X, r17
     97a:	0e 93       	st	-X, r16
     97c:	11 97       	sbiw	r26, 0x01	; 1
     97e:	33 82       	std	Z+3, r3	; 0x03
     980:	22 82       	std	Z+2, r2	; 0x02
     982:	f5 82       	std	Z+5, r15	; 0x05
     984:	e4 82       	std	Z+4, r14	; 0x04
     986:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
		LCDGotoXY(0, 0);
     98a:	6d b7       	in	r22, 0x3d	; 61
     98c:	7e b7       	in	r23, 0x3e	; 62
     98e:	6a 5f       	subi	r22, 0xFA	; 250
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	7e bf       	out	0x3e, r23	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	6d bf       	out	0x3d, r22	; 61
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     9a4:	c8 01       	movw	r24, r16
     9a6:	6a e0       	ldi	r22, 0x0A	; 10
     9a8:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
     9ac:	80 e1       	ldi	r24, 0x10	; 16
     9ae:	97 e2       	ldi	r25, 0x27	; 39
     9b0:	f3 01       	movw	r30, r6
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <main+0x338>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b8:	d9 f7       	brne	.-10     	; 0x9b0 <main+0x336>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     9ba:	08 94       	sec
     9bc:	e1 1c       	adc	r14, r1
     9be:	f1 1c       	adc	r15, r1
     9c0:	8f 81       	ldd	r24, Y+7	; 0x07
     9c2:	98 85       	ldd	r25, Y+8	; 0x08
     9c4:	e8 16       	cp	r14, r24
     9c6:	f9 06       	cpc	r15, r25
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <main+0x352>
     9ca:	fb ce       	rjmp	.-522    	; 0x7c2 <main+0x148>
     9cc:	80 e2       	ldi	r24, 0x20	; 32
     9ce:	9e e4       	ldi	r25, 0x4E	; 78
     9d0:	20 e9       	ldi	r18, 0x90	; 144
     9d2:	31 e0       	ldi	r19, 0x01	; 1
     9d4:	f9 01       	movw	r30, r18
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <main+0x35c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9dc:	d9 f7       	brne	.-10     	; 0x9d4 <main+0x35a>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <main+0x366>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <main+0x368>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <main+0x36a>
     9e4:	ed b7       	in	r30, 0x3d	; 61
     9e6:	fe b7       	in	r31, 0x3e	; 62
     9e8:	31 96       	adiw	r30, 0x01	; 1
     9ea:	02 ec       	ldi	r16, 0xC2	; 194
     9ec:	12 e0       	ldi	r17, 0x02	; 2
     9ee:	ad b7       	in	r26, 0x3d	; 61
     9f0:	be b7       	in	r27, 0x3e	; 62
     9f2:	12 96       	adiw	r26, 0x02	; 2
     9f4:	1c 93       	st	X, r17
     9f6:	0e 93       	st	-X, r16
     9f8:	11 97       	sbiw	r26, 0x01	; 1
     9fa:	88 e6       	ldi	r24, 0x68	; 104
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	93 83       	std	Z+3, r25	; 0x03
     a00:	82 83       	std	Z+2, r24	; 0x02
     a02:	f5 82       	std	Z+5, r15	; 0x05
     a04:	e4 82       	std	Z+4, r14	; 0x04
     a06:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
		LCDGotoXY(0, 0);
     a0a:	6d b7       	in	r22, 0x3d	; 61
     a0c:	7e b7       	in	r23, 0x3e	; 62
     a0e:	6a 5f       	subi	r22, 0xFA	; 250
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	7e bf       	out	0x3e, r23	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	6d bf       	out	0x3d, r22	; 61
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a24:	c8 01       	movw	r24, r16
     a26:	6a e0       	ldi	r22, 0x0A	; 10
     a28:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     a2c:	20 91 b1 03 	lds	r18, 0x03B1
     a30:	30 91 b2 03 	lds	r19, 0x03B2
     a34:	40 91 b3 03 	lds	r20, 0x03B3
     a38:	50 91 b4 03 	lds	r21, 0x03B4
     a3c:	60 91 b5 03 	lds	r22, 0x03B5
     a40:	70 91 b6 03 	lds	r23, 0x03B6
     a44:	e0 90 b7 03 	lds	r14, 0x03B7
     a48:	f0 90 b8 03 	lds	r15, 0x03B8
     a4c:	8d b7       	in	r24, 0x3d	; 61
     a4e:	9e b7       	in	r25, 0x3e	; 62
     a50:	0c 97       	sbiw	r24, 0x0c	; 12
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	9e bf       	out	0x3e, r25	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	8d bf       	out	0x3d, r24	; 61
     a5c:	ed b7       	in	r30, 0x3d	; 61
     a5e:	fe b7       	in	r31, 0x3e	; 62
     a60:	31 96       	adiw	r30, 0x01	; 1
     a62:	ad b7       	in	r26, 0x3d	; 61
     a64:	be b7       	in	r27, 0x3e	; 62
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	1c 93       	st	X, r17
     a6a:	0e 93       	st	-X, r16
     a6c:	11 97       	sbiw	r26, 0x01	; 1
     a6e:	84 e7       	ldi	r24, 0x74	; 116
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	93 83       	std	Z+3, r25	; 0x03
     a74:	82 83       	std	Z+2, r24	; 0x02
     a76:	35 83       	std	Z+5, r19	; 0x05
     a78:	24 83       	std	Z+4, r18	; 0x04
     a7a:	57 83       	std	Z+7, r21	; 0x07
     a7c:	46 83       	std	Z+6, r20	; 0x06
     a7e:	71 87       	std	Z+9, r23	; 0x09
     a80:	60 87       	std	Z+8, r22	; 0x08
     a82:	f3 86       	std	Z+11, r15	; 0x0b
     a84:	e2 86       	std	Z+10, r14	; 0x0a
     a86:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
		LCDGotoXY(0, 0);
     a8a:	6d b7       	in	r22, 0x3d	; 61
     a8c:	7e b7       	in	r23, 0x3e	; 62
     a8e:	64 5f       	subi	r22, 0xF4	; 244
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	7e bf       	out	0x3e, r23	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	6d bf       	out	0x3d, r22	; 61
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     aa4:	c8 01       	movw	r24, r16
     aa6:	6a e0       	ldi	r22, 0x0A	; 10
     aa8:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     aac:	20 91 fa 01 	lds	r18, 0x01FA
     ab0:	30 91 fb 01 	lds	r19, 0x01FB
     ab4:	40 91 fc 01 	lds	r20, 0x01FC
     ab8:	50 91 fd 01 	lds	r21, 0x01FD
     abc:	60 91 fe 01 	lds	r22, 0x01FE
     ac0:	70 91 ff 01 	lds	r23, 0x01FF
     ac4:	e0 90 00 02 	lds	r14, 0x0200
     ac8:	f0 90 01 02 	lds	r15, 0x0201
     acc:	8d b7       	in	r24, 0x3d	; 61
     ace:	9e b7       	in	r25, 0x3e	; 62
     ad0:	0c 97       	sbiw	r24, 0x0c	; 12
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	9e bf       	out	0x3e, r25	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	8d bf       	out	0x3d, r24	; 61
     adc:	ed b7       	in	r30, 0x3d	; 61
     ade:	fe b7       	in	r31, 0x3e	; 62
     ae0:	31 96       	adiw	r30, 0x01	; 1
     ae2:	ad b7       	in	r26, 0x3d	; 61
     ae4:	be b7       	in	r27, 0x3e	; 62
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	1c 93       	st	X, r17
     aea:	0e 93       	st	-X, r16
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	8e e7       	ldi	r24, 0x7E	; 126
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	93 83       	std	Z+3, r25	; 0x03
     af4:	82 83       	std	Z+2, r24	; 0x02
     af6:	35 83       	std	Z+5, r19	; 0x05
     af8:	24 83       	std	Z+4, r18	; 0x04
     afa:	57 83       	std	Z+7, r21	; 0x07
     afc:	46 83       	std	Z+6, r20	; 0x06
     afe:	71 87       	std	Z+9, r23	; 0x09
     b00:	60 87       	std	Z+8, r22	; 0x08
     b02:	f3 86       	std	Z+11, r15	; 0x0b
     b04:	e2 86       	std	Z+10, r14	; 0x0a
     b06:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
		LCDGotoXY(0, 1);
     b0a:	6d b7       	in	r22, 0x3d	; 61
     b0c:	7e b7       	in	r23, 0x3e	; 62
     b0e:	64 5f       	subi	r22, 0xF4	; 244
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	7e bf       	out	0x3e, r23	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	6d bf       	out	0x3d, r22	; 61
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     b24:	c8 01       	movw	r24, r16
     b26:	6a e0       	ldi	r22, 0x0A	; 10
     b28:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     b2c:	20 91 d6 02 	lds	r18, 0x02D6
     b30:	30 91 d7 02 	lds	r19, 0x02D7
     b34:	40 91 d8 02 	lds	r20, 0x02D8
     b38:	50 91 d9 02 	lds	r21, 0x02D9
     b3c:	60 91 da 02 	lds	r22, 0x02DA
     b40:	70 91 db 02 	lds	r23, 0x02DB
     b44:	e0 90 dc 02 	lds	r14, 0x02DC
     b48:	f0 90 dd 02 	lds	r15, 0x02DD
     b4c:	8d b7       	in	r24, 0x3d	; 61
     b4e:	9e b7       	in	r25, 0x3e	; 62
     b50:	0c 97       	sbiw	r24, 0x0c	; 12
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	9e bf       	out	0x3e, r25	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	8d bf       	out	0x3d, r24	; 61
     b5c:	ed b7       	in	r30, 0x3d	; 61
     b5e:	fe b7       	in	r31, 0x3e	; 62
     b60:	31 96       	adiw	r30, 0x01	; 1
     b62:	ad b7       	in	r26, 0x3d	; 61
     b64:	be b7       	in	r27, 0x3e	; 62
     b66:	12 96       	adiw	r26, 0x02	; 2
     b68:	1c 93       	st	X, r17
     b6a:	0e 93       	st	-X, r16
     b6c:	11 97       	sbiw	r26, 0x01	; 1
     b6e:	88 e8       	ldi	r24, 0x88	; 136
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	93 83       	std	Z+3, r25	; 0x03
     b74:	82 83       	std	Z+2, r24	; 0x02
     b76:	35 83       	std	Z+5, r19	; 0x05
     b78:	24 83       	std	Z+4, r18	; 0x04
     b7a:	57 83       	std	Z+7, r21	; 0x07
     b7c:	46 83       	std	Z+6, r20	; 0x06
     b7e:	71 87       	std	Z+9, r23	; 0x09
     b80:	60 87       	std	Z+8, r22	; 0x08
     b82:	f3 86       	std	Z+11, r15	; 0x0b
     b84:	e2 86       	std	Z+10, r14	; 0x0a
     b86:	0e 94 ce 08 	call	0x119c	; 0x119c <sprintf>
		LCDGotoXY(10, 0);
     b8a:	6d b7       	in	r22, 0x3d	; 61
     b8c:	7e b7       	in	r23, 0x3e	; 62
     b8e:	64 5f       	subi	r22, 0xF4	; 244
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	7e bf       	out	0x3e, r23	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	6d bf       	out	0x3d, r22	; 61
     b9c:	8a e0       	ldi	r24, 0x0A	; 10
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     ba4:	c8 01       	movw	r24, r16
     ba6:	6a e0       	ldi	r22, 0x0A	; 10
     ba8:	0e 94 49 06 	call	0xc92	; 0xc92 <LCDstring>
} // main
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	69 96       	adiw	r28, 0x19	; 25
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	bf 90       	pop	r11
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	7f 90       	pop	r7
     bd6:	6f 90       	pop	r6
     bd8:	5f 90       	pop	r5
     bda:	4f 90       	pop	r4
     bdc:	3f 90       	pop	r3
     bde:	2f 90       	pop	r2
     be0:	08 95       	ret

00000be2 <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     be2:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	8a b9       	out	0x0a, r24	; 10
	PORTA = 0x00;    // no pull up resistors
     be8:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x00;    // start with no power
     bea:	1b b8       	out	0x0b, r1	; 11
end

void initialize(void)
begin
	port_init();
	LCD_init();
     bec:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     bf0:	ec e7       	ldi	r30, 0x7C	; 124
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	10 82       	st	Z, r1
	ADCSRA = 0;
     bf6:	aa e7       	ldi	r26, 0x7A	; 122
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0);
     bfc:	80 e4       	ldi	r24, 0x40	; 64
     bfe:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7; 
     c00:	87 e8       	ldi	r24, 0x87	; 135
     c02:	8c 93       	st	X, r24
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
     c04:	08 95       	ret

00000c06 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     c06:	28 2f       	mov	r18, r24
     c08:	20 7f       	andi	r18, 0xF0	; 240
     c0a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     c0c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c0e:	42 9a       	sbi	0x08, 2	; 8
     c10:	20 e4       	ldi	r18, 0x40	; 64
     c12:	3f e1       	ldi	r19, 0x1F	; 31
     c14:	f9 01       	movw	r30, r18
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c1a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c1c:	40 98       	cbi	0x08, 0	; 8
     c1e:	f9 01       	movw	r30, r18
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	44 e0       	ldi	r20, 0x04	; 4
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	4a 95       	dec	r20
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <LCDsendChar+0x22>
     c30:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     c32:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c34:	42 9a       	sbi	0x08, 2	; 8
     c36:	c9 01       	movw	r24, r18
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c3c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c3e:	40 98       	cbi	0x08, 0	; 8
     c40:	c9 01       	movw	r24, r18
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     c46:	08 95       	ret

00000c48 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     c48:	28 2f       	mov	r18, r24
     c4a:	20 7f       	andi	r18, 0xF0	; 240
     c4c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     c4e:	42 9a       	sbi	0x08, 2	; 8
     c50:	20 e4       	ldi	r18, 0x40	; 64
     c52:	3f e1       	ldi	r19, 0x1F	; 31
     c54:	f9 01       	movw	r30, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c5a:	42 98       	cbi	0x08, 2	; 8
     c5c:	f9 01       	movw	r30, r18
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	54 e0       	ldi	r21, 0x04	; 4
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	5a 95       	dec	r21
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <LCDsendCommand+0x1e>
     c6e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     c70:	42 9a       	sbi	0x08, 2	; 8
     c72:	c9 01       	movw	r24, r18
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     c78:	42 98       	cbi	0x08, 2	; 8
     c7a:	c9 01       	movw	r24, r18
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     c80:	08 95       	ret

00000c82 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     c88:	08 95       	ret

00000c8a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     c90:	08 95       	ret

00000c92 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	49 f0       	breq	.+18     	; 0xcb2 <LCDstring+0x20>
     ca0:	ec 01       	movw	r28, r24
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     ca6:	89 91       	ld	r24, Y+
     ca8:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     cac:	1f 5f       	subi	r17, 0xFF	; 255
     cae:	10 17       	cp	r17, r16
     cb0:	d0 f3       	brcs	.-12     	; 0xca6 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     cbc:	62 30       	cpi	r22, 0x02	; 2
     cbe:	31 f0       	breq	.+12     	; 0xccc <LCDGotoXY+0x10>
     cc0:	63 30       	cpi	r22, 0x03	; 3
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <LCDGotoXY+0x14>
     cc4:	61 30       	cpi	r22, 0x01	; 1
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     cc8:	80 5c       	subi	r24, 0xC0	; 192
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     ccc:	8c 5e       	subi	r24, 0xEC	; 236
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     cd0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     cd2:	80 68       	ori	r24, 0x80	; 128
     cd4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
	
}
     cd8:	08 95       	ret

00000cda <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
     ce2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ce4:	64 2f       	mov	r22, r20
     ce6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCDGotoXY>
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     cee:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     cf2:	1f 5f       	subi	r17, 0xFF	; 255
     cf4:	fe 01       	movw	r30, r28
     cf6:	e1 0f       	add	r30, r17
     cf8:	f1 1d       	adc	r31, r1
     cfa:	84 91       	lpm	r24, Z+
     cfc:	88 23       	and	r24, r24
     cfe:	b9 f7       	brne	.-18     	; 0xcee <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	08 95       	ret

00000d08 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	7c 01       	movw	r14, r24
     d16:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     d18:	11 0f       	add	r17, r17
     d1a:	11 0f       	add	r17, r17
     d1c:	11 0f       	add	r17, r17
     d1e:	10 64       	ori	r17, 0x40	; 64
     d20:	c0 e0       	ldi	r28, 0x00	; 0
     d22:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     d24:	f7 01       	movw	r30, r14
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     d2c:	81 2f       	mov	r24, r17
     d2e:	8c 0f       	add	r24, r28
     d30:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		LCDsendChar(pcc);
     d34:	80 2f       	mov	r24, r16
     d36:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	c8 30       	cpi	r28, 0x08	; 8
     d3e:	d1 05       	cpc	r29, r1
     d40:	89 f7       	brne	.-30     	; 0xd24 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	08 95       	ret

00000d50 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	80 e6       	ldi	r24, 0x60	; 96
     d58:	9a ee       	ldi	r25, 0xEA	; 234
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     d5e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     d60:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     d62:	87 b1       	in	r24, 0x07	; 7
     d64:	80 6f       	ori	r24, 0xF0	; 240
     d66:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     d68:	87 b1       	in	r24, 0x07	; 7
     d6a:	87 60       	ori	r24, 0x07	; 7
     d6c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d6e:	80 e3       	ldi	r24, 0x30	; 48
     d70:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d72:	42 9a       	sbi	0x08, 2	; 8
     d74:	20 e4       	ldi	r18, 0x40	; 64
     d76:	3f e1       	ldi	r19, 0x1F	; 31
     d78:	f9 01       	movw	r30, r18
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d7e:	42 98       	cbi	0x08, 2	; 8
     d80:	f9 01       	movw	r30, r18
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     d86:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d88:	42 9a       	sbi	0x08, 2	; 8
     d8a:	c9 01       	movw	r24, r18
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d90:	42 98       	cbi	0x08, 2	; 8
     d92:	c9 01       	movw	r24, r18
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d9c:	42 9a       	sbi	0x08, 2	; 8
     d9e:	c9 01       	movw	r24, r18
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     da4:	42 98       	cbi	0x08, 2	; 8
     da6:	c9 01       	movw	r24, r18
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     dac:	88 e2       	ldi	r24, 0x28	; 40
     dae:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     db2:	8c e0       	ldi	r24, 0x0C	; 12
     db4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
     db8:	c0 eb       	ldi	r28, 0xB0	; 176
     dba:	d0 e0       	ldi	r29, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     dbe:	16 2f       	mov	r17, r22
     dc0:	1f 5f       	subi	r17, 0xFF	; 255
     dc2:	ce 01       	movw	r24, r28
     dc4:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDdefinechar>
     dc8:	28 96       	adiw	r28, 0x08	; 8
     dca:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     dcc:	18 30       	cpi	r17, 0x08	; 8
     dce:	b9 f7       	brne	.-18     	; 0xdbe <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	08 95       	ret

00000dd8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	08 2f       	mov	r16, r24
     dde:	10 e0       	ldi	r17, 0x00	; 0
     de0:	04 c0       	rjmp	.+8      	; 0xdea <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     de2:	8e e1       	ldi	r24, 0x1E	; 30
     de4:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     de8:	1f 5f       	subi	r17, 0xFF	; 255
     dea:	10 17       	cp	r17, r16
     dec:	d0 f3       	brcs	.-12     	; 0xde2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	08 2f       	mov	r16, r24
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     dfe:	88 e1       	ldi	r24, 0x18	; 24
     e00:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     e04:	1f 5f       	subi	r17, 0xFF	; 255
     e06:	10 17       	cp	r17, r16
     e08:	d0 f3       	brcs	.-12     	; 0xdfe <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     e10:	8e e0       	ldi	r24, 0x0E	; 14
     e12:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e16:	08 95       	ret

00000e18 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e1e:	08 95       	ret

00000e20 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     e20:	8c e0       	ldi	r24, 0x0C	; 12
     e22:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e26:	08 95       	ret

00000e28 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e2e:	08 95       	ret

00000e30 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     e30:	8c e0       	ldi	r24, 0x0C	; 12
     e32:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
}
     e36:	08 95       	ret

00000e38 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	08 2f       	mov	r16, r24
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     e42:	80 e1       	ldi	r24, 0x10	; 16
     e44:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e48:	1f 5f       	subi	r17, 0xFF	; 255
     e4a:	10 17       	cp	r17, r16
     e4c:	d0 f3       	brcs	.-12     	; 0xe42 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	08 2f       	mov	r16, r24
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     e5e:	84 e1       	ldi	r24, 0x14	; 20
     e60:	0e 94 24 06 	call	0xc48	; 0xc48 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     e64:	1f 5f       	subi	r17, 0xFF	; 255
     e66:	10 17       	cp	r17, r16
     e68:	d0 f3       	brcs	.-12     	; 0xe5e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     e70:	df 92       	push	r13
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     e80:	96 e0       	ldi	r25, 0x06	; 6
     e82:	89 9f       	mul	r24, r25
     e84:	c0 01       	movw	r24, r0
     e86:	11 24       	eor	r1, r1
     e88:	24 2f       	mov	r18, r20
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	ac 01       	movw	r20, r24
     e8e:	42 9f       	mul	r20, r18
     e90:	c0 01       	movw	r24, r0
     e92:	43 9f       	mul	r20, r19
     e94:	90 0d       	add	r25, r0
     e96:	52 9f       	mul	r21, r18
     e98:	90 0d       	add	r25, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__divmodhi4>
     ea2:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     ea4:	cb 01       	movw	r24, r22
     ea6:	66 e0       	ldi	r22, 0x06	; 6
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
     eae:	e8 2e       	mov	r14, r24
     eb0:	ff 24       	eor	r15, r15
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     eb8:	c8 01       	movw	r24, r16
     eba:	05 96       	adiw	r24, 0x05	; 5
     ebc:	c8 17       	cp	r28, r24
     ebe:	d9 07       	cpc	r29, r25
     ec0:	10 f0       	brcs	.+4      	; 0xec6 <LCDprogressBar+0x56>
     ec2:	85 e0       	ldi	r24, 0x05	; 5
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     ec6:	c0 17       	cp	r28, r16
     ec8:	d1 07       	cpc	r29, r17
     eca:	10 f0       	brcs	.+4      	; 0xed0 <LCDprogressBar+0x60>
     ecc:	8e 2d       	mov	r24, r14
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <LCDprogressBar+0x62>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     ed2:	0e 94 03 06 	call	0xc06	; 0xc06 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     ed6:	f3 94       	inc	r15
     ed8:	0a 5f       	subi	r16, 0xFA	; 250
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fd 14       	cp	r15, r13
     ede:	60 f3       	brcs	.-40     	; 0xeb8 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	08 95       	ret

00000ef0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     ef0:	87 e6       	ldi	r24, 0x67	; 103
     ef2:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	80 93 c1 00 	sts	0x00C1, r24
}
     efc:	08 95       	ret

00000efe <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     efe:	1f 93       	push	r17
     f00:	18 2f       	mov	r17, r24

  if (c == '\a')
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	49 f4       	brne	.+18     	; 0xf18 <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     f06:	60 91 7d 04 	lds	r22, 0x047D
     f0a:	70 91 7e 04 	lds	r23, 0x047E
     f0e:	80 ea       	ldi	r24, 0xA0	; 160
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 92 08 	call	0x1124	; 0x1124 <fputs>
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     f18:	8a 30       	cpi	r24, 0x0A	; 10
     f1a:	19 f4       	brne	.+6      	; 0xf22 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     f1c:	8d e0       	ldi	r24, 0x0D	; 13
     f1e:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     f22:	80 91 c0 00 	lds	r24, 0x00C0
     f26:	85 ff       	sbrs	r24, 5
     f28:	fc cf       	rjmp	.-8      	; 0xf22 <uart_putchar+0x24>
  UDR0 = c;
     f2a:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	1f 91       	pop	r17
     f34:	08 95       	ret

00000f36 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     f44:	80 91 a8 01 	lds	r24, 0x01A8
     f48:	90 91 a9 01 	lds	r25, 0x01A9
     f4c:	89 2b       	or	r24, r25
     f4e:	09 f0       	breq	.+2      	; 0xf52 <uart_getchar+0x1c>
     f50:	9f c0       	rjmp	.+318    	; 0x1090 <uart_getchar+0x15a>
     f52:	0a ea       	ldi	r16, 0xAA	; 170
     f54:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     f56:	80 91 c0 00 	lds	r24, 0x00C0
     f5a:	87 ff       	sbrs	r24, 7
     f5c:	fc cf       	rjmp	.-8      	; 0xf56 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     f5e:	80 91 c0 00 	lds	r24, 0x00C0
     f62:	84 ff       	sbrs	r24, 4
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <uart_getchar+0x36>
     f66:	2e ef       	ldi	r18, 0xFE	; 254
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	a6 c0       	rjmp	.+332    	; 0x10b8 <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     f6c:	80 91 c0 00 	lds	r24, 0x00C0
     f70:	83 fd       	sbrc	r24, 3
     f72:	a0 c0       	rjmp	.+320    	; 0x10b4 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     f74:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     f78:	9d 30       	cpi	r25, 0x0D	; 13
     f7a:	11 f0       	breq	.+4      	; 0xf80 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     f7c:	9a 30       	cpi	r25, 0x0A	; 10
     f7e:	69 f4       	brne	.+26     	; 0xf9a <uart_getchar+0x64>
	  {
	    *cp = c;
     f80:	8a e0       	ldi	r24, 0x0A	; 10
     f82:	f8 01       	movw	r30, r16
     f84:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     f86:	b7 01       	movw	r22, r14
     f88:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
	    rxp = b;
     f8c:	8a ea       	ldi	r24, 0xAA	; 170
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	90 93 a9 01 	sts	0x01A9, r25
     f94:	80 93 a8 01 	sts	0x01A8, r24
     f98:	7b c0       	rjmp	.+246    	; 0x1090 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     f9a:	99 30       	cpi	r25, 0x09	; 9
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <uart_getchar+0x6a>
     f9e:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     fa0:	89 2f       	mov	r24, r25
     fa2:	80 52       	subi	r24, 0x20	; 32
     fa4:	8f 35       	cpi	r24, 0x5F	; 95
     fa6:	10 f0       	brcs	.+4      	; 0xfac <uart_getchar+0x76>
     fa8:	90 3a       	cpi	r25, 0xA0	; 160
     faa:	70 f0       	brcs	.+28     	; 0xfc8 <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     fac:	f1 e0       	ldi	r31, 0x01	; 1
     fae:	09 3f       	cpi	r16, 0xF9	; 249
     fb0:	1f 07       	cpc	r17, r31
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     fb4:	87 e0       	ldi	r24, 0x07	; 7
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     fb8:	f8 01       	movw	r30, r16
     fba:	91 93       	st	Z+, r25
     fbc:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     fbe:	89 2f       	mov	r24, r25
     fc0:	b7 01       	movw	r22, r14
     fc2:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
     fc6:	c7 cf       	rjmp	.-114    	; 0xf56 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     fc8:	92 31       	cpi	r25, 0x12	; 18
     fca:	39 f1       	breq	.+78     	; 0x101a <uart_getchar+0xe4>
     fcc:	93 31       	cpi	r25, 0x13	; 19
     fce:	38 f4       	brcc	.+14     	; 0xfde <uart_getchar+0xa8>
     fd0:	93 30       	cpi	r25, 0x03	; 3
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <uart_getchar+0xa0>
     fd4:	6f c0       	rjmp	.+222    	; 0x10b4 <uart_getchar+0x17e>
     fd6:	98 30       	cpi	r25, 0x08	; 8
     fd8:	09 f0       	breq	.+2      	; 0xfdc <uart_getchar+0xa6>
     fda:	bd cf       	rjmp	.-134    	; 0xf56 <uart_getchar+0x20>
     fdc:	09 c0       	rjmp	.+18     	; 0xff0 <uart_getchar+0xba>
     fde:	97 31       	cpi	r25, 0x17	; 23
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <uart_getchar+0xae>
     fe2:	4b c0       	rjmp	.+150    	; 0x107a <uart_getchar+0x144>
     fe4:	9f 37       	cpi	r25, 0x7F	; 127
     fe6:	21 f0       	breq	.+8      	; 0xff0 <uart_getchar+0xba>
     fe8:	95 31       	cpi	r25, 0x15	; 21
     fea:	09 f0       	breq	.+2      	; 0xfee <uart_getchar+0xb8>
     fec:	b4 cf       	rjmp	.-152    	; 0xf56 <uart_getchar+0x20>
     fee:	32 c0       	rjmp	.+100    	; 0x1054 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	0a 3a       	cpi	r16, 0xAA	; 170
     ff4:	1f 07       	cpc	r17, r31
     ff6:	09 f0       	breq	.+2      	; 0xffa <uart_getchar+0xc4>
     ff8:	08 f4       	brcc	.+2      	; 0xffc <uart_getchar+0xc6>
     ffa:	ad cf       	rjmp	.-166    	; 0xf56 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     ffc:	88 e0       	ldi	r24, 0x08	; 8
     ffe:	b7 01       	movw	r22, r14
    1000:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar(' ', stream);
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	b7 01       	movw	r22, r14
    1008:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar('\b', stream);
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	b7 01       	movw	r22, r14
    1010:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		cp--;
    1014:	01 50       	subi	r16, 0x01	; 1
    1016:	10 40       	sbci	r17, 0x00	; 0
    1018:	9e cf       	rjmp	.-196    	; 0xf56 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    101a:	8d e0       	ldi	r24, 0x0D	; 13
    101c:	b7 01       	movw	r22, r14
    101e:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
    1022:	ca ea       	ldi	r28, 0xAA	; 170
    1024:	d1 e0       	ldi	r29, 0x01	; 1
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    1028:	89 91       	ld	r24, Y+
    102a:	b7 01       	movw	r22, r14
    102c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1030:	c0 17       	cp	r28, r16
    1032:	d1 07       	cpc	r29, r17
    1034:	c8 f3       	brcs	.-14     	; 0x1028 <uart_getchar+0xf2>
    1036:	8f cf       	rjmp	.-226    	; 0xf56 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	b7 01       	movw	r22, r14
    103c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar(' ', stream);
    1040:	80 e2       	ldi	r24, 0x20	; 32
    1042:	b7 01       	movw	r22, r14
    1044:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar('\b', stream);
    1048:	88 e0       	ldi	r24, 0x08	; 8
    104a:	b7 01       	movw	r22, r14
    104c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		cp--;
    1050:	01 50       	subi	r16, 0x01	; 1
    1052:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	0a 3a       	cpi	r16, 0xAA	; 170
    1058:	18 07       	cpc	r17, r24
    105a:	09 f0       	breq	.+2      	; 0x105e <uart_getchar+0x128>
    105c:	68 f7       	brcc	.-38     	; 0x1038 <uart_getchar+0x102>
    105e:	7b cf       	rjmp	.-266    	; 0xf56 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	b7 01       	movw	r22, r14
    1064:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar(' ', stream);
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	b7 01       	movw	r22, r14
    106c:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
		uart_putchar('\b', stream);
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	b7 01       	movw	r22, r14
    1074:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_putchar>
    1078:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    107a:	e1 e0       	ldi	r30, 0x01	; 1
    107c:	0a 3a       	cpi	r16, 0xAA	; 170
    107e:	1e 07       	cpc	r17, r30
    1080:	09 f0       	breq	.+2      	; 0x1084 <uart_getchar+0x14e>
    1082:	08 f4       	brcc	.+2      	; 0x1086 <uart_getchar+0x150>
    1084:	68 cf       	rjmp	.-304    	; 0xf56 <uart_getchar+0x20>
    1086:	e8 01       	movw	r28, r16
    1088:	8a 91       	ld	r24, -Y
    108a:	80 32       	cpi	r24, 0x20	; 32
    108c:	49 f7       	brne	.-46     	; 0x1060 <uart_getchar+0x12a>
    108e:	63 cf       	rjmp	.-314    	; 0xf56 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1090:	e0 91 a8 01 	lds	r30, 0x01A8
    1094:	f0 91 a9 01 	lds	r31, 0x01A9
    1098:	81 91       	ld	r24, Z+
    109a:	f0 93 a9 01 	sts	0x01A9, r31
    109e:	e0 93 a8 01 	sts	0x01A8, r30
  if (c == '\n')
    10a2:	8a 30       	cpi	r24, 0x0A	; 10
    10a4:	21 f4       	brne	.+8      	; 0x10ae <uart_getchar+0x178>
    rxp = 0;
    10a6:	10 92 a9 01 	sts	0x01A9, r1
    10aa:	10 92 a8 01 	sts	0x01A8, r1

  return c;
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <uart_getchar+0x182>
    10b4:	2f ef       	ldi	r18, 0xFF	; 255
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
}
    10b8:	c9 01       	movw	r24, r18
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	08 95       	ret

000010c8 <__udivmodhi4>:
    10c8:	aa 1b       	sub	r26, r26
    10ca:	bb 1b       	sub	r27, r27
    10cc:	51 e1       	ldi	r21, 0x11	; 17
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <__udivmodhi4_ep>

000010d0 <__udivmodhi4_loop>:
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	a6 17       	cp	r26, r22
    10d6:	b7 07       	cpc	r27, r23
    10d8:	10 f0       	brcs	.+4      	; 0x10de <__udivmodhi4_ep>
    10da:	a6 1b       	sub	r26, r22
    10dc:	b7 0b       	sbc	r27, r23

000010de <__udivmodhi4_ep>:
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	5a 95       	dec	r21
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__udivmodhi4_loop>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	08 95       	ret

000010f0 <__divmodhi4>:
    10f0:	97 fb       	bst	r25, 7
    10f2:	09 2e       	mov	r0, r25
    10f4:	07 26       	eor	r0, r23
    10f6:	0a d0       	rcall	.+20     	; 0x110c <__divmodhi4_neg1>
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	04 d0       	rcall	.+8      	; 0x1104 <__divmodhi4_neg2>
    10fc:	e5 df       	rcall	.-54     	; 0x10c8 <__udivmodhi4>
    10fe:	06 d0       	rcall	.+12     	; 0x110c <__divmodhi4_neg1>
    1100:	00 20       	and	r0, r0
    1102:	1a f4       	brpl	.+6      	; 0x110a <__divmodhi4_exit>

00001104 <__divmodhi4_neg2>:
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255

0000110a <__divmodhi4_exit>:
    110a:	08 95       	ret

0000110c <__divmodhi4_neg1>:
    110c:	f6 f7       	brtc	.-4      	; 0x110a <__divmodhi4_exit>
    110e:	90 95       	com	r25
    1110:	81 95       	neg	r24
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	08 95       	ret

00001116 <strcpy>:
    1116:	fb 01       	movw	r30, r22
    1118:	dc 01       	movw	r26, r24
    111a:	01 90       	ld	r0, Z+
    111c:	0d 92       	st	X+, r0
    111e:	00 20       	and	r0, r0
    1120:	e1 f7       	brne	.-8      	; 0x111a <strcpy+0x4>
    1122:	08 95       	ret

00001124 <fputs>:
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	7c 01       	movw	r14, r24
    1132:	8b 01       	movw	r16, r22
    1134:	db 01       	movw	r26, r22
    1136:	13 96       	adiw	r26, 0x03	; 3
    1138:	8c 91       	ld	r24, X
    113a:	81 fd       	sbrc	r24, 1
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <fputs+0x20>
    113e:	cf ef       	ldi	r28, 0xFF	; 255
    1140:	df ef       	ldi	r29, 0xFF	; 255
    1142:	13 c0       	rjmp	.+38     	; 0x116a <fputs+0x46>
    1144:	c0 e0       	ldi	r28, 0x00	; 0
    1146:	d0 e0       	ldi	r29, 0x00	; 0
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <fputs+0x3c>
    114a:	d8 01       	movw	r26, r16
    114c:	18 96       	adiw	r26, 0x08	; 8
    114e:	ed 91       	ld	r30, X+
    1150:	fc 91       	ld	r31, X
    1152:	19 97       	sbiw	r26, 0x09	; 9
    1154:	b8 01       	movw	r22, r16
    1156:	09 95       	icall
    1158:	89 2b       	or	r24, r25
    115a:	11 f0       	breq	.+4      	; 0x1160 <fputs+0x3c>
    115c:	cf ef       	ldi	r28, 0xFF	; 255
    115e:	df ef       	ldi	r29, 0xFF	; 255
    1160:	f7 01       	movw	r30, r14
    1162:	81 91       	ld	r24, Z+
    1164:	7f 01       	movw	r14, r30
    1166:	88 23       	and	r24, r24
    1168:	81 f7       	brne	.-32     	; 0x114a <fputs+0x26>
    116a:	ce 01       	movw	r24, r28
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret

0000117a <fscanf>:
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9e 01       	movw	r18, r28
    1184:	27 5f       	subi	r18, 0xF7	; 247
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	6f 81       	ldd	r22, Y+7	; 0x07
    118e:	78 85       	ldd	r23, Y+8	; 0x08
    1190:	a9 01       	movw	r20, r18
    1192:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <vfscanf>
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <sprintf>:
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	2e 97       	sbiw	r28, 0x0e	; 14
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	0d 89       	ldd	r16, Y+21	; 0x15
    11b6:	1e 89       	ldd	r17, Y+22	; 0x16
    11b8:	86 e0       	ldi	r24, 0x06	; 6
    11ba:	8c 83       	std	Y+4, r24	; 0x04
    11bc:	1a 83       	std	Y+2, r17	; 0x02
    11be:	09 83       	std	Y+1, r16	; 0x01
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	9f e7       	ldi	r25, 0x7F	; 127
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	9e 01       	movw	r18, r28
    11ca:	27 5e       	subi	r18, 0xE7	; 231
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	6f 89       	ldd	r22, Y+23	; 0x17
    11d4:	78 8d       	ldd	r23, Y+24	; 0x18
    11d6:	a9 01       	movw	r20, r18
    11d8:	0e 94 22 09 	call	0x1244	; 0x1244 <vfprintf>
    11dc:	2f 81       	ldd	r18, Y+7	; 0x07
    11de:	38 85       	ldd	r19, Y+8	; 0x08
    11e0:	02 0f       	add	r16, r18
    11e2:	13 1f       	adc	r17, r19
    11e4:	f8 01       	movw	r30, r16
    11e6:	10 82       	st	Z, r1
    11e8:	2e 96       	adiw	r28, 0x0e	; 14
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <sscanf>:
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	2e 97       	sbiw	r28, 0x0e	; 14
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	8c 83       	std	Y+4, r24	; 0x04
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	9e 01       	movw	r18, r28
    1220:	29 5e       	subi	r18, 0xE9	; 233
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	6d 89       	ldd	r22, Y+21	; 0x15
    122a:	7e 89       	ldd	r23, Y+22	; 0x16
    122c:	a9 01       	movw	r20, r18
    122e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <vfscanf>
    1232:	2e 96       	adiw	r28, 0x0e	; 14
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <vfprintf>:
    1244:	2f 92       	push	r2
    1246:	3f 92       	push	r3
    1248:	4f 92       	push	r4
    124a:	5f 92       	push	r5
    124c:	6f 92       	push	r6
    124e:	7f 92       	push	r7
    1250:	8f 92       	push	r8
    1252:	9f 92       	push	r9
    1254:	af 92       	push	r10
    1256:	bf 92       	push	r11
    1258:	cf 92       	push	r12
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	2b 97       	sbiw	r28, 0x0b	; 11
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	3c 01       	movw	r6, r24
    127a:	2b 01       	movw	r4, r22
    127c:	5a 01       	movw	r10, r20
    127e:	fc 01       	movw	r30, r24
    1280:	17 82       	std	Z+7, r1	; 0x07
    1282:	16 82       	std	Z+6, r1	; 0x06
    1284:	83 81       	ldd	r24, Z+3	; 0x03
    1286:	81 fd       	sbrc	r24, 1
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <vfprintf+0x4c>
    128a:	6f ef       	ldi	r22, 0xFF	; 255
    128c:	7f ef       	ldi	r23, 0xFF	; 255
    128e:	c6 c1       	rjmp	.+908    	; 0x161c <vfprintf+0x3d8>
    1290:	9a e0       	ldi	r25, 0x0A	; 10
    1292:	89 2e       	mov	r8, r25
    1294:	1e 01       	movw	r2, r28
    1296:	08 94       	sec
    1298:	21 1c       	adc	r2, r1
    129a:	31 1c       	adc	r3, r1
    129c:	f3 01       	movw	r30, r6
    129e:	23 81       	ldd	r18, Z+3	; 0x03
    12a0:	f2 01       	movw	r30, r4
    12a2:	23 fd       	sbrc	r18, 3
    12a4:	85 91       	lpm	r24, Z+
    12a6:	23 ff       	sbrs	r18, 3
    12a8:	81 91       	ld	r24, Z+
    12aa:	2f 01       	movw	r4, r30
    12ac:	88 23       	and	r24, r24
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <vfprintf+0x6e>
    12b0:	b2 c1       	rjmp	.+868    	; 0x1616 <vfprintf+0x3d2>
    12b2:	85 32       	cpi	r24, 0x25	; 37
    12b4:	39 f4       	brne	.+14     	; 0x12c4 <vfprintf+0x80>
    12b6:	23 fd       	sbrc	r18, 3
    12b8:	85 91       	lpm	r24, Z+
    12ba:	23 ff       	sbrs	r18, 3
    12bc:	81 91       	ld	r24, Z+
    12be:	2f 01       	movw	r4, r30
    12c0:	85 32       	cpi	r24, 0x25	; 37
    12c2:	29 f4       	brne	.+10     	; 0x12ce <vfprintf+0x8a>
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	b3 01       	movw	r22, r6
    12c8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    12cc:	e7 cf       	rjmp	.-50     	; 0x129c <vfprintf+0x58>
    12ce:	98 2f       	mov	r25, r24
    12d0:	ff 24       	eor	r15, r15
    12d2:	ee 24       	eor	r14, r14
    12d4:	99 24       	eor	r9, r9
    12d6:	ff e1       	ldi	r31, 0x1F	; 31
    12d8:	ff 15       	cp	r31, r15
    12da:	d0 f0       	brcs	.+52     	; 0x1310 <vfprintf+0xcc>
    12dc:	9b 32       	cpi	r25, 0x2B	; 43
    12de:	69 f0       	breq	.+26     	; 0x12fa <vfprintf+0xb6>
    12e0:	9c 32       	cpi	r25, 0x2C	; 44
    12e2:	28 f4       	brcc	.+10     	; 0x12ee <vfprintf+0xaa>
    12e4:	90 32       	cpi	r25, 0x20	; 32
    12e6:	59 f0       	breq	.+22     	; 0x12fe <vfprintf+0xba>
    12e8:	93 32       	cpi	r25, 0x23	; 35
    12ea:	91 f4       	brne	.+36     	; 0x1310 <vfprintf+0xcc>
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <vfprintf+0xc6>
    12ee:	9d 32       	cpi	r25, 0x2D	; 45
    12f0:	49 f0       	breq	.+18     	; 0x1304 <vfprintf+0xc0>
    12f2:	90 33       	cpi	r25, 0x30	; 48
    12f4:	69 f4       	brne	.+26     	; 0x1310 <vfprintf+0xcc>
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	24 c0       	rjmp	.+72     	; 0x1342 <vfprintf+0xfe>
    12fa:	52 e0       	ldi	r21, 0x02	; 2
    12fc:	f5 2a       	or	r15, r21
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	f8 2a       	or	r15, r24
    1302:	28 c0       	rjmp	.+80     	; 0x1354 <vfprintf+0x110>
    1304:	98 e0       	ldi	r25, 0x08	; 8
    1306:	f9 2a       	or	r15, r25
    1308:	25 c0       	rjmp	.+74     	; 0x1354 <vfprintf+0x110>
    130a:	e0 e1       	ldi	r30, 0x10	; 16
    130c:	fe 2a       	or	r15, r30
    130e:	22 c0       	rjmp	.+68     	; 0x1354 <vfprintf+0x110>
    1310:	f7 fc       	sbrc	r15, 7
    1312:	29 c0       	rjmp	.+82     	; 0x1366 <vfprintf+0x122>
    1314:	89 2f       	mov	r24, r25
    1316:	80 53       	subi	r24, 0x30	; 48
    1318:	8a 30       	cpi	r24, 0x0A	; 10
    131a:	70 f4       	brcc	.+28     	; 0x1338 <vfprintf+0xf4>
    131c:	f6 fe       	sbrs	r15, 6
    131e:	05 c0       	rjmp	.+10     	; 0x132a <vfprintf+0xe6>
    1320:	98 9c       	mul	r9, r8
    1322:	90 2c       	mov	r9, r0
    1324:	11 24       	eor	r1, r1
    1326:	98 0e       	add	r9, r24
    1328:	15 c0       	rjmp	.+42     	; 0x1354 <vfprintf+0x110>
    132a:	e8 9c       	mul	r14, r8
    132c:	e0 2c       	mov	r14, r0
    132e:	11 24       	eor	r1, r1
    1330:	e8 0e       	add	r14, r24
    1332:	f0 e2       	ldi	r31, 0x20	; 32
    1334:	ff 2a       	or	r15, r31
    1336:	0e c0       	rjmp	.+28     	; 0x1354 <vfprintf+0x110>
    1338:	9e 32       	cpi	r25, 0x2E	; 46
    133a:	29 f4       	brne	.+10     	; 0x1346 <vfprintf+0x102>
    133c:	f6 fc       	sbrc	r15, 6
    133e:	6b c1       	rjmp	.+726    	; 0x1616 <vfprintf+0x3d2>
    1340:	40 e4       	ldi	r20, 0x40	; 64
    1342:	f4 2a       	or	r15, r20
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <vfprintf+0x110>
    1346:	9c 36       	cpi	r25, 0x6C	; 108
    1348:	19 f4       	brne	.+6      	; 0x1350 <vfprintf+0x10c>
    134a:	50 e8       	ldi	r21, 0x80	; 128
    134c:	f5 2a       	or	r15, r21
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x110>
    1350:	98 36       	cpi	r25, 0x68	; 104
    1352:	49 f4       	brne	.+18     	; 0x1366 <vfprintf+0x122>
    1354:	f2 01       	movw	r30, r4
    1356:	23 fd       	sbrc	r18, 3
    1358:	95 91       	lpm	r25, Z+
    135a:	23 ff       	sbrs	r18, 3
    135c:	91 91       	ld	r25, Z+
    135e:	2f 01       	movw	r4, r30
    1360:	99 23       	and	r25, r25
    1362:	09 f0       	breq	.+2      	; 0x1366 <vfprintf+0x122>
    1364:	b8 cf       	rjmp	.-144    	; 0x12d6 <vfprintf+0x92>
    1366:	89 2f       	mov	r24, r25
    1368:	85 54       	subi	r24, 0x45	; 69
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	18 f0       	brcs	.+6      	; 0x1374 <vfprintf+0x130>
    136e:	80 52       	subi	r24, 0x20	; 32
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	38 f4       	brcc	.+14     	; 0x1382 <vfprintf+0x13e>
    1374:	44 e0       	ldi	r20, 0x04	; 4
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	a4 0e       	add	r10, r20
    137a:	b5 1e       	adc	r11, r21
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	59 83       	std	Y+1, r21	; 0x01
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <vfprintf+0x15c>
    1382:	93 36       	cpi	r25, 0x63	; 99
    1384:	31 f0       	breq	.+12     	; 0x1392 <vfprintf+0x14e>
    1386:	93 37       	cpi	r25, 0x73	; 115
    1388:	79 f0       	breq	.+30     	; 0x13a8 <vfprintf+0x164>
    138a:	93 35       	cpi	r25, 0x53	; 83
    138c:	09 f0       	breq	.+2      	; 0x1390 <vfprintf+0x14c>
    138e:	56 c0       	rjmp	.+172    	; 0x143c <vfprintf+0x1f8>
    1390:	20 c0       	rjmp	.+64     	; 0x13d2 <vfprintf+0x18e>
    1392:	f5 01       	movw	r30, r10
    1394:	80 81       	ld	r24, Z
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	42 e0       	ldi	r20, 0x02	; 2
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	a4 0e       	add	r10, r20
    139e:	b5 1e       	adc	r11, r21
    13a0:	61 01       	movw	r12, r2
    13a2:	01 e0       	ldi	r16, 0x01	; 1
    13a4:	10 e0       	ldi	r17, 0x00	; 0
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <vfprintf+0x188>
    13a8:	f5 01       	movw	r30, r10
    13aa:	c0 80       	ld	r12, Z
    13ac:	d1 80       	ldd	r13, Z+1	; 0x01
    13ae:	f6 fc       	sbrc	r15, 6
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <vfprintf+0x174>
    13b2:	6f ef       	ldi	r22, 0xFF	; 255
    13b4:	7f ef       	ldi	r23, 0xFF	; 255
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x178>
    13b8:	69 2d       	mov	r22, r9
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	42 e0       	ldi	r20, 0x02	; 2
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	a4 0e       	add	r10, r20
    13c2:	b5 1e       	adc	r11, r21
    13c4:	c6 01       	movw	r24, r12
    13c6:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <strnlen>
    13ca:	8c 01       	movw	r16, r24
    13cc:	5f e7       	ldi	r21, 0x7F	; 127
    13ce:	f5 22       	and	r15, r21
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <vfprintf+0x1b6>
    13d2:	f5 01       	movw	r30, r10
    13d4:	c0 80       	ld	r12, Z
    13d6:	d1 80       	ldd	r13, Z+1	; 0x01
    13d8:	f6 fc       	sbrc	r15, 6
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <vfprintf+0x19e>
    13dc:	6f ef       	ldi	r22, 0xFF	; 255
    13de:	7f ef       	ldi	r23, 0xFF	; 255
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x1a2>
    13e2:	69 2d       	mov	r22, r9
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	42 e0       	ldi	r20, 0x02	; 2
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	a4 0e       	add	r10, r20
    13ec:	b5 1e       	adc	r11, r21
    13ee:	c6 01       	movw	r24, r12
    13f0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <strnlen_P>
    13f4:	8c 01       	movw	r16, r24
    13f6:	50 e8       	ldi	r21, 0x80	; 128
    13f8:	f5 2a       	or	r15, r21
    13fa:	f3 fe       	sbrs	r15, 3
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <vfprintf+0x1c8>
    13fe:	1a c0       	rjmp	.+52     	; 0x1434 <vfprintf+0x1f0>
    1400:	80 e2       	ldi	r24, 0x20	; 32
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	b3 01       	movw	r22, r6
    1406:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    140a:	ea 94       	dec	r14
    140c:	8e 2d       	mov	r24, r14
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	08 17       	cp	r16, r24
    1412:	19 07       	cpc	r17, r25
    1414:	a8 f3       	brcs	.-22     	; 0x1400 <vfprintf+0x1bc>
    1416:	0e c0       	rjmp	.+28     	; 0x1434 <vfprintf+0x1f0>
    1418:	f6 01       	movw	r30, r12
    141a:	f7 fc       	sbrc	r15, 7
    141c:	85 91       	lpm	r24, Z+
    141e:	f7 fe       	sbrs	r15, 7
    1420:	81 91       	ld	r24, Z+
    1422:	6f 01       	movw	r12, r30
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	b3 01       	movw	r22, r6
    1428:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    142c:	e1 10       	cpse	r14, r1
    142e:	ea 94       	dec	r14
    1430:	01 50       	subi	r16, 0x01	; 1
    1432:	10 40       	sbci	r17, 0x00	; 0
    1434:	01 15       	cp	r16, r1
    1436:	11 05       	cpc	r17, r1
    1438:	79 f7       	brne	.-34     	; 0x1418 <vfprintf+0x1d4>
    143a:	ea c0       	rjmp	.+468    	; 0x1610 <vfprintf+0x3cc>
    143c:	94 36       	cpi	r25, 0x64	; 100
    143e:	11 f0       	breq	.+4      	; 0x1444 <vfprintf+0x200>
    1440:	99 36       	cpi	r25, 0x69	; 105
    1442:	69 f5       	brne	.+90     	; 0x149e <vfprintf+0x25a>
    1444:	f7 fe       	sbrs	r15, 7
    1446:	08 c0       	rjmp	.+16     	; 0x1458 <vfprintf+0x214>
    1448:	f5 01       	movw	r30, r10
    144a:	20 81       	ld	r18, Z
    144c:	31 81       	ldd	r19, Z+1	; 0x01
    144e:	42 81       	ldd	r20, Z+2	; 0x02
    1450:	53 81       	ldd	r21, Z+3	; 0x03
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0a c0       	rjmp	.+20     	; 0x146c <vfprintf+0x228>
    1458:	f5 01       	movw	r30, r10
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	9c 01       	movw	r18, r24
    1460:	44 27       	eor	r20, r20
    1462:	37 fd       	sbrc	r19, 7
    1464:	40 95       	com	r20
    1466:	54 2f       	mov	r21, r20
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a8 0e       	add	r10, r24
    146e:	b9 1e       	adc	r11, r25
    1470:	9f e6       	ldi	r25, 0x6F	; 111
    1472:	f9 22       	and	r15, r25
    1474:	57 ff       	sbrs	r21, 7
    1476:	09 c0       	rjmp	.+18     	; 0x148a <vfprintf+0x246>
    1478:	50 95       	com	r21
    147a:	40 95       	com	r20
    147c:	30 95       	com	r19
    147e:	21 95       	neg	r18
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	4f 4f       	sbci	r20, 0xFF	; 255
    1484:	5f 4f       	sbci	r21, 0xFF	; 255
    1486:	e0 e8       	ldi	r30, 0x80	; 128
    1488:	fe 2a       	or	r15, r30
    148a:	ca 01       	movw	r24, r20
    148c:	b9 01       	movw	r22, r18
    148e:	a1 01       	movw	r20, r2
    1490:	2a e0       	ldi	r18, 0x0A	; 10
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__ultoa_invert>
    1498:	d8 2e       	mov	r13, r24
    149a:	d2 18       	sub	r13, r2
    149c:	40 c0       	rjmp	.+128    	; 0x151e <vfprintf+0x2da>
    149e:	95 37       	cpi	r25, 0x75	; 117
    14a0:	29 f4       	brne	.+10     	; 0x14ac <vfprintf+0x268>
    14a2:	1f 2d       	mov	r17, r15
    14a4:	1f 7e       	andi	r17, 0xEF	; 239
    14a6:	2a e0       	ldi	r18, 0x0A	; 10
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	1d c0       	rjmp	.+58     	; 0x14e6 <vfprintf+0x2a2>
    14ac:	1f 2d       	mov	r17, r15
    14ae:	19 7f       	andi	r17, 0xF9	; 249
    14b0:	9f 36       	cpi	r25, 0x6F	; 111
    14b2:	61 f0       	breq	.+24     	; 0x14cc <vfprintf+0x288>
    14b4:	90 37       	cpi	r25, 0x70	; 112
    14b6:	20 f4       	brcc	.+8      	; 0x14c0 <vfprintf+0x27c>
    14b8:	98 35       	cpi	r25, 0x58	; 88
    14ba:	09 f0       	breq	.+2      	; 0x14be <vfprintf+0x27a>
    14bc:	ac c0       	rjmp	.+344    	; 0x1616 <vfprintf+0x3d2>
    14be:	0f c0       	rjmp	.+30     	; 0x14de <vfprintf+0x29a>
    14c0:	90 37       	cpi	r25, 0x70	; 112
    14c2:	39 f0       	breq	.+14     	; 0x14d2 <vfprintf+0x28e>
    14c4:	98 37       	cpi	r25, 0x78	; 120
    14c6:	09 f0       	breq	.+2      	; 0x14ca <vfprintf+0x286>
    14c8:	a6 c0       	rjmp	.+332    	; 0x1616 <vfprintf+0x3d2>
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <vfprintf+0x290>
    14cc:	28 e0       	ldi	r18, 0x08	; 8
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	0a c0       	rjmp	.+20     	; 0x14e6 <vfprintf+0x2a2>
    14d2:	10 61       	ori	r17, 0x10	; 16
    14d4:	14 fd       	sbrc	r17, 4
    14d6:	14 60       	ori	r17, 0x04	; 4
    14d8:	20 e1       	ldi	r18, 0x10	; 16
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <vfprintf+0x2a2>
    14de:	14 fd       	sbrc	r17, 4
    14e0:	16 60       	ori	r17, 0x06	; 6
    14e2:	20 e1       	ldi	r18, 0x10	; 16
    14e4:	32 e0       	ldi	r19, 0x02	; 2
    14e6:	17 ff       	sbrs	r17, 7
    14e8:	08 c0       	rjmp	.+16     	; 0x14fa <vfprintf+0x2b6>
    14ea:	f5 01       	movw	r30, r10
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	44 e0       	ldi	r20, 0x04	; 4
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <vfprintf+0x2c6>
    14fa:	f5 01       	movw	r30, r10
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	bc 01       	movw	r22, r24
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	42 e0       	ldi	r20, 0x02	; 2
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	a4 0e       	add	r10, r20
    150c:	b5 1e       	adc	r11, r21
    150e:	a1 01       	movw	r20, r2
    1510:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__ultoa_invert>
    1514:	d8 2e       	mov	r13, r24
    1516:	d2 18       	sub	r13, r2
    1518:	8f e7       	ldi	r24, 0x7F	; 127
    151a:	f8 2e       	mov	r15, r24
    151c:	f1 22       	and	r15, r17
    151e:	f6 fe       	sbrs	r15, 6
    1520:	0b c0       	rjmp	.+22     	; 0x1538 <vfprintf+0x2f4>
    1522:	5e ef       	ldi	r21, 0xFE	; 254
    1524:	f5 22       	and	r15, r21
    1526:	d9 14       	cp	r13, r9
    1528:	38 f4       	brcc	.+14     	; 0x1538 <vfprintf+0x2f4>
    152a:	f4 fe       	sbrs	r15, 4
    152c:	07 c0       	rjmp	.+14     	; 0x153c <vfprintf+0x2f8>
    152e:	f2 fc       	sbrc	r15, 2
    1530:	05 c0       	rjmp	.+10     	; 0x153c <vfprintf+0x2f8>
    1532:	8f ee       	ldi	r24, 0xEF	; 239
    1534:	f8 22       	and	r15, r24
    1536:	02 c0       	rjmp	.+4      	; 0x153c <vfprintf+0x2f8>
    1538:	1d 2d       	mov	r17, r13
    153a:	01 c0       	rjmp	.+2      	; 0x153e <vfprintf+0x2fa>
    153c:	19 2d       	mov	r17, r9
    153e:	f4 fe       	sbrs	r15, 4
    1540:	0d c0       	rjmp	.+26     	; 0x155c <vfprintf+0x318>
    1542:	fe 01       	movw	r30, r28
    1544:	ed 0d       	add	r30, r13
    1546:	f1 1d       	adc	r31, r1
    1548:	80 81       	ld	r24, Z
    154a:	80 33       	cpi	r24, 0x30	; 48
    154c:	19 f4       	brne	.+6      	; 0x1554 <vfprintf+0x310>
    154e:	99 ee       	ldi	r25, 0xE9	; 233
    1550:	f9 22       	and	r15, r25
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <vfprintf+0x320>
    1554:	1f 5f       	subi	r17, 0xFF	; 255
    1556:	f2 fe       	sbrs	r15, 2
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <vfprintf+0x320>
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <vfprintf+0x31e>
    155c:	8f 2d       	mov	r24, r15
    155e:	86 78       	andi	r24, 0x86	; 134
    1560:	09 f0       	breq	.+2      	; 0x1564 <vfprintf+0x320>
    1562:	1f 5f       	subi	r17, 0xFF	; 255
    1564:	0f 2d       	mov	r16, r15
    1566:	f3 fc       	sbrc	r15, 3
    1568:	14 c0       	rjmp	.+40     	; 0x1592 <vfprintf+0x34e>
    156a:	f0 fe       	sbrs	r15, 0
    156c:	0f c0       	rjmp	.+30     	; 0x158c <vfprintf+0x348>
    156e:	1e 15       	cp	r17, r14
    1570:	10 f0       	brcs	.+4      	; 0x1576 <vfprintf+0x332>
    1572:	9d 2c       	mov	r9, r13
    1574:	0b c0       	rjmp	.+22     	; 0x158c <vfprintf+0x348>
    1576:	9d 2c       	mov	r9, r13
    1578:	9e 0c       	add	r9, r14
    157a:	91 1a       	sub	r9, r17
    157c:	1e 2d       	mov	r17, r14
    157e:	06 c0       	rjmp	.+12     	; 0x158c <vfprintf+0x348>
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	b3 01       	movw	r22, r6
    1586:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    158a:	1f 5f       	subi	r17, 0xFF	; 255
    158c:	1e 15       	cp	r17, r14
    158e:	c0 f3       	brcs	.-16     	; 0x1580 <vfprintf+0x33c>
    1590:	04 c0       	rjmp	.+8      	; 0x159a <vfprintf+0x356>
    1592:	1e 15       	cp	r17, r14
    1594:	10 f4       	brcc	.+4      	; 0x159a <vfprintf+0x356>
    1596:	e1 1a       	sub	r14, r17
    1598:	01 c0       	rjmp	.+2      	; 0x159c <vfprintf+0x358>
    159a:	ee 24       	eor	r14, r14
    159c:	04 ff       	sbrs	r16, 4
    159e:	0f c0       	rjmp	.+30     	; 0x15be <vfprintf+0x37a>
    15a0:	80 e3       	ldi	r24, 0x30	; 48
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	b3 01       	movw	r22, r6
    15a6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    15aa:	02 ff       	sbrs	r16, 2
    15ac:	1d c0       	rjmp	.+58     	; 0x15e8 <vfprintf+0x3a4>
    15ae:	01 fd       	sbrc	r16, 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <vfprintf+0x374>
    15b2:	88 e7       	ldi	r24, 0x78	; 120
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <vfprintf+0x390>
    15b8:	88 e5       	ldi	r24, 0x58	; 88
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0b c0       	rjmp	.+22     	; 0x15d4 <vfprintf+0x390>
    15be:	80 2f       	mov	r24, r16
    15c0:	86 78       	andi	r24, 0x86	; 134
    15c2:	91 f0       	breq	.+36     	; 0x15e8 <vfprintf+0x3a4>
    15c4:	01 ff       	sbrs	r16, 1
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x388>
    15c8:	8b e2       	ldi	r24, 0x2B	; 43
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <vfprintf+0x38a>
    15cc:	80 e2       	ldi	r24, 0x20	; 32
    15ce:	f7 fc       	sbrc	r15, 7
    15d0:	8d e2       	ldi	r24, 0x2D	; 45
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	b3 01       	movw	r22, r6
    15d6:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <vfprintf+0x3a4>
    15dc:	80 e3       	ldi	r24, 0x30	; 48
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	b3 01       	movw	r22, r6
    15e2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    15e6:	9a 94       	dec	r9
    15e8:	d9 14       	cp	r13, r9
    15ea:	c0 f3       	brcs	.-16     	; 0x15dc <vfprintf+0x398>
    15ec:	da 94       	dec	r13
    15ee:	f1 01       	movw	r30, r2
    15f0:	ed 0d       	add	r30, r13
    15f2:	f1 1d       	adc	r31, r1
    15f4:	80 81       	ld	r24, Z
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	b3 01       	movw	r22, r6
    15fa:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    15fe:	dd 20       	and	r13, r13
    1600:	a9 f7       	brne	.-22     	; 0x15ec <vfprintf+0x3a8>
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <vfprintf+0x3cc>
    1604:	80 e2       	ldi	r24, 0x20	; 32
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	b3 01       	movw	r22, r6
    160a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <fputc>
    160e:	ea 94       	dec	r14
    1610:	ee 20       	and	r14, r14
    1612:	c1 f7       	brne	.-16     	; 0x1604 <vfprintf+0x3c0>
    1614:	43 ce       	rjmp	.-890    	; 0x129c <vfprintf+0x58>
    1616:	f3 01       	movw	r30, r6
    1618:	66 81       	ldd	r22, Z+6	; 0x06
    161a:	77 81       	ldd	r23, Z+7	; 0x07
    161c:	cb 01       	movw	r24, r22
    161e:	2b 96       	adiw	r28, 0x0b	; 11
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	3f 90       	pop	r3
    164c:	2f 90       	pop	r2
    164e:	08 95       	ret

00001650 <putval>:
    1650:	fc 01       	movw	r30, r24
    1652:	20 fd       	sbrc	r18, 0
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <putval+0x16>
    1656:	23 fd       	sbrc	r18, 3
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <putval+0x14>
    165a:	22 ff       	sbrs	r18, 2
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <putval+0x12>
    165e:	73 83       	std	Z+3, r23	; 0x03
    1660:	62 83       	std	Z+2, r22	; 0x02
    1662:	51 83       	std	Z+1, r21	; 0x01
    1664:	40 83       	st	Z, r20
    1666:	08 95       	ret

00001668 <mulacc>:
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	44 ff       	sbrs	r20, 4
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <mulacc+0x10>
    1674:	33 e0       	ldi	r19, 0x03	; 3
    1676:	11 c0       	rjmp	.+34     	; 0x169a <mulacc+0x32>
    1678:	46 ff       	sbrs	r20, 6
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <mulacc+0x18>
    167c:	34 e0       	ldi	r19, 0x04	; 4
    167e:	0d c0       	rjmp	.+26     	; 0x169a <mulacc+0x32>
    1680:	db 01       	movw	r26, r22
    1682:	fc 01       	movw	r30, r24
    1684:	aa 0f       	add	r26, r26
    1686:	bb 1f       	adc	r27, r27
    1688:	ee 1f       	adc	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	10 94       	com	r1
    168e:	d1 f7       	brne	.-12     	; 0x1684 <mulacc+0x1c>
    1690:	6a 0f       	add	r22, r26
    1692:	7b 1f       	adc	r23, r27
    1694:	8e 1f       	adc	r24, r30
    1696:	9f 1f       	adc	r25, r31
    1698:	31 e0       	ldi	r19, 0x01	; 1
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	31 50       	subi	r19, 0x01	; 1
    16a4:	d1 f7       	brne	.-12     	; 0x169a <mulacc+0x32>
    16a6:	7b 01       	movw	r14, r22
    16a8:	8c 01       	movw	r16, r24
    16aa:	e2 0e       	add	r14, r18
    16ac:	f1 1c       	adc	r15, r1
    16ae:	01 1d       	adc	r16, r1
    16b0:	11 1d       	adc	r17, r1
    16b2:	a8 01       	movw	r20, r16
    16b4:	97 01       	movw	r18, r14
    16b6:	b7 01       	movw	r22, r14
    16b8:	ca 01       	movw	r24, r20
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	08 95       	ret

000016c4 <skip_spaces>:
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	8c 01       	movw	r16, r24
    16ce:	c8 01       	movw	r24, r16
    16d0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    16d4:	ec 01       	movw	r28, r24
    16d6:	97 fd       	sbrc	r25, 7
    16d8:	08 c0       	rjmp	.+16     	; 0x16ea <skip_spaces+0x26>
    16da:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <isspace>
    16de:	89 2b       	or	r24, r25
    16e0:	b1 f7       	brne	.-20     	; 0x16ce <skip_spaces+0xa>
    16e2:	ce 01       	movw	r24, r28
    16e4:	b8 01       	movw	r22, r16
    16e6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <ungetc>
    16ea:	ce 01       	movw	r24, r28
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <conv_int>:
    16f6:	af 92       	push	r10
    16f8:	bf 92       	push	r11
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
    170c:	c6 2e       	mov	r12, r22
    170e:	5a 01       	movw	r10, r20
    1710:	12 2f       	mov	r17, r18
    1712:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1716:	ac 01       	movw	r20, r24
    1718:	8b 32       	cpi	r24, 0x2B	; 43
    171a:	19 f0       	breq	.+6      	; 0x1722 <conv_int+0x2c>
    171c:	8d 32       	cpi	r24, 0x2D	; 45
    171e:	51 f4       	brne	.+20     	; 0x1734 <conv_int+0x3e>
    1720:	10 68       	ori	r17, 0x80	; 128
    1722:	ca 94       	dec	r12
    1724:	09 f4       	brne	.+2      	; 0x1728 <conv_int+0x32>
    1726:	6d c0       	rjmp	.+218    	; 0x1802 <conv_int+0x10c>
    1728:	ce 01       	movw	r24, r28
    172a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    172e:	ac 01       	movw	r20, r24
    1730:	97 fd       	sbrc	r25, 7
    1732:	67 c0       	rjmp	.+206    	; 0x1802 <conv_int+0x10c>
    1734:	6d ef       	ldi	r22, 0xFD	; 253
    1736:	d6 2e       	mov	r13, r22
    1738:	d1 22       	and	r13, r17
    173a:	8d 2d       	mov	r24, r13
    173c:	80 73       	andi	r24, 0x30	; 48
    173e:	01 f5       	brne	.+64     	; 0x1780 <conv_int+0x8a>
    1740:	40 33       	cpi	r20, 0x30	; 48
    1742:	f1 f4       	brne	.+60     	; 0x1780 <conv_int+0x8a>
    1744:	ca 94       	dec	r12
    1746:	09 f4       	brne	.+2      	; 0x174a <conv_int+0x54>
    1748:	47 c0       	rjmp	.+142    	; 0x17d8 <conv_int+0xe2>
    174a:	ce 01       	movw	r24, r28
    174c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1750:	ac 01       	movw	r20, r24
    1752:	97 fd       	sbrc	r25, 7
    1754:	41 c0       	rjmp	.+130    	; 0x17d8 <conv_int+0xe2>
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	d8 2a       	or	r13, r24
    175a:	48 37       	cpi	r20, 0x78	; 120
    175c:	11 f0       	breq	.+4      	; 0x1762 <conv_int+0x6c>
    175e:	48 35       	cpi	r20, 0x58	; 88
    1760:	59 f4       	brne	.+22     	; 0x1778 <conv_int+0x82>
    1762:	80 e4       	ldi	r24, 0x40	; 64
    1764:	d8 2a       	or	r13, r24
    1766:	ca 94       	dec	r12
    1768:	b9 f1       	breq	.+110    	; 0x17d8 <conv_int+0xe2>
    176a:	ce 01       	movw	r24, r28
    176c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1770:	ac 01       	movw	r20, r24
    1772:	99 23       	and	r25, r25
    1774:	2c f4       	brge	.+10     	; 0x1780 <conv_int+0x8a>
    1776:	30 c0       	rjmp	.+96     	; 0x17d8 <conv_int+0xe2>
    1778:	d6 fc       	sbrc	r13, 6
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <conv_int+0x8a>
    177c:	80 e1       	ldi	r24, 0x10	; 16
    177e:	d8 2a       	or	r13, r24
    1780:	ee 24       	eor	r14, r14
    1782:	ff 24       	eor	r15, r15
    1784:	87 01       	movw	r16, r14
    1786:	24 2f       	mov	r18, r20
    1788:	20 53       	subi	r18, 0x30	; 48
    178a:	28 30       	cpi	r18, 0x08	; 8
    178c:	88 f0       	brcs	.+34     	; 0x17b0 <conv_int+0xba>
    178e:	d4 fc       	sbrc	r13, 4
    1790:	09 c0       	rjmp	.+18     	; 0x17a4 <conv_int+0xae>
    1792:	2a 30       	cpi	r18, 0x0A	; 10
    1794:	68 f0       	brcs	.+26     	; 0x17b0 <conv_int+0xba>
    1796:	d6 fe       	sbrs	r13, 6
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <conv_int+0xae>
    179a:	2f 7d       	andi	r18, 0xDF	; 223
    179c:	82 2f       	mov	r24, r18
    179e:	81 51       	subi	r24, 0x11	; 17
    17a0:	86 30       	cpi	r24, 0x06	; 6
    17a2:	28 f0       	brcs	.+10     	; 0x17ae <conv_int+0xb8>
    17a4:	ca 01       	movw	r24, r20
    17a6:	be 01       	movw	r22, r28
    17a8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <ungetc>
    17ac:	12 c0       	rjmp	.+36     	; 0x17d2 <conv_int+0xdc>
    17ae:	27 50       	subi	r18, 0x07	; 7
    17b0:	c8 01       	movw	r24, r16
    17b2:	b7 01       	movw	r22, r14
    17b4:	4d 2d       	mov	r20, r13
    17b6:	0e 94 34 0b 	call	0x1668	; 0x1668 <mulacc>
    17ba:	7b 01       	movw	r14, r22
    17bc:	8c 01       	movw	r16, r24
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	d8 2a       	or	r13, r24
    17c2:	ca 94       	dec	r12
    17c4:	61 f0       	breq	.+24     	; 0x17de <conv_int+0xe8>
    17c6:	ce 01       	movw	r24, r28
    17c8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    17cc:	ac 01       	movw	r20, r24
    17ce:	97 ff       	sbrs	r25, 7
    17d0:	da cf       	rjmp	.-76     	; 0x1786 <conv_int+0x90>
    17d2:	d1 fc       	sbrc	r13, 1
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <conv_int+0xe8>
    17d6:	15 c0       	rjmp	.+42     	; 0x1802 <conv_int+0x10c>
    17d8:	ee 24       	eor	r14, r14
    17da:	ff 24       	eor	r15, r15
    17dc:	87 01       	movw	r16, r14
    17de:	d7 fe       	sbrs	r13, 7
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <conv_int+0xfc>
    17e2:	10 95       	com	r17
    17e4:	00 95       	com	r16
    17e6:	f0 94       	com	r15
    17e8:	e0 94       	com	r14
    17ea:	e1 1c       	adc	r14, r1
    17ec:	f1 1c       	adc	r15, r1
    17ee:	01 1d       	adc	r16, r1
    17f0:	11 1d       	adc	r17, r1
    17f2:	c5 01       	movw	r24, r10
    17f4:	b8 01       	movw	r22, r16
    17f6:	a7 01       	movw	r20, r14
    17f8:	2d 2d       	mov	r18, r13
    17fa:	0e 94 28 0b 	call	0x1650	; 0x1650 <putval>
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <conv_int+0x10e>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	08 95       	ret

0000181a <conv_brk>:
    181a:	6f 92       	push	r6
    181c:	7f 92       	push	r7
    181e:	8f 92       	push	r8
    1820:	9f 92       	push	r9
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	a0 97       	sbiw	r28, 0x20	; 32
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	6c 01       	movw	r12, r24
    1848:	a6 2e       	mov	r10, r22
    184a:	8a 01       	movw	r16, r20
    184c:	79 01       	movw	r14, r18
    184e:	fe 01       	movw	r30, r28
    1850:	31 96       	adiw	r30, 0x01	; 1
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	df 01       	movw	r26, r30
    1856:	1d 92       	st	X+, r1
    1858:	8a 95       	dec	r24
    185a:	e9 f7       	brne	.-6      	; 0x1856 <conv_brk+0x3c>
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	4f 01       	movw	r8, r30
    1868:	a1 e0       	ldi	r26, 0x01	; 1
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	f6 01       	movw	r30, r12
    186e:	83 81       	ldd	r24, Z+3	; 0x03
    1870:	f7 01       	movw	r30, r14
    1872:	83 fd       	sbrc	r24, 3
    1874:	25 91       	lpm	r18, Z+
    1876:	83 ff       	sbrs	r24, 3
    1878:	21 91       	ld	r18, Z+
    187a:	7f 01       	movw	r14, r30
    187c:	22 23       	and	r18, r18
    187e:	09 f4       	brne	.+2      	; 0x1882 <conv_brk+0x68>
    1880:	7e c0       	rjmp	.+252    	; 0x197e <conv_brk+0x164>
    1882:	2e 35       	cpi	r18, 0x5E	; 94
    1884:	19 f4       	brne	.+6      	; 0x188c <conv_brk+0x72>
    1886:	41 15       	cp	r20, r1
    1888:	51 05       	cpc	r21, r1
    188a:	69 f1       	breq	.+90     	; 0x18e6 <conv_brk+0xcc>
    188c:	87 2f       	mov	r24, r23
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	84 17       	cp	r24, r20
    1892:	95 07       	cpc	r25, r21
    1894:	44 f4       	brge	.+16     	; 0x18a6 <conv_brk+0x8c>
    1896:	2d 35       	cpi	r18, 0x5D	; 93
    1898:	51 f1       	breq	.+84     	; 0x18ee <conv_brk+0xd4>
    189a:	2d 32       	cpi	r18, 0x2D	; 45
    189c:	21 f4       	brne	.+8      	; 0x18a6 <conv_brk+0x8c>
    189e:	33 23       	and	r19, r19
    18a0:	29 f4       	brne	.+10     	; 0x18ac <conv_brk+0x92>
    18a2:	31 e0       	ldi	r19, 0x01	; 1
    18a4:	21 c0       	rjmp	.+66     	; 0x18e8 <conv_brk+0xce>
    18a6:	33 23       	and	r19, r19
    18a8:	09 f4       	brne	.+2      	; 0x18ac <conv_brk+0x92>
    18aa:	62 2f       	mov	r22, r18
    18ac:	32 2f       	mov	r19, r18
    18ae:	83 2f       	mov	r24, r19
    18b0:	86 95       	lsr	r24
    18b2:	86 95       	lsr	r24
    18b4:	86 95       	lsr	r24
    18b6:	f4 01       	movw	r30, r8
    18b8:	e8 0f       	add	r30, r24
    18ba:	f1 1d       	adc	r31, r1
    18bc:	83 2f       	mov	r24, r19
    18be:	87 70       	andi	r24, 0x07	; 7
    18c0:	3d 01       	movw	r6, r26
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <conv_brk+0xae>
    18c4:	66 0c       	add	r6, r6
    18c6:	77 1c       	adc	r7, r7
    18c8:	8a 95       	dec	r24
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <conv_brk+0xaa>
    18cc:	20 81       	ld	r18, Z
    18ce:	26 29       	or	r18, r6
    18d0:	20 83       	st	Z, r18
    18d2:	36 17       	cp	r19, r22
    18d4:	11 f4       	brne	.+4      	; 0x18da <conv_brk+0xc0>
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <conv_brk+0xce>
    18da:	36 17       	cp	r19, r22
    18dc:	10 f4       	brcc	.+4      	; 0x18e2 <conv_brk+0xc8>
    18de:	3f 5f       	subi	r19, 0xFF	; 255
    18e0:	e6 cf       	rjmp	.-52     	; 0x18ae <conv_brk+0x94>
    18e2:	31 50       	subi	r19, 0x01	; 1
    18e4:	e4 cf       	rjmp	.-56     	; 0x18ae <conv_brk+0x94>
    18e6:	71 e0       	ldi	r23, 0x01	; 1
    18e8:	4f 5f       	subi	r20, 0xFF	; 255
    18ea:	5f 4f       	sbci	r21, 0xFF	; 255
    18ec:	bf cf       	rjmp	.-130    	; 0x186c <conv_brk+0x52>
    18ee:	33 23       	and	r19, r19
    18f0:	19 f0       	breq	.+6      	; 0x18f8 <conv_brk+0xde>
    18f2:	8e 81       	ldd	r24, Y+6	; 0x06
    18f4:	80 62       	ori	r24, 0x20	; 32
    18f6:	8e 83       	std	Y+6, r24	; 0x06
    18f8:	77 23       	and	r23, r23
    18fa:	59 f0       	breq	.+22     	; 0x1912 <conv_brk+0xf8>
    18fc:	fe 01       	movw	r30, r28
    18fe:	31 96       	adiw	r30, 0x01	; 1
    1900:	9e 01       	movw	r18, r28
    1902:	2f 5d       	subi	r18, 0xDF	; 223
    1904:	3f 4f       	sbci	r19, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	80 95       	com	r24
    190a:	81 93       	st	Z+, r24
    190c:	e2 17       	cp	r30, r18
    190e:	f3 07       	cpc	r31, r19
    1910:	d1 f7       	brne	.-12     	; 0x1906 <conv_brk+0xec>
    1912:	bb 24       	eor	r11, r11
    1914:	b3 94       	inc	r11
    1916:	4e 01       	movw	r8, r28
    1918:	08 94       	sec
    191a:	81 1c       	adc	r8, r1
    191c:	91 1c       	adc	r9, r1
    191e:	c6 01       	movw	r24, r12
    1920:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1924:	ac 01       	movw	r20, r24
    1926:	97 fd       	sbrc	r25, 7
    1928:	22 c0       	rjmp	.+68     	; 0x196e <conv_brk+0x154>
    192a:	86 95       	lsr	r24
    192c:	86 95       	lsr	r24
    192e:	86 95       	lsr	r24
    1930:	f4 01       	movw	r30, r8
    1932:	e8 0f       	add	r30, r24
    1934:	f1 1d       	adc	r31, r1
    1936:	80 81       	ld	r24, Z
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9a 01       	movw	r18, r20
    193c:	27 70       	andi	r18, 0x07	; 7
    193e:	30 70       	andi	r19, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <conv_brk+0x12c>
    1942:	95 95       	asr	r25
    1944:	87 95       	ror	r24
    1946:	2a 95       	dec	r18
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <conv_brk+0x128>
    194a:	80 fd       	sbrc	r24, 0
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <conv_brk+0x13e>
    194e:	ca 01       	movw	r24, r20
    1950:	b6 01       	movw	r22, r12
    1952:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <ungetc>
    1956:	0b c0       	rjmp	.+22     	; 0x196e <conv_brk+0x154>
    1958:	01 15       	cp	r16, r1
    195a:	11 05       	cpc	r17, r1
    195c:	19 f0       	breq	.+6      	; 0x1964 <conv_brk+0x14a>
    195e:	d8 01       	movw	r26, r16
    1960:	4d 93       	st	X+, r20
    1962:	8d 01       	movw	r16, r26
    1964:	aa 94       	dec	r10
    1966:	bb 24       	eor	r11, r11
    1968:	aa 20       	and	r10, r10
    196a:	c9 f6       	brne	.-78     	; 0x191e <conv_brk+0x104>
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <conv_brk+0x158>
    196e:	bb 20       	and	r11, r11
    1970:	31 f4       	brne	.+12     	; 0x197e <conv_brk+0x164>
    1972:	01 15       	cp	r16, r1
    1974:	11 05       	cpc	r17, r1
    1976:	29 f0       	breq	.+10     	; 0x1982 <conv_brk+0x168>
    1978:	f8 01       	movw	r30, r16
    197a:	10 82       	st	Z, r1
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <conv_brk+0x168>
    197e:	ee 24       	eor	r14, r14
    1980:	ff 24       	eor	r15, r15
    1982:	c7 01       	movw	r24, r14
    1984:	a0 96       	adiw	r28, 0x20	; 32
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	9f 90       	pop	r9
    19a6:	8f 90       	pop	r8
    19a8:	7f 90       	pop	r7
    19aa:	6f 90       	pop	r6
    19ac:	08 95       	ret

000019ae <vfscanf>:
    19ae:	6f 92       	push	r6
    19b0:	7f 92       	push	r7
    19b2:	8f 92       	push	r8
    19b4:	9f 92       	push	r9
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	5c 01       	movw	r10, r24
    19cc:	6b 01       	movw	r12, r22
    19ce:	3a 01       	movw	r6, r20
    19d0:	fc 01       	movw	r30, r24
    19d2:	17 82       	std	Z+7, r1	; 0x07
    19d4:	16 82       	std	Z+6, r1	; 0x06
    19d6:	88 24       	eor	r8, r8
    19d8:	ea c0       	rjmp	.+468    	; 0x1bae <vfscanf+0x200>
    19da:	81 2f       	mov	r24, r17
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <isspace>
    19e2:	89 2b       	or	r24, r25
    19e4:	21 f0       	breq	.+8      	; 0x19ee <vfscanf+0x40>
    19e6:	c5 01       	movw	r24, r10
    19e8:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <skip_spaces>
    19ec:	e0 c0       	rjmp	.+448    	; 0x1bae <vfscanf+0x200>
    19ee:	15 32       	cpi	r17, 0x25	; 37
    19f0:	49 f4       	brne	.+18     	; 0x1a04 <vfscanf+0x56>
    19f2:	f6 01       	movw	r30, r12
    19f4:	f3 fc       	sbrc	r15, 3
    19f6:	65 91       	lpm	r22, Z+
    19f8:	f3 fe       	sbrs	r15, 3
    19fa:	61 91       	ld	r22, Z+
    19fc:	6f 01       	movw	r12, r30
    19fe:	65 32       	cpi	r22, 0x25	; 37
    1a00:	69 f4       	brne	.+26     	; 0x1a1c <vfscanf+0x6e>
    1a02:	15 e2       	ldi	r17, 0x25	; 37
    1a04:	c5 01       	movw	r24, r10
    1a06:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1a0a:	97 fd       	sbrc	r25, 7
    1a0c:	dc c0       	rjmp	.+440    	; 0x1bc6 <vfscanf+0x218>
    1a0e:	18 17       	cp	r17, r24
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <vfscanf+0x66>
    1a12:	cd c0       	rjmp	.+410    	; 0x1bae <vfscanf+0x200>
    1a14:	b5 01       	movw	r22, r10
    1a16:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <ungetc>
    1a1a:	da c0       	rjmp	.+436    	; 0x1bd0 <vfscanf+0x222>
    1a1c:	6a 32       	cpi	r22, 0x2A	; 42
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <vfscanf+0x78>
    1a20:	16 2f       	mov	r17, r22
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	06 c0       	rjmp	.+12     	; 0x1a32 <vfscanf+0x84>
    1a26:	f3 fc       	sbrc	r15, 3
    1a28:	15 91       	lpm	r17, Z+
    1a2a:	f3 fe       	sbrs	r15, 3
    1a2c:	11 91       	ld	r17, Z+
    1a2e:	6f 01       	movw	r12, r30
    1a30:	01 e0       	ldi	r16, 0x01	; 1
    1a32:	99 24       	eor	r9, r9
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <vfscanf+0xa6>
    1a36:	02 60       	ori	r16, 0x02	; 2
    1a38:	69 2d       	mov	r22, r9
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	40 e2       	ldi	r20, 0x20	; 32
    1a42:	0e 94 34 0b 	call	0x1668	; 0x1668 <mulacc>
    1a46:	96 2e       	mov	r9, r22
    1a48:	f6 01       	movw	r30, r12
    1a4a:	f3 fc       	sbrc	r15, 3
    1a4c:	15 91       	lpm	r17, Z+
    1a4e:	f3 fe       	sbrs	r15, 3
    1a50:	11 91       	ld	r17, Z+
    1a52:	6f 01       	movw	r12, r30
    1a54:	21 2f       	mov	r18, r17
    1a56:	20 53       	subi	r18, 0x30	; 48
    1a58:	2a 30       	cpi	r18, 0x0A	; 10
    1a5a:	68 f3       	brcs	.-38     	; 0x1a36 <vfscanf+0x88>
    1a5c:	01 fd       	sbrc	r16, 1
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <vfscanf+0xb8>
    1a60:	99 24       	eor	r9, r9
    1a62:	9a 94       	dec	r9
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <vfscanf+0xbe>
    1a66:	99 20       	and	r9, r9
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <vfscanf+0xbe>
    1a6a:	b2 c0       	rjmp	.+356    	; 0x1bd0 <vfscanf+0x222>
    1a6c:	18 36       	cpi	r17, 0x68	; 104
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <vfscanf+0xca>
    1a70:	1c 36       	cpi	r17, 0x6C	; 108
    1a72:	99 f4       	brne	.+38     	; 0x1a9a <vfscanf+0xec>
    1a74:	f6 01       	movw	r30, r12
    1a76:	0b c0       	rjmp	.+22     	; 0x1a8e <vfscanf+0xe0>
    1a78:	f6 01       	movw	r30, r12
    1a7a:	f3 fc       	sbrc	r15, 3
    1a7c:	65 91       	lpm	r22, Z+
    1a7e:	f3 fe       	sbrs	r15, 3
    1a80:	61 91       	ld	r22, Z+
    1a82:	68 36       	cpi	r22, 0x68	; 104
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <vfscanf+0xde>
    1a86:	6f 01       	movw	r12, r30
    1a88:	16 2f       	mov	r17, r22
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <vfscanf+0xec>
    1a8c:	08 60       	ori	r16, 0x08	; 8
    1a8e:	04 60       	ori	r16, 0x04	; 4
    1a90:	f3 fc       	sbrc	r15, 3
    1a92:	15 91       	lpm	r17, Z+
    1a94:	f3 fe       	sbrs	r15, 3
    1a96:	11 91       	ld	r17, Z+
    1a98:	6f 01       	movw	r12, r30
    1a9a:	11 23       	and	r17, r17
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <vfscanf+0xf2>
    1a9e:	98 c0       	rjmp	.+304    	; 0x1bd0 <vfscanf+0x222>
    1aa0:	80 ef       	ldi	r24, 0xF0	; 240
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	61 2f       	mov	r22, r17
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <strchr_P>
    1aac:	89 2b       	or	r24, r25
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <vfscanf+0x104>
    1ab0:	8f c0       	rjmp	.+286    	; 0x1bd0 <vfscanf+0x222>
    1ab2:	80 2f       	mov	r24, r16
    1ab4:	00 ff       	sbrs	r16, 0
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <vfscanf+0x110>
    1ab8:	ee 24       	eor	r14, r14
    1aba:	ff 24       	eor	r15, r15
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <vfscanf+0x11e>
    1abe:	f3 01       	movw	r30, r6
    1ac0:	e0 80       	ld	r14, Z
    1ac2:	f1 80       	ldd	r15, Z+1	; 0x01
    1ac4:	22 e0       	ldi	r18, 0x02	; 2
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	62 0e       	add	r6, r18
    1aca:	73 1e       	adc	r7, r19
    1acc:	1e 36       	cpi	r17, 0x6E	; 110
    1ace:	51 f4       	brne	.+20     	; 0x1ae4 <vfscanf+0x136>
    1ad0:	f5 01       	movw	r30, r10
    1ad2:	46 81       	ldd	r20, Z+6	; 0x06
    1ad4:	57 81       	ldd	r21, Z+7	; 0x07
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	c7 01       	movw	r24, r14
    1adc:	20 2f       	mov	r18, r16
    1ade:	0e 94 28 0b 	call	0x1650	; 0x1650 <putval>
    1ae2:	65 c0       	rjmp	.+202    	; 0x1bae <vfscanf+0x200>
    1ae4:	13 36       	cpi	r17, 0x63	; 99
    1ae6:	91 f4       	brne	.+36     	; 0x1b0c <vfscanf+0x15e>
    1ae8:	81 fd       	sbrc	r24, 1
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <vfscanf+0x142>
    1aec:	99 24       	eor	r9, r9
    1aee:	93 94       	inc	r9
    1af0:	c5 01       	movw	r24, r10
    1af2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1af6:	97 fd       	sbrc	r25, 7
    1af8:	66 c0       	rjmp	.+204    	; 0x1bc6 <vfscanf+0x218>
    1afa:	e1 14       	cp	r14, r1
    1afc:	f1 04       	cpc	r15, r1
    1afe:	19 f0       	breq	.+6      	; 0x1b06 <vfscanf+0x158>
    1b00:	f7 01       	movw	r30, r14
    1b02:	81 93       	st	Z+, r24
    1b04:	7f 01       	movw	r14, r30
    1b06:	9a 94       	dec	r9
    1b08:	99 f7       	brne	.-26     	; 0x1af0 <vfscanf+0x142>
    1b0a:	4f c0       	rjmp	.+158    	; 0x1baa <vfscanf+0x1fc>
    1b0c:	1b 35       	cpi	r17, 0x5B	; 91
    1b0e:	59 f4       	brne	.+22     	; 0x1b26 <vfscanf+0x178>
    1b10:	c5 01       	movw	r24, r10
    1b12:	69 2d       	mov	r22, r9
    1b14:	a7 01       	movw	r20, r14
    1b16:	96 01       	movw	r18, r12
    1b18:	0e 94 0d 0c 	call	0x181a	; 0x181a <conv_brk>
    1b1c:	6c 01       	movw	r12, r24
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <vfscanf+0x176>
    1b22:	43 c0       	rjmp	.+134    	; 0x1baa <vfscanf+0x1fc>
    1b24:	3d c0       	rjmp	.+122    	; 0x1ba0 <vfscanf+0x1f2>
    1b26:	c5 01       	movw	r24, r10
    1b28:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <skip_spaces>
    1b2c:	97 fd       	sbrc	r25, 7
    1b2e:	4b c0       	rjmp	.+150    	; 0x1bc6 <vfscanf+0x218>
    1b30:	1f 36       	cpi	r17, 0x6F	; 111
    1b32:	59 f1       	breq	.+86     	; 0x1b8a <vfscanf+0x1dc>
    1b34:	10 37       	cpi	r17, 0x70	; 112
    1b36:	28 f4       	brcc	.+10     	; 0x1b42 <vfscanf+0x194>
    1b38:	14 36       	cpi	r17, 0x64	; 100
    1b3a:	29 f1       	breq	.+74     	; 0x1b86 <vfscanf+0x1d8>
    1b3c:	19 36       	cpi	r17, 0x69	; 105
    1b3e:	39 f5       	brne	.+78     	; 0x1b8e <vfscanf+0x1e0>
    1b40:	27 c0       	rjmp	.+78     	; 0x1b90 <vfscanf+0x1e2>
    1b42:	13 37       	cpi	r17, 0x73	; 115
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <vfscanf+0x19e>
    1b46:	15 37       	cpi	r17, 0x75	; 117
    1b48:	11 f5       	brne	.+68     	; 0x1b8e <vfscanf+0x1e0>
    1b4a:	1d c0       	rjmp	.+58     	; 0x1b86 <vfscanf+0x1d8>
    1b4c:	c5 01       	movw	r24, r10
    1b4e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <fgetc>
    1b52:	ec 01       	movw	r28, r24
    1b54:	97 fd       	sbrc	r25, 7
    1b56:	11 c0       	rjmp	.+34     	; 0x1b7a <vfscanf+0x1cc>
    1b58:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <isspace>
    1b5c:	89 2b       	or	r24, r25
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <vfscanf+0x1bc>
    1b60:	ce 01       	movw	r24, r28
    1b62:	b5 01       	movw	r22, r10
    1b64:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <ungetc>
    1b68:	08 c0       	rjmp	.+16     	; 0x1b7a <vfscanf+0x1cc>
    1b6a:	e1 14       	cp	r14, r1
    1b6c:	f1 04       	cpc	r15, r1
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <vfscanf+0x1c8>
    1b70:	f7 01       	movw	r30, r14
    1b72:	c1 93       	st	Z+, r28
    1b74:	7f 01       	movw	r14, r30
    1b76:	9a 94       	dec	r9
    1b78:	49 f7       	brne	.-46     	; 0x1b4c <vfscanf+0x19e>
    1b7a:	e1 14       	cp	r14, r1
    1b7c:	f1 04       	cpc	r15, r1
    1b7e:	a9 f0       	breq	.+42     	; 0x1baa <vfscanf+0x1fc>
    1b80:	f7 01       	movw	r30, r14
    1b82:	10 82       	st	Z, r1
    1b84:	12 c0       	rjmp	.+36     	; 0x1baa <vfscanf+0x1fc>
    1b86:	00 62       	ori	r16, 0x20	; 32
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <vfscanf+0x1e2>
    1b8a:	00 61       	ori	r16, 0x10	; 16
    1b8c:	01 c0       	rjmp	.+2      	; 0x1b90 <vfscanf+0x1e2>
    1b8e:	00 64       	ori	r16, 0x40	; 64
    1b90:	c5 01       	movw	r24, r10
    1b92:	69 2d       	mov	r22, r9
    1b94:	a7 01       	movw	r20, r14
    1b96:	20 2f       	mov	r18, r16
    1b98:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <conv_int>
    1b9c:	88 23       	and	r24, r24
    1b9e:	29 f4       	brne	.+10     	; 0x1baa <vfscanf+0x1fc>
    1ba0:	f5 01       	movw	r30, r10
    1ba2:	83 81       	ldd	r24, Z+3	; 0x03
    1ba4:	80 73       	andi	r24, 0x30	; 48
    1ba6:	79 f4       	brne	.+30     	; 0x1bc6 <vfscanf+0x218>
    1ba8:	13 c0       	rjmp	.+38     	; 0x1bd0 <vfscanf+0x222>
    1baa:	00 ff       	sbrs	r16, 0
    1bac:	83 94       	inc	r8
    1bae:	f5 01       	movw	r30, r10
    1bb0:	f3 80       	ldd	r15, Z+3	; 0x03
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	f3 fc       	sbrc	r15, 3
    1bb6:	15 91       	lpm	r17, Z+
    1bb8:	f3 fe       	sbrs	r15, 3
    1bba:	11 91       	ld	r17, Z+
    1bbc:	6f 01       	movw	r12, r30
    1bbe:	11 23       	and	r17, r17
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <vfscanf+0x216>
    1bc2:	0b cf       	rjmp	.-490    	; 0x19da <vfscanf+0x2c>
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <vfscanf+0x222>
    1bc6:	88 20       	and	r8, r8
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <vfscanf+0x222>
    1bca:	2f ef       	ldi	r18, 0xFF	; 255
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <vfscanf+0x226>
    1bd0:	28 2d       	mov	r18, r8
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	08 95       	ret

00001bf4 <isspace>:
    1bf4:	91 11       	cpse	r25, r1
    1bf6:	0d c1       	rjmp	.+538    	; 0x1e12 <__ctype_isfalse>
    1bf8:	80 32       	cpi	r24, 0x20	; 32
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <isspace+0xe>
    1bfc:	89 50       	subi	r24, 0x09	; 9
    1bfe:	85 50       	subi	r24, 0x05	; 5
    1c00:	d0 f7       	brcc	.-12     	; 0x1bf6 <isspace+0x2>
    1c02:	08 95       	ret

00001c04 <strchr_P>:
    1c04:	fc 01       	movw	r30, r24
    1c06:	05 90       	lpm	r0, Z+
    1c08:	06 16       	cp	r0, r22
    1c0a:	21 f0       	breq	.+8      	; 0x1c14 <strchr_P+0x10>
    1c0c:	00 20       	and	r0, r0
    1c0e:	d9 f7       	brne	.-10     	; 0x1c06 <strchr_P+0x2>
    1c10:	c0 01       	movw	r24, r0
    1c12:	08 95       	ret
    1c14:	31 97       	sbiw	r30, 0x01	; 1
    1c16:	cf 01       	movw	r24, r30
    1c18:	08 95       	ret

00001c1a <strnlen_P>:
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	05 90       	lpm	r0, Z+
    1c1e:	61 50       	subi	r22, 0x01	; 1
    1c20:	70 40       	sbci	r23, 0x00	; 0
    1c22:	01 10       	cpse	r0, r1
    1c24:	d8 f7       	brcc	.-10     	; 0x1c1c <strnlen_P+0x2>
    1c26:	80 95       	com	r24
    1c28:	90 95       	com	r25
    1c2a:	8e 0f       	add	r24, r30
    1c2c:	9f 1f       	adc	r25, r31
    1c2e:	08 95       	ret

00001c30 <strnlen>:
    1c30:	fc 01       	movw	r30, r24
    1c32:	61 50       	subi	r22, 0x01	; 1
    1c34:	70 40       	sbci	r23, 0x00	; 0
    1c36:	01 90       	ld	r0, Z+
    1c38:	01 10       	cpse	r0, r1
    1c3a:	d8 f7       	brcc	.-10     	; 0x1c32 <strnlen+0x2>
    1c3c:	80 95       	com	r24
    1c3e:	90 95       	com	r25
    1c40:	8e 0f       	add	r24, r30
    1c42:	9f 1f       	adc	r25, r31
    1c44:	08 95       	ret

00001c46 <fgetc>:
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	4b 81       	ldd	r20, Y+3	; 0x03
    1c4e:	40 ff       	sbrs	r20, 0
    1c50:	1a c0       	rjmp	.+52     	; 0x1c86 <fgetc+0x40>
    1c52:	46 ff       	sbrs	r20, 6
    1c54:	0a c0       	rjmp	.+20     	; 0x1c6a <fgetc+0x24>
    1c56:	4f 7b       	andi	r20, 0xBF	; 191
    1c58:	4b 83       	std	Y+3, r20	; 0x03
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	9f 83       	std	Y+7, r25	; 0x07
    1c62:	8e 83       	std	Y+6, r24	; 0x06
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	2b c0       	rjmp	.+86     	; 0x1cc0 <fgetc+0x7a>
    1c6a:	42 ff       	sbrs	r20, 2
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <fgetc+0x4e>
    1c6e:	e8 81       	ld	r30, Y
    1c70:	f9 81       	ldd	r31, Y+1	; 0x01
    1c72:	80 81       	ld	r24, Z
    1c74:	28 2f       	mov	r18, r24
    1c76:	33 27       	eor	r19, r19
    1c78:	27 fd       	sbrc	r18, 7
    1c7a:	30 95       	com	r19
    1c7c:	21 15       	cp	r18, r1
    1c7e:	31 05       	cpc	r19, r1
    1c80:	29 f4       	brne	.+10     	; 0x1c8c <fgetc+0x46>
    1c82:	40 62       	ori	r20, 0x20	; 32
    1c84:	4b 83       	std	Y+3, r20	; 0x03
    1c86:	2f ef       	ldi	r18, 0xFF	; 255
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	1b c0       	rjmp	.+54     	; 0x1cc2 <fgetc+0x7c>
    1c8c:	31 96       	adiw	r30, 0x01	; 1
    1c8e:	f9 83       	std	Y+1, r31	; 0x01
    1c90:	e8 83       	st	Y, r30
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <fgetc+0x70>
    1c94:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c96:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c98:	ce 01       	movw	r24, r28
    1c9a:	09 95       	icall
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	97 ff       	sbrs	r25, 7
    1ca0:	0a c0       	rjmp	.+20     	; 0x1cb6 <fgetc+0x70>
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	2f 5f       	subi	r18, 0xFF	; 255
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <fgetc+0x68>
    1caa:	80 e2       	ldi	r24, 0x20	; 32
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <fgetc+0x6a>
    1cae:	80 e1       	ldi	r24, 0x10	; 16
    1cb0:	89 2b       	or	r24, r25
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	e8 cf       	rjmp	.-48     	; 0x1c86 <fgetc+0x40>
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	9f 83       	std	Y+7, r25	; 0x07
    1cbe:	8e 83       	std	Y+6, r24	; 0x06
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <fputc>:
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	8c 01       	movw	r16, r24
    1cd4:	eb 01       	movw	r28, r22
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	81 ff       	sbrs	r24, 1
    1cda:	1b c0       	rjmp	.+54     	; 0x1d12 <fputc+0x48>
    1cdc:	82 ff       	sbrs	r24, 2
    1cde:	0d c0       	rjmp	.+26     	; 0x1cfa <fputc+0x30>
    1ce0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	64 f4       	brge	.+24     	; 0x1d06 <fputc+0x3c>
    1cee:	e8 81       	ld	r30, Y
    1cf0:	f9 81       	ldd	r31, Y+1	; 0x01
    1cf2:	01 93       	st	Z+, r16
    1cf4:	f9 83       	std	Y+1, r31	; 0x01
    1cf6:	e8 83       	st	Y, r30
    1cf8:	06 c0       	rjmp	.+12     	; 0x1d06 <fputc+0x3c>
    1cfa:	e8 85       	ldd	r30, Y+8	; 0x08
    1cfc:	f9 85       	ldd	r31, Y+9	; 0x09
    1cfe:	80 2f       	mov	r24, r16
    1d00:	09 95       	icall
    1d02:	89 2b       	or	r24, r25
    1d04:	31 f4       	brne	.+12     	; 0x1d12 <fputc+0x48>
    1d06:	8e 81       	ldd	r24, Y+6	; 0x06
    1d08:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	9f 83       	std	Y+7, r25	; 0x07
    1d0e:	8e 83       	std	Y+6, r24	; 0x06
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <fputc+0x4c>
    1d12:	0f ef       	ldi	r16, 0xFF	; 255
    1d14:	1f ef       	ldi	r17, 0xFF	; 255
    1d16:	c8 01       	movw	r24, r16
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <ungetc>:
    1d22:	9c 01       	movw	r18, r24
    1d24:	fb 01       	movw	r30, r22
    1d26:	83 81       	ldd	r24, Z+3	; 0x03
    1d28:	80 ff       	sbrs	r24, 0
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <ungetc+0x2c>
    1d2c:	86 fd       	sbrc	r24, 6
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <ungetc+0x2c>
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	2f 3f       	cpi	r18, 0xFF	; 255
    1d34:	39 07       	cpc	r19, r25
    1d36:	59 f0       	breq	.+22     	; 0x1d4e <ungetc+0x2c>
    1d38:	22 83       	std	Z+2, r18	; 0x02
    1d3a:	80 64       	ori	r24, 0x40	; 64
    1d3c:	8f 7d       	andi	r24, 0xDF	; 223
    1d3e:	83 83       	std	Z+3, r24	; 0x03
    1d40:	86 81       	ldd	r24, Z+6	; 0x06
    1d42:	97 81       	ldd	r25, Z+7	; 0x07
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	97 83       	std	Z+7, r25	; 0x07
    1d48:	86 83       	std	Z+6, r24	; 0x06
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <ungetc+0x30>
    1d4e:	2f ef       	ldi	r18, 0xFF	; 255
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	c9 01       	movw	r24, r18
    1d54:	08 95       	ret

00001d56 <__ultoa_invert>:
    1d56:	fa 01       	movw	r30, r20
    1d58:	aa 27       	eor	r26, r26
    1d5a:	28 30       	cpi	r18, 0x08	; 8
    1d5c:	51 f1       	breq	.+84     	; 0x1db2 <__ultoa_invert+0x5c>
    1d5e:	20 31       	cpi	r18, 0x10	; 16
    1d60:	81 f1       	breq	.+96     	; 0x1dc2 <__ultoa_invert+0x6c>
    1d62:	e8 94       	clt
    1d64:	6f 93       	push	r22
    1d66:	6e 7f       	andi	r22, 0xFE	; 254
    1d68:	6e 5f       	subi	r22, 0xFE	; 254
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	af 4f       	sbci	r26, 0xFF	; 255
    1d72:	b1 e0       	ldi	r27, 0x01	; 1
    1d74:	3e d0       	rcall	.+124    	; 0x1df2 <__ultoa_invert+0x9c>
    1d76:	b4 e0       	ldi	r27, 0x04	; 4
    1d78:	3c d0       	rcall	.+120    	; 0x1df2 <__ultoa_invert+0x9c>
    1d7a:	67 0f       	add	r22, r23
    1d7c:	78 1f       	adc	r23, r24
    1d7e:	89 1f       	adc	r24, r25
    1d80:	9a 1f       	adc	r25, r26
    1d82:	a1 1d       	adc	r26, r1
    1d84:	68 0f       	add	r22, r24
    1d86:	79 1f       	adc	r23, r25
    1d88:	8a 1f       	adc	r24, r26
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	6a 0f       	add	r22, r26
    1d90:	71 1d       	adc	r23, r1
    1d92:	81 1d       	adc	r24, r1
    1d94:	91 1d       	adc	r25, r1
    1d96:	a1 1d       	adc	r26, r1
    1d98:	20 d0       	rcall	.+64     	; 0x1dda <__ultoa_invert+0x84>
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__ultoa_invert+0x48>
    1d9c:	68 94       	set
    1d9e:	3f 91       	pop	r19
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	26 9f       	mul	r18, r22
    1da4:	11 24       	eor	r1, r1
    1da6:	30 19       	sub	r19, r0
    1da8:	30 5d       	subi	r19, 0xD0	; 208
    1daa:	31 93       	st	Z+, r19
    1dac:	de f6       	brtc	.-74     	; 0x1d64 <__ultoa_invert+0xe>
    1dae:	cf 01       	movw	r24, r30
    1db0:	08 95       	ret
    1db2:	46 2f       	mov	r20, r22
    1db4:	47 70       	andi	r20, 0x07	; 7
    1db6:	40 5d       	subi	r20, 0xD0	; 208
    1db8:	41 93       	st	Z+, r20
    1dba:	b3 e0       	ldi	r27, 0x03	; 3
    1dbc:	0f d0       	rcall	.+30     	; 0x1ddc <__ultoa_invert+0x86>
    1dbe:	c9 f7       	brne	.-14     	; 0x1db2 <__ultoa_invert+0x5c>
    1dc0:	f6 cf       	rjmp	.-20     	; 0x1dae <__ultoa_invert+0x58>
    1dc2:	46 2f       	mov	r20, r22
    1dc4:	4f 70       	andi	r20, 0x0F	; 15
    1dc6:	40 5d       	subi	r20, 0xD0	; 208
    1dc8:	4a 33       	cpi	r20, 0x3A	; 58
    1dca:	18 f0       	brcs	.+6      	; 0x1dd2 <__ultoa_invert+0x7c>
    1dcc:	49 5d       	subi	r20, 0xD9	; 217
    1dce:	31 fd       	sbrc	r19, 1
    1dd0:	40 52       	subi	r20, 0x20	; 32
    1dd2:	41 93       	st	Z+, r20
    1dd4:	02 d0       	rcall	.+4      	; 0x1dda <__ultoa_invert+0x84>
    1dd6:	a9 f7       	brne	.-22     	; 0x1dc2 <__ultoa_invert+0x6c>
    1dd8:	ea cf       	rjmp	.-44     	; 0x1dae <__ultoa_invert+0x58>
    1dda:	b4 e0       	ldi	r27, 0x04	; 4
    1ddc:	a6 95       	lsr	r26
    1dde:	97 95       	ror	r25
    1de0:	87 95       	ror	r24
    1de2:	77 95       	ror	r23
    1de4:	67 95       	ror	r22
    1de6:	ba 95       	dec	r27
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__ultoa_invert+0x86>
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	61 05       	cpc	r22, r1
    1dee:	71 05       	cpc	r23, r1
    1df0:	08 95       	ret
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	0a 2e       	mov	r0, r26
    1df8:	06 94       	lsr	r0
    1dfa:	57 95       	ror	r21
    1dfc:	47 95       	ror	r20
    1dfe:	37 95       	ror	r19
    1e00:	27 95       	ror	r18
    1e02:	ba 95       	dec	r27
    1e04:	c9 f7       	brne	.-14     	; 0x1df8 <__ultoa_invert+0xa2>
    1e06:	62 0f       	add	r22, r18
    1e08:	73 1f       	adc	r23, r19
    1e0a:	84 1f       	adc	r24, r20
    1e0c:	95 1f       	adc	r25, r21
    1e0e:	a0 1d       	adc	r26, r0
    1e10:	08 95       	ret

00001e12 <__ctype_isfalse>:
    1e12:	99 27       	eor	r25, r25
    1e14:	88 27       	eor	r24, r24

00001e16 <__ctype_istrue>:
    1e16:	08 95       	ret

00001e18 <_exit>:
    1e18:	f8 94       	cli

00001e1a <__stop_program>:
    1e1a:	ff cf       	rjmp	.-2      	; 0x1e1a <__stop_program>
