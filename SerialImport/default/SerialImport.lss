
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001e52  00001ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d7  008001a2  008001a2  00001f88  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000375  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c05  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000600  00000000  00000000  00003f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012d2  00000000  00000000  00004562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00005834  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  00005af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b22  00000000  00000000  00005f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00006a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_line_clear>:
      9e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

000000b0 <LCD_hello>:
      b0:	68 65 6c 6c 6f 20 77 6f 72 6c 64 20 20 20 20 20     hello world     
	...

000000c2 <LcdCustomChar>:
      c2:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      d2:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      e2:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      f2:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000102 <__c.1988>:
     102:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 e5       	ldi	r30, 0x52	; 82
     122:	fe e1       	ldi	r31, 0x1E	; 30
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a2 3a       	cpi	r26, 0xA2	; 162
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	14 e0       	ldi	r17, 0x04	; 4
     136:	a2 ea       	ldi	r26, 0xA2	; 162
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a9 37       	cpi	r26, 0x79	; 121
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 ae 05 	call	0xb5c	; 0xb5c <main>
     148:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <ADC_init>:
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     150:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0;
     152:	16 b8       	out	0x06, r1	; 6

	ADMUX = (1<<REFS0);
     154:	80 e4       	ldi	r24, 0x40	; 64
     156:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) + 7; 
     158:	87 e8       	ldi	r24, 0x87	; 135
     15a:	86 b9       	out	0x06, r24	; 6
end
     15c:	08 95       	ret

0000015e <port_init>:

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     15e:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x00;    // no pull up resistors
     164:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00;    // start with no power
     166:	12 ba       	out	0x12, r1	; 18
end
     168:	08 95       	ret

0000016a <ADC_start_measure>:

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     16a:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     16c:	80 54       	subi	r24, 0x40	; 64
     16e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     170:	36 9a       	sbi	0x06, 6	; 6
end
     172:	08 95       	ret

00000174 <raise_pen>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void raise_pen(void)
begin
	PORTD &= ~0x20;
     174:	95 98       	cbi	0x12, 5	; 18
     176:	88 e8       	ldi	r24, 0x88	; 136
     178:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     17a:	20 e9       	ldi	r18, 0x90	; 144
     17c:	31 e0       	ldi	r19, 0x01	; 1
     17e:	f9 01       	movw	r30, r18
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	f1 f7       	brne	.-4      	; 0x180 <raise_pen+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     186:	d9 f7       	brne	.-10     	; 0x17e <raise_pen+0xa>
	_delay_ms(500);
end
     188:	08 95       	ret

0000018a <lower_pen>:

void lower_pen(void)
begin
	PORTD |= 0x20;
     18a:	95 9a       	sbi	0x12, 5	; 18
     18c:	80 ea       	ldi	r24, 0xA0	; 160
     18e:	9f e0       	ldi	r25, 0x0F	; 15
     190:	20 e9       	ldi	r18, 0x90	; 144
     192:	31 e0       	ldi	r19, 0x01	; 1
     194:	f9 01       	movw	r30, r18
     196:	31 97       	sbiw	r30, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <lower_pen+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     19c:	d9 f7       	brne	.-10     	; 0x194 <lower_pen+0xa>
	_delay_ms(400);
end
     19e:	08 95       	ret

000001a0 <move_negative_x>:

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     1a0:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1a2:	8a e1       	ldi	r24, 0x1A	; 26
     1a4:	8a 95       	dec	r24
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <move_negative_x+0x4>
	_delay_us(5);
	PORTD |= 0x04;
     1a8:	92 9a       	sbi	0x12, 2	; 18
end
     1aa:	08 95       	ret

000001ac <move_positive_x>:

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     1ac:	92 98       	cbi	0x12, 2	; 18
     1ae:	8a e1       	ldi	r24, 0x1A	; 26
     1b0:	8a 95       	dec	r24
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <move_positive_x+0x4>
	_delay_us(5);
	PORTD |= 0x08;
     1b4:	93 9a       	sbi	0x12, 3	; 18
end
     1b6:	08 95       	ret

000001b8 <move_negative_y>:

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     1b8:	96 98       	cbi	0x12, 6	; 18
     1ba:	8a e1       	ldi	r24, 0x1A	; 26
     1bc:	8a 95       	dec	r24
     1be:	f1 f7       	brne	.-4      	; 0x1bc <move_negative_y+0x4>
	_delay_us(5);
	PORTD |= 0x80;
     1c0:	97 9a       	sbi	0x12, 7	; 18
end
     1c2:	08 95       	ret

000001c4 <move_positive_y>:

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     1c4:	97 98       	cbi	0x12, 7	; 18
     1c6:	8a e1       	ldi	r24, 0x1A	; 26
     1c8:	8a 95       	dec	r24
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <move_positive_y+0x4>
	_delay_us(5);
	PORTD |= 0x40;
     1cc:	96 9a       	sbi	0x12, 6	; 18
end
     1ce:	08 95       	ret

000001d0 <stop_x>:

void stop_x(void)
begin
	PORTD &= ~0x18;
     1d0:	82 b3       	in	r24, 0x12	; 18
     1d2:	87 7e       	andi	r24, 0xE7	; 231
     1d4:	82 bb       	out	0x12, r24	; 18
end
     1d6:	08 95       	ret

000001d8 <stop_y>:

void stop_y(void)
begin
	PORTD &= ~0xc0; 
     1d8:	82 b3       	in	r24, 0x12	; 18
     1da:	8f 73       	andi	r24, 0x3F	; 63
     1dc:	82 bb       	out	0x12, r24	; 18

end
     1de:	08 95       	ret

000001e0 <stop_all>:

// all motors coast to a stop
void stop_all(void)
begin
	PORTD &= 0x23;
     1e0:	82 b3       	in	r24, 0x12	; 18
     1e2:	83 72       	andi	r24, 0x23	; 35
     1e4:	82 bb       	out	0x12, r24	; 18
     1e6:	88 ee       	ldi	r24, 0xE8	; 232
     1e8:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ea:	20 e9       	ldi	r18, 0x90	; 144
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	f9 01       	movw	r30, r18
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <stop_all+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <stop_all+0xe>
	_delay_ms(100);
end
     1f8:	08 95       	ret

000001fa <circle>:

// draw a circle
void circle(void)
begin
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     200:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     202:	8a e1       	ldi	r24, 0x1A	; 26
     204:	f8 2e       	mov	r15, r24
     206:	8f 2d       	mov	r24, r15
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <circle+0xe>
	_delay_us(5);
	PORTD |= 0x08;
     20c:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     20e:	00 e8       	ldi	r16, 0x80	; 128
     210:	1e e3       	ldi	r17, 0x3E	; 62
     212:	c8 01       	movw	r24, r16
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <circle+0x1a>
// draw a circle
void circle(void)
begin
	move_positive_x();
	_delay_us(4000);
	stop_all();
     218:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     21c:	97 98       	cbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     21e:	8f 2d       	mov	r24, r15
     220:	8a 95       	dec	r24
     222:	f1 f7       	brne	.-4      	; 0x220 <circle+0x26>
	_delay_us(5);
	PORTD |= 0x40;
     224:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     226:	c8 01       	movw	r24, r16
     228:	01 97       	sbiw	r24, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <circle+0x2e>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     22c:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     22e:	8f 2d       	mov	r24, r15
     230:	8a 95       	dec	r24
     232:	f1 f7       	brne	.-4      	; 0x230 <circle+0x36>
	_delay_us(5);
	PORTD |= 0x04;
     234:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     236:	c8 01       	movw	r24, r16
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <circle+0x3e>
	stop_all();
	move_positive_y();
	_delay_us(4000);
	move_negative_x();
	_delay_us(4000);
	stop_all();
     23c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     240:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     242:	8f 2d       	mov	r24, r15
     244:	8a 95       	dec	r24
     246:	f1 f7       	brne	.-4      	; 0x244 <circle+0x4a>
	_delay_us(5);
	PORTD |= 0x80;
     248:	97 9a       	sbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24a:	80 ee       	ldi	r24, 0xE0	; 224
     24c:	9e e2       	ldi	r25, 0x2E	; 46
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <circle+0x54>
	move_negative_x();
	_delay_us(4000);
	stop_all();
	move_negative_y();
	_delay_us(3000);
	stop_all();
     252:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     256:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     258:	8f 2d       	mov	r24, r15
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <circle+0x60>
	_delay_us(5);
	PORTD |= 0x08;
     25e:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     260:	00 e8       	ldi	r16, 0x80	; 128
     262:	15 e2       	ldi	r17, 0x25	; 37
     264:	c8 01       	movw	r24, r16
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <circle+0x6c>
	_delay_us(3000);
	stop_all();

	move_positive_x();
	_delay_us(2400);
	stop_all();
     26a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     26e:	97 98       	cbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     270:	8f 2d       	mov	r24, r15
     272:	8a 95       	dec	r24
     274:	f1 f7       	brne	.-4      	; 0x272 <circle+0x78>
	_delay_us(5);
	PORTD |= 0x40;
     276:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     278:	c8 01       	movw	r24, r16
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <circle+0x80>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     27e:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     280:	8f 2d       	mov	r24, r15
     282:	8a 95       	dec	r24
     284:	f1 f7       	brne	.-4      	; 0x282 <circle+0x88>
	_delay_us(5);
	PORTD |= 0x04;
     286:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     288:	c8 01       	movw	r24, r16
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <circle+0x90>
	stop_all();
	move_positive_y();
	_delay_us(2400);
	move_negative_x();
	_delay_us(2400);
	stop_all();
     28e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     292:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     294:	8f 2d       	mov	r24, r15
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <circle+0x9c>
	_delay_us(5);
	PORTD |= 0x80;
     29a:	97 9a       	sbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	97 e1       	ldi	r25, 0x17	; 23
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <circle+0xa6>
	move_negative_x();
	_delay_us(2400);
	stop_all();
	move_negative_y();
	_delay_us(1500);
	stop_all();
     2a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     2a8:	92 98       	cbi	0x12, 2	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2aa:	8f 2d       	mov	r24, r15
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <circle+0xb2>
	_delay_us(5);
	PORTD |= 0x08;
     2b0:	93 9a       	sbi	0x12, 3	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b2:	00 ea       	ldi	r16, 0xA0	; 160
     2b4:	1f e0       	ldi	r17, 0x0F	; 15
     2b6:	c8 01       	movw	r24, r16
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <circle+0xbe>
	_delay_us(1500);
	stop_all();

	move_positive_x();
	_delay_us(1000);
	stop_all();
     2bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     2c0:	97 98       	cbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2c2:	8f 2d       	mov	r24, r15
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <circle+0xca>
	_delay_us(5);
	PORTD |= 0x40;
     2c8:	96 9a       	sbi	0x12, 6	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ca:	c8 01       	movw	r24, r16
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <circle+0xd2>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     2d0:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2d2:	8f 2d       	mov	r24, r15
     2d4:	8a 95       	dec	r24
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <circle+0xda>
	_delay_us(5);
	PORTD |= 0x04;
     2d8:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2da:	c8 01       	movw	r24, r16
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <circle+0xe2>
	stop_all();
	move_positive_y();
	_delay_us(1000);
	move_negative_x();
	_delay_us(1000);
	stop_all();
     2e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     2e4:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2e6:	fa 94       	dec	r15
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <circle+0xec>
	_delay_us(5);
	PORTD |= 0x80;
     2ea:	97 9a       	sbi	0x12, 7	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ec:	80 ef       	ldi	r24, 0xF0	; 240
     2ee:	9a e0       	ldi	r25, 0x0A	; 10
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <circle+0xf6>
	move_negative_x();
	_delay_us(1000);
	stop_all();
	move_negative_y();
	_delay_us(700);
	stop_all();
     2f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
end
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	08 95       	ret

00000300 <print_position>:
	ADCSRA |= (1<<ADSC);
end

// writes the X and Y positions of the head to the second LCD line
void print_position(void)
begin
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
	sprintf(lcd_buffer,"X: %-i ",x_pos);  
     304:	20 91 ce 02 	lds	r18, 0x02CE
     308:	30 91 cf 02 	lds	r19, 0x02CF
     30c:	00 d0       	rcall	.+0      	; 0x30e <print_position+0xe>
     30e:	00 d0       	rcall	.+0      	; 0x310 <print_position+0x10>
     310:	00 d0       	rcall	.+0      	; 0x312 <print_position+0x12>
     312:	ed b7       	in	r30, 0x3d	; 61
     314:	fe b7       	in	r31, 0x3e	; 62
     316:	31 96       	adiw	r30, 0x01	; 1
     318:	0c eb       	ldi	r16, 0xBC	; 188
     31a:	12 e0       	ldi	r17, 0x02	; 2
     31c:	ad b7       	in	r26, 0x3d	; 61
     31e:	be b7       	in	r27, 0x3e	; 62
     320:	12 96       	adiw	r26, 0x02	; 2
     322:	1c 93       	st	X, r17
     324:	0e 93       	st	-X, r16
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	93 83       	std	Z+3, r25	; 0x03
     32e:	82 83       	std	Z+2, r24	; 0x02
     330:	35 83       	std	Z+5, r19	; 0x05
     332:	24 83       	std	Z+4, r18	; 0x04
     334:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
	LCDGotoXY(0,1);
     338:	8d b7       	in	r24, 0x3d	; 61
     33a:	9e b7       	in	r25, 0x3e	; 62
     33c:	06 96       	adiw	r24, 0x06	; 6
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	9e bf       	out	0x3e, r25	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	8d bf       	out	0x3d, r24	; 61
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     350:	f8 01       	movw	r30, r16
     352:	01 90       	ld	r0, Z+
     354:	00 20       	and	r0, r0
     356:	e9 f7       	brne	.-6      	; 0x352 <print_position+0x52>
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	e0 1b       	sub	r30, r16
     35c:	f1 0b       	sbc	r31, r17
     35e:	c8 01       	movw	r24, r16
     360:	6e 2f       	mov	r22, r30
     362:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
	sprintf(lcd_buffer,"Y: %-i ",y_pos);
     366:	20 91 98 03 	lds	r18, 0x0398
     36a:	30 91 99 03 	lds	r19, 0x0399
     36e:	00 d0       	rcall	.+0      	; 0x370 <print_position+0x70>
     370:	00 d0       	rcall	.+0      	; 0x372 <print_position+0x72>
     372:	00 d0       	rcall	.+0      	; 0x374 <print_position+0x74>
     374:	ed b7       	in	r30, 0x3d	; 61
     376:	fe b7       	in	r31, 0x3e	; 62
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	ad b7       	in	r26, 0x3d	; 61
     37c:	be b7       	in	r27, 0x3e	; 62
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	1c 93       	st	X, r17
     382:	0e 93       	st	-X, r16
     384:	11 97       	sbiw	r26, 0x01	; 1
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	93 83       	std	Z+3, r25	; 0x03
     38c:	82 83       	std	Z+2, r24	; 0x02
     38e:	35 83       	std	Z+5, r19	; 0x05
     390:	24 83       	std	Z+4, r18	; 0x04
     392:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
	LCDGotoXY(8,1);
     396:	8d b7       	in	r24, 0x3d	; 61
     398:	9e b7       	in	r25, 0x3e	; 62
     39a:	06 96       	adiw	r24, 0x06	; 6
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	9e bf       	out	0x3e, r25	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	8d bf       	out	0x3d, r24	; 61
     3a6:	88 e0       	ldi	r24, 0x08	; 8
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     3ae:	f8 01       	movw	r30, r16
     3b0:	01 90       	ld	r0, Z+
     3b2:	00 20       	and	r0, r0
     3b4:	e9 f7       	brne	.-6      	; 0x3b0 <print_position+0xb0>
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	e0 1b       	sub	r30, r16
     3ba:	f1 0b       	sbc	r31, r17
     3bc:	c8 01       	movw	r24, r16
     3be:	6e 2f       	mov	r22, r30
     3c0:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
end
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <move_to_XY>:
	stop_all();
end

// 1= pen down, 2= pen up
move_to_XY(int x_in, int y_in, int d)
begin
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	ec 01       	movw	r28, r24
     3d4:	8b 01       	movw	r16, r22
	if (d==2) raise_pen();
     3d6:	42 30       	cpi	r20, 0x02	; 2
     3d8:	51 05       	cpc	r21, r1
     3da:	19 f4       	brne	.+6      	; 0x3e2 <move_to_XY+0x18>
     3dc:	0e 94 ba 00 	call	0x174	; 0x174 <raise_pen>
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <move_to_XY+0x22>
	if (d==1) lower_pen();
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	51 05       	cpc	r21, r1
     3e6:	11 f4       	brne	.+4      	; 0x3ec <move_to_XY+0x22>
     3e8:	0e 94 c5 00 	call	0x18a	; 0x18a <lower_pen>
	if(x_in>0 && y_in>0)
     3ec:	1c 16       	cp	r1, r28
     3ee:	1d 06       	cpc	r1, r29
     3f0:	0c f0       	brlt	.+2      	; 0x3f4 <move_to_XY+0x2a>
     3f2:	ec c0       	rjmp	.+472    	; 0x5cc <move_to_XY+0x202>
     3f4:	10 16       	cp	r1, r16
     3f6:	11 06       	cpc	r1, r17
     3f8:	0c f0       	brlt	.+2      	; 0x3fc <move_to_XY+0x32>
     3fa:	e8 c0       	rjmp	.+464    	; 0x5cc <move_to_XY+0x202>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     3fc:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     3fe:	80 ec       	ldi	r24, 0xC0	; 192
     400:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     402:	36 9a       	sbi	0x06, 6	; 6
	if (d==1) lower_pen();
	if(x_in>0 && y_in>0)
	begin
		// move to x position
		ADC_start_measure(x_axis);
		while(ADCSRA & (1<<ADSC));
     404:	36 99       	sbic	0x06, 6	; 6
     406:	fe cf       	rjmp	.-4      	; 0x404 <move_to_XY+0x3a>
		x_pos = (int)ADCL;
     408:	84 b1       	in	r24, 0x04	; 4
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 cf 02 	sts	0x02CF, r25
     410:	80 93 ce 02 	sts	0x02CE, r24
		x_pos += (int)(ADCH*256);
     414:	40 91 ce 02 	lds	r20, 0x02CE
     418:	50 91 cf 02 	lds	r21, 0x02CF
     41c:	25 b1       	in	r18, 0x05	; 5
     41e:	92 2f       	mov	r25, r18
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	84 0f       	add	r24, r20
     424:	95 1f       	adc	r25, r21
     426:	90 93 cf 02 	sts	0x02CF, r25
     42a:	80 93 ce 02 	sts	0x02CE, r24

		if (x_pos > x_in)
     42e:	80 91 ce 02 	lds	r24, 0x02CE
     432:	90 91 cf 02 	lds	r25, 0x02CF
     436:	c8 17       	cp	r28, r24
     438:	d9 07       	cpc	r29, r25
     43a:	00 f1       	brcs	.+64     	; 0x47c <move_to_XY+0xb2>
     43c:	48 c0       	rjmp	.+144    	; 0x4ce <move_to_XY+0x104>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     43e:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     440:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     442:	36 9a       	sbi	0x06, 6	; 6
     444:	05 c0       	rjmp	.+10     	; 0x450 <move_to_XY+0x86>
	_delay_ms(400);
end

void move_negative_x(void)
begin
	PORTD &= 0xf7;
     446:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     448:	84 2f       	mov	r24, r20
     44a:	8a 95       	dec	r24
     44c:	f1 f7       	brne	.-4      	; 0x44a <move_to_XY+0x80>
	_delay_us(5);
	PORTD |= 0x04;
     44e:	92 9a       	sbi	0x12, 2	; 18
		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_negative_x();
     450:	36 99       	sbic	0x06, 6	; 6
     452:	f9 cf       	rjmp	.-14     	; 0x446 <move_to_XY+0x7c>
				x_pos = (int)ADCL;
     454:	84 b1       	in	r24, 0x04	; 4
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	90 93 cf 02 	sts	0x02CF, r25
     45c:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     460:	80 91 ce 02 	lds	r24, 0x02CE
     464:	90 91 cf 02 	lds	r25, 0x02CF
     468:	25 b1       	in	r18, 0x05	; 5
     46a:	32 2f       	mov	r19, r18
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	82 0f       	add	r24, r18
     470:	93 1f       	adc	r25, r19
     472:	90 93 cf 02 	sts	0x02CF, r25
     476:	80 93 ce 02 	sts	0x02CE, r24
     47a:	02 c0       	rjmp	.+4      	; 0x480 <move_to_XY+0xb6>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     47c:	50 ec       	ldi	r21, 0xC0	; 192
     47e:	4a e1       	ldi	r20, 0x1A	; 26
		x_pos = (int)ADCL;
		x_pos += (int)(ADCH*256);

		if (x_pos > x_in)
		begin
			while(x_pos > x_in)
     480:	80 91 ce 02 	lds	r24, 0x02CE
     484:	90 91 cf 02 	lds	r25, 0x02CF
     488:	c8 17       	cp	r28, r24
     48a:	d9 07       	cpc	r29, r25
     48c:	c0 f2       	brcs	.-80     	; 0x43e <move_to_XY+0x74>
     48e:	28 c0       	rjmp	.+80     	; 0x4e0 <move_to_XY+0x116>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     490:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     492:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     494:	36 9a       	sbi	0x06, 6	; 6
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <move_to_XY+0xd8>
	PORTD |= 0x04;
end

void move_positive_x(void)
begin
	PORTD &= 0xfb;
     498:	92 98       	cbi	0x12, 2	; 18
     49a:	84 2f       	mov	r24, r20
     49c:	8a 95       	dec	r24
     49e:	f1 f7       	brne	.-4      	; 0x49c <move_to_XY+0xd2>
	_delay_us(5);
	PORTD |= 0x08;
     4a0:	93 9a       	sbi	0x12, 3	; 18
		else
		begin
			while(x_pos < x_in)
			begin
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
     4a2:	36 99       	sbic	0x06, 6	; 6
     4a4:	f9 cf       	rjmp	.-14     	; 0x498 <move_to_XY+0xce>
				x_pos = (int)ADCL;
     4a6:	84 b1       	in	r24, 0x04	; 4
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	90 93 cf 02 	sts	0x02CF, r25
     4ae:	80 93 ce 02 	sts	0x02CE, r24
				x_pos += (int)(ADCH*256);
     4b2:	80 91 ce 02 	lds	r24, 0x02CE
     4b6:	90 91 cf 02 	lds	r25, 0x02CF
     4ba:	25 b1       	in	r18, 0x05	; 5
     4bc:	32 2f       	mov	r19, r18
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	90 93 cf 02 	sts	0x02CF, r25
     4c8:	80 93 ce 02 	sts	0x02CE, r24
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <move_to_XY+0x108>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4ce:	50 ec       	ldi	r21, 0xC0	; 192
     4d0:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(x_pos < x_in)
     4d2:	80 91 ce 02 	lds	r24, 0x02CE
     4d6:	90 91 cf 02 	lds	r25, 0x02CF
     4da:	8c 17       	cp	r24, r28
     4dc:	9d 07       	cpc	r25, r29
     4de:	c0 f2       	brcs	.-80     	; 0x490 <move_to_XY+0xc6>
				ADC_start_measure(x_axis);
				while(ADCSRA & (1<<ADSC))move_positive_x();
				x_pos = (int)ADCL;
				x_pos += (int)(ADCH*256);
			end
			stop_all();
     4e0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     4e4:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     4e6:	81 ec       	ldi	r24, 0xC1	; 193
     4e8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
     4ea:	36 9a       	sbi	0x06, 6	; 6
			stop_all();
		end
	
		// move to y position
		ADC_start_measure(y_axis);
		while(ADCSRA & (1<<ADSC));
     4ec:	36 99       	sbic	0x06, 6	; 6
     4ee:	fe cf       	rjmp	.-4      	; 0x4ec <move_to_XY+0x122>
		y_pos = (int)ADCL;
     4f0:	84 b1       	in	r24, 0x04	; 4
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	90 93 99 03 	sts	0x0399, r25
     4f8:	80 93 98 03 	sts	0x0398, r24
		y_pos += (int)(ADCH*256);
     4fc:	40 91 98 03 	lds	r20, 0x0398
     500:	50 91 99 03 	lds	r21, 0x0399
     504:	25 b1       	in	r18, 0x05	; 5
     506:	92 2f       	mov	r25, r18
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	84 0f       	add	r24, r20
     50c:	95 1f       	adc	r25, r21
     50e:	90 93 99 03 	sts	0x0399, r25
     512:	80 93 98 03 	sts	0x0398, r24

		if (y_pos > y_in)
     516:	80 91 98 03 	lds	r24, 0x0398
     51a:	90 91 99 03 	lds	r25, 0x0399
     51e:	08 17       	cp	r16, r24
     520:	19 07       	cpc	r17, r25
     522:	00 f1       	brcs	.+64     	; 0x564 <move_to_XY+0x19a>
     524:	48 c0       	rjmp	.+144    	; 0x5b6 <move_to_XY+0x1ec>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     526:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     528:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     52a:	36 9a       	sbi	0x06, 6	; 6
     52c:	05 c0       	rjmp	.+10     	; 0x538 <move_to_XY+0x16e>
	PORTD |= 0x08;
end

void move_negative_y(void)
begin
	PORTD &= 0xbf;
     52e:	96 98       	cbi	0x12, 6	; 18
     530:	84 2f       	mov	r24, r20
     532:	8a 95       	dec	r24
     534:	f1 f7       	brne	.-4      	; 0x532 <move_to_XY+0x168>
	_delay_us(5);
	PORTD |= 0x80;
     536:	97 9a       	sbi	0x12, 7	; 18
		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_negative_y();
     538:	36 99       	sbic	0x06, 6	; 6
     53a:	f9 cf       	rjmp	.-14     	; 0x52e <move_to_XY+0x164>
				y_pos = (int)ADCL;
     53c:	84 b1       	in	r24, 0x04	; 4
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 99 03 	sts	0x0399, r25
     544:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     548:	80 91 98 03 	lds	r24, 0x0398
     54c:	90 91 99 03 	lds	r25, 0x0399
     550:	25 b1       	in	r18, 0x05	; 5
     552:	32 2f       	mov	r19, r18
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	82 0f       	add	r24, r18
     558:	93 1f       	adc	r25, r19
     55a:	90 93 99 03 	sts	0x0399, r25
     55e:	80 93 98 03 	sts	0x0398, r24
     562:	02 c0       	rjmp	.+4      	; 0x568 <move_to_XY+0x19e>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     564:	51 ec       	ldi	r21, 0xC1	; 193
     566:	4a e1       	ldi	r20, 0x1A	; 26
		y_pos = (int)ADCL;
		y_pos += (int)(ADCH*256);

		if (y_pos > y_in)
		begin
			while(y_pos > y_in)
     568:	80 91 98 03 	lds	r24, 0x0398
     56c:	90 91 99 03 	lds	r25, 0x0399
     570:	08 17       	cp	r16, r24
     572:	19 07       	cpc	r17, r25
     574:	c0 f2       	brcs	.-80     	; 0x526 <move_to_XY+0x15c>
     576:	28 c0       	rjmp	.+80     	; 0x5c8 <move_to_XY+0x1fe>

// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     578:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     57a:	57 b9       	out	0x07, r21	; 7
	ADCSRA |= (1<<ADSC);
     57c:	36 9a       	sbi	0x06, 6	; 6
     57e:	05 c0       	rjmp	.+10     	; 0x58a <move_to_XY+0x1c0>
	PORTD |= 0x80;
end

void move_positive_y(void)
begin
	PORTD &= 0x7f;
     580:	97 98       	cbi	0x12, 7	; 18
     582:	84 2f       	mov	r24, r20
     584:	8a 95       	dec	r24
     586:	f1 f7       	brne	.-4      	; 0x584 <move_to_XY+0x1ba>
	_delay_us(5);
	PORTD |= 0x40;
     588:	96 9a       	sbi	0x12, 6	; 18
		else
		begin
			while(y_pos < y_in)
			begin
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
     58a:	36 99       	sbic	0x06, 6	; 6
     58c:	f9 cf       	rjmp	.-14     	; 0x580 <move_to_XY+0x1b6>
				y_pos = (int)ADCL;
     58e:	84 b1       	in	r24, 0x04	; 4
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 99 03 	sts	0x0399, r25
     596:	80 93 98 03 	sts	0x0398, r24
				y_pos += (int)(ADCH*256);
     59a:	80 91 98 03 	lds	r24, 0x0398
     59e:	90 91 99 03 	lds	r25, 0x0399
     5a2:	25 b1       	in	r18, 0x05	; 5
     5a4:	32 2f       	mov	r19, r18
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	90 93 99 03 	sts	0x0399, r25
     5b0:	80 93 98 03 	sts	0x0398, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <move_to_XY+0x1f0>
// Helper Functions -----------------------------------------------------------
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS1) + (1<<REFS0) + channel;
     5b6:	51 ec       	ldi	r21, 0xC1	; 193
     5b8:	4a e1       	ldi	r20, 0x1A	; 26
			stop_all();
		end

		else
		begin
			while(y_pos < y_in)
     5ba:	80 91 98 03 	lds	r24, 0x0398
     5be:	90 91 99 03 	lds	r25, 0x0399
     5c2:	80 17       	cp	r24, r16
     5c4:	91 07       	cpc	r25, r17
     5c6:	c0 f2       	brcs	.-80     	; 0x578 <move_to_XY+0x1ae>
				ADC_start_measure(y_axis);
				while(ADCSRA & (1<<ADSC))move_positive_y();
				y_pos = (int)ADCL;
				y_pos += (int)(ADCH*256);
			end
			stop_all();
     5c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <stop_all>
		end
	end
	// print where you end up
	print_position();			
     5cc:	0e 94 80 01 	call	0x300	; 0x300 <print_position>
end
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	08 95       	ret

000005da <get_frame>:

void get_frame()
begin
     5da:	2f 92       	push	r2
     5dc:	3f 92       	push	r3
     5de:	4f 92       	push	r4
     5e0:	5f 92       	push	r5
     5e2:	6f 92       	push	r6
     5e4:	7f 92       	push	r7
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	69 97       	sbiw	r28, 0x19	; 25
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
  int i=0, x=-2 ,y=-2,d=-2;// container for parsed ints
     60e:	8e ef       	ldi	r24, 0xFE	; 254
     610:	9f ef       	ldi	r25, 0xFF	; 255
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	9c 83       	std	Y+4, r25	; 0x04
     618:	8b 83       	std	Y+3, r24	; 0x03
     61a:	9e 83       	std	Y+6, r25	; 0x06
     61c:	8d 83       	std	Y+5, r24	; 0x05
  char buffer[17];
  uint16_t file_size = 0;
     61e:	18 86       	std	Y+8, r1	; 0x08
     620:	1f 82       	std	Y+7, r1	; 0x07
 sprintf(lcd_buffer2,"File Length\n\r");
     622:	0a e9       	ldi	r16, 0x9A	; 154
     624:	13 e0       	ldi	r17, 0x03	; 3
     626:	c8 01       	movw	r24, r16
     628:	60 e1       	ldi	r22, 0x10	; 16
     62a:	71 e0       	ldi	r23, 0x01	; 1
     62c:	0e 94 a6 08 	call	0x114c	; 0x114c <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     630:	60 91 75 04 	lds	r22, 0x0475
     634:	70 91 76 04 	lds	r23, 0x0476
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 ad 08 	call	0x115a	; 0x115a <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     63e:	00 d0       	rcall	.+0      	; 0x640 <get_frame+0x66>
     640:	00 d0       	rcall	.+0      	; 0x642 <get_frame+0x68>
     642:	00 d0       	rcall	.+0      	; 0x644 <get_frame+0x6a>
     644:	ed b7       	in	r30, 0x3d	; 61
     646:	fe b7       	in	r31, 0x3e	; 62
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	80 91 73 04 	lds	r24, 0x0473
     64e:	90 91 74 04 	lds	r25, 0x0474
     652:	ad b7       	in	r26, 0x3d	; 61
     654:	be b7       	in	r27, 0x3e	; 62
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	9c 93       	st	X, r25
     65a:	8e 93       	st	-X, r24
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	8e e1       	ldi	r24, 0x1E	; 30
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	93 83       	std	Z+3, r25	; 0x03
     664:	82 83       	std	Z+2, r24	; 0x02
     666:	ce 01       	movw	r24, r28
     668:	07 96       	adiw	r24, 0x07	; 7
     66a:	95 83       	std	Z+5, r25	; 0x05
     66c:	84 83       	std	Z+4, r24	; 0x04
     66e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fscanf>
  sprintf(lcd_buffer2,"             %-i.", file_size);
     672:	ed b7       	in	r30, 0x3d	; 61
     674:	fe b7       	in	r31, 0x3e	; 62
     676:	31 96       	adiw	r30, 0x01	; 1
     678:	ad b7       	in	r26, 0x3d	; 61
     67a:	be b7       	in	r27, 0x3e	; 62
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	1c 93       	st	X, r17
     680:	0e 93       	st	-X, r16
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	82 e2       	ldi	r24, 0x22	; 34
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	93 83       	std	Z+3, r25	; 0x03
     68a:	82 83       	std	Z+2, r24	; 0x02
     68c:	8f 81       	ldd	r24, Y+7	; 0x07
     68e:	98 85       	ldd	r25, Y+8	; 0x08
     690:	95 83       	std	Z+5, r25	; 0x05
     692:	84 83       	std	Z+4, r24	; 0x04
     694:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>

	LCDGotoXY(0, 0);
     698:	6d b7       	in	r22, 0x3d	; 61
     69a:	7e b7       	in	r23, 0x3e	; 62
     69c:	6a 5f       	subi	r22, 0xFA	; 250
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	7e bf       	out	0x3e, r23	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	6d bf       	out	0x3d, r22	; 61
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     6b2:	f8 01       	movw	r30, r16
     6b4:	01 90       	ld	r0, Z+
     6b6:	00 20       	and	r0, r0
     6b8:	e9 f7       	brne	.-6      	; 0x6b4 <get_frame+0xda>
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	e0 1b       	sub	r30, r16
     6be:	f1 0b       	sbc	r31, r17
     6c0:	c8 01       	movw	r24, r16
     6c2:	6e 2f       	mov	r22, r30
     6c4:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
     6c8:	ee 24       	eor	r14, r14
     6ca:	ff 24       	eor	r15, r15

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     6cc:	79 e0       	ldi	r23, 0x09	; 9
     6ce:	a7 2e       	mov	r10, r23
     6d0:	b1 2c       	mov	r11, r1
     6d2:	ac 0e       	add	r10, r28
     6d4:	bd 1e       	adc	r11, r29
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);

    sprintf(lcd_buffer2,"%-i ", i);
     6d6:	48 01       	movw	r8, r16
		d_vect[i] = d;
		x=-2;
		y=-2;
		d=-2;
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     6d8:	0c eb       	ldi	r16, 0xBC	; 188
     6da:	12 e0       	ldi	r17, 0x02	; 2
     6dc:	65 e5       	ldi	r22, 0x55	; 85
     6de:	26 2e       	mov	r2, r22
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	36 2e       	mov	r3, r22
	LCDGotoXY(0, 1);
	LCDstring(buffer,15);

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     6e4:	5b e4       	ldi	r21, 0x4B	; 75
     6e6:	45 2e       	mov	r4, r21
     6e8:	51 e0       	ldi	r21, 0x01	; 1
     6ea:	55 2e       	mov	r5, r21
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, 10);
		x_vect[i] = x;
		y_vect[i] = y;
		d_vect[i] = d;
		x=-2;
     6ec:	4e ef       	ldi	r20, 0xFE	; 254
     6ee:	c4 2e       	mov	r12, r20
     6f0:	4f ef       	ldi	r20, 0xFF	; 255
     6f2:	d4 2e       	mov	r13, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6f4:	30 e9       	ldi	r19, 0x90	; 144
     6f6:	63 2e       	mov	r6, r19
     6f8:	31 e0       	ldi	r19, 0x01	; 1
     6fa:	73 2e       	mov	r7, r19
     6fc:	ff c0       	rjmp	.+510    	; 0x8fc <get_frame+0x322>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     6fe:	60 91 75 04 	lds	r22, 0x0475
     702:	70 91 76 04 	lds	r23, 0x0476
     706:	84 e3       	ldi	r24, 0x34	; 52
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 ad 08 	call	0x115a	; 0x115a <fputs>
	fscanf(stdin, "%s", buffer) ;
     70e:	00 d0       	rcall	.+0      	; 0x710 <get_frame+0x136>
     710:	00 d0       	rcall	.+0      	; 0x712 <get_frame+0x138>
     712:	00 d0       	rcall	.+0      	; 0x714 <get_frame+0x13a>
     714:	ed b7       	in	r30, 0x3d	; 61
     716:	fe b7       	in	r31, 0x3e	; 62
     718:	31 96       	adiw	r30, 0x01	; 1
     71a:	80 91 73 04 	lds	r24, 0x0473
     71e:	90 91 74 04 	lds	r25, 0x0474
     722:	ad b7       	in	r26, 0x3d	; 61
     724:	be b7       	in	r27, 0x3e	; 62
     726:	12 96       	adiw	r26, 0x02	; 2
     728:	9c 93       	st	X, r25
     72a:	8e 93       	st	-X, r24
     72c:	11 97       	sbiw	r26, 0x01	; 1
     72e:	69 e3       	ldi	r22, 0x39	; 57
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	73 83       	std	Z+3, r23	; 0x03
     734:	62 83       	std	Z+2, r22	; 0x02
     736:	b5 82       	std	Z+5, r11	; 0x05
     738:	a4 82       	std	Z+4, r10	; 0x04
     73a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <fscanf>
	sscanf(buffer, "X%dY%dD%d", &x,&y,&d);
     73e:	00 d0       	rcall	.+0      	; 0x740 <get_frame+0x166>
     740:	00 d0       	rcall	.+0      	; 0x742 <get_frame+0x168>
     742:	ed b7       	in	r30, 0x3d	; 61
     744:	fe b7       	in	r31, 0x3e	; 62
     746:	31 96       	adiw	r30, 0x01	; 1
     748:	ad b7       	in	r26, 0x3d	; 61
     74a:	be b7       	in	r27, 0x3e	; 62
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	bc 92       	st	X, r11
     750:	ae 92       	st	-X, r10
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	6c e3       	ldi	r22, 0x3C	; 60
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	73 83       	std	Z+3, r23	; 0x03
     75a:	62 83       	std	Z+2, r22	; 0x02
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	8c 0f       	add	r24, r28
     762:	9d 1f       	adc	r25, r29
     764:	95 83       	std	Z+5, r25	; 0x05
     766:	84 83       	std	Z+4, r24	; 0x04
     768:	a3 e0       	ldi	r26, 0x03	; 3
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	ac 0f       	add	r26, r28
     76e:	bd 1f       	adc	r27, r29
     770:	b7 83       	std	Z+7, r27	; 0x07
     772:	a6 83       	std	Z+6, r26	; 0x06
     774:	65 e0       	ldi	r22, 0x05	; 5
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	6c 0f       	add	r22, r28
     77a:	7d 1f       	adc	r23, r29
     77c:	71 87       	std	Z+9, r23	; 0x09
     77e:	60 87       	std	Z+8, r22	; 0x08
     780:	0e 94 1a 09 	call	0x1234	; 0x1234 <sscanf>

    sprintf(lcd_buffer2,"%-i ", i);
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	ed b7       	in	r30, 0x3d	; 61
     78e:	fe b7       	in	r31, 0x3e	; 62
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	ad b7       	in	r26, 0x3d	; 61
     794:	be b7       	in	r27, 0x3e	; 62
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	8c 92       	st	X, r8
     79a:	11 97       	sbiw	r26, 0x01	; 1
     79c:	12 96       	adiw	r26, 0x02	; 2
     79e:	9c 92       	st	X, r9
     7a0:	66 e4       	ldi	r22, 0x46	; 70
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	73 83       	std	Z+3, r23	; 0x03
     7a6:	62 83       	std	Z+2, r22	; 0x02
     7a8:	f5 82       	std	Z+5, r15	; 0x05
     7aa:	e4 82       	std	Z+4, r14	; 0x04
     7ac:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
	LCDGotoXY(11, 0);
     7b0:	8d b7       	in	r24, 0x3d	; 61
     7b2:	9e b7       	in	r25, 0x3e	; 62
     7b4:	06 96       	adiw	r24, 0x06	; 6
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	9e bf       	out	0x3e, r25	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	8d bf       	out	0x3d, r24	; 61
     7c0:	8b e0       	ldi	r24, 0x0B	; 11
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     7c8:	c4 01       	movw	r24, r8
     7ca:	62 e0       	ldi	r22, 0x02	; 2
     7cc:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>

	//print org
	LCDGotoXY(0, 1);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	LCDstring(buffer,15);
     7d8:	c5 01       	movw	r24, r10
     7da:	6f e0       	ldi	r22, 0x0F	; 15
     7dc:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>

	//print parsed
	if (x>=-1 && y>=-1 && d>=-1){
     7e0:	49 81       	ldd	r20, Y+1	; 0x01
     7e2:	5a 81       	ldd	r21, Y+2	; 0x02
     7e4:	9f ef       	ldi	r25, 0xFF	; 255
     7e6:	4f 3f       	cpi	r20, 0xFF	; 255
     7e8:	59 07       	cpc	r21, r25
     7ea:	0c f4       	brge	.+2      	; 0x7ee <get_frame+0x214>
     7ec:	5a c0       	rjmp	.+180    	; 0x8a2 <get_frame+0x2c8>
     7ee:	2b 81       	ldd	r18, Y+3	; 0x03
     7f0:	3c 81       	ldd	r19, Y+4	; 0x04
     7f2:	af ef       	ldi	r26, 0xFF	; 255
     7f4:	2f 3f       	cpi	r18, 0xFF	; 255
     7f6:	3a 07       	cpc	r19, r26
     7f8:	0c f4       	brge	.+2      	; 0x7fc <get_frame+0x222>
     7fa:	53 c0       	rjmp	.+166    	; 0x8a2 <get_frame+0x2c8>
     7fc:	8d 81       	ldd	r24, Y+5	; 0x05
     7fe:	9e 81       	ldd	r25, Y+6	; 0x06
     800:	bf ef       	ldi	r27, 0xFF	; 255
     802:	8f 3f       	cpi	r24, 0xFF	; 255
     804:	9b 07       	cpc	r25, r27
     806:	0c f4       	brge	.+2      	; 0x80a <get_frame+0x230>
     808:	4c c0       	rjmp	.+152    	; 0x8a2 <get_frame+0x2c8>
		sprintf(lcd_buffer,"x%dy%dd%d", x,y,d);
     80a:	6d b7       	in	r22, 0x3d	; 61
     80c:	7e b7       	in	r23, 0x3e	; 62
     80e:	6a 50       	subi	r22, 0x0A	; 10
     810:	70 40       	sbci	r23, 0x00	; 0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	7e bf       	out	0x3e, r23	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	6d bf       	out	0x3d, r22	; 61
     81c:	ed b7       	in	r30, 0x3d	; 61
     81e:	fe b7       	in	r31, 0x3e	; 62
     820:	31 96       	adiw	r30, 0x01	; 1
     822:	ad b7       	in	r26, 0x3d	; 61
     824:	be b7       	in	r27, 0x3e	; 62
     826:	12 96       	adiw	r26, 0x02	; 2
     828:	1c 93       	st	X, r17
     82a:	0e 93       	st	-X, r16
     82c:	11 97       	sbiw	r26, 0x01	; 1
     82e:	53 82       	std	Z+3, r5	; 0x03
     830:	42 82       	std	Z+2, r4	; 0x02
     832:	55 83       	std	Z+5, r21	; 0x05
     834:	44 83       	std	Z+4, r20	; 0x04
     836:	37 83       	std	Z+7, r19	; 0x07
     838:	26 83       	std	Z+6, r18	; 0x06
     83a:	91 87       	std	Z+9, r25	; 0x09
     83c:	80 87       	std	Z+8, r24	; 0x08
     83e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
		LCDGotoXY(0, 0);
     842:	6d b7       	in	r22, 0x3d	; 61
     844:	7e b7       	in	r23, 0x3e	; 62
     846:	66 5f       	subi	r22, 0xF6	; 246
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	7e bf       	out	0x3e, r23	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	6d bf       	out	0x3d, r22	; 61
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     85c:	c8 01       	movw	r24, r16
     85e:	6a e0       	ldi	r22, 0x0A	; 10
     860:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
		x_vect[i] = x;
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	d7 01       	movw	r26, r14
     86a:	aa 0f       	add	r26, r26
     86c:	bb 1f       	adc	r27, r27
     86e:	fd 01       	movw	r30, r26
     870:	e5 55       	subi	r30, 0x55	; 85
     872:	fc 4f       	sbci	r31, 0xFC	; 252
     874:	91 83       	std	Z+1, r25	; 0x01
     876:	80 83       	st	Z, r24
		y_vect[i] = y;
     878:	8b 81       	ldd	r24, Y+3	; 0x03
     87a:	9c 81       	ldd	r25, Y+4	; 0x04
     87c:	fd 01       	movw	r30, r26
     87e:	ec 50       	subi	r30, 0x0C	; 12
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	91 83       	std	Z+1, r25	; 0x01
     884:	80 83       	st	Z, r24
		d_vect[i] = d;
     886:	8d 81       	ldd	r24, Y+5	; 0x05
     888:	9e 81       	ldd	r25, Y+6	; 0x06
     88a:	a0 53       	subi	r26, 0x30	; 48
     88c:	bd 4f       	sbci	r27, 0xFD	; 253
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	9c 93       	st	X, r25
     892:	8e 93       	st	-X, r24
		x=-2;
     894:	da 82       	std	Y+2, r13	; 0x02
     896:	c9 82       	std	Y+1, r12	; 0x01
		y=-2;
     898:	dc 82       	std	Y+4, r13	; 0x04
     89a:	cb 82       	std	Y+3, r12	; 0x03
		d=-2;
     89c:	de 82       	std	Y+6, r13	; 0x06
     89e:	cd 82       	std	Y+5, r12	; 0x05
     8a0:	23 c0       	rjmp	.+70     	; 0x8e8 <get_frame+0x30e>
	} else {
		sprintf(lcd_buffer,"Invalid@%-i", i);
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <get_frame+0x2ca>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <get_frame+0x2cc>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <get_frame+0x2ce>
     8a8:	ed b7       	in	r30, 0x3d	; 61
     8aa:	fe b7       	in	r31, 0x3e	; 62
     8ac:	31 96       	adiw	r30, 0x01	; 1
     8ae:	ad b7       	in	r26, 0x3d	; 61
     8b0:	be b7       	in	r27, 0x3e	; 62
     8b2:	12 96       	adiw	r26, 0x02	; 2
     8b4:	1c 93       	st	X, r17
     8b6:	0e 93       	st	-X, r16
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	33 82       	std	Z+3, r3	; 0x03
     8bc:	22 82       	std	Z+2, r2	; 0x02
     8be:	f5 82       	std	Z+5, r15	; 0x05
     8c0:	e4 82       	std	Z+4, r14	; 0x04
     8c2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
		LCDGotoXY(0, 0);
     8c6:	6d b7       	in	r22, 0x3d	; 61
     8c8:	7e b7       	in	r23, 0x3e	; 62
     8ca:	6a 5f       	subi	r22, 0xFA	; 250
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	7e bf       	out	0x3e, r23	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	6d bf       	out	0x3d, r22	; 61
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     8e0:	c8 01       	movw	r24, r16
     8e2:	6a e0       	ldi	r22, 0x0A	; 10
     8e4:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	97 e2       	ldi	r25, 0x27	; 39
     8ec:	f3 01       	movw	r30, r6
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <get_frame+0x314>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f4:	d9 f7       	brne	.-10     	; 0x8ec <get_frame+0x312>
  sprintf(lcd_buffer2,"             %-i.", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

  for (i=0; i<file_size; i++)
     8f6:	08 94       	sec
     8f8:	e1 1c       	adc	r14, r1
     8fa:	f1 1c       	adc	r15, r1
     8fc:	8f 81       	ldd	r24, Y+7	; 0x07
     8fe:	98 85       	ldd	r25, Y+8	; 0x08
     900:	e8 16       	cp	r14, r24
     902:	f9 06       	cpc	r15, r25
     904:	08 f4       	brcc	.+2      	; 0x908 <get_frame+0x32e>
     906:	fb ce       	rjmp	.-522    	; 0x6fe <get_frame+0x124>
     908:	80 e2       	ldi	r24, 0x20	; 32
     90a:	9e e4       	ldi	r25, 0x4E	; 78
     90c:	20 e9       	ldi	r18, 0x90	; 144
     90e:	31 e0       	ldi	r19, 0x01	; 1
     910:	f9 01       	movw	r30, r18
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <get_frame+0x338>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     916:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     918:	d9 f7       	brne	.-10     	; 0x910 <get_frame+0x336>
		LCDstring(lcd_buffer, 10);
	}
	_delay_ms(1000);
  end
		_delay_ms(2000);
		sprintf(lcd_buffer,"finished%-i", i);
     91a:	00 d0       	rcall	.+0      	; 0x91c <get_frame+0x342>
     91c:	00 d0       	rcall	.+0      	; 0x91e <get_frame+0x344>
     91e:	00 d0       	rcall	.+0      	; 0x920 <get_frame+0x346>
     920:	ed b7       	in	r30, 0x3d	; 61
     922:	fe b7       	in	r31, 0x3e	; 62
     924:	31 96       	adiw	r30, 0x01	; 1
     926:	0c eb       	ldi	r16, 0xBC	; 188
     928:	12 e0       	ldi	r17, 0x02	; 2
     92a:	ad b7       	in	r26, 0x3d	; 61
     92c:	be b7       	in	r27, 0x3e	; 62
     92e:	12 96       	adiw	r26, 0x02	; 2
     930:	1c 93       	st	X, r17
     932:	0e 93       	st	-X, r16
     934:	11 97       	sbiw	r26, 0x01	; 1
     936:	81 e6       	ldi	r24, 0x61	; 97
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	93 83       	std	Z+3, r25	; 0x03
     93c:	82 83       	std	Z+2, r24	; 0x02
     93e:	f5 82       	std	Z+5, r15	; 0x05
     940:	e4 82       	std	Z+4, r14	; 0x04
     942:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
		LCDGotoXY(0, 0);
     946:	6d b7       	in	r22, 0x3d	; 61
     948:	7e b7       	in	r23, 0x3e	; 62
     94a:	6a 5f       	subi	r22, 0xFA	; 250
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	7e bf       	out	0x3e, r23	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	6d bf       	out	0x3d, r22	; 61
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     960:	c8 01       	movw	r24, r16
     962:	6a e0       	ldi	r22, 0x0A	; 10
     964:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
		sprintf(lcd_buffer,"x%d%d%d%d", x_vect[0],  x_vect[1],  x_vect[2],  x_vect[3]);
     968:	20 91 ab 03 	lds	r18, 0x03AB
     96c:	30 91 ac 03 	lds	r19, 0x03AC
     970:	40 91 ad 03 	lds	r20, 0x03AD
     974:	50 91 ae 03 	lds	r21, 0x03AE
     978:	60 91 af 03 	lds	r22, 0x03AF
     97c:	70 91 b0 03 	lds	r23, 0x03B0
     980:	e0 90 b1 03 	lds	r14, 0x03B1
     984:	f0 90 b2 03 	lds	r15, 0x03B2
     988:	8d b7       	in	r24, 0x3d	; 61
     98a:	9e b7       	in	r25, 0x3e	; 62
     98c:	0c 97       	sbiw	r24, 0x0c	; 12
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	9e bf       	out	0x3e, r25	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	8d bf       	out	0x3d, r24	; 61
     998:	ed b7       	in	r30, 0x3d	; 61
     99a:	fe b7       	in	r31, 0x3e	; 62
     99c:	31 96       	adiw	r30, 0x01	; 1
     99e:	ad b7       	in	r26, 0x3d	; 61
     9a0:	be b7       	in	r27, 0x3e	; 62
     9a2:	12 96       	adiw	r26, 0x02	; 2
     9a4:	1c 93       	st	X, r17
     9a6:	0e 93       	st	-X, r16
     9a8:	11 97       	sbiw	r26, 0x01	; 1
     9aa:	8d e6       	ldi	r24, 0x6D	; 109
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	93 83       	std	Z+3, r25	; 0x03
     9b0:	82 83       	std	Z+2, r24	; 0x02
     9b2:	35 83       	std	Z+5, r19	; 0x05
     9b4:	24 83       	std	Z+4, r18	; 0x04
     9b6:	57 83       	std	Z+7, r21	; 0x07
     9b8:	46 83       	std	Z+6, r20	; 0x06
     9ba:	71 87       	std	Z+9, r23	; 0x09
     9bc:	60 87       	std	Z+8, r22	; 0x08
     9be:	f3 86       	std	Z+11, r15	; 0x0b
     9c0:	e2 86       	std	Z+10, r14	; 0x0a
     9c2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
		LCDGotoXY(0, 0);
     9c6:	6d b7       	in	r22, 0x3d	; 61
     9c8:	7e b7       	in	r23, 0x3e	; 62
     9ca:	64 5f       	subi	r22, 0xF4	; 244
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	7e bf       	out	0x3e, r23	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	6d bf       	out	0x3d, r22	; 61
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     9e0:	c8 01       	movw	r24, r16
     9e2:	6a e0       	ldi	r22, 0x0A	; 10
     9e4:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
		sprintf(lcd_buffer,"y%d%d%d%d", y_vect[0],  y_vect[1],  y_vect[2],  y_vect[3]);
     9e8:	20 91 f4 01 	lds	r18, 0x01F4
     9ec:	30 91 f5 01 	lds	r19, 0x01F5
     9f0:	40 91 f6 01 	lds	r20, 0x01F6
     9f4:	50 91 f7 01 	lds	r21, 0x01F7
     9f8:	60 91 f8 01 	lds	r22, 0x01F8
     9fc:	70 91 f9 01 	lds	r23, 0x01F9
     a00:	e0 90 fa 01 	lds	r14, 0x01FA
     a04:	f0 90 fb 01 	lds	r15, 0x01FB
     a08:	8d b7       	in	r24, 0x3d	; 61
     a0a:	9e b7       	in	r25, 0x3e	; 62
     a0c:	0c 97       	sbiw	r24, 0x0c	; 12
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	9e bf       	out	0x3e, r25	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	8d bf       	out	0x3d, r24	; 61
     a18:	ed b7       	in	r30, 0x3d	; 61
     a1a:	fe b7       	in	r31, 0x3e	; 62
     a1c:	31 96       	adiw	r30, 0x01	; 1
     a1e:	ad b7       	in	r26, 0x3d	; 61
     a20:	be b7       	in	r27, 0x3e	; 62
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	1c 93       	st	X, r17
     a26:	0e 93       	st	-X, r16
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	87 e7       	ldi	r24, 0x77	; 119
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	93 83       	std	Z+3, r25	; 0x03
     a30:	82 83       	std	Z+2, r24	; 0x02
     a32:	35 83       	std	Z+5, r19	; 0x05
     a34:	24 83       	std	Z+4, r18	; 0x04
     a36:	57 83       	std	Z+7, r21	; 0x07
     a38:	46 83       	std	Z+6, r20	; 0x06
     a3a:	71 87       	std	Z+9, r23	; 0x09
     a3c:	60 87       	std	Z+8, r22	; 0x08
     a3e:	f3 86       	std	Z+11, r15	; 0x0b
     a40:	e2 86       	std	Z+10, r14	; 0x0a
     a42:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
		LCDGotoXY(0, 1);
     a46:	6d b7       	in	r22, 0x3d	; 61
     a48:	7e b7       	in	r23, 0x3e	; 62
     a4a:	64 5f       	subi	r22, 0xF4	; 244
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	7e bf       	out	0x3e, r23	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	6d bf       	out	0x3d, r22	; 61
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     a60:	c8 01       	movw	r24, r16
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>
		sprintf(lcd_buffer,"d%d%d%d%d", d_vect[0],  d_vect[1],  d_vect[2],  d_vect[3]);
     a68:	20 91 d0 02 	lds	r18, 0x02D0
     a6c:	30 91 d1 02 	lds	r19, 0x02D1
     a70:	40 91 d2 02 	lds	r20, 0x02D2
     a74:	50 91 d3 02 	lds	r21, 0x02D3
     a78:	60 91 d4 02 	lds	r22, 0x02D4
     a7c:	70 91 d5 02 	lds	r23, 0x02D5
     a80:	e0 90 d6 02 	lds	r14, 0x02D6
     a84:	f0 90 d7 02 	lds	r15, 0x02D7
     a88:	8d b7       	in	r24, 0x3d	; 61
     a8a:	9e b7       	in	r25, 0x3e	; 62
     a8c:	0c 97       	sbiw	r24, 0x0c	; 12
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	9e bf       	out	0x3e, r25	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	8d bf       	out	0x3d, r24	; 61
     a98:	ed b7       	in	r30, 0x3d	; 61
     a9a:	fe b7       	in	r31, 0x3e	; 62
     a9c:	31 96       	adiw	r30, 0x01	; 1
     a9e:	ad b7       	in	r26, 0x3d	; 61
     aa0:	be b7       	in	r27, 0x3e	; 62
     aa2:	12 96       	adiw	r26, 0x02	; 2
     aa4:	1c 93       	st	X, r17
     aa6:	0e 93       	st	-X, r16
     aa8:	11 97       	sbiw	r26, 0x01	; 1
     aaa:	81 e8       	ldi	r24, 0x81	; 129
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	93 83       	std	Z+3, r25	; 0x03
     ab0:	82 83       	std	Z+2, r24	; 0x02
     ab2:	35 83       	std	Z+5, r19	; 0x05
     ab4:	24 83       	std	Z+4, r18	; 0x04
     ab6:	57 83       	std	Z+7, r21	; 0x07
     ab8:	46 83       	std	Z+6, r20	; 0x06
     aba:	71 87       	std	Z+9, r23	; 0x09
     abc:	60 87       	std	Z+8, r22	; 0x08
     abe:	f3 86       	std	Z+11, r15	; 0x0b
     ac0:	e2 86       	std	Z+10, r14	; 0x0a
     ac2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <sprintf>
		LCDGotoXY(10, 0);
     ac6:	6d b7       	in	r22, 0x3d	; 61
     ac8:	7e b7       	in	r23, 0x3e	; 62
     aca:	64 5f       	subi	r22, 0xF4	; 244
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	7e bf       	out	0x3e, r23	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	6d bf       	out	0x3d, r22	; 61
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
		LCDstring(lcd_buffer, 10);
     ae0:	c8 01       	movw	r24, r16
     ae2:	6a e0       	ldi	r22, 0x0A	; 10
     ae4:	0e 94 50 07 	call	0xea0	; 0xea0 <LCDstring>

end
     ae8:	69 96       	adiw	r28, 0x19	; 25
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	cf 91       	pop	r28
     af6:	df 91       	pop	r29
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	bf 90       	pop	r11
     b06:	af 90       	pop	r10
     b08:	9f 90       	pop	r9
     b0a:	8f 90       	pop	r8
     b0c:	7f 90       	pop	r7
     b0e:	6f 90       	pop	r6
     b10:	5f 90       	pop	r5
     b12:	4f 90       	pop	r4
     b14:	3f 90       	pop	r3
     b16:	2f 90       	pop	r2
     b18:	08 95       	ret

00000b1a <LCD_init>:

//Helper functions
void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     b1a:	0e 94 af 07 	call	0xf5e	; 0xf5e <LCDinit>
	LCDcursorOFF();
     b1e:	0e 94 17 08 	call	0x102e	; 0x102e <LCDcursorOFF>
	LCDclr();	//clear the display
     b22:	0e 94 48 07 	call	0xe90	; 0xe90 <LCDclr>
	LCDGotoXY(0,0);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     b2e:	8c e8       	ldi	r24, 0x8C	; 140
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	0e 94 74 07 	call	0xee8	; 0xee8 <CopyStringtoLCD>
	LCD_char_count = 0;
     b3a:	10 92 cd 02 	sts	0x02CD, r1
end
     b3e:	08 95       	ret

00000b40 <initialize>:
	ADCSRA = (1<<ADEN) + 7; 
end

void port_init(void)
begin
	DDRA = 0x00;    // all inputs to avoid ADC coupling, no pull ups
     b40:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0xff;    // all outputs - bottom 2 are USART top 6 are motor control
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x00;    // no pull up resistors
     b46:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0x00;    // start with no power
     b48:	12 ba       	out	0x12, r1	; 18
end

void initialize(void)
begin
	port_init();
	LCD_init();
     b4a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_init>
	LCD_char_count = 0;
end

void ADC_init(void)
begin
	ADMUX = 0;
     b4e:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0;
     b50:	16 b8       	out	0x06, r1	; 6

	ADMUX = (1<<REFS0);
     b52:	80 e4       	ldi	r24, 0x40	; 64
     b54:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN) + 7; 
     b56:	87 e8       	ldi	r24, 0x87	; 135
     b58:	86 b9       	out	0x06, r24	; 6
void initialize(void)
begin
	port_init();
	LCD_init();
	ADC_init();
end
     b5a:	08 95       	ret

00000b5c <main>:
end



// --- Main Program ----------------------------------
int main(void) {
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
  int i =0;
  
  initialize();
     b60:	0e 94 a0 05 	call	0xb40	; 0xb40 <initialize>
  
//	LCD_init();
  //init the UART -- uart_init() is in uart.c
  uart_init();
     b64:	0e 94 2b 06 	call	0xc56	; 0xc56 <uart_init>
  stdout = stdin = stderr = &uart_str;
     b68:	8b e8       	ldi	r24, 0x8B	; 139
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	90 93 78 04 	sts	0x0478, r25
     b70:	80 93 77 04 	sts	0x0477, r24
     b74:	90 93 74 04 	sts	0x0474, r25
     b78:	80 93 73 04 	sts	0x0473, r24
     b7c:	90 93 76 04 	sts	0x0476, r25
     b80:	80 93 75 04 	sts	0x0475, r24
  
 sprintf(lcd_buffer2,"File Length\n\r");
     b84:	8a e9       	ldi	r24, 0x9A	; 154
     b86:	93 e0       	ldi	r25, 0x03	; 3
     b88:	60 e1       	ldi	r22, 0x10	; 16
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	0e 94 a6 08 	call	0x114c	; 0x114c <strcpy>
  fprintf(stdout,"%s\0", lcd_buffer2);
     b90:	60 91 75 04 	lds	r22, 0x0475
     b94:	70 91 76 04 	lds	r23, 0x0476
     b98:	8a e9       	ldi	r24, 0x9A	; 154
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	0e 94 ad 08 	call	0x115a	; 0x115a <fputs>
	LCDGotoXY(0,0);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     ba8:	8c e8       	ldi	r24, 0x8C	; 140
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 74 07 	call	0xee8	; 0xee8 <CopyStringtoLCD>
  get_frame();
     bb4:	0e 94 ed 02 	call	0x5da	; 0x5da <get_frame>
  get_frame();
     bb8:	0e 94 ed 02 	call	0x5da	; 0x5da <get_frame>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	97 e2       	ldi	r25, 0x27	; 39
     bc0:	20 e9       	ldi	r18, 0x90	; 144
     bc2:	31 e0       	ldi	r19, 0x01	; 1
     bc4:	f9 01       	movw	r30, r18
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bcc:	d9 f7       	brne	.-10     	; 0xbc4 <main+0x68>


		
	_delay_ms(1000);
	CopyStringtoLCD(LCD_hello, 0, 0);
     bce:	80 eb       	ldi	r24, 0xB0	; 176
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 74 07 	call	0xee8	; 0xee8 <CopyStringtoLCD>
     bda:	80 e1       	ldi	r24, 0x10	; 16
     bdc:	97 e2       	ldi	r25, 0x27	; 39
     bde:	20 e9       	ldi	r18, 0x90	; 144
     be0:	31 e0       	ldi	r19, 0x01	; 1
     be2:	f9 01       	movw	r30, r18
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bea:	d9 f7       	brne	.-10     	; 0xbe2 <main+0x86>
	_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
     bec:	80 91 ab 03 	lds	r24, 0x03AB
     bf0:	90 91 ac 03 	lds	r25, 0x03AC
     bf4:	60 91 f4 01 	lds	r22, 0x01F4
     bf8:	70 91 f5 01 	lds	r23, 0x01F5
     bfc:	42 e0       	ldi	r20, 0x02	; 2
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	0e 94 e5 01 	call	0x3ca	; 0x3ca <move_to_XY>
     c04:	c1 e0       	ldi	r28, 0x01	; 1
     c06:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=1;i<100;i++)
	begin
		if(x_vect[i]>=0 && y_vect[i] >= 0)
     c08:	be 01       	movw	r22, r28
     c0a:	66 0f       	add	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	db 01       	movw	r26, r22
     c10:	a5 55       	subi	r26, 0x55	; 85
     c12:	bc 4f       	sbci	r27, 0xFC	; 252
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	11 97       	sbiw	r26, 0x01	; 1
     c1a:	97 fd       	sbrc	r25, 7
     c1c:	13 c0       	rjmp	.+38     	; 0xc44 <main+0xe8>
     c1e:	fb 01       	movw	r30, r22
     c20:	ec 50       	subi	r30, 0x0C	; 12
     c22:	fe 4f       	sbci	r31, 0xFE	; 254
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	97 fd       	sbrc	r25, 7
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <main+0xe8>
		begin
			move_to_XY(x_vect[i],y_vect[i],1);
     c2c:	8d 91       	ld	r24, X+
     c2e:	9c 91       	ld	r25, X
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	0e 94 e5 01 	call	0x3ca	; 0x3ca <move_to_XY>
		
	_delay_ms(1000);
	CopyStringtoLCD(LCD_hello, 0, 0);
	_delay_ms(1000);
	move_to_XY(x_vect[0],y_vect[0],2);
	for(i=1;i<100;i++)
     c3c:	21 96       	adiw	r28, 0x01	; 1
     c3e:	c4 36       	cpi	r28, 0x64	; 100
     c40:	d1 05       	cpc	r29, r1
     c42:	11 f7       	brne	.-60     	; 0xc08 <main+0xac>
		else
		begin
			break;
		end
	end
	move_to_XY(700,700,2);
     c44:	8c eb       	ldi	r24, 0xBC	; 188
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	6c eb       	ldi	r22, 0xBC	; 188
     c4a:	72 e0       	ldi	r23, 0x02	; 2
     c4c:	42 e0       	ldi	r20, 0x02	; 2
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	0e 94 e5 01 	call	0x3ca	; 0x3ca <move_to_XY>
     c54:	ff cf       	rjmp	.-2      	; 0xc54 <main+0xf8>

00000c56 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     c56:	87 e6       	ldi	r24, 0x67	; 103
     c58:	89 b9       	out	0x09, r24	; 9
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     c5a:	88 e1       	ldi	r24, 0x18	; 24
     c5c:	8a b9       	out	0x0a, r24	; 10
}
     c5e:	08 95       	ret

00000c60 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     c60:	1f 93       	push	r17
     c62:	18 2f       	mov	r17, r24

  if (c == '\a')
     c64:	87 30       	cpi	r24, 0x07	; 7
     c66:	49 f4       	brne	.+18     	; 0xc7a <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     c68:	60 91 77 04 	lds	r22, 0x0477
     c6c:	70 91 78 04 	lds	r23, 0x0478
     c70:	89 e9       	ldi	r24, 0x99	; 153
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 ad 08 	call	0x115a	; 0x115a <fputs>
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <uart_putchar+0x2a>
      return 0;
    }

  if (c == '\n')
     c7a:	8a 30       	cpi	r24, 0x0A	; 10
     c7c:	19 f4       	brne	.+6      	; 0xc84 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     c7e:	8d e0       	ldi	r24, 0x0D	; 13
     c80:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     c84:	5d 9b       	sbis	0x0b, 5	; 11
     c86:	fe cf       	rjmp	.-4      	; 0xc84 <uart_putchar+0x24>
  UDR0 = c;
     c88:	1c b9       	out	0x0c, r17	; 12

  return 0;
}
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	1f 91       	pop	r17
     c90:	08 95       	ret

00000c92 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     ca0:	80 91 a2 01 	lds	r24, 0x01A2
     ca4:	90 91 a3 01 	lds	r25, 0x01A3
     ca8:	89 2b       	or	r24, r25
     caa:	09 f0       	breq	.+2      	; 0xcae <uart_getchar+0x1c>
     cac:	97 c0       	rjmp	.+302    	; 0xddc <uart_getchar+0x14a>
     cae:	04 ea       	ldi	r16, 0xA4	; 164
     cb0:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     cb2:	5f 9b       	sbis	0x0b, 7	; 11
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     cb6:	5c 9b       	sbis	0x0b, 4	; 11
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <uart_getchar+0x2e>
     cba:	2e ef       	ldi	r18, 0xFE	; 254
     cbc:	3f ef       	ldi	r19, 0xFF	; 255
     cbe:	a2 c0       	rjmp	.+324    	; 0xe04 <uart_getchar+0x172>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     cc0:	5b 99       	sbic	0x0b, 3	; 11
     cc2:	9e c0       	rjmp	.+316    	; 0xe00 <uart_getchar+0x16e>
	  return _FDEV_ERR;
	c = UDR0;
     cc4:	9c b1       	in	r25, 0x0c	; 12
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     cc6:	9d 30       	cpi	r25, 0x0D	; 13
     cc8:	11 f0       	breq	.+4      	; 0xcce <uart_getchar+0x3c>
	  c = '\n';
	if (c == '\n')
     cca:	9a 30       	cpi	r25, 0x0A	; 10
     ccc:	69 f4       	brne	.+26     	; 0xce8 <uart_getchar+0x56>
	  {
	    *cp = c;
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	f8 01       	movw	r30, r16
     cd2:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     cd4:	b7 01       	movw	r22, r14
     cd6:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
	    rxp = b;
     cda:	84 ea       	ldi	r24, 0xA4	; 164
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	90 93 a3 01 	sts	0x01A3, r25
     ce2:	80 93 a2 01 	sts	0x01A2, r24
     ce6:	7a c0       	rjmp	.+244    	; 0xddc <uart_getchar+0x14a>
	    break;
	  }
	else if (c == '\t')
     ce8:	99 30       	cpi	r25, 0x09	; 9
     cea:	09 f4       	brne	.+2      	; 0xcee <uart_getchar+0x5c>
     cec:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     cee:	89 2f       	mov	r24, r25
     cf0:	80 52       	subi	r24, 0x20	; 32
     cf2:	8f 35       	cpi	r24, 0x5F	; 95
     cf4:	10 f0       	brcs	.+4      	; 0xcfa <uart_getchar+0x68>
     cf6:	90 3a       	cpi	r25, 0xA0	; 160
     cf8:	70 f0       	brcs	.+28     	; 0xd16 <uart_getchar+0x84>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     cfa:	f1 e0       	ldi	r31, 0x01	; 1
     cfc:	03 3f       	cpi	r16, 0xF3	; 243
     cfe:	1f 07       	cpc	r17, r31
     d00:	11 f4       	brne	.+4      	; 0xd06 <uart_getchar+0x74>
	      uart_putchar('\a', stream);
     d02:	87 e0       	ldi	r24, 0x07	; 7
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <uart_getchar+0x7c>
	    else
	      {
		*cp++ = c;
     d06:	f8 01       	movw	r30, r16
     d08:	91 93       	st	Z+, r25
     d0a:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     d0c:	89 2f       	mov	r24, r25
     d0e:	b7 01       	movw	r22, r14
     d10:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
     d14:	ce cf       	rjmp	.-100    	; 0xcb2 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     d16:	92 31       	cpi	r25, 0x12	; 18
     d18:	31 f1       	breq	.+76     	; 0xd66 <uart_getchar+0xd4>
     d1a:	93 31       	cpi	r25, 0x13	; 19
     d1c:	30 f4       	brcc	.+12     	; 0xd2a <uart_getchar+0x98>
     d1e:	93 30       	cpi	r25, 0x03	; 3
     d20:	09 f4       	brne	.+2      	; 0xd24 <uart_getchar+0x92>
     d22:	6e c0       	rjmp	.+220    	; 0xe00 <uart_getchar+0x16e>
     d24:	98 30       	cpi	r25, 0x08	; 8
     d26:	29 f6       	brne	.-118    	; 0xcb2 <uart_getchar+0x20>
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <uart_getchar+0xaa>
     d2a:	97 31       	cpi	r25, 0x17	; 23
     d2c:	09 f4       	brne	.+2      	; 0xd30 <uart_getchar+0x9e>
     d2e:	4b c0       	rjmp	.+150    	; 0xdc6 <uart_getchar+0x134>
     d30:	9f 37       	cpi	r25, 0x7F	; 127
     d32:	21 f0       	breq	.+8      	; 0xd3c <uart_getchar+0xaa>
     d34:	95 31       	cpi	r25, 0x15	; 21
     d36:	09 f0       	breq	.+2      	; 0xd3a <uart_getchar+0xa8>
     d38:	bc cf       	rjmp	.-136    	; 0xcb2 <uart_getchar+0x20>
     d3a:	32 c0       	rjmp	.+100    	; 0xda0 <uart_getchar+0x10e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	04 3a       	cpi	r16, 0xA4	; 164
     d40:	1f 07       	cpc	r17, r31
     d42:	09 f0       	breq	.+2      	; 0xd46 <uart_getchar+0xb4>
     d44:	08 f4       	brcc	.+2      	; 0xd48 <uart_getchar+0xb6>
     d46:	b5 cf       	rjmp	.-150    	; 0xcb2 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	b7 01       	movw	r22, r14
     d4c:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		uart_putchar(' ', stream);
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	b7 01       	movw	r22, r14
     d54:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		uart_putchar('\b', stream);
     d58:	88 e0       	ldi	r24, 0x08	; 8
     d5a:	b7 01       	movw	r22, r14
     d5c:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		cp--;
     d60:	01 50       	subi	r16, 0x01	; 1
     d62:	10 40       	sbci	r17, 0x00	; 0
     d64:	a6 cf       	rjmp	.-180    	; 0xcb2 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     d66:	8d e0       	ldi	r24, 0x0D	; 13
     d68:	b7 01       	movw	r22, r14
     d6a:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
     d6e:	c4 ea       	ldi	r28, 0xA4	; 164
     d70:	d1 e0       	ldi	r29, 0x01	; 1
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <uart_getchar+0xea>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     d74:	89 91       	ld	r24, Y+
     d76:	b7 01       	movw	r22, r14
     d78:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     d7c:	c0 17       	cp	r28, r16
     d7e:	d1 07       	cpc	r29, r17
     d80:	c8 f3       	brcs	.-14     	; 0xd74 <uart_getchar+0xe2>
     d82:	97 cf       	rjmp	.-210    	; 0xcb2 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     d84:	88 e0       	ldi	r24, 0x08	; 8
     d86:	b7 01       	movw	r22, r14
     d88:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		uart_putchar(' ', stream);
     d8c:	80 e2       	ldi	r24, 0x20	; 32
     d8e:	b7 01       	movw	r22, r14
     d90:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		uart_putchar('\b', stream);
     d94:	88 e0       	ldi	r24, 0x08	; 8
     d96:	b7 01       	movw	r22, r14
     d98:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		cp--;
     d9c:	01 50       	subi	r16, 0x01	; 1
     d9e:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	04 3a       	cpi	r16, 0xA4	; 164
     da4:	18 07       	cpc	r17, r24
     da6:	09 f0       	breq	.+2      	; 0xdaa <uart_getchar+0x118>
     da8:	68 f7       	brcc	.-38     	; 0xd84 <uart_getchar+0xf2>
     daa:	83 cf       	rjmp	.-250    	; 0xcb2 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     dac:	88 e0       	ldi	r24, 0x08	; 8
     dae:	b7 01       	movw	r22, r14
     db0:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		uart_putchar(' ', stream);
     db4:	80 e2       	ldi	r24, 0x20	; 32
     db6:	b7 01       	movw	r22, r14
     db8:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
		uart_putchar('\b', stream);
     dbc:	88 e0       	ldi	r24, 0x08	; 8
     dbe:	b7 01       	movw	r22, r14
     dc0:	0e 94 30 06 	call	0xc60	; 0xc60 <uart_putchar>
     dc4:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     dc6:	e1 e0       	ldi	r30, 0x01	; 1
     dc8:	04 3a       	cpi	r16, 0xA4	; 164
     dca:	1e 07       	cpc	r17, r30
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <uart_getchar+0x13e>
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <uart_getchar+0x140>
     dd0:	70 cf       	rjmp	.-288    	; 0xcb2 <uart_getchar+0x20>
     dd2:	e8 01       	movw	r28, r16
     dd4:	8a 91       	ld	r24, -Y
     dd6:	80 32       	cpi	r24, 0x20	; 32
     dd8:	49 f7       	brne	.-46     	; 0xdac <uart_getchar+0x11a>
     dda:	6b cf       	rjmp	.-298    	; 0xcb2 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     ddc:	e0 91 a2 01 	lds	r30, 0x01A2
     de0:	f0 91 a3 01 	lds	r31, 0x01A3
     de4:	81 91       	ld	r24, Z+
     de6:	f0 93 a3 01 	sts	0x01A3, r31
     dea:	e0 93 a2 01 	sts	0x01A2, r30
  if (c == '\n')
     dee:	8a 30       	cpi	r24, 0x0A	; 10
     df0:	21 f4       	brne	.+8      	; 0xdfa <uart_getchar+0x168>
    rxp = 0;
     df2:	10 92 a3 01 	sts	0x01A3, r1
     df6:	10 92 a2 01 	sts	0x01A2, r1

  return c;
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <uart_getchar+0x172>
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	3f ef       	ldi	r19, 0xFF	; 255
}
     e04:	c9 01       	movw	r24, r18
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     e14:	28 2f       	mov	r18, r24
     e16:	20 7f       	andi	r18, 0xF0	; 240
     e18:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
     e1a:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
     e1c:	aa 9a       	sbi	0x15, 2	; 21
     e1e:	24 ef       	ldi	r18, 0xF4	; 244
     e20:	31 e0       	ldi	r19, 0x01	; 1
     e22:	f9 01       	movw	r30, r18
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     e28:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
     e2a:	a8 98       	cbi	0x15, 0	; 21
     e2c:	f9 01       	movw	r30, r18
     e2e:	31 97       	sbiw	r30, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	44 e0       	ldi	r20, 0x04	; 4
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	4a 95       	dec	r20
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <LCDsendChar+0x22>
     e3e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
     e40:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
     e42:	aa 9a       	sbi	0x15, 2	; 21
     e44:	c9 01       	movw	r24, r18
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     e4a:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
     e4c:	a8 98       	cbi	0x15, 0	; 21
     e4e:	c9 01       	movw	r24, r18
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     e54:	08 95       	ret

00000e56 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     e56:	28 2f       	mov	r18, r24
     e58:	20 7f       	andi	r18, 0xF0	; 240
     e5a:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
     e5c:	aa 9a       	sbi	0x15, 2	; 21
     e5e:	24 ef       	ldi	r18, 0xF4	; 244
     e60:	31 e0       	ldi	r19, 0x01	; 1
     e62:	f9 01       	movw	r30, r18
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e68:	aa 98       	cbi	0x15, 2	; 21
     e6a:	f9 01       	movw	r30, r18
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	54 e0       	ldi	r21, 0x04	; 4
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	5a 95       	dec	r21
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <LCDsendCommand+0x1e>
     e7c:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
     e7e:	aa 9a       	sbi	0x15, 2	; 21
     e80:	c9 01       	movw	r24, r18
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e86:	aa 98       	cbi	0x15, 2	; 21
     e88:	c9 01       	movw	r24, r18
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     e8e:	08 95       	ret

00000e90 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
     e96:	08 95       	ret

00000e98 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
     e9e:	08 95       	ret

00000ea0 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	49 f0       	breq	.+18     	; 0xec0 <LCDstring+0x20>
     eae:	ec 01       	movw	r28, r24
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     eb4:	89 91       	ld	r24, Y+
     eb6:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     eba:	1f 5f       	subi	r17, 0xFF	; 255
     ebc:	10 17       	cp	r17, r16
     ebe:	d0 f3       	brcs	.-12     	; 0xeb4 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     eca:	62 30       	cpi	r22, 0x02	; 2
     ecc:	31 f0       	breq	.+12     	; 0xeda <LCDGotoXY+0x10>
     ece:	63 30       	cpi	r22, 0x03	; 3
     ed0:	31 f0       	breq	.+12     	; 0xede <LCDGotoXY+0x14>
     ed2:	61 30       	cpi	r22, 0x01	; 1
     ed4:	29 f4       	brne	.+10     	; 0xee0 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     ed6:	80 5c       	subi	r24, 0xC0	; 192
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     eda:	8c 5e       	subi	r24, 0xEC	; 236
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     ede:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
	
}
     ee6:	08 95       	ret

00000ee8 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
     ef0:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     ef2:	64 2f       	mov	r22, r20
     ef4:	0e 94 65 07 	call	0xeca	; 0xeca <LCDGotoXY>
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     efc:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     f00:	1f 5f       	subi	r17, 0xFF	; 255
     f02:	fe 01       	movw	r30, r28
     f04:	e1 0f       	add	r30, r17
     f06:	f1 1d       	adc	r31, r1
     f08:	84 91       	lpm	r24, Z+
     f0a:	88 23       	and	r24, r24
     f0c:	b9 f7       	brne	.-18     	; 0xefc <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	08 95       	ret

00000f16 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	7c 01       	movw	r14, r24
     f24:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     f26:	11 0f       	add	r17, r17
     f28:	11 0f       	add	r17, r17
     f2a:	11 0f       	add	r17, r17
     f2c:	10 64       	ori	r17, 0x40	; 64
     f2e:	c0 e0       	ldi	r28, 0x00	; 0
     f30:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     f32:	f7 01       	movw	r30, r14
     f34:	ec 0f       	add	r30, r28
     f36:	fd 1f       	adc	r31, r29
     f38:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     f3a:	81 2f       	mov	r24, r17
     f3c:	8c 0f       	add	r24, r28
     f3e:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
		LCDsendChar(pcc);
     f42:	80 2f       	mov	r24, r16
     f44:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     f48:	21 96       	adiw	r28, 0x01	; 1
     f4a:	c8 30       	cpi	r28, 0x08	; 8
     f4c:	d1 05       	cpc	r29, r1
     f4e:	89 f7       	brne	.-30     	; 0xf32 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	08 95       	ret

00000f5e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	86 ea       	ldi	r24, 0xA6	; 166
     f66:	9e e0       	ldi	r25, 0x0E	; 14
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     f6c:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
     f6e:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     f70:	84 b3       	in	r24, 0x14	; 20
     f72:	80 6f       	ori	r24, 0xF0	; 240
     f74:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     f76:	84 b3       	in	r24, 0x14	; 20
     f78:	87 60       	ori	r24, 0x07	; 7
     f7a:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     f7c:	80 e3       	ldi	r24, 0x30	; 48
     f7e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f80:	aa 9a       	sbi	0x15, 2	; 21
     f82:	24 ef       	ldi	r18, 0xF4	; 244
     f84:	31 e0       	ldi	r19, 0x01	; 1
     f86:	f9 01       	movw	r30, r18
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     f8c:	aa 98       	cbi	0x15, 2	; 21
     f8e:	f9 01       	movw	r30, r18
     f90:	31 97       	sbiw	r30, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     f94:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     f96:	aa 9a       	sbi	0x15, 2	; 21
     f98:	c9 01       	movw	r24, r18
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     f9e:	aa 98       	cbi	0x15, 2	; 21
     fa0:	c9 01       	movw	r24, r18
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     faa:	aa 9a       	sbi	0x15, 2	; 21
     fac:	c9 01       	movw	r24, r18
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     fb2:	aa 98       	cbi	0x15, 2	; 21
     fb4:	c9 01       	movw	r24, r18
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     fba:	88 e2       	ldi	r24, 0x28	; 40
     fbc:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     fc0:	8c e0       	ldi	r24, 0x0C	; 12
     fc2:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
     fc6:	c2 ec       	ldi	r28, 0xC2	; 194
     fc8:	d0 e0       	ldi	r29, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     fcc:	16 2f       	mov	r17, r22
     fce:	1f 5f       	subi	r17, 0xFF	; 255
     fd0:	ce 01       	movw	r24, r28
     fd2:	0e 94 8b 07 	call	0xf16	; 0xf16 <LCDdefinechar>
     fd6:	28 96       	adiw	r28, 0x08	; 8
     fd8:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     fda:	18 30       	cpi	r17, 0x08	; 8
     fdc:	b9 f7       	brne	.-18     	; 0xfcc <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	08 95       	ret

00000fe6 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	08 2f       	mov	r16, r24
     fec:	10 e0       	ldi	r17, 0x00	; 0
     fee:	04 c0       	rjmp	.+8      	; 0xff8 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     ff0:	8e e1       	ldi	r24, 0x1E	; 30
     ff2:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     ff6:	1f 5f       	subi	r17, 0xFF	; 255
     ff8:	10 17       	cp	r17, r16
     ffa:	d0 f3       	brcs	.-12     	; 0xff0 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	08 2f       	mov	r16, r24
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    100c:	88 e1       	ldi	r24, 0x18	; 24
    100e:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1012:	1f 5f       	subi	r17, 0xFF	; 255
    1014:	10 17       	cp	r17, r16
    1016:	d0 f3       	brcs	.-12     	; 0x100c <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    101e:	8e e0       	ldi	r24, 0x0E	; 14
    1020:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
    1024:	08 95       	ret

00001026 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1026:	8f e0       	ldi	r24, 0x0F	; 15
    1028:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
    102c:	08 95       	ret

0000102e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    102e:	8c e0       	ldi	r24, 0x0C	; 12
    1030:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
    1034:	08 95       	ret

00001036 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1036:	88 e0       	ldi	r24, 0x08	; 8
    1038:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
    103c:	08 95       	ret

0000103e <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    103e:	8c e0       	ldi	r24, 0x0C	; 12
    1040:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
}
    1044:	08 95       	ret

00001046 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	08 2f       	mov	r16, r24
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1056:	1f 5f       	subi	r17, 0xFF	; 255
    1058:	10 17       	cp	r17, r16
    105a:	d0 f3       	brcs	.-12     	; 0x1050 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	08 2f       	mov	r16, r24
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    106c:	84 e1       	ldi	r24, 0x14	; 20
    106e:	0e 94 2b 07 	call	0xe56	; 0xe56 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1072:	1f 5f       	subi	r17, 0xFF	; 255
    1074:	10 17       	cp	r17, r16
    1076:	d0 f3       	brcs	.-12     	; 0x106c <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	89 9f       	mul	r24, r25
    1092:	c0 01       	movw	r24, r0
    1094:	11 24       	eor	r1, r1
    1096:	24 2f       	mov	r18, r20
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	ac 01       	movw	r20, r24
    109c:	42 9f       	mul	r20, r18
    109e:	c0 01       	movw	r24, r0
    10a0:	43 9f       	mul	r20, r19
    10a2:	90 0d       	add	r25, r0
    10a4:	52 9f       	mul	r21, r18
    10a6:	90 0d       	add	r25, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	0e 94 93 08 	call	0x1126	; 0x1126 <__divmodhi4>
    10b0:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    10b2:	cb 01       	movw	r24, r22
    10b4:	66 e0       	ldi	r22, 0x06	; 6
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__udivmodhi4>
    10bc:	e8 2e       	mov	r14, r24
    10be:	ff 24       	eor	r15, r15
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	12 c0       	rjmp	.+36     	; 0x10ea <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    10c6:	c8 01       	movw	r24, r16
    10c8:	05 96       	adiw	r24, 0x05	; 5
    10ca:	c8 17       	cp	r28, r24
    10cc:	d9 07       	cpc	r29, r25
    10ce:	10 f0       	brcs	.+4      	; 0x10d4 <LCDprogressBar+0x56>
    10d0:	85 e0       	ldi	r24, 0x05	; 5
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    10d4:	c0 17       	cp	r28, r16
    10d6:	d1 07       	cpc	r29, r17
    10d8:	10 f0       	brcs	.+4      	; 0x10de <LCDprogressBar+0x60>
    10da:	8e 2d       	mov	r24, r14
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <LCDprogressBar+0x62>
    10de:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    10e0:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    10e4:	f3 94       	inc	r15
    10e6:	0a 5f       	subi	r16, 0xFA	; 250
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	fd 14       	cp	r15, r13
    10ec:	60 f3       	brcs	.-40     	; 0x10c6 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	08 95       	ret

000010fe <__udivmodhi4>:
    10fe:	aa 1b       	sub	r26, r26
    1100:	bb 1b       	sub	r27, r27
    1102:	51 e1       	ldi	r21, 0x11	; 17
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <__udivmodhi4_ep>

00001106 <__udivmodhi4_loop>:
    1106:	aa 1f       	adc	r26, r26
    1108:	bb 1f       	adc	r27, r27
    110a:	a6 17       	cp	r26, r22
    110c:	b7 07       	cpc	r27, r23
    110e:	10 f0       	brcs	.+4      	; 0x1114 <__udivmodhi4_ep>
    1110:	a6 1b       	sub	r26, r22
    1112:	b7 0b       	sbc	r27, r23

00001114 <__udivmodhi4_ep>:
    1114:	88 1f       	adc	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	5a 95       	dec	r21
    111a:	a9 f7       	brne	.-22     	; 0x1106 <__udivmodhi4_loop>
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	08 95       	ret

00001126 <__divmodhi4>:
    1126:	97 fb       	bst	r25, 7
    1128:	09 2e       	mov	r0, r25
    112a:	07 26       	eor	r0, r23
    112c:	0a d0       	rcall	.+20     	; 0x1142 <__divmodhi4_neg1>
    112e:	77 fd       	sbrc	r23, 7
    1130:	04 d0       	rcall	.+8      	; 0x113a <__divmodhi4_neg2>
    1132:	e5 df       	rcall	.-54     	; 0x10fe <__udivmodhi4>
    1134:	06 d0       	rcall	.+12     	; 0x1142 <__divmodhi4_neg1>
    1136:	00 20       	and	r0, r0
    1138:	1a f4       	brpl	.+6      	; 0x1140 <__divmodhi4_exit>

0000113a <__divmodhi4_neg2>:
    113a:	70 95       	com	r23
    113c:	61 95       	neg	r22
    113e:	7f 4f       	sbci	r23, 0xFF	; 255

00001140 <__divmodhi4_exit>:
    1140:	08 95       	ret

00001142 <__divmodhi4_neg1>:
    1142:	f6 f7       	brtc	.-4      	; 0x1140 <__divmodhi4_exit>
    1144:	90 95       	com	r25
    1146:	81 95       	neg	r24
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	08 95       	ret

0000114c <strcpy>:
    114c:	fb 01       	movw	r30, r22
    114e:	dc 01       	movw	r26, r24
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	00 20       	and	r0, r0
    1156:	e1 f7       	brne	.-8      	; 0x1150 <strcpy+0x4>
    1158:	08 95       	ret

0000115a <fputs>:
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	7c 01       	movw	r14, r24
    1168:	8b 01       	movw	r16, r22
    116a:	db 01       	movw	r26, r22
    116c:	13 96       	adiw	r26, 0x03	; 3
    116e:	8c 91       	ld	r24, X
    1170:	81 fd       	sbrc	r24, 1
    1172:	03 c0       	rjmp	.+6      	; 0x117a <fputs+0x20>
    1174:	cf ef       	ldi	r28, 0xFF	; 255
    1176:	df ef       	ldi	r29, 0xFF	; 255
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <fputs+0x46>
    117a:	c0 e0       	ldi	r28, 0x00	; 0
    117c:	d0 e0       	ldi	r29, 0x00	; 0
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <fputs+0x3c>
    1180:	d8 01       	movw	r26, r16
    1182:	18 96       	adiw	r26, 0x08	; 8
    1184:	ed 91       	ld	r30, X+
    1186:	fc 91       	ld	r31, X
    1188:	19 97       	sbiw	r26, 0x09	; 9
    118a:	b8 01       	movw	r22, r16
    118c:	09 95       	icall
    118e:	89 2b       	or	r24, r25
    1190:	11 f0       	breq	.+4      	; 0x1196 <fputs+0x3c>
    1192:	cf ef       	ldi	r28, 0xFF	; 255
    1194:	df ef       	ldi	r29, 0xFF	; 255
    1196:	f7 01       	movw	r30, r14
    1198:	81 91       	ld	r24, Z+
    119a:	7f 01       	movw	r14, r30
    119c:	88 23       	and	r24, r24
    119e:	81 f7       	brne	.-32     	; 0x1180 <fputs+0x26>
    11a0:	ce 01       	movw	r24, r28
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	08 95       	ret

000011b0 <fscanf>:
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	9e 01       	movw	r18, r28
    11ba:	27 5f       	subi	r18, 0xF7	; 247
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	a9 01       	movw	r20, r18
    11c8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vfscanf>
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <sprintf>:
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	2e 97       	sbiw	r28, 0x0e	; 14
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	0d 89       	ldd	r16, Y+21	; 0x15
    11ec:	1e 89       	ldd	r17, Y+22	; 0x16
    11ee:	86 e0       	ldi	r24, 0x06	; 6
    11f0:	8c 83       	std	Y+4, r24	; 0x04
    11f2:	1a 83       	std	Y+2, r17	; 0x02
    11f4:	09 83       	std	Y+1, r16	; 0x01
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	9f e7       	ldi	r25, 0x7F	; 127
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	9e 01       	movw	r18, r28
    1200:	27 5e       	subi	r18, 0xE7	; 231
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	6f 89       	ldd	r22, Y+23	; 0x17
    120a:	78 8d       	ldd	r23, Y+24	; 0x18
    120c:	a9 01       	movw	r20, r18
    120e:	0e 94 3d 09 	call	0x127a	; 0x127a <vfprintf>
    1212:	2f 81       	ldd	r18, Y+7	; 0x07
    1214:	38 85       	ldd	r19, Y+8	; 0x08
    1216:	02 0f       	add	r16, r18
    1218:	13 1f       	adc	r17, r19
    121a:	f8 01       	movw	r30, r16
    121c:	10 82       	st	Z, r1
    121e:	2e 96       	adiw	r28, 0x0e	; 14
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <sscanf>:
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	2e 97       	sbiw	r28, 0x0e	; 14
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	85 e0       	ldi	r24, 0x05	; 5
    124a:	8c 83       	std	Y+4, r24	; 0x04
    124c:	8b 89       	ldd	r24, Y+19	; 0x13
    124e:	9c 89       	ldd	r25, Y+20	; 0x14
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	9e 01       	movw	r18, r28
    1256:	29 5e       	subi	r18, 0xE9	; 233
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	6d 89       	ldd	r22, Y+21	; 0x15
    1260:	7e 89       	ldd	r23, Y+22	; 0x16
    1262:	a9 01       	movw	r20, r18
    1264:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vfscanf>
    1268:	2e 96       	adiw	r28, 0x0e	; 14
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <vfprintf>:
    127a:	2f 92       	push	r2
    127c:	3f 92       	push	r3
    127e:	4f 92       	push	r4
    1280:	5f 92       	push	r5
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	2b 97       	sbiw	r28, 0x0b	; 11
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	3c 01       	movw	r6, r24
    12b0:	2b 01       	movw	r4, r22
    12b2:	5a 01       	movw	r10, r20
    12b4:	fc 01       	movw	r30, r24
    12b6:	17 82       	std	Z+7, r1	; 0x07
    12b8:	16 82       	std	Z+6, r1	; 0x06
    12ba:	83 81       	ldd	r24, Z+3	; 0x03
    12bc:	81 fd       	sbrc	r24, 1
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <vfprintf+0x4c>
    12c0:	6f ef       	ldi	r22, 0xFF	; 255
    12c2:	7f ef       	ldi	r23, 0xFF	; 255
    12c4:	c6 c1       	rjmp	.+908    	; 0x1652 <vfprintf+0x3d8>
    12c6:	9a e0       	ldi	r25, 0x0A	; 10
    12c8:	89 2e       	mov	r8, r25
    12ca:	1e 01       	movw	r2, r28
    12cc:	08 94       	sec
    12ce:	21 1c       	adc	r2, r1
    12d0:	31 1c       	adc	r3, r1
    12d2:	f3 01       	movw	r30, r6
    12d4:	23 81       	ldd	r18, Z+3	; 0x03
    12d6:	f2 01       	movw	r30, r4
    12d8:	23 fd       	sbrc	r18, 3
    12da:	85 91       	lpm	r24, Z+
    12dc:	23 ff       	sbrs	r18, 3
    12de:	81 91       	ld	r24, Z+
    12e0:	2f 01       	movw	r4, r30
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <vfprintf+0x6e>
    12e6:	b2 c1       	rjmp	.+868    	; 0x164c <vfprintf+0x3d2>
    12e8:	85 32       	cpi	r24, 0x25	; 37
    12ea:	39 f4       	brne	.+14     	; 0x12fa <vfprintf+0x80>
    12ec:	23 fd       	sbrc	r18, 3
    12ee:	85 91       	lpm	r24, Z+
    12f0:	23 ff       	sbrs	r18, 3
    12f2:	81 91       	ld	r24, Z+
    12f4:	2f 01       	movw	r4, r30
    12f6:	85 32       	cpi	r24, 0x25	; 37
    12f8:	29 f4       	brne	.+10     	; 0x1304 <vfprintf+0x8a>
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	b3 01       	movw	r22, r6
    12fe:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1302:	e7 cf       	rjmp	.-50     	; 0x12d2 <vfprintf+0x58>
    1304:	98 2f       	mov	r25, r24
    1306:	ff 24       	eor	r15, r15
    1308:	ee 24       	eor	r14, r14
    130a:	99 24       	eor	r9, r9
    130c:	ff e1       	ldi	r31, 0x1F	; 31
    130e:	ff 15       	cp	r31, r15
    1310:	d0 f0       	brcs	.+52     	; 0x1346 <vfprintf+0xcc>
    1312:	9b 32       	cpi	r25, 0x2B	; 43
    1314:	69 f0       	breq	.+26     	; 0x1330 <vfprintf+0xb6>
    1316:	9c 32       	cpi	r25, 0x2C	; 44
    1318:	28 f4       	brcc	.+10     	; 0x1324 <vfprintf+0xaa>
    131a:	90 32       	cpi	r25, 0x20	; 32
    131c:	59 f0       	breq	.+22     	; 0x1334 <vfprintf+0xba>
    131e:	93 32       	cpi	r25, 0x23	; 35
    1320:	91 f4       	brne	.+36     	; 0x1346 <vfprintf+0xcc>
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <vfprintf+0xc6>
    1324:	9d 32       	cpi	r25, 0x2D	; 45
    1326:	49 f0       	breq	.+18     	; 0x133a <vfprintf+0xc0>
    1328:	90 33       	cpi	r25, 0x30	; 48
    132a:	69 f4       	brne	.+26     	; 0x1346 <vfprintf+0xcc>
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	24 c0       	rjmp	.+72     	; 0x1378 <vfprintf+0xfe>
    1330:	52 e0       	ldi	r21, 0x02	; 2
    1332:	f5 2a       	or	r15, r21
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	f8 2a       	or	r15, r24
    1338:	28 c0       	rjmp	.+80     	; 0x138a <vfprintf+0x110>
    133a:	98 e0       	ldi	r25, 0x08	; 8
    133c:	f9 2a       	or	r15, r25
    133e:	25 c0       	rjmp	.+74     	; 0x138a <vfprintf+0x110>
    1340:	e0 e1       	ldi	r30, 0x10	; 16
    1342:	fe 2a       	or	r15, r30
    1344:	22 c0       	rjmp	.+68     	; 0x138a <vfprintf+0x110>
    1346:	f7 fc       	sbrc	r15, 7
    1348:	29 c0       	rjmp	.+82     	; 0x139c <vfprintf+0x122>
    134a:	89 2f       	mov	r24, r25
    134c:	80 53       	subi	r24, 0x30	; 48
    134e:	8a 30       	cpi	r24, 0x0A	; 10
    1350:	70 f4       	brcc	.+28     	; 0x136e <vfprintf+0xf4>
    1352:	f6 fe       	sbrs	r15, 6
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <vfprintf+0xe6>
    1356:	98 9c       	mul	r9, r8
    1358:	90 2c       	mov	r9, r0
    135a:	11 24       	eor	r1, r1
    135c:	98 0e       	add	r9, r24
    135e:	15 c0       	rjmp	.+42     	; 0x138a <vfprintf+0x110>
    1360:	e8 9c       	mul	r14, r8
    1362:	e0 2c       	mov	r14, r0
    1364:	11 24       	eor	r1, r1
    1366:	e8 0e       	add	r14, r24
    1368:	f0 e2       	ldi	r31, 0x20	; 32
    136a:	ff 2a       	or	r15, r31
    136c:	0e c0       	rjmp	.+28     	; 0x138a <vfprintf+0x110>
    136e:	9e 32       	cpi	r25, 0x2E	; 46
    1370:	29 f4       	brne	.+10     	; 0x137c <vfprintf+0x102>
    1372:	f6 fc       	sbrc	r15, 6
    1374:	6b c1       	rjmp	.+726    	; 0x164c <vfprintf+0x3d2>
    1376:	40 e4       	ldi	r20, 0x40	; 64
    1378:	f4 2a       	or	r15, r20
    137a:	07 c0       	rjmp	.+14     	; 0x138a <vfprintf+0x110>
    137c:	9c 36       	cpi	r25, 0x6C	; 108
    137e:	19 f4       	brne	.+6      	; 0x1386 <vfprintf+0x10c>
    1380:	50 e8       	ldi	r21, 0x80	; 128
    1382:	f5 2a       	or	r15, r21
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0x110>
    1386:	98 36       	cpi	r25, 0x68	; 104
    1388:	49 f4       	brne	.+18     	; 0x139c <vfprintf+0x122>
    138a:	f2 01       	movw	r30, r4
    138c:	23 fd       	sbrc	r18, 3
    138e:	95 91       	lpm	r25, Z+
    1390:	23 ff       	sbrs	r18, 3
    1392:	91 91       	ld	r25, Z+
    1394:	2f 01       	movw	r4, r30
    1396:	99 23       	and	r25, r25
    1398:	09 f0       	breq	.+2      	; 0x139c <vfprintf+0x122>
    139a:	b8 cf       	rjmp	.-144    	; 0x130c <vfprintf+0x92>
    139c:	89 2f       	mov	r24, r25
    139e:	85 54       	subi	r24, 0x45	; 69
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	18 f0       	brcs	.+6      	; 0x13aa <vfprintf+0x130>
    13a4:	80 52       	subi	r24, 0x20	; 32
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	38 f4       	brcc	.+14     	; 0x13b8 <vfprintf+0x13e>
    13aa:	44 e0       	ldi	r20, 0x04	; 4
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	a4 0e       	add	r10, r20
    13b0:	b5 1e       	adc	r11, r21
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	59 83       	std	Y+1, r21	; 0x01
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <vfprintf+0x15c>
    13b8:	93 36       	cpi	r25, 0x63	; 99
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <vfprintf+0x14e>
    13bc:	93 37       	cpi	r25, 0x73	; 115
    13be:	79 f0       	breq	.+30     	; 0x13de <vfprintf+0x164>
    13c0:	93 35       	cpi	r25, 0x53	; 83
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <vfprintf+0x14c>
    13c4:	56 c0       	rjmp	.+172    	; 0x1472 <vfprintf+0x1f8>
    13c6:	20 c0       	rjmp	.+64     	; 0x1408 <vfprintf+0x18e>
    13c8:	f5 01       	movw	r30, r10
    13ca:	80 81       	ld	r24, Z
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	42 e0       	ldi	r20, 0x02	; 2
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	a4 0e       	add	r10, r20
    13d4:	b5 1e       	adc	r11, r21
    13d6:	61 01       	movw	r12, r2
    13d8:	01 e0       	ldi	r16, 0x01	; 1
    13da:	10 e0       	ldi	r17, 0x00	; 0
    13dc:	12 c0       	rjmp	.+36     	; 0x1402 <vfprintf+0x188>
    13de:	f5 01       	movw	r30, r10
    13e0:	c0 80       	ld	r12, Z
    13e2:	d1 80       	ldd	r13, Z+1	; 0x01
    13e4:	f6 fc       	sbrc	r15, 6
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <vfprintf+0x174>
    13e8:	6f ef       	ldi	r22, 0xFF	; 255
    13ea:	7f ef       	ldi	r23, 0xFF	; 255
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <vfprintf+0x178>
    13ee:	69 2d       	mov	r22, r9
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	42 e0       	ldi	r20, 0x02	; 2
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	a4 0e       	add	r10, r20
    13f8:	b5 1e       	adc	r11, r21
    13fa:	c6 01       	movw	r24, r12
    13fc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <strnlen>
    1400:	8c 01       	movw	r16, r24
    1402:	5f e7       	ldi	r21, 0x7F	; 127
    1404:	f5 22       	and	r15, r21
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <vfprintf+0x1b6>
    1408:	f5 01       	movw	r30, r10
    140a:	c0 80       	ld	r12, Z
    140c:	d1 80       	ldd	r13, Z+1	; 0x01
    140e:	f6 fc       	sbrc	r15, 6
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <vfprintf+0x19e>
    1412:	6f ef       	ldi	r22, 0xFF	; 255
    1414:	7f ef       	ldi	r23, 0xFF	; 255
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x1a2>
    1418:	69 2d       	mov	r22, r9
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	42 e0       	ldi	r20, 0x02	; 2
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	a4 0e       	add	r10, r20
    1422:	b5 1e       	adc	r11, r21
    1424:	c6 01       	movw	r24, r12
    1426:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <strnlen_P>
    142a:	8c 01       	movw	r16, r24
    142c:	50 e8       	ldi	r21, 0x80	; 128
    142e:	f5 2a       	or	r15, r21
    1430:	f3 fe       	sbrs	r15, 3
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <vfprintf+0x1c8>
    1434:	1a c0       	rjmp	.+52     	; 0x146a <vfprintf+0x1f0>
    1436:	80 e2       	ldi	r24, 0x20	; 32
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	b3 01       	movw	r22, r6
    143c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1440:	ea 94       	dec	r14
    1442:	8e 2d       	mov	r24, r14
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	08 17       	cp	r16, r24
    1448:	19 07       	cpc	r17, r25
    144a:	a8 f3       	brcs	.-22     	; 0x1436 <vfprintf+0x1bc>
    144c:	0e c0       	rjmp	.+28     	; 0x146a <vfprintf+0x1f0>
    144e:	f6 01       	movw	r30, r12
    1450:	f7 fc       	sbrc	r15, 7
    1452:	85 91       	lpm	r24, Z+
    1454:	f7 fe       	sbrs	r15, 7
    1456:	81 91       	ld	r24, Z+
    1458:	6f 01       	movw	r12, r30
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	b3 01       	movw	r22, r6
    145e:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1462:	e1 10       	cpse	r14, r1
    1464:	ea 94       	dec	r14
    1466:	01 50       	subi	r16, 0x01	; 1
    1468:	10 40       	sbci	r17, 0x00	; 0
    146a:	01 15       	cp	r16, r1
    146c:	11 05       	cpc	r17, r1
    146e:	79 f7       	brne	.-34     	; 0x144e <vfprintf+0x1d4>
    1470:	ea c0       	rjmp	.+468    	; 0x1646 <vfprintf+0x3cc>
    1472:	94 36       	cpi	r25, 0x64	; 100
    1474:	11 f0       	breq	.+4      	; 0x147a <vfprintf+0x200>
    1476:	99 36       	cpi	r25, 0x69	; 105
    1478:	69 f5       	brne	.+90     	; 0x14d4 <vfprintf+0x25a>
    147a:	f7 fe       	sbrs	r15, 7
    147c:	08 c0       	rjmp	.+16     	; 0x148e <vfprintf+0x214>
    147e:	f5 01       	movw	r30, r10
    1480:	20 81       	ld	r18, Z
    1482:	31 81       	ldd	r19, Z+1	; 0x01
    1484:	42 81       	ldd	r20, Z+2	; 0x02
    1486:	53 81       	ldd	r21, Z+3	; 0x03
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0a c0       	rjmp	.+20     	; 0x14a2 <vfprintf+0x228>
    148e:	f5 01       	movw	r30, r10
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	9c 01       	movw	r18, r24
    1496:	44 27       	eor	r20, r20
    1498:	37 fd       	sbrc	r19, 7
    149a:	40 95       	com	r20
    149c:	54 2f       	mov	r21, r20
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a8 0e       	add	r10, r24
    14a4:	b9 1e       	adc	r11, r25
    14a6:	9f e6       	ldi	r25, 0x6F	; 111
    14a8:	f9 22       	and	r15, r25
    14aa:	57 ff       	sbrs	r21, 7
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <vfprintf+0x246>
    14ae:	50 95       	com	r21
    14b0:	40 95       	com	r20
    14b2:	30 95       	com	r19
    14b4:	21 95       	neg	r18
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	4f 4f       	sbci	r20, 0xFF	; 255
    14ba:	5f 4f       	sbci	r21, 0xFF	; 255
    14bc:	e0 e8       	ldi	r30, 0x80	; 128
    14be:	fe 2a       	or	r15, r30
    14c0:	ca 01       	movw	r24, r20
    14c2:	b9 01       	movw	r22, r18
    14c4:	a1 01       	movw	r20, r2
    14c6:	2a e0       	ldi	r18, 0x0A	; 10
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__ultoa_invert>
    14ce:	d8 2e       	mov	r13, r24
    14d0:	d2 18       	sub	r13, r2
    14d2:	40 c0       	rjmp	.+128    	; 0x1554 <vfprintf+0x2da>
    14d4:	95 37       	cpi	r25, 0x75	; 117
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <vfprintf+0x268>
    14d8:	1f 2d       	mov	r17, r15
    14da:	1f 7e       	andi	r17, 0xEF	; 239
    14dc:	2a e0       	ldi	r18, 0x0A	; 10
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	1d c0       	rjmp	.+58     	; 0x151c <vfprintf+0x2a2>
    14e2:	1f 2d       	mov	r17, r15
    14e4:	19 7f       	andi	r17, 0xF9	; 249
    14e6:	9f 36       	cpi	r25, 0x6F	; 111
    14e8:	61 f0       	breq	.+24     	; 0x1502 <vfprintf+0x288>
    14ea:	90 37       	cpi	r25, 0x70	; 112
    14ec:	20 f4       	brcc	.+8      	; 0x14f6 <vfprintf+0x27c>
    14ee:	98 35       	cpi	r25, 0x58	; 88
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <vfprintf+0x27a>
    14f2:	ac c0       	rjmp	.+344    	; 0x164c <vfprintf+0x3d2>
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <vfprintf+0x29a>
    14f6:	90 37       	cpi	r25, 0x70	; 112
    14f8:	39 f0       	breq	.+14     	; 0x1508 <vfprintf+0x28e>
    14fa:	98 37       	cpi	r25, 0x78	; 120
    14fc:	09 f0       	breq	.+2      	; 0x1500 <vfprintf+0x286>
    14fe:	a6 c0       	rjmp	.+332    	; 0x164c <vfprintf+0x3d2>
    1500:	04 c0       	rjmp	.+8      	; 0x150a <vfprintf+0x290>
    1502:	28 e0       	ldi	r18, 0x08	; 8
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	0a c0       	rjmp	.+20     	; 0x151c <vfprintf+0x2a2>
    1508:	10 61       	ori	r17, 0x10	; 16
    150a:	14 fd       	sbrc	r17, 4
    150c:	14 60       	ori	r17, 0x04	; 4
    150e:	20 e1       	ldi	r18, 0x10	; 16
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	04 c0       	rjmp	.+8      	; 0x151c <vfprintf+0x2a2>
    1514:	14 fd       	sbrc	r17, 4
    1516:	16 60       	ori	r17, 0x06	; 6
    1518:	20 e1       	ldi	r18, 0x10	; 16
    151a:	32 e0       	ldi	r19, 0x02	; 2
    151c:	17 ff       	sbrs	r17, 7
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <vfprintf+0x2b6>
    1520:	f5 01       	movw	r30, r10
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <vfprintf+0x2c6>
    1530:	f5 01       	movw	r30, r10
    1532:	80 81       	ld	r24, Z
    1534:	91 81       	ldd	r25, Z+1	; 0x01
    1536:	bc 01       	movw	r22, r24
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	42 e0       	ldi	r20, 0x02	; 2
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	a4 0e       	add	r10, r20
    1542:	b5 1e       	adc	r11, r21
    1544:	a1 01       	movw	r20, r2
    1546:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__ultoa_invert>
    154a:	d8 2e       	mov	r13, r24
    154c:	d2 18       	sub	r13, r2
    154e:	8f e7       	ldi	r24, 0x7F	; 127
    1550:	f8 2e       	mov	r15, r24
    1552:	f1 22       	and	r15, r17
    1554:	f6 fe       	sbrs	r15, 6
    1556:	0b c0       	rjmp	.+22     	; 0x156e <vfprintf+0x2f4>
    1558:	5e ef       	ldi	r21, 0xFE	; 254
    155a:	f5 22       	and	r15, r21
    155c:	d9 14       	cp	r13, r9
    155e:	38 f4       	brcc	.+14     	; 0x156e <vfprintf+0x2f4>
    1560:	f4 fe       	sbrs	r15, 4
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <vfprintf+0x2f8>
    1564:	f2 fc       	sbrc	r15, 2
    1566:	05 c0       	rjmp	.+10     	; 0x1572 <vfprintf+0x2f8>
    1568:	8f ee       	ldi	r24, 0xEF	; 239
    156a:	f8 22       	and	r15, r24
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x2f8>
    156e:	1d 2d       	mov	r17, r13
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <vfprintf+0x2fa>
    1572:	19 2d       	mov	r17, r9
    1574:	f4 fe       	sbrs	r15, 4
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <vfprintf+0x318>
    1578:	fe 01       	movw	r30, r28
    157a:	ed 0d       	add	r30, r13
    157c:	f1 1d       	adc	r31, r1
    157e:	80 81       	ld	r24, Z
    1580:	80 33       	cpi	r24, 0x30	; 48
    1582:	19 f4       	brne	.+6      	; 0x158a <vfprintf+0x310>
    1584:	99 ee       	ldi	r25, 0xE9	; 233
    1586:	f9 22       	and	r15, r25
    1588:	08 c0       	rjmp	.+16     	; 0x159a <vfprintf+0x320>
    158a:	1f 5f       	subi	r17, 0xFF	; 255
    158c:	f2 fe       	sbrs	r15, 2
    158e:	05 c0       	rjmp	.+10     	; 0x159a <vfprintf+0x320>
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <vfprintf+0x31e>
    1592:	8f 2d       	mov	r24, r15
    1594:	86 78       	andi	r24, 0x86	; 134
    1596:	09 f0       	breq	.+2      	; 0x159a <vfprintf+0x320>
    1598:	1f 5f       	subi	r17, 0xFF	; 255
    159a:	0f 2d       	mov	r16, r15
    159c:	f3 fc       	sbrc	r15, 3
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <vfprintf+0x34e>
    15a0:	f0 fe       	sbrs	r15, 0
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <vfprintf+0x348>
    15a4:	1e 15       	cp	r17, r14
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <vfprintf+0x332>
    15a8:	9d 2c       	mov	r9, r13
    15aa:	0b c0       	rjmp	.+22     	; 0x15c2 <vfprintf+0x348>
    15ac:	9d 2c       	mov	r9, r13
    15ae:	9e 0c       	add	r9, r14
    15b0:	91 1a       	sub	r9, r17
    15b2:	1e 2d       	mov	r17, r14
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0x348>
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	b3 01       	movw	r22, r6
    15bc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    15c0:	1f 5f       	subi	r17, 0xFF	; 255
    15c2:	1e 15       	cp	r17, r14
    15c4:	c0 f3       	brcs	.-16     	; 0x15b6 <vfprintf+0x33c>
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <vfprintf+0x356>
    15c8:	1e 15       	cp	r17, r14
    15ca:	10 f4       	brcc	.+4      	; 0x15d0 <vfprintf+0x356>
    15cc:	e1 1a       	sub	r14, r17
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <vfprintf+0x358>
    15d0:	ee 24       	eor	r14, r14
    15d2:	04 ff       	sbrs	r16, 4
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <vfprintf+0x37a>
    15d6:	80 e3       	ldi	r24, 0x30	; 48
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	b3 01       	movw	r22, r6
    15dc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    15e0:	02 ff       	sbrs	r16, 2
    15e2:	1d c0       	rjmp	.+58     	; 0x161e <vfprintf+0x3a4>
    15e4:	01 fd       	sbrc	r16, 1
    15e6:	03 c0       	rjmp	.+6      	; 0x15ee <vfprintf+0x374>
    15e8:	88 e7       	ldi	r24, 0x78	; 120
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <vfprintf+0x390>
    15ee:	88 e5       	ldi	r24, 0x58	; 88
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0b c0       	rjmp	.+22     	; 0x160a <vfprintf+0x390>
    15f4:	80 2f       	mov	r24, r16
    15f6:	86 78       	andi	r24, 0x86	; 134
    15f8:	91 f0       	breq	.+36     	; 0x161e <vfprintf+0x3a4>
    15fa:	01 ff       	sbrs	r16, 1
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x388>
    15fe:	8b e2       	ldi	r24, 0x2B	; 43
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <vfprintf+0x38a>
    1602:	80 e2       	ldi	r24, 0x20	; 32
    1604:	f7 fc       	sbrc	r15, 7
    1606:	8d e2       	ldi	r24, 0x2D	; 45
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b3 01       	movw	r22, r6
    160c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1610:	06 c0       	rjmp	.+12     	; 0x161e <vfprintf+0x3a4>
    1612:	80 e3       	ldi	r24, 0x30	; 48
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	b3 01       	movw	r22, r6
    1618:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    161c:	9a 94       	dec	r9
    161e:	d9 14       	cp	r13, r9
    1620:	c0 f3       	brcs	.-16     	; 0x1612 <vfprintf+0x398>
    1622:	da 94       	dec	r13
    1624:	f1 01       	movw	r30, r2
    1626:	ed 0d       	add	r30, r13
    1628:	f1 1d       	adc	r31, r1
    162a:	80 81       	ld	r24, Z
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	b3 01       	movw	r22, r6
    1630:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1634:	dd 20       	and	r13, r13
    1636:	a9 f7       	brne	.-22     	; 0x1622 <vfprintf+0x3a8>
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <vfprintf+0x3cc>
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b3 01       	movw	r22, r6
    1640:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <fputc>
    1644:	ea 94       	dec	r14
    1646:	ee 20       	and	r14, r14
    1648:	c1 f7       	brne	.-16     	; 0x163a <vfprintf+0x3c0>
    164a:	43 ce       	rjmp	.-890    	; 0x12d2 <vfprintf+0x58>
    164c:	f3 01       	movw	r30, r6
    164e:	66 81       	ldd	r22, Z+6	; 0x06
    1650:	77 81       	ldd	r23, Z+7	; 0x07
    1652:	cb 01       	movw	r24, r22
    1654:	2b 96       	adiw	r28, 0x0b	; 11
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	7f 90       	pop	r7
    167a:	6f 90       	pop	r6
    167c:	5f 90       	pop	r5
    167e:	4f 90       	pop	r4
    1680:	3f 90       	pop	r3
    1682:	2f 90       	pop	r2
    1684:	08 95       	ret

00001686 <putval>:
    1686:	fc 01       	movw	r30, r24
    1688:	20 fd       	sbrc	r18, 0
    168a:	08 c0       	rjmp	.+16     	; 0x169c <putval+0x16>
    168c:	23 fd       	sbrc	r18, 3
    168e:	05 c0       	rjmp	.+10     	; 0x169a <putval+0x14>
    1690:	22 ff       	sbrs	r18, 2
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <putval+0x12>
    1694:	73 83       	std	Z+3, r23	; 0x03
    1696:	62 83       	std	Z+2, r22	; 0x02
    1698:	51 83       	std	Z+1, r21	; 0x01
    169a:	40 83       	st	Z, r20
    169c:	08 95       	ret

0000169e <mulacc>:
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	44 ff       	sbrs	r20, 4
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <mulacc+0x10>
    16aa:	33 e0       	ldi	r19, 0x03	; 3
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <mulacc+0x32>
    16ae:	46 ff       	sbrs	r20, 6
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <mulacc+0x18>
    16b2:	34 e0       	ldi	r19, 0x04	; 4
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <mulacc+0x32>
    16b6:	db 01       	movw	r26, r22
    16b8:	fc 01       	movw	r30, r24
    16ba:	aa 0f       	add	r26, r26
    16bc:	bb 1f       	adc	r27, r27
    16be:	ee 1f       	adc	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	10 94       	com	r1
    16c4:	d1 f7       	brne	.-12     	; 0x16ba <mulacc+0x1c>
    16c6:	6a 0f       	add	r22, r26
    16c8:	7b 1f       	adc	r23, r27
    16ca:	8e 1f       	adc	r24, r30
    16cc:	9f 1f       	adc	r25, r31
    16ce:	31 e0       	ldi	r19, 0x01	; 1
    16d0:	66 0f       	add	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	31 50       	subi	r19, 0x01	; 1
    16da:	d1 f7       	brne	.-12     	; 0x16d0 <mulacc+0x32>
    16dc:	7b 01       	movw	r14, r22
    16de:	8c 01       	movw	r16, r24
    16e0:	e2 0e       	add	r14, r18
    16e2:	f1 1c       	adc	r15, r1
    16e4:	01 1d       	adc	r16, r1
    16e6:	11 1d       	adc	r17, r1
    16e8:	a8 01       	movw	r20, r16
    16ea:	97 01       	movw	r18, r14
    16ec:	b7 01       	movw	r22, r14
    16ee:	ca 01       	movw	r24, r20
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	08 95       	ret

000016fa <skip_spaces>:
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	8c 01       	movw	r16, r24
    1704:	c8 01       	movw	r24, r16
    1706:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    170a:	ec 01       	movw	r28, r24
    170c:	97 fd       	sbrc	r25, 7
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <skip_spaces+0x26>
    1710:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <isspace>
    1714:	89 2b       	or	r24, r25
    1716:	b1 f7       	brne	.-20     	; 0x1704 <skip_spaces+0xa>
    1718:	ce 01       	movw	r24, r28
    171a:	b8 01       	movw	r22, r16
    171c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <ungetc>
    1720:	ce 01       	movw	r24, r28
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <conv_int>:
    172c:	af 92       	push	r10
    172e:	bf 92       	push	r11
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	c6 2e       	mov	r12, r22
    1744:	5a 01       	movw	r10, r20
    1746:	12 2f       	mov	r17, r18
    1748:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    174c:	ac 01       	movw	r20, r24
    174e:	8b 32       	cpi	r24, 0x2B	; 43
    1750:	19 f0       	breq	.+6      	; 0x1758 <conv_int+0x2c>
    1752:	8d 32       	cpi	r24, 0x2D	; 45
    1754:	51 f4       	brne	.+20     	; 0x176a <conv_int+0x3e>
    1756:	10 68       	ori	r17, 0x80	; 128
    1758:	ca 94       	dec	r12
    175a:	09 f4       	brne	.+2      	; 0x175e <conv_int+0x32>
    175c:	6d c0       	rjmp	.+218    	; 0x1838 <conv_int+0x10c>
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    1764:	ac 01       	movw	r20, r24
    1766:	97 fd       	sbrc	r25, 7
    1768:	67 c0       	rjmp	.+206    	; 0x1838 <conv_int+0x10c>
    176a:	6d ef       	ldi	r22, 0xFD	; 253
    176c:	d6 2e       	mov	r13, r22
    176e:	d1 22       	and	r13, r17
    1770:	8d 2d       	mov	r24, r13
    1772:	80 73       	andi	r24, 0x30	; 48
    1774:	01 f5       	brne	.+64     	; 0x17b6 <conv_int+0x8a>
    1776:	40 33       	cpi	r20, 0x30	; 48
    1778:	f1 f4       	brne	.+60     	; 0x17b6 <conv_int+0x8a>
    177a:	ca 94       	dec	r12
    177c:	09 f4       	brne	.+2      	; 0x1780 <conv_int+0x54>
    177e:	47 c0       	rjmp	.+142    	; 0x180e <conv_int+0xe2>
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    1786:	ac 01       	movw	r20, r24
    1788:	97 fd       	sbrc	r25, 7
    178a:	41 c0       	rjmp	.+130    	; 0x180e <conv_int+0xe2>
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	d8 2a       	or	r13, r24
    1790:	48 37       	cpi	r20, 0x78	; 120
    1792:	11 f0       	breq	.+4      	; 0x1798 <conv_int+0x6c>
    1794:	48 35       	cpi	r20, 0x58	; 88
    1796:	59 f4       	brne	.+22     	; 0x17ae <conv_int+0x82>
    1798:	80 e4       	ldi	r24, 0x40	; 64
    179a:	d8 2a       	or	r13, r24
    179c:	ca 94       	dec	r12
    179e:	b9 f1       	breq	.+110    	; 0x180e <conv_int+0xe2>
    17a0:	ce 01       	movw	r24, r28
    17a2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    17a6:	ac 01       	movw	r20, r24
    17a8:	99 23       	and	r25, r25
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <conv_int+0x8a>
    17ac:	30 c0       	rjmp	.+96     	; 0x180e <conv_int+0xe2>
    17ae:	d6 fc       	sbrc	r13, 6
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <conv_int+0x8a>
    17b2:	80 e1       	ldi	r24, 0x10	; 16
    17b4:	d8 2a       	or	r13, r24
    17b6:	ee 24       	eor	r14, r14
    17b8:	ff 24       	eor	r15, r15
    17ba:	87 01       	movw	r16, r14
    17bc:	24 2f       	mov	r18, r20
    17be:	20 53       	subi	r18, 0x30	; 48
    17c0:	28 30       	cpi	r18, 0x08	; 8
    17c2:	88 f0       	brcs	.+34     	; 0x17e6 <conv_int+0xba>
    17c4:	d4 fc       	sbrc	r13, 4
    17c6:	09 c0       	rjmp	.+18     	; 0x17da <conv_int+0xae>
    17c8:	2a 30       	cpi	r18, 0x0A	; 10
    17ca:	68 f0       	brcs	.+26     	; 0x17e6 <conv_int+0xba>
    17cc:	d6 fe       	sbrs	r13, 6
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <conv_int+0xae>
    17d0:	2f 7d       	andi	r18, 0xDF	; 223
    17d2:	82 2f       	mov	r24, r18
    17d4:	81 51       	subi	r24, 0x11	; 17
    17d6:	86 30       	cpi	r24, 0x06	; 6
    17d8:	28 f0       	brcs	.+10     	; 0x17e4 <conv_int+0xb8>
    17da:	ca 01       	movw	r24, r20
    17dc:	be 01       	movw	r22, r28
    17de:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <ungetc>
    17e2:	12 c0       	rjmp	.+36     	; 0x1808 <conv_int+0xdc>
    17e4:	27 50       	subi	r18, 0x07	; 7
    17e6:	c8 01       	movw	r24, r16
    17e8:	b7 01       	movw	r22, r14
    17ea:	4d 2d       	mov	r20, r13
    17ec:	0e 94 4f 0b 	call	0x169e	; 0x169e <mulacc>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	d8 2a       	or	r13, r24
    17f8:	ca 94       	dec	r12
    17fa:	61 f0       	breq	.+24     	; 0x1814 <conv_int+0xe8>
    17fc:	ce 01       	movw	r24, r28
    17fe:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    1802:	ac 01       	movw	r20, r24
    1804:	97 ff       	sbrs	r25, 7
    1806:	da cf       	rjmp	.-76     	; 0x17bc <conv_int+0x90>
    1808:	d1 fc       	sbrc	r13, 1
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <conv_int+0xe8>
    180c:	15 c0       	rjmp	.+42     	; 0x1838 <conv_int+0x10c>
    180e:	ee 24       	eor	r14, r14
    1810:	ff 24       	eor	r15, r15
    1812:	87 01       	movw	r16, r14
    1814:	d7 fe       	sbrs	r13, 7
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <conv_int+0xfc>
    1818:	10 95       	com	r17
    181a:	00 95       	com	r16
    181c:	f0 94       	com	r15
    181e:	e0 94       	com	r14
    1820:	e1 1c       	adc	r14, r1
    1822:	f1 1c       	adc	r15, r1
    1824:	01 1d       	adc	r16, r1
    1826:	11 1d       	adc	r17, r1
    1828:	c5 01       	movw	r24, r10
    182a:	b8 01       	movw	r22, r16
    182c:	a7 01       	movw	r20, r14
    182e:	2d 2d       	mov	r18, r13
    1830:	0e 94 43 0b 	call	0x1686	; 0x1686 <putval>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	01 c0       	rjmp	.+2      	; 0x183a <conv_int+0x10e>
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	bf 90       	pop	r11
    184c:	af 90       	pop	r10
    184e:	08 95       	ret

00001850 <conv_brk>:
    1850:	6f 92       	push	r6
    1852:	7f 92       	push	r7
    1854:	8f 92       	push	r8
    1856:	9f 92       	push	r9
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	a0 97       	sbiw	r28, 0x20	; 32
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	6c 01       	movw	r12, r24
    187e:	a6 2e       	mov	r10, r22
    1880:	8a 01       	movw	r16, r20
    1882:	79 01       	movw	r14, r18
    1884:	fe 01       	movw	r30, r28
    1886:	31 96       	adiw	r30, 0x01	; 1
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	df 01       	movw	r26, r30
    188c:	1d 92       	st	X+, r1
    188e:	8a 95       	dec	r24
    1890:	e9 f7       	brne	.-6      	; 0x188c <conv_brk+0x3c>
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	4f 01       	movw	r8, r30
    189e:	a1 e0       	ldi	r26, 0x01	; 1
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	f6 01       	movw	r30, r12
    18a4:	83 81       	ldd	r24, Z+3	; 0x03
    18a6:	f7 01       	movw	r30, r14
    18a8:	83 fd       	sbrc	r24, 3
    18aa:	25 91       	lpm	r18, Z+
    18ac:	83 ff       	sbrs	r24, 3
    18ae:	21 91       	ld	r18, Z+
    18b0:	7f 01       	movw	r14, r30
    18b2:	22 23       	and	r18, r18
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <conv_brk+0x68>
    18b6:	7e c0       	rjmp	.+252    	; 0x19b4 <conv_brk+0x164>
    18b8:	2e 35       	cpi	r18, 0x5E	; 94
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <conv_brk+0x72>
    18bc:	41 15       	cp	r20, r1
    18be:	51 05       	cpc	r21, r1
    18c0:	69 f1       	breq	.+90     	; 0x191c <conv_brk+0xcc>
    18c2:	87 2f       	mov	r24, r23
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	84 17       	cp	r24, r20
    18c8:	95 07       	cpc	r25, r21
    18ca:	44 f4       	brge	.+16     	; 0x18dc <conv_brk+0x8c>
    18cc:	2d 35       	cpi	r18, 0x5D	; 93
    18ce:	51 f1       	breq	.+84     	; 0x1924 <conv_brk+0xd4>
    18d0:	2d 32       	cpi	r18, 0x2D	; 45
    18d2:	21 f4       	brne	.+8      	; 0x18dc <conv_brk+0x8c>
    18d4:	33 23       	and	r19, r19
    18d6:	29 f4       	brne	.+10     	; 0x18e2 <conv_brk+0x92>
    18d8:	31 e0       	ldi	r19, 0x01	; 1
    18da:	21 c0       	rjmp	.+66     	; 0x191e <conv_brk+0xce>
    18dc:	33 23       	and	r19, r19
    18de:	09 f4       	brne	.+2      	; 0x18e2 <conv_brk+0x92>
    18e0:	62 2f       	mov	r22, r18
    18e2:	32 2f       	mov	r19, r18
    18e4:	83 2f       	mov	r24, r19
    18e6:	86 95       	lsr	r24
    18e8:	86 95       	lsr	r24
    18ea:	86 95       	lsr	r24
    18ec:	f4 01       	movw	r30, r8
    18ee:	e8 0f       	add	r30, r24
    18f0:	f1 1d       	adc	r31, r1
    18f2:	83 2f       	mov	r24, r19
    18f4:	87 70       	andi	r24, 0x07	; 7
    18f6:	3d 01       	movw	r6, r26
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <conv_brk+0xae>
    18fa:	66 0c       	add	r6, r6
    18fc:	77 1c       	adc	r7, r7
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <conv_brk+0xaa>
    1902:	20 81       	ld	r18, Z
    1904:	26 29       	or	r18, r6
    1906:	20 83       	st	Z, r18
    1908:	36 17       	cp	r19, r22
    190a:	11 f4       	brne	.+4      	; 0x1910 <conv_brk+0xc0>
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	07 c0       	rjmp	.+14     	; 0x191e <conv_brk+0xce>
    1910:	36 17       	cp	r19, r22
    1912:	10 f4       	brcc	.+4      	; 0x1918 <conv_brk+0xc8>
    1914:	3f 5f       	subi	r19, 0xFF	; 255
    1916:	e6 cf       	rjmp	.-52     	; 0x18e4 <conv_brk+0x94>
    1918:	31 50       	subi	r19, 0x01	; 1
    191a:	e4 cf       	rjmp	.-56     	; 0x18e4 <conv_brk+0x94>
    191c:	71 e0       	ldi	r23, 0x01	; 1
    191e:	4f 5f       	subi	r20, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	bf cf       	rjmp	.-130    	; 0x18a2 <conv_brk+0x52>
    1924:	33 23       	and	r19, r19
    1926:	19 f0       	breq	.+6      	; 0x192e <conv_brk+0xde>
    1928:	8e 81       	ldd	r24, Y+6	; 0x06
    192a:	80 62       	ori	r24, 0x20	; 32
    192c:	8e 83       	std	Y+6, r24	; 0x06
    192e:	77 23       	and	r23, r23
    1930:	59 f0       	breq	.+22     	; 0x1948 <conv_brk+0xf8>
    1932:	fe 01       	movw	r30, r28
    1934:	31 96       	adiw	r30, 0x01	; 1
    1936:	9e 01       	movw	r18, r28
    1938:	2f 5d       	subi	r18, 0xDF	; 223
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	80 81       	ld	r24, Z
    193e:	80 95       	com	r24
    1940:	81 93       	st	Z+, r24
    1942:	e2 17       	cp	r30, r18
    1944:	f3 07       	cpc	r31, r19
    1946:	d1 f7       	brne	.-12     	; 0x193c <conv_brk+0xec>
    1948:	bb 24       	eor	r11, r11
    194a:	b3 94       	inc	r11
    194c:	4e 01       	movw	r8, r28
    194e:	08 94       	sec
    1950:	81 1c       	adc	r8, r1
    1952:	91 1c       	adc	r9, r1
    1954:	c6 01       	movw	r24, r12
    1956:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    195a:	ac 01       	movw	r20, r24
    195c:	97 fd       	sbrc	r25, 7
    195e:	22 c0       	rjmp	.+68     	; 0x19a4 <conv_brk+0x154>
    1960:	86 95       	lsr	r24
    1962:	86 95       	lsr	r24
    1964:	86 95       	lsr	r24
    1966:	f4 01       	movw	r30, r8
    1968:	e8 0f       	add	r30, r24
    196a:	f1 1d       	adc	r31, r1
    196c:	80 81       	ld	r24, Z
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9a 01       	movw	r18, r20
    1972:	27 70       	andi	r18, 0x07	; 7
    1974:	30 70       	andi	r19, 0x00	; 0
    1976:	02 c0       	rjmp	.+4      	; 0x197c <conv_brk+0x12c>
    1978:	95 95       	asr	r25
    197a:	87 95       	ror	r24
    197c:	2a 95       	dec	r18
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <conv_brk+0x128>
    1980:	80 fd       	sbrc	r24, 0
    1982:	05 c0       	rjmp	.+10     	; 0x198e <conv_brk+0x13e>
    1984:	ca 01       	movw	r24, r20
    1986:	b6 01       	movw	r22, r12
    1988:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <ungetc>
    198c:	0b c0       	rjmp	.+22     	; 0x19a4 <conv_brk+0x154>
    198e:	01 15       	cp	r16, r1
    1990:	11 05       	cpc	r17, r1
    1992:	19 f0       	breq	.+6      	; 0x199a <conv_brk+0x14a>
    1994:	d8 01       	movw	r26, r16
    1996:	4d 93       	st	X+, r20
    1998:	8d 01       	movw	r16, r26
    199a:	aa 94       	dec	r10
    199c:	bb 24       	eor	r11, r11
    199e:	aa 20       	and	r10, r10
    19a0:	c9 f6       	brne	.-78     	; 0x1954 <conv_brk+0x104>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <conv_brk+0x158>
    19a4:	bb 20       	and	r11, r11
    19a6:	31 f4       	brne	.+12     	; 0x19b4 <conv_brk+0x164>
    19a8:	01 15       	cp	r16, r1
    19aa:	11 05       	cpc	r17, r1
    19ac:	29 f0       	breq	.+10     	; 0x19b8 <conv_brk+0x168>
    19ae:	f8 01       	movw	r30, r16
    19b0:	10 82       	st	Z, r1
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <conv_brk+0x168>
    19b4:	ee 24       	eor	r14, r14
    19b6:	ff 24       	eor	r15, r15
    19b8:	c7 01       	movw	r24, r14
    19ba:	a0 96       	adiw	r28, 0x20	; 32
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	bf 90       	pop	r11
    19d8:	af 90       	pop	r10
    19da:	9f 90       	pop	r9
    19dc:	8f 90       	pop	r8
    19de:	7f 90       	pop	r7
    19e0:	6f 90       	pop	r6
    19e2:	08 95       	ret

000019e4 <vfscanf>:
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	5c 01       	movw	r10, r24
    1a02:	6b 01       	movw	r12, r22
    1a04:	3a 01       	movw	r6, r20
    1a06:	fc 01       	movw	r30, r24
    1a08:	17 82       	std	Z+7, r1	; 0x07
    1a0a:	16 82       	std	Z+6, r1	; 0x06
    1a0c:	88 24       	eor	r8, r8
    1a0e:	ea c0       	rjmp	.+468    	; 0x1be4 <vfscanf+0x200>
    1a10:	81 2f       	mov	r24, r17
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <isspace>
    1a18:	89 2b       	or	r24, r25
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <vfscanf+0x40>
    1a1c:	c5 01       	movw	r24, r10
    1a1e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <skip_spaces>
    1a22:	e0 c0       	rjmp	.+448    	; 0x1be4 <vfscanf+0x200>
    1a24:	15 32       	cpi	r17, 0x25	; 37
    1a26:	49 f4       	brne	.+18     	; 0x1a3a <vfscanf+0x56>
    1a28:	f6 01       	movw	r30, r12
    1a2a:	f3 fc       	sbrc	r15, 3
    1a2c:	65 91       	lpm	r22, Z+
    1a2e:	f3 fe       	sbrs	r15, 3
    1a30:	61 91       	ld	r22, Z+
    1a32:	6f 01       	movw	r12, r30
    1a34:	65 32       	cpi	r22, 0x25	; 37
    1a36:	69 f4       	brne	.+26     	; 0x1a52 <vfscanf+0x6e>
    1a38:	15 e2       	ldi	r17, 0x25	; 37
    1a3a:	c5 01       	movw	r24, r10
    1a3c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    1a40:	97 fd       	sbrc	r25, 7
    1a42:	dc c0       	rjmp	.+440    	; 0x1bfc <vfscanf+0x218>
    1a44:	18 17       	cp	r17, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <vfscanf+0x66>
    1a48:	cd c0       	rjmp	.+410    	; 0x1be4 <vfscanf+0x200>
    1a4a:	b5 01       	movw	r22, r10
    1a4c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <ungetc>
    1a50:	da c0       	rjmp	.+436    	; 0x1c06 <vfscanf+0x222>
    1a52:	6a 32       	cpi	r22, 0x2A	; 42
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <vfscanf+0x78>
    1a56:	16 2f       	mov	r17, r22
    1a58:	00 e0       	ldi	r16, 0x00	; 0
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <vfscanf+0x84>
    1a5c:	f3 fc       	sbrc	r15, 3
    1a5e:	15 91       	lpm	r17, Z+
    1a60:	f3 fe       	sbrs	r15, 3
    1a62:	11 91       	ld	r17, Z+
    1a64:	6f 01       	movw	r12, r30
    1a66:	01 e0       	ldi	r16, 0x01	; 1
    1a68:	99 24       	eor	r9, r9
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <vfscanf+0xa6>
    1a6c:	02 60       	ori	r16, 0x02	; 2
    1a6e:	69 2d       	mov	r22, r9
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	0e 94 4f 0b 	call	0x169e	; 0x169e <mulacc>
    1a7c:	96 2e       	mov	r9, r22
    1a7e:	f6 01       	movw	r30, r12
    1a80:	f3 fc       	sbrc	r15, 3
    1a82:	15 91       	lpm	r17, Z+
    1a84:	f3 fe       	sbrs	r15, 3
    1a86:	11 91       	ld	r17, Z+
    1a88:	6f 01       	movw	r12, r30
    1a8a:	21 2f       	mov	r18, r17
    1a8c:	20 53       	subi	r18, 0x30	; 48
    1a8e:	2a 30       	cpi	r18, 0x0A	; 10
    1a90:	68 f3       	brcs	.-38     	; 0x1a6c <vfscanf+0x88>
    1a92:	01 fd       	sbrc	r16, 1
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <vfscanf+0xb8>
    1a96:	99 24       	eor	r9, r9
    1a98:	9a 94       	dec	r9
    1a9a:	03 c0       	rjmp	.+6      	; 0x1aa2 <vfscanf+0xbe>
    1a9c:	99 20       	and	r9, r9
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <vfscanf+0xbe>
    1aa0:	b2 c0       	rjmp	.+356    	; 0x1c06 <vfscanf+0x222>
    1aa2:	18 36       	cpi	r17, 0x68	; 104
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <vfscanf+0xca>
    1aa6:	1c 36       	cpi	r17, 0x6C	; 108
    1aa8:	99 f4       	brne	.+38     	; 0x1ad0 <vfscanf+0xec>
    1aaa:	f6 01       	movw	r30, r12
    1aac:	0b c0       	rjmp	.+22     	; 0x1ac4 <vfscanf+0xe0>
    1aae:	f6 01       	movw	r30, r12
    1ab0:	f3 fc       	sbrc	r15, 3
    1ab2:	65 91       	lpm	r22, Z+
    1ab4:	f3 fe       	sbrs	r15, 3
    1ab6:	61 91       	ld	r22, Z+
    1ab8:	68 36       	cpi	r22, 0x68	; 104
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <vfscanf+0xde>
    1abc:	6f 01       	movw	r12, r30
    1abe:	16 2f       	mov	r17, r22
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <vfscanf+0xec>
    1ac2:	08 60       	ori	r16, 0x08	; 8
    1ac4:	04 60       	ori	r16, 0x04	; 4
    1ac6:	f3 fc       	sbrc	r15, 3
    1ac8:	15 91       	lpm	r17, Z+
    1aca:	f3 fe       	sbrs	r15, 3
    1acc:	11 91       	ld	r17, Z+
    1ace:	6f 01       	movw	r12, r30
    1ad0:	11 23       	and	r17, r17
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <vfscanf+0xf2>
    1ad4:	98 c0       	rjmp	.+304    	; 0x1c06 <vfscanf+0x222>
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	61 2f       	mov	r22, r17
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <strchr_P>
    1ae2:	89 2b       	or	r24, r25
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <vfscanf+0x104>
    1ae6:	8f c0       	rjmp	.+286    	; 0x1c06 <vfscanf+0x222>
    1ae8:	80 2f       	mov	r24, r16
    1aea:	00 ff       	sbrs	r16, 0
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <vfscanf+0x110>
    1aee:	ee 24       	eor	r14, r14
    1af0:	ff 24       	eor	r15, r15
    1af2:	07 c0       	rjmp	.+14     	; 0x1b02 <vfscanf+0x11e>
    1af4:	f3 01       	movw	r30, r6
    1af6:	e0 80       	ld	r14, Z
    1af8:	f1 80       	ldd	r15, Z+1	; 0x01
    1afa:	22 e0       	ldi	r18, 0x02	; 2
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	62 0e       	add	r6, r18
    1b00:	73 1e       	adc	r7, r19
    1b02:	1e 36       	cpi	r17, 0x6E	; 110
    1b04:	51 f4       	brne	.+20     	; 0x1b1a <vfscanf+0x136>
    1b06:	f5 01       	movw	r30, r10
    1b08:	46 81       	ldd	r20, Z+6	; 0x06
    1b0a:	57 81       	ldd	r21, Z+7	; 0x07
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	c7 01       	movw	r24, r14
    1b12:	20 2f       	mov	r18, r16
    1b14:	0e 94 43 0b 	call	0x1686	; 0x1686 <putval>
    1b18:	65 c0       	rjmp	.+202    	; 0x1be4 <vfscanf+0x200>
    1b1a:	13 36       	cpi	r17, 0x63	; 99
    1b1c:	91 f4       	brne	.+36     	; 0x1b42 <vfscanf+0x15e>
    1b1e:	81 fd       	sbrc	r24, 1
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <vfscanf+0x142>
    1b22:	99 24       	eor	r9, r9
    1b24:	93 94       	inc	r9
    1b26:	c5 01       	movw	r24, r10
    1b28:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    1b2c:	97 fd       	sbrc	r25, 7
    1b2e:	66 c0       	rjmp	.+204    	; 0x1bfc <vfscanf+0x218>
    1b30:	e1 14       	cp	r14, r1
    1b32:	f1 04       	cpc	r15, r1
    1b34:	19 f0       	breq	.+6      	; 0x1b3c <vfscanf+0x158>
    1b36:	f7 01       	movw	r30, r14
    1b38:	81 93       	st	Z+, r24
    1b3a:	7f 01       	movw	r14, r30
    1b3c:	9a 94       	dec	r9
    1b3e:	99 f7       	brne	.-26     	; 0x1b26 <vfscanf+0x142>
    1b40:	4f c0       	rjmp	.+158    	; 0x1be0 <vfscanf+0x1fc>
    1b42:	1b 35       	cpi	r17, 0x5B	; 91
    1b44:	59 f4       	brne	.+22     	; 0x1b5c <vfscanf+0x178>
    1b46:	c5 01       	movw	r24, r10
    1b48:	69 2d       	mov	r22, r9
    1b4a:	a7 01       	movw	r20, r14
    1b4c:	96 01       	movw	r18, r12
    1b4e:	0e 94 28 0c 	call	0x1850	; 0x1850 <conv_brk>
    1b52:	6c 01       	movw	r12, r24
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <vfscanf+0x176>
    1b58:	43 c0       	rjmp	.+134    	; 0x1be0 <vfscanf+0x1fc>
    1b5a:	3d c0       	rjmp	.+122    	; 0x1bd6 <vfscanf+0x1f2>
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <skip_spaces>
    1b62:	97 fd       	sbrc	r25, 7
    1b64:	4b c0       	rjmp	.+150    	; 0x1bfc <vfscanf+0x218>
    1b66:	1f 36       	cpi	r17, 0x6F	; 111
    1b68:	59 f1       	breq	.+86     	; 0x1bc0 <vfscanf+0x1dc>
    1b6a:	10 37       	cpi	r17, 0x70	; 112
    1b6c:	28 f4       	brcc	.+10     	; 0x1b78 <vfscanf+0x194>
    1b6e:	14 36       	cpi	r17, 0x64	; 100
    1b70:	29 f1       	breq	.+74     	; 0x1bbc <vfscanf+0x1d8>
    1b72:	19 36       	cpi	r17, 0x69	; 105
    1b74:	39 f5       	brne	.+78     	; 0x1bc4 <vfscanf+0x1e0>
    1b76:	27 c0       	rjmp	.+78     	; 0x1bc6 <vfscanf+0x1e2>
    1b78:	13 37       	cpi	r17, 0x73	; 115
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <vfscanf+0x19e>
    1b7c:	15 37       	cpi	r17, 0x75	; 117
    1b7e:	11 f5       	brne	.+68     	; 0x1bc4 <vfscanf+0x1e0>
    1b80:	1d c0       	rjmp	.+58     	; 0x1bbc <vfscanf+0x1d8>
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <fgetc>
    1b88:	ec 01       	movw	r28, r24
    1b8a:	97 fd       	sbrc	r25, 7
    1b8c:	11 c0       	rjmp	.+34     	; 0x1bb0 <vfscanf+0x1cc>
    1b8e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <isspace>
    1b92:	89 2b       	or	r24, r25
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <vfscanf+0x1bc>
    1b96:	ce 01       	movw	r24, r28
    1b98:	b5 01       	movw	r22, r10
    1b9a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <ungetc>
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <vfscanf+0x1cc>
    1ba0:	e1 14       	cp	r14, r1
    1ba2:	f1 04       	cpc	r15, r1
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <vfscanf+0x1c8>
    1ba6:	f7 01       	movw	r30, r14
    1ba8:	c1 93       	st	Z+, r28
    1baa:	7f 01       	movw	r14, r30
    1bac:	9a 94       	dec	r9
    1bae:	49 f7       	brne	.-46     	; 0x1b82 <vfscanf+0x19e>
    1bb0:	e1 14       	cp	r14, r1
    1bb2:	f1 04       	cpc	r15, r1
    1bb4:	a9 f0       	breq	.+42     	; 0x1be0 <vfscanf+0x1fc>
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	10 82       	st	Z, r1
    1bba:	12 c0       	rjmp	.+36     	; 0x1be0 <vfscanf+0x1fc>
    1bbc:	00 62       	ori	r16, 0x20	; 32
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfscanf+0x1e2>
    1bc0:	00 61       	ori	r16, 0x10	; 16
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <vfscanf+0x1e2>
    1bc4:	00 64       	ori	r16, 0x40	; 64
    1bc6:	c5 01       	movw	r24, r10
    1bc8:	69 2d       	mov	r22, r9
    1bca:	a7 01       	movw	r20, r14
    1bcc:	20 2f       	mov	r18, r16
    1bce:	0e 94 96 0b 	call	0x172c	; 0x172c <conv_int>
    1bd2:	88 23       	and	r24, r24
    1bd4:	29 f4       	brne	.+10     	; 0x1be0 <vfscanf+0x1fc>
    1bd6:	f5 01       	movw	r30, r10
    1bd8:	83 81       	ldd	r24, Z+3	; 0x03
    1bda:	80 73       	andi	r24, 0x30	; 48
    1bdc:	79 f4       	brne	.+30     	; 0x1bfc <vfscanf+0x218>
    1bde:	13 c0       	rjmp	.+38     	; 0x1c06 <vfscanf+0x222>
    1be0:	00 ff       	sbrs	r16, 0
    1be2:	83 94       	inc	r8
    1be4:	f5 01       	movw	r30, r10
    1be6:	f3 80       	ldd	r15, Z+3	; 0x03
    1be8:	f6 01       	movw	r30, r12
    1bea:	f3 fc       	sbrc	r15, 3
    1bec:	15 91       	lpm	r17, Z+
    1bee:	f3 fe       	sbrs	r15, 3
    1bf0:	11 91       	ld	r17, Z+
    1bf2:	6f 01       	movw	r12, r30
    1bf4:	11 23       	and	r17, r17
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <vfscanf+0x216>
    1bf8:	0b cf       	rjmp	.-490    	; 0x1a10 <vfscanf+0x2c>
    1bfa:	05 c0       	rjmp	.+10     	; 0x1c06 <vfscanf+0x222>
    1bfc:	88 20       	and	r8, r8
    1bfe:	19 f4       	brne	.+6      	; 0x1c06 <vfscanf+0x222>
    1c00:	2f ef       	ldi	r18, 0xFF	; 255
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <vfscanf+0x226>
    1c06:	28 2d       	mov	r18, r8
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	c9 01       	movw	r24, r18
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	bf 90       	pop	r11
    1c1e:	af 90       	pop	r10
    1c20:	9f 90       	pop	r9
    1c22:	8f 90       	pop	r8
    1c24:	7f 90       	pop	r7
    1c26:	6f 90       	pop	r6
    1c28:	08 95       	ret

00001c2a <isspace>:
    1c2a:	91 11       	cpse	r25, r1
    1c2c:	0d c1       	rjmp	.+538    	; 0x1e48 <__ctype_isfalse>
    1c2e:	80 32       	cpi	r24, 0x20	; 32
    1c30:	19 f0       	breq	.+6      	; 0x1c38 <isspace+0xe>
    1c32:	89 50       	subi	r24, 0x09	; 9
    1c34:	85 50       	subi	r24, 0x05	; 5
    1c36:	d0 f7       	brcc	.-12     	; 0x1c2c <isspace+0x2>
    1c38:	08 95       	ret

00001c3a <strchr_P>:
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	05 90       	lpm	r0, Z+
    1c3e:	06 16       	cp	r0, r22
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <strchr_P+0x10>
    1c42:	00 20       	and	r0, r0
    1c44:	d9 f7       	brne	.-10     	; 0x1c3c <strchr_P+0x2>
    1c46:	c0 01       	movw	r24, r0
    1c48:	08 95       	ret
    1c4a:	31 97       	sbiw	r30, 0x01	; 1
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	08 95       	ret

00001c50 <strnlen_P>:
    1c50:	fc 01       	movw	r30, r24
    1c52:	05 90       	lpm	r0, Z+
    1c54:	61 50       	subi	r22, 0x01	; 1
    1c56:	70 40       	sbci	r23, 0x00	; 0
    1c58:	01 10       	cpse	r0, r1
    1c5a:	d8 f7       	brcc	.-10     	; 0x1c52 <strnlen_P+0x2>
    1c5c:	80 95       	com	r24
    1c5e:	90 95       	com	r25
    1c60:	8e 0f       	add	r24, r30
    1c62:	9f 1f       	adc	r25, r31
    1c64:	08 95       	ret

00001c66 <strnlen>:
    1c66:	fc 01       	movw	r30, r24
    1c68:	61 50       	subi	r22, 0x01	; 1
    1c6a:	70 40       	sbci	r23, 0x00	; 0
    1c6c:	01 90       	ld	r0, Z+
    1c6e:	01 10       	cpse	r0, r1
    1c70:	d8 f7       	brcc	.-10     	; 0x1c68 <strnlen+0x2>
    1c72:	80 95       	com	r24
    1c74:	90 95       	com	r25
    1c76:	8e 0f       	add	r24, r30
    1c78:	9f 1f       	adc	r25, r31
    1c7a:	08 95       	ret

00001c7c <fgetc>:
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	ec 01       	movw	r28, r24
    1c82:	4b 81       	ldd	r20, Y+3	; 0x03
    1c84:	40 ff       	sbrs	r20, 0
    1c86:	1a c0       	rjmp	.+52     	; 0x1cbc <fgetc+0x40>
    1c88:	46 ff       	sbrs	r20, 6
    1c8a:	0a c0       	rjmp	.+20     	; 0x1ca0 <fgetc+0x24>
    1c8c:	4f 7b       	andi	r20, 0xBF	; 191
    1c8e:	4b 83       	std	Y+3, r20	; 0x03
    1c90:	8e 81       	ldd	r24, Y+6	; 0x06
    1c92:	9f 81       	ldd	r25, Y+7	; 0x07
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	9f 83       	std	Y+7, r25	; 0x07
    1c98:	8e 83       	std	Y+6, r24	; 0x06
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	2b c0       	rjmp	.+86     	; 0x1cf6 <fgetc+0x7a>
    1ca0:	42 ff       	sbrs	r20, 2
    1ca2:	13 c0       	rjmp	.+38     	; 0x1cca <fgetc+0x4e>
    1ca4:	e8 81       	ld	r30, Y
    1ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ca8:	80 81       	ld	r24, Z
    1caa:	28 2f       	mov	r18, r24
    1cac:	33 27       	eor	r19, r19
    1cae:	27 fd       	sbrc	r18, 7
    1cb0:	30 95       	com	r19
    1cb2:	21 15       	cp	r18, r1
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	29 f4       	brne	.+10     	; 0x1cc2 <fgetc+0x46>
    1cb8:	40 62       	ori	r20, 0x20	; 32
    1cba:	4b 83       	std	Y+3, r20	; 0x03
    1cbc:	2f ef       	ldi	r18, 0xFF	; 255
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	1b c0       	rjmp	.+54     	; 0x1cf8 <fgetc+0x7c>
    1cc2:	31 96       	adiw	r30, 0x01	; 1
    1cc4:	f9 83       	std	Y+1, r31	; 0x01
    1cc6:	e8 83       	st	Y, r30
    1cc8:	11 c0       	rjmp	.+34     	; 0x1cec <fgetc+0x70>
    1cca:	ea 85       	ldd	r30, Y+10	; 0x0a
    1ccc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cce:	ce 01       	movw	r24, r28
    1cd0:	09 95       	icall
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	97 ff       	sbrs	r25, 7
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <fgetc+0x70>
    1cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cda:	2f 5f       	subi	r18, 0xFF	; 255
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	11 f0       	breq	.+4      	; 0x1ce4 <fgetc+0x68>
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <fgetc+0x6a>
    1ce4:	80 e1       	ldi	r24, 0x10	; 16
    1ce6:	89 2b       	or	r24, r25
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	e8 cf       	rjmp	.-48     	; 0x1cbc <fgetc+0x40>
    1cec:	8e 81       	ldd	r24, Y+6	; 0x06
    1cee:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	9f 83       	std	Y+7, r25	; 0x07
    1cf4:	8e 83       	std	Y+6, r24	; 0x06
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <fputc>:
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	8c 01       	movw	r16, r24
    1d0a:	eb 01       	movw	r28, r22
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	81 ff       	sbrs	r24, 1
    1d10:	1b c0       	rjmp	.+54     	; 0x1d48 <fputc+0x48>
    1d12:	82 ff       	sbrs	r24, 2
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <fputc+0x30>
    1d16:	2e 81       	ldd	r18, Y+6	; 0x06
    1d18:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	64 f4       	brge	.+24     	; 0x1d3c <fputc+0x3c>
    1d24:	e8 81       	ld	r30, Y
    1d26:	f9 81       	ldd	r31, Y+1	; 0x01
    1d28:	01 93       	st	Z+, r16
    1d2a:	f9 83       	std	Y+1, r31	; 0x01
    1d2c:	e8 83       	st	Y, r30
    1d2e:	06 c0       	rjmp	.+12     	; 0x1d3c <fputc+0x3c>
    1d30:	e8 85       	ldd	r30, Y+8	; 0x08
    1d32:	f9 85       	ldd	r31, Y+9	; 0x09
    1d34:	80 2f       	mov	r24, r16
    1d36:	09 95       	icall
    1d38:	89 2b       	or	r24, r25
    1d3a:	31 f4       	brne	.+12     	; 0x1d48 <fputc+0x48>
    1d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	9f 83       	std	Y+7, r25	; 0x07
    1d44:	8e 83       	std	Y+6, r24	; 0x06
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <fputc+0x4c>
    1d48:	0f ef       	ldi	r16, 0xFF	; 255
    1d4a:	1f ef       	ldi	r17, 0xFF	; 255
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret

00001d58 <ungetc>:
    1d58:	9c 01       	movw	r18, r24
    1d5a:	fb 01       	movw	r30, r22
    1d5c:	83 81       	ldd	r24, Z+3	; 0x03
    1d5e:	80 ff       	sbrs	r24, 0
    1d60:	11 c0       	rjmp	.+34     	; 0x1d84 <ungetc+0x2c>
    1d62:	86 fd       	sbrc	r24, 6
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <ungetc+0x2c>
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	2f 3f       	cpi	r18, 0xFF	; 255
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	59 f0       	breq	.+22     	; 0x1d84 <ungetc+0x2c>
    1d6e:	22 83       	std	Z+2, r18	; 0x02
    1d70:	80 64       	ori	r24, 0x40	; 64
    1d72:	8f 7d       	andi	r24, 0xDF	; 223
    1d74:	83 83       	std	Z+3, r24	; 0x03
    1d76:	86 81       	ldd	r24, Z+6	; 0x06
    1d78:	97 81       	ldd	r25, Z+7	; 0x07
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	97 83       	std	Z+7, r25	; 0x07
    1d7e:	86 83       	std	Z+6, r24	; 0x06
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <ungetc+0x30>
    1d84:	2f ef       	ldi	r18, 0xFF	; 255
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	c9 01       	movw	r24, r18
    1d8a:	08 95       	ret

00001d8c <__ultoa_invert>:
    1d8c:	fa 01       	movw	r30, r20
    1d8e:	aa 27       	eor	r26, r26
    1d90:	28 30       	cpi	r18, 0x08	; 8
    1d92:	51 f1       	breq	.+84     	; 0x1de8 <__ultoa_invert+0x5c>
    1d94:	20 31       	cpi	r18, 0x10	; 16
    1d96:	81 f1       	breq	.+96     	; 0x1df8 <__ultoa_invert+0x6c>
    1d98:	e8 94       	clt
    1d9a:	6f 93       	push	r22
    1d9c:	6e 7f       	andi	r22, 0xFE	; 254
    1d9e:	6e 5f       	subi	r22, 0xFE	; 254
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	8f 4f       	sbci	r24, 0xFF	; 255
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	af 4f       	sbci	r26, 0xFF	; 255
    1da8:	b1 e0       	ldi	r27, 0x01	; 1
    1daa:	3e d0       	rcall	.+124    	; 0x1e28 <__ultoa_invert+0x9c>
    1dac:	b4 e0       	ldi	r27, 0x04	; 4
    1dae:	3c d0       	rcall	.+120    	; 0x1e28 <__ultoa_invert+0x9c>
    1db0:	67 0f       	add	r22, r23
    1db2:	78 1f       	adc	r23, r24
    1db4:	89 1f       	adc	r24, r25
    1db6:	9a 1f       	adc	r25, r26
    1db8:	a1 1d       	adc	r26, r1
    1dba:	68 0f       	add	r22, r24
    1dbc:	79 1f       	adc	r23, r25
    1dbe:	8a 1f       	adc	r24, r26
    1dc0:	91 1d       	adc	r25, r1
    1dc2:	a1 1d       	adc	r26, r1
    1dc4:	6a 0f       	add	r22, r26
    1dc6:	71 1d       	adc	r23, r1
    1dc8:	81 1d       	adc	r24, r1
    1dca:	91 1d       	adc	r25, r1
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	20 d0       	rcall	.+64     	; 0x1e10 <__ultoa_invert+0x84>
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <__ultoa_invert+0x48>
    1dd2:	68 94       	set
    1dd4:	3f 91       	pop	r19
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	26 9f       	mul	r18, r22
    1dda:	11 24       	eor	r1, r1
    1ddc:	30 19       	sub	r19, r0
    1dde:	30 5d       	subi	r19, 0xD0	; 208
    1de0:	31 93       	st	Z+, r19
    1de2:	de f6       	brtc	.-74     	; 0x1d9a <__ultoa_invert+0xe>
    1de4:	cf 01       	movw	r24, r30
    1de6:	08 95       	ret
    1de8:	46 2f       	mov	r20, r22
    1dea:	47 70       	andi	r20, 0x07	; 7
    1dec:	40 5d       	subi	r20, 0xD0	; 208
    1dee:	41 93       	st	Z+, r20
    1df0:	b3 e0       	ldi	r27, 0x03	; 3
    1df2:	0f d0       	rcall	.+30     	; 0x1e12 <__ultoa_invert+0x86>
    1df4:	c9 f7       	brne	.-14     	; 0x1de8 <__ultoa_invert+0x5c>
    1df6:	f6 cf       	rjmp	.-20     	; 0x1de4 <__ultoa_invert+0x58>
    1df8:	46 2f       	mov	r20, r22
    1dfa:	4f 70       	andi	r20, 0x0F	; 15
    1dfc:	40 5d       	subi	r20, 0xD0	; 208
    1dfe:	4a 33       	cpi	r20, 0x3A	; 58
    1e00:	18 f0       	brcs	.+6      	; 0x1e08 <__ultoa_invert+0x7c>
    1e02:	49 5d       	subi	r20, 0xD9	; 217
    1e04:	31 fd       	sbrc	r19, 1
    1e06:	40 52       	subi	r20, 0x20	; 32
    1e08:	41 93       	st	Z+, r20
    1e0a:	02 d0       	rcall	.+4      	; 0x1e10 <__ultoa_invert+0x84>
    1e0c:	a9 f7       	brne	.-22     	; 0x1df8 <__ultoa_invert+0x6c>
    1e0e:	ea cf       	rjmp	.-44     	; 0x1de4 <__ultoa_invert+0x58>
    1e10:	b4 e0       	ldi	r27, 0x04	; 4
    1e12:	a6 95       	lsr	r26
    1e14:	97 95       	ror	r25
    1e16:	87 95       	ror	r24
    1e18:	77 95       	ror	r23
    1e1a:	67 95       	ror	r22
    1e1c:	ba 95       	dec	r27
    1e1e:	c9 f7       	brne	.-14     	; 0x1e12 <__ultoa_invert+0x86>
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	61 05       	cpc	r22, r1
    1e24:	71 05       	cpc	r23, r1
    1e26:	08 95       	ret
    1e28:	9b 01       	movw	r18, r22
    1e2a:	ac 01       	movw	r20, r24
    1e2c:	0a 2e       	mov	r0, r26
    1e2e:	06 94       	lsr	r0
    1e30:	57 95       	ror	r21
    1e32:	47 95       	ror	r20
    1e34:	37 95       	ror	r19
    1e36:	27 95       	ror	r18
    1e38:	ba 95       	dec	r27
    1e3a:	c9 f7       	brne	.-14     	; 0x1e2e <__ultoa_invert+0xa2>
    1e3c:	62 0f       	add	r22, r18
    1e3e:	73 1f       	adc	r23, r19
    1e40:	84 1f       	adc	r24, r20
    1e42:	95 1f       	adc	r25, r21
    1e44:	a0 1d       	adc	r26, r0
    1e46:	08 95       	ret

00001e48 <__ctype_isfalse>:
    1e48:	99 27       	eor	r25, r25
    1e4a:	88 27       	eor	r24, r24

00001e4c <__ctype_istrue>:
    1e4c:	08 95       	ret

00001e4e <_exit>:
    1e4e:	f8 94       	cli

00001e50 <__stop_program>:
    1e50:	ff cf       	rjmp	.-2      	; 0x1e50 <__stop_program>
