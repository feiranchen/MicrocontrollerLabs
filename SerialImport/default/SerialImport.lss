
SerialImport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000163a  000016ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000163a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  0080014e  0080014e  0000171c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002be  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db1  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ec  00000000  00000000  000027cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000962  00000000  00000000  00002bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000036dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a3  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00004211  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      68:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      70:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      7c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      80:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      84:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 20 20     LCD Initialize  
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

000000d3 <LCD_dur_syllable>:
      d3:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

000000e4 <LCD_rpt_interval>:
      e4:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

000000f4 <LCD_playing>:
      f4:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000103 <LCD_line_clear>:
     103:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000115 <LcdCustomChar>:
     115:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     125:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     135:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     145:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000155 <__c.1988>:
     155:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d0 e4       	ldi	r29, 0x40	; 64
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	ea e3       	ldi	r30, 0x3A	; 58
     176:	f6 e1       	ldi	r31, 0x16	; 22
     178:	00 e0       	ldi	r16, 0x00	; 0
     17a:	0b bf       	out	0x3b, r16	; 59
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x14>
     17e:	07 90       	elpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	ae 34       	cpi	r26, 0x4E	; 78
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0x10>

00000188 <__do_clear_bss>:
     188:	11 e0       	ldi	r17, 0x01	; 1
     18a:	ae e4       	ldi	r26, 0x4E	; 78
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a0 3e       	cpi	r26, 0xE0	; 224
     194:	b1 07       	cpc	r27, r17
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 40 01 	call	0x280	; 0x280 <main>
     19c:	0c 94 9a 04 	jmp	0x934	; 0x934 <exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     1a4:	87 e6       	ldi	r24, 0x67	; 103
     1a6:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     1aa:	88 e1       	ldi	r24, 0x18	; 24
     1ac:	80 93 c1 00 	sts	0x00C1, r24
}
     1b0:	08 95       	ret

000001b2 <port_init>:
int args[3] ;

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     1b2:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     1b4:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     1ba:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     1bc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     1be:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     1c0:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     1c2:	5a 9a       	sbi	0x0b, 2	; 11
end
     1c4:	08 95       	ret

000001c6 <get_User_Input>:
	CopyStringtoLCD(LCD_initialize, 0, 0);
	LCD_char_count = 0;
end

void get_User_Input(void* args) 
begin
     1c6:	cf 92       	push	r12
     1c8:	df 92       	push	r13
     1ca:	ef 92       	push	r14
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	28 97       	sbiw	r28, 0x08	; 8
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	c9 2e       	mov	r12, r25
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	d9 2e       	mov	r13, r25
     1ee:	85 e0       	ldi	r24, 0x05	; 5
     1f0:	e8 2e       	mov	r14, r24
     1f2:	f1 2c       	mov	r15, r1
     1f4:	ec 0e       	add	r14, r28
     1f6:	fd 1e       	adc	r15, r29
     1f8:	8e 01       	movw	r16, r28
     1fa:	0f 5f       	subi	r16, 0xFF	; 255
     1fc:	1f 4f       	sbci	r17, 0xFF	; 255
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     1fe:	60 91 dc 01 	lds	r22, 0x01DC
     202:	70 91 dd 01 	lds	r23, 0x01DD
     206:	8e e3       	ldi	r24, 0x3E	; 62
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
     20e:	8d b7       	in	r24, 0x3d	; 61
     210:	9e b7       	in	r25, 0x3e	; 62
     212:	08 97       	sbiw	r24, 0x08	; 8
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	9e bf       	out	0x3e, r25	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	8d bf       	out	0x3d, r24	; 61
     21e:	ed b7       	in	r30, 0x3d	; 61
     220:	fe b7       	in	r31, 0x3e	; 62
     222:	31 96       	adiw	r30, 0x01	; 1
     224:	80 91 da 01 	lds	r24, 0x01DA
     228:	90 91 db 01 	lds	r25, 0x01DB
     22c:	ad b7       	in	r26, 0x3d	; 61
     22e:	be b7       	in	r27, 0x3e	; 62
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	9c 93       	st	X, r25
     234:	8e 93       	st	-X, r24
     236:	11 97       	sbiw	r26, 0x01	; 1
     238:	d3 82       	std	Z+3, r13	; 0x03
     23a:	c2 82       	std	Z+2, r12	; 0x02
     23c:	f5 82       	std	Z+5, r15	; 0x05
     23e:	e4 82       	std	Z+4, r14	; 0x04
     240:	17 83       	std	Z+7, r17	; 0x07
     242:	06 83       	std	Z+6, r16	; 0x06
     244:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fscanf>
     248:	8d b7       	in	r24, 0x3d	; 61
     24a:	9e b7       	in	r25, 0x3e	; 62
     24c:	08 96       	adiw	r24, 0x08	; 8
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	9e bf       	out	0x3e, r25	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	8d bf       	out	0x3d, r24	; 61
     258:	d2 cf       	rjmp	.-92     	; 0x1fe <get_User_Input+0x38>

0000025a <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     25a:	0e 94 ca 03 	call	0x794	; 0x794 <LCDinit>
	LCDcursorOFF();
     25e:	0e 94 32 04 	call	0x864	; 0x864 <LCDcursorOFF>
	LCDclr();	//clear the display
     262:	0e 94 63 03 	call	0x6c6	; 0x6c6 <LCDclr>
	LCDGotoXY(0,0);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	0e 94 80 03 	call	0x700	; 0x700 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     26e:	8c e8       	ldi	r24, 0x8C	; 140
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	0e 94 8f 03 	call	0x71e	; 0x71e <CopyStringtoLCD>
	LCD_char_count = 0;
     27a:	10 92 b7 01 	sts	0x01B7, r1
end
     27e:	08 95       	ret

00000280 <main>:




// --- Main Program ----------------------------------
int main(void) {
     280:	4f 92       	push	r4
     282:	5f 92       	push	r5
     284:	6f 92       	push	r6
     286:	7f 92       	push	r7
     288:	8f 92       	push	r8
     28a:	9f 92       	push	r9
     28c:	af 92       	push	r10
     28e:	bf 92       	push	r11
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	63 97       	sbiw	r28, 0x13	; 19
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
  int i =0;
  char buffer[17];
  uint16_t file_size = 0;
     2ae:	1a 82       	std	Y+2, r1	; 0x02
     2b0:	19 82       	std	Y+1, r1	; 0x01
  char* file;
  LCD_init();
     2b2:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_init>
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     2b6:	87 e6       	ldi	r24, 0x67	; 103
     2b8:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     2bc:	88 e1       	ldi	r24, 0x18	; 24
     2be:	80 93 c1 00 	sts	0x00C1, r24
  //init the UART -- uart_init() is in uart.c
  uart_init();
  stdout = stdin = stderr = &uart_str;
     2c2:	60 e4       	ldi	r22, 0x40	; 64
     2c4:	71 e0       	ldi	r23, 0x01	; 1
     2c6:	70 93 df 01 	sts	0x01DF, r23
     2ca:	60 93 de 01 	sts	0x01DE, r22
     2ce:	70 93 db 01 	sts	0x01DB, r23
     2d2:	60 93 da 01 	sts	0x01DA, r22
     2d6:	70 93 dd 01 	sts	0x01DD, r23
     2da:	60 93 dc 01 	sts	0x01DC, r22

  // Allocate memory for the buffer	
  fprintf(stdout,"File Length\n\r");
     2de:	86 e0       	ldi	r24, 0x06	; 6
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 c9 04 	call	0x992	; 0x992 <fputs>
  fscanf(stdin, "%d*", &file_size) ;
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <main+0x68>
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <main+0x6a>
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <main+0x6c>
     2ec:	ed b7       	in	r30, 0x3d	; 61
     2ee:	fe b7       	in	r31, 0x3e	; 62
     2f0:	31 96       	adiw	r30, 0x01	; 1
     2f2:	80 91 da 01 	lds	r24, 0x01DA
     2f6:	90 91 db 01 	lds	r25, 0x01DB
     2fa:	ad b7       	in	r26, 0x3d	; 61
     2fc:	be b7       	in	r27, 0x3e	; 62
     2fe:	12 96       	adiw	r26, 0x02	; 2
     300:	9c 93       	st	X, r25
     302:	8e 93       	st	-X, r24
     304:	11 97       	sbiw	r26, 0x01	; 1
     306:	84 e1       	ldi	r24, 0x14	; 20
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	93 83       	std	Z+3, r25	; 0x03
     30c:	82 83       	std	Z+2, r24	; 0x02
     30e:	ce 01       	movw	r24, r28
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	84 83       	std	Z+4, r24	; 0x04
     316:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fscanf>
  sprintf(lcd_buffer2,"File Len:%-i.    ", file_size);
     31a:	ed b7       	in	r30, 0x3d	; 61
     31c:	fe b7       	in	r31, 0x3e	; 62
     31e:	31 96       	adiw	r30, 0x01	; 1
     320:	09 ec       	ldi	r16, 0xC9	; 201
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	ad b7       	in	r26, 0x3d	; 61
     326:	be b7       	in	r27, 0x3e	; 62
     328:	12 96       	adiw	r26, 0x02	; 2
     32a:	1c 93       	st	X, r17
     32c:	0e 93       	st	-X, r16
     32e:	11 97       	sbiw	r26, 0x01	; 1
     330:	88 e1       	ldi	r24, 0x18	; 24
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	93 83       	std	Z+3, r25	; 0x03
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	9a 81       	ldd	r25, Y+2	; 0x02
     33c:	95 83       	std	Z+5, r25	; 0x05
     33e:	84 83       	std	Z+4, r24	; 0x04
     340:	0e 94 05 05 	call	0xa0a	; 0xa0a <sprintf>

	LCDGotoXY(0, 0);
     344:	8d b7       	in	r24, 0x3d	; 61
     346:	9e b7       	in	r25, 0x3e	; 62
     348:	06 96       	adiw	r24, 0x06	; 6
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	9e bf       	out	0x3e, r25	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	8d bf       	out	0x3d, r24	; 61
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	0e 94 80 03 	call	0x700	; 0x700 <LCDGotoXY>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));
     35c:	f8 01       	movw	r30, r16
     35e:	01 90       	ld	r0, Z+
     360:	00 20       	and	r0, r0
     362:	e9 f7       	brne	.-6      	; 0x35e <main+0xde>
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	e0 1b       	sub	r30, r16
     368:	f1 0b       	sbc	r31, r17
     36a:	c8 01       	movw	r24, r16
     36c:	6e 2f       	mov	r22, r30
     36e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCDstring>
     372:	ee 24       	eor	r14, r14
     374:	ff 24       	eor	r15, r15

for (i=0; i<file_size-1; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
	fscanf(stdin, "%s", buffer) ;
     376:	5f e2       	ldi	r21, 0x2F	; 47
     378:	45 2e       	mov	r4, r21
     37a:	51 e0       	ldi	r21, 0x01	; 1
     37c:	55 2e       	mov	r5, r21
     37e:	43 e0       	ldi	r20, 0x03	; 3
     380:	a4 2e       	mov	r10, r20
     382:	b1 2c       	mov	r11, r1
     384:	ac 0e       	add	r10, r28
     386:	bd 1e       	adc	r11, r29

    sprintf(lcd_buffer2,"%-i  ", i++);
     388:	d0 2e       	mov	r13, r16
     38a:	01 2f       	mov	r16, r17
     38c:	32 e3       	ldi	r19, 0x32	; 50
     38e:	63 2e       	mov	r6, r19
     390:	31 e0       	ldi	r19, 0x01	; 1
     392:	73 2e       	mov	r7, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     394:	20 e9       	ldi	r18, 0x90	; 144
     396:	82 2e       	mov	r8, r18
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	92 2e       	mov	r9, r18
     39c:	52 c0       	rjmp	.+164    	; 0x442 <main+0x1c2>
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

for (i=0; i<file_size-1; i++)
  begin

  	fprintf(stdout,"Hi\n\r");
     39e:	60 91 dc 01 	lds	r22, 0x01DC
     3a2:	70 91 dd 01 	lds	r23, 0x01DD
     3a6:	8a e2       	ldi	r24, 0x2A	; 42
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 c9 04 	call	0x992	; 0x992 <fputs>
	fscanf(stdin, "%s", buffer) ;
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <main+0x130>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <main+0x132>
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <main+0x134>
     3b4:	ed b7       	in	r30, 0x3d	; 61
     3b6:	fe b7       	in	r31, 0x3e	; 62
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	80 91 da 01 	lds	r24, 0x01DA
     3be:	90 91 db 01 	lds	r25, 0x01DB
     3c2:	ad b7       	in	r26, 0x3d	; 61
     3c4:	be b7       	in	r27, 0x3e	; 62
     3c6:	12 96       	adiw	r26, 0x02	; 2
     3c8:	9c 93       	st	X, r25
     3ca:	8e 93       	st	-X, r24
     3cc:	11 97       	sbiw	r26, 0x01	; 1
     3ce:	53 82       	std	Z+3, r5	; 0x03
     3d0:	42 82       	std	Z+2, r4	; 0x02
     3d2:	b5 82       	std	Z+5, r11	; 0x05
     3d4:	a4 82       	std	Z+4, r10	; 0x04
     3d6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <fscanf>

    sprintf(lcd_buffer2,"%-i  ", i++);
     3da:	ed b7       	in	r30, 0x3d	; 61
     3dc:	fe b7       	in	r31, 0x3e	; 62
     3de:	31 96       	adiw	r30, 0x01	; 1
     3e0:	ad b7       	in	r26, 0x3d	; 61
     3e2:	be b7       	in	r27, 0x3e	; 62
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	dc 92       	st	X, r13
     3e8:	11 97       	sbiw	r26, 0x01	; 1
     3ea:	12 96       	adiw	r26, 0x02	; 2
     3ec:	0c 93       	st	X, r16
     3ee:	73 82       	std	Z+3, r7	; 0x03
     3f0:	62 82       	std	Z+2, r6	; 0x02
     3f2:	f5 82       	std	Z+5, r15	; 0x05
     3f4:	e4 82       	std	Z+4, r14	; 0x04
     3f6:	0e 94 05 05 	call	0xa0a	; 0xa0a <sprintf>
	LCDGotoXY(14, 0);
     3fa:	8d b7       	in	r24, 0x3d	; 61
     3fc:	9e b7       	in	r25, 0x3e	; 62
     3fe:	06 96       	adiw	r24, 0x06	; 6
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	9e bf       	out	0x3e, r25	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	8d bf       	out	0x3d, r24	; 61
     40a:	8e e0       	ldi	r24, 0x0E	; 14
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	0e 94 80 03 	call	0x700	; 0x700 <LCDGotoXY>
	LCDstring(lcd_buffer2, 2);
     412:	8d 2d       	mov	r24, r13
     414:	90 2f       	mov	r25, r16
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCDstring>

	LCDGotoXY(0, 1);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	0e 94 80 03 	call	0x700	; 0x700 <LCDGotoXY>
	LCDstring(buffer,15);
     424:	c5 01       	movw	r24, r10
     426:	6f e0       	ldi	r22, 0x0F	; 15
     428:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCDstring>
     42c:	80 e1       	ldi	r24, 0x10	; 16
     42e:	97 e2       	ldi	r25, 0x27	; 39
     430:	f4 01       	movw	r30, r8
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <main+0x1b2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     436:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     438:	d9 f7       	brne	.-10     	; 0x430 <main+0x1b0>
  sprintf(lcd_buffer2,"File Len:%-i.    ", file_size);

	LCDGotoXY(0, 0);
	LCDstring(lcd_buffer2, strlen(lcd_buffer2));

for (i=0; i<file_size-1; i++)
     43a:	a2 e0       	ldi	r26, 0x02	; 2
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	ea 0e       	add	r14, r26
     440:	fb 1e       	adc	r15, r27
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	e8 16       	cp	r14, r24
     44a:	f9 06       	cpc	r15, r25
     44c:	08 f4       	brcc	.+2      	; 0x450 <main+0x1d0>
     44e:	a7 cf       	rjmp	.-178    	; 0x39e <main+0x11e>
	LCDstring(buffer,15);
	_delay_ms(1000);
  end


} // main
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	63 96       	adiw	r28, 0x13	; 19
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	bf 90       	pop	r11
     470:	af 90       	pop	r10
     472:	9f 90       	pop	r9
     474:	8f 90       	pop	r8
     476:	7f 90       	pop	r7
     478:	6f 90       	pop	r6
     47a:	5f 90       	pop	r5
     47c:	4f 90       	pop	r4
     47e:	08 95       	ret

00000480 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     480:	1f 93       	push	r17
     482:	18 2f       	mov	r17, r24

  if (c == '\a')
     484:	87 30       	cpi	r24, 0x07	; 7
     486:	49 f4       	brne	.+18     	; 0x49a <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     488:	60 91 de 01 	lds	r22, 0x01DE
     48c:	70 91 df 01 	lds	r23, 0x01DF
     490:	88 e3       	ldi	r24, 0x38	; 56
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 c9 04 	call	0x992	; 0x992 <fputs>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     49a:	8a 30       	cpi	r24, 0x0A	; 10
     49c:	19 f4       	brne	.+6      	; 0x4a4 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     49e:	8d e0       	ldi	r24, 0x0D	; 13
     4a0:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
     4a4:	80 91 c0 00 	lds	r24, 0x00C0
     4a8:	85 ff       	sbrs	r24, 5
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <uart_putchar+0x24>
  UDR0 = c;
     4ac:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     4c6:	80 91 4e 01 	lds	r24, 0x014E
     4ca:	90 91 4f 01 	lds	r25, 0x014F
     4ce:	89 2b       	or	r24, r25
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <uart_getchar+0x1c>
     4d2:	9f c0       	rjmp	.+318    	; 0x612 <uart_getchar+0x15a>
     4d4:	00 e5       	ldi	r16, 0x50	; 80
     4d6:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     4d8:	80 91 c0 00 	lds	r24, 0x00C0
     4dc:	87 ff       	sbrs	r24, 7
     4de:	fc cf       	rjmp	.-8      	; 0x4d8 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     4e0:	80 91 c0 00 	lds	r24, 0x00C0
     4e4:	84 ff       	sbrs	r24, 4
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <uart_getchar+0x36>
     4e8:	2e ef       	ldi	r18, 0xFE	; 254
     4ea:	3f ef       	ldi	r19, 0xFF	; 255
     4ec:	a6 c0       	rjmp	.+332    	; 0x63a <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     4ee:	80 91 c0 00 	lds	r24, 0x00C0
     4f2:	83 fd       	sbrc	r24, 3
     4f4:	a0 c0       	rjmp	.+320    	; 0x636 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
     4f6:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     4fa:	9d 30       	cpi	r25, 0x0D	; 13
     4fc:	11 f0       	breq	.+4      	; 0x502 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     4fe:	9a 30       	cpi	r25, 0x0A	; 10
     500:	69 f4       	brne	.+26     	; 0x51c <uart_getchar+0x64>
	  {
	    *cp = c;
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	f8 01       	movw	r30, r16
     506:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
	    rxp = b;
     50e:	80 e5       	ldi	r24, 0x50	; 80
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 4f 01 	sts	0x014F, r25
     516:	80 93 4e 01 	sts	0x014E, r24
     51a:	7b c0       	rjmp	.+246    	; 0x612 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     51c:	99 30       	cpi	r25, 0x09	; 9
     51e:	09 f4       	brne	.+2      	; 0x522 <uart_getchar+0x6a>
     520:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     522:	89 2f       	mov	r24, r25
     524:	80 52       	subi	r24, 0x20	; 32
     526:	8f 35       	cpi	r24, 0x5F	; 95
     528:	10 f0       	brcs	.+4      	; 0x52e <uart_getchar+0x76>
     52a:	90 3a       	cpi	r25, 0xA0	; 160
     52c:	70 f0       	brcs	.+28     	; 0x54a <uart_getchar+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	0f 39       	cpi	r16, 0x9F	; 159
     532:	1f 07       	cpc	r17, r31
     534:	11 f4       	brne	.+4      	; 0x53a <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     536:	87 e0       	ldi	r24, 0x07	; 7
     538:	04 c0       	rjmp	.+8      	; 0x542 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     53a:	f8 01       	movw	r30, r16
     53c:	91 93       	st	Z+, r25
     53e:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     540:	89 2f       	mov	r24, r25
     542:	b7 01       	movw	r22, r14
     544:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
     548:	c7 cf       	rjmp	.-114    	; 0x4d8 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     54a:	92 31       	cpi	r25, 0x12	; 18
     54c:	39 f1       	breq	.+78     	; 0x59c <uart_getchar+0xe4>
     54e:	93 31       	cpi	r25, 0x13	; 19
     550:	38 f4       	brcc	.+14     	; 0x560 <uart_getchar+0xa8>
     552:	93 30       	cpi	r25, 0x03	; 3
     554:	09 f4       	brne	.+2      	; 0x558 <uart_getchar+0xa0>
     556:	6f c0       	rjmp	.+222    	; 0x636 <uart_getchar+0x17e>
     558:	98 30       	cpi	r25, 0x08	; 8
     55a:	09 f0       	breq	.+2      	; 0x55e <uart_getchar+0xa6>
     55c:	bd cf       	rjmp	.-134    	; 0x4d8 <uart_getchar+0x20>
     55e:	09 c0       	rjmp	.+18     	; 0x572 <uart_getchar+0xba>
     560:	97 31       	cpi	r25, 0x17	; 23
     562:	09 f4       	brne	.+2      	; 0x566 <uart_getchar+0xae>
     564:	4b c0       	rjmp	.+150    	; 0x5fc <uart_getchar+0x144>
     566:	9f 37       	cpi	r25, 0x7F	; 127
     568:	21 f0       	breq	.+8      	; 0x572 <uart_getchar+0xba>
     56a:	95 31       	cpi	r25, 0x15	; 21
     56c:	09 f0       	breq	.+2      	; 0x570 <uart_getchar+0xb8>
     56e:	b4 cf       	rjmp	.-152    	; 0x4d8 <uart_getchar+0x20>
     570:	32 c0       	rjmp	.+100    	; 0x5d6 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	00 35       	cpi	r16, 0x50	; 80
     576:	1f 07       	cpc	r17, r31
     578:	09 f0       	breq	.+2      	; 0x57c <uart_getchar+0xc4>
     57a:	08 f4       	brcc	.+2      	; 0x57e <uart_getchar+0xc6>
     57c:	ad cf       	rjmp	.-166    	; 0x4d8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     57e:	88 e0       	ldi	r24, 0x08	; 8
     580:	b7 01       	movw	r22, r14
     582:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		uart_putchar(' ', stream);
     586:	80 e2       	ldi	r24, 0x20	; 32
     588:	b7 01       	movw	r22, r14
     58a:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		uart_putchar('\b', stream);
     58e:	88 e0       	ldi	r24, 0x08	; 8
     590:	b7 01       	movw	r22, r14
     592:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		cp--;
     596:	01 50       	subi	r16, 0x01	; 1
     598:	10 40       	sbci	r17, 0x00	; 0
     59a:	9e cf       	rjmp	.-196    	; 0x4d8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     59c:	8d e0       	ldi	r24, 0x0D	; 13
     59e:	b7 01       	movw	r22, r14
     5a0:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
     5a4:	c0 e5       	ldi	r28, 0x50	; 80
     5a6:	d1 e0       	ldi	r29, 0x01	; 1
     5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     5aa:	89 91       	ld	r24, Y+
     5ac:	b7 01       	movw	r22, r14
     5ae:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     5b2:	c0 17       	cp	r28, r16
     5b4:	d1 07       	cpc	r29, r17
     5b6:	c8 f3       	brcs	.-14     	; 0x5aa <uart_getchar+0xf2>
     5b8:	8f cf       	rjmp	.-226    	; 0x4d8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	b7 01       	movw	r22, r14
     5be:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		uart_putchar(' ', stream);
     5c2:	80 e2       	ldi	r24, 0x20	; 32
     5c4:	b7 01       	movw	r22, r14
     5c6:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		uart_putchar('\b', stream);
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	b7 01       	movw	r22, r14
     5ce:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		cp--;
     5d2:	01 50       	subi	r16, 0x01	; 1
     5d4:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	00 35       	cpi	r16, 0x50	; 80
     5da:	18 07       	cpc	r17, r24
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <uart_getchar+0x128>
     5de:	68 f7       	brcc	.-38     	; 0x5ba <uart_getchar+0x102>
     5e0:	7b cf       	rjmp	.-266    	; 0x4d8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		uart_putchar(' ', stream);
     5ea:	80 e2       	ldi	r24, 0x20	; 32
     5ec:	b7 01       	movw	r22, r14
     5ee:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
		uart_putchar('\b', stream);
     5f2:	88 e0       	ldi	r24, 0x08	; 8
     5f4:	b7 01       	movw	r22, r14
     5f6:	0e 94 40 02 	call	0x480	; 0x480 <uart_putchar>
     5fa:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     5fc:	e1 e0       	ldi	r30, 0x01	; 1
     5fe:	00 35       	cpi	r16, 0x50	; 80
     600:	1e 07       	cpc	r17, r30
     602:	09 f0       	breq	.+2      	; 0x606 <uart_getchar+0x14e>
     604:	08 f4       	brcc	.+2      	; 0x608 <uart_getchar+0x150>
     606:	68 cf       	rjmp	.-304    	; 0x4d8 <uart_getchar+0x20>
     608:	e8 01       	movw	r28, r16
     60a:	8a 91       	ld	r24, -Y
     60c:	80 32       	cpi	r24, 0x20	; 32
     60e:	49 f7       	brne	.-46     	; 0x5e2 <uart_getchar+0x12a>
     610:	63 cf       	rjmp	.-314    	; 0x4d8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     612:	e0 91 4e 01 	lds	r30, 0x014E
     616:	f0 91 4f 01 	lds	r31, 0x014F
     61a:	81 91       	ld	r24, Z+
     61c:	f0 93 4f 01 	sts	0x014F, r31
     620:	e0 93 4e 01 	sts	0x014E, r30
  if (c == '\n')
     624:	8a 30       	cpi	r24, 0x0A	; 10
     626:	21 f4       	brne	.+8      	; 0x630 <uart_getchar+0x178>
    rxp = 0;
     628:	10 92 4f 01 	sts	0x014F, r1
     62c:	10 92 4e 01 	sts	0x014E, r1

  return c;
     630:	28 2f       	mov	r18, r24
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	02 c0       	rjmp	.+4      	; 0x63a <uart_getchar+0x182>
     636:	2f ef       	ldi	r18, 0xFF	; 255
     638:	3f ef       	ldi	r19, 0xFF	; 255
}
     63a:	c9 01       	movw	r24, r18
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	08 95       	ret

0000064a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     64a:	28 2f       	mov	r18, r24
     64c:	20 7f       	andi	r18, 0xF0	; 240
     64e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     650:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     652:	42 9a       	sbi	0x08, 2	; 8
     654:	20 e4       	ldi	r18, 0x40	; 64
     656:	3f e1       	ldi	r19, 0x1F	; 31
     658:	f9 01       	movw	r30, r18
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     65e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     660:	40 98       	cbi	0x08, 0	; 8
     662:	f9 01       	movw	r30, r18
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	44 e0       	ldi	r20, 0x04	; 4
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	4a 95       	dec	r20
     672:	e1 f7       	brne	.-8      	; 0x66c <LCDsendChar+0x22>
     674:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     676:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     678:	42 9a       	sbi	0x08, 2	; 8
     67a:	c9 01       	movw	r24, r18
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     680:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     682:	40 98       	cbi	0x08, 0	; 8
     684:	c9 01       	movw	r24, r18
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     68a:	08 95       	ret

0000068c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     68c:	28 2f       	mov	r18, r24
     68e:	20 7f       	andi	r18, 0xF0	; 240
     690:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     692:	42 9a       	sbi	0x08, 2	; 8
     694:	20 e4       	ldi	r18, 0x40	; 64
     696:	3f e1       	ldi	r19, 0x1F	; 31
     698:	f9 01       	movw	r30, r18
     69a:	31 97       	sbiw	r30, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     69e:	42 98       	cbi	0x08, 2	; 8
     6a0:	f9 01       	movw	r30, r18
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	54 e0       	ldi	r21, 0x04	; 4
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	5a 95       	dec	r21
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <LCDsendCommand+0x1e>
     6b2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     6b4:	42 9a       	sbi	0x08, 2	; 8
     6b6:	c9 01       	movw	r24, r18
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     6bc:	42 98       	cbi	0x08, 2	; 8
     6be:	c9 01       	movw	r24, r18
     6c0:	01 97       	sbiw	r24, 0x01	; 1
     6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     6c4:	08 95       	ret

000006c6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     6cc:	08 95       	ret

000006ce <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     6d4:	08 95       	ret

000006d6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	49 f0       	breq	.+18     	; 0x6f6 <LCDstring+0x20>
     6e4:	ec 01       	movw	r28, r24
     6e6:	10 e0       	ldi	r17, 0x00	; 0
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     6ea:	89 91       	ld	r24, Y+
     6ec:	0e 94 25 03 	call	0x64a	; 0x64a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     6f0:	1f 5f       	subi	r17, 0xFF	; 255
     6f2:	10 17       	cp	r17, r16
     6f4:	d0 f3       	brcs	.-12     	; 0x6ea <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret

00000700 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     700:	62 30       	cpi	r22, 0x02	; 2
     702:	31 f0       	breq	.+12     	; 0x710 <LCDGotoXY+0x10>
     704:	63 30       	cpi	r22, 0x03	; 3
     706:	31 f0       	breq	.+12     	; 0x714 <LCDGotoXY+0x14>
     708:	61 30       	cpi	r22, 0x01	; 1
     70a:	29 f4       	brne	.+10     	; 0x716 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     70c:	80 5c       	subi	r24, 0xC0	; 192
     70e:	03 c0       	rjmp	.+6      	; 0x716 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     710:	8c 5e       	subi	r24, 0xEC	; 236
     712:	01 c0       	rjmp	.+2      	; 0x716 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     714:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     716:	80 68       	ori	r24, 0x80	; 128
     718:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
	
}
     71c:	08 95       	ret

0000071e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	ec 01       	movw	r28, r24
     726:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     728:	64 2f       	mov	r22, r20
     72a:	0e 94 80 03 	call	0x700	; 0x700 <LCDGotoXY>
     72e:	10 e0       	ldi	r17, 0x00	; 0
     730:	03 c0       	rjmp	.+6      	; 0x738 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     732:	0e 94 25 03 	call	0x64a	; 0x64a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     736:	1f 5f       	subi	r17, 0xFF	; 255
     738:	fe 01       	movw	r30, r28
     73a:	e1 0f       	add	r30, r17
     73c:	f1 1d       	adc	r31, r1
     73e:	84 91       	lpm	r24, Z+
     740:	88 23       	and	r24, r24
     742:	b9 f7       	brne	.-18     	; 0x732 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	08 95       	ret

0000074c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	7c 01       	movw	r14, r24
     75a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     75c:	11 0f       	add	r17, r17
     75e:	11 0f       	add	r17, r17
     760:	11 0f       	add	r17, r17
     762:	10 64       	ori	r17, 0x40	; 64
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     768:	f7 01       	movw	r30, r14
     76a:	ec 0f       	add	r30, r28
     76c:	fd 1f       	adc	r31, r29
     76e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     770:	81 2f       	mov	r24, r17
     772:	8c 0f       	add	r24, r28
     774:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
		LCDsendChar(pcc);
     778:	80 2f       	mov	r24, r16
     77a:	0e 94 25 03 	call	0x64a	; 0x64a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     77e:	21 96       	adiw	r28, 0x01	; 1
     780:	c8 30       	cpi	r28, 0x08	; 8
     782:	d1 05       	cpc	r29, r1
     784:	89 f7       	brne	.-30     	; 0x768 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret

00000794 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	80 e6       	ldi	r24, 0x60	; 96
     79c:	9a ee       	ldi	r25, 0xEA	; 234
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     7a2:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     7a4:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     7a6:	87 b1       	in	r24, 0x07	; 7
     7a8:	80 6f       	ori	r24, 0xF0	; 240
     7aa:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     7ac:	87 b1       	in	r24, 0x07	; 7
     7ae:	87 60       	ori	r24, 0x07	; 7
     7b0:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     7b2:	80 e3       	ldi	r24, 0x30	; 48
     7b4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7b6:	42 9a       	sbi	0x08, 2	; 8
     7b8:	20 e4       	ldi	r18, 0x40	; 64
     7ba:	3f e1       	ldi	r19, 0x1F	; 31
     7bc:	f9 01       	movw	r30, r18
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7c2:	42 98       	cbi	0x08, 2	; 8
     7c4:	f9 01       	movw	r30, r18
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     7ca:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7cc:	42 9a       	sbi	0x08, 2	; 8
     7ce:	c9 01       	movw	r24, r18
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7d4:	42 98       	cbi	0x08, 2	; 8
     7d6:	c9 01       	movw	r24, r18
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     7e0:	42 9a       	sbi	0x08, 2	; 8
     7e2:	c9 01       	movw	r24, r18
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     7e8:	42 98       	cbi	0x08, 2	; 8
     7ea:	c9 01       	movw	r24, r18
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     7f0:	88 e2       	ldi	r24, 0x28	; 40
     7f2:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
     7fc:	c5 e1       	ldi	r28, 0x15	; 21
     7fe:	d1 e0       	ldi	r29, 0x01	; 1
     800:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     802:	16 2f       	mov	r17, r22
     804:	1f 5f       	subi	r17, 0xFF	; 255
     806:	ce 01       	movw	r24, r28
     808:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDdefinechar>
     80c:	28 96       	adiw	r28, 0x08	; 8
     80e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     810:	18 30       	cpi	r17, 0x08	; 8
     812:	b9 f7       	brne	.-18     	; 0x802 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	08 2f       	mov	r16, r24
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	04 c0       	rjmp	.+8      	; 0x82e <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     826:	8e e1       	ldi	r24, 0x1E	; 30
     828:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     82c:	1f 5f       	subi	r17, 0xFF	; 255
     82e:	10 17       	cp	r17, r16
     830:	d0 f3       	brcs	.-12     	; 0x826 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	08 2f       	mov	r16, r24
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	04 c0       	rjmp	.+8      	; 0x84a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     842:	88 e1       	ldi	r24, 0x18	; 24
     844:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     848:	1f 5f       	subi	r17, 0xFF	; 255
     84a:	10 17       	cp	r17, r16
     84c:	d0 f3       	brcs	.-12     	; 0x842 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     854:	8e e0       	ldi	r24, 0x0E	; 14
     856:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     85a:	08 95       	ret

0000085c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     85c:	8f e0       	ldi	r24, 0x0F	; 15
     85e:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     862:	08 95       	ret

00000864 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     864:	8c e0       	ldi	r24, 0x0C	; 12
     866:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     86a:	08 95       	ret

0000086c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     872:	08 95       	ret

00000874 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     874:	8c e0       	ldi	r24, 0x0C	; 12
     876:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
}
     87a:	08 95       	ret

0000087c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	08 2f       	mov	r16, r24
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	04 c0       	rjmp	.+8      	; 0x88e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     886:	80 e1       	ldi	r24, 0x10	; 16
     888:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     88c:	1f 5f       	subi	r17, 0xFF	; 255
     88e:	10 17       	cp	r17, r16
     890:	d0 f3       	brcs	.-12     	; 0x886 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	08 95       	ret

00000898 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	08 2f       	mov	r16, r24
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     8a2:	84 e1       	ldi	r24, 0x14	; 20
     8a4:	0e 94 46 03 	call	0x68c	; 0x68c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     8a8:	1f 5f       	subi	r17, 0xFF	; 255
     8aa:	10 17       	cp	r17, r16
     8ac:	d0 f3       	brcs	.-12     	; 0x8a2 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	08 95       	ret

000008b4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     8c4:	96 e0       	ldi	r25, 0x06	; 6
     8c6:	89 9f       	mul	r24, r25
     8c8:	c0 01       	movw	r24, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	24 2f       	mov	r18, r20
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	ac 01       	movw	r20, r24
     8d2:	42 9f       	mul	r20, r18
     8d4:	c0 01       	movw	r24, r0
     8d6:	43 9f       	mul	r20, r19
     8d8:	90 0d       	add	r25, r0
     8da:	52 9f       	mul	r21, r18
     8dc:	90 0d       	add	r25, r0
     8de:	11 24       	eor	r1, r1
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divmodhi4>
     8e6:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     8e8:	cb 01       	movw	r24, r22
     8ea:	66 e0       	ldi	r22, 0x06	; 6
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__udivmodhi4>
     8f2:	e8 2e       	mov	r14, r24
     8f4:	ff 24       	eor	r15, r15
     8f6:	00 e0       	ldi	r16, 0x00	; 0
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	12 c0       	rjmp	.+36     	; 0x920 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     8fc:	c8 01       	movw	r24, r16
     8fe:	05 96       	adiw	r24, 0x05	; 5
     900:	c8 17       	cp	r28, r24
     902:	d9 07       	cpc	r29, r25
     904:	10 f0       	brcs	.+4      	; 0x90a <LCDprogressBar+0x56>
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	06 c0       	rjmp	.+12     	; 0x916 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     90a:	c0 17       	cp	r28, r16
     90c:	d1 07       	cpc	r29, r17
     90e:	10 f0       	brcs	.+4      	; 0x914 <LCDprogressBar+0x60>
     910:	8e 2d       	mov	r24, r14
     912:	01 c0       	rjmp	.+2      	; 0x916 <LCDprogressBar+0x62>
     914:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     916:	0e 94 25 03 	call	0x64a	; 0x64a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     91a:	f3 94       	inc	r15
     91c:	0a 5f       	subi	r16, 0xFA	; 250
     91e:	1f 4f       	sbci	r17, 0xFF	; 255
     920:	fd 14       	cp	r15, r13
     922:	60 f3       	brcs	.-40     	; 0x8fc <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	08 95       	ret

00000934 <exit>:
     934:	f8 94       	cli
     936:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_exit>

0000093a <fputc>:
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	8c 01       	movw	r16, r24
     944:	eb 01       	movw	r28, r22
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	81 ff       	sbrs	r24, 1
     94a:	1b c0       	rjmp	.+54     	; 0x982 <fputc+0x48>
     94c:	82 ff       	sbrs	r24, 2
     94e:	0d c0       	rjmp	.+26     	; 0x96a <fputc+0x30>
     950:	2e 81       	ldd	r18, Y+6	; 0x06
     952:	3f 81       	ldd	r19, Y+7	; 0x07
     954:	8c 81       	ldd	r24, Y+4	; 0x04
     956:	9d 81       	ldd	r25, Y+5	; 0x05
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	64 f4       	brge	.+24     	; 0x976 <fputc+0x3c>
     95e:	e8 81       	ld	r30, Y
     960:	f9 81       	ldd	r31, Y+1	; 0x01
     962:	01 93       	st	Z+, r16
     964:	f9 83       	std	Y+1, r31	; 0x01
     966:	e8 83       	st	Y, r30
     968:	06 c0       	rjmp	.+12     	; 0x976 <fputc+0x3c>
     96a:	e8 85       	ldd	r30, Y+8	; 0x08
     96c:	f9 85       	ldd	r31, Y+9	; 0x09
     96e:	80 2f       	mov	r24, r16
     970:	09 95       	icall
     972:	89 2b       	or	r24, r25
     974:	31 f4       	brne	.+12     	; 0x982 <fputc+0x48>
     976:	8e 81       	ldd	r24, Y+6	; 0x06
     978:	9f 81       	ldd	r25, Y+7	; 0x07
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	9f 83       	std	Y+7, r25	; 0x07
     97e:	8e 83       	std	Y+6, r24	; 0x06
     980:	02 c0       	rjmp	.+4      	; 0x986 <fputc+0x4c>
     982:	0f ef       	ldi	r16, 0xFF	; 255
     984:	1f ef       	ldi	r17, 0xFF	; 255
     986:	c8 01       	movw	r24, r16
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <fputs>:
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	7c 01       	movw	r14, r24
     9a0:	8b 01       	movw	r16, r22
     9a2:	db 01       	movw	r26, r22
     9a4:	13 96       	adiw	r26, 0x03	; 3
     9a6:	8c 91       	ld	r24, X
     9a8:	81 fd       	sbrc	r24, 1
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <fputs+0x20>
     9ac:	cf ef       	ldi	r28, 0xFF	; 255
     9ae:	df ef       	ldi	r29, 0xFF	; 255
     9b0:	13 c0       	rjmp	.+38     	; 0x9d8 <fputs+0x46>
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	0b c0       	rjmp	.+22     	; 0x9ce <fputs+0x3c>
     9b8:	d8 01       	movw	r26, r16
     9ba:	18 96       	adiw	r26, 0x08	; 8
     9bc:	ed 91       	ld	r30, X+
     9be:	fc 91       	ld	r31, X
     9c0:	19 97       	sbiw	r26, 0x09	; 9
     9c2:	b8 01       	movw	r22, r16
     9c4:	09 95       	icall
     9c6:	89 2b       	or	r24, r25
     9c8:	11 f0       	breq	.+4      	; 0x9ce <fputs+0x3c>
     9ca:	cf ef       	ldi	r28, 0xFF	; 255
     9cc:	df ef       	ldi	r29, 0xFF	; 255
     9ce:	f7 01       	movw	r30, r14
     9d0:	81 91       	ld	r24, Z+
     9d2:	7f 01       	movw	r14, r30
     9d4:	88 23       	and	r24, r24
     9d6:	81 f7       	brne	.-32     	; 0x9b8 <fputs+0x26>
     9d8:	ce 01       	movw	r24, r28
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	08 95       	ret

000009e8 <fscanf>:
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	9e 01       	movw	r18, r28
     9f2:	27 5f       	subi	r18, 0xF7	; 247
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	8d 81       	ldd	r24, Y+5	; 0x05
     9f8:	9e 81       	ldd	r25, Y+6	; 0x06
     9fa:	6f 81       	ldd	r22, Y+7	; 0x07
     9fc:	78 85       	ldd	r23, Y+8	; 0x08
     9fe:	a9 01       	movw	r20, r18
     a00:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <vfscanf>
     a04:	cf 91       	pop	r28
     a06:	df 91       	pop	r29
     a08:	08 95       	ret

00000a0a <sprintf>:
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	2e 97       	sbiw	r28, 0x0e	; 14
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	0d 89       	ldd	r16, Y+21	; 0x15
     a24:	1e 89       	ldd	r17, Y+22	; 0x16
     a26:	86 e0       	ldi	r24, 0x06	; 6
     a28:	8c 83       	std	Y+4, r24	; 0x04
     a2a:	1a 83       	std	Y+2, r17	; 0x02
     a2c:	09 83       	std	Y+1, r16	; 0x01
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	9f e7       	ldi	r25, 0x7F	; 127
     a32:	9e 83       	std	Y+6, r25	; 0x06
     a34:	8d 83       	std	Y+5, r24	; 0x05
     a36:	9e 01       	movw	r18, r28
     a38:	27 5e       	subi	r18, 0xE7	; 231
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	6f 89       	ldd	r22, Y+23	; 0x17
     a42:	78 8d       	ldd	r23, Y+24	; 0x18
     a44:	a9 01       	movw	r20, r18
     a46:	0e 94 36 05 	call	0xa6c	; 0xa6c <vfprintf>
     a4a:	2f 81       	ldd	r18, Y+7	; 0x07
     a4c:	38 85       	ldd	r19, Y+8	; 0x08
     a4e:	02 0f       	add	r16, r18
     a50:	13 1f       	adc	r17, r19
     a52:	f8 01       	movw	r30, r16
     a54:	10 82       	st	Z, r1
     a56:	2e 96       	adiw	r28, 0x0e	; 14
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	cf 91       	pop	r28
     a64:	df 91       	pop	r29
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <vfprintf>:
     a6c:	2f 92       	push	r2
     a6e:	3f 92       	push	r3
     a70:	4f 92       	push	r4
     a72:	5f 92       	push	r5
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	2b 97       	sbiw	r28, 0x0b	; 11
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	3c 01       	movw	r6, r24
     aa2:	2b 01       	movw	r4, r22
     aa4:	5a 01       	movw	r10, r20
     aa6:	fc 01       	movw	r30, r24
     aa8:	17 82       	std	Z+7, r1	; 0x07
     aaa:	16 82       	std	Z+6, r1	; 0x06
     aac:	83 81       	ldd	r24, Z+3	; 0x03
     aae:	81 fd       	sbrc	r24, 1
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <vfprintf+0x4c>
     ab2:	6f ef       	ldi	r22, 0xFF	; 255
     ab4:	7f ef       	ldi	r23, 0xFF	; 255
     ab6:	c6 c1       	rjmp	.+908    	; 0xe44 <vfprintf+0x3d8>
     ab8:	9a e0       	ldi	r25, 0x0A	; 10
     aba:	89 2e       	mov	r8, r25
     abc:	1e 01       	movw	r2, r28
     abe:	08 94       	sec
     ac0:	21 1c       	adc	r2, r1
     ac2:	31 1c       	adc	r3, r1
     ac4:	f3 01       	movw	r30, r6
     ac6:	23 81       	ldd	r18, Z+3	; 0x03
     ac8:	f2 01       	movw	r30, r4
     aca:	23 fd       	sbrc	r18, 3
     acc:	85 91       	lpm	r24, Z+
     ace:	23 ff       	sbrs	r18, 3
     ad0:	81 91       	ld	r24, Z+
     ad2:	2f 01       	movw	r4, r30
     ad4:	88 23       	and	r24, r24
     ad6:	09 f4       	brne	.+2      	; 0xada <vfprintf+0x6e>
     ad8:	b2 c1       	rjmp	.+868    	; 0xe3e <vfprintf+0x3d2>
     ada:	85 32       	cpi	r24, 0x25	; 37
     adc:	39 f4       	brne	.+14     	; 0xaec <vfprintf+0x80>
     ade:	23 fd       	sbrc	r18, 3
     ae0:	85 91       	lpm	r24, Z+
     ae2:	23 ff       	sbrs	r18, 3
     ae4:	81 91       	ld	r24, Z+
     ae6:	2f 01       	movw	r4, r30
     ae8:	85 32       	cpi	r24, 0x25	; 37
     aea:	29 f4       	brne	.+10     	; 0xaf6 <vfprintf+0x8a>
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	b3 01       	movw	r22, r6
     af0:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     af4:	e7 cf       	rjmp	.-50     	; 0xac4 <vfprintf+0x58>
     af6:	98 2f       	mov	r25, r24
     af8:	ff 24       	eor	r15, r15
     afa:	ee 24       	eor	r14, r14
     afc:	99 24       	eor	r9, r9
     afe:	ff e1       	ldi	r31, 0x1F	; 31
     b00:	ff 15       	cp	r31, r15
     b02:	d0 f0       	brcs	.+52     	; 0xb38 <vfprintf+0xcc>
     b04:	9b 32       	cpi	r25, 0x2B	; 43
     b06:	69 f0       	breq	.+26     	; 0xb22 <vfprintf+0xb6>
     b08:	9c 32       	cpi	r25, 0x2C	; 44
     b0a:	28 f4       	brcc	.+10     	; 0xb16 <vfprintf+0xaa>
     b0c:	90 32       	cpi	r25, 0x20	; 32
     b0e:	59 f0       	breq	.+22     	; 0xb26 <vfprintf+0xba>
     b10:	93 32       	cpi	r25, 0x23	; 35
     b12:	91 f4       	brne	.+36     	; 0xb38 <vfprintf+0xcc>
     b14:	0e c0       	rjmp	.+28     	; 0xb32 <vfprintf+0xc6>
     b16:	9d 32       	cpi	r25, 0x2D	; 45
     b18:	49 f0       	breq	.+18     	; 0xb2c <vfprintf+0xc0>
     b1a:	90 33       	cpi	r25, 0x30	; 48
     b1c:	69 f4       	brne	.+26     	; 0xb38 <vfprintf+0xcc>
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	24 c0       	rjmp	.+72     	; 0xb6a <vfprintf+0xfe>
     b22:	52 e0       	ldi	r21, 0x02	; 2
     b24:	f5 2a       	or	r15, r21
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	f8 2a       	or	r15, r24
     b2a:	28 c0       	rjmp	.+80     	; 0xb7c <vfprintf+0x110>
     b2c:	98 e0       	ldi	r25, 0x08	; 8
     b2e:	f9 2a       	or	r15, r25
     b30:	25 c0       	rjmp	.+74     	; 0xb7c <vfprintf+0x110>
     b32:	e0 e1       	ldi	r30, 0x10	; 16
     b34:	fe 2a       	or	r15, r30
     b36:	22 c0       	rjmp	.+68     	; 0xb7c <vfprintf+0x110>
     b38:	f7 fc       	sbrc	r15, 7
     b3a:	29 c0       	rjmp	.+82     	; 0xb8e <vfprintf+0x122>
     b3c:	89 2f       	mov	r24, r25
     b3e:	80 53       	subi	r24, 0x30	; 48
     b40:	8a 30       	cpi	r24, 0x0A	; 10
     b42:	70 f4       	brcc	.+28     	; 0xb60 <vfprintf+0xf4>
     b44:	f6 fe       	sbrs	r15, 6
     b46:	05 c0       	rjmp	.+10     	; 0xb52 <vfprintf+0xe6>
     b48:	98 9c       	mul	r9, r8
     b4a:	90 2c       	mov	r9, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	98 0e       	add	r9, r24
     b50:	15 c0       	rjmp	.+42     	; 0xb7c <vfprintf+0x110>
     b52:	e8 9c       	mul	r14, r8
     b54:	e0 2c       	mov	r14, r0
     b56:	11 24       	eor	r1, r1
     b58:	e8 0e       	add	r14, r24
     b5a:	f0 e2       	ldi	r31, 0x20	; 32
     b5c:	ff 2a       	or	r15, r31
     b5e:	0e c0       	rjmp	.+28     	; 0xb7c <vfprintf+0x110>
     b60:	9e 32       	cpi	r25, 0x2E	; 46
     b62:	29 f4       	brne	.+10     	; 0xb6e <vfprintf+0x102>
     b64:	f6 fc       	sbrc	r15, 6
     b66:	6b c1       	rjmp	.+726    	; 0xe3e <vfprintf+0x3d2>
     b68:	40 e4       	ldi	r20, 0x40	; 64
     b6a:	f4 2a       	or	r15, r20
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <vfprintf+0x110>
     b6e:	9c 36       	cpi	r25, 0x6C	; 108
     b70:	19 f4       	brne	.+6      	; 0xb78 <vfprintf+0x10c>
     b72:	50 e8       	ldi	r21, 0x80	; 128
     b74:	f5 2a       	or	r15, r21
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <vfprintf+0x110>
     b78:	98 36       	cpi	r25, 0x68	; 104
     b7a:	49 f4       	brne	.+18     	; 0xb8e <vfprintf+0x122>
     b7c:	f2 01       	movw	r30, r4
     b7e:	23 fd       	sbrc	r18, 3
     b80:	95 91       	lpm	r25, Z+
     b82:	23 ff       	sbrs	r18, 3
     b84:	91 91       	ld	r25, Z+
     b86:	2f 01       	movw	r4, r30
     b88:	99 23       	and	r25, r25
     b8a:	09 f0       	breq	.+2      	; 0xb8e <vfprintf+0x122>
     b8c:	b8 cf       	rjmp	.-144    	; 0xafe <vfprintf+0x92>
     b8e:	89 2f       	mov	r24, r25
     b90:	85 54       	subi	r24, 0x45	; 69
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	18 f0       	brcs	.+6      	; 0xb9c <vfprintf+0x130>
     b96:	80 52       	subi	r24, 0x20	; 32
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	38 f4       	brcc	.+14     	; 0xbaa <vfprintf+0x13e>
     b9c:	44 e0       	ldi	r20, 0x04	; 4
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	a4 0e       	add	r10, r20
     ba2:	b5 1e       	adc	r11, r21
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	59 83       	std	Y+1, r21	; 0x01
     ba8:	0f c0       	rjmp	.+30     	; 0xbc8 <vfprintf+0x15c>
     baa:	93 36       	cpi	r25, 0x63	; 99
     bac:	31 f0       	breq	.+12     	; 0xbba <vfprintf+0x14e>
     bae:	93 37       	cpi	r25, 0x73	; 115
     bb0:	79 f0       	breq	.+30     	; 0xbd0 <vfprintf+0x164>
     bb2:	93 35       	cpi	r25, 0x53	; 83
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <vfprintf+0x14c>
     bb6:	56 c0       	rjmp	.+172    	; 0xc64 <vfprintf+0x1f8>
     bb8:	20 c0       	rjmp	.+64     	; 0xbfa <vfprintf+0x18e>
     bba:	f5 01       	movw	r30, r10
     bbc:	80 81       	ld	r24, Z
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	42 e0       	ldi	r20, 0x02	; 2
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	a4 0e       	add	r10, r20
     bc6:	b5 1e       	adc	r11, r21
     bc8:	61 01       	movw	r12, r2
     bca:	01 e0       	ldi	r16, 0x01	; 1
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	12 c0       	rjmp	.+36     	; 0xbf4 <vfprintf+0x188>
     bd0:	f5 01       	movw	r30, r10
     bd2:	c0 80       	ld	r12, Z
     bd4:	d1 80       	ldd	r13, Z+1	; 0x01
     bd6:	f6 fc       	sbrc	r15, 6
     bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <vfprintf+0x174>
     bda:	6f ef       	ldi	r22, 0xFF	; 255
     bdc:	7f ef       	ldi	r23, 0xFF	; 255
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x178>
     be0:	69 2d       	mov	r22, r9
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	42 e0       	ldi	r20, 0x02	; 2
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	a4 0e       	add	r10, r20
     bea:	b5 1e       	adc	r11, r21
     bec:	c6 01       	movw	r24, r12
     bee:	0e 94 2c 0a 	call	0x1458	; 0x1458 <strnlen>
     bf2:	8c 01       	movw	r16, r24
     bf4:	5f e7       	ldi	r21, 0x7F	; 127
     bf6:	f5 22       	and	r15, r21
     bf8:	14 c0       	rjmp	.+40     	; 0xc22 <vfprintf+0x1b6>
     bfa:	f5 01       	movw	r30, r10
     bfc:	c0 80       	ld	r12, Z
     bfe:	d1 80       	ldd	r13, Z+1	; 0x01
     c00:	f6 fc       	sbrc	r15, 6
     c02:	03 c0       	rjmp	.+6      	; 0xc0a <vfprintf+0x19e>
     c04:	6f ef       	ldi	r22, 0xFF	; 255
     c06:	7f ef       	ldi	r23, 0xFF	; 255
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x1a2>
     c0a:	69 2d       	mov	r22, r9
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	42 e0       	ldi	r20, 0x02	; 2
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	a4 0e       	add	r10, r20
     c14:	b5 1e       	adc	r11, r21
     c16:	c6 01       	movw	r24, r12
     c18:	0e 94 21 0a 	call	0x1442	; 0x1442 <strnlen_P>
     c1c:	8c 01       	movw	r16, r24
     c1e:	50 e8       	ldi	r21, 0x80	; 128
     c20:	f5 2a       	or	r15, r21
     c22:	f3 fe       	sbrs	r15, 3
     c24:	07 c0       	rjmp	.+14     	; 0xc34 <vfprintf+0x1c8>
     c26:	1a c0       	rjmp	.+52     	; 0xc5c <vfprintf+0x1f0>
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	b3 01       	movw	r22, r6
     c2e:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     c32:	ea 94       	dec	r14
     c34:	8e 2d       	mov	r24, r14
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	08 17       	cp	r16, r24
     c3a:	19 07       	cpc	r17, r25
     c3c:	a8 f3       	brcs	.-22     	; 0xc28 <vfprintf+0x1bc>
     c3e:	0e c0       	rjmp	.+28     	; 0xc5c <vfprintf+0x1f0>
     c40:	f6 01       	movw	r30, r12
     c42:	f7 fc       	sbrc	r15, 7
     c44:	85 91       	lpm	r24, Z+
     c46:	f7 fe       	sbrs	r15, 7
     c48:	81 91       	ld	r24, Z+
     c4a:	6f 01       	movw	r12, r30
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	b3 01       	movw	r22, r6
     c50:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     c54:	e1 10       	cpse	r14, r1
     c56:	ea 94       	dec	r14
     c58:	01 50       	subi	r16, 0x01	; 1
     c5a:	10 40       	sbci	r17, 0x00	; 0
     c5c:	01 15       	cp	r16, r1
     c5e:	11 05       	cpc	r17, r1
     c60:	79 f7       	brne	.-34     	; 0xc40 <vfprintf+0x1d4>
     c62:	ea c0       	rjmp	.+468    	; 0xe38 <vfprintf+0x3cc>
     c64:	94 36       	cpi	r25, 0x64	; 100
     c66:	11 f0       	breq	.+4      	; 0xc6c <vfprintf+0x200>
     c68:	99 36       	cpi	r25, 0x69	; 105
     c6a:	69 f5       	brne	.+90     	; 0xcc6 <vfprintf+0x25a>
     c6c:	f7 fe       	sbrs	r15, 7
     c6e:	08 c0       	rjmp	.+16     	; 0xc80 <vfprintf+0x214>
     c70:	f5 01       	movw	r30, r10
     c72:	20 81       	ld	r18, Z
     c74:	31 81       	ldd	r19, Z+1	; 0x01
     c76:	42 81       	ldd	r20, Z+2	; 0x02
     c78:	53 81       	ldd	r21, Z+3	; 0x03
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0a c0       	rjmp	.+20     	; 0xc94 <vfprintf+0x228>
     c80:	f5 01       	movw	r30, r10
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	9c 01       	movw	r18, r24
     c88:	44 27       	eor	r20, r20
     c8a:	37 fd       	sbrc	r19, 7
     c8c:	40 95       	com	r20
     c8e:	54 2f       	mov	r21, r20
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a8 0e       	add	r10, r24
     c96:	b9 1e       	adc	r11, r25
     c98:	9f e6       	ldi	r25, 0x6F	; 111
     c9a:	f9 22       	and	r15, r25
     c9c:	57 ff       	sbrs	r21, 7
     c9e:	09 c0       	rjmp	.+18     	; 0xcb2 <vfprintf+0x246>
     ca0:	50 95       	com	r21
     ca2:	40 95       	com	r20
     ca4:	30 95       	com	r19
     ca6:	21 95       	neg	r18
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	4f 4f       	sbci	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	e0 e8       	ldi	r30, 0x80	; 128
     cb0:	fe 2a       	or	r15, r30
     cb2:	ca 01       	movw	r24, r20
     cb4:	b9 01       	movw	r22, r18
     cb6:	a1 01       	movw	r20, r2
     cb8:	2a e0       	ldi	r18, 0x0A	; 10
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	0e 94 93 0a 	call	0x1526	; 0x1526 <__ultoa_invert>
     cc0:	d8 2e       	mov	r13, r24
     cc2:	d2 18       	sub	r13, r2
     cc4:	40 c0       	rjmp	.+128    	; 0xd46 <vfprintf+0x2da>
     cc6:	95 37       	cpi	r25, 0x75	; 117
     cc8:	29 f4       	brne	.+10     	; 0xcd4 <vfprintf+0x268>
     cca:	1f 2d       	mov	r17, r15
     ccc:	1f 7e       	andi	r17, 0xEF	; 239
     cce:	2a e0       	ldi	r18, 0x0A	; 10
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	1d c0       	rjmp	.+58     	; 0xd0e <vfprintf+0x2a2>
     cd4:	1f 2d       	mov	r17, r15
     cd6:	19 7f       	andi	r17, 0xF9	; 249
     cd8:	9f 36       	cpi	r25, 0x6F	; 111
     cda:	61 f0       	breq	.+24     	; 0xcf4 <vfprintf+0x288>
     cdc:	90 37       	cpi	r25, 0x70	; 112
     cde:	20 f4       	brcc	.+8      	; 0xce8 <vfprintf+0x27c>
     ce0:	98 35       	cpi	r25, 0x58	; 88
     ce2:	09 f0       	breq	.+2      	; 0xce6 <vfprintf+0x27a>
     ce4:	ac c0       	rjmp	.+344    	; 0xe3e <vfprintf+0x3d2>
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <vfprintf+0x29a>
     ce8:	90 37       	cpi	r25, 0x70	; 112
     cea:	39 f0       	breq	.+14     	; 0xcfa <vfprintf+0x28e>
     cec:	98 37       	cpi	r25, 0x78	; 120
     cee:	09 f0       	breq	.+2      	; 0xcf2 <vfprintf+0x286>
     cf0:	a6 c0       	rjmp	.+332    	; 0xe3e <vfprintf+0x3d2>
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <vfprintf+0x290>
     cf4:	28 e0       	ldi	r18, 0x08	; 8
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <vfprintf+0x2a2>
     cfa:	10 61       	ori	r17, 0x10	; 16
     cfc:	14 fd       	sbrc	r17, 4
     cfe:	14 60       	ori	r17, 0x04	; 4
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <vfprintf+0x2a2>
     d06:	14 fd       	sbrc	r17, 4
     d08:	16 60       	ori	r17, 0x06	; 6
     d0a:	20 e1       	ldi	r18, 0x10	; 16
     d0c:	32 e0       	ldi	r19, 0x02	; 2
     d0e:	17 ff       	sbrs	r17, 7
     d10:	08 c0       	rjmp	.+16     	; 0xd22 <vfprintf+0x2b6>
     d12:	f5 01       	movw	r30, r10
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	44 e0       	ldi	r20, 0x04	; 4
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <vfprintf+0x2c6>
     d22:	f5 01       	movw	r30, r10
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	bc 01       	movw	r22, r24
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	42 e0       	ldi	r20, 0x02	; 2
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	a4 0e       	add	r10, r20
     d34:	b5 1e       	adc	r11, r21
     d36:	a1 01       	movw	r20, r2
     d38:	0e 94 93 0a 	call	0x1526	; 0x1526 <__ultoa_invert>
     d3c:	d8 2e       	mov	r13, r24
     d3e:	d2 18       	sub	r13, r2
     d40:	8f e7       	ldi	r24, 0x7F	; 127
     d42:	f8 2e       	mov	r15, r24
     d44:	f1 22       	and	r15, r17
     d46:	f6 fe       	sbrs	r15, 6
     d48:	0b c0       	rjmp	.+22     	; 0xd60 <vfprintf+0x2f4>
     d4a:	5e ef       	ldi	r21, 0xFE	; 254
     d4c:	f5 22       	and	r15, r21
     d4e:	d9 14       	cp	r13, r9
     d50:	38 f4       	brcc	.+14     	; 0xd60 <vfprintf+0x2f4>
     d52:	f4 fe       	sbrs	r15, 4
     d54:	07 c0       	rjmp	.+14     	; 0xd64 <vfprintf+0x2f8>
     d56:	f2 fc       	sbrc	r15, 2
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <vfprintf+0x2f8>
     d5a:	8f ee       	ldi	r24, 0xEF	; 239
     d5c:	f8 22       	and	r15, r24
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <vfprintf+0x2f8>
     d60:	1d 2d       	mov	r17, r13
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x2fa>
     d64:	19 2d       	mov	r17, r9
     d66:	f4 fe       	sbrs	r15, 4
     d68:	0d c0       	rjmp	.+26     	; 0xd84 <vfprintf+0x318>
     d6a:	fe 01       	movw	r30, r28
     d6c:	ed 0d       	add	r30, r13
     d6e:	f1 1d       	adc	r31, r1
     d70:	80 81       	ld	r24, Z
     d72:	80 33       	cpi	r24, 0x30	; 48
     d74:	19 f4       	brne	.+6      	; 0xd7c <vfprintf+0x310>
     d76:	99 ee       	ldi	r25, 0xE9	; 233
     d78:	f9 22       	and	r15, r25
     d7a:	08 c0       	rjmp	.+16     	; 0xd8c <vfprintf+0x320>
     d7c:	1f 5f       	subi	r17, 0xFF	; 255
     d7e:	f2 fe       	sbrs	r15, 2
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <vfprintf+0x320>
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <vfprintf+0x31e>
     d84:	8f 2d       	mov	r24, r15
     d86:	86 78       	andi	r24, 0x86	; 134
     d88:	09 f0       	breq	.+2      	; 0xd8c <vfprintf+0x320>
     d8a:	1f 5f       	subi	r17, 0xFF	; 255
     d8c:	0f 2d       	mov	r16, r15
     d8e:	f3 fc       	sbrc	r15, 3
     d90:	14 c0       	rjmp	.+40     	; 0xdba <vfprintf+0x34e>
     d92:	f0 fe       	sbrs	r15, 0
     d94:	0f c0       	rjmp	.+30     	; 0xdb4 <vfprintf+0x348>
     d96:	1e 15       	cp	r17, r14
     d98:	10 f0       	brcs	.+4      	; 0xd9e <vfprintf+0x332>
     d9a:	9d 2c       	mov	r9, r13
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <vfprintf+0x348>
     d9e:	9d 2c       	mov	r9, r13
     da0:	9e 0c       	add	r9, r14
     da2:	91 1a       	sub	r9, r17
     da4:	1e 2d       	mov	r17, r14
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <vfprintf+0x348>
     da8:	80 e2       	ldi	r24, 0x20	; 32
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	b3 01       	movw	r22, r6
     dae:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     db2:	1f 5f       	subi	r17, 0xFF	; 255
     db4:	1e 15       	cp	r17, r14
     db6:	c0 f3       	brcs	.-16     	; 0xda8 <vfprintf+0x33c>
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <vfprintf+0x356>
     dba:	1e 15       	cp	r17, r14
     dbc:	10 f4       	brcc	.+4      	; 0xdc2 <vfprintf+0x356>
     dbe:	e1 1a       	sub	r14, r17
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <vfprintf+0x358>
     dc2:	ee 24       	eor	r14, r14
     dc4:	04 ff       	sbrs	r16, 4
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <vfprintf+0x37a>
     dc8:	80 e3       	ldi	r24, 0x30	; 48
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	b3 01       	movw	r22, r6
     dce:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     dd2:	02 ff       	sbrs	r16, 2
     dd4:	1d c0       	rjmp	.+58     	; 0xe10 <vfprintf+0x3a4>
     dd6:	01 fd       	sbrc	r16, 1
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <vfprintf+0x374>
     dda:	88 e7       	ldi	r24, 0x78	; 120
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <vfprintf+0x390>
     de0:	88 e5       	ldi	r24, 0x58	; 88
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <vfprintf+0x390>
     de6:	80 2f       	mov	r24, r16
     de8:	86 78       	andi	r24, 0x86	; 134
     dea:	91 f0       	breq	.+36     	; 0xe10 <vfprintf+0x3a4>
     dec:	01 ff       	sbrs	r16, 1
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x388>
     df0:	8b e2       	ldi	r24, 0x2B	; 43
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <vfprintf+0x38a>
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	f7 fc       	sbrc	r15, 7
     df8:	8d e2       	ldi	r24, 0x2D	; 45
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	b3 01       	movw	r22, r6
     dfe:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <vfprintf+0x3a4>
     e04:	80 e3       	ldi	r24, 0x30	; 48
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	b3 01       	movw	r22, r6
     e0a:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     e0e:	9a 94       	dec	r9
     e10:	d9 14       	cp	r13, r9
     e12:	c0 f3       	brcs	.-16     	; 0xe04 <vfprintf+0x398>
     e14:	da 94       	dec	r13
     e16:	f1 01       	movw	r30, r2
     e18:	ed 0d       	add	r30, r13
     e1a:	f1 1d       	adc	r31, r1
     e1c:	80 81       	ld	r24, Z
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	b3 01       	movw	r22, r6
     e22:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     e26:	dd 20       	and	r13, r13
     e28:	a9 f7       	brne	.-22     	; 0xe14 <vfprintf+0x3a8>
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <vfprintf+0x3cc>
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	b3 01       	movw	r22, r6
     e32:	0e 94 9d 04 	call	0x93a	; 0x93a <fputc>
     e36:	ea 94       	dec	r14
     e38:	ee 20       	and	r14, r14
     e3a:	c1 f7       	brne	.-16     	; 0xe2c <vfprintf+0x3c0>
     e3c:	43 ce       	rjmp	.-890    	; 0xac4 <vfprintf+0x58>
     e3e:	f3 01       	movw	r30, r6
     e40:	66 81       	ldd	r22, Z+6	; 0x06
     e42:	77 81       	ldd	r23, Z+7	; 0x07
     e44:	cb 01       	movw	r24, r22
     e46:	2b 96       	adiw	r28, 0x0b	; 11
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	af 90       	pop	r10
     e66:	9f 90       	pop	r9
     e68:	8f 90       	pop	r8
     e6a:	7f 90       	pop	r7
     e6c:	6f 90       	pop	r6
     e6e:	5f 90       	pop	r5
     e70:	4f 90       	pop	r4
     e72:	3f 90       	pop	r3
     e74:	2f 90       	pop	r2
     e76:	08 95       	ret

00000e78 <putval>:
     e78:	fc 01       	movw	r30, r24
     e7a:	20 fd       	sbrc	r18, 0
     e7c:	08 c0       	rjmp	.+16     	; 0xe8e <putval+0x16>
     e7e:	23 fd       	sbrc	r18, 3
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <putval+0x14>
     e82:	22 ff       	sbrs	r18, 2
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <putval+0x12>
     e86:	73 83       	std	Z+3, r23	; 0x03
     e88:	62 83       	std	Z+2, r22	; 0x02
     e8a:	51 83       	std	Z+1, r21	; 0x01
     e8c:	40 83       	st	Z, r20
     e8e:	08 95       	ret

00000e90 <mulacc>:
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	44 ff       	sbrs	r20, 4
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <mulacc+0x10>
     e9c:	33 e0       	ldi	r19, 0x03	; 3
     e9e:	11 c0       	rjmp	.+34     	; 0xec2 <mulacc+0x32>
     ea0:	46 ff       	sbrs	r20, 6
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <mulacc+0x18>
     ea4:	34 e0       	ldi	r19, 0x04	; 4
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <mulacc+0x32>
     ea8:	db 01       	movw	r26, r22
     eaa:	fc 01       	movw	r30, r24
     eac:	aa 0f       	add	r26, r26
     eae:	bb 1f       	adc	r27, r27
     eb0:	ee 1f       	adc	r30, r30
     eb2:	ff 1f       	adc	r31, r31
     eb4:	10 94       	com	r1
     eb6:	d1 f7       	brne	.-12     	; 0xeac <mulacc+0x1c>
     eb8:	6a 0f       	add	r22, r26
     eba:	7b 1f       	adc	r23, r27
     ebc:	8e 1f       	adc	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	31 e0       	ldi	r19, 0x01	; 1
     ec2:	66 0f       	add	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	31 50       	subi	r19, 0x01	; 1
     ecc:	d1 f7       	brne	.-12     	; 0xec2 <mulacc+0x32>
     ece:	7b 01       	movw	r14, r22
     ed0:	8c 01       	movw	r16, r24
     ed2:	e2 0e       	add	r14, r18
     ed4:	f1 1c       	adc	r15, r1
     ed6:	01 1d       	adc	r16, r1
     ed8:	11 1d       	adc	r17, r1
     eda:	a8 01       	movw	r20, r16
     edc:	97 01       	movw	r18, r14
     ede:	b7 01       	movw	r22, r14
     ee0:	ca 01       	movw	r24, r20
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <skip_spaces>:
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	8c 01       	movw	r16, r24
     ef6:	c8 01       	movw	r24, r16
     ef8:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
     efc:	ec 01       	movw	r28, r24
     efe:	97 fd       	sbrc	r25, 7
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <skip_spaces+0x26>
     f02:	0e 94 0e 0a 	call	0x141c	; 0x141c <isspace>
     f06:	89 2b       	or	r24, r25
     f08:	b1 f7       	brne	.-20     	; 0xef6 <skip_spaces+0xa>
     f0a:	ce 01       	movw	r24, r28
     f0c:	b8 01       	movw	r22, r16
     f0e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <ungetc>
     f12:	ce 01       	movw	r24, r28
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	08 95       	ret

00000f1e <conv_int>:
     f1e:	af 92       	push	r10
     f20:	bf 92       	push	r11
     f22:	cf 92       	push	r12
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
     f34:	c6 2e       	mov	r12, r22
     f36:	5a 01       	movw	r10, r20
     f38:	12 2f       	mov	r17, r18
     f3a:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
     f3e:	ac 01       	movw	r20, r24
     f40:	8b 32       	cpi	r24, 0x2B	; 43
     f42:	19 f0       	breq	.+6      	; 0xf4a <conv_int+0x2c>
     f44:	8d 32       	cpi	r24, 0x2D	; 45
     f46:	51 f4       	brne	.+20     	; 0xf5c <conv_int+0x3e>
     f48:	10 68       	ori	r17, 0x80	; 128
     f4a:	ca 94       	dec	r12
     f4c:	09 f4       	brne	.+2      	; 0xf50 <conv_int+0x32>
     f4e:	6d c0       	rjmp	.+218    	; 0x102a <conv_int+0x10c>
     f50:	ce 01       	movw	r24, r28
     f52:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
     f56:	ac 01       	movw	r20, r24
     f58:	97 fd       	sbrc	r25, 7
     f5a:	67 c0       	rjmp	.+206    	; 0x102a <conv_int+0x10c>
     f5c:	6d ef       	ldi	r22, 0xFD	; 253
     f5e:	d6 2e       	mov	r13, r22
     f60:	d1 22       	and	r13, r17
     f62:	8d 2d       	mov	r24, r13
     f64:	80 73       	andi	r24, 0x30	; 48
     f66:	01 f5       	brne	.+64     	; 0xfa8 <conv_int+0x8a>
     f68:	40 33       	cpi	r20, 0x30	; 48
     f6a:	f1 f4       	brne	.+60     	; 0xfa8 <conv_int+0x8a>
     f6c:	ca 94       	dec	r12
     f6e:	09 f4       	brne	.+2      	; 0xf72 <conv_int+0x54>
     f70:	47 c0       	rjmp	.+142    	; 0x1000 <conv_int+0xe2>
     f72:	ce 01       	movw	r24, r28
     f74:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
     f78:	ac 01       	movw	r20, r24
     f7a:	97 fd       	sbrc	r25, 7
     f7c:	41 c0       	rjmp	.+130    	; 0x1000 <conv_int+0xe2>
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	d8 2a       	or	r13, r24
     f82:	48 37       	cpi	r20, 0x78	; 120
     f84:	11 f0       	breq	.+4      	; 0xf8a <conv_int+0x6c>
     f86:	48 35       	cpi	r20, 0x58	; 88
     f88:	59 f4       	brne	.+22     	; 0xfa0 <conv_int+0x82>
     f8a:	80 e4       	ldi	r24, 0x40	; 64
     f8c:	d8 2a       	or	r13, r24
     f8e:	ca 94       	dec	r12
     f90:	b9 f1       	breq	.+110    	; 0x1000 <conv_int+0xe2>
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
     f98:	ac 01       	movw	r20, r24
     f9a:	99 23       	and	r25, r25
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <conv_int+0x8a>
     f9e:	30 c0       	rjmp	.+96     	; 0x1000 <conv_int+0xe2>
     fa0:	d6 fc       	sbrc	r13, 6
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <conv_int+0x8a>
     fa4:	80 e1       	ldi	r24, 0x10	; 16
     fa6:	d8 2a       	or	r13, r24
     fa8:	ee 24       	eor	r14, r14
     faa:	ff 24       	eor	r15, r15
     fac:	87 01       	movw	r16, r14
     fae:	24 2f       	mov	r18, r20
     fb0:	20 53       	subi	r18, 0x30	; 48
     fb2:	28 30       	cpi	r18, 0x08	; 8
     fb4:	88 f0       	brcs	.+34     	; 0xfd8 <conv_int+0xba>
     fb6:	d4 fc       	sbrc	r13, 4
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <conv_int+0xae>
     fba:	2a 30       	cpi	r18, 0x0A	; 10
     fbc:	68 f0       	brcs	.+26     	; 0xfd8 <conv_int+0xba>
     fbe:	d6 fe       	sbrs	r13, 6
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <conv_int+0xae>
     fc2:	2f 7d       	andi	r18, 0xDF	; 223
     fc4:	82 2f       	mov	r24, r18
     fc6:	81 51       	subi	r24, 0x11	; 17
     fc8:	86 30       	cpi	r24, 0x06	; 6
     fca:	28 f0       	brcs	.+10     	; 0xfd6 <conv_int+0xb8>
     fcc:	ca 01       	movw	r24, r20
     fce:	be 01       	movw	r22, r28
     fd0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <ungetc>
     fd4:	12 c0       	rjmp	.+36     	; 0xffa <conv_int+0xdc>
     fd6:	27 50       	subi	r18, 0x07	; 7
     fd8:	c8 01       	movw	r24, r16
     fda:	b7 01       	movw	r22, r14
     fdc:	4d 2d       	mov	r20, r13
     fde:	0e 94 48 07 	call	0xe90	; 0xe90 <mulacc>
     fe2:	7b 01       	movw	r14, r22
     fe4:	8c 01       	movw	r16, r24
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	d8 2a       	or	r13, r24
     fea:	ca 94       	dec	r12
     fec:	61 f0       	breq	.+24     	; 0x1006 <conv_int+0xe8>
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
     ff4:	ac 01       	movw	r20, r24
     ff6:	97 ff       	sbrs	r25, 7
     ff8:	da cf       	rjmp	.-76     	; 0xfae <conv_int+0x90>
     ffa:	d1 fc       	sbrc	r13, 1
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <conv_int+0xe8>
     ffe:	15 c0       	rjmp	.+42     	; 0x102a <conv_int+0x10c>
    1000:	ee 24       	eor	r14, r14
    1002:	ff 24       	eor	r15, r15
    1004:	87 01       	movw	r16, r14
    1006:	d7 fe       	sbrs	r13, 7
    1008:	08 c0       	rjmp	.+16     	; 0x101a <conv_int+0xfc>
    100a:	10 95       	com	r17
    100c:	00 95       	com	r16
    100e:	f0 94       	com	r15
    1010:	e0 94       	com	r14
    1012:	e1 1c       	adc	r14, r1
    1014:	f1 1c       	adc	r15, r1
    1016:	01 1d       	adc	r16, r1
    1018:	11 1d       	adc	r17, r1
    101a:	c5 01       	movw	r24, r10
    101c:	b8 01       	movw	r22, r16
    101e:	a7 01       	movw	r20, r14
    1020:	2d 2d       	mov	r18, r13
    1022:	0e 94 3c 07 	call	0xe78	; 0xe78 <putval>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	01 c0       	rjmp	.+2      	; 0x102c <conv_int+0x10e>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	bf 90       	pop	r11
    103e:	af 90       	pop	r10
    1040:	08 95       	ret

00001042 <conv_brk>:
    1042:	6f 92       	push	r6
    1044:	7f 92       	push	r7
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	a0 97       	sbiw	r28, 0x20	; 32
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	6c 01       	movw	r12, r24
    1070:	a6 2e       	mov	r10, r22
    1072:	8a 01       	movw	r16, r20
    1074:	79 01       	movw	r14, r18
    1076:	fe 01       	movw	r30, r28
    1078:	31 96       	adiw	r30, 0x01	; 1
    107a:	80 e2       	ldi	r24, 0x20	; 32
    107c:	df 01       	movw	r26, r30
    107e:	1d 92       	st	X+, r1
    1080:	8a 95       	dec	r24
    1082:	e9 f7       	brne	.-6      	; 0x107e <conv_brk+0x3c>
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	4f 01       	movw	r8, r30
    1090:	a1 e0       	ldi	r26, 0x01	; 1
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	f6 01       	movw	r30, r12
    1096:	83 81       	ldd	r24, Z+3	; 0x03
    1098:	f7 01       	movw	r30, r14
    109a:	83 fd       	sbrc	r24, 3
    109c:	25 91       	lpm	r18, Z+
    109e:	83 ff       	sbrs	r24, 3
    10a0:	21 91       	ld	r18, Z+
    10a2:	7f 01       	movw	r14, r30
    10a4:	22 23       	and	r18, r18
    10a6:	09 f4       	brne	.+2      	; 0x10aa <conv_brk+0x68>
    10a8:	7e c0       	rjmp	.+252    	; 0x11a6 <conv_brk+0x164>
    10aa:	2e 35       	cpi	r18, 0x5E	; 94
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <conv_brk+0x72>
    10ae:	41 15       	cp	r20, r1
    10b0:	51 05       	cpc	r21, r1
    10b2:	69 f1       	breq	.+90     	; 0x110e <conv_brk+0xcc>
    10b4:	87 2f       	mov	r24, r23
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	84 17       	cp	r24, r20
    10ba:	95 07       	cpc	r25, r21
    10bc:	44 f4       	brge	.+16     	; 0x10ce <conv_brk+0x8c>
    10be:	2d 35       	cpi	r18, 0x5D	; 93
    10c0:	51 f1       	breq	.+84     	; 0x1116 <conv_brk+0xd4>
    10c2:	2d 32       	cpi	r18, 0x2D	; 45
    10c4:	21 f4       	brne	.+8      	; 0x10ce <conv_brk+0x8c>
    10c6:	33 23       	and	r19, r19
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <conv_brk+0x92>
    10ca:	31 e0       	ldi	r19, 0x01	; 1
    10cc:	21 c0       	rjmp	.+66     	; 0x1110 <conv_brk+0xce>
    10ce:	33 23       	and	r19, r19
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <conv_brk+0x92>
    10d2:	62 2f       	mov	r22, r18
    10d4:	32 2f       	mov	r19, r18
    10d6:	83 2f       	mov	r24, r19
    10d8:	86 95       	lsr	r24
    10da:	86 95       	lsr	r24
    10dc:	86 95       	lsr	r24
    10de:	f4 01       	movw	r30, r8
    10e0:	e8 0f       	add	r30, r24
    10e2:	f1 1d       	adc	r31, r1
    10e4:	83 2f       	mov	r24, r19
    10e6:	87 70       	andi	r24, 0x07	; 7
    10e8:	3d 01       	movw	r6, r26
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <conv_brk+0xae>
    10ec:	66 0c       	add	r6, r6
    10ee:	77 1c       	adc	r7, r7
    10f0:	8a 95       	dec	r24
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <conv_brk+0xaa>
    10f4:	20 81       	ld	r18, Z
    10f6:	26 29       	or	r18, r6
    10f8:	20 83       	st	Z, r18
    10fa:	36 17       	cp	r19, r22
    10fc:	11 f4       	brne	.+4      	; 0x1102 <conv_brk+0xc0>
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <conv_brk+0xce>
    1102:	36 17       	cp	r19, r22
    1104:	10 f4       	brcc	.+4      	; 0x110a <conv_brk+0xc8>
    1106:	3f 5f       	subi	r19, 0xFF	; 255
    1108:	e6 cf       	rjmp	.-52     	; 0x10d6 <conv_brk+0x94>
    110a:	31 50       	subi	r19, 0x01	; 1
    110c:	e4 cf       	rjmp	.-56     	; 0x10d6 <conv_brk+0x94>
    110e:	71 e0       	ldi	r23, 0x01	; 1
    1110:	4f 5f       	subi	r20, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	bf cf       	rjmp	.-130    	; 0x1094 <conv_brk+0x52>
    1116:	33 23       	and	r19, r19
    1118:	19 f0       	breq	.+6      	; 0x1120 <conv_brk+0xde>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	80 62       	ori	r24, 0x20	; 32
    111e:	8e 83       	std	Y+6, r24	; 0x06
    1120:	77 23       	and	r23, r23
    1122:	59 f0       	breq	.+22     	; 0x113a <conv_brk+0xf8>
    1124:	fe 01       	movw	r30, r28
    1126:	31 96       	adiw	r30, 0x01	; 1
    1128:	9e 01       	movw	r18, r28
    112a:	2f 5d       	subi	r18, 0xDF	; 223
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	80 95       	com	r24
    1132:	81 93       	st	Z+, r24
    1134:	e2 17       	cp	r30, r18
    1136:	f3 07       	cpc	r31, r19
    1138:	d1 f7       	brne	.-12     	; 0x112e <conv_brk+0xec>
    113a:	bb 24       	eor	r11, r11
    113c:	b3 94       	inc	r11
    113e:	4e 01       	movw	r8, r28
    1140:	08 94       	sec
    1142:	81 1c       	adc	r8, r1
    1144:	91 1c       	adc	r9, r1
    1146:	c6 01       	movw	r24, r12
    1148:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
    114c:	ac 01       	movw	r20, r24
    114e:	97 fd       	sbrc	r25, 7
    1150:	22 c0       	rjmp	.+68     	; 0x1196 <conv_brk+0x154>
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	86 95       	lsr	r24
    1158:	f4 01       	movw	r30, r8
    115a:	e8 0f       	add	r30, r24
    115c:	f1 1d       	adc	r31, r1
    115e:	80 81       	ld	r24, Z
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9a 01       	movw	r18, r20
    1164:	27 70       	andi	r18, 0x07	; 7
    1166:	30 70       	andi	r19, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <conv_brk+0x12c>
    116a:	95 95       	asr	r25
    116c:	87 95       	ror	r24
    116e:	2a 95       	dec	r18
    1170:	e2 f7       	brpl	.-8      	; 0x116a <conv_brk+0x128>
    1172:	80 fd       	sbrc	r24, 0
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <conv_brk+0x13e>
    1176:	ca 01       	movw	r24, r20
    1178:	b6 01       	movw	r22, r12
    117a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <ungetc>
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <conv_brk+0x154>
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	19 f0       	breq	.+6      	; 0x118c <conv_brk+0x14a>
    1186:	d8 01       	movw	r26, r16
    1188:	4d 93       	st	X+, r20
    118a:	8d 01       	movw	r16, r26
    118c:	aa 94       	dec	r10
    118e:	bb 24       	eor	r11, r11
    1190:	aa 20       	and	r10, r10
    1192:	c9 f6       	brne	.-78     	; 0x1146 <conv_brk+0x104>
    1194:	02 c0       	rjmp	.+4      	; 0x119a <conv_brk+0x158>
    1196:	bb 20       	and	r11, r11
    1198:	31 f4       	brne	.+12     	; 0x11a6 <conv_brk+0x164>
    119a:	01 15       	cp	r16, r1
    119c:	11 05       	cpc	r17, r1
    119e:	29 f0       	breq	.+10     	; 0x11aa <conv_brk+0x168>
    11a0:	f8 01       	movw	r30, r16
    11a2:	10 82       	st	Z, r1
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <conv_brk+0x168>
    11a6:	ee 24       	eor	r14, r14
    11a8:	ff 24       	eor	r15, r15
    11aa:	c7 01       	movw	r24, r14
    11ac:	a0 96       	adiw	r28, 0x20	; 32
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	7f 90       	pop	r7
    11d2:	6f 90       	pop	r6
    11d4:	08 95       	ret

000011d6 <vfscanf>:
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	5c 01       	movw	r10, r24
    11f4:	6b 01       	movw	r12, r22
    11f6:	3a 01       	movw	r6, r20
    11f8:	fc 01       	movw	r30, r24
    11fa:	17 82       	std	Z+7, r1	; 0x07
    11fc:	16 82       	std	Z+6, r1	; 0x06
    11fe:	88 24       	eor	r8, r8
    1200:	ea c0       	rjmp	.+468    	; 0x13d6 <vfscanf+0x200>
    1202:	81 2f       	mov	r24, r17
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 0e 0a 	call	0x141c	; 0x141c <isspace>
    120a:	89 2b       	or	r24, r25
    120c:	21 f0       	breq	.+8      	; 0x1216 <vfscanf+0x40>
    120e:	c5 01       	movw	r24, r10
    1210:	0e 94 76 07 	call	0xeec	; 0xeec <skip_spaces>
    1214:	e0 c0       	rjmp	.+448    	; 0x13d6 <vfscanf+0x200>
    1216:	15 32       	cpi	r17, 0x25	; 37
    1218:	49 f4       	brne	.+18     	; 0x122c <vfscanf+0x56>
    121a:	f6 01       	movw	r30, r12
    121c:	f3 fc       	sbrc	r15, 3
    121e:	65 91       	lpm	r22, Z+
    1220:	f3 fe       	sbrs	r15, 3
    1222:	61 91       	ld	r22, Z+
    1224:	6f 01       	movw	r12, r30
    1226:	65 32       	cpi	r22, 0x25	; 37
    1228:	69 f4       	brne	.+26     	; 0x1244 <vfscanf+0x6e>
    122a:	15 e2       	ldi	r17, 0x25	; 37
    122c:	c5 01       	movw	r24, r10
    122e:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
    1232:	97 fd       	sbrc	r25, 7
    1234:	dc c0       	rjmp	.+440    	; 0x13ee <vfscanf+0x218>
    1236:	18 17       	cp	r17, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <vfscanf+0x66>
    123a:	cd c0       	rjmp	.+410    	; 0x13d6 <vfscanf+0x200>
    123c:	b5 01       	movw	r22, r10
    123e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <ungetc>
    1242:	da c0       	rjmp	.+436    	; 0x13f8 <vfscanf+0x222>
    1244:	6a 32       	cpi	r22, 0x2A	; 42
    1246:	19 f0       	breq	.+6      	; 0x124e <vfscanf+0x78>
    1248:	16 2f       	mov	r17, r22
    124a:	00 e0       	ldi	r16, 0x00	; 0
    124c:	06 c0       	rjmp	.+12     	; 0x125a <vfscanf+0x84>
    124e:	f3 fc       	sbrc	r15, 3
    1250:	15 91       	lpm	r17, Z+
    1252:	f3 fe       	sbrs	r15, 3
    1254:	11 91       	ld	r17, Z+
    1256:	6f 01       	movw	r12, r30
    1258:	01 e0       	ldi	r16, 0x01	; 1
    125a:	99 24       	eor	r9, r9
    125c:	0f c0       	rjmp	.+30     	; 0x127c <vfscanf+0xa6>
    125e:	02 60       	ori	r16, 0x02	; 2
    1260:	69 2d       	mov	r22, r9
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	0e 94 48 07 	call	0xe90	; 0xe90 <mulacc>
    126e:	96 2e       	mov	r9, r22
    1270:	f6 01       	movw	r30, r12
    1272:	f3 fc       	sbrc	r15, 3
    1274:	15 91       	lpm	r17, Z+
    1276:	f3 fe       	sbrs	r15, 3
    1278:	11 91       	ld	r17, Z+
    127a:	6f 01       	movw	r12, r30
    127c:	21 2f       	mov	r18, r17
    127e:	20 53       	subi	r18, 0x30	; 48
    1280:	2a 30       	cpi	r18, 0x0A	; 10
    1282:	68 f3       	brcs	.-38     	; 0x125e <vfscanf+0x88>
    1284:	01 fd       	sbrc	r16, 1
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfscanf+0xb8>
    1288:	99 24       	eor	r9, r9
    128a:	9a 94       	dec	r9
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <vfscanf+0xbe>
    128e:	99 20       	and	r9, r9
    1290:	09 f4       	brne	.+2      	; 0x1294 <vfscanf+0xbe>
    1292:	b2 c0       	rjmp	.+356    	; 0x13f8 <vfscanf+0x222>
    1294:	18 36       	cpi	r17, 0x68	; 104
    1296:	21 f0       	breq	.+8      	; 0x12a0 <vfscanf+0xca>
    1298:	1c 36       	cpi	r17, 0x6C	; 108
    129a:	99 f4       	brne	.+38     	; 0x12c2 <vfscanf+0xec>
    129c:	f6 01       	movw	r30, r12
    129e:	0b c0       	rjmp	.+22     	; 0x12b6 <vfscanf+0xe0>
    12a0:	f6 01       	movw	r30, r12
    12a2:	f3 fc       	sbrc	r15, 3
    12a4:	65 91       	lpm	r22, Z+
    12a6:	f3 fe       	sbrs	r15, 3
    12a8:	61 91       	ld	r22, Z+
    12aa:	68 36       	cpi	r22, 0x68	; 104
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <vfscanf+0xde>
    12ae:	6f 01       	movw	r12, r30
    12b0:	16 2f       	mov	r17, r22
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <vfscanf+0xec>
    12b4:	08 60       	ori	r16, 0x08	; 8
    12b6:	04 60       	ori	r16, 0x04	; 4
    12b8:	f3 fc       	sbrc	r15, 3
    12ba:	15 91       	lpm	r17, Z+
    12bc:	f3 fe       	sbrs	r15, 3
    12be:	11 91       	ld	r17, Z+
    12c0:	6f 01       	movw	r12, r30
    12c2:	11 23       	and	r17, r17
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <vfscanf+0xf2>
    12c6:	98 c0       	rjmp	.+304    	; 0x13f8 <vfscanf+0x222>
    12c8:	85 e5       	ldi	r24, 0x55	; 85
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	61 2f       	mov	r22, r17
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	0e 94 16 0a 	call	0x142c	; 0x142c <strchr_P>
    12d4:	89 2b       	or	r24, r25
    12d6:	09 f4       	brne	.+2      	; 0x12da <vfscanf+0x104>
    12d8:	8f c0       	rjmp	.+286    	; 0x13f8 <vfscanf+0x222>
    12da:	80 2f       	mov	r24, r16
    12dc:	00 ff       	sbrs	r16, 0
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <vfscanf+0x110>
    12e0:	ee 24       	eor	r14, r14
    12e2:	ff 24       	eor	r15, r15
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <vfscanf+0x11e>
    12e6:	f3 01       	movw	r30, r6
    12e8:	e0 80       	ld	r14, Z
    12ea:	f1 80       	ldd	r15, Z+1	; 0x01
    12ec:	22 e0       	ldi	r18, 0x02	; 2
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	62 0e       	add	r6, r18
    12f2:	73 1e       	adc	r7, r19
    12f4:	1e 36       	cpi	r17, 0x6E	; 110
    12f6:	51 f4       	brne	.+20     	; 0x130c <vfscanf+0x136>
    12f8:	f5 01       	movw	r30, r10
    12fa:	46 81       	ldd	r20, Z+6	; 0x06
    12fc:	57 81       	ldd	r21, Z+7	; 0x07
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	c7 01       	movw	r24, r14
    1304:	20 2f       	mov	r18, r16
    1306:	0e 94 3c 07 	call	0xe78	; 0xe78 <putval>
    130a:	65 c0       	rjmp	.+202    	; 0x13d6 <vfscanf+0x200>
    130c:	13 36       	cpi	r17, 0x63	; 99
    130e:	91 f4       	brne	.+36     	; 0x1334 <vfscanf+0x15e>
    1310:	81 fd       	sbrc	r24, 1
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <vfscanf+0x142>
    1314:	99 24       	eor	r9, r9
    1316:	93 94       	inc	r9
    1318:	c5 01       	movw	r24, r10
    131a:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
    131e:	97 fd       	sbrc	r25, 7
    1320:	66 c0       	rjmp	.+204    	; 0x13ee <vfscanf+0x218>
    1322:	e1 14       	cp	r14, r1
    1324:	f1 04       	cpc	r15, r1
    1326:	19 f0       	breq	.+6      	; 0x132e <vfscanf+0x158>
    1328:	f7 01       	movw	r30, r14
    132a:	81 93       	st	Z+, r24
    132c:	7f 01       	movw	r14, r30
    132e:	9a 94       	dec	r9
    1330:	99 f7       	brne	.-26     	; 0x1318 <vfscanf+0x142>
    1332:	4f c0       	rjmp	.+158    	; 0x13d2 <vfscanf+0x1fc>
    1334:	1b 35       	cpi	r17, 0x5B	; 91
    1336:	59 f4       	brne	.+22     	; 0x134e <vfscanf+0x178>
    1338:	c5 01       	movw	r24, r10
    133a:	69 2d       	mov	r22, r9
    133c:	a7 01       	movw	r20, r14
    133e:	96 01       	movw	r18, r12
    1340:	0e 94 21 08 	call	0x1042	; 0x1042 <conv_brk>
    1344:	6c 01       	movw	r12, r24
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	09 f0       	breq	.+2      	; 0x134c <vfscanf+0x176>
    134a:	43 c0       	rjmp	.+134    	; 0x13d2 <vfscanf+0x1fc>
    134c:	3d c0       	rjmp	.+122    	; 0x13c8 <vfscanf+0x1f2>
    134e:	c5 01       	movw	r24, r10
    1350:	0e 94 76 07 	call	0xeec	; 0xeec <skip_spaces>
    1354:	97 fd       	sbrc	r25, 7
    1356:	4b c0       	rjmp	.+150    	; 0x13ee <vfscanf+0x218>
    1358:	1f 36       	cpi	r17, 0x6F	; 111
    135a:	59 f1       	breq	.+86     	; 0x13b2 <vfscanf+0x1dc>
    135c:	10 37       	cpi	r17, 0x70	; 112
    135e:	28 f4       	brcc	.+10     	; 0x136a <vfscanf+0x194>
    1360:	14 36       	cpi	r17, 0x64	; 100
    1362:	29 f1       	breq	.+74     	; 0x13ae <vfscanf+0x1d8>
    1364:	19 36       	cpi	r17, 0x69	; 105
    1366:	39 f5       	brne	.+78     	; 0x13b6 <vfscanf+0x1e0>
    1368:	27 c0       	rjmp	.+78     	; 0x13b8 <vfscanf+0x1e2>
    136a:	13 37       	cpi	r17, 0x73	; 115
    136c:	19 f0       	breq	.+6      	; 0x1374 <vfscanf+0x19e>
    136e:	15 37       	cpi	r17, 0x75	; 117
    1370:	11 f5       	brne	.+68     	; 0x13b6 <vfscanf+0x1e0>
    1372:	1d c0       	rjmp	.+58     	; 0x13ae <vfscanf+0x1d8>
    1374:	c5 01       	movw	r24, r10
    1376:	0e 94 37 0a 	call	0x146e	; 0x146e <fgetc>
    137a:	ec 01       	movw	r28, r24
    137c:	97 fd       	sbrc	r25, 7
    137e:	11 c0       	rjmp	.+34     	; 0x13a2 <vfscanf+0x1cc>
    1380:	0e 94 0e 0a 	call	0x141c	; 0x141c <isspace>
    1384:	89 2b       	or	r24, r25
    1386:	29 f0       	breq	.+10     	; 0x1392 <vfscanf+0x1bc>
    1388:	ce 01       	movw	r24, r28
    138a:	b5 01       	movw	r22, r10
    138c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <ungetc>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <vfscanf+0x1cc>
    1392:	e1 14       	cp	r14, r1
    1394:	f1 04       	cpc	r15, r1
    1396:	19 f0       	breq	.+6      	; 0x139e <vfscanf+0x1c8>
    1398:	f7 01       	movw	r30, r14
    139a:	c1 93       	st	Z+, r28
    139c:	7f 01       	movw	r14, r30
    139e:	9a 94       	dec	r9
    13a0:	49 f7       	brne	.-46     	; 0x1374 <vfscanf+0x19e>
    13a2:	e1 14       	cp	r14, r1
    13a4:	f1 04       	cpc	r15, r1
    13a6:	a9 f0       	breq	.+42     	; 0x13d2 <vfscanf+0x1fc>
    13a8:	f7 01       	movw	r30, r14
    13aa:	10 82       	st	Z, r1
    13ac:	12 c0       	rjmp	.+36     	; 0x13d2 <vfscanf+0x1fc>
    13ae:	00 62       	ori	r16, 0x20	; 32
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <vfscanf+0x1e2>
    13b2:	00 61       	ori	r16, 0x10	; 16
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfscanf+0x1e2>
    13b6:	00 64       	ori	r16, 0x40	; 64
    13b8:	c5 01       	movw	r24, r10
    13ba:	69 2d       	mov	r22, r9
    13bc:	a7 01       	movw	r20, r14
    13be:	20 2f       	mov	r18, r16
    13c0:	0e 94 8f 07 	call	0xf1e	; 0xf1e <conv_int>
    13c4:	88 23       	and	r24, r24
    13c6:	29 f4       	brne	.+10     	; 0x13d2 <vfscanf+0x1fc>
    13c8:	f5 01       	movw	r30, r10
    13ca:	83 81       	ldd	r24, Z+3	; 0x03
    13cc:	80 73       	andi	r24, 0x30	; 48
    13ce:	79 f4       	brne	.+30     	; 0x13ee <vfscanf+0x218>
    13d0:	13 c0       	rjmp	.+38     	; 0x13f8 <vfscanf+0x222>
    13d2:	00 ff       	sbrs	r16, 0
    13d4:	83 94       	inc	r8
    13d6:	f5 01       	movw	r30, r10
    13d8:	f3 80       	ldd	r15, Z+3	; 0x03
    13da:	f6 01       	movw	r30, r12
    13dc:	f3 fc       	sbrc	r15, 3
    13de:	15 91       	lpm	r17, Z+
    13e0:	f3 fe       	sbrs	r15, 3
    13e2:	11 91       	ld	r17, Z+
    13e4:	6f 01       	movw	r12, r30
    13e6:	11 23       	and	r17, r17
    13e8:	09 f0       	breq	.+2      	; 0x13ec <vfscanf+0x216>
    13ea:	0b cf       	rjmp	.-490    	; 0x1202 <vfscanf+0x2c>
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <vfscanf+0x222>
    13ee:	88 20       	and	r8, r8
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <vfscanf+0x222>
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <vfscanf+0x226>
    13f8:	28 2d       	mov	r18, r8
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	c9 01       	movw	r24, r18
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	9f 90       	pop	r9
    1414:	8f 90       	pop	r8
    1416:	7f 90       	pop	r7
    1418:	6f 90       	pop	r6
    141a:	08 95       	ret

0000141c <isspace>:
    141c:	91 11       	cpse	r25, r1
    141e:	e1 c0       	rjmp	.+450    	; 0x15e2 <__ctype_isfalse>
    1420:	80 32       	cpi	r24, 0x20	; 32
    1422:	19 f0       	breq	.+6      	; 0x142a <isspace+0xe>
    1424:	89 50       	subi	r24, 0x09	; 9
    1426:	85 50       	subi	r24, 0x05	; 5
    1428:	d0 f7       	brcc	.-12     	; 0x141e <isspace+0x2>
    142a:	08 95       	ret

0000142c <strchr_P>:
    142c:	fc 01       	movw	r30, r24
    142e:	05 90       	lpm	r0, Z+
    1430:	06 16       	cp	r0, r22
    1432:	21 f0       	breq	.+8      	; 0x143c <strchr_P+0x10>
    1434:	00 20       	and	r0, r0
    1436:	d9 f7       	brne	.-10     	; 0x142e <strchr_P+0x2>
    1438:	c0 01       	movw	r24, r0
    143a:	08 95       	ret
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	cf 01       	movw	r24, r30
    1440:	08 95       	ret

00001442 <strnlen_P>:
    1442:	fc 01       	movw	r30, r24
    1444:	05 90       	lpm	r0, Z+
    1446:	61 50       	subi	r22, 0x01	; 1
    1448:	70 40       	sbci	r23, 0x00	; 0
    144a:	01 10       	cpse	r0, r1
    144c:	d8 f7       	brcc	.-10     	; 0x1444 <strnlen_P+0x2>
    144e:	80 95       	com	r24
    1450:	90 95       	com	r25
    1452:	8e 0f       	add	r24, r30
    1454:	9f 1f       	adc	r25, r31
    1456:	08 95       	ret

00001458 <strnlen>:
    1458:	fc 01       	movw	r30, r24
    145a:	61 50       	subi	r22, 0x01	; 1
    145c:	70 40       	sbci	r23, 0x00	; 0
    145e:	01 90       	ld	r0, Z+
    1460:	01 10       	cpse	r0, r1
    1462:	d8 f7       	brcc	.-10     	; 0x145a <strnlen+0x2>
    1464:	80 95       	com	r24
    1466:	90 95       	com	r25
    1468:	8e 0f       	add	r24, r30
    146a:	9f 1f       	adc	r25, r31
    146c:	08 95       	ret

0000146e <fgetc>:
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	ec 01       	movw	r28, r24
    1474:	4b 81       	ldd	r20, Y+3	; 0x03
    1476:	40 ff       	sbrs	r20, 0
    1478:	1a c0       	rjmp	.+52     	; 0x14ae <fgetc+0x40>
    147a:	46 ff       	sbrs	r20, 6
    147c:	0a c0       	rjmp	.+20     	; 0x1492 <fgetc+0x24>
    147e:	4f 7b       	andi	r20, 0xBF	; 191
    1480:	4b 83       	std	Y+3, r20	; 0x03
    1482:	8e 81       	ldd	r24, Y+6	; 0x06
    1484:	9f 81       	ldd	r25, Y+7	; 0x07
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	9f 83       	std	Y+7, r25	; 0x07
    148a:	8e 83       	std	Y+6, r24	; 0x06
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	2b c0       	rjmp	.+86     	; 0x14e8 <fgetc+0x7a>
    1492:	42 ff       	sbrs	r20, 2
    1494:	13 c0       	rjmp	.+38     	; 0x14bc <fgetc+0x4e>
    1496:	e8 81       	ld	r30, Y
    1498:	f9 81       	ldd	r31, Y+1	; 0x01
    149a:	80 81       	ld	r24, Z
    149c:	28 2f       	mov	r18, r24
    149e:	33 27       	eor	r19, r19
    14a0:	27 fd       	sbrc	r18, 7
    14a2:	30 95       	com	r19
    14a4:	21 15       	cp	r18, r1
    14a6:	31 05       	cpc	r19, r1
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <fgetc+0x46>
    14aa:	40 62       	ori	r20, 0x20	; 32
    14ac:	4b 83       	std	Y+3, r20	; 0x03
    14ae:	2f ef       	ldi	r18, 0xFF	; 255
    14b0:	3f ef       	ldi	r19, 0xFF	; 255
    14b2:	1b c0       	rjmp	.+54     	; 0x14ea <fgetc+0x7c>
    14b4:	31 96       	adiw	r30, 0x01	; 1
    14b6:	f9 83       	std	Y+1, r31	; 0x01
    14b8:	e8 83       	st	Y, r30
    14ba:	11 c0       	rjmp	.+34     	; 0x14de <fgetc+0x70>
    14bc:	ea 85       	ldd	r30, Y+10	; 0x0a
    14be:	fb 85       	ldd	r31, Y+11	; 0x0b
    14c0:	ce 01       	movw	r24, r28
    14c2:	09 95       	icall
    14c4:	9c 01       	movw	r18, r24
    14c6:	97 ff       	sbrs	r25, 7
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <fgetc+0x70>
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	2f 5f       	subi	r18, 0xFF	; 255
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <fgetc+0x68>
    14d2:	80 e2       	ldi	r24, 0x20	; 32
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <fgetc+0x6a>
    14d6:	80 e1       	ldi	r24, 0x10	; 16
    14d8:	89 2b       	or	r24, r25
    14da:	8b 83       	std	Y+3, r24	; 0x03
    14dc:	e8 cf       	rjmp	.-48     	; 0x14ae <fgetc+0x40>
    14de:	8e 81       	ldd	r24, Y+6	; 0x06
    14e0:	9f 81       	ldd	r25, Y+7	; 0x07
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	9f 83       	std	Y+7, r25	; 0x07
    14e6:	8e 83       	std	Y+6, r24	; 0x06
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	c9 01       	movw	r24, r18
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <ungetc>:
    14f2:	9c 01       	movw	r18, r24
    14f4:	fb 01       	movw	r30, r22
    14f6:	83 81       	ldd	r24, Z+3	; 0x03
    14f8:	80 ff       	sbrs	r24, 0
    14fa:	11 c0       	rjmp	.+34     	; 0x151e <ungetc+0x2c>
    14fc:	86 fd       	sbrc	r24, 6
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <ungetc+0x2c>
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	2f 3f       	cpi	r18, 0xFF	; 255
    1504:	39 07       	cpc	r19, r25
    1506:	59 f0       	breq	.+22     	; 0x151e <ungetc+0x2c>
    1508:	22 83       	std	Z+2, r18	; 0x02
    150a:	80 64       	ori	r24, 0x40	; 64
    150c:	8f 7d       	andi	r24, 0xDF	; 223
    150e:	83 83       	std	Z+3, r24	; 0x03
    1510:	86 81       	ldd	r24, Z+6	; 0x06
    1512:	97 81       	ldd	r25, Z+7	; 0x07
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	97 83       	std	Z+7, r25	; 0x07
    1518:	86 83       	std	Z+6, r24	; 0x06
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <ungetc+0x30>
    151e:	2f ef       	ldi	r18, 0xFF	; 255
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	c9 01       	movw	r24, r18
    1524:	08 95       	ret

00001526 <__ultoa_invert>:
    1526:	fa 01       	movw	r30, r20
    1528:	aa 27       	eor	r26, r26
    152a:	28 30       	cpi	r18, 0x08	; 8
    152c:	51 f1       	breq	.+84     	; 0x1582 <__ultoa_invert+0x5c>
    152e:	20 31       	cpi	r18, 0x10	; 16
    1530:	81 f1       	breq	.+96     	; 0x1592 <__ultoa_invert+0x6c>
    1532:	e8 94       	clt
    1534:	6f 93       	push	r22
    1536:	6e 7f       	andi	r22, 0xFE	; 254
    1538:	6e 5f       	subi	r22, 0xFE	; 254
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	8f 4f       	sbci	r24, 0xFF	; 255
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	af 4f       	sbci	r26, 0xFF	; 255
    1542:	b1 e0       	ldi	r27, 0x01	; 1
    1544:	3e d0       	rcall	.+124    	; 0x15c2 <__ultoa_invert+0x9c>
    1546:	b4 e0       	ldi	r27, 0x04	; 4
    1548:	3c d0       	rcall	.+120    	; 0x15c2 <__ultoa_invert+0x9c>
    154a:	67 0f       	add	r22, r23
    154c:	78 1f       	adc	r23, r24
    154e:	89 1f       	adc	r24, r25
    1550:	9a 1f       	adc	r25, r26
    1552:	a1 1d       	adc	r26, r1
    1554:	68 0f       	add	r22, r24
    1556:	79 1f       	adc	r23, r25
    1558:	8a 1f       	adc	r24, r26
    155a:	91 1d       	adc	r25, r1
    155c:	a1 1d       	adc	r26, r1
    155e:	6a 0f       	add	r22, r26
    1560:	71 1d       	adc	r23, r1
    1562:	81 1d       	adc	r24, r1
    1564:	91 1d       	adc	r25, r1
    1566:	a1 1d       	adc	r26, r1
    1568:	20 d0       	rcall	.+64     	; 0x15aa <__ultoa_invert+0x84>
    156a:	09 f4       	brne	.+2      	; 0x156e <__ultoa_invert+0x48>
    156c:	68 94       	set
    156e:	3f 91       	pop	r19
    1570:	2a e0       	ldi	r18, 0x0A	; 10
    1572:	26 9f       	mul	r18, r22
    1574:	11 24       	eor	r1, r1
    1576:	30 19       	sub	r19, r0
    1578:	30 5d       	subi	r19, 0xD0	; 208
    157a:	31 93       	st	Z+, r19
    157c:	de f6       	brtc	.-74     	; 0x1534 <__ultoa_invert+0xe>
    157e:	cf 01       	movw	r24, r30
    1580:	08 95       	ret
    1582:	46 2f       	mov	r20, r22
    1584:	47 70       	andi	r20, 0x07	; 7
    1586:	40 5d       	subi	r20, 0xD0	; 208
    1588:	41 93       	st	Z+, r20
    158a:	b3 e0       	ldi	r27, 0x03	; 3
    158c:	0f d0       	rcall	.+30     	; 0x15ac <__ultoa_invert+0x86>
    158e:	c9 f7       	brne	.-14     	; 0x1582 <__ultoa_invert+0x5c>
    1590:	f6 cf       	rjmp	.-20     	; 0x157e <__ultoa_invert+0x58>
    1592:	46 2f       	mov	r20, r22
    1594:	4f 70       	andi	r20, 0x0F	; 15
    1596:	40 5d       	subi	r20, 0xD0	; 208
    1598:	4a 33       	cpi	r20, 0x3A	; 58
    159a:	18 f0       	brcs	.+6      	; 0x15a2 <__ultoa_invert+0x7c>
    159c:	49 5d       	subi	r20, 0xD9	; 217
    159e:	31 fd       	sbrc	r19, 1
    15a0:	40 52       	subi	r20, 0x20	; 32
    15a2:	41 93       	st	Z+, r20
    15a4:	02 d0       	rcall	.+4      	; 0x15aa <__ultoa_invert+0x84>
    15a6:	a9 f7       	brne	.-22     	; 0x1592 <__ultoa_invert+0x6c>
    15a8:	ea cf       	rjmp	.-44     	; 0x157e <__ultoa_invert+0x58>
    15aa:	b4 e0       	ldi	r27, 0x04	; 4
    15ac:	a6 95       	lsr	r26
    15ae:	97 95       	ror	r25
    15b0:	87 95       	ror	r24
    15b2:	77 95       	ror	r23
    15b4:	67 95       	ror	r22
    15b6:	ba 95       	dec	r27
    15b8:	c9 f7       	brne	.-14     	; 0x15ac <__ultoa_invert+0x86>
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 05       	cpc	r22, r1
    15be:	71 05       	cpc	r23, r1
    15c0:	08 95       	ret
    15c2:	9b 01       	movw	r18, r22
    15c4:	ac 01       	movw	r20, r24
    15c6:	0a 2e       	mov	r0, r26
    15c8:	06 94       	lsr	r0
    15ca:	57 95       	ror	r21
    15cc:	47 95       	ror	r20
    15ce:	37 95       	ror	r19
    15d0:	27 95       	ror	r18
    15d2:	ba 95       	dec	r27
    15d4:	c9 f7       	brne	.-14     	; 0x15c8 <__ultoa_invert+0xa2>
    15d6:	62 0f       	add	r22, r18
    15d8:	73 1f       	adc	r23, r19
    15da:	84 1f       	adc	r24, r20
    15dc:	95 1f       	adc	r25, r21
    15de:	a0 1d       	adc	r26, r0
    15e0:	08 95       	ret

000015e2 <__ctype_isfalse>:
    15e2:	99 27       	eor	r25, r25
    15e4:	88 27       	eor	r24, r24

000015e6 <__ctype_istrue>:
    15e6:	08 95       	ret

000015e8 <__udivmodhi4>:
    15e8:	aa 1b       	sub	r26, r26
    15ea:	bb 1b       	sub	r27, r27
    15ec:	51 e1       	ldi	r21, 0x11	; 17
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <__udivmodhi4_ep>

000015f0 <__udivmodhi4_loop>:
    15f0:	aa 1f       	adc	r26, r26
    15f2:	bb 1f       	adc	r27, r27
    15f4:	a6 17       	cp	r26, r22
    15f6:	b7 07       	cpc	r27, r23
    15f8:	10 f0       	brcs	.+4      	; 0x15fe <__udivmodhi4_ep>
    15fa:	a6 1b       	sub	r26, r22
    15fc:	b7 0b       	sbc	r27, r23

000015fe <__udivmodhi4_ep>:
    15fe:	88 1f       	adc	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	5a 95       	dec	r21
    1604:	a9 f7       	brne	.-22     	; 0x15f0 <__udivmodhi4_loop>
    1606:	80 95       	com	r24
    1608:	90 95       	com	r25
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	08 95       	ret

00001610 <__divmodhi4>:
    1610:	97 fb       	bst	r25, 7
    1612:	09 2e       	mov	r0, r25
    1614:	07 26       	eor	r0, r23
    1616:	0a d0       	rcall	.+20     	; 0x162c <__divmodhi4_neg1>
    1618:	77 fd       	sbrc	r23, 7
    161a:	04 d0       	rcall	.+8      	; 0x1624 <__divmodhi4_neg2>
    161c:	e5 df       	rcall	.-54     	; 0x15e8 <__udivmodhi4>
    161e:	06 d0       	rcall	.+12     	; 0x162c <__divmodhi4_neg1>
    1620:	00 20       	and	r0, r0
    1622:	1a f4       	brpl	.+6      	; 0x162a <__divmodhi4_exit>

00001624 <__divmodhi4_neg2>:
    1624:	70 95       	com	r23
    1626:	61 95       	neg	r22
    1628:	7f 4f       	sbci	r23, 0xFF	; 255

0000162a <__divmodhi4_exit>:
    162a:	08 95       	ret

0000162c <__divmodhi4_neg1>:
    162c:	f6 f7       	brtc	.-4      	; 0x162a <__divmodhi4_exit>
    162e:	90 95       	com	r25
    1630:	81 95       	neg	r24
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	08 95       	ret

00001636 <_exit>:
    1636:	f8 94       	cli

00001638 <__stop_program>:
    1638:	ff cf       	rjmp	.-2      	; 0x1638 <__stop_program>
