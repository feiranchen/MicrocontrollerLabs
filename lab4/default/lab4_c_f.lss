
lab4_c_f.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001c2e  00001cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000174  0080013c  0080013c  00001cfe  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ea  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c9  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b0  00000000  00000000  000030f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e11  00000000  00000000  000035a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000043b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bb2  00000000  00000000  00004a8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_20>
      54:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_21>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

0000008c <LcdCustomChar>:
      8c:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      9c:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      ac:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      bc:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000cc <__c.1988>:
      cc:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	11 e0       	ldi	r17, 0x01	; 1
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	ee e2       	ldi	r30, 0x2E	; 46
      ec:	fc e1       	ldi	r31, 0x1C	; 28
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	ac 33       	cpi	r26, 0x3C	; 60
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	12 e0       	ldi	r17, 0x02	; 2
     100:	ac e3       	ldi	r26, 0x3C	; 60
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	a0 3b       	cpi	r26, 0xB0	; 176
     10a:	b1 07       	cpc	r27, r17
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <main>
     112:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	0b b6       	in	r0, 0x3b	; 59
     124:	0f 92       	push	r0
     126:	11 24       	eor	r1, r1
     128:	2f 92       	push	r2
     12a:	3f 92       	push	r3
     12c:	4f 92       	push	r4
     12e:	5f 92       	push	r5
     130:	6f 92       	push	r6
     132:	7f 92       	push	r7
     134:	8f 92       	push	r8
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	2f 93       	push	r18
     14a:	3f 93       	push	r19
     14c:	4f 93       	push	r20
     14e:	5f 93       	push	r21
     150:	6f 93       	push	r22
     152:	7f 93       	push	r23
     154:	8f 93       	push	r24
     156:	9f 93       	push	r25
     158:	af 93       	push	r26
     15a:	bf 93       	push	r27
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ef 93       	push	r30
     162:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     164:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     168:	50 90 60 02 	lds	r5, 0x0260
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     16c:	b0 9b       	sbis	0x16, 0	; 22
     16e:	14 c0       	rjmp	.+40     	; 0x198 <__vector_13+0x7e>
    ++kernel.cycles;
     170:	80 91 a1 02 	lds	r24, 0x02A1
     174:	90 91 a2 02 	lds	r25, 0x02A2
     178:	a0 91 a3 02 	lds	r26, 0x02A3
     17c:	b0 91 a4 02 	lds	r27, 0x02A4
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	a1 1d       	adc	r26, r1
     184:	b1 1d       	adc	r27, r1
     186:	80 93 a1 02 	sts	0x02A1, r24
     18a:	90 93 a2 02 	sts	0x02A2, r25
     18e:	a0 93 a3 02 	sts	0x02A3, r26
     192:	b0 93 a4 02 	sts	0x02A4, r27
    TIFR1 |= (1<<TOV1) ;
     196:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     198:	80 91 84 00 	lds	r24, 0x0084
     19c:	90 91 85 00 	lds	r25, 0x0085
     1a0:	3c 01       	movw	r6, r24
     1a2:	88 24       	eor	r8, r8
     1a4:	99 24       	eor	r9, r9
     1a6:	80 91 a1 02 	lds	r24, 0x02A1
     1aa:	90 91 a2 02 	lds	r25, 0x02A2
     1ae:	a0 91 a3 02 	lds	r26, 0x02A3
     1b2:	b0 91 a4 02 	lds	r27, 0x02A4
     1b6:	dc 01       	movw	r26, r24
     1b8:	99 27       	eor	r25, r25
     1ba:	88 27       	eor	r24, r24
     1bc:	68 0e       	add	r6, r24
     1be:	79 1e       	adc	r7, r25
     1c0:	8a 1e       	adc	r8, r26
     1c2:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     1c4:	40 90 5f 02 	lds	r4, 0x025F
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	ff ef       	ldi	r31, 0xFF	; 255
     1ce:	af 2e       	mov	r10, r31
     1d0:	ff ef       	ldi	r31, 0xFF	; 255
     1d2:	bf 2e       	mov	r11, r31
     1d4:	ff ef       	ldi	r31, 0xFF	; 255
     1d6:	cf 2e       	mov	r12, r31
     1d8:	ff e7       	ldi	r31, 0x7F	; 127
     1da:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     1dc:	eb e0       	ldi	r30, 0x0B	; 11
     1de:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     1e0:	33 24       	eor	r3, r3
     1e2:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     1e4:	cb e0       	ldi	r28, 0x0B	; 11
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	43 c0       	rjmp	.+134    	; 0x270 <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     1ea:	62 9d       	mul	r22, r2
     1ec:	d0 01       	movw	r26, r0
     1ee:	11 24       	eor	r1, r1
     1f0:	af 59       	subi	r26, 0x9F	; 159
     1f2:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == TIMEQ) {
     1f4:	1a 96       	adiw	r26, 0x0a	; 10
     1f6:	8c 91       	ld	r24, X
     1f8:	1a 97       	sbiw	r26, 0x0a	; 10
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	a1 f4       	brne	.+40     	; 0x226 <__vector_13+0x10c>
      if (t->release <= now) {
     1fe:	12 96       	adiw	r26, 0x02	; 2
     200:	ed 90       	ld	r14, X+
     202:	fd 90       	ld	r15, X+
     204:	0d 91       	ld	r16, X+
     206:	1c 91       	ld	r17, X
     208:	15 97       	sbiw	r26, 0x05	; 5
     20a:	6e 14       	cp	r6, r14
     20c:	7f 04       	cpc	r7, r15
     20e:	80 06       	cpc	r8, r16
     210:	91 06       	cpc	r9, r17
     212:	20 f0       	brcs	.+8      	; 0x21c <__vector_13+0x102>
	t->state = READYQ;
     214:	1a 96       	adiw	r26, 0x0a	; 10
     216:	3c 92       	st	X, r3
     218:	1a 97       	sbiw	r26, 0x0a	; 10
     21a:	05 c0       	rjmp	.+10     	; 0x226 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     21c:	ea 14       	cp	r14, r10
     21e:	fb 04       	cpc	r15, r11
     220:	0c 05       	cpc	r16, r12
     222:	1d 05       	cpc	r17, r13
     224:	10 f0       	brcs	.+4      	; 0x22a <__vector_13+0x110>
     226:	86 01       	movw	r16, r12
     228:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     22a:	1a 96       	adiw	r26, 0x0a	; 10
     22c:	8c 91       	ld	r24, X
     22e:	1a 97       	sbiw	r26, 0x0a	; 10
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	d9 f4       	brne	.+54     	; 0x26a <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     234:	87 2f       	mov	r24, r23
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	8c 9f       	mul	r24, r28
     23a:	f0 01       	movw	r30, r0
     23c:	8d 9f       	mul	r24, r29
     23e:	f0 0d       	add	r31, r0
     240:	9c 9f       	mul	r25, r28
     242:	f0 0d       	add	r31, r0
     244:	11 24       	eor	r1, r1
     246:	e1 5a       	subi	r30, 0xA1	; 161
     248:	fd 4f       	sbci	r31, 0xFD	; 253
     24a:	16 96       	adiw	r26, 0x06	; 6
     24c:	2d 91       	ld	r18, X+
     24e:	3d 91       	ld	r19, X+
     250:	4d 91       	ld	r20, X+
     252:	5c 91       	ld	r21, X
     254:	19 97       	sbiw	r26, 0x09	; 9
     256:	80 85       	ldd	r24, Z+8	; 0x08
     258:	91 85       	ldd	r25, Z+9	; 0x09
     25a:	a2 85       	ldd	r26, Z+10	; 0x0a
     25c:	b3 85       	ldd	r27, Z+11	; 0x0b
     25e:	28 17       	cp	r18, r24
     260:	39 07       	cpc	r19, r25
     262:	4a 07       	cpc	r20, r26
     264:	5b 07       	cpc	r21, r27
     266:	08 f4       	brcc	.+2      	; 0x26a <__vector_13+0x150>
     268:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     26a:	6f 5f       	subi	r22, 0xFF	; 255
     26c:	57 01       	movw	r10, r14
     26e:	68 01       	movw	r12, r16
     270:	46 16       	cp	r4, r22
     272:	08 f0       	brcs	.+2      	; 0x276 <__vector_13+0x15c>
     274:	ba cf       	rjmp	.-140    	; 0x1ea <__vector_13+0xd0>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     276:	75 15       	cp	r23, r5
     278:	b1 f0       	breq	.+44     	; 0x2a6 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     27a:	eb e0       	ldi	r30, 0x0B	; 11
     27c:	5e 9e       	mul	r5, r30
     27e:	d0 01       	movw	r26, r0
     280:	11 24       	eor	r1, r1
     282:	af 59       	subi	r26, 0x9F	; 159
     284:	bd 4f       	sbci	r27, 0xFD	; 253
    t->spl = SPL;
     286:	8d b7       	in	r24, 0x3d	; 61
     288:	8c 93       	st	X, r24
    t->sph = SPH;
     28a:	8e b7       	in	r24, 0x3e	; 62
     28c:	11 96       	adiw	r26, 0x01	; 1
     28e:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     290:	7e 9f       	mul	r23, r30
     292:	f0 01       	movw	r30, r0
     294:	11 24       	eor	r1, r1
     296:	ef 59       	subi	r30, 0x9F	; 159
     298:	fd 4f       	sbci	r31, 0xFD	; 253
    SPH = t->sph;
     29a:	81 81       	ldd	r24, Z+1	; 0x01
     29c:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     29e:	80 81       	ld	r24, Z
     2a0:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     2a2:	70 93 60 02 	sts	0x0260, r23

  }

  kernel.nextHit = nextHit;  
     2a6:	a0 92 a5 02 	sts	0x02A5, r10
     2aa:	b0 92 a6 02 	sts	0x02A6, r11
     2ae:	c0 92 a7 02 	sts	0x02A7, r12
     2b2:	d0 92 a8 02 	sts	0x02A8, r13

  now = (kernel.cycles << 16) + TCNT1;
     2b6:	20 91 84 00 	lds	r18, 0x0084
     2ba:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	80 91 a1 02 	lds	r24, 0x02A1
     2c6:	90 91 a2 02 	lds	r25, 0x02A2
     2ca:	a0 91 a3 02 	lds	r26, 0x02A3
     2ce:	b0 91 a4 02 	lds	r27, 0x02A4
     2d2:	dc 01       	movw	r26, r24
     2d4:	99 27       	eor	r25, r25
     2d6:	88 27       	eor	r24, r24
     2d8:	28 0f       	add	r18, r24
     2da:	39 1f       	adc	r19, r25
     2dc:	4a 1f       	adc	r20, r26
     2de:	5b 1f       	adc	r21, r27
     2e0:	d6 01       	movw	r26, r12
     2e2:	c5 01       	movw	r24, r10
     2e4:	82 1b       	sub	r24, r18
     2e6:	93 0b       	sbc	r25, r19
     2e8:	a4 0b       	sbc	r26, r20
     2ea:	b5 0b       	sbc	r27, r21
     2ec:	9c 01       	movw	r18, r24
     2ee:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	91 05       	cpc	r25, r1
     2f4:	a1 05       	cpc	r26, r1
     2f6:	b1 05       	cpc	r27, r1
     2f8:	24 f4       	brge	.+8      	; 0x302 <__vector_13+0x1e8>
     2fa:	24 e0       	ldi	r18, 0x04	; 4
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     302:	80 91 84 00 	lds	r24, 0x0084
     306:	90 91 85 00 	lds	r25, 0x0085
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	a4 1f       	adc	r26, r20
     314:	b5 1f       	adc	r27, r21
     316:	80 50       	subi	r24, 0x00	; 0
     318:	90 40       	sbci	r25, 0x00	; 0
     31a:	a1 40       	sbci	r26, 0x01	; 1
     31c:	b0 40       	sbci	r27, 0x00	; 0
     31e:	38 f4       	brcc	.+14     	; 0x32e <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     320:	80 91 84 00 	lds	r24, 0x0084
     324:	90 91 85 00 	lds	r25, 0x0085
     328:	82 0f       	add	r24, r18
     32a:	93 1f       	adc	r25, r19
     32c:	0e c0       	rjmp	.+28     	; 0x34a <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     32e:	80 91 84 00 	lds	r24, 0x0084
     332:	90 91 85 00 	lds	r25, 0x0085
     336:	8c 5f       	subi	r24, 0xFC	; 252
     338:	9f 4f       	sbci	r25, 0xFF	; 255
     33a:	28 f4       	brcc	.+10     	; 0x346 <__vector_13+0x22c>
    OCR1A = 0x0000;
     33c:	10 92 89 00 	sts	0x0089, r1
     340:	10 92 88 00 	sts	0x0088, r1
     344:	06 c0       	rjmp	.+12     	; 0x352 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	90 93 89 00 	sts	0x0089, r25
     34e:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	80 93 6f 00 	sts	0x006F, r24
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	7f 91       	pop	r23
     36a:	6f 91       	pop	r22
     36c:	5f 91       	pop	r21
     36e:	4f 91       	pop	r20
     370:	3f 91       	pop	r19
     372:	2f 91       	pop	r18
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	8f 90       	pop	r8
     388:	7f 90       	pop	r7
     38a:	6f 90       	pop	r6
     38c:	5f 90       	pop	r5
     38e:	4f 90       	pop	r4
     390:	3f 90       	pop	r3
     392:	2f 90       	pop	r2
     394:	0f 90       	pop	r0
     396:	0b be       	out	0x3b, r0	; 59
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     3a2:	10 92 85 00 	sts	0x0085, r1
     3a6:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     3aa:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     3ae:	25 e0       	ldi	r18, 0x05	; 5
     3b0:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     3b4:	22 e0       	ldi	r18, 0x02	; 2
     3b6:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     3ba:	2f ef       	ldi	r18, 0xFF	; 255
     3bc:	30 e4       	ldi	r19, 0x40	; 64
     3be:	28 1b       	sub	r18, r24
     3c0:	39 0b       	sbc	r19, r25
     3c2:	30 93 a0 02 	sts	0x02A0, r19
     3c6:	20 93 9f 02 	sts	0x029F, r18
  kernel.nbrOfTasks = 0;
     3ca:	10 92 5f 02 	sts	0x025F, r1
  kernel.running = 0;
     3ce:	10 92 60 02 	sts	0x0260, r1

  kernel.cycles = 0x0000;
     3d2:	10 92 a1 02 	sts	0x02A1, r1
     3d6:	10 92 a2 02 	sts	0x02A2, r1
     3da:	10 92 a3 02 	sts	0x02A3, r1
     3de:	10 92 a4 02 	sts	0x02A4, r1
  kernel.nextHit = 0x7FFFFFFF;
     3e2:	8f ef       	ldi	r24, 0xFF	; 255
     3e4:	9f ef       	ldi	r25, 0xFF	; 255
     3e6:	af ef       	ldi	r26, 0xFF	; 255
     3e8:	bf e7       	ldi	r27, 0x7F	; 127
     3ea:	80 93 a5 02 	sts	0x02A5, r24
     3ee:	90 93 a6 02 	sts	0x02A6, r25
     3f2:	a0 93 a7 02 	sts	0x02A7, r26
     3f6:	b0 93 a8 02 	sts	0x02A8, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     3fa:	80 93 67 02 	sts	0x0267, r24
     3fe:	90 93 68 02 	sts	0x0268, r25
     402:	a0 93 69 02 	sts	0x0269, r26
     406:	b0 93 6a 02 	sts	0x026A, r27
  kernel.tasks[0].release = 0x00000000;
     40a:	10 92 63 02 	sts	0x0263, r1
     40e:	10 92 64 02 	sts	0x0264, r1
     412:	10 92 65 02 	sts	0x0265, r1
     416:	10 92 66 02 	sts	0x0266, r1

  sei(); /* set enabled interrupts */
     41a:	78 94       	sei
}
     41c:	08 95       	ret

0000041e <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     41e:	8f 92       	push	r8
     420:	9f 92       	push	r9
     422:	af 92       	push	r10
     424:	bf 92       	push	r11
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	49 01       	movw	r8, r18
     438:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     43a:	f8 94       	cli

  ++kernel.nbrOfTasks;
     43c:	20 91 5f 02 	lds	r18, 0x025F
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	20 93 5f 02 	sts	0x025F, r18

  sp = kernel.memptr;
     446:	c0 91 9f 02 	lds	r28, 0x029F
     44a:	d0 91 a0 02 	lds	r29, 0x02A0
  kernel.memptr -= stacksize;  // decrease free mem ptr
     44e:	9e 01       	movw	r18, r28
     450:	26 1b       	sub	r18, r22
     452:	37 0b       	sbc	r19, r23
     454:	30 93 a0 02 	sts	0x02A0, r19
     458:	20 93 9f 02 	sts	0x029F, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     45c:	88 83       	st	Y, r24
     45e:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     460:	92 93       	st	-Z, r25
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     466:	ce 01       	movw	r24, r28
     468:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     46a:	1c 92       	st	X, r1
     46c:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     46e:	a8 17       	cp	r26, r24
     470:	b9 07       	cpc	r27, r25
     472:	d9 f7       	brne	.-10     	; 0x46a <trtCreateTask+0x4c>
     474:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     476:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     478:	d2 92       	st	-Z, r13
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     47e:	9e 01       	movw	r18, r28
     480:	24 52       	subi	r18, 0x24	; 36
     482:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     484:	1c 92       	st	X, r1
     486:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     488:	a2 17       	cp	r26, r18
     48a:	b3 07       	cpc	r27, r19
     48c:	d9 f7       	brne	.-10     	; 0x484 <trtCreateTask+0x66>
     48e:	9f 01       	movw	r18, r30
     490:	26 50       	subi	r18, 0x06	; 6
     492:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     494:	e0 91 5f 02 	lds	r30, 0x025F
     498:	8b e0       	ldi	r24, 0x0B	; 11
     49a:	e8 9f       	mul	r30, r24
     49c:	f0 01       	movw	r30, r0
     49e:	11 24       	eor	r1, r1
     4a0:	ef 59       	subi	r30, 0x9F	; 159
     4a2:	fd 4f       	sbci	r31, 0xFD	; 253

  t->release = release;
     4a4:	82 82       	std	Z+2, r8	; 0x02
     4a6:	93 82       	std	Z+3, r9	; 0x03
     4a8:	a4 82       	std	Z+4, r10	; 0x04
     4aa:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     4ac:	e6 82       	std	Z+6, r14	; 0x06
     4ae:	f7 82       	std	Z+7, r15	; 0x07
     4b0:	00 87       	std	Z+8, r16	; 0x08
     4b2:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     4b8:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     4ba:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     4bc:	0e 94 8d 00 	call	0x11a	; 0x11a <__vector_13>

}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	8f 90       	pop	r8
     4d8:	08 95       	ret

000004da <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     4da:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     4dc:	ef e5       	ldi	r30, 0x5F	; 95
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	e8 0f       	add	r30, r24
     4e2:	f1 1d       	adc	r31, r1
     4e4:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     4e6:	78 94       	sei
}
     4e8:	08 95       	ret

000004ea <trtWait>:

void trtWait(uint8_t semnbr) {
     4ea:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     4ec:	20 91 60 02 	lds	r18, 0x0260

  cli(); // disable interrupts
     4f0:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     4f2:	e8 2f       	mov	r30, r24
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	e9 56       	subi	r30, 0x69	; 105
     4f8:	fd 4f       	sbci	r31, 0xFD	; 253
  if ((*s) > 0) {
     4fa:	80 81       	ld	r24, Z
     4fc:	88 23       	and	r24, r24
     4fe:	19 f0       	breq	.+6      	; 0x506 <trtWait+0x1c>
    (*s)--;
     500:	81 50       	subi	r24, 0x01	; 1
     502:	80 83       	st	Z, r24
     504:	10 c0       	rjmp	.+32     	; 0x526 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	8b e0       	ldi	r24, 0x0B	; 11
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	28 9f       	mul	r18, r24
     50e:	f0 01       	movw	r30, r0
     510:	29 9f       	mul	r18, r25
     512:	f0 0d       	add	r31, r0
     514:	38 9f       	mul	r19, r24
     516:	f0 0d       	add	r31, r0
     518:	11 24       	eor	r1, r1
     51a:	ef 59       	subi	r30, 0x9F	; 159
     51c:	fd 4f       	sbci	r31, 0xFD	; 253
     51e:	4e 5f       	subi	r20, 0xFE	; 254
     520:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     522:	0e 94 8d 00 	call	0x11a	; 0x11a <__vector_13>
  }

  sei(); // reenable interrupts
     526:	78 94       	sei
}
     528:	08 95       	ret

0000052a <trtSignal>:

void trtSignal(uint8_t semnbr) {
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     532:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     534:	00 91 5f 02 	lds	r16, 0x025F
     538:	e1 e0       	ldi	r30, 0x01	; 1
     53a:	4f ef       	ldi	r20, 0xFF	; 255
     53c:	5f ef       	ldi	r21, 0xFF	; 255
     53e:	6f ef       	ldi	r22, 0xFF	; 255
     540:	7f ef       	ldi	r23, 0xFF	; 255
     542:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     544:	8b e0       	ldi	r24, 0x0B	; 11
     546:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     548:	21 2f       	mov	r18, r17
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	2e 5f       	subi	r18, 0xFE	; 254
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	1e c0       	rjmp	.+60     	; 0x58e <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     552:	ef 9d       	mul	r30, r15
     554:	d0 01       	movw	r26, r0
     556:	11 24       	eor	r1, r1
     558:	af 59       	subi	r26, 0x9F	; 159
     55a:	bd 4f       	sbci	r27, 0xFD	; 253
    if (t->state == (semnbr + WAIT_OFFSET)) {
     55c:	1a 96       	adiw	r26, 0x0a	; 10
     55e:	8c 91       	ld	r24, X
     560:	1a 97       	sbiw	r26, 0x0a	; 10
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	82 17       	cp	r24, r18
     566:	93 07       	cpc	r25, r19
     568:	69 f4       	brne	.+26     	; 0x584 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     56a:	16 96       	adiw	r26, 0x06	; 6
     56c:	8d 91       	ld	r24, X+
     56e:	9d 91       	ld	r25, X+
     570:	0d 90       	ld	r0, X+
     572:	bc 91       	ld	r27, X
     574:	a0 2d       	mov	r26, r0
     576:	48 17       	cp	r20, r24
     578:	59 07       	cpc	r21, r25
     57a:	6a 07       	cpc	r22, r26
     57c:	7b 07       	cpc	r23, r27
     57e:	10 f0       	brcs	.+4      	; 0x584 <trtSignal+0x5a>
     580:	fe 2f       	mov	r31, r30
     582:	02 c0       	rjmp	.+4      	; 0x588 <trtSignal+0x5e>
     584:	db 01       	movw	r26, r22
     586:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     588:	ef 5f       	subi	r30, 0xFF	; 255
     58a:	ac 01       	movw	r20, r24
     58c:	bd 01       	movw	r22, r26
     58e:	0e 17       	cp	r16, r30
     590:	00 f7       	brcc	.-64     	; 0x552 <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     592:	ff 23       	and	r31, r31
     594:	41 f4       	brne	.+16     	; 0x5a6 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     596:	e1 2f       	mov	r30, r17
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	e2 5a       	subi	r30, 0xA2	; 162
     59c:	fd 4f       	sbci	r31, 0xFD	; 253
     59e:	81 ad       	ldd	r24, Z+57	; 0x39
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	81 af       	std	Z+57, r24	; 0x39
     5a4:	11 c0       	rjmp	.+34     	; 0x5c8 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     5a6:	2f 2f       	mov	r18, r31
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	8b e0       	ldi	r24, 0x0B	; 11
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	28 9f       	mul	r18, r24
     5b0:	f0 01       	movw	r30, r0
     5b2:	29 9f       	mul	r18, r25
     5b4:	f0 0d       	add	r31, r0
     5b6:	38 9f       	mul	r19, r24
     5b8:	f0 0d       	add	r31, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	e1 5a       	subi	r30, 0xA1	; 161
     5be:	fd 4f       	sbci	r31, 0xFD	; 253
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     5c4:	0e 94 8d 00 	call	0x11a	; 0x11a <__vector_13>
  }

  sei(); // reenable interrupts
     5c8:	78 94       	sei
}
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	08 95       	ret

000005d2 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     5d2:	20 91 84 00 	lds	r18, 0x0084
     5d6:	30 91 85 00 	lds	r19, 0x0085
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	80 91 a1 02 	lds	r24, 0x02A1
     5e2:	90 91 a2 02 	lds	r25, 0x02A2
     5e6:	a0 91 a3 02 	lds	r26, 0x02A3
     5ea:	b0 91 a4 02 	lds	r27, 0x02A4
     5ee:	dc 01       	movw	r26, r24
     5f0:	99 27       	eor	r25, r25
     5f2:	88 27       	eor	r24, r24
     5f4:	28 0f       	add	r18, r24
     5f6:	39 1f       	adc	r19, r25
     5f8:	4a 1f       	adc	r20, r26
     5fa:	5b 1f       	adc	r21, r27
}
     5fc:	b9 01       	movw	r22, r18
     5fe:	ca 01       	movw	r24, r20
     600:	08 95       	ret

00000602 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     602:	e0 91 60 02 	lds	r30, 0x0260
     606:	ab e0       	ldi	r26, 0x0B	; 11
     608:	ea 9f       	mul	r30, r26
     60a:	f0 01       	movw	r30, r0
     60c:	11 24       	eor	r1, r1
     60e:	ef 59       	subi	r30, 0x9F	; 159
     610:	fd 4f       	sbci	r31, 0xFD	; 253

  cli(); // turn off interrupts
     612:	f8 94       	cli

  t->state = TIMEQ;
     614:	a2 e0       	ldi	r26, 0x02	; 2
     616:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     618:	62 83       	std	Z+2, r22	; 0x02
     61a:	73 83       	std	Z+3, r23	; 0x03
     61c:	84 83       	std	Z+4, r24	; 0x04
     61e:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     620:	26 83       	std	Z+6, r18	; 0x06
     622:	37 83       	std	Z+7, r19	; 0x07
     624:	40 87       	std	Z+8, r20	; 0x08
     626:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     628:	0e 94 8d 00 	call	0x11a	; 0x11a <__vector_13>
}
     62c:	08 95       	ret

0000062e <trtGetRelease>:


uint32_t trtGetRelease(void) {
     62e:	80 91 60 02 	lds	r24, 0x0260
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	2b e0       	ldi	r18, 0x0B	; 11
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	82 9f       	mul	r24, r18
     63a:	f0 01       	movw	r30, r0
     63c:	83 9f       	mul	r24, r19
     63e:	f0 0d       	add	r31, r0
     640:	92 9f       	mul	r25, r18
     642:	f0 0d       	add	r31, r0
     644:	11 24       	eor	r1, r1
     646:	e1 5a       	subi	r30, 0xA1	; 161
     648:	fd 4f       	sbci	r31, 0xFD	; 253
     64a:	df 01       	movw	r26, r30
     64c:	14 96       	adiw	r26, 0x04	; 4
     64e:	64 81       	ldd	r22, Z+4	; 0x04
     650:	11 96       	adiw	r26, 0x01	; 1
     652:	7c 91       	ld	r23, X
     654:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	8c 91       	ld	r24, X
     65a:	12 97       	sbiw	r26, 0x02	; 2
     65c:	13 96       	adiw	r26, 0x03	; 3
     65e:	9c 91       	ld	r25, X
     660:	08 95       	ret

00000662 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     662:	80 91 60 02 	lds	r24, 0x0260
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	2b e0       	ldi	r18, 0x0B	; 11
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	82 9f       	mul	r24, r18
     66e:	f0 01       	movw	r30, r0
     670:	83 9f       	mul	r24, r19
     672:	f0 0d       	add	r31, r0
     674:	92 9f       	mul	r25, r18
     676:	f0 0d       	add	r31, r0
     678:	11 24       	eor	r1, r1
     67a:	e1 5a       	subi	r30, 0xA1	; 161
     67c:	fd 4f       	sbci	r31, 0xFD	; 253
     67e:	df 01       	movw	r26, r30
     680:	18 96       	adiw	r26, 0x08	; 8
     682:	60 85       	ldd	r22, Z+8	; 0x08
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	7c 91       	ld	r23, X
     688:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     68a:	12 96       	adiw	r26, 0x02	; 2
     68c:	8c 91       	ld	r24, X
     68e:	12 97       	sbiw	r26, 0x02	; 2
     690:	13 96       	adiw	r26, 0x03	; 3
     692:	9c 91       	ld	r25, X
     694:	08 95       	ret

00000696 <trtTerminate>:

void trtTerminate(void) {

  cli();
     696:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     698:	80 91 60 02 	lds	r24, 0x0260
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	2b e0       	ldi	r18, 0x0B	; 11
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	82 9f       	mul	r24, r18
     6a4:	f0 01       	movw	r30, r0
     6a6:	83 9f       	mul	r24, r19
     6a8:	f0 0d       	add	r31, r0
     6aa:	92 9f       	mul	r25, r18
     6ac:	f0 0d       	add	r31, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	e1 5a       	subi	r30, 0xA1	; 161
     6b2:	fd 4f       	sbci	r31, 0xFD	; 253
     6b4:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6b6:	0e 94 8d 00 	call	0x11a	; 0x11a <__vector_13>
}
     6ba:	08 95       	ret

000006bc <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     6bc:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     6be:	e8 2f       	mov	r30, r24
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	e9 56       	subi	r30, 0x69	; 105
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
  temp = *s ;
     6c6:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     6c8:	88 23       	and	r24, r24
     6ca:	19 f0       	breq	.+6      	; 0x6d2 <trtAccept+0x16>
    (*s)--;
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	80 83       	st	Z, r24
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     6d2:	78 94       	sei
  return temp ;
}
     6d4:	08 95       	ret

000006d6 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     6d6:	87 e6       	ldi	r24, 0x67	; 103
     6d8:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     6dc:	e1 ec       	ldi	r30, 0xC1	; 193
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	88 e1       	ldi	r24, 0x18	; 24
     6e2:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     6e4:	10 92 8f 01 	sts	0x018F, r1
     6e8:	10 92 8e 01 	sts	0x018E, r1
  tx_out = 0;
     6ec:	10 92 91 01 	sts	0x0191, r1
     6f0:	10 92 90 01 	sts	0x0190, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     6f4:	80 81       	ld	r24, Z
     6f6:	80 68       	ori	r24, 0x80	; 128
     6f8:	80 83       	st	Z, r24
}
     6fa:	08 95       	ret

000006fc <__vector_21>:



ISR( USART0_UDRE_vect )
{
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	0b b6       	in	r0, 0x3b	; 59
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     716:	20 91 8e 01 	lds	r18, 0x018E
     71a:	30 91 8f 01 	lds	r19, 0x018F
     71e:	80 91 90 01 	lds	r24, 0x0190
     722:	90 91 91 01 	lds	r25, 0x0191
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	31 f4       	brne	.+12     	; 0x738 <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     72c:	80 91 c1 00 	lds	r24, 0x00C1
     730:	8f 7d       	andi	r24, 0xDF	; 223
     732:	80 93 c1 00 	sts	0x00C1, r24
     736:	1d c0       	rjmp	.+58     	; 0x772 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     738:	e0 91 90 01 	lds	r30, 0x0190
     73c:	f0 91 91 01 	lds	r31, 0x0191
     740:	ee 56       	subi	r30, 0x6E	; 110
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	80 81       	ld	r24, Z
     746:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     74a:	80 91 90 01 	lds	r24, 0x0190
     74e:	90 91 91 01 	lds	r25, 0x0191
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	90 93 91 01 	sts	0x0191, r25
     758:	80 93 90 01 	sts	0x0190, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     75c:	80 91 90 01 	lds	r24, 0x0190
     760:	90 91 91 01 	lds	r25, 0x0191
     764:	88 3c       	cpi	r24, 0xC8	; 200
     766:	91 05       	cpc	r25, r1
     768:	21 f4       	brne	.+8      	; 0x772 <__vector_21+0x76>
     76a:	10 92 91 01 	sts	0x0191, r1
     76e:	10 92 90 01 	sts	0x0190, r1
  }
}
     772:	ff 91       	pop	r31
     774:	ef 91       	pop	r30
     776:	9f 91       	pop	r25
     778:	8f 91       	pop	r24
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0b be       	out	0x3b, r0	; 59
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     78c:	1f 93       	push	r17
     78e:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     790:	8a 30       	cpi	r24, 0x0A	; 10
     792:	19 f4       	brne	.+6      	; 0x79a <uart_putchar+0xe>
     794:	8d e0       	ldi	r24, 0x0D	; 13
     796:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
  char i = tx_in;
     79a:	80 91 8e 01 	lds	r24, 0x018E
     79e:	90 91 8f 01 	lds	r25, 0x018F
  i++;
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     7a4:	88 3c       	cpi	r24, 0xC8	; 200
     7a6:	09 f4       	brne	.+2      	; 0x7aa <uart_putchar+0x1e>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     7aa:	e0 91 8e 01 	lds	r30, 0x018E
     7ae:	f0 91 8f 01 	lds	r31, 0x018F
     7b2:	ee 56       	subi	r30, 0x6E	; 110
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     7b8:	28 2f       	mov	r18, r24
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	80 91 90 01 	lds	r24, 0x0190
     7c0:	90 91 91 01 	lds	r25, 0x0191
     7c4:	28 17       	cp	r18, r24
     7c6:	39 07       	cpc	r19, r25
     7c8:	c9 f3       	breq	.-14     	; 0x7bc <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     7ca:	30 93 8f 01 	sts	0x018F, r19
     7ce:	20 93 8e 01 	sts	0x018E, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     7d2:	80 91 c1 00 	lds	r24, 0x00C1
     7d6:	80 62       	ori	r24, 0x20	; 32
     7d8:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	1f 91       	pop	r17
     7e2:	08 95       	ret

000007e4 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	0b b6       	in	r0, 0x3b	; 59
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	ef 93       	push	r30
     808:	ff 93       	push	r31
	trt_rx_c = UDR0;
     80a:	80 91 c6 00 	lds	r24, 0x00C6
     80e:	80 93 a9 02 	sts	0x02A9, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 95 02 	call	0x52a	; 0x52a <trtSignal>
}
     818:	ff 91       	pop	r31
     81a:	ef 91       	pop	r30
     81c:	bf 91       	pop	r27
     81e:	af 91       	pop	r26
     820:	9f 91       	pop	r25
     822:	8f 91       	pop	r24
     824:	7f 91       	pop	r23
     826:	6f 91       	pop	r22
     828:	5f 91       	pop	r21
     82a:	4f 91       	pop	r20
     82c:	3f 91       	pop	r19
     82e:	2f 91       	pop	r18
     830:	0f 90       	pop	r0
     832:	0b be       	out	0x3b, r0	; 59
     834:	0f 90       	pop	r0
     836:	0f be       	out	0x3f, r0	; 63
     838:	0f 90       	pop	r0
     83a:	1f 90       	pop	r1
     83c:	18 95       	reti

0000083e <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     84c:	80 91 3c 01 	lds	r24, 0x013C
     850:	90 91 3d 01 	lds	r25, 0x013D
     854:	89 2b       	or	r24, r25
     856:	09 f0       	breq	.+2      	; 0x85a <uart_getchar+0x1c>
     858:	a1 c0       	rjmp	.+322    	; 0x99c <uart_getchar+0x15e>
     85a:	0e e3       	ldi	r16, 0x3E	; 62
     85c:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 75 02 	call	0x4ea	; 0x4ea <trtWait>
	if (UCSR0A & _BV(FE0))
     864:	80 91 c0 00 	lds	r24, 0x00C0
     868:	84 ff       	sbrs	r24, 4
     86a:	03 c0       	rjmp	.+6      	; 0x872 <uart_getchar+0x34>
     86c:	2e ef       	ldi	r18, 0xFE	; 254
     86e:	3f ef       	ldi	r19, 0xFF	; 255
     870:	a9 c0       	rjmp	.+338    	; 0x9c4 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     872:	80 91 c0 00 	lds	r24, 0x00C0
     876:	83 fd       	sbrc	r24, 3
     878:	a3 c0       	rjmp	.+326    	; 0x9c0 <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     87a:	90 91 a9 02 	lds	r25, 0x02A9

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     87e:	9d 30       	cpi	r25, 0x0D	; 13
     880:	11 f0       	breq	.+4      	; 0x886 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     882:	9a 30       	cpi	r25, 0x0A	; 10
     884:	81 f4       	brne	.+32     	; 0x8a6 <uart_getchar+0x68>
	  {
	    *cp = c;
     886:	8a e0       	ldi	r24, 0x0A	; 10
     888:	f8 01       	movw	r30, r16
     88a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     88c:	b7 01       	movw	r22, r14
     88e:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
	    rxp = b;
     892:	8e e3       	ldi	r24, 0x3E	; 62
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	90 93 3d 01 	sts	0x013D, r25
     89a:	80 93 3c 01 	sts	0x013C, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	0e 94 95 02 	call	0x52a	; 0x52a <trtSignal>
     8a4:	7b c0       	rjmp	.+246    	; 0x99c <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     8a6:	99 30       	cpi	r25, 0x09	; 9
     8a8:	09 f4       	brne	.+2      	; 0x8ac <uart_getchar+0x6e>
     8aa:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     8ac:	89 2f       	mov	r24, r25
     8ae:	80 52       	subi	r24, 0x20	; 32
     8b0:	8f 35       	cpi	r24, 0x5F	; 95
     8b2:	10 f0       	brcs	.+4      	; 0x8b8 <uart_getchar+0x7a>
     8b4:	90 3a       	cpi	r25, 0xA0	; 160
     8b6:	70 f0       	brcs	.+28     	; 0x8d4 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	0d 38       	cpi	r16, 0x8D	; 141
     8bc:	1f 07       	cpc	r17, r31
     8be:	11 f4       	brne	.+4      	; 0x8c4 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     8c0:	87 e0       	ldi	r24, 0x07	; 7
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     8c4:	f8 01       	movw	r30, r16
     8c6:	91 93       	st	Z+, r25
     8c8:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     8ca:	89 2f       	mov	r24, r25
     8cc:	b7 01       	movw	r22, r14
     8ce:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
     8d2:	c5 cf       	rjmp	.-118    	; 0x85e <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     8d4:	92 31       	cpi	r25, 0x12	; 18
     8d6:	39 f1       	breq	.+78     	; 0x926 <uart_getchar+0xe8>
     8d8:	93 31       	cpi	r25, 0x13	; 19
     8da:	38 f4       	brcc	.+14     	; 0x8ea <uart_getchar+0xac>
     8dc:	93 30       	cpi	r25, 0x03	; 3
     8de:	09 f4       	brne	.+2      	; 0x8e2 <uart_getchar+0xa4>
     8e0:	6f c0       	rjmp	.+222    	; 0x9c0 <uart_getchar+0x182>
     8e2:	98 30       	cpi	r25, 0x08	; 8
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <uart_getchar+0xaa>
     8e6:	bb cf       	rjmp	.-138    	; 0x85e <uart_getchar+0x20>
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <uart_getchar+0xbe>
     8ea:	97 31       	cpi	r25, 0x17	; 23
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <uart_getchar+0xb2>
     8ee:	4b c0       	rjmp	.+150    	; 0x986 <uart_getchar+0x148>
     8f0:	9f 37       	cpi	r25, 0x7F	; 127
     8f2:	21 f0       	breq	.+8      	; 0x8fc <uart_getchar+0xbe>
     8f4:	95 31       	cpi	r25, 0x15	; 21
     8f6:	09 f0       	breq	.+2      	; 0x8fa <uart_getchar+0xbc>
     8f8:	b2 cf       	rjmp	.-156    	; 0x85e <uart_getchar+0x20>
     8fa:	32 c0       	rjmp	.+100    	; 0x960 <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	0e 33       	cpi	r16, 0x3E	; 62
     900:	1f 07       	cpc	r17, r31
     902:	09 f0       	breq	.+2      	; 0x906 <uart_getchar+0xc8>
     904:	08 f4       	brcc	.+2      	; 0x908 <uart_getchar+0xca>
     906:	ab cf       	rjmp	.-170    	; 0x85e <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		uart_putchar(' ', stream);
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	b7 01       	movw	r22, r14
     914:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		uart_putchar('\b', stream);
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	b7 01       	movw	r22, r14
     91c:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		cp--;
     920:	01 50       	subi	r16, 0x01	; 1
     922:	10 40       	sbci	r17, 0x00	; 0
     924:	9c cf       	rjmp	.-200    	; 0x85e <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     926:	8d e0       	ldi	r24, 0x0D	; 13
     928:	b7 01       	movw	r22, r14
     92a:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
     92e:	ce e3       	ldi	r28, 0x3E	; 62
     930:	d1 e0       	ldi	r29, 0x01	; 1
     932:	04 c0       	rjmp	.+8      	; 0x93c <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     934:	89 91       	ld	r24, Y+
     936:	b7 01       	movw	r22, r14
     938:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     93c:	c0 17       	cp	r28, r16
     93e:	d1 07       	cpc	r29, r17
     940:	c8 f3       	brcs	.-14     	; 0x934 <uart_getchar+0xf6>
     942:	8d cf       	rjmp	.-230    	; 0x85e <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	b7 01       	movw	r22, r14
     948:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		uart_putchar(' ', stream);
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	b7 01       	movw	r22, r14
     950:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		uart_putchar('\b', stream);
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	b7 01       	movw	r22, r14
     958:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		cp--;
     95c:	01 50       	subi	r16, 0x01	; 1
     95e:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 33       	cpi	r16, 0x3E	; 62
     964:	18 07       	cpc	r17, r24
     966:	09 f0       	breq	.+2      	; 0x96a <uart_getchar+0x12c>
     968:	68 f7       	brcc	.-38     	; 0x944 <uart_getchar+0x106>
     96a:	79 cf       	rjmp	.-270    	; 0x85e <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     96c:	88 e0       	ldi	r24, 0x08	; 8
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		uart_putchar(' ', stream);
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	b7 01       	movw	r22, r14
     978:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
		uart_putchar('\b', stream);
     97c:	88 e0       	ldi	r24, 0x08	; 8
     97e:	b7 01       	movw	r22, r14
     980:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_putchar>
     984:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     986:	e1 e0       	ldi	r30, 0x01	; 1
     988:	0e 33       	cpi	r16, 0x3E	; 62
     98a:	1e 07       	cpc	r17, r30
     98c:	09 f0       	breq	.+2      	; 0x990 <uart_getchar+0x152>
     98e:	08 f4       	brcc	.+2      	; 0x992 <uart_getchar+0x154>
     990:	66 cf       	rjmp	.-308    	; 0x85e <uart_getchar+0x20>
     992:	e8 01       	movw	r28, r16
     994:	8a 91       	ld	r24, -Y
     996:	80 32       	cpi	r24, 0x20	; 32
     998:	49 f7       	brne	.-46     	; 0x96c <uart_getchar+0x12e>
     99a:	61 cf       	rjmp	.-318    	; 0x85e <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     99c:	e0 91 3c 01 	lds	r30, 0x013C
     9a0:	f0 91 3d 01 	lds	r31, 0x013D
     9a4:	81 91       	ld	r24, Z+
     9a6:	f0 93 3d 01 	sts	0x013D, r31
     9aa:	e0 93 3c 01 	sts	0x013C, r30
  if (c == '\n')
     9ae:	8a 30       	cpi	r24, 0x0A	; 10
     9b0:	21 f4       	brne	.+8      	; 0x9ba <uart_getchar+0x17c>
    rxp = 0;
     9b2:	10 92 3d 01 	sts	0x013D, r1
     9b6:	10 92 3c 01 	sts	0x013C, r1

  return c;
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <uart_getchar+0x186>
     9c0:	2f ef       	ldi	r18, 0xFF	; 255
     9c2:	3f ef       	ldi	r19, 0xFF	; 255
}
     9c4:	c9 01       	movw	r24, r18
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <main>:

	end
  end

// --- Main Program ----------------------------------
int main(void) {
     9d4:	cf 92       	push	r12
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17

  DDRC = 0xff;    // led connections
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	87 b9       	out	0x07, r24	; 7
  PORTC = 0xff;
     9e4:	88 b9       	out	0x08, r24	; 8
  DDRB = 0x00 ; 
     9e6:	14 b8       	out	0x04, r1	; 4
  PORTB = 0xff ; // button pullups on
     9e8:	85 b9       	out	0x05, r24	; 5

  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     9ea:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     9ee:	6d e2       	ldi	r22, 0x2D	; 45
     9f0:	71 e0       	ldi	r23, 0x01	; 1
     9f2:	70 93 af 02 	sts	0x02AF, r23
     9f6:	60 93 ae 02 	sts	0x02AE, r22
     9fa:	70 93 ab 02 	sts	0x02AB, r23
     9fe:	60 93 aa 02 	sts	0x02AA, r22
     a02:	70 93 ad 02 	sts	0x02AD, r23
     a06:	60 93 ac 02 	sts	0x02AC, r22
  fprintf(stdout,"\n\r TRT 9feb2009\n\r\n\r");
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputs>

  // start TRT
  trtInitKernel(80); // 80 bytes for the idle task stack
     a12:	80 e5       	ldi	r24, 0x50	; 80
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     a1a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     a1c:	10 92 98 02 	sts	0x0298, r1
  
  sei(); // set enabled interrupts;
     a20:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     a22:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     a24:	10 92 99 02 	sts	0x0299, r1
  
  sei(); // set enabled interrupts;
     a28:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     a2a:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 9a 02 	sts	0x029A, r24
  
  sei(); // set enabled interrupts;
     a32:	78 94       	sei
  
  // variable protection
  trtCreateSemaphore(SEM_SHARED, 1) ; // protect shared variables

 // --- creat tasks  ----------------
  trtCreateTask(buttonComm, 100, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[0]));
     a34:	8e ec       	ldi	r24, 0xCE	; 206
     a36:	95 e0       	ldi	r25, 0x05	; 5
     a38:	64 e6       	ldi	r22, 0x64	; 100
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	2d e0       	ldi	r18, 0x0D	; 13
     a3e:	33 e0       	ldi	r19, 0x03	; 3
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	bd e0       	ldi	r27, 0x0D	; 13
     a46:	eb 2e       	mov	r14, r27
     a48:	b3 e0       	ldi	r27, 0x03	; 3
     a4a:	fb 2e       	mov	r15, r27
     a4c:	01 2d       	mov	r16, r1
     a4e:	11 2d       	mov	r17, r1
     a50:	aa e5       	ldi	r26, 0x5A	; 90
     a52:	ca 2e       	mov	r12, r26
     a54:	a2 e0       	ldi	r26, 0x02	; 2
     a56:	da 2e       	mov	r13, r26
     a58:	0e 94 0f 02 	call	0x41e	; 0x41e <trtCreateTask>
  trtCreateTask(serialComm, 100, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     a5c:	8a e4       	ldi	r24, 0x4A	; 74
     a5e:	95 e0       	ldi	r25, 0x05	; 5
     a60:	64 e6       	ldi	r22, 0x64	; 100
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	2a e1       	ldi	r18, 0x1A	; 26
     a66:	36 e0       	ldi	r19, 0x06	; 6
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	fa e1       	ldi	r31, 0x1A	; 26
     a6e:	ef 2e       	mov	r14, r31
     a70:	f6 e0       	ldi	r31, 0x06	; 6
     a72:	ff 2e       	mov	r15, r31
     a74:	01 2d       	mov	r16, r1
     a76:	11 2d       	mov	r17, r1
     a78:	ec e5       	ldi	r30, 0x5C	; 92
     a7a:	ce 2e       	mov	r12, r30
     a7c:	e2 e0       	ldi	r30, 0x02	; 2
     a7e:	de 2e       	mov	r13, r30
     a80:	0e 94 0f 02 	call	0x41e	; 0x41e <trtCreateTask>
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     a84:	83 b7       	in	r24, 0x33	; 51
     a86:	81 7f       	andi	r24, 0xF1	; 241
     a88:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     a8a:	83 b7       	in	r24, 0x33	; 51
     a8c:	81 60       	ori	r24, 0x01	; 1
     a8e:	83 bf       	out	0x33, r24	; 51
  while (1) 
  begin
  	sleep_cpu();
     a90:	88 95       	sleep
     a92:	fe cf       	rjmp	.-4      	; 0xa90 <main+0xbc>

00000a94 <serialComm>:
	end
  end

// --- define task 2  ----------------------------------------
void serialComm(void* args) 
  begin
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <serialComm+0x16>
     aaa:	00 d0       	rcall	.+0      	; 0xaac <serialComm+0x18>
     aac:	00 d0       	rcall	.+0      	; 0xaae <serialComm+0x1a>
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	uint16_t ledNum ;
	char cmd[4] ;
	
	// turn off leds
	led = 0x00 ;
     ab2:	10 92 5e 02 	sts	0x025E, r1
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s%d", cmd, &ledNum) ;
     ab6:	04 e1       	ldi	r16, 0x14	; 20
     ab8:	a0 2e       	mov	r10, r16
     aba:	01 e0       	ldi	r16, 0x01	; 1
     abc:	b0 2e       	mov	r11, r16
     abe:	13 e0       	ldi	r17, 0x03	; 3
     ac0:	c1 2e       	mov	r12, r17
     ac2:	d1 2c       	mov	r13, r1
     ac4:	cc 0e       	add	r12, r28
     ac6:	dd 1e       	adc	r13, r29
     ac8:	7e 01       	movw	r14, r28
     aca:	08 94       	sec
     acc:	e1 1c       	adc	r14, r1
     ace:	f1 1c       	adc	r15, r1
		if (cmd[0] == 's')
			led  |= (1<<ledNum) ;
		if (cmd[0] == 'c')		
			led  &= ~(1<<ledNum) ;
		if (cmd[0] == 't')		
			led  ^= (1<<ledNum) ;
     ad0:	01 e0       	ldi	r16, 0x01	; 1
     ad2:	10 e0       	ldi	r17, 0x00	; 0
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     ad4:	60 91 ac 02 	lds	r22, 0x02AC
     ad8:	70 91 ad 02 	lds	r23, 0x02AD
     adc:	8e e3       	ldi	r24, 0x3E	; 62
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
		fscanf(stdin, "%s%d", cmd, &ledNum) ;
     ae4:	8d b7       	in	r24, 0x3d	; 61
     ae6:	9e b7       	in	r25, 0x3e	; 62
     ae8:	08 97       	sbiw	r24, 0x08	; 8
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	9e bf       	out	0x3e, r25	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	8d bf       	out	0x3d, r24	; 61
     af4:	ed b7       	in	r30, 0x3d	; 61
     af6:	fe b7       	in	r31, 0x3e	; 62
     af8:	31 96       	adiw	r30, 0x01	; 1
     afa:	80 91 aa 02 	lds	r24, 0x02AA
     afe:	90 91 ab 02 	lds	r25, 0x02AB
     b02:	ad b7       	in	r26, 0x3d	; 61
     b04:	be b7       	in	r27, 0x3e	; 62
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	11 97       	sbiw	r26, 0x01	; 1
     b0e:	b3 82       	std	Z+3, r11	; 0x03
     b10:	a2 82       	std	Z+2, r10	; 0x02
     b12:	d5 82       	std	Z+5, r13	; 0x05
     b14:	c4 82       	std	Z+4, r12	; 0x04
     b16:	f7 82       	std	Z+7, r15	; 0x07
     b18:	e6 82       	std	Z+6, r14	; 0x06
     b1a:	0e 94 46 08 	call	0x108c	; 0x108c <fscanf>
		//trtWait(SEM_STRING_DONE);

		// update shared leds
		trtWait(SEM_SHARED) ;	
     b1e:	8d b7       	in	r24, 0x3d	; 61
     b20:	9e b7       	in	r25, 0x3e	; 62
     b22:	08 96       	adiw	r24, 0x08	; 8
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	9e bf       	out	0x3e, r25	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	8d bf       	out	0x3d, r24	; 61
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	0e 94 75 02 	call	0x4ea	; 0x4ea <trtWait>
		if (cmd[0] == 's')
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	83 37       	cpi	r24, 0x73	; 115
     b38:	59 f4       	brne	.+22     	; 0xb50 <serialComm+0xbc>
			led  |= (1<<ledNum) ;
     b3a:	98 01       	movw	r18, r16
     b3c:	09 80       	ldd	r0, Y+1	; 0x01
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <serialComm+0xb0>
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	0a 94       	dec	r0
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <serialComm+0xac>
     b48:	80 91 5e 02 	lds	r24, 0x025E
     b4c:	82 2b       	or	r24, r18
     b4e:	1c c0       	rjmp	.+56     	; 0xb88 <serialComm+0xf4>
		if (cmd[0] == 'c')		
     b50:	83 36       	cpi	r24, 0x63	; 99
     b52:	71 f4       	brne	.+28     	; 0xb70 <serialComm+0xdc>
			led  &= ~(1<<ledNum) ;
     b54:	c8 01       	movw	r24, r16
     b56:	09 80       	ldd	r0, Y+1	; 0x01
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <serialComm+0xca>
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	0a 94       	dec	r0
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <serialComm+0xc6>
     b62:	80 95       	com	r24
     b64:	20 91 5e 02 	lds	r18, 0x025E
     b68:	28 23       	and	r18, r24
     b6a:	20 93 5e 02 	sts	0x025E, r18
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <serialComm+0xf8>
		if (cmd[0] == 't')		
     b70:	84 37       	cpi	r24, 0x74	; 116
     b72:	61 f4       	brne	.+24     	; 0xb8c <serialComm+0xf8>
			led  ^= (1<<ledNum) ;
     b74:	98 01       	movw	r18, r16
     b76:	09 80       	ldd	r0, Y+1	; 0x01
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <serialComm+0xea>
     b7a:	22 0f       	add	r18, r18
     b7c:	33 1f       	adc	r19, r19
     b7e:	0a 94       	dec	r0
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <serialComm+0xe6>
     b82:	80 91 5e 02 	lds	r24, 0x025E
     b86:	82 27       	eor	r24, r18
     b88:	80 93 5e 02 	sts	0x025E, r24
		PORTC = ~led ;
     b8c:	80 91 5e 02 	lds	r24, 0x025E
     b90:	80 95       	com	r24
     b92:	88 b9       	out	0x08, r24	; 8
		trtSignal(SEM_SHARED);
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	0e 94 95 02 	call	0x52a	; 0x52a <trtSignal>
     b9a:	9c cf       	rjmp	.-200    	; 0xad4 <serialComm+0x40>

00000b9c <buttonComm>:
// shared led status
uint8_t led ;

// --- define task 1  ----------------------------------------
void buttonComm(void* args) 
  begin	
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	dd 24       	eor	r13, r13
			while(sw>1)
			begin
				sw = sw>>1; 
				sw_num++ ;
			end
			fprintf(stdout,"Button pushed=%d\n\r>", sw_num) ;
     bac:	c9 e1       	ldi	r28, 0x19	; 25
     bae:	d1 e0       	ldi	r29, 0x01	; 1
	while(1)
	begin
		// read the buttons
		// if a button is pushed,
		// latch on the corresponding LED
		sw = ~PINB ;
     bb0:	13 b1       	in	r17, 0x03	; 3
     bb2:	10 95       	com	r17
		// update shared leds
		trtWait(SEM_SHARED) ;
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	0e 94 75 02 	call	0x4ea	; 0x4ea <trtWait>
		led = led | sw ;
     bba:	80 91 5e 02 	lds	r24, 0x025E
     bbe:	81 2b       	or	r24, r17
     bc0:	80 93 5e 02 	sts	0x025E, r24
		PORTC = ~led ;
     bc4:	80 95       	com	r24
     bc6:	88 b9       	out	0x08, r24	; 8
		trtSignal(SEM_SHARED);
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	0e 94 95 02 	call	0x52a	; 0x52a <trtSignal>
		
		// chessy debouncer
		if (sw_state == 0 && sw!=0) // new button push?
     bce:	dd 20       	and	r13, r13
     bd0:	49 f5       	brne	.+82     	; 0xc24 <buttonComm+0x88>
     bd2:	11 23       	and	r17, r17
     bd4:	69 f1       	breq	.+90     	; 0xc30 <buttonComm+0x94>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <buttonComm+0x42>
		begin
			// convert from binary to switch number (0 to 7)
			sw_num = 0 ;
			while(sw>1)
			begin
				sw = sw>>1; 
     bda:	16 95       	lsr	r17
				sw_num++ ;
     bdc:	2f 5f       	subi	r18, 0xFF	; 255
		// chessy debouncer
		if (sw_state == 0 && sw!=0) // new button push?
		begin
			// convert from binary to switch number (0 to 7)
			sw_num = 0 ;
			while(sw>1)
     bde:	11 30       	cpi	r17, 0x01	; 1
     be0:	e1 f7       	brne	.-8      	; 0xbda <buttonComm+0x3e>
			begin
				sw = sw>>1; 
				sw_num++ ;
			end
			fprintf(stdout,"Button pushed=%d\n\r>", sw_num) ;
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <buttonComm+0x48>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <buttonComm+0x4a>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <buttonComm+0x4c>
     be8:	ed b7       	in	r30, 0x3d	; 61
     bea:	fe b7       	in	r31, 0x3e	; 62
     bec:	31 96       	adiw	r30, 0x01	; 1
     bee:	80 91 ac 02 	lds	r24, 0x02AC
     bf2:	90 91 ad 02 	lds	r25, 0x02AD
     bf6:	ad b7       	in	r26, 0x3d	; 61
     bf8:	be b7       	in	r27, 0x3e	; 62
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	9c 93       	st	X, r25
     bfe:	8e 93       	st	-X, r24
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	d3 83       	std	Z+3, r29	; 0x03
     c04:	c2 83       	std	Z+2, r28	; 0x02
     c06:	24 83       	std	Z+4, r18	; 0x04
     c08:	15 82       	std	Z+5, r1	; 0x05
     c0a:	0e 94 de 07 	call	0xfbc	; 0xfbc <fprintf>
     c0e:	dd 24       	eor	r13, r13
     c10:	d3 94       	inc	r13
     c12:	8d b7       	in	r24, 0x3d	; 61
     c14:	9e b7       	in	r25, 0x3e	; 62
     c16:	06 96       	adiw	r24, 0x06	; 6
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	9e bf       	out	0x3e, r25	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	8d bf       	out	0x3d, r24	; 61
     c22:	06 c0       	rjmp	.+12     	; 0xc30 <buttonComm+0x94>
			sw_state = 1 ;
		end
		if (sw_state == 1 && sw==0) // button release?
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	d9 16       	cp	r13, r25
     c28:	19 f4       	brne	.+6      	; 0xc30 <buttonComm+0x94>
     c2a:	11 23       	and	r17, r17
     c2c:	09 f4       	brne	.+2      	; 0xc30 <buttonComm+0x94>
     c2e:	dd 24       	eor	r13, r13
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     c30:	20 91 a1 02 	lds	r18, 0x02A1
     c34:	30 91 a2 02 	lds	r19, 0x02A2
     c38:	40 91 a3 02 	lds	r20, 0x02A3
     c3c:	50 91 a4 02 	lds	r21, 0x02A4
     c40:	a9 01       	movw	r20, r18
     c42:	33 27       	eor	r19, r19
     c44:	22 27       	eor	r18, r18
     c46:	60 91 84 00 	lds	r22, 0x0084
     c4a:	70 91 85 00 	lds	r23, 0x0085

		// Sleep
		// debouncer works well with 50 mSec sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.05);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.05);
	    trtSleepUntil(rel, dead);
     c4e:	e0 90 84 00 	lds	r14, 0x0084
     c52:	f0 90 85 00 	lds	r15, 0x0085
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	62 0f       	add	r22, r18
     c5c:	73 1f       	adc	r23, r19
     c5e:	84 1f       	adc	r24, r20
     c60:	95 1f       	adc	r25, r21
     c62:	63 5f       	subi	r22, 0xF3	; 243
     c64:	7c 4f       	sbci	r23, 0xFC	; 252
     c66:	8f 4f       	sbci	r24, 0xFF	; 255
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	00 e0       	ldi	r16, 0x00	; 0
     c6c:	10 e0       	ldi	r17, 0x00	; 0
     c6e:	2e 0d       	add	r18, r14
     c70:	3f 1d       	adc	r19, r15
     c72:	40 1f       	adc	r20, r16
     c74:	51 1f       	adc	r21, r17
     c76:	23 5f       	subi	r18, 0xF3	; 243
     c78:	3c 4f       	sbci	r19, 0xFC	; 252
     c7a:	4f 4f       	sbci	r20, 0xFF	; 255
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	0e 94 01 03 	call	0x602	; 0x602 <trtSleepUntil>
     c82:	96 cf       	rjmp	.-212    	; 0xbb0 <buttonComm+0x14>

00000c84 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     c84:	28 2f       	mov	r18, r24
     c86:	20 7f       	andi	r18, 0xF0	; 240
     c88:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     c8a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     c8c:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8e:	20 e4       	ldi	r18, 0x40	; 64
     c90:	3f e1       	ldi	r19, 0x1F	; 31
     c92:	f9 01       	movw	r30, r18
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     c98:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     c9a:	40 98       	cbi	0x08, 0	; 8
     c9c:	f9 01       	movw	r30, r18
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	44 e0       	ldi	r20, 0x04	; 4
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	4a 95       	dec	r20
     cac:	e1 f7       	brne	.-8      	; 0xca6 <LCDsendChar+0x22>
     cae:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     cb0:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     cb2:	42 9a       	sbi	0x08, 2	; 8
     cb4:	c9 01       	movw	r24, r18
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     cba:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     cbc:	40 98       	cbi	0x08, 0	; 8
     cbe:	c9 01       	movw	r24, r18
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     cc4:	08 95       	ret

00000cc6 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     cc6:	28 2f       	mov	r18, r24
     cc8:	20 7f       	andi	r18, 0xF0	; 240
     cca:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     ccc:	42 9a       	sbi	0x08, 2	; 8
     cce:	20 e4       	ldi	r18, 0x40	; 64
     cd0:	3f e1       	ldi	r19, 0x1F	; 31
     cd2:	f9 01       	movw	r30, r18
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     cd8:	42 98       	cbi	0x08, 2	; 8
     cda:	f9 01       	movw	r30, r18
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	54 e0       	ldi	r21, 0x04	; 4
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	5a 95       	dec	r21
     cea:	e1 f7       	brne	.-8      	; 0xce4 <LCDsendCommand+0x1e>
     cec:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     cee:	42 9a       	sbi	0x08, 2	; 8
     cf0:	c9 01       	movw	r24, r18
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     cf6:	42 98       	cbi	0x08, 2	; 8
     cf8:	c9 01       	movw	r24, r18
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     cfe:	08 95       	ret

00000d00 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     d06:	08 95       	ret

00000d08 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     d0e:	08 95       	ret

00000d10 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	49 f0       	breq	.+18     	; 0xd30 <LCDstring+0x20>
     d1e:	ec 01       	movw	r28, r24
     d20:	10 e0       	ldi	r17, 0x00	; 0
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     d24:	89 91       	ld	r24, Y+
     d26:	0e 94 42 06 	call	0xc84	; 0xc84 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     d2a:	1f 5f       	subi	r17, 0xFF	; 255
     d2c:	10 17       	cp	r17, r16
     d2e:	d0 f3       	brcs	.-12     	; 0xd24 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     d3a:	62 30       	cpi	r22, 0x02	; 2
     d3c:	31 f0       	breq	.+12     	; 0xd4a <LCDGotoXY+0x10>
     d3e:	63 30       	cpi	r22, 0x03	; 3
     d40:	31 f0       	breq	.+12     	; 0xd4e <LCDGotoXY+0x14>
     d42:	61 30       	cpi	r22, 0x01	; 1
     d44:	29 f4       	brne	.+10     	; 0xd50 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     d46:	80 5c       	subi	r24, 0xC0	; 192
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     d4a:	8c 5e       	subi	r24, 0xEC	; 236
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     d4e:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
	
}
     d56:	08 95       	ret

00000d58 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	ec 01       	movw	r28, r24
     d60:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     d62:	64 2f       	mov	r22, r20
     d64:	0e 94 9d 06 	call	0xd3a	; 0xd3a <LCDGotoXY>
     d68:	10 e0       	ldi	r17, 0x00	; 0
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     d6c:	0e 94 42 06 	call	0xc84	; 0xc84 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     d70:	1f 5f       	subi	r17, 0xFF	; 255
     d72:	fe 01       	movw	r30, r28
     d74:	e1 0f       	add	r30, r17
     d76:	f1 1d       	adc	r31, r1
     d78:	84 91       	lpm	r24, Z+
     d7a:	88 23       	and	r24, r24
     d7c:	b9 f7       	brne	.-18     	; 0xd6c <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	08 95       	ret

00000d86 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	7c 01       	movw	r14, r24
     d94:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     d96:	11 0f       	add	r17, r17
     d98:	11 0f       	add	r17, r17
     d9a:	11 0f       	add	r17, r17
     d9c:	10 64       	ori	r17, 0x40	; 64
     d9e:	c0 e0       	ldi	r28, 0x00	; 0
     da0:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     da2:	f7 01       	movw	r30, r14
     da4:	ec 0f       	add	r30, r28
     da6:	fd 1f       	adc	r31, r29
     da8:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     daa:	81 2f       	mov	r24, r17
     dac:	8c 0f       	add	r24, r28
     dae:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
		LCDsendChar(pcc);
     db2:	80 2f       	mov	r24, r16
     db4:	0e 94 42 06 	call	0xc84	; 0xc84 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     db8:	21 96       	adiw	r28, 0x01	; 1
     dba:	c8 30       	cpi	r28, 0x08	; 8
     dbc:	d1 05       	cpc	r29, r1
     dbe:	89 f7       	brne	.-30     	; 0xda2 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	08 95       	ret

00000dce <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	80 e6       	ldi	r24, 0x60	; 96
     dd6:	9a ee       	ldi	r25, 0xEA	; 234
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     ddc:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     dde:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     de0:	87 b1       	in	r24, 0x07	; 7
     de2:	80 6f       	ori	r24, 0xF0	; 240
     de4:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     de6:	87 b1       	in	r24, 0x07	; 7
     de8:	87 60       	ori	r24, 0x07	; 7
     dea:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     dec:	80 e3       	ldi	r24, 0x30	; 48
     dee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     df0:	42 9a       	sbi	0x08, 2	; 8
     df2:	20 e4       	ldi	r18, 0x40	; 64
     df4:	3f e1       	ldi	r19, 0x1F	; 31
     df6:	f9 01       	movw	r30, r18
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     dfc:	42 98       	cbi	0x08, 2	; 8
     dfe:	f9 01       	movw	r30, r18
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     e04:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e06:	42 9a       	sbi	0x08, 2	; 8
     e08:	c9 01       	movw	r24, r18
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e0e:	42 98       	cbi	0x08, 2	; 8
     e10:	c9 01       	movw	r24, r18
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     e1a:	42 9a       	sbi	0x08, 2	; 8
     e1c:	c9 01       	movw	r24, r18
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     e22:	42 98       	cbi	0x08, 2	; 8
     e24:	c9 01       	movw	r24, r18
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     e2a:	88 e2       	ldi	r24, 0x28	; 40
     e2c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     e30:	8c e0       	ldi	r24, 0x0C	; 12
     e32:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
     e36:	cc e8       	ldi	r28, 0x8C	; 140
     e38:	d0 e0       	ldi	r29, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     e3c:	16 2f       	mov	r17, r22
     e3e:	1f 5f       	subi	r17, 0xFF	; 255
     e40:	ce 01       	movw	r24, r28
     e42:	0e 94 c3 06 	call	0xd86	; 0xd86 <LCDdefinechar>
     e46:	28 96       	adiw	r28, 0x08	; 8
     e48:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     e4a:	18 30       	cpi	r17, 0x08	; 8
     e4c:	b9 f7       	brne	.-18     	; 0xe3c <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	08 95       	ret

00000e56 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	08 2f       	mov	r16, r24
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     e60:	8e e1       	ldi	r24, 0x1E	; 30
     e62:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     e66:	1f 5f       	subi	r17, 0xFF	; 255
     e68:	10 17       	cp	r17, r16
     e6a:	d0 f3       	brcs	.-12     	; 0xe60 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	08 2f       	mov	r16, r24
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     e7c:	88 e1       	ldi	r24, 0x18	; 24
     e7e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     e82:	1f 5f       	subi	r17, 0xFF	; 255
     e84:	10 17       	cp	r17, r16
     e86:	d0 f3       	brcs	.-12     	; 0xe7c <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	08 95       	ret

00000e8e <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     e8e:	8e e0       	ldi	r24, 0x0E	; 14
     e90:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     e94:	08 95       	ret

00000e96 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     e96:	8f e0       	ldi	r24, 0x0F	; 15
     e98:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     e9c:	08 95       	ret

00000e9e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     e9e:	8c e0       	ldi	r24, 0x0C	; 12
     ea0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     ea4:	08 95       	ret

00000ea6 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     eac:	08 95       	ret

00000eae <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     eae:	8c e0       	ldi	r24, 0x0C	; 12
     eb0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
}
     eb4:	08 95       	ret

00000eb6 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	08 2f       	mov	r16, r24
     ebc:	10 e0       	ldi	r17, 0x00	; 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     ec0:	80 e1       	ldi	r24, 0x10	; 16
     ec2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     ec6:	1f 5f       	subi	r17, 0xFF	; 255
     ec8:	10 17       	cp	r17, r16
     eca:	d0 f3       	brcs	.-12     	; 0xec0 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	08 2f       	mov	r16, r24
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     edc:	84 e1       	ldi	r24, 0x14	; 20
     ede:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     ee2:	1f 5f       	subi	r17, 0xFF	; 255
     ee4:	10 17       	cp	r17, r16
     ee6:	d0 f3       	brcs	.-12     	; 0xedc <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     efe:	96 e0       	ldi	r25, 0x06	; 6
     f00:	89 9f       	mul	r24, r25
     f02:	c0 01       	movw	r24, r0
     f04:	11 24       	eor	r1, r1
     f06:	24 2f       	mov	r18, r20
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	ac 01       	movw	r20, r24
     f0c:	42 9f       	mul	r20, r18
     f0e:	c0 01       	movw	r24, r0
     f10:	43 9f       	mul	r20, r19
     f12:	90 0d       	add	r25, r0
     f14:	52 9f       	mul	r21, r18
     f16:	90 0d       	add	r25, r0
     f18:	11 24       	eor	r1, r1
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__divmodhi4>
     f20:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     f22:	cb 01       	movw	r24, r22
     f24:	66 e0       	ldi	r22, 0x06	; 6
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__udivmodhi4>
     f2c:	e8 2e       	mov	r14, r24
     f2e:	ff 24       	eor	r15, r15
     f30:	00 e0       	ldi	r16, 0x00	; 0
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	12 c0       	rjmp	.+36     	; 0xf5a <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     f36:	c8 01       	movw	r24, r16
     f38:	05 96       	adiw	r24, 0x05	; 5
     f3a:	c8 17       	cp	r28, r24
     f3c:	d9 07       	cpc	r29, r25
     f3e:	10 f0       	brcs	.+4      	; 0xf44 <LCDprogressBar+0x56>
     f40:	85 e0       	ldi	r24, 0x05	; 5
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     f44:	c0 17       	cp	r28, r16
     f46:	d1 07       	cpc	r29, r17
     f48:	10 f0       	brcs	.+4      	; 0xf4e <LCDprogressBar+0x60>
     f4a:	8e 2d       	mov	r24, r14
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <LCDprogressBar+0x62>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     f50:	0e 94 42 06 	call	0xc84	; 0xc84 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     f54:	f3 94       	inc	r15
     f56:	0a 5f       	subi	r16, 0xFA	; 250
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	fd 14       	cp	r15, r13
     f5c:	60 f3       	brcs	.-40     	; 0xf36 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	08 95       	ret

00000f6e <__udivmodhi4>:
     f6e:	aa 1b       	sub	r26, r26
     f70:	bb 1b       	sub	r27, r27
     f72:	51 e1       	ldi	r21, 0x11	; 17
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <__udivmodhi4_ep>

00000f76 <__udivmodhi4_loop>:
     f76:	aa 1f       	adc	r26, r26
     f78:	bb 1f       	adc	r27, r27
     f7a:	a6 17       	cp	r26, r22
     f7c:	b7 07       	cpc	r27, r23
     f7e:	10 f0       	brcs	.+4      	; 0xf84 <__udivmodhi4_ep>
     f80:	a6 1b       	sub	r26, r22
     f82:	b7 0b       	sbc	r27, r23

00000f84 <__udivmodhi4_ep>:
     f84:	88 1f       	adc	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	5a 95       	dec	r21
     f8a:	a9 f7       	brne	.-22     	; 0xf76 <__udivmodhi4_loop>
     f8c:	80 95       	com	r24
     f8e:	90 95       	com	r25
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	08 95       	ret

00000f96 <__divmodhi4>:
     f96:	97 fb       	bst	r25, 7
     f98:	09 2e       	mov	r0, r25
     f9a:	07 26       	eor	r0, r23
     f9c:	0a d0       	rcall	.+20     	; 0xfb2 <__divmodhi4_neg1>
     f9e:	77 fd       	sbrc	r23, 7
     fa0:	04 d0       	rcall	.+8      	; 0xfaa <__divmodhi4_neg2>
     fa2:	e5 df       	rcall	.-54     	; 0xf6e <__udivmodhi4>
     fa4:	06 d0       	rcall	.+12     	; 0xfb2 <__divmodhi4_neg1>
     fa6:	00 20       	and	r0, r0
     fa8:	1a f4       	brpl	.+6      	; 0xfb0 <__divmodhi4_exit>

00000faa <__divmodhi4_neg2>:
     faa:	70 95       	com	r23
     fac:	61 95       	neg	r22
     fae:	7f 4f       	sbci	r23, 0xFF	; 255

00000fb0 <__divmodhi4_exit>:
     fb0:	08 95       	ret

00000fb2 <__divmodhi4_neg1>:
     fb2:	f6 f7       	brtc	.-4      	; 0xfb0 <__divmodhi4_exit>
     fb4:	90 95       	com	r25
     fb6:	81 95       	neg	r24
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	08 95       	ret

00000fbc <fprintf>:
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9e 01       	movw	r18, r28
     fc6:	27 5f       	subi	r18, 0xF7	; 247
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	a9 01       	movw	r20, r18
     fd4:	0e 94 57 08 	call	0x10ae	; 0x10ae <vfprintf>
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <fputc>:
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	8c 01       	movw	r16, r24
     fe8:	eb 01       	movw	r28, r22
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	81 ff       	sbrs	r24, 1
     fee:	1b c0       	rjmp	.+54     	; 0x1026 <fputc+0x48>
     ff0:	82 ff       	sbrs	r24, 2
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <fputc+0x30>
     ff4:	2e 81       	ldd	r18, Y+6	; 0x06
     ff6:	3f 81       	ldd	r19, Y+7	; 0x07
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	64 f4       	brge	.+24     	; 0x101a <fputc+0x3c>
    1002:	e8 81       	ld	r30, Y
    1004:	f9 81       	ldd	r31, Y+1	; 0x01
    1006:	01 93       	st	Z+, r16
    1008:	f9 83       	std	Y+1, r31	; 0x01
    100a:	e8 83       	st	Y, r30
    100c:	06 c0       	rjmp	.+12     	; 0x101a <fputc+0x3c>
    100e:	e8 85       	ldd	r30, Y+8	; 0x08
    1010:	f9 85       	ldd	r31, Y+9	; 0x09
    1012:	80 2f       	mov	r24, r16
    1014:	09 95       	icall
    1016:	89 2b       	or	r24, r25
    1018:	31 f4       	brne	.+12     	; 0x1026 <fputc+0x48>
    101a:	8e 81       	ldd	r24, Y+6	; 0x06
    101c:	9f 81       	ldd	r25, Y+7	; 0x07
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	9f 83       	std	Y+7, r25	; 0x07
    1022:	8e 83       	std	Y+6, r24	; 0x06
    1024:	02 c0       	rjmp	.+4      	; 0x102a <fputc+0x4c>
    1026:	0f ef       	ldi	r16, 0xFF	; 255
    1028:	1f ef       	ldi	r17, 0xFF	; 255
    102a:	c8 01       	movw	r24, r16
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <fputs>:
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	7c 01       	movw	r14, r24
    1044:	8b 01       	movw	r16, r22
    1046:	db 01       	movw	r26, r22
    1048:	13 96       	adiw	r26, 0x03	; 3
    104a:	8c 91       	ld	r24, X
    104c:	81 fd       	sbrc	r24, 1
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <fputs+0x20>
    1050:	cf ef       	ldi	r28, 0xFF	; 255
    1052:	df ef       	ldi	r29, 0xFF	; 255
    1054:	13 c0       	rjmp	.+38     	; 0x107c <fputs+0x46>
    1056:	c0 e0       	ldi	r28, 0x00	; 0
    1058:	d0 e0       	ldi	r29, 0x00	; 0
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <fputs+0x3c>
    105c:	d8 01       	movw	r26, r16
    105e:	18 96       	adiw	r26, 0x08	; 8
    1060:	ed 91       	ld	r30, X+
    1062:	fc 91       	ld	r31, X
    1064:	19 97       	sbiw	r26, 0x09	; 9
    1066:	b8 01       	movw	r22, r16
    1068:	09 95       	icall
    106a:	89 2b       	or	r24, r25
    106c:	11 f0       	breq	.+4      	; 0x1072 <fputs+0x3c>
    106e:	cf ef       	ldi	r28, 0xFF	; 255
    1070:	df ef       	ldi	r29, 0xFF	; 255
    1072:	f7 01       	movw	r30, r14
    1074:	81 91       	ld	r24, Z+
    1076:	7f 01       	movw	r14, r30
    1078:	88 23       	and	r24, r24
    107a:	81 f7       	brne	.-32     	; 0x105c <fputs+0x26>
    107c:	ce 01       	movw	r24, r28
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	08 95       	ret

0000108c <fscanf>:
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9e 01       	movw	r18, r28
    1096:	27 5f       	subi	r18, 0xF7	; 247
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	a9 01       	movw	r20, r18
    10a4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <vfscanf>
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <vfprintf>:
    10ae:	2f 92       	push	r2
    10b0:	3f 92       	push	r3
    10b2:	4f 92       	push	r4
    10b4:	5f 92       	push	r5
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	2b 97       	sbiw	r28, 0x0b	; 11
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	3c 01       	movw	r6, r24
    10e4:	2b 01       	movw	r4, r22
    10e6:	5a 01       	movw	r10, r20
    10e8:	fc 01       	movw	r30, r24
    10ea:	17 82       	std	Z+7, r1	; 0x07
    10ec:	16 82       	std	Z+6, r1	; 0x06
    10ee:	83 81       	ldd	r24, Z+3	; 0x03
    10f0:	81 fd       	sbrc	r24, 1
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <vfprintf+0x4c>
    10f4:	6f ef       	ldi	r22, 0xFF	; 255
    10f6:	7f ef       	ldi	r23, 0xFF	; 255
    10f8:	c6 c1       	rjmp	.+908    	; 0x1486 <vfprintf+0x3d8>
    10fa:	9a e0       	ldi	r25, 0x0A	; 10
    10fc:	89 2e       	mov	r8, r25
    10fe:	1e 01       	movw	r2, r28
    1100:	08 94       	sec
    1102:	21 1c       	adc	r2, r1
    1104:	31 1c       	adc	r3, r1
    1106:	f3 01       	movw	r30, r6
    1108:	23 81       	ldd	r18, Z+3	; 0x03
    110a:	f2 01       	movw	r30, r4
    110c:	23 fd       	sbrc	r18, 3
    110e:	85 91       	lpm	r24, Z+
    1110:	23 ff       	sbrs	r18, 3
    1112:	81 91       	ld	r24, Z+
    1114:	2f 01       	movw	r4, r30
    1116:	88 23       	and	r24, r24
    1118:	09 f4       	brne	.+2      	; 0x111c <vfprintf+0x6e>
    111a:	b2 c1       	rjmp	.+868    	; 0x1480 <vfprintf+0x3d2>
    111c:	85 32       	cpi	r24, 0x25	; 37
    111e:	39 f4       	brne	.+14     	; 0x112e <vfprintf+0x80>
    1120:	23 fd       	sbrc	r18, 3
    1122:	85 91       	lpm	r24, Z+
    1124:	23 ff       	sbrs	r18, 3
    1126:	81 91       	ld	r24, Z+
    1128:	2f 01       	movw	r4, r30
    112a:	85 32       	cpi	r24, 0x25	; 37
    112c:	29 f4       	brne	.+10     	; 0x1138 <vfprintf+0x8a>
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	b3 01       	movw	r22, r6
    1132:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1136:	e7 cf       	rjmp	.-50     	; 0x1106 <vfprintf+0x58>
    1138:	98 2f       	mov	r25, r24
    113a:	ff 24       	eor	r15, r15
    113c:	ee 24       	eor	r14, r14
    113e:	99 24       	eor	r9, r9
    1140:	ff e1       	ldi	r31, 0x1F	; 31
    1142:	ff 15       	cp	r31, r15
    1144:	d0 f0       	brcs	.+52     	; 0x117a <vfprintf+0xcc>
    1146:	9b 32       	cpi	r25, 0x2B	; 43
    1148:	69 f0       	breq	.+26     	; 0x1164 <vfprintf+0xb6>
    114a:	9c 32       	cpi	r25, 0x2C	; 44
    114c:	28 f4       	brcc	.+10     	; 0x1158 <vfprintf+0xaa>
    114e:	90 32       	cpi	r25, 0x20	; 32
    1150:	59 f0       	breq	.+22     	; 0x1168 <vfprintf+0xba>
    1152:	93 32       	cpi	r25, 0x23	; 35
    1154:	91 f4       	brne	.+36     	; 0x117a <vfprintf+0xcc>
    1156:	0e c0       	rjmp	.+28     	; 0x1174 <vfprintf+0xc6>
    1158:	9d 32       	cpi	r25, 0x2D	; 45
    115a:	49 f0       	breq	.+18     	; 0x116e <vfprintf+0xc0>
    115c:	90 33       	cpi	r25, 0x30	; 48
    115e:	69 f4       	brne	.+26     	; 0x117a <vfprintf+0xcc>
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	24 c0       	rjmp	.+72     	; 0x11ac <vfprintf+0xfe>
    1164:	52 e0       	ldi	r21, 0x02	; 2
    1166:	f5 2a       	or	r15, r21
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	f8 2a       	or	r15, r24
    116c:	28 c0       	rjmp	.+80     	; 0x11be <vfprintf+0x110>
    116e:	98 e0       	ldi	r25, 0x08	; 8
    1170:	f9 2a       	or	r15, r25
    1172:	25 c0       	rjmp	.+74     	; 0x11be <vfprintf+0x110>
    1174:	e0 e1       	ldi	r30, 0x10	; 16
    1176:	fe 2a       	or	r15, r30
    1178:	22 c0       	rjmp	.+68     	; 0x11be <vfprintf+0x110>
    117a:	f7 fc       	sbrc	r15, 7
    117c:	29 c0       	rjmp	.+82     	; 0x11d0 <vfprintf+0x122>
    117e:	89 2f       	mov	r24, r25
    1180:	80 53       	subi	r24, 0x30	; 48
    1182:	8a 30       	cpi	r24, 0x0A	; 10
    1184:	70 f4       	brcc	.+28     	; 0x11a2 <vfprintf+0xf4>
    1186:	f6 fe       	sbrs	r15, 6
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <vfprintf+0xe6>
    118a:	98 9c       	mul	r9, r8
    118c:	90 2c       	mov	r9, r0
    118e:	11 24       	eor	r1, r1
    1190:	98 0e       	add	r9, r24
    1192:	15 c0       	rjmp	.+42     	; 0x11be <vfprintf+0x110>
    1194:	e8 9c       	mul	r14, r8
    1196:	e0 2c       	mov	r14, r0
    1198:	11 24       	eor	r1, r1
    119a:	e8 0e       	add	r14, r24
    119c:	f0 e2       	ldi	r31, 0x20	; 32
    119e:	ff 2a       	or	r15, r31
    11a0:	0e c0       	rjmp	.+28     	; 0x11be <vfprintf+0x110>
    11a2:	9e 32       	cpi	r25, 0x2E	; 46
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <vfprintf+0x102>
    11a6:	f6 fc       	sbrc	r15, 6
    11a8:	6b c1       	rjmp	.+726    	; 0x1480 <vfprintf+0x3d2>
    11aa:	40 e4       	ldi	r20, 0x40	; 64
    11ac:	f4 2a       	or	r15, r20
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <vfprintf+0x110>
    11b0:	9c 36       	cpi	r25, 0x6C	; 108
    11b2:	19 f4       	brne	.+6      	; 0x11ba <vfprintf+0x10c>
    11b4:	50 e8       	ldi	r21, 0x80	; 128
    11b6:	f5 2a       	or	r15, r21
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vfprintf+0x110>
    11ba:	98 36       	cpi	r25, 0x68	; 104
    11bc:	49 f4       	brne	.+18     	; 0x11d0 <vfprintf+0x122>
    11be:	f2 01       	movw	r30, r4
    11c0:	23 fd       	sbrc	r18, 3
    11c2:	95 91       	lpm	r25, Z+
    11c4:	23 ff       	sbrs	r18, 3
    11c6:	91 91       	ld	r25, Z+
    11c8:	2f 01       	movw	r4, r30
    11ca:	99 23       	and	r25, r25
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <vfprintf+0x122>
    11ce:	b8 cf       	rjmp	.-144    	; 0x1140 <vfprintf+0x92>
    11d0:	89 2f       	mov	r24, r25
    11d2:	85 54       	subi	r24, 0x45	; 69
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	18 f0       	brcs	.+6      	; 0x11de <vfprintf+0x130>
    11d8:	80 52       	subi	r24, 0x20	; 32
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	38 f4       	brcc	.+14     	; 0x11ec <vfprintf+0x13e>
    11de:	44 e0       	ldi	r20, 0x04	; 4
    11e0:	50 e0       	ldi	r21, 0x00	; 0
    11e2:	a4 0e       	add	r10, r20
    11e4:	b5 1e       	adc	r11, r21
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	59 83       	std	Y+1, r21	; 0x01
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <vfprintf+0x15c>
    11ec:	93 36       	cpi	r25, 0x63	; 99
    11ee:	31 f0       	breq	.+12     	; 0x11fc <vfprintf+0x14e>
    11f0:	93 37       	cpi	r25, 0x73	; 115
    11f2:	79 f0       	breq	.+30     	; 0x1212 <vfprintf+0x164>
    11f4:	93 35       	cpi	r25, 0x53	; 83
    11f6:	09 f0       	breq	.+2      	; 0x11fa <vfprintf+0x14c>
    11f8:	56 c0       	rjmp	.+172    	; 0x12a6 <vfprintf+0x1f8>
    11fa:	20 c0       	rjmp	.+64     	; 0x123c <vfprintf+0x18e>
    11fc:	f5 01       	movw	r30, r10
    11fe:	80 81       	ld	r24, Z
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	42 e0       	ldi	r20, 0x02	; 2
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	a4 0e       	add	r10, r20
    1208:	b5 1e       	adc	r11, r21
    120a:	61 01       	movw	r12, r2
    120c:	01 e0       	ldi	r16, 0x01	; 1
    120e:	10 e0       	ldi	r17, 0x00	; 0
    1210:	12 c0       	rjmp	.+36     	; 0x1236 <vfprintf+0x188>
    1212:	f5 01       	movw	r30, r10
    1214:	c0 80       	ld	r12, Z
    1216:	d1 80       	ldd	r13, Z+1	; 0x01
    1218:	f6 fc       	sbrc	r15, 6
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <vfprintf+0x174>
    121c:	6f ef       	ldi	r22, 0xFF	; 255
    121e:	7f ef       	ldi	r23, 0xFF	; 255
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x178>
    1222:	69 2d       	mov	r22, r9
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	42 e0       	ldi	r20, 0x02	; 2
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	a4 0e       	add	r10, r20
    122c:	b5 1e       	adc	r11, r21
    122e:	c6 01       	movw	r24, r12
    1230:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strnlen>
    1234:	8c 01       	movw	r16, r24
    1236:	5f e7       	ldi	r21, 0x7F	; 127
    1238:	f5 22       	and	r15, r21
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <vfprintf+0x1b6>
    123c:	f5 01       	movw	r30, r10
    123e:	c0 80       	ld	r12, Z
    1240:	d1 80       	ldd	r13, Z+1	; 0x01
    1242:	f6 fc       	sbrc	r15, 6
    1244:	03 c0       	rjmp	.+6      	; 0x124c <vfprintf+0x19e>
    1246:	6f ef       	ldi	r22, 0xFF	; 255
    1248:	7f ef       	ldi	r23, 0xFF	; 255
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <vfprintf+0x1a2>
    124c:	69 2d       	mov	r22, r9
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	42 e0       	ldi	r20, 0x02	; 2
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	a4 0e       	add	r10, r20
    1256:	b5 1e       	adc	r11, r21
    1258:	c6 01       	movw	r24, r12
    125a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <strnlen_P>
    125e:	8c 01       	movw	r16, r24
    1260:	50 e8       	ldi	r21, 0x80	; 128
    1262:	f5 2a       	or	r15, r21
    1264:	f3 fe       	sbrs	r15, 3
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <vfprintf+0x1c8>
    1268:	1a c0       	rjmp	.+52     	; 0x129e <vfprintf+0x1f0>
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	b3 01       	movw	r22, r6
    1270:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1274:	ea 94       	dec	r14
    1276:	8e 2d       	mov	r24, r14
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	08 17       	cp	r16, r24
    127c:	19 07       	cpc	r17, r25
    127e:	a8 f3       	brcs	.-22     	; 0x126a <vfprintf+0x1bc>
    1280:	0e c0       	rjmp	.+28     	; 0x129e <vfprintf+0x1f0>
    1282:	f6 01       	movw	r30, r12
    1284:	f7 fc       	sbrc	r15, 7
    1286:	85 91       	lpm	r24, Z+
    1288:	f7 fe       	sbrs	r15, 7
    128a:	81 91       	ld	r24, Z+
    128c:	6f 01       	movw	r12, r30
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	b3 01       	movw	r22, r6
    1292:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1296:	e1 10       	cpse	r14, r1
    1298:	ea 94       	dec	r14
    129a:	01 50       	subi	r16, 0x01	; 1
    129c:	10 40       	sbci	r17, 0x00	; 0
    129e:	01 15       	cp	r16, r1
    12a0:	11 05       	cpc	r17, r1
    12a2:	79 f7       	brne	.-34     	; 0x1282 <vfprintf+0x1d4>
    12a4:	ea c0       	rjmp	.+468    	; 0x147a <vfprintf+0x3cc>
    12a6:	94 36       	cpi	r25, 0x64	; 100
    12a8:	11 f0       	breq	.+4      	; 0x12ae <vfprintf+0x200>
    12aa:	99 36       	cpi	r25, 0x69	; 105
    12ac:	69 f5       	brne	.+90     	; 0x1308 <vfprintf+0x25a>
    12ae:	f7 fe       	sbrs	r15, 7
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <vfprintf+0x214>
    12b2:	f5 01       	movw	r30, r10
    12b4:	20 81       	ld	r18, Z
    12b6:	31 81       	ldd	r19, Z+1	; 0x01
    12b8:	42 81       	ldd	r20, Z+2	; 0x02
    12ba:	53 81       	ldd	r21, Z+3	; 0x03
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0a c0       	rjmp	.+20     	; 0x12d6 <vfprintf+0x228>
    12c2:	f5 01       	movw	r30, r10
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	9c 01       	movw	r18, r24
    12ca:	44 27       	eor	r20, r20
    12cc:	37 fd       	sbrc	r19, 7
    12ce:	40 95       	com	r20
    12d0:	54 2f       	mov	r21, r20
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a8 0e       	add	r10, r24
    12d8:	b9 1e       	adc	r11, r25
    12da:	9f e6       	ldi	r25, 0x6F	; 111
    12dc:	f9 22       	and	r15, r25
    12de:	57 ff       	sbrs	r21, 7
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <vfprintf+0x246>
    12e2:	50 95       	com	r21
    12e4:	40 95       	com	r20
    12e6:	30 95       	com	r19
    12e8:	21 95       	neg	r18
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	4f 4f       	sbci	r20, 0xFF	; 255
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	e0 e8       	ldi	r30, 0x80	; 128
    12f2:	fe 2a       	or	r15, r30
    12f4:	ca 01       	movw	r24, r20
    12f6:	b9 01       	movw	r22, r18
    12f8:	a1 01       	movw	r20, r2
    12fa:	2a e0       	ldi	r18, 0x0A	; 10
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__ultoa_invert>
    1302:	d8 2e       	mov	r13, r24
    1304:	d2 18       	sub	r13, r2
    1306:	40 c0       	rjmp	.+128    	; 0x1388 <vfprintf+0x2da>
    1308:	95 37       	cpi	r25, 0x75	; 117
    130a:	29 f4       	brne	.+10     	; 0x1316 <vfprintf+0x268>
    130c:	1f 2d       	mov	r17, r15
    130e:	1f 7e       	andi	r17, 0xEF	; 239
    1310:	2a e0       	ldi	r18, 0x0A	; 10
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	1d c0       	rjmp	.+58     	; 0x1350 <vfprintf+0x2a2>
    1316:	1f 2d       	mov	r17, r15
    1318:	19 7f       	andi	r17, 0xF9	; 249
    131a:	9f 36       	cpi	r25, 0x6F	; 111
    131c:	61 f0       	breq	.+24     	; 0x1336 <vfprintf+0x288>
    131e:	90 37       	cpi	r25, 0x70	; 112
    1320:	20 f4       	brcc	.+8      	; 0x132a <vfprintf+0x27c>
    1322:	98 35       	cpi	r25, 0x58	; 88
    1324:	09 f0       	breq	.+2      	; 0x1328 <vfprintf+0x27a>
    1326:	ac c0       	rjmp	.+344    	; 0x1480 <vfprintf+0x3d2>
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <vfprintf+0x29a>
    132a:	90 37       	cpi	r25, 0x70	; 112
    132c:	39 f0       	breq	.+14     	; 0x133c <vfprintf+0x28e>
    132e:	98 37       	cpi	r25, 0x78	; 120
    1330:	09 f0       	breq	.+2      	; 0x1334 <vfprintf+0x286>
    1332:	a6 c0       	rjmp	.+332    	; 0x1480 <vfprintf+0x3d2>
    1334:	04 c0       	rjmp	.+8      	; 0x133e <vfprintf+0x290>
    1336:	28 e0       	ldi	r18, 0x08	; 8
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	0a c0       	rjmp	.+20     	; 0x1350 <vfprintf+0x2a2>
    133c:	10 61       	ori	r17, 0x10	; 16
    133e:	14 fd       	sbrc	r17, 4
    1340:	14 60       	ori	r17, 0x04	; 4
    1342:	20 e1       	ldi	r18, 0x10	; 16
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <vfprintf+0x2a2>
    1348:	14 fd       	sbrc	r17, 4
    134a:	16 60       	ori	r17, 0x06	; 6
    134c:	20 e1       	ldi	r18, 0x10	; 16
    134e:	32 e0       	ldi	r19, 0x02	; 2
    1350:	17 ff       	sbrs	r17, 7
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <vfprintf+0x2b6>
    1354:	f5 01       	movw	r30, r10
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	44 e0       	ldi	r20, 0x04	; 4
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <vfprintf+0x2c6>
    1364:	f5 01       	movw	r30, r10
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	bc 01       	movw	r22, r24
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	42 e0       	ldi	r20, 0x02	; 2
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	a4 0e       	add	r10, r20
    1376:	b5 1e       	adc	r11, r21
    1378:	a1 01       	movw	r20, r2
    137a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__ultoa_invert>
    137e:	d8 2e       	mov	r13, r24
    1380:	d2 18       	sub	r13, r2
    1382:	8f e7       	ldi	r24, 0x7F	; 127
    1384:	f8 2e       	mov	r15, r24
    1386:	f1 22       	and	r15, r17
    1388:	f6 fe       	sbrs	r15, 6
    138a:	0b c0       	rjmp	.+22     	; 0x13a2 <vfprintf+0x2f4>
    138c:	5e ef       	ldi	r21, 0xFE	; 254
    138e:	f5 22       	and	r15, r21
    1390:	d9 14       	cp	r13, r9
    1392:	38 f4       	brcc	.+14     	; 0x13a2 <vfprintf+0x2f4>
    1394:	f4 fe       	sbrs	r15, 4
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <vfprintf+0x2f8>
    1398:	f2 fc       	sbrc	r15, 2
    139a:	05 c0       	rjmp	.+10     	; 0x13a6 <vfprintf+0x2f8>
    139c:	8f ee       	ldi	r24, 0xEF	; 239
    139e:	f8 22       	and	r15, r24
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <vfprintf+0x2f8>
    13a2:	1d 2d       	mov	r17, r13
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <vfprintf+0x2fa>
    13a6:	19 2d       	mov	r17, r9
    13a8:	f4 fe       	sbrs	r15, 4
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <vfprintf+0x318>
    13ac:	fe 01       	movw	r30, r28
    13ae:	ed 0d       	add	r30, r13
    13b0:	f1 1d       	adc	r31, r1
    13b2:	80 81       	ld	r24, Z
    13b4:	80 33       	cpi	r24, 0x30	; 48
    13b6:	19 f4       	brne	.+6      	; 0x13be <vfprintf+0x310>
    13b8:	99 ee       	ldi	r25, 0xE9	; 233
    13ba:	f9 22       	and	r15, r25
    13bc:	08 c0       	rjmp	.+16     	; 0x13ce <vfprintf+0x320>
    13be:	1f 5f       	subi	r17, 0xFF	; 255
    13c0:	f2 fe       	sbrs	r15, 2
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <vfprintf+0x320>
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <vfprintf+0x31e>
    13c6:	8f 2d       	mov	r24, r15
    13c8:	86 78       	andi	r24, 0x86	; 134
    13ca:	09 f0       	breq	.+2      	; 0x13ce <vfprintf+0x320>
    13cc:	1f 5f       	subi	r17, 0xFF	; 255
    13ce:	0f 2d       	mov	r16, r15
    13d0:	f3 fc       	sbrc	r15, 3
    13d2:	14 c0       	rjmp	.+40     	; 0x13fc <vfprintf+0x34e>
    13d4:	f0 fe       	sbrs	r15, 0
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <vfprintf+0x348>
    13d8:	1e 15       	cp	r17, r14
    13da:	10 f0       	brcs	.+4      	; 0x13e0 <vfprintf+0x332>
    13dc:	9d 2c       	mov	r9, r13
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <vfprintf+0x348>
    13e0:	9d 2c       	mov	r9, r13
    13e2:	9e 0c       	add	r9, r14
    13e4:	91 1a       	sub	r9, r17
    13e6:	1e 2d       	mov	r17, r14
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <vfprintf+0x348>
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	b3 01       	movw	r22, r6
    13f0:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    13f4:	1f 5f       	subi	r17, 0xFF	; 255
    13f6:	1e 15       	cp	r17, r14
    13f8:	c0 f3       	brcs	.-16     	; 0x13ea <vfprintf+0x33c>
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <vfprintf+0x356>
    13fc:	1e 15       	cp	r17, r14
    13fe:	10 f4       	brcc	.+4      	; 0x1404 <vfprintf+0x356>
    1400:	e1 1a       	sub	r14, r17
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <vfprintf+0x358>
    1404:	ee 24       	eor	r14, r14
    1406:	04 ff       	sbrs	r16, 4
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <vfprintf+0x37a>
    140a:	80 e3       	ldi	r24, 0x30	; 48
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b3 01       	movw	r22, r6
    1410:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1414:	02 ff       	sbrs	r16, 2
    1416:	1d c0       	rjmp	.+58     	; 0x1452 <vfprintf+0x3a4>
    1418:	01 fd       	sbrc	r16, 1
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <vfprintf+0x374>
    141c:	88 e7       	ldi	r24, 0x78	; 120
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e c0       	rjmp	.+28     	; 0x143e <vfprintf+0x390>
    1422:	88 e5       	ldi	r24, 0x58	; 88
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0b c0       	rjmp	.+22     	; 0x143e <vfprintf+0x390>
    1428:	80 2f       	mov	r24, r16
    142a:	86 78       	andi	r24, 0x86	; 134
    142c:	91 f0       	breq	.+36     	; 0x1452 <vfprintf+0x3a4>
    142e:	01 ff       	sbrs	r16, 1
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0x388>
    1432:	8b e2       	ldi	r24, 0x2B	; 43
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <vfprintf+0x38a>
    1436:	80 e2       	ldi	r24, 0x20	; 32
    1438:	f7 fc       	sbrc	r15, 7
    143a:	8d e2       	ldi	r24, 0x2D	; 45
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	b3 01       	movw	r22, r6
    1440:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <vfprintf+0x3a4>
    1446:	80 e3       	ldi	r24, 0x30	; 48
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	b3 01       	movw	r22, r6
    144c:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1450:	9a 94       	dec	r9
    1452:	d9 14       	cp	r13, r9
    1454:	c0 f3       	brcs	.-16     	; 0x1446 <vfprintf+0x398>
    1456:	da 94       	dec	r13
    1458:	f1 01       	movw	r30, r2
    145a:	ed 0d       	add	r30, r13
    145c:	f1 1d       	adc	r31, r1
    145e:	80 81       	ld	r24, Z
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	b3 01       	movw	r22, r6
    1464:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1468:	dd 20       	and	r13, r13
    146a:	a9 f7       	brne	.-22     	; 0x1456 <vfprintf+0x3a8>
    146c:	06 c0       	rjmp	.+12     	; 0x147a <vfprintf+0x3cc>
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b3 01       	movw	r22, r6
    1474:	0e 94 ef 07 	call	0xfde	; 0xfde <fputc>
    1478:	ea 94       	dec	r14
    147a:	ee 20       	and	r14, r14
    147c:	c1 f7       	brne	.-16     	; 0x146e <vfprintf+0x3c0>
    147e:	43 ce       	rjmp	.-890    	; 0x1106 <vfprintf+0x58>
    1480:	f3 01       	movw	r30, r6
    1482:	66 81       	ldd	r22, Z+6	; 0x06
    1484:	77 81       	ldd	r23, Z+7	; 0x07
    1486:	cb 01       	movw	r24, r22
    1488:	2b 96       	adiw	r28, 0x0b	; 11
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	7f 90       	pop	r7
    14ae:	6f 90       	pop	r6
    14b0:	5f 90       	pop	r5
    14b2:	4f 90       	pop	r4
    14b4:	3f 90       	pop	r3
    14b6:	2f 90       	pop	r2
    14b8:	08 95       	ret

000014ba <putval>:
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 fd       	sbrc	r18, 0
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <putval+0x16>
    14c0:	23 fd       	sbrc	r18, 3
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <putval+0x14>
    14c4:	22 ff       	sbrs	r18, 2
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <putval+0x12>
    14c8:	73 83       	std	Z+3, r23	; 0x03
    14ca:	62 83       	std	Z+2, r22	; 0x02
    14cc:	51 83       	std	Z+1, r21	; 0x01
    14ce:	40 83       	st	Z, r20
    14d0:	08 95       	ret

000014d2 <mulacc>:
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	44 ff       	sbrs	r20, 4
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <mulacc+0x10>
    14de:	33 e0       	ldi	r19, 0x03	; 3
    14e0:	11 c0       	rjmp	.+34     	; 0x1504 <mulacc+0x32>
    14e2:	46 ff       	sbrs	r20, 6
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <mulacc+0x18>
    14e6:	34 e0       	ldi	r19, 0x04	; 4
    14e8:	0d c0       	rjmp	.+26     	; 0x1504 <mulacc+0x32>
    14ea:	db 01       	movw	r26, r22
    14ec:	fc 01       	movw	r30, r24
    14ee:	aa 0f       	add	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	ee 1f       	adc	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	10 94       	com	r1
    14f8:	d1 f7       	brne	.-12     	; 0x14ee <mulacc+0x1c>
    14fa:	6a 0f       	add	r22, r26
    14fc:	7b 1f       	adc	r23, r27
    14fe:	8e 1f       	adc	r24, r30
    1500:	9f 1f       	adc	r25, r31
    1502:	31 e0       	ldi	r19, 0x01	; 1
    1504:	66 0f       	add	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	31 50       	subi	r19, 0x01	; 1
    150e:	d1 f7       	brne	.-12     	; 0x1504 <mulacc+0x32>
    1510:	7b 01       	movw	r14, r22
    1512:	8c 01       	movw	r16, r24
    1514:	e2 0e       	add	r14, r18
    1516:	f1 1c       	adc	r15, r1
    1518:	01 1d       	adc	r16, r1
    151a:	11 1d       	adc	r17, r1
    151c:	a8 01       	movw	r20, r16
    151e:	97 01       	movw	r18, r14
    1520:	b7 01       	movw	r22, r14
    1522:	ca 01       	movw	r24, r20
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	08 95       	ret

0000152e <skip_spaces>:
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	8c 01       	movw	r16, r24
    1538:	c8 01       	movw	r24, r16
    153a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    153e:	ec 01       	movw	r28, r24
    1540:	97 fd       	sbrc	r25, 7
    1542:	08 c0       	rjmp	.+16     	; 0x1554 <skip_spaces+0x26>
    1544:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <isspace>
    1548:	89 2b       	or	r24, r25
    154a:	b1 f7       	brne	.-20     	; 0x1538 <skip_spaces+0xa>
    154c:	ce 01       	movw	r24, r28
    154e:	b8 01       	movw	r22, r16
    1550:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <ungetc>
    1554:	ce 01       	movw	r24, r28
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret

00001560 <conv_int>:
    1560:	af 92       	push	r10
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	c6 2e       	mov	r12, r22
    1578:	5a 01       	movw	r10, r20
    157a:	12 2f       	mov	r17, r18
    157c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    1580:	ac 01       	movw	r20, r24
    1582:	8b 32       	cpi	r24, 0x2B	; 43
    1584:	19 f0       	breq	.+6      	; 0x158c <conv_int+0x2c>
    1586:	8d 32       	cpi	r24, 0x2D	; 45
    1588:	51 f4       	brne	.+20     	; 0x159e <conv_int+0x3e>
    158a:	10 68       	ori	r17, 0x80	; 128
    158c:	ca 94       	dec	r12
    158e:	09 f4       	brne	.+2      	; 0x1592 <conv_int+0x32>
    1590:	6d c0       	rjmp	.+218    	; 0x166c <conv_int+0x10c>
    1592:	ce 01       	movw	r24, r28
    1594:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    1598:	ac 01       	movw	r20, r24
    159a:	97 fd       	sbrc	r25, 7
    159c:	67 c0       	rjmp	.+206    	; 0x166c <conv_int+0x10c>
    159e:	6d ef       	ldi	r22, 0xFD	; 253
    15a0:	d6 2e       	mov	r13, r22
    15a2:	d1 22       	and	r13, r17
    15a4:	8d 2d       	mov	r24, r13
    15a6:	80 73       	andi	r24, 0x30	; 48
    15a8:	01 f5       	brne	.+64     	; 0x15ea <conv_int+0x8a>
    15aa:	40 33       	cpi	r20, 0x30	; 48
    15ac:	f1 f4       	brne	.+60     	; 0x15ea <conv_int+0x8a>
    15ae:	ca 94       	dec	r12
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <conv_int+0x54>
    15b2:	47 c0       	rjmp	.+142    	; 0x1642 <conv_int+0xe2>
    15b4:	ce 01       	movw	r24, r28
    15b6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    15ba:	ac 01       	movw	r20, r24
    15bc:	97 fd       	sbrc	r25, 7
    15be:	41 c0       	rjmp	.+130    	; 0x1642 <conv_int+0xe2>
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	d8 2a       	or	r13, r24
    15c4:	48 37       	cpi	r20, 0x78	; 120
    15c6:	11 f0       	breq	.+4      	; 0x15cc <conv_int+0x6c>
    15c8:	48 35       	cpi	r20, 0x58	; 88
    15ca:	59 f4       	brne	.+22     	; 0x15e2 <conv_int+0x82>
    15cc:	80 e4       	ldi	r24, 0x40	; 64
    15ce:	d8 2a       	or	r13, r24
    15d0:	ca 94       	dec	r12
    15d2:	b9 f1       	breq	.+110    	; 0x1642 <conv_int+0xe2>
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    15da:	ac 01       	movw	r20, r24
    15dc:	99 23       	and	r25, r25
    15de:	2c f4       	brge	.+10     	; 0x15ea <conv_int+0x8a>
    15e0:	30 c0       	rjmp	.+96     	; 0x1642 <conv_int+0xe2>
    15e2:	d6 fc       	sbrc	r13, 6
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <conv_int+0x8a>
    15e6:	80 e1       	ldi	r24, 0x10	; 16
    15e8:	d8 2a       	or	r13, r24
    15ea:	ee 24       	eor	r14, r14
    15ec:	ff 24       	eor	r15, r15
    15ee:	87 01       	movw	r16, r14
    15f0:	24 2f       	mov	r18, r20
    15f2:	20 53       	subi	r18, 0x30	; 48
    15f4:	28 30       	cpi	r18, 0x08	; 8
    15f6:	88 f0       	brcs	.+34     	; 0x161a <conv_int+0xba>
    15f8:	d4 fc       	sbrc	r13, 4
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <conv_int+0xae>
    15fc:	2a 30       	cpi	r18, 0x0A	; 10
    15fe:	68 f0       	brcs	.+26     	; 0x161a <conv_int+0xba>
    1600:	d6 fe       	sbrs	r13, 6
    1602:	05 c0       	rjmp	.+10     	; 0x160e <conv_int+0xae>
    1604:	2f 7d       	andi	r18, 0xDF	; 223
    1606:	82 2f       	mov	r24, r18
    1608:	81 51       	subi	r24, 0x11	; 17
    160a:	86 30       	cpi	r24, 0x06	; 6
    160c:	28 f0       	brcs	.+10     	; 0x1618 <conv_int+0xb8>
    160e:	ca 01       	movw	r24, r20
    1610:	be 01       	movw	r22, r28
    1612:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <ungetc>
    1616:	12 c0       	rjmp	.+36     	; 0x163c <conv_int+0xdc>
    1618:	27 50       	subi	r18, 0x07	; 7
    161a:	c8 01       	movw	r24, r16
    161c:	b7 01       	movw	r22, r14
    161e:	4d 2d       	mov	r20, r13
    1620:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <mulacc>
    1624:	7b 01       	movw	r14, r22
    1626:	8c 01       	movw	r16, r24
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	d8 2a       	or	r13, r24
    162c:	ca 94       	dec	r12
    162e:	61 f0       	breq	.+24     	; 0x1648 <conv_int+0xe8>
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    1636:	ac 01       	movw	r20, r24
    1638:	97 ff       	sbrs	r25, 7
    163a:	da cf       	rjmp	.-76     	; 0x15f0 <conv_int+0x90>
    163c:	d1 fc       	sbrc	r13, 1
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <conv_int+0xe8>
    1640:	15 c0       	rjmp	.+42     	; 0x166c <conv_int+0x10c>
    1642:	ee 24       	eor	r14, r14
    1644:	ff 24       	eor	r15, r15
    1646:	87 01       	movw	r16, r14
    1648:	d7 fe       	sbrs	r13, 7
    164a:	08 c0       	rjmp	.+16     	; 0x165c <conv_int+0xfc>
    164c:	10 95       	com	r17
    164e:	00 95       	com	r16
    1650:	f0 94       	com	r15
    1652:	e0 94       	com	r14
    1654:	e1 1c       	adc	r14, r1
    1656:	f1 1c       	adc	r15, r1
    1658:	01 1d       	adc	r16, r1
    165a:	11 1d       	adc	r17, r1
    165c:	c5 01       	movw	r24, r10
    165e:	b8 01       	movw	r22, r16
    1660:	a7 01       	movw	r20, r14
    1662:	2d 2d       	mov	r18, r13
    1664:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <putval>
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	01 c0       	rjmp	.+2      	; 0x166e <conv_int+0x10e>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	bf 90       	pop	r11
    1680:	af 90       	pop	r10
    1682:	08 95       	ret

00001684 <conv_brk>:
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	a0 97       	sbiw	r28, 0x20	; 32
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	6c 01       	movw	r12, r24
    16b2:	a6 2e       	mov	r10, r22
    16b4:	8a 01       	movw	r16, r20
    16b6:	79 01       	movw	r14, r18
    16b8:	fe 01       	movw	r30, r28
    16ba:	31 96       	adiw	r30, 0x01	; 1
    16bc:	80 e2       	ldi	r24, 0x20	; 32
    16be:	df 01       	movw	r26, r30
    16c0:	1d 92       	st	X+, r1
    16c2:	8a 95       	dec	r24
    16c4:	e9 f7       	brne	.-6      	; 0x16c0 <conv_brk+0x3c>
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	4f 01       	movw	r8, r30
    16d2:	a1 e0       	ldi	r26, 0x01	; 1
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	f6 01       	movw	r30, r12
    16d8:	83 81       	ldd	r24, Z+3	; 0x03
    16da:	f7 01       	movw	r30, r14
    16dc:	83 fd       	sbrc	r24, 3
    16de:	25 91       	lpm	r18, Z+
    16e0:	83 ff       	sbrs	r24, 3
    16e2:	21 91       	ld	r18, Z+
    16e4:	7f 01       	movw	r14, r30
    16e6:	22 23       	and	r18, r18
    16e8:	09 f4       	brne	.+2      	; 0x16ec <conv_brk+0x68>
    16ea:	7e c0       	rjmp	.+252    	; 0x17e8 <conv_brk+0x164>
    16ec:	2e 35       	cpi	r18, 0x5E	; 94
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <conv_brk+0x72>
    16f0:	41 15       	cp	r20, r1
    16f2:	51 05       	cpc	r21, r1
    16f4:	69 f1       	breq	.+90     	; 0x1750 <conv_brk+0xcc>
    16f6:	87 2f       	mov	r24, r23
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	84 17       	cp	r24, r20
    16fc:	95 07       	cpc	r25, r21
    16fe:	44 f4       	brge	.+16     	; 0x1710 <conv_brk+0x8c>
    1700:	2d 35       	cpi	r18, 0x5D	; 93
    1702:	51 f1       	breq	.+84     	; 0x1758 <conv_brk+0xd4>
    1704:	2d 32       	cpi	r18, 0x2D	; 45
    1706:	21 f4       	brne	.+8      	; 0x1710 <conv_brk+0x8c>
    1708:	33 23       	and	r19, r19
    170a:	29 f4       	brne	.+10     	; 0x1716 <conv_brk+0x92>
    170c:	31 e0       	ldi	r19, 0x01	; 1
    170e:	21 c0       	rjmp	.+66     	; 0x1752 <conv_brk+0xce>
    1710:	33 23       	and	r19, r19
    1712:	09 f4       	brne	.+2      	; 0x1716 <conv_brk+0x92>
    1714:	62 2f       	mov	r22, r18
    1716:	32 2f       	mov	r19, r18
    1718:	83 2f       	mov	r24, r19
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	86 95       	lsr	r24
    1720:	f4 01       	movw	r30, r8
    1722:	e8 0f       	add	r30, r24
    1724:	f1 1d       	adc	r31, r1
    1726:	83 2f       	mov	r24, r19
    1728:	87 70       	andi	r24, 0x07	; 7
    172a:	3d 01       	movw	r6, r26
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <conv_brk+0xae>
    172e:	66 0c       	add	r6, r6
    1730:	77 1c       	adc	r7, r7
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <conv_brk+0xaa>
    1736:	20 81       	ld	r18, Z
    1738:	26 29       	or	r18, r6
    173a:	20 83       	st	Z, r18
    173c:	36 17       	cp	r19, r22
    173e:	11 f4       	brne	.+4      	; 0x1744 <conv_brk+0xc0>
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <conv_brk+0xce>
    1744:	36 17       	cp	r19, r22
    1746:	10 f4       	brcc	.+4      	; 0x174c <conv_brk+0xc8>
    1748:	3f 5f       	subi	r19, 0xFF	; 255
    174a:	e6 cf       	rjmp	.-52     	; 0x1718 <conv_brk+0x94>
    174c:	31 50       	subi	r19, 0x01	; 1
    174e:	e4 cf       	rjmp	.-56     	; 0x1718 <conv_brk+0x94>
    1750:	71 e0       	ldi	r23, 0x01	; 1
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	bf cf       	rjmp	.-130    	; 0x16d6 <conv_brk+0x52>
    1758:	33 23       	and	r19, r19
    175a:	19 f0       	breq	.+6      	; 0x1762 <conv_brk+0xde>
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	80 62       	ori	r24, 0x20	; 32
    1760:	8e 83       	std	Y+6, r24	; 0x06
    1762:	77 23       	and	r23, r23
    1764:	59 f0       	breq	.+22     	; 0x177c <conv_brk+0xf8>
    1766:	fe 01       	movw	r30, r28
    1768:	31 96       	adiw	r30, 0x01	; 1
    176a:	9e 01       	movw	r18, r28
    176c:	2f 5d       	subi	r18, 0xDF	; 223
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	80 95       	com	r24
    1774:	81 93       	st	Z+, r24
    1776:	e2 17       	cp	r30, r18
    1778:	f3 07       	cpc	r31, r19
    177a:	d1 f7       	brne	.-12     	; 0x1770 <conv_brk+0xec>
    177c:	bb 24       	eor	r11, r11
    177e:	b3 94       	inc	r11
    1780:	4e 01       	movw	r8, r28
    1782:	08 94       	sec
    1784:	81 1c       	adc	r8, r1
    1786:	91 1c       	adc	r9, r1
    1788:	c6 01       	movw	r24, r12
    178a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    178e:	ac 01       	movw	r20, r24
    1790:	97 fd       	sbrc	r25, 7
    1792:	22 c0       	rjmp	.+68     	; 0x17d8 <conv_brk+0x154>
    1794:	86 95       	lsr	r24
    1796:	86 95       	lsr	r24
    1798:	86 95       	lsr	r24
    179a:	f4 01       	movw	r30, r8
    179c:	e8 0f       	add	r30, r24
    179e:	f1 1d       	adc	r31, r1
    17a0:	80 81       	ld	r24, Z
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9a 01       	movw	r18, r20
    17a6:	27 70       	andi	r18, 0x07	; 7
    17a8:	30 70       	andi	r19, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <conv_brk+0x12c>
    17ac:	95 95       	asr	r25
    17ae:	87 95       	ror	r24
    17b0:	2a 95       	dec	r18
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <conv_brk+0x128>
    17b4:	80 fd       	sbrc	r24, 0
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <conv_brk+0x13e>
    17b8:	ca 01       	movw	r24, r20
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <ungetc>
    17c0:	0b c0       	rjmp	.+22     	; 0x17d8 <conv_brk+0x154>
    17c2:	01 15       	cp	r16, r1
    17c4:	11 05       	cpc	r17, r1
    17c6:	19 f0       	breq	.+6      	; 0x17ce <conv_brk+0x14a>
    17c8:	d8 01       	movw	r26, r16
    17ca:	4d 93       	st	X+, r20
    17cc:	8d 01       	movw	r16, r26
    17ce:	aa 94       	dec	r10
    17d0:	bb 24       	eor	r11, r11
    17d2:	aa 20       	and	r10, r10
    17d4:	c9 f6       	brne	.-78     	; 0x1788 <conv_brk+0x104>
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <conv_brk+0x158>
    17d8:	bb 20       	and	r11, r11
    17da:	31 f4       	brne	.+12     	; 0x17e8 <conv_brk+0x164>
    17dc:	01 15       	cp	r16, r1
    17de:	11 05       	cpc	r17, r1
    17e0:	29 f0       	breq	.+10     	; 0x17ec <conv_brk+0x168>
    17e2:	f8 01       	movw	r30, r16
    17e4:	10 82       	st	Z, r1
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <conv_brk+0x168>
    17e8:	ee 24       	eor	r14, r14
    17ea:	ff 24       	eor	r15, r15
    17ec:	c7 01       	movw	r24, r14
    17ee:	a0 96       	adiw	r28, 0x20	; 32
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	bf 90       	pop	r11
    180c:	af 90       	pop	r10
    180e:	9f 90       	pop	r9
    1810:	8f 90       	pop	r8
    1812:	7f 90       	pop	r7
    1814:	6f 90       	pop	r6
    1816:	08 95       	ret

00001818 <vfscanf>:
    1818:	6f 92       	push	r6
    181a:	7f 92       	push	r7
    181c:	8f 92       	push	r8
    181e:	9f 92       	push	r9
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	5c 01       	movw	r10, r24
    1836:	6b 01       	movw	r12, r22
    1838:	3a 01       	movw	r6, r20
    183a:	fc 01       	movw	r30, r24
    183c:	17 82       	std	Z+7, r1	; 0x07
    183e:	16 82       	std	Z+6, r1	; 0x06
    1840:	88 24       	eor	r8, r8
    1842:	ea c0       	rjmp	.+468    	; 0x1a18 <vfscanf+0x200>
    1844:	81 2f       	mov	r24, r17
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <isspace>
    184c:	89 2b       	or	r24, r25
    184e:	21 f0       	breq	.+8      	; 0x1858 <vfscanf+0x40>
    1850:	c5 01       	movw	r24, r10
    1852:	0e 94 97 0a 	call	0x152e	; 0x152e <skip_spaces>
    1856:	e0 c0       	rjmp	.+448    	; 0x1a18 <vfscanf+0x200>
    1858:	15 32       	cpi	r17, 0x25	; 37
    185a:	49 f4       	brne	.+18     	; 0x186e <vfscanf+0x56>
    185c:	f6 01       	movw	r30, r12
    185e:	f3 fc       	sbrc	r15, 3
    1860:	65 91       	lpm	r22, Z+
    1862:	f3 fe       	sbrs	r15, 3
    1864:	61 91       	ld	r22, Z+
    1866:	6f 01       	movw	r12, r30
    1868:	65 32       	cpi	r22, 0x25	; 37
    186a:	69 f4       	brne	.+26     	; 0x1886 <vfscanf+0x6e>
    186c:	15 e2       	ldi	r17, 0x25	; 37
    186e:	c5 01       	movw	r24, r10
    1870:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    1874:	97 fd       	sbrc	r25, 7
    1876:	dc c0       	rjmp	.+440    	; 0x1a30 <vfscanf+0x218>
    1878:	18 17       	cp	r17, r24
    187a:	09 f4       	brne	.+2      	; 0x187e <vfscanf+0x66>
    187c:	cd c0       	rjmp	.+410    	; 0x1a18 <vfscanf+0x200>
    187e:	b5 01       	movw	r22, r10
    1880:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <ungetc>
    1884:	da c0       	rjmp	.+436    	; 0x1a3a <vfscanf+0x222>
    1886:	6a 32       	cpi	r22, 0x2A	; 42
    1888:	19 f0       	breq	.+6      	; 0x1890 <vfscanf+0x78>
    188a:	16 2f       	mov	r17, r22
    188c:	00 e0       	ldi	r16, 0x00	; 0
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfscanf+0x84>
    1890:	f3 fc       	sbrc	r15, 3
    1892:	15 91       	lpm	r17, Z+
    1894:	f3 fe       	sbrs	r15, 3
    1896:	11 91       	ld	r17, Z+
    1898:	6f 01       	movw	r12, r30
    189a:	01 e0       	ldi	r16, 0x01	; 1
    189c:	99 24       	eor	r9, r9
    189e:	0f c0       	rjmp	.+30     	; 0x18be <vfscanf+0xa6>
    18a0:	02 60       	ori	r16, 0x02	; 2
    18a2:	69 2d       	mov	r22, r9
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <mulacc>
    18b0:	96 2e       	mov	r9, r22
    18b2:	f6 01       	movw	r30, r12
    18b4:	f3 fc       	sbrc	r15, 3
    18b6:	15 91       	lpm	r17, Z+
    18b8:	f3 fe       	sbrs	r15, 3
    18ba:	11 91       	ld	r17, Z+
    18bc:	6f 01       	movw	r12, r30
    18be:	21 2f       	mov	r18, r17
    18c0:	20 53       	subi	r18, 0x30	; 48
    18c2:	2a 30       	cpi	r18, 0x0A	; 10
    18c4:	68 f3       	brcs	.-38     	; 0x18a0 <vfscanf+0x88>
    18c6:	01 fd       	sbrc	r16, 1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <vfscanf+0xb8>
    18ca:	99 24       	eor	r9, r9
    18cc:	9a 94       	dec	r9
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <vfscanf+0xbe>
    18d0:	99 20       	and	r9, r9
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <vfscanf+0xbe>
    18d4:	b2 c0       	rjmp	.+356    	; 0x1a3a <vfscanf+0x222>
    18d6:	18 36       	cpi	r17, 0x68	; 104
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <vfscanf+0xca>
    18da:	1c 36       	cpi	r17, 0x6C	; 108
    18dc:	99 f4       	brne	.+38     	; 0x1904 <vfscanf+0xec>
    18de:	f6 01       	movw	r30, r12
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <vfscanf+0xe0>
    18e2:	f6 01       	movw	r30, r12
    18e4:	f3 fc       	sbrc	r15, 3
    18e6:	65 91       	lpm	r22, Z+
    18e8:	f3 fe       	sbrs	r15, 3
    18ea:	61 91       	ld	r22, Z+
    18ec:	68 36       	cpi	r22, 0x68	; 104
    18ee:	19 f0       	breq	.+6      	; 0x18f6 <vfscanf+0xde>
    18f0:	6f 01       	movw	r12, r30
    18f2:	16 2f       	mov	r17, r22
    18f4:	07 c0       	rjmp	.+14     	; 0x1904 <vfscanf+0xec>
    18f6:	08 60       	ori	r16, 0x08	; 8
    18f8:	04 60       	ori	r16, 0x04	; 4
    18fa:	f3 fc       	sbrc	r15, 3
    18fc:	15 91       	lpm	r17, Z+
    18fe:	f3 fe       	sbrs	r15, 3
    1900:	11 91       	ld	r17, Z+
    1902:	6f 01       	movw	r12, r30
    1904:	11 23       	and	r17, r17
    1906:	09 f4       	brne	.+2      	; 0x190a <vfscanf+0xf2>
    1908:	98 c0       	rjmp	.+304    	; 0x1a3a <vfscanf+0x222>
    190a:	8c ec       	ldi	r24, 0xCC	; 204
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	61 2f       	mov	r22, r17
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <strchr_P>
    1916:	89 2b       	or	r24, r25
    1918:	09 f4       	brne	.+2      	; 0x191c <vfscanf+0x104>
    191a:	8f c0       	rjmp	.+286    	; 0x1a3a <vfscanf+0x222>
    191c:	80 2f       	mov	r24, r16
    191e:	00 ff       	sbrs	r16, 0
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <vfscanf+0x110>
    1922:	ee 24       	eor	r14, r14
    1924:	ff 24       	eor	r15, r15
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <vfscanf+0x11e>
    1928:	f3 01       	movw	r30, r6
    192a:	e0 80       	ld	r14, Z
    192c:	f1 80       	ldd	r15, Z+1	; 0x01
    192e:	22 e0       	ldi	r18, 0x02	; 2
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	62 0e       	add	r6, r18
    1934:	73 1e       	adc	r7, r19
    1936:	1e 36       	cpi	r17, 0x6E	; 110
    1938:	51 f4       	brne	.+20     	; 0x194e <vfscanf+0x136>
    193a:	f5 01       	movw	r30, r10
    193c:	46 81       	ldd	r20, Z+6	; 0x06
    193e:	57 81       	ldd	r21, Z+7	; 0x07
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	c7 01       	movw	r24, r14
    1946:	20 2f       	mov	r18, r16
    1948:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <putval>
    194c:	65 c0       	rjmp	.+202    	; 0x1a18 <vfscanf+0x200>
    194e:	13 36       	cpi	r17, 0x63	; 99
    1950:	91 f4       	brne	.+36     	; 0x1976 <vfscanf+0x15e>
    1952:	81 fd       	sbrc	r24, 1
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfscanf+0x142>
    1956:	99 24       	eor	r9, r9
    1958:	93 94       	inc	r9
    195a:	c5 01       	movw	r24, r10
    195c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    1960:	97 fd       	sbrc	r25, 7
    1962:	66 c0       	rjmp	.+204    	; 0x1a30 <vfscanf+0x218>
    1964:	e1 14       	cp	r14, r1
    1966:	f1 04       	cpc	r15, r1
    1968:	19 f0       	breq	.+6      	; 0x1970 <vfscanf+0x158>
    196a:	f7 01       	movw	r30, r14
    196c:	81 93       	st	Z+, r24
    196e:	7f 01       	movw	r14, r30
    1970:	9a 94       	dec	r9
    1972:	99 f7       	brne	.-26     	; 0x195a <vfscanf+0x142>
    1974:	4f c0       	rjmp	.+158    	; 0x1a14 <vfscanf+0x1fc>
    1976:	1b 35       	cpi	r17, 0x5B	; 91
    1978:	59 f4       	brne	.+22     	; 0x1990 <vfscanf+0x178>
    197a:	c5 01       	movw	r24, r10
    197c:	69 2d       	mov	r22, r9
    197e:	a7 01       	movw	r20, r14
    1980:	96 01       	movw	r18, r12
    1982:	0e 94 42 0b 	call	0x1684	; 0x1684 <conv_brk>
    1986:	6c 01       	movw	r12, r24
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	09 f0       	breq	.+2      	; 0x198e <vfscanf+0x176>
    198c:	43 c0       	rjmp	.+134    	; 0x1a14 <vfscanf+0x1fc>
    198e:	3d c0       	rjmp	.+122    	; 0x1a0a <vfscanf+0x1f2>
    1990:	c5 01       	movw	r24, r10
    1992:	0e 94 97 0a 	call	0x152e	; 0x152e <skip_spaces>
    1996:	97 fd       	sbrc	r25, 7
    1998:	4b c0       	rjmp	.+150    	; 0x1a30 <vfscanf+0x218>
    199a:	1f 36       	cpi	r17, 0x6F	; 111
    199c:	59 f1       	breq	.+86     	; 0x19f4 <vfscanf+0x1dc>
    199e:	10 37       	cpi	r17, 0x70	; 112
    19a0:	28 f4       	brcc	.+10     	; 0x19ac <vfscanf+0x194>
    19a2:	14 36       	cpi	r17, 0x64	; 100
    19a4:	29 f1       	breq	.+74     	; 0x19f0 <vfscanf+0x1d8>
    19a6:	19 36       	cpi	r17, 0x69	; 105
    19a8:	39 f5       	brne	.+78     	; 0x19f8 <vfscanf+0x1e0>
    19aa:	27 c0       	rjmp	.+78     	; 0x19fa <vfscanf+0x1e2>
    19ac:	13 37       	cpi	r17, 0x73	; 115
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <vfscanf+0x19e>
    19b0:	15 37       	cpi	r17, 0x75	; 117
    19b2:	11 f5       	brne	.+68     	; 0x19f8 <vfscanf+0x1e0>
    19b4:	1d c0       	rjmp	.+58     	; 0x19f0 <vfscanf+0x1d8>
    19b6:	c5 01       	movw	r24, r10
    19b8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <fgetc>
    19bc:	ec 01       	movw	r28, r24
    19be:	97 fd       	sbrc	r25, 7
    19c0:	11 c0       	rjmp	.+34     	; 0x19e4 <vfscanf+0x1cc>
    19c2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <isspace>
    19c6:	89 2b       	or	r24, r25
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <vfscanf+0x1bc>
    19ca:	ce 01       	movw	r24, r28
    19cc:	b5 01       	movw	r22, r10
    19ce:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <ungetc>
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <vfscanf+0x1cc>
    19d4:	e1 14       	cp	r14, r1
    19d6:	f1 04       	cpc	r15, r1
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <vfscanf+0x1c8>
    19da:	f7 01       	movw	r30, r14
    19dc:	c1 93       	st	Z+, r28
    19de:	7f 01       	movw	r14, r30
    19e0:	9a 94       	dec	r9
    19e2:	49 f7       	brne	.-46     	; 0x19b6 <vfscanf+0x19e>
    19e4:	e1 14       	cp	r14, r1
    19e6:	f1 04       	cpc	r15, r1
    19e8:	a9 f0       	breq	.+42     	; 0x1a14 <vfscanf+0x1fc>
    19ea:	f7 01       	movw	r30, r14
    19ec:	10 82       	st	Z, r1
    19ee:	12 c0       	rjmp	.+36     	; 0x1a14 <vfscanf+0x1fc>
    19f0:	00 62       	ori	r16, 0x20	; 32
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <vfscanf+0x1e2>
    19f4:	00 61       	ori	r16, 0x10	; 16
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <vfscanf+0x1e2>
    19f8:	00 64       	ori	r16, 0x40	; 64
    19fa:	c5 01       	movw	r24, r10
    19fc:	69 2d       	mov	r22, r9
    19fe:	a7 01       	movw	r20, r14
    1a00:	20 2f       	mov	r18, r16
    1a02:	0e 94 b0 0a 	call	0x1560	; 0x1560 <conv_int>
    1a06:	88 23       	and	r24, r24
    1a08:	29 f4       	brne	.+10     	; 0x1a14 <vfscanf+0x1fc>
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	83 81       	ldd	r24, Z+3	; 0x03
    1a0e:	80 73       	andi	r24, 0x30	; 48
    1a10:	79 f4       	brne	.+30     	; 0x1a30 <vfscanf+0x218>
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <vfscanf+0x222>
    1a14:	00 ff       	sbrs	r16, 0
    1a16:	83 94       	inc	r8
    1a18:	f5 01       	movw	r30, r10
    1a1a:	f3 80       	ldd	r15, Z+3	; 0x03
    1a1c:	f6 01       	movw	r30, r12
    1a1e:	f3 fc       	sbrc	r15, 3
    1a20:	15 91       	lpm	r17, Z+
    1a22:	f3 fe       	sbrs	r15, 3
    1a24:	11 91       	ld	r17, Z+
    1a26:	6f 01       	movw	r12, r30
    1a28:	11 23       	and	r17, r17
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <vfscanf+0x216>
    1a2c:	0b cf       	rjmp	.-490    	; 0x1844 <vfscanf+0x2c>
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <vfscanf+0x222>
    1a30:	88 20       	and	r8, r8
    1a32:	19 f4       	brne	.+6      	; 0x1a3a <vfscanf+0x222>
    1a34:	2f ef       	ldi	r18, 0xFF	; 255
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <vfscanf+0x226>
    1a3a:	28 2d       	mov	r18, r8
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	c9 01       	movw	r24, r18
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	6f 90       	pop	r6
    1a5c:	08 95       	ret

00001a5e <isspace>:
    1a5e:	91 11       	cpse	r25, r1
    1a60:	e1 c0       	rjmp	.+450    	; 0x1c24 <__ctype_isfalse>
    1a62:	80 32       	cpi	r24, 0x20	; 32
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <isspace+0xe>
    1a66:	89 50       	subi	r24, 0x09	; 9
    1a68:	85 50       	subi	r24, 0x05	; 5
    1a6a:	d0 f7       	brcc	.-12     	; 0x1a60 <isspace+0x2>
    1a6c:	08 95       	ret

00001a6e <strchr_P>:
    1a6e:	fc 01       	movw	r30, r24
    1a70:	05 90       	lpm	r0, Z+
    1a72:	06 16       	cp	r0, r22
    1a74:	21 f0       	breq	.+8      	; 0x1a7e <strchr_P+0x10>
    1a76:	00 20       	and	r0, r0
    1a78:	d9 f7       	brne	.-10     	; 0x1a70 <strchr_P+0x2>
    1a7a:	c0 01       	movw	r24, r0
    1a7c:	08 95       	ret
    1a7e:	31 97       	sbiw	r30, 0x01	; 1
    1a80:	cf 01       	movw	r24, r30
    1a82:	08 95       	ret

00001a84 <strnlen_P>:
    1a84:	fc 01       	movw	r30, r24
    1a86:	05 90       	lpm	r0, Z+
    1a88:	61 50       	subi	r22, 0x01	; 1
    1a8a:	70 40       	sbci	r23, 0x00	; 0
    1a8c:	01 10       	cpse	r0, r1
    1a8e:	d8 f7       	brcc	.-10     	; 0x1a86 <strnlen_P+0x2>
    1a90:	80 95       	com	r24
    1a92:	90 95       	com	r25
    1a94:	8e 0f       	add	r24, r30
    1a96:	9f 1f       	adc	r25, r31
    1a98:	08 95       	ret

00001a9a <strnlen>:
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	61 50       	subi	r22, 0x01	; 1
    1a9e:	70 40       	sbci	r23, 0x00	; 0
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	01 10       	cpse	r0, r1
    1aa4:	d8 f7       	brcc	.-10     	; 0x1a9c <strnlen+0x2>
    1aa6:	80 95       	com	r24
    1aa8:	90 95       	com	r25
    1aaa:	8e 0f       	add	r24, r30
    1aac:	9f 1f       	adc	r25, r31
    1aae:	08 95       	ret

00001ab0 <fgetc>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	ec 01       	movw	r28, r24
    1ab6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ab8:	40 ff       	sbrs	r20, 0
    1aba:	1a c0       	rjmp	.+52     	; 0x1af0 <fgetc+0x40>
    1abc:	46 ff       	sbrs	r20, 6
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <fgetc+0x24>
    1ac0:	4f 7b       	andi	r20, 0xBF	; 191
    1ac2:	4b 83       	std	Y+3, r20	; 0x03
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	9f 83       	std	Y+7, r25	; 0x07
    1acc:	8e 83       	std	Y+6, r24	; 0x06
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	2b c0       	rjmp	.+86     	; 0x1b2a <fgetc+0x7a>
    1ad4:	42 ff       	sbrs	r20, 2
    1ad6:	13 c0       	rjmp	.+38     	; 0x1afe <fgetc+0x4e>
    1ad8:	e8 81       	ld	r30, Y
    1ada:	f9 81       	ldd	r31, Y+1	; 0x01
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	33 27       	eor	r19, r19
    1ae2:	27 fd       	sbrc	r18, 7
    1ae4:	30 95       	com	r19
    1ae6:	21 15       	cp	r18, r1
    1ae8:	31 05       	cpc	r19, r1
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <fgetc+0x46>
    1aec:	40 62       	ori	r20, 0x20	; 32
    1aee:	4b 83       	std	Y+3, r20	; 0x03
    1af0:	2f ef       	ldi	r18, 0xFF	; 255
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	1b c0       	rjmp	.+54     	; 0x1b2c <fgetc+0x7c>
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	f9 83       	std	Y+1, r31	; 0x01
    1afa:	e8 83       	st	Y, r30
    1afc:	11 c0       	rjmp	.+34     	; 0x1b20 <fgetc+0x70>
    1afe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b00:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b02:	ce 01       	movw	r24, r28
    1b04:	09 95       	icall
    1b06:	9c 01       	movw	r18, r24
    1b08:	97 ff       	sbrs	r25, 7
    1b0a:	0a c0       	rjmp	.+20     	; 0x1b20 <fgetc+0x70>
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	2f 5f       	subi	r18, 0xFF	; 255
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <fgetc+0x68>
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <fgetc+0x6a>
    1b18:	80 e1       	ldi	r24, 0x10	; 16
    1b1a:	89 2b       	or	r24, r25
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	e8 cf       	rjmp	.-48     	; 0x1af0 <fgetc+0x40>
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	9f 81       	ldd	r25, Y+7	; 0x07
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	9f 83       	std	Y+7, r25	; 0x07
    1b28:	8e 83       	std	Y+6, r24	; 0x06
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	c9 01       	movw	r24, r18
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <ungetc>:
    1b34:	9c 01       	movw	r18, r24
    1b36:	fb 01       	movw	r30, r22
    1b38:	83 81       	ldd	r24, Z+3	; 0x03
    1b3a:	80 ff       	sbrs	r24, 0
    1b3c:	11 c0       	rjmp	.+34     	; 0x1b60 <ungetc+0x2c>
    1b3e:	86 fd       	sbrc	r24, 6
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <ungetc+0x2c>
    1b42:	9f ef       	ldi	r25, 0xFF	; 255
    1b44:	2f 3f       	cpi	r18, 0xFF	; 255
    1b46:	39 07       	cpc	r19, r25
    1b48:	59 f0       	breq	.+22     	; 0x1b60 <ungetc+0x2c>
    1b4a:	22 83       	std	Z+2, r18	; 0x02
    1b4c:	80 64       	ori	r24, 0x40	; 64
    1b4e:	8f 7d       	andi	r24, 0xDF	; 223
    1b50:	83 83       	std	Z+3, r24	; 0x03
    1b52:	86 81       	ldd	r24, Z+6	; 0x06
    1b54:	97 81       	ldd	r25, Z+7	; 0x07
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	97 83       	std	Z+7, r25	; 0x07
    1b5a:	86 83       	std	Z+6, r24	; 0x06
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <ungetc+0x30>
    1b60:	2f ef       	ldi	r18, 0xFF	; 255
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	c9 01       	movw	r24, r18
    1b66:	08 95       	ret

00001b68 <__ultoa_invert>:
    1b68:	fa 01       	movw	r30, r20
    1b6a:	aa 27       	eor	r26, r26
    1b6c:	28 30       	cpi	r18, 0x08	; 8
    1b6e:	51 f1       	breq	.+84     	; 0x1bc4 <__ultoa_invert+0x5c>
    1b70:	20 31       	cpi	r18, 0x10	; 16
    1b72:	81 f1       	breq	.+96     	; 0x1bd4 <__ultoa_invert+0x6c>
    1b74:	e8 94       	clt
    1b76:	6f 93       	push	r22
    1b78:	6e 7f       	andi	r22, 0xFE	; 254
    1b7a:	6e 5f       	subi	r22, 0xFE	; 254
    1b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	af 4f       	sbci	r26, 0xFF	; 255
    1b84:	b1 e0       	ldi	r27, 0x01	; 1
    1b86:	3e d0       	rcall	.+124    	; 0x1c04 <__ultoa_invert+0x9c>
    1b88:	b4 e0       	ldi	r27, 0x04	; 4
    1b8a:	3c d0       	rcall	.+120    	; 0x1c04 <__ultoa_invert+0x9c>
    1b8c:	67 0f       	add	r22, r23
    1b8e:	78 1f       	adc	r23, r24
    1b90:	89 1f       	adc	r24, r25
    1b92:	9a 1f       	adc	r25, r26
    1b94:	a1 1d       	adc	r26, r1
    1b96:	68 0f       	add	r22, r24
    1b98:	79 1f       	adc	r23, r25
    1b9a:	8a 1f       	adc	r24, r26
    1b9c:	91 1d       	adc	r25, r1
    1b9e:	a1 1d       	adc	r26, r1
    1ba0:	6a 0f       	add	r22, r26
    1ba2:	71 1d       	adc	r23, r1
    1ba4:	81 1d       	adc	r24, r1
    1ba6:	91 1d       	adc	r25, r1
    1ba8:	a1 1d       	adc	r26, r1
    1baa:	20 d0       	rcall	.+64     	; 0x1bec <__ultoa_invert+0x84>
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <__ultoa_invert+0x48>
    1bae:	68 94       	set
    1bb0:	3f 91       	pop	r19
    1bb2:	2a e0       	ldi	r18, 0x0A	; 10
    1bb4:	26 9f       	mul	r18, r22
    1bb6:	11 24       	eor	r1, r1
    1bb8:	30 19       	sub	r19, r0
    1bba:	30 5d       	subi	r19, 0xD0	; 208
    1bbc:	31 93       	st	Z+, r19
    1bbe:	de f6       	brtc	.-74     	; 0x1b76 <__ultoa_invert+0xe>
    1bc0:	cf 01       	movw	r24, r30
    1bc2:	08 95       	ret
    1bc4:	46 2f       	mov	r20, r22
    1bc6:	47 70       	andi	r20, 0x07	; 7
    1bc8:	40 5d       	subi	r20, 0xD0	; 208
    1bca:	41 93       	st	Z+, r20
    1bcc:	b3 e0       	ldi	r27, 0x03	; 3
    1bce:	0f d0       	rcall	.+30     	; 0x1bee <__ultoa_invert+0x86>
    1bd0:	c9 f7       	brne	.-14     	; 0x1bc4 <__ultoa_invert+0x5c>
    1bd2:	f6 cf       	rjmp	.-20     	; 0x1bc0 <__ultoa_invert+0x58>
    1bd4:	46 2f       	mov	r20, r22
    1bd6:	4f 70       	andi	r20, 0x0F	; 15
    1bd8:	40 5d       	subi	r20, 0xD0	; 208
    1bda:	4a 33       	cpi	r20, 0x3A	; 58
    1bdc:	18 f0       	brcs	.+6      	; 0x1be4 <__ultoa_invert+0x7c>
    1bde:	49 5d       	subi	r20, 0xD9	; 217
    1be0:	31 fd       	sbrc	r19, 1
    1be2:	40 52       	subi	r20, 0x20	; 32
    1be4:	41 93       	st	Z+, r20
    1be6:	02 d0       	rcall	.+4      	; 0x1bec <__ultoa_invert+0x84>
    1be8:	a9 f7       	brne	.-22     	; 0x1bd4 <__ultoa_invert+0x6c>
    1bea:	ea cf       	rjmp	.-44     	; 0x1bc0 <__ultoa_invert+0x58>
    1bec:	b4 e0       	ldi	r27, 0x04	; 4
    1bee:	a6 95       	lsr	r26
    1bf0:	97 95       	ror	r25
    1bf2:	87 95       	ror	r24
    1bf4:	77 95       	ror	r23
    1bf6:	67 95       	ror	r22
    1bf8:	ba 95       	dec	r27
    1bfa:	c9 f7       	brne	.-14     	; 0x1bee <__ultoa_invert+0x86>
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	61 05       	cpc	r22, r1
    1c00:	71 05       	cpc	r23, r1
    1c02:	08 95       	ret
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	0a 2e       	mov	r0, r26
    1c0a:	06 94       	lsr	r0
    1c0c:	57 95       	ror	r21
    1c0e:	47 95       	ror	r20
    1c10:	37 95       	ror	r19
    1c12:	27 95       	ror	r18
    1c14:	ba 95       	dec	r27
    1c16:	c9 f7       	brne	.-14     	; 0x1c0a <__ultoa_invert+0xa2>
    1c18:	62 0f       	add	r22, r18
    1c1a:	73 1f       	adc	r23, r19
    1c1c:	84 1f       	adc	r24, r20
    1c1e:	95 1f       	adc	r25, r21
    1c20:	a0 1d       	adc	r26, r0
    1c22:	08 95       	ret

00001c24 <__ctype_isfalse>:
    1c24:	99 27       	eor	r25, r25
    1c26:	88 27       	eor	r24, r24

00001c28 <__ctype_istrue>:
    1c28:	08 95       	ret

00001c2a <_exit>:
    1c2a:	f8 94       	cli

00001c2c <__stop_program>:
    1c2c:	ff cf       	rjmp	.-2      	; 0x1c2c <__stop_program>
