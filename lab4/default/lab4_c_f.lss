
lab4_c_f.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  0000254a  000025de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000254a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ac  008001aa  008001aa  00002688  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000478  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001483  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e0  00000000  00000000  00003fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000114b  00000000  00000000  000044a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  000055f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000597  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4a  00000000  00000000  00005e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__ctors_end>
       4:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_1>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_11>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_20>
      54:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_21>
      58:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      5c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      64:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      68:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      6c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      70:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      74:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      78:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      7c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      80:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      84:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      88:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

000000d3 <LCD_dur_syllable>:
      d3:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

000000e4 <LCD_rpt_interval>:
      e4:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

000000f4 <LCD_playing>:
      f4:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000103 <LCD_cap_clear>:
     103:	20 00 00                                             ..

00000106 <LcdCustomChar>:
     106:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     116:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     126:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     136:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000146 <__c.1988>:
     146:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e4       	ldi	r29, 0x40	; 64
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	ea e4       	ldi	r30, 0x4A	; 74
     166:	f5 e2       	ldi	r31, 0x25	; 37
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 3a       	cpi	r26, 0xAA	; 170
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	13 e0       	ldi	r17, 0x03	; 3
     17a:	aa ea       	ldi	r26, 0xAA	; 170
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a6 35       	cpi	r26, 0x56	; 86
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 a0 06 	call	0xd40	; 0xd40 <main>
     18c:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	0b b6       	in	r0, 0x3b	; 59
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	2f 92       	push	r2
     1a4:	3f 92       	push	r3
     1a6:	4f 92       	push	r4
     1a8:	5f 92       	push	r5
     1aa:	6f 92       	push	r6
     1ac:	7f 92       	push	r7
     1ae:	8f 92       	push	r8
     1b0:	9f 92       	push	r9
     1b2:	af 92       	push	r10
     1b4:	bf 92       	push	r11
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	2f 93       	push	r18
     1c4:	3f 93       	push	r19
     1c6:	4f 93       	push	r20
     1c8:	5f 93       	push	r21
     1ca:	6f 93       	push	r22
     1cc:	7f 93       	push	r23
     1ce:	8f 93       	push	r24
     1d0:	9f 93       	push	r25
     1d2:	af 93       	push	r26
     1d4:	bf 93       	push	r27
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     1de:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     1e2:	50 90 06 03 	lds	r5, 0x0306
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     1e6:	b0 9b       	sbis	0x16, 0	; 22
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <__vector_13+0x7e>
    ++kernel.cycles;
     1ea:	80 91 47 03 	lds	r24, 0x0347
     1ee:	90 91 48 03 	lds	r25, 0x0348
     1f2:	a0 91 49 03 	lds	r26, 0x0349
     1f6:	b0 91 4a 03 	lds	r27, 0x034A
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	a1 1d       	adc	r26, r1
     1fe:	b1 1d       	adc	r27, r1
     200:	80 93 47 03 	sts	0x0347, r24
     204:	90 93 48 03 	sts	0x0348, r25
     208:	a0 93 49 03 	sts	0x0349, r26
     20c:	b0 93 4a 03 	sts	0x034A, r27
    TIFR1 |= (1<<TOV1) ;
     210:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     212:	80 91 84 00 	lds	r24, 0x0084
     216:	90 91 85 00 	lds	r25, 0x0085
     21a:	3c 01       	movw	r6, r24
     21c:	88 24       	eor	r8, r8
     21e:	99 24       	eor	r9, r9
     220:	80 91 47 03 	lds	r24, 0x0347
     224:	90 91 48 03 	lds	r25, 0x0348
     228:	a0 91 49 03 	lds	r26, 0x0349
     22c:	b0 91 4a 03 	lds	r27, 0x034A
     230:	dc 01       	movw	r26, r24
     232:	99 27       	eor	r25, r25
     234:	88 27       	eor	r24, r24
     236:	68 0e       	add	r6, r24
     238:	79 1e       	adc	r7, r25
     23a:	8a 1e       	adc	r8, r26
     23c:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     23e:	40 90 05 03 	lds	r4, 0x0305
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	ff ef       	ldi	r31, 0xFF	; 255
     248:	af 2e       	mov	r10, r31
     24a:	ff ef       	ldi	r31, 0xFF	; 255
     24c:	bf 2e       	mov	r11, r31
     24e:	ff ef       	ldi	r31, 0xFF	; 255
     250:	cf 2e       	mov	r12, r31
     252:	ff e7       	ldi	r31, 0x7F	; 127
     254:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     256:	eb e0       	ldi	r30, 0x0B	; 11
     258:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     25a:	33 24       	eor	r3, r3
     25c:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     25e:	cb e0       	ldi	r28, 0x0B	; 11
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	43 c0       	rjmp	.+134    	; 0x2ea <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     264:	62 9d       	mul	r22, r2
     266:	d0 01       	movw	r26, r0
     268:	11 24       	eor	r1, r1
     26a:	a9 5f       	subi	r26, 0xF9	; 249
     26c:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == TIMEQ) {
     26e:	1a 96       	adiw	r26, 0x0a	; 10
     270:	8c 91       	ld	r24, X
     272:	1a 97       	sbiw	r26, 0x0a	; 10
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	a1 f4       	brne	.+40     	; 0x2a0 <__vector_13+0x10c>
      if (t->release <= now) {
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	ed 90       	ld	r14, X+
     27c:	fd 90       	ld	r15, X+
     27e:	0d 91       	ld	r16, X+
     280:	1c 91       	ld	r17, X
     282:	15 97       	sbiw	r26, 0x05	; 5
     284:	6e 14       	cp	r6, r14
     286:	7f 04       	cpc	r7, r15
     288:	80 06       	cpc	r8, r16
     28a:	91 06       	cpc	r9, r17
     28c:	20 f0       	brcs	.+8      	; 0x296 <__vector_13+0x102>
	t->state = READYQ;
     28e:	1a 96       	adiw	r26, 0x0a	; 10
     290:	3c 92       	st	X, r3
     292:	1a 97       	sbiw	r26, 0x0a	; 10
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     296:	ea 14       	cp	r14, r10
     298:	fb 04       	cpc	r15, r11
     29a:	0c 05       	cpc	r16, r12
     29c:	1d 05       	cpc	r17, r13
     29e:	10 f0       	brcs	.+4      	; 0x2a4 <__vector_13+0x110>
     2a0:	86 01       	movw	r16, r12
     2a2:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     2a4:	1a 96       	adiw	r26, 0x0a	; 10
     2a6:	8c 91       	ld	r24, X
     2a8:	1a 97       	sbiw	r26, 0x0a	; 10
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	d9 f4       	brne	.+54     	; 0x2e4 <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     2ae:	87 2f       	mov	r24, r23
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	8c 9f       	mul	r24, r28
     2b4:	f0 01       	movw	r30, r0
     2b6:	8d 9f       	mul	r24, r29
     2b8:	f0 0d       	add	r31, r0
     2ba:	9c 9f       	mul	r25, r28
     2bc:	f0 0d       	add	r31, r0
     2be:	11 24       	eor	r1, r1
     2c0:	eb 5f       	subi	r30, 0xFB	; 251
     2c2:	fc 4f       	sbci	r31, 0xFC	; 252
     2c4:	16 96       	adiw	r26, 0x06	; 6
     2c6:	2d 91       	ld	r18, X+
     2c8:	3d 91       	ld	r19, X+
     2ca:	4d 91       	ld	r20, X+
     2cc:	5c 91       	ld	r21, X
     2ce:	19 97       	sbiw	r26, 0x09	; 9
     2d0:	80 85       	ldd	r24, Z+8	; 0x08
     2d2:	91 85       	ldd	r25, Z+9	; 0x09
     2d4:	a2 85       	ldd	r26, Z+10	; 0x0a
     2d6:	b3 85       	ldd	r27, Z+11	; 0x0b
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	4a 07       	cpc	r20, r26
     2de:	5b 07       	cpc	r21, r27
     2e0:	08 f4       	brcc	.+2      	; 0x2e4 <__vector_13+0x150>
     2e2:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	6f 5f       	subi	r22, 0xFF	; 255
     2e6:	57 01       	movw	r10, r14
     2e8:	68 01       	movw	r12, r16
     2ea:	46 16       	cp	r4, r22
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__vector_13+0x15c>
     2ee:	ba cf       	rjmp	.-140    	; 0x264 <__vector_13+0xd0>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     2f0:	75 15       	cp	r23, r5
     2f2:	b1 f0       	breq	.+44     	; 0x320 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     2f4:	eb e0       	ldi	r30, 0x0B	; 11
     2f6:	5e 9e       	mul	r5, r30
     2f8:	d0 01       	movw	r26, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	a9 5f       	subi	r26, 0xF9	; 249
     2fe:	bc 4f       	sbci	r27, 0xFC	; 252
    t->spl = SPL;
     300:	8d b7       	in	r24, 0x3d	; 61
     302:	8c 93       	st	X, r24
    t->sph = SPH;
     304:	8e b7       	in	r24, 0x3e	; 62
     306:	11 96       	adiw	r26, 0x01	; 1
     308:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     30a:	7e 9f       	mul	r23, r30
     30c:	f0 01       	movw	r30, r0
     30e:	11 24       	eor	r1, r1
     310:	e9 5f       	subi	r30, 0xF9	; 249
     312:	fc 4f       	sbci	r31, 0xFC	; 252
    SPH = t->sph;
     314:	81 81       	ldd	r24, Z+1	; 0x01
     316:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     318:	80 81       	ld	r24, Z
     31a:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     31c:	70 93 06 03 	sts	0x0306, r23

  }

  kernel.nextHit = nextHit;  
     320:	a0 92 4b 03 	sts	0x034B, r10
     324:	b0 92 4c 03 	sts	0x034C, r11
     328:	c0 92 4d 03 	sts	0x034D, r12
     32c:	d0 92 4e 03 	sts	0x034E, r13

  now = (kernel.cycles << 16) + TCNT1;
     330:	20 91 84 00 	lds	r18, 0x0084
     334:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	80 91 47 03 	lds	r24, 0x0347
     340:	90 91 48 03 	lds	r25, 0x0348
     344:	a0 91 49 03 	lds	r26, 0x0349
     348:	b0 91 4a 03 	lds	r27, 0x034A
     34c:	dc 01       	movw	r26, r24
     34e:	99 27       	eor	r25, r25
     350:	88 27       	eor	r24, r24
     352:	28 0f       	add	r18, r24
     354:	39 1f       	adc	r19, r25
     356:	4a 1f       	adc	r20, r26
     358:	5b 1f       	adc	r21, r27
     35a:	d6 01       	movw	r26, r12
     35c:	c5 01       	movw	r24, r10
     35e:	82 1b       	sub	r24, r18
     360:	93 0b       	sbc	r25, r19
     362:	a4 0b       	sbc	r26, r20
     364:	b5 0b       	sbc	r27, r21
     366:	9c 01       	movw	r18, r24
     368:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     36a:	84 30       	cpi	r24, 0x04	; 4
     36c:	91 05       	cpc	r25, r1
     36e:	a1 05       	cpc	r26, r1
     370:	b1 05       	cpc	r27, r1
     372:	24 f4       	brge	.+8      	; 0x37c <__vector_13+0x1e8>
     374:	24 e0       	ldi	r18, 0x04	; 4
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     37c:	80 91 84 00 	lds	r24, 0x0084
     380:	90 91 85 00 	lds	r25, 0x0085
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	a4 1f       	adc	r26, r20
     38e:	b5 1f       	adc	r27, r21
     390:	80 50       	subi	r24, 0x00	; 0
     392:	90 40       	sbci	r25, 0x00	; 0
     394:	a1 40       	sbci	r26, 0x01	; 1
     396:	b0 40       	sbci	r27, 0x00	; 0
     398:	38 f4       	brcc	.+14     	; 0x3a8 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     39a:	80 91 84 00 	lds	r24, 0x0084
     39e:	90 91 85 00 	lds	r25, 0x0085
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     3a8:	80 91 84 00 	lds	r24, 0x0084
     3ac:	90 91 85 00 	lds	r25, 0x0085
     3b0:	8c 5f       	subi	r24, 0xFC	; 252
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <__vector_13+0x22c>
    OCR1A = 0x0000;
     3b6:	10 92 89 00 	sts	0x0089, r1
     3ba:	10 92 88 00 	sts	0x0088, r1
     3be:	06 c0       	rjmp	.+12     	; 0x3cc <__vector_13+0x238>
  } else {
    OCR1A = 4;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 89 00 	sts	0x0089, r25
     3c8:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 93 6f 00 	sts	0x006F, r24
}
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	2f 90       	pop	r2
     40e:	0f 90       	pop	r0
     410:	0b be       	out	0x3b, r0	; 59
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     41c:	10 92 85 00 	sts	0x0085, r1
     420:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     424:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     428:	25 e0       	ldi	r18, 0x05	; 5
     42a:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     42e:	22 e0       	ldi	r18, 0x02	; 2
     430:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	30 e4       	ldi	r19, 0x40	; 64
     438:	28 1b       	sub	r18, r24
     43a:	39 0b       	sbc	r19, r25
     43c:	30 93 46 03 	sts	0x0346, r19
     440:	20 93 45 03 	sts	0x0345, r18
  kernel.nbrOfTasks = 0;
     444:	10 92 05 03 	sts	0x0305, r1
  kernel.running = 0;
     448:	10 92 06 03 	sts	0x0306, r1

  kernel.cycles = 0x0000;
     44c:	10 92 47 03 	sts	0x0347, r1
     450:	10 92 48 03 	sts	0x0348, r1
     454:	10 92 49 03 	sts	0x0349, r1
     458:	10 92 4a 03 	sts	0x034A, r1
  kernel.nextHit = 0x7FFFFFFF;
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	9f ef       	ldi	r25, 0xFF	; 255
     460:	af ef       	ldi	r26, 0xFF	; 255
     462:	bf e7       	ldi	r27, 0x7F	; 127
     464:	80 93 4b 03 	sts	0x034B, r24
     468:	90 93 4c 03 	sts	0x034C, r25
     46c:	a0 93 4d 03 	sts	0x034D, r26
     470:	b0 93 4e 03 	sts	0x034E, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     474:	80 93 0d 03 	sts	0x030D, r24
     478:	90 93 0e 03 	sts	0x030E, r25
     47c:	a0 93 0f 03 	sts	0x030F, r26
     480:	b0 93 10 03 	sts	0x0310, r27
  kernel.tasks[0].release = 0x00000000;
     484:	10 92 09 03 	sts	0x0309, r1
     488:	10 92 0a 03 	sts	0x030A, r1
     48c:	10 92 0b 03 	sts	0x030B, r1
     490:	10 92 0c 03 	sts	0x030C, r1

  sei(); /* set enabled interrupts */
     494:	78 94       	sei
}
     496:	08 95       	ret

00000498 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	49 01       	movw	r8, r18
     4b2:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     4b4:	f8 94       	cli

  ++kernel.nbrOfTasks;
     4b6:	20 91 05 03 	lds	r18, 0x0305
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	20 93 05 03 	sts	0x0305, r18

  sp = kernel.memptr;
     4c0:	c0 91 45 03 	lds	r28, 0x0345
     4c4:	d0 91 46 03 	lds	r29, 0x0346
  kernel.memptr -= stacksize;  // decrease free mem ptr
     4c8:	9e 01       	movw	r18, r28
     4ca:	26 1b       	sub	r18, r22
     4cc:	37 0b       	sbc	r19, r23
     4ce:	30 93 46 03 	sts	0x0346, r19
     4d2:	20 93 45 03 	sts	0x0345, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     4d6:	88 83       	st	Y, r24
     4d8:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     4da:	92 93       	st	-Z, r25
     4dc:	31 97       	sbiw	r30, 0x01	; 1
     4de:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     4e0:	ce 01       	movw	r24, r28
     4e2:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     4e4:	1c 92       	st	X, r1
     4e6:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     4e8:	a8 17       	cp	r26, r24
     4ea:	b9 07       	cpc	r27, r25
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <trtCreateTask+0x4c>
     4ee:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     4f0:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     4f2:	d2 92       	st	-Z, r13
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     4f8:	9e 01       	movw	r18, r28
     4fa:	24 52       	subi	r18, 0x24	; 36
     4fc:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     4fe:	1c 92       	st	X, r1
     500:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     502:	a2 17       	cp	r26, r18
     504:	b3 07       	cpc	r27, r19
     506:	d9 f7       	brne	.-10     	; 0x4fe <trtCreateTask+0x66>
     508:	9f 01       	movw	r18, r30
     50a:	26 50       	subi	r18, 0x06	; 6
     50c:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     50e:	e0 91 05 03 	lds	r30, 0x0305
     512:	8b e0       	ldi	r24, 0x0B	; 11
     514:	e8 9f       	mul	r30, r24
     516:	f0 01       	movw	r30, r0
     518:	11 24       	eor	r1, r1
     51a:	e9 5f       	subi	r30, 0xF9	; 249
     51c:	fc 4f       	sbci	r31, 0xFC	; 252

  t->release = release;
     51e:	82 82       	std	Z+2, r8	; 0x02
     520:	93 82       	std	Z+3, r9	; 0x03
     522:	a4 82       	std	Z+4, r10	; 0x04
     524:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     526:	e6 82       	std	Z+6, r14	; 0x06
     528:	f7 82       	std	Z+7, r15	; 0x07
     52a:	00 87       	std	Z+8, r16	; 0x08
     52c:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     532:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     534:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>

}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	af 90       	pop	r10
     54e:	9f 90       	pop	r9
     550:	8f 90       	pop	r8
     552:	08 95       	ret

00000554 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     554:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     556:	e5 e0       	ldi	r30, 0x05	; 5
     558:	f3 e0       	ldi	r31, 0x03	; 3
     55a:	e8 0f       	add	r30, r24
     55c:	f1 1d       	adc	r31, r1
     55e:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     560:	78 94       	sei
}
     562:	08 95       	ret

00000564 <trtWait>:

void trtWait(uint8_t semnbr) {
     564:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     566:	20 91 06 03 	lds	r18, 0x0306

  cli(); // disable interrupts
     56a:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     56c:	e8 2f       	mov	r30, r24
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e3 5c       	subi	r30, 0xC3	; 195
     572:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	19 f0       	breq	.+6      	; 0x580 <trtWait+0x1c>
    (*s)--;
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	80 83       	st	Z, r24
     57e:	10 c0       	rjmp	.+32     	; 0x5a0 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	28 9f       	mul	r18, r24
     588:	f0 01       	movw	r30, r0
     58a:	29 9f       	mul	r18, r25
     58c:	f0 0d       	add	r31, r0
     58e:	38 9f       	mul	r19, r24
     590:	f0 0d       	add	r31, r0
     592:	11 24       	eor	r1, r1
     594:	e9 5f       	subi	r30, 0xF9	; 249
     596:	fc 4f       	sbci	r31, 0xFC	; 252
     598:	4e 5f       	subi	r20, 0xFE	; 254
     59a:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     59c:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
  }

  sei(); // reenable interrupts
     5a0:	78 94       	sei
}
     5a2:	08 95       	ret

000005a4 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     5ac:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     5ae:	00 91 05 03 	lds	r16, 0x0305
     5b2:	e1 e0       	ldi	r30, 0x01	; 1
     5b4:	4f ef       	ldi	r20, 0xFF	; 255
     5b6:	5f ef       	ldi	r21, 0xFF	; 255
     5b8:	6f ef       	ldi	r22, 0xFF	; 255
     5ba:	7f ef       	ldi	r23, 0xFF	; 255
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5c2:	21 2f       	mov	r18, r17
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	2e 5f       	subi	r18, 0xFE	; 254
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	1e c0       	rjmp	.+60     	; 0x608 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     5cc:	ef 9d       	mul	r30, r15
     5ce:	d0 01       	movw	r26, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	a9 5f       	subi	r26, 0xF9	; 249
     5d4:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5d6:	1a 96       	adiw	r26, 0x0a	; 10
     5d8:	8c 91       	ld	r24, X
     5da:	1a 97       	sbiw	r26, 0x0a	; 10
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	82 17       	cp	r24, r18
     5e0:	93 07       	cpc	r25, r19
     5e2:	69 f4       	brne	.+26     	; 0x5fe <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     5e4:	16 96       	adiw	r26, 0x06	; 6
     5e6:	8d 91       	ld	r24, X+
     5e8:	9d 91       	ld	r25, X+
     5ea:	0d 90       	ld	r0, X+
     5ec:	bc 91       	ld	r27, X
     5ee:	a0 2d       	mov	r26, r0
     5f0:	48 17       	cp	r20, r24
     5f2:	59 07       	cpc	r21, r25
     5f4:	6a 07       	cpc	r22, r26
     5f6:	7b 07       	cpc	r23, r27
     5f8:	10 f0       	brcs	.+4      	; 0x5fe <trtSignal+0x5a>
     5fa:	fe 2f       	mov	r31, r30
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <trtSignal+0x5e>
     5fe:	db 01       	movw	r26, r22
     600:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     602:	ef 5f       	subi	r30, 0xFF	; 255
     604:	ac 01       	movw	r20, r24
     606:	bd 01       	movw	r22, r26
     608:	0e 17       	cp	r16, r30
     60a:	00 f7       	brcc	.-64     	; 0x5cc <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     60c:	ff 23       	and	r31, r31
     60e:	41 f4       	brne	.+16     	; 0x620 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     610:	e1 2f       	mov	r30, r17
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	ec 5f       	subi	r30, 0xFC	; 252
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	81 ad       	ldd	r24, Z+57	; 0x39
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	81 af       	std	Z+57, r24	; 0x39
     61e:	11 c0       	rjmp	.+34     	; 0x642 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     620:	2f 2f       	mov	r18, r31
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	eb 5f       	subi	r30, 0xFB	; 251
     638:	fc 4f       	sbci	r31, 0xFC	; 252
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	08 95       	ret

0000064c <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     64c:	20 91 84 00 	lds	r18, 0x0084
     650:	30 91 85 00 	lds	r19, 0x0085
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	80 91 47 03 	lds	r24, 0x0347
     65c:	90 91 48 03 	lds	r25, 0x0348
     660:	a0 91 49 03 	lds	r26, 0x0349
     664:	b0 91 4a 03 	lds	r27, 0x034A
     668:	dc 01       	movw	r26, r24
     66a:	99 27       	eor	r25, r25
     66c:	88 27       	eor	r24, r24
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	4a 1f       	adc	r20, r26
     674:	5b 1f       	adc	r21, r27
}
     676:	b9 01       	movw	r22, r18
     678:	ca 01       	movw	r24, r20
     67a:	08 95       	ret

0000067c <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     67c:	e0 91 06 03 	lds	r30, 0x0306
     680:	ab e0       	ldi	r26, 0x0B	; 11
     682:	ea 9f       	mul	r30, r26
     684:	f0 01       	movw	r30, r0
     686:	11 24       	eor	r1, r1
     688:	e9 5f       	subi	r30, 0xF9	; 249
     68a:	fc 4f       	sbci	r31, 0xFC	; 252

  cli(); // turn off interrupts
     68c:	f8 94       	cli

  t->state = TIMEQ;
     68e:	a2 e0       	ldi	r26, 0x02	; 2
     690:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     692:	62 83       	std	Z+2, r22	; 0x02
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	84 83       	std	Z+4, r24	; 0x04
     698:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     69a:	26 83       	std	Z+6, r18	; 0x06
     69c:	37 83       	std	Z+7, r19	; 0x07
     69e:	40 87       	std	Z+8, r20	; 0x08
     6a0:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6a2:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
}
     6a6:	08 95       	ret

000006a8 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     6a8:	80 91 06 03 	lds	r24, 0x0306
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	82 9f       	mul	r24, r18
     6b4:	f0 01       	movw	r30, r0
     6b6:	83 9f       	mul	r24, r19
     6b8:	f0 0d       	add	r31, r0
     6ba:	92 9f       	mul	r25, r18
     6bc:	f0 0d       	add	r31, r0
     6be:	11 24       	eor	r1, r1
     6c0:	eb 5f       	subi	r30, 0xFB	; 251
     6c2:	fc 4f       	sbci	r31, 0xFC	; 252
     6c4:	df 01       	movw	r26, r30
     6c6:	14 96       	adiw	r26, 0x04	; 4
     6c8:	64 81       	ldd	r22, Z+4	; 0x04
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	7c 91       	ld	r23, X
     6ce:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     6d0:	12 96       	adiw	r26, 0x02	; 2
     6d2:	8c 91       	ld	r24, X
     6d4:	12 97       	sbiw	r26, 0x02	; 2
     6d6:	13 96       	adiw	r26, 0x03	; 3
     6d8:	9c 91       	ld	r25, X
     6da:	08 95       	ret

000006dc <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     6dc:	80 91 06 03 	lds	r24, 0x0306
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2b e0       	ldi	r18, 0x0B	; 11
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	82 9f       	mul	r24, r18
     6e8:	f0 01       	movw	r30, r0
     6ea:	83 9f       	mul	r24, r19
     6ec:	f0 0d       	add	r31, r0
     6ee:	92 9f       	mul	r25, r18
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	eb 5f       	subi	r30, 0xFB	; 251
     6f6:	fc 4f       	sbci	r31, 0xFC	; 252
     6f8:	df 01       	movw	r26, r30
     6fa:	18 96       	adiw	r26, 0x08	; 8
     6fc:	60 85       	ldd	r22, Z+8	; 0x08
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	7c 91       	ld	r23, X
     702:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	8c 91       	ld	r24, X
     708:	12 97       	sbiw	r26, 0x02	; 2
     70a:	13 96       	adiw	r26, 0x03	; 3
     70c:	9c 91       	ld	r25, X
     70e:	08 95       	ret

00000710 <trtTerminate>:

void trtTerminate(void) {

  cli();
     710:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     712:	80 91 06 03 	lds	r24, 0x0306
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2b e0       	ldi	r18, 0x0B	; 11
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	82 9f       	mul	r24, r18
     71e:	f0 01       	movw	r30, r0
     720:	83 9f       	mul	r24, r19
     722:	f0 0d       	add	r31, r0
     724:	92 9f       	mul	r25, r18
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	eb 5f       	subi	r30, 0xFB	; 251
     72c:	fc 4f       	sbci	r31, 0xFC	; 252
     72e:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     730:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
}
     734:	08 95       	ret

00000736 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     736:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     738:	e8 2f       	mov	r30, r24
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	e3 5c       	subi	r30, 0xC3	; 195
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     740:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     742:	88 23       	and	r24, r24
     744:	19 f0       	breq	.+6      	; 0x74c <trtAccept+0x16>
    (*s)--;
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 83       	st	Z, r24
     74a:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     74c:	78 94       	sei
  return temp ;
}
     74e:	08 95       	ret

00000750 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     750:	87 e6       	ldi	r24, 0x67	; 103
     752:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     756:	e1 ec       	ldi	r30, 0xC1	; 193
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	88 e1       	ldi	r24, 0x18	; 24
     75c:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     75e:	10 92 fd 01 	sts	0x01FD, r1
     762:	10 92 fc 01 	sts	0x01FC, r1
  tx_out = 0;
     766:	10 92 ff 01 	sts	0x01FF, r1
     76a:	10 92 fe 01 	sts	0x01FE, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     76e:	80 81       	ld	r24, Z
     770:	80 68       	ori	r24, 0x80	; 128
     772:	80 83       	st	Z, r24
}
     774:	08 95       	ret

00000776 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	0b b6       	in	r0, 0x3b	; 59
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     790:	20 91 fc 01 	lds	r18, 0x01FC
     794:	30 91 fd 01 	lds	r19, 0x01FD
     798:	80 91 fe 01 	lds	r24, 0x01FE
     79c:	90 91 ff 01 	lds	r25, 0x01FF
     7a0:	28 17       	cp	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	31 f4       	brne	.+12     	; 0x7b2 <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     7a6:	80 91 c1 00 	lds	r24, 0x00C1
     7aa:	8f 7d       	andi	r24, 0xDF	; 223
     7ac:	80 93 c1 00 	sts	0x00C1, r24
     7b0:	1d c0       	rjmp	.+58     	; 0x7ec <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     7b2:	e0 91 fe 01 	lds	r30, 0x01FE
     7b6:	f0 91 ff 01 	lds	r31, 0x01FF
     7ba:	e0 50       	subi	r30, 0x00	; 0
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	80 81       	ld	r24, Z
     7c0:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     7c4:	80 91 fe 01 	lds	r24, 0x01FE
     7c8:	90 91 ff 01 	lds	r25, 0x01FF
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	90 93 ff 01 	sts	0x01FF, r25
     7d2:	80 93 fe 01 	sts	0x01FE, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     7d6:	80 91 fe 01 	lds	r24, 0x01FE
     7da:	90 91 ff 01 	lds	r25, 0x01FF
     7de:	88 3c       	cpi	r24, 0xC8	; 200
     7e0:	91 05       	cpc	r25, r1
     7e2:	21 f4       	brne	.+8      	; 0x7ec <__vector_21+0x76>
     7e4:	10 92 ff 01 	sts	0x01FF, r1
     7e8:	10 92 fe 01 	sts	0x01FE, r1
  }
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	3f 91       	pop	r19
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0b be       	out	0x3b, r0	; 59
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     806:	1f 93       	push	r17
     808:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     80a:	8a 30       	cpi	r24, 0x0A	; 10
     80c:	19 f4       	brne	.+6      	; 0x814 <uart_putchar+0xe>
     80e:	8d e0       	ldi	r24, 0x0D	; 13
     810:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
  char i = tx_in;
     814:	80 91 fc 01 	lds	r24, 0x01FC
     818:	90 91 fd 01 	lds	r25, 0x01FD
  i++;
     81c:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     81e:	88 3c       	cpi	r24, 0xC8	; 200
     820:	09 f4       	brne	.+2      	; 0x824 <uart_putchar+0x1e>
     822:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     824:	e0 91 fc 01 	lds	r30, 0x01FC
     828:	f0 91 fd 01 	lds	r31, 0x01FD
     82c:	e0 50       	subi	r30, 0x00	; 0
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	80 91 fe 01 	lds	r24, 0x01FE
     83a:	90 91 ff 01 	lds	r25, 0x01FF
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	c9 f3       	breq	.-14     	; 0x836 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     844:	30 93 fd 01 	sts	0x01FD, r19
     848:	20 93 fc 01 	sts	0x01FC, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     84c:	80 91 c1 00 	lds	r24, 0x00C1
     850:	80 62       	ori	r24, 0x20	; 32
     852:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	1f 91       	pop	r17
     85c:	08 95       	ret

0000085e <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	0b b6       	in	r0, 0x3b	; 59
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
	trt_rx_c = UDR0;
     884:	80 91 c6 00 	lds	r24, 0x00C6
     888:	80 93 4f 03 	sts	0x034F, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     8c6:	80 91 aa 01 	lds	r24, 0x01AA
     8ca:	90 91 ab 01 	lds	r25, 0x01AB
     8ce:	89 2b       	or	r24, r25
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <uart_getchar+0x1c>
     8d2:	a1 c0       	rjmp	.+322    	; 0xa16 <uart_getchar+0x15e>
     8d4:	0c ea       	ldi	r16, 0xAC	; 172
     8d6:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
	if (UCSR0A & _BV(FE0))
     8de:	80 91 c0 00 	lds	r24, 0x00C0
     8e2:	84 ff       	sbrs	r24, 4
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <uart_getchar+0x34>
     8e6:	2e ef       	ldi	r18, 0xFE	; 254
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	a9 c0       	rjmp	.+338    	; 0xa3e <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     8ec:	80 91 c0 00 	lds	r24, 0x00C0
     8f0:	83 fd       	sbrc	r24, 3
     8f2:	a3 c0       	rjmp	.+326    	; 0xa3a <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     8f4:	90 91 4f 03 	lds	r25, 0x034F

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     8f8:	9d 30       	cpi	r25, 0x0D	; 13
     8fa:	11 f0       	breq	.+4      	; 0x900 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     8fc:	9a 30       	cpi	r25, 0x0A	; 10
     8fe:	81 f4       	brne	.+32     	; 0x920 <uart_getchar+0x68>
	  {
	    *cp = c;
     900:	8a e0       	ldi	r24, 0x0A	; 10
     902:	f8 01       	movw	r30, r16
     904:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     906:	b7 01       	movw	r22, r14
     908:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
	    rxp = b;
     90c:	8c ea       	ldi	r24, 0xAC	; 172
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	90 93 ab 01 	sts	0x01AB, r25
     914:	80 93 aa 01 	sts	0x01AA, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
     91e:	7b c0       	rjmp	.+246    	; 0xa16 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     920:	99 30       	cpi	r25, 0x09	; 9
     922:	09 f4       	brne	.+2      	; 0x926 <uart_getchar+0x6e>
     924:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     926:	89 2f       	mov	r24, r25
     928:	80 52       	subi	r24, 0x20	; 32
     92a:	8f 35       	cpi	r24, 0x5F	; 95
     92c:	10 f0       	brcs	.+4      	; 0x932 <uart_getchar+0x7a>
     92e:	90 3a       	cpi	r25, 0xA0	; 160
     930:	70 f0       	brcs	.+28     	; 0x94e <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	0b 3f       	cpi	r16, 0xFB	; 251
     936:	1f 07       	cpc	r17, r31
     938:	11 f4       	brne	.+4      	; 0x93e <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     93a:	87 e0       	ldi	r24, 0x07	; 7
     93c:	04 c0       	rjmp	.+8      	; 0x946 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     93e:	f8 01       	movw	r30, r16
     940:	91 93       	st	Z+, r25
     942:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     944:	89 2f       	mov	r24, r25
     946:	b7 01       	movw	r22, r14
     948:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     94c:	c5 cf       	rjmp	.-118    	; 0x8d8 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     94e:	92 31       	cpi	r25, 0x12	; 18
     950:	39 f1       	breq	.+78     	; 0x9a0 <uart_getchar+0xe8>
     952:	93 31       	cpi	r25, 0x13	; 19
     954:	38 f4       	brcc	.+14     	; 0x964 <uart_getchar+0xac>
     956:	93 30       	cpi	r25, 0x03	; 3
     958:	09 f4       	brne	.+2      	; 0x95c <uart_getchar+0xa4>
     95a:	6f c0       	rjmp	.+222    	; 0xa3a <uart_getchar+0x182>
     95c:	98 30       	cpi	r25, 0x08	; 8
     95e:	09 f0       	breq	.+2      	; 0x962 <uart_getchar+0xaa>
     960:	bb cf       	rjmp	.-138    	; 0x8d8 <uart_getchar+0x20>
     962:	09 c0       	rjmp	.+18     	; 0x976 <uart_getchar+0xbe>
     964:	97 31       	cpi	r25, 0x17	; 23
     966:	09 f4       	brne	.+2      	; 0x96a <uart_getchar+0xb2>
     968:	4b c0       	rjmp	.+150    	; 0xa00 <uart_getchar+0x148>
     96a:	9f 37       	cpi	r25, 0x7F	; 127
     96c:	21 f0       	breq	.+8      	; 0x976 <uart_getchar+0xbe>
     96e:	95 31       	cpi	r25, 0x15	; 21
     970:	09 f0       	breq	.+2      	; 0x974 <uart_getchar+0xbc>
     972:	b2 cf       	rjmp	.-156    	; 0x8d8 <uart_getchar+0x20>
     974:	32 c0       	rjmp	.+100    	; 0x9da <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	0c 3a       	cpi	r16, 0xAC	; 172
     97a:	1f 07       	cpc	r17, r31
     97c:	09 f0       	breq	.+2      	; 0x980 <uart_getchar+0xc8>
     97e:	08 f4       	brcc	.+2      	; 0x982 <uart_getchar+0xca>
     980:	ab cf       	rjmp	.-170    	; 0x8d8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	b7 01       	movw	r22, r14
     986:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     98a:	80 e2       	ldi	r24, 0x20	; 32
     98c:	b7 01       	movw	r22, r14
     98e:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	b7 01       	movw	r22, r14
     996:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		cp--;
     99a:	01 50       	subi	r16, 0x01	; 1
     99c:	10 40       	sbci	r17, 0x00	; 0
     99e:	9c cf       	rjmp	.-200    	; 0x8d8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	b7 01       	movw	r22, r14
     9a4:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     9a8:	cc ea       	ldi	r28, 0xAC	; 172
     9aa:	d1 e0       	ldi	r29, 0x01	; 1
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     9ae:	89 91       	ld	r24, Y+
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     9b6:	c0 17       	cp	r28, r16
     9b8:	d1 07       	cpc	r29, r17
     9ba:	c8 f3       	brcs	.-14     	; 0x9ae <uart_getchar+0xf6>
     9bc:	8d cf       	rjmp	.-230    	; 0x8d8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     9c6:	80 e2       	ldi	r24, 0x20	; 32
     9c8:	b7 01       	movw	r22, r14
     9ca:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     9ce:	88 e0       	ldi	r24, 0x08	; 8
     9d0:	b7 01       	movw	r22, r14
     9d2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		cp--;
     9d6:	01 50       	subi	r16, 0x01	; 1
     9d8:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0c 3a       	cpi	r16, 0xAC	; 172
     9de:	18 07       	cpc	r17, r24
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <uart_getchar+0x12c>
     9e2:	68 f7       	brcc	.-38     	; 0x9be <uart_getchar+0x106>
     9e4:	79 cf       	rjmp	.-270    	; 0x8d8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	b7 01       	movw	r22, r14
     9ea:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	b7 01       	movw	r22, r14
     9f2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     9fe:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a00:	e1 e0       	ldi	r30, 0x01	; 1
     a02:	0c 3a       	cpi	r16, 0xAC	; 172
     a04:	1e 07       	cpc	r17, r30
     a06:	09 f0       	breq	.+2      	; 0xa0a <uart_getchar+0x152>
     a08:	08 f4       	brcc	.+2      	; 0xa0c <uart_getchar+0x154>
     a0a:	66 cf       	rjmp	.-308    	; 0x8d8 <uart_getchar+0x20>
     a0c:	e8 01       	movw	r28, r16
     a0e:	8a 91       	ld	r24, -Y
     a10:	80 32       	cpi	r24, 0x20	; 32
     a12:	49 f7       	brne	.-46     	; 0x9e6 <uart_getchar+0x12e>
     a14:	61 cf       	rjmp	.-318    	; 0x8d8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     a16:	e0 91 aa 01 	lds	r30, 0x01AA
     a1a:	f0 91 ab 01 	lds	r31, 0x01AB
     a1e:	81 91       	ld	r24, Z+
     a20:	f0 93 ab 01 	sts	0x01AB, r31
     a24:	e0 93 aa 01 	sts	0x01AA, r30
  if (c == '\n')
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	21 f4       	brne	.+8      	; 0xa34 <uart_getchar+0x17c>
    rxp = 0;
     a2c:	10 92 ab 01 	sts	0x01AB, r1
     a30:	10 92 aa 01 	sts	0x01AA, r1

  return c;
     a34:	28 2f       	mov	r18, r24
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <uart_getchar+0x186>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	3f ef       	ldi	r19, 0xFF	; 255
}
     a3e:	c9 01       	movw	r24, r18
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	08 95       	ret

00000a4e <port_init>:
volatile uint16_t motor_period_ovlf;

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     a4e:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     a50:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     a56:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     a58:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     a5a:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     a5c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     a5e:	5a 9a       	sbi	0x0b, 2	; 11
end
     a60:	08 95       	ret

00000a62 <timer2_init>:
end

// sets timer2 to be a counter
void timer2_init(void)
begin
	TCCR2A = 0x00;
     a62:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x00;
     a66:	a1 eb       	ldi	r26, 0xB1	; 177
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	1c 92       	st	X, r1
	TIMSK2 = 0x00;
     a6c:	e0 e7       	ldi	r30, 0x70	; 112
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	10 82       	st	Z, r1

	TIMSK2 |= (1<<TOIE2);    // enables the overflow ISR
     a72:	80 81       	ld	r24, Z
     a74:	81 60       	ori	r24, 0x01	; 1
     a76:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22) + (1<<CS21);// + (1<<CS20);    // sets the prescaler to 256
     a78:	8c 91       	ld	r24, X
     a7a:	86 60       	ori	r24, 0x06	; 6
     a7c:	8c 93       	st	X, r24
end
     a7e:	08 95       	ret

00000a80 <timer0_init>:

void timer0_init(void)
begin
	TCCR0A = 0x00;
     a80:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
     a82:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0x00;
     a84:	10 92 6e 00 	sts	0x006E, r1
	OCR0A = 0;    // sets up 0 duty cycle
     a88:	17 bc       	out	0x27, r1	; 39
	EICRA = 0x00;
     a8a:	e9 e6       	ldi	r30, 0x69	; 105
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	10 82       	st	Z, r1
	EIMSK = 0x00;
     a90:	1d ba       	out	0x1d, r1	; 29

	EICRA |= (1<<ISC01);    // falling edge triggers INT0
     a92:	80 81       	ld	r24, Z
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);    // enables INT0
     a98:	e8 9a       	sbi	0x1d, 0	; 29

	TCCR0A |= (1<<COM0A1) + (1<<COM0B1) + (1<<WGM01) + (1<<WGM00);    // fast pwm
     a9a:	84 b5       	in	r24, 0x24	; 36
     a9c:	83 6a       	ori	r24, 0xA3	; 163
     a9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) + (1<<CS00);    // prescaler of 64 -> 976 cycles/sec
     aa0:	85 b5       	in	r24, 0x25	; 37
     aa2:	83 60       	ori	r24, 0x03	; 3
     aa4:	85 bd       	out	0x25, r24	; 37
end
     aa6:	08 95       	ret

00000aa8 <calc_PWM_Const>:
	end
  end

// --- define task 2  ----------------------------------------
void calc_PWM_Const(void* args) 
  begin	
     aa8:	2f 92       	push	r2
     aaa:	3f 92       	push	r3
     aac:	4f 92       	push	r4
     aae:	5f 92       	push	r5
     ab0:	6f 92       	push	r6
     ab2:	7f 92       	push	r7
     ab4:	8f 92       	push	r8
     ab6:	9f 92       	push	r9
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
	int error, prev_error, sum_error, temp; 
	int CF;
	int p, i, d;
	float rpm_isr;

	s_value = 1000; // <------------------------------------- This is a test statement only
     acc:	88 ee       	ldi	r24, 0xE8	; 232
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	90 93 e2 02 	sts	0x02E2, r25
     ad4:	80 93 e1 02 	sts	0x02E1, r24
	p = 1;
	i = 0;
	d = 0;
	p_value = 10;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e2       	ldi	r26, 0x20	; 32
     ade:	b1 e4       	ldi	r27, 0x41	; 65
     ae0:	80 93 e8 02 	sts	0x02E8, r24
     ae4:	90 93 e9 02 	sts	0x02E9, r25
     ae8:	a0 93 ea 02 	sts	0x02EA, r26
     aec:	b0 93 eb 02 	sts	0x02EB, r27
	error = 0;
	OCR0A = 150;
     af0:	86 e9       	ldi	r24, 0x96	; 150
     af2:	87 bd       	out	0x27, r24	; 39
     af4:	cc 24       	eor	r12, r12
     af6:	dd 24       	eor	r13, r13
	prev_error = 0;

	while(1)
	begin
		temp = fan_period*7;    // ticks for one rotation
     af8:	00 91 f0 02 	lds	r16, 0x02F0
     afc:	10 91 f1 02 	lds	r17, 0x02F1
		rpm_isr = 62500 * 60 /temp;    // divide 60 seconsd by rotations/sec for rpm
		
		prev_error = error;
		
		// lock and look at error
		trtWait(SEM_SHARED_RPM);
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		RPM = (int)rpm_isr;    // saves the calculated value into a global that LCD func can use
     b06:	98 01       	movw	r18, r16
     b08:	e3 e0       	ldi	r30, 0x03	; 3
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	ea 95       	dec	r30
     b10:	e1 f7       	brne	.-8      	; 0xb0a <calc_PWM_Const+0x62>
     b12:	20 1b       	sub	r18, r16
     b14:	31 0b       	sbc	r19, r17
     b16:	44 27       	eor	r20, r20
     b18:	37 fd       	sbrc	r19, 7
     b1a:	40 95       	com	r20
     b1c:	54 2f       	mov	r21, r20
     b1e:	60 e7       	ldi	r22, 0x70	; 112
     b20:	78 e3       	ldi	r23, 0x38	; 56
     b22:	89 e3       	ldi	r24, 0x39	; 57
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 66 12 	call	0x24cc	; 0x24cc <__divmodsi4>
     b2a:	ca 01       	movw	r24, r20
     b2c:	b9 01       	movw	r22, r18
     b2e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__floatsisf>
     b32:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixsfsi>
     b36:	70 93 e0 02 	sts	0x02E0, r23
     b3a:	60 93 df 02 	sts	0x02DF, r22
		trtWait(SEM_SHARED_S);
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		error = s_value - RPM;
     b44:	c0 91 e1 02 	lds	r28, 0x02E1
     b48:	d0 91 e2 02 	lds	r29, 0x02E2
     b4c:	80 91 df 02 	lds	r24, 0x02DF
     b50:	90 91 e0 02 	lds	r25, 0x02E0
     b54:	c8 1b       	sub	r28, r24
     b56:	d9 0b       	sbc	r29, r25
		trtSignal(SEM_SHARED_S);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		trtSignal(SEM_SHARED_RPM);
     b5e:	87 e0       	ldi	r24, 0x07	; 7
     b60:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>

		// check if error had a zero crossing and reset the i term
		if((error>0 && prev_error>0) || (error<0 && prev_error<0))
     b64:	1c 16       	cp	r1, r28
     b66:	1d 06       	cpc	r1, r29
     b68:	24 f4       	brge	.+8      	; 0xb72 <calc_PWM_Const+0xca>
     b6a:	1c 14       	cp	r1, r12
     b6c:	1d 04       	cpc	r1, r13
     b6e:	2c f0       	brlt	.+10     	; 0xb7a <calc_PWM_Const+0xd2>
     b70:	07 c0       	rjmp	.+14     	; 0xb80 <calc_PWM_Const+0xd8>
     b72:	20 97       	sbiw	r28, 0x00	; 0
     b74:	29 f0       	breq	.+10     	; 0xb80 <calc_PWM_Const+0xd8>
     b76:	d7 fe       	sbrs	r13, 7
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <calc_PWM_Const+0xd8>
		begin
			sum_error += error;
     b7a:	2c 0e       	add	r2, r28
     b7c:	3d 1e       	adc	r3, r29
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <calc_PWM_Const+0xdc>
		error = s_value - RPM;
		trtSignal(SEM_SHARED_S);
		trtSignal(SEM_SHARED_RPM);

		// check if error had a zero crossing and reset the i term
		if((error>0 && prev_error>0) || (error<0 && prev_error<0))
     b80:	22 24       	eor	r2, r2
     b82:	33 24       	eor	r3, r3
			sum_error += error;
		end
		else sum_error = 0;

		// calculate CF
		trtWait(SEM_SHARED_P);
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		p = p_value;
     b8a:	80 90 e8 02 	lds	r8, 0x02E8
     b8e:	90 90 e9 02 	lds	r9, 0x02E9
     b92:	a0 90 ea 02 	lds	r10, 0x02EA
     b96:	b0 90 eb 02 	lds	r11, 0x02EB
		trtSignal(SEM_SHARED_P);
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>

		trtWait(SEM_SHARED_I);
     ba0:	85 e0       	ldi	r24, 0x05	; 5
     ba2:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		i = i_value;
     ba6:	40 90 ec 02 	lds	r4, 0x02EC
     baa:	50 90 ed 02 	lds	r5, 0x02ED
     bae:	60 90 ee 02 	lds	r6, 0x02EE
     bb2:	70 90 ef 02 	lds	r7, 0x02EF
		trtSignal(SEM_SHARED_I);
     bb6:	85 e0       	ldi	r24, 0x05	; 5
     bb8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>

		trtWait(SEM_SHARED_D);
     bbc:	86 e0       	ldi	r24, 0x06	; 6
     bbe:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		d = d_value;
     bc2:	e0 90 e4 02 	lds	r14, 0x02E4
     bc6:	f0 90 e5 02 	lds	r15, 0x02E5
     bca:	00 91 e6 02 	lds	r16, 0x02E6
     bce:	10 91 e7 02 	lds	r17, 0x02E7
		trtSignal(SEM_SHARED_D);
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>

		CF = p * error + d * (error-prev_error) + i * (sum_error);
     bd8:	ce 01       	movw	r24, r28
     bda:	8c 19       	sub	r24, r12
     bdc:	9d 09       	sbc	r25, r13
     bde:	6c 01       	movw	r12, r24
     be0:	c8 01       	movw	r24, r16
     be2:	b7 01       	movw	r22, r14
     be4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixsfsi>
     be8:	c6 9e       	mul	r12, r22
     bea:	80 01       	movw	r16, r0
     bec:	c7 9e       	mul	r12, r23
     bee:	10 0d       	add	r17, r0
     bf0:	d6 9e       	mul	r13, r22
     bf2:	10 0d       	add	r17, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	c5 01       	movw	r24, r10
     bf8:	b4 01       	movw	r22, r8
     bfa:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixsfsi>
     bfe:	c6 9f       	mul	r28, r22
     c00:	c0 01       	movw	r24, r0
     c02:	c7 9f       	mul	r28, r23
     c04:	90 0d       	add	r25, r0
     c06:	d6 9f       	mul	r29, r22
     c08:	90 0d       	add	r25, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	08 0f       	add	r16, r24
     c0e:	19 1f       	adc	r17, r25
     c10:	c3 01       	movw	r24, r6
     c12:	b2 01       	movw	r22, r4
     c14:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixsfsi>
     c18:	26 9e       	mul	r2, r22
     c1a:	c0 01       	movw	r24, r0
     c1c:	27 9e       	mul	r2, r23
     c1e:	90 0d       	add	r25, r0
     c20:	36 9e       	mul	r3, r22
     c22:	90 0d       	add	r25, r0
     c24:	11 24       	eor	r1, r1
     c26:	80 0f       	add	r24, r16
     c28:	91 1f       	adc	r25, r17
		


		//CF = 0.8574*CF; // normalize to 255

		if (CF>255) OCR0A = 255;
     c2a:	8f 3f       	cpi	r24, 0xFF	; 255
     c2c:	91 05       	cpc	r25, r1
     c2e:	19 f0       	breq	.+6      	; 0xc36 <calc_PWM_Const+0x18e>
     c30:	14 f0       	brlt	.+4      	; 0xc36 <calc_PWM_Const+0x18e>
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	27 bd       	out	0x27, r18	; 39
		if (CF<0) OCR0A = 0;
     c36:	97 fd       	sbrc	r25, 7
     c38:	17 bc       	out	0x27, r1	; 39
		if (CF<=255 && CF>=0) OCR0A = (char)CF; 
     c3a:	8f 3f       	cpi	r24, 0xFF	; 255
     c3c:	91 05       	cpc	r25, r1
     c3e:	09 f0       	breq	.+2      	; 0xc42 <calc_PWM_Const+0x19a>
     c40:	08 f4       	brcc	.+2      	; 0xc44 <calc_PWM_Const+0x19c>
     c42:	87 bd       	out	0x27, r24	; 39
		
		OCR0B = RPM*.857; // set for the Oscope measurement
     c44:	60 91 df 02 	lds	r22, 0x02DF
     c48:	70 91 e0 02 	lds	r23, 0x02E0
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__floatunsisf>
     c54:	2a e5       	ldi	r18, 0x5A	; 90
     c56:	34 e6       	ldi	r19, 0x64	; 100
     c58:	4b e5       	ldi	r20, 0x5B	; 91
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3>
     c60:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fixunssfsi>
     c64:	68 bd       	out	0x28, r22	; 40
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     c66:	20 91 47 03 	lds	r18, 0x0347
     c6a:	30 91 48 03 	lds	r19, 0x0348
     c6e:	40 91 49 03 	lds	r20, 0x0349
     c72:	50 91 4a 03 	lds	r21, 0x034A
     c76:	a9 01       	movw	r20, r18
     c78:	33 27       	eor	r19, r19
     c7a:	22 27       	eor	r18, r18
     c7c:	60 91 84 00 	lds	r22, 0x0084
     c80:	70 91 85 00 	lds	r23, 0x0085

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.01);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.04);
	    trtSleepUntil(rel, dead);
     c84:	e0 90 84 00 	lds	r14, 0x0084
     c88:	f0 90 85 00 	lds	r15, 0x0085
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	62 0f       	add	r22, r18
     c92:	73 1f       	adc	r23, r19
     c94:	84 1f       	adc	r24, r20
     c96:	95 1f       	adc	r25, r21
     c98:	64 56       	subi	r22, 0x64	; 100
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	8f 4f       	sbci	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	00 e0       	ldi	r16, 0x00	; 0
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	2e 0d       	add	r18, r14
     ca6:	3f 1d       	adc	r19, r15
     ca8:	40 1f       	adc	r20, r16
     caa:	51 1f       	adc	r21, r17
     cac:	2f 58       	subi	r18, 0x8F	; 143
     cae:	3d 4f       	sbci	r19, 0xFD	; 253
     cb0:	4f 4f       	sbci	r20, 0xFF	; 255
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
     cb8:	6e 01       	movw	r12, r28
     cba:	1e cf       	rjmp	.-452    	; 0xaf8 <calc_PWM_Const+0x50>

00000cbc <__vector_1>:
	end
  end

// pin change interrupt on D.2. Initialized in task 2
ISR(INT0_vect)
begin
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	0b b6       	in	r0, 0x3b	; 59
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	2f 93       	push	r18
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
	fan_period = TCNT2 + motor_period_ovlf;
     cd4:	e2 eb       	ldi	r30, 0xB2	; 178
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	20 81       	ld	r18, Z
     cda:	80 91 03 03 	lds	r24, 0x0303
     cde:	90 91 04 03 	lds	r25, 0x0304
     ce2:	82 0f       	add	r24, r18
     ce4:	91 1d       	adc	r25, r1
     ce6:	90 93 f1 02 	sts	0x02F1, r25
     cea:	80 93 f0 02 	sts	0x02F0, r24
    TCNT2 = 0;
     cee:	10 82       	st	Z, r1
	motor_period_ovlf = 0 ;
     cf0:	10 92 04 03 	sts	0x0304, r1
     cf4:	10 92 03 03 	sts	0x0303, r1
end
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_11>:

// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     d1e:	80 91 03 03 	lds	r24, 0x0303
     d22:	90 91 04 03 	lds	r25, 0x0304
     d26:	80 50       	subi	r24, 0x00	; 0
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	90 93 04 03 	sts	0x0304, r25
     d2e:	80 93 03 03 	sts	0x0303, r24
}
     d32:	9f 91       	pop	r25
     d34:	8f 91       	pop	r24
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <main>:

// --- Main Program ----------------------------------
int main(void) {
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     d4c:	0e 94 a8 03 	call	0x750	; 0x750 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     d50:	6c e9       	ldi	r22, 0x9C	; 156
     d52:	71 e0       	ldi	r23, 0x01	; 1
     d54:	70 93 55 03 	sts	0x0355, r23
     d58:	60 93 54 03 	sts	0x0354, r22
     d5c:	70 93 51 03 	sts	0x0351, r23
     d60:	60 93 50 03 	sts	0x0350, r22
     d64:	70 93 53 03 	sts	0x0353, r23
     d68:	60 93 52 03 	sts	0x0352, r22
  fprintf(stdout,"\n\r Hi\n\r\n\r");
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 14 0c 	call	0x1828	; 0x1828 <fputs>

  // start TRT
  trtInitKernel(140); // 80 bytes for the idle task stack
     d74:	8c e8       	ldi	r24, 0x8C	; 140
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 0e 02 	call	0x41c	; 0x41c <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d7c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d7e:	10 92 3e 03 	sts	0x033E, r1
  
  sei(); // set enabled interrupts;
     d82:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d84:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d86:	10 92 3f 03 	sts	0x033F, r1
  
  sei(); // set enabled interrupts;
     d8a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d8c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	80 93 40 03 	sts	0x0340, r24
  
  sei(); // set enabled interrupts;
     d94:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d96:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d98:	80 93 41 03 	sts	0x0341, r24
  
  sei(); // set enabled interrupts;
     d9c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d9e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     da0:	80 93 42 03 	sts	0x0342, r24
  
  sei(); // set enabled interrupts;
     da4:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     da6:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     da8:	80 93 43 03 	sts	0x0343, r24
  
  sei(); // set enabled interrupts;
     dac:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     dae:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     db0:	80 93 44 03 	sts	0x0344, r24
  
  sei(); // set enabled interrupts;
     db4:	78 94       	sei
  trtCreateSemaphore(SEM_SHARED_D, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_SHARED_RPM, 1) ; // protect shared variables


 // --- creat tasks  ----------------
  trtCreateTask(get_User_Input, 1000, SECONDS2TICKS(0.01), SECONDS2TICKS(0.1), &(args[0]));
     db6:	8f e1       	ldi	r24, 0x1F	; 31
     db8:	97 e0       	ldi	r25, 0x07	; 7
     dba:	68 ee       	ldi	r22, 0xE8	; 232
     dbc:	73 e0       	ldi	r23, 0x03	; 3
     dbe:	2c e9       	ldi	r18, 0x9C	; 156
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	aa e1       	ldi	r26, 0x1A	; 26
     dc8:	ea 2e       	mov	r14, r26
     dca:	a6 e0       	ldi	r26, 0x06	; 6
     dcc:	fa 2e       	mov	r15, r26
     dce:	01 2d       	mov	r16, r1
     dd0:	11 2d       	mov	r17, r1
     dd2:	f8 ec       	ldi	r31, 0xC8	; 200
     dd4:	cf 2e       	mov	r12, r31
     dd6:	f2 e0       	ldi	r31, 0x02	; 2
     dd8:	df 2e       	mov	r13, r31
     dda:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  trtCreateTask(calc_PWM_Const, 1000, SECONDS2TICKS(0.01), SECONDS2TICKS(0.05), &(args[1]));
     dde:	84 e5       	ldi	r24, 0x54	; 84
     de0:	95 e0       	ldi	r25, 0x05	; 5
     de2:	68 ee       	ldi	r22, 0xE8	; 232
     de4:	73 e0       	ldi	r23, 0x03	; 3
     de6:	2c e9       	ldi	r18, 0x9C	; 156
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	ed e0       	ldi	r30, 0x0D	; 13
     df0:	ee 2e       	mov	r14, r30
     df2:	e3 e0       	ldi	r30, 0x03	; 3
     df4:	fe 2e       	mov	r15, r30
     df6:	01 2d       	mov	r16, r1
     df8:	11 2d       	mov	r17, r1
     dfa:	ba ec       	ldi	r27, 0xCA	; 202
     dfc:	cb 2e       	mov	r12, r27
     dfe:	b2 e0       	ldi	r27, 0x02	; 2
     e00:	db 2e       	mov	r13, r27
     e02:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  trtCreateTask(get_Fan_Speed, 1000, SECONDS2TICKS(0.05), SECONDS2TICKS(0.2), &(args[2]));
     e06:	81 e9       	ldi	r24, 0x91	; 145
     e08:	98 e0       	ldi	r25, 0x08	; 8
     e0a:	68 ee       	ldi	r22, 0xE8	; 232
     e0c:	73 e0       	ldi	r23, 0x03	; 3
     e0e:	2d e0       	ldi	r18, 0x0D	; 13
     e10:	33 e0       	ldi	r19, 0x03	; 3
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	a5 e3       	ldi	r26, 0x35	; 53
     e18:	ea 2e       	mov	r14, r26
     e1a:	ac e0       	ldi	r26, 0x0C	; 12
     e1c:	fa 2e       	mov	r15, r26
     e1e:	01 2d       	mov	r16, r1
     e20:	11 2d       	mov	r17, r1
     e22:	fc ec       	ldi	r31, 0xCC	; 204
     e24:	cf 2e       	mov	r12, r31
     e26:	f2 e0       	ldi	r31, 0x02	; 2
     e28:	df 2e       	mov	r13, r31
     e2a:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     e2e:	83 b7       	in	r24, 0x33	; 51
     e30:	81 7f       	andi	r24, 0xF1	; 241
     e32:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     e34:	83 b7       	in	r24, 0x33	; 51
     e36:	81 60       	ori	r24, 0x01	; 1
     e38:	83 bf       	out	0x33, r24	; 51
  while (1) 
  begin
  	sleep_cpu();
     e3a:	88 95       	sleep
     e3c:	fe cf       	rjmp	.-4      	; 0xe3a <main+0xfa>

00000e3e <get_User_Input>:
end
*/

// --- define task 1  ----------------------------------------
void get_User_Input(void* args) 
  begin
     e3e:	2f 92       	push	r2
     e40:	3f 92       	push	r3
     e42:	4f 92       	push	r4
     e44:	5f 92       	push	r5
     e46:	6f 92       	push	r6
     e48:	7f 92       	push	r7
     e4a:	8f 92       	push	r8
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <get_User_Input+0x26>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <get_User_Input+0x28>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <get_User_Input+0x2a>
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %d", cmd, &inputValue) ;
     e6c:	23 e0       	ldi	r18, 0x03	; 3
     e6e:	22 2e       	mov	r2, r18
     e70:	31 2c       	mov	r3, r1
     e72:	2c 0e       	add	r2, r28
     e74:	3d 1e       	adc	r3, r29
     e76:	2e 01       	movw	r4, r28
     e78:	08 94       	sec
     e7a:	41 1c       	adc	r4, r1
     e7c:	51 1c       	adc	r5, r1
		
		if (cmd[0] == 's')
		begin
			trtWait(SEM_SHARED_S) ;
			s_value = inputValue;
			fprintf(stdout,"value of s changed to %d\n\n",inputValue);
     e7e:	90 e1       	ldi	r25, 0x10	; 16
     e80:	69 2e       	mov	r6, r25
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	79 2e       	mov	r7, r25
		end
		if (cmd[0] == 'p')
		begin
			trtWait(SEM_SHARED_P) ;
			p_value = inputValue;
			fprintf(stdout,"value of p changed to %d\n\n",inputValue);
     e86:	8b e2       	ldi	r24, 0x2B	; 43
     e88:	88 2e       	mov	r8, r24
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	98 2e       	mov	r9, r24
		end
		if (cmd[0] == 'i')
		begin
			trtWait(SEM_SHARED_I) ;
			i_value = inputValue;
			fprintf(stdout,"value of i changed to %d\n\n",inputValue);
     e8e:	06 e4       	ldi	r16, 0x46	; 70
     e90:	a0 2e       	mov	r10, r16
     e92:	01 e0       	ldi	r16, 0x01	; 1
     e94:	b0 2e       	mov	r11, r16
		end
		if (cmd[0] == 'd')
		begin
			trtWait(SEM_SHARED_D) ;
			d_value = inputValue;
			fprintf(stdout,"value of d changed to %d\n\n",inputValue);
     e96:	11 e6       	ldi	r17, 0x61	; 97
     e98:	c1 2e       	mov	r12, r17
     e9a:	11 e0       	ldi	r17, 0x01	; 1
     e9c:	d1 2e       	mov	r13, r17
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     e9e:	60 91 52 03 	lds	r22, 0x0352
     ea2:	70 91 53 03 	lds	r23, 0x0353
     ea6:	8e e3       	ldi	r24, 0x3E	; 62
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
		fscanf(stdin, "%s %d", cmd, &inputValue) ;
     eae:	8d b7       	in	r24, 0x3d	; 61
     eb0:	9e b7       	in	r25, 0x3e	; 62
     eb2:	08 97       	sbiw	r24, 0x08	; 8
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	9e bf       	out	0x3e, r25	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	8d bf       	out	0x3d, r24	; 61
     ebe:	ed b7       	in	r30, 0x3d	; 61
     ec0:	fe b7       	in	r31, 0x3e	; 62
     ec2:	31 96       	adiw	r30, 0x01	; 1
     ec4:	80 91 50 03 	lds	r24, 0x0350
     ec8:	90 91 51 03 	lds	r25, 0x0351
     ecc:	ad b7       	in	r26, 0x3d	; 61
     ece:	be b7       	in	r27, 0x3e	; 62
     ed0:	12 96       	adiw	r26, 0x02	; 2
     ed2:	9c 93       	st	X, r25
     ed4:	8e 93       	st	-X, r24
     ed6:	11 97       	sbiw	r26, 0x01	; 1
     ed8:	8a e0       	ldi	r24, 0x0A	; 10
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	93 83       	std	Z+3, r25	; 0x03
     ede:	82 83       	std	Z+2, r24	; 0x02
     ee0:	35 82       	std	Z+5, r3	; 0x05
     ee2:	24 82       	std	Z+4, r2	; 0x04
     ee4:	57 82       	std	Z+7, r5	; 0x07
     ee6:	46 82       	std	Z+6, r4	; 0x06
     ee8:	0e 94 3f 0c 	call	0x187e	; 0x187e <fscanf>
		//trtWait(SEM_STRING_DONE);

		// update shared leds
		
		if (cmd[0] == 's')
     eec:	ad b7       	in	r26, 0x3d	; 61
     eee:	be b7       	in	r27, 0x3e	; 62
     ef0:	18 96       	adiw	r26, 0x08	; 8
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	be bf       	out	0x3e, r27	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	ad bf       	out	0x3d, r26	; 61
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	83 37       	cpi	r24, 0x73	; 115
     f00:	59 f5       	brne	.+86     	; 0xf58 <get_User_Input+0x11a>
		begin
			trtWait(SEM_SHARED_S) ;
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			s_value = inputValue;
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	3a 81       	ldd	r19, Y+2	; 0x02
     f0c:	c9 01       	movw	r24, r18
     f0e:	90 93 e2 02 	sts	0x02E2, r25
     f12:	80 93 e1 02 	sts	0x02E1, r24
			fprintf(stdout,"value of s changed to %d\n\n",inputValue);
     f16:	00 d0       	rcall	.+0      	; 0xf18 <get_User_Input+0xda>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <get_User_Input+0xdc>
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <get_User_Input+0xde>
     f1c:	ed b7       	in	r30, 0x3d	; 61
     f1e:	fe b7       	in	r31, 0x3e	; 62
     f20:	31 96       	adiw	r30, 0x01	; 1
     f22:	80 91 52 03 	lds	r24, 0x0352
     f26:	90 91 53 03 	lds	r25, 0x0353
     f2a:	ad b7       	in	r26, 0x3d	; 61
     f2c:	be b7       	in	r27, 0x3e	; 62
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	9c 93       	st	X, r25
     f32:	8e 93       	st	-X, r24
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	73 82       	std	Z+3, r7	; 0x03
     f38:	62 82       	std	Z+2, r6	; 0x02
     f3a:	24 83       	std	Z+4, r18	; 0x04
     f3c:	35 83       	std	Z+5, r19	; 0x05
     f3e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fprintf>
			trtSignal(SEM_SHARED_S);
     f42:	8d b7       	in	r24, 0x3d	; 61
     f44:	9e b7       	in	r25, 0x3e	; 62
     f46:	06 96       	adiw	r24, 0x06	; 6
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	9e bf       	out	0x3e, r25	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	8d bf       	out	0x3d, r24	; 61
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'p')
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	80 37       	cpi	r24, 0x70	; 112
     f5c:	a9 f5       	brne	.+106    	; 0xfc8 <get_User_Input+0x18a>
		begin
			trtWait(SEM_SHARED_P) ;
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			p_value = inputValue;
     f64:	09 81       	ldd	r16, Y+1	; 0x01
     f66:	1a 81       	ldd	r17, Y+2	; 0x02
     f68:	b8 01       	movw	r22, r16
     f6a:	88 27       	eor	r24, r24
     f6c:	77 fd       	sbrc	r23, 7
     f6e:	80 95       	com	r24
     f70:	98 2f       	mov	r25, r24
     f72:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__floatsisf>
     f76:	60 93 e8 02 	sts	0x02E8, r22
     f7a:	70 93 e9 02 	sts	0x02E9, r23
     f7e:	80 93 ea 02 	sts	0x02EA, r24
     f82:	90 93 eb 02 	sts	0x02EB, r25
			fprintf(stdout,"value of p changed to %d\n\n",inputValue);
     f86:	00 d0       	rcall	.+0      	; 0xf88 <get_User_Input+0x14a>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <get_User_Input+0x14c>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <get_User_Input+0x14e>
     f8c:	ed b7       	in	r30, 0x3d	; 61
     f8e:	fe b7       	in	r31, 0x3e	; 62
     f90:	31 96       	adiw	r30, 0x01	; 1
     f92:	80 91 52 03 	lds	r24, 0x0352
     f96:	90 91 53 03 	lds	r25, 0x0353
     f9a:	ad b7       	in	r26, 0x3d	; 61
     f9c:	be b7       	in	r27, 0x3e	; 62
     f9e:	12 96       	adiw	r26, 0x02	; 2
     fa0:	9c 93       	st	X, r25
     fa2:	8e 93       	st	-X, r24
     fa4:	11 97       	sbiw	r26, 0x01	; 1
     fa6:	93 82       	std	Z+3, r9	; 0x03
     fa8:	82 82       	std	Z+2, r8	; 0x02
     faa:	15 83       	std	Z+5, r17	; 0x05
     fac:	04 83       	std	Z+4, r16	; 0x04
     fae:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fprintf>
			trtSignal(SEM_SHARED_P);
     fb2:	8d b7       	in	r24, 0x3d	; 61
     fb4:	9e b7       	in	r25, 0x3e	; 62
     fb6:	06 96       	adiw	r24, 0x06	; 6
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	9e bf       	out	0x3e, r25	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	8d bf       	out	0x3d, r24	; 61
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'i')
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	89 36       	cpi	r24, 0x69	; 105
     fcc:	a9 f5       	brne	.+106    	; 0x1038 <get_User_Input+0x1fa>
		begin
			trtWait(SEM_SHARED_I) ;
     fce:	85 e0       	ldi	r24, 0x05	; 5
     fd0:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			i_value = inputValue;
     fd4:	09 81       	ldd	r16, Y+1	; 0x01
     fd6:	1a 81       	ldd	r17, Y+2	; 0x02
     fd8:	b8 01       	movw	r22, r16
     fda:	88 27       	eor	r24, r24
     fdc:	77 fd       	sbrc	r23, 7
     fde:	80 95       	com	r24
     fe0:	98 2f       	mov	r25, r24
     fe2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__floatsisf>
     fe6:	60 93 ec 02 	sts	0x02EC, r22
     fea:	70 93 ed 02 	sts	0x02ED, r23
     fee:	80 93 ee 02 	sts	0x02EE, r24
     ff2:	90 93 ef 02 	sts	0x02EF, r25
			fprintf(stdout,"value of i changed to %d\n\n",inputValue);
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <get_User_Input+0x1ba>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <get_User_Input+0x1bc>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <get_User_Input+0x1be>
     ffc:	ed b7       	in	r30, 0x3d	; 61
     ffe:	fe b7       	in	r31, 0x3e	; 62
    1000:	31 96       	adiw	r30, 0x01	; 1
    1002:	80 91 52 03 	lds	r24, 0x0352
    1006:	90 91 53 03 	lds	r25, 0x0353
    100a:	ad b7       	in	r26, 0x3d	; 61
    100c:	be b7       	in	r27, 0x3e	; 62
    100e:	12 96       	adiw	r26, 0x02	; 2
    1010:	9c 93       	st	X, r25
    1012:	8e 93       	st	-X, r24
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	b3 82       	std	Z+3, r11	; 0x03
    1018:	a2 82       	std	Z+2, r10	; 0x02
    101a:	15 83       	std	Z+5, r17	; 0x05
    101c:	04 83       	std	Z+4, r16	; 0x04
    101e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fprintf>
			trtSignal(SEM_SHARED_I);
    1022:	8d b7       	in	r24, 0x3d	; 61
    1024:	9e b7       	in	r25, 0x3e	; 62
    1026:	06 96       	adiw	r24, 0x06	; 6
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	9e bf       	out	0x3e, r25	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	8d bf       	out	0x3d, r24	; 61
    1032:	85 e0       	ldi	r24, 0x05	; 5
    1034:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'd')
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	84 36       	cpi	r24, 0x64	; 100
    103c:	a9 f5       	brne	.+106    	; 0x10a8 <get_User_Input+0x26a>
		begin
			trtWait(SEM_SHARED_D) ;
    103e:	86 e0       	ldi	r24, 0x06	; 6
    1040:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			d_value = inputValue;
    1044:	09 81       	ldd	r16, Y+1	; 0x01
    1046:	1a 81       	ldd	r17, Y+2	; 0x02
    1048:	b8 01       	movw	r22, r16
    104a:	88 27       	eor	r24, r24
    104c:	77 fd       	sbrc	r23, 7
    104e:	80 95       	com	r24
    1050:	98 2f       	mov	r25, r24
    1052:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__floatsisf>
    1056:	60 93 e4 02 	sts	0x02E4, r22
    105a:	70 93 e5 02 	sts	0x02E5, r23
    105e:	80 93 e6 02 	sts	0x02E6, r24
    1062:	90 93 e7 02 	sts	0x02E7, r25
			fprintf(stdout,"value of d changed to %d\n\n",inputValue);
    1066:	00 d0       	rcall	.+0      	; 0x1068 <get_User_Input+0x22a>
    1068:	00 d0       	rcall	.+0      	; 0x106a <get_User_Input+0x22c>
    106a:	00 d0       	rcall	.+0      	; 0x106c <get_User_Input+0x22e>
    106c:	ed b7       	in	r30, 0x3d	; 61
    106e:	fe b7       	in	r31, 0x3e	; 62
    1070:	31 96       	adiw	r30, 0x01	; 1
    1072:	80 91 52 03 	lds	r24, 0x0352
    1076:	90 91 53 03 	lds	r25, 0x0353
    107a:	ad b7       	in	r26, 0x3d	; 61
    107c:	be b7       	in	r27, 0x3e	; 62
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	9c 93       	st	X, r25
    1082:	8e 93       	st	-X, r24
    1084:	11 97       	sbiw	r26, 0x01	; 1
    1086:	d3 82       	std	Z+3, r13	; 0x03
    1088:	c2 82       	std	Z+2, r12	; 0x02
    108a:	15 83       	std	Z+5, r17	; 0x05
    108c:	04 83       	std	Z+4, r16	; 0x04
    108e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <fprintf>
			trtSignal(SEM_SHARED_D);
    1092:	8d b7       	in	r24, 0x3d	; 61
    1094:	9e b7       	in	r25, 0x3e	; 62
    1096:	06 96       	adiw	r24, 0x06	; 6
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	9e bf       	out	0x3e, r25	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	8d bf       	out	0x3d, r24	; 61
    10a2:	86 e0       	ldi	r24, 0x06	; 6
    10a4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    10a8:	20 91 47 03 	lds	r18, 0x0347
    10ac:	30 91 48 03 	lds	r19, 0x0348
    10b0:	40 91 49 03 	lds	r20, 0x0349
    10b4:	50 91 4a 03 	lds	r21, 0x034A
    10b8:	a9 01       	movw	r20, r18
    10ba:	33 27       	eor	r19, r19
    10bc:	22 27       	eor	r18, r18
    10be:	60 91 84 00 	lds	r22, 0x0084
    10c2:	70 91 85 00 	lds	r23, 0x0085
		end
		
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
    10c6:	e0 90 84 00 	lds	r14, 0x0084
    10ca:	f0 90 85 00 	lds	r15, 0x0085
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	62 0f       	add	r22, r18
    10d4:	73 1f       	adc	r23, r19
    10d6:	84 1f       	adc	r24, r20
    10d8:	95 1f       	adc	r25, r21
    10da:	66 5e       	subi	r22, 0xE6	; 230
    10dc:	79 4f       	sbci	r23, 0xF9	; 249
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	00 e0       	ldi	r16, 0x00	; 0
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	2e 0d       	add	r18, r14
    10e8:	3f 1d       	adc	r19, r15
    10ea:	40 1f       	adc	r20, r16
    10ec:	51 1f       	adc	r21, r17
    10ee:	21 5b       	subi	r18, 0xB1	; 177
    10f0:	3d 4e       	sbci	r19, 0xED	; 237
    10f2:	4f 4f       	sbci	r20, 0xFF	; 255
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
    10fa:	d1 ce       	rjmp	.-606    	; 0xe9e <get_User_Input+0x60>

000010fc <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    10fc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <LCDinit>
	LCDcursorOFF();
    1100:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LCDcursorOFF>
	LCDclr();	//clear the display
    1104:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <LCDclr>
	LCDGotoXY(0,0);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 98 09 	call	0x1330	; 0x1330 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    1110:	8c e8       	ldi	r24, 0x8C	; 140
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 a7 09 	call	0x134e	; 0x134e <CopyStringtoLCD>
	LCD_char_count = 0;
    111c:	10 92 e3 02 	sts	0x02E3, r1
end
    1120:	08 95       	ret

00001122 <get_Fan_Speed>:

// --- define task 3  ----------------------------------------
// writes the desired fan speed and the current fan speed to the LCD
// approx five times a second
void get_Fan_Speed(void* args) 
  begin	
    1122:	af 92       	push	r10
    1124:	bf 92       	push	r11
    1126:	cf 92       	push	r12
    1128:	df 92       	push	r13
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
  	uint32_t rel, dead ;
	timer2_init();
    1136:	0e 94 31 05 	call	0xa62	; 0xa62 <timer2_init>
	timer0_init();    // sets up the fast pwm
    113a:	0e 94 40 05 	call	0xa80	; 0xa80 <timer0_init>
	LCD_init();    // init LCD for our use
    113e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_init>
	port_init();    // init port c
    1142:	0e 94 27 05 	call	0xa4e	; 0xa4e <port_init>

	while(1)
	begin
		trtWait(SEM_SHARED_S) ;
		sprintf(lcd_buffer,"input RPM: %-i ", s_value);
    1146:	ce ec       	ldi	r28, 0xCE	; 206
    1148:	d2 e0       	ldi	r29, 0x02	; 2
    114a:	ec e7       	ldi	r30, 0x7C	; 124
    114c:	ae 2e       	mov	r10, r30
    114e:	e1 e0       	ldi	r30, 0x01	; 1
    1150:	be 2e       	mov	r11, r30
		trtSignal(SEM_SHARED_S) ;
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, strlen(lcd_buffer));

		trtWait(SEM_SHARED_RPM);
		sprintf(lcd_buffer,"fan RPM: %-i   ", RPM);
    1152:	7c e8       	ldi	r23, 0x8C	; 140
    1154:	c7 2e       	mov	r12, r23
    1156:	71 e0       	ldi	r23, 0x01	; 1
    1158:	d7 2e       	mov	r13, r23
	LCD_init();    // init LCD for our use
	port_init();    // init port c

	while(1)
	begin
		trtWait(SEM_SHARED_S) ;
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		sprintf(lcd_buffer,"input RPM: %-i ", s_value);
    1160:	80 91 e1 02 	lds	r24, 0x02E1
    1164:	90 91 e2 02 	lds	r25, 0x02E2
    1168:	00 d0       	rcall	.+0      	; 0x116a <get_Fan_Speed+0x48>
    116a:	00 d0       	rcall	.+0      	; 0x116c <get_Fan_Speed+0x4a>
    116c:	00 d0       	rcall	.+0      	; 0x116e <get_Fan_Speed+0x4c>
    116e:	ed b7       	in	r30, 0x3d	; 61
    1170:	fe b7       	in	r31, 0x3e	; 62
    1172:	31 96       	adiw	r30, 0x01	; 1
    1174:	ad b7       	in	r26, 0x3d	; 61
    1176:	be b7       	in	r27, 0x3e	; 62
    1178:	12 96       	adiw	r26, 0x02	; 2
    117a:	dc 93       	st	X, r29
    117c:	ce 93       	st	-X, r28
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	b3 82       	std	Z+3, r11	; 0x03
    1182:	a2 82       	std	Z+2, r10	; 0x02
    1184:	95 83       	std	Z+5, r25	; 0x05
    1186:	84 83       	std	Z+4, r24	; 0x04
    1188:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <sprintf>
		trtSignal(SEM_SHARED_S) ;
    118c:	8d b7       	in	r24, 0x3d	; 61
    118e:	9e b7       	in	r25, 0x3e	; 62
    1190:	06 96       	adiw	r24, 0x06	; 6
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	9e bf       	out	0x3e, r25	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	8d bf       	out	0x3d, r24	; 61
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		LCDGotoXY(0, 0);
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	0e 94 98 09 	call	0x1330	; 0x1330 <LCDGotoXY>
		LCDstring(lcd_buffer, strlen(lcd_buffer));
    11aa:	fe 01       	movw	r30, r28
    11ac:	01 90       	ld	r0, Z+
    11ae:	00 20       	and	r0, r0
    11b0:	e9 f7       	brne	.-6      	; 0x11ac <get_Fan_Speed+0x8a>
    11b2:	31 97       	sbiw	r30, 0x01	; 1
    11b4:	ee 5c       	subi	r30, 0xCE	; 206
    11b6:	f2 40       	sbci	r31, 0x02	; 2
    11b8:	ce 01       	movw	r24, r28
    11ba:	6e 2f       	mov	r22, r30
    11bc:	0e 94 83 09 	call	0x1306	; 0x1306 <LCDstring>

		trtWait(SEM_SHARED_RPM);
    11c0:	87 e0       	ldi	r24, 0x07	; 7
    11c2:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		sprintf(lcd_buffer,"fan RPM: %-i   ", RPM);
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <get_Fan_Speed+0xa6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <get_Fan_Speed+0xa8>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <get_Fan_Speed+0xaa>
    11cc:	ed b7       	in	r30, 0x3d	; 61
    11ce:	fe b7       	in	r31, 0x3e	; 62
    11d0:	31 96       	adiw	r30, 0x01	; 1
    11d2:	ad b7       	in	r26, 0x3d	; 61
    11d4:	be b7       	in	r27, 0x3e	; 62
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	dc 93       	st	X, r29
    11da:	ce 93       	st	-X, r28
    11dc:	11 97       	sbiw	r26, 0x01	; 1
    11de:	d3 82       	std	Z+3, r13	; 0x03
    11e0:	c2 82       	std	Z+2, r12	; 0x02
    11e2:	80 91 df 02 	lds	r24, 0x02DF
    11e6:	90 91 e0 02 	lds	r25, 0x02E0
    11ea:	95 83       	std	Z+5, r25	; 0x05
    11ec:	84 83       	std	Z+4, r24	; 0x04
    11ee:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <sprintf>
		trtSignal(SEM_SHARED_RPM);
    11f2:	8d b7       	in	r24, 0x3d	; 61
    11f4:	9e b7       	in	r25, 0x3e	; 62
    11f6:	06 96       	adiw	r24, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	9e bf       	out	0x3e, r25	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	8d bf       	out	0x3d, r24	; 61
    1202:	87 e0       	ldi	r24, 0x07	; 7
    1204:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		LCDGotoXY(0, 1);
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	0e 94 98 09 	call	0x1330	; 0x1330 <LCDGotoXY>
		LCDstring(lcd_buffer, strlen(lcd_buffer));
    1210:	fe 01       	movw	r30, r28
    1212:	01 90       	ld	r0, Z+
    1214:	00 20       	and	r0, r0
    1216:	e9 f7       	brne	.-6      	; 0x1212 <get_Fan_Speed+0xf0>
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	ee 5c       	subi	r30, 0xCE	; 206
    121c:	f2 40       	sbci	r31, 0x02	; 2
    121e:	ce 01       	movw	r24, r28
    1220:	6e 2f       	mov	r22, r30
    1222:	0e 94 83 09 	call	0x1306	; 0x1306 <LCDstring>
    1226:	20 91 47 03 	lds	r18, 0x0347
    122a:	30 91 48 03 	lds	r19, 0x0348
    122e:	40 91 49 03 	lds	r20, 0x0349
    1232:	50 91 4a 03 	lds	r21, 0x034A
    1236:	a9 01       	movw	r20, r18
    1238:	33 27       	eor	r19, r19
    123a:	22 27       	eor	r18, r18
    123c:	60 91 84 00 	lds	r22, 0x0084
    1240:	70 91 85 00 	lds	r23, 0x0085
		

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
    1244:	e0 90 84 00 	lds	r14, 0x0084
    1248:	f0 90 85 00 	lds	r15, 0x0085
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	62 0f       	add	r22, r18
    1252:	73 1f       	adc	r23, r19
    1254:	84 1f       	adc	r24, r20
    1256:	95 1f       	adc	r25, r21
    1258:	66 5e       	subi	r22, 0xE6	; 230
    125a:	79 4f       	sbci	r23, 0xF9	; 249
    125c:	8f 4f       	sbci	r24, 0xFF	; 255
    125e:	9f 4f       	sbci	r25, 0xFF	; 255
    1260:	00 e0       	ldi	r16, 0x00	; 0
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	2e 0d       	add	r18, r14
    1266:	3f 1d       	adc	r19, r15
    1268:	40 1f       	adc	r20, r16
    126a:	51 1f       	adc	r21, r17
    126c:	21 5b       	subi	r18, 0xB1	; 177
    126e:	3d 4e       	sbci	r19, 0xED	; 237
    1270:	4f 4f       	sbci	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
    1278:	70 cf       	rjmp	.-288    	; 0x115a <get_Fan_Speed+0x38>

0000127a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    127a:	28 2f       	mov	r18, r24
    127c:	20 7f       	andi	r18, 0xF0	; 240
    127e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1280:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1282:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1284:	20 e4       	ldi	r18, 0x40	; 64
    1286:	3f e1       	ldi	r19, 0x1F	; 31
    1288:	f9 01       	movw	r30, r18
    128a:	31 97       	sbiw	r30, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    128e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1290:	40 98       	cbi	0x08, 0	; 8
    1292:	f9 01       	movw	r30, r18
    1294:	31 97       	sbiw	r30, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	44 e0       	ldi	r20, 0x04	; 4
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	4a 95       	dec	r20
    12a2:	e1 f7       	brne	.-8      	; 0x129c <LCDsendChar+0x22>
    12a4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    12a6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    12a8:	42 9a       	sbi	0x08, 2	; 8
    12aa:	c9 01       	movw	r24, r18
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    12b0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    12b2:	40 98       	cbi	0x08, 0	; 8
    12b4:	c9 01       	movw	r24, r18
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    12ba:	08 95       	ret

000012bc <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    12bc:	28 2f       	mov	r18, r24
    12be:	20 7f       	andi	r18, 0xF0	; 240
    12c0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    12c2:	42 9a       	sbi	0x08, 2	; 8
    12c4:	20 e4       	ldi	r18, 0x40	; 64
    12c6:	3f e1       	ldi	r19, 0x1F	; 31
    12c8:	f9 01       	movw	r30, r18
    12ca:	31 97       	sbiw	r30, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    12ce:	42 98       	cbi	0x08, 2	; 8
    12d0:	f9 01       	movw	r30, r18
    12d2:	31 97       	sbiw	r30, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	54 e0       	ldi	r21, 0x04	; 4
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	5a 95       	dec	r21
    12e0:	e1 f7       	brne	.-8      	; 0x12da <LCDsendCommand+0x1e>
    12e2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    12e4:	42 9a       	sbi	0x08, 2	; 8
    12e6:	c9 01       	movw	r24, r18
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    12ec:	42 98       	cbi	0x08, 2	; 8
    12ee:	c9 01       	movw	r24, r18
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    12f4:	08 95       	ret

000012f6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    12fc:	08 95       	ret

000012fe <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    1304:	08 95       	ret

00001306 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	49 f0       	breq	.+18     	; 0x1326 <LCDstring+0x20>
    1314:	ec 01       	movw	r28, r24
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    131a:	89 91       	ld	r24, Y+
    131c:	0e 94 3d 09 	call	0x127a	; 0x127a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1320:	1f 5f       	subi	r17, 0xFF	; 255
    1322:	10 17       	cp	r17, r16
    1324:	d0 f3       	brcs	.-12     	; 0x131a <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1330:	62 30       	cpi	r22, 0x02	; 2
    1332:	31 f0       	breq	.+12     	; 0x1340 <LCDGotoXY+0x10>
    1334:	63 30       	cpi	r22, 0x03	; 3
    1336:	31 f0       	breq	.+12     	; 0x1344 <LCDGotoXY+0x14>
    1338:	61 30       	cpi	r22, 0x01	; 1
    133a:	29 f4       	brne	.+10     	; 0x1346 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    133c:	80 5c       	subi	r24, 0xC0	; 192
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1340:	8c 5e       	subi	r24, 0xEC	; 236
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1344:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
	
}
    134c:	08 95       	ret

0000134e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
    1356:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1358:	64 2f       	mov	r22, r20
    135a:	0e 94 98 09 	call	0x1330	; 0x1330 <LCDGotoXY>
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1362:	0e 94 3d 09 	call	0x127a	; 0x127a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1366:	1f 5f       	subi	r17, 0xFF	; 255
    1368:	fe 01       	movw	r30, r28
    136a:	e1 0f       	add	r30, r17
    136c:	f1 1d       	adc	r31, r1
    136e:	84 91       	lpm	r24, Z+
    1370:	88 23       	and	r24, r24
    1372:	b9 f7       	brne	.-18     	; 0x1362 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	08 95       	ret

0000137c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	7c 01       	movw	r14, r24
    138a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    138c:	11 0f       	add	r17, r17
    138e:	11 0f       	add	r17, r17
    1390:	11 0f       	add	r17, r17
    1392:	10 64       	ori	r17, 0x40	; 64
    1394:	c0 e0       	ldi	r28, 0x00	; 0
    1396:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1398:	f7 01       	movw	r30, r14
    139a:	ec 0f       	add	r30, r28
    139c:	fd 1f       	adc	r31, r29
    139e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    13a0:	81 2f       	mov	r24, r17
    13a2:	8c 0f       	add	r24, r28
    13a4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
		LCDsendChar(pcc);
    13a8:	80 2f       	mov	r24, r16
    13aa:	0e 94 3d 09 	call	0x127a	; 0x127a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    13ae:	21 96       	adiw	r28, 0x01	; 1
    13b0:	c8 30       	cpi	r28, 0x08	; 8
    13b2:	d1 05       	cpc	r29, r1
    13b4:	89 f7       	brne	.-30     	; 0x1398 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	08 95       	ret

000013c4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	80 e6       	ldi	r24, 0x60	; 96
    13cc:	9a ee       	ldi	r25, 0xEA	; 234
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    13d2:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    13d4:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    13d6:	87 b1       	in	r24, 0x07	; 7
    13d8:	80 6f       	ori	r24, 0xF0	; 240
    13da:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    13dc:	87 b1       	in	r24, 0x07	; 7
    13de:	87 60       	ori	r24, 0x07	; 7
    13e0:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    13e2:	80 e3       	ldi	r24, 0x30	; 48
    13e4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    13e6:	42 9a       	sbi	0x08, 2	; 8
    13e8:	20 e4       	ldi	r18, 0x40	; 64
    13ea:	3f e1       	ldi	r19, 0x1F	; 31
    13ec:	f9 01       	movw	r30, r18
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13f2:	42 98       	cbi	0x08, 2	; 8
    13f4:	f9 01       	movw	r30, r18
    13f6:	31 97       	sbiw	r30, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    13fa:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    13fc:	42 9a       	sbi	0x08, 2	; 8
    13fe:	c9 01       	movw	r24, r18
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1404:	42 98       	cbi	0x08, 2	; 8
    1406:	c9 01       	movw	r24, r18
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    140c:	80 e2       	ldi	r24, 0x20	; 32
    140e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1410:	42 9a       	sbi	0x08, 2	; 8
    1412:	c9 01       	movw	r24, r18
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1418:	42 98       	cbi	0x08, 2	; 8
    141a:	c9 01       	movw	r24, r18
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1420:	88 e2       	ldi	r24, 0x28	; 40
    1422:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1426:	8c e0       	ldi	r24, 0x0C	; 12
    1428:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
    142c:	c6 e0       	ldi	r28, 0x06	; 6
    142e:	d1 e0       	ldi	r29, 0x01	; 1
    1430:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1432:	16 2f       	mov	r17, r22
    1434:	1f 5f       	subi	r17, 0xFF	; 255
    1436:	ce 01       	movw	r24, r28
    1438:	0e 94 be 09 	call	0x137c	; 0x137c <LCDdefinechar>
    143c:	28 96       	adiw	r28, 0x08	; 8
    143e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1440:	18 30       	cpi	r17, 0x08	; 8
    1442:	b9 f7       	brne	.-18     	; 0x1432 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	08 95       	ret

0000144c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	08 2f       	mov	r16, r24
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	04 c0       	rjmp	.+8      	; 0x145e <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1456:	8e e1       	ldi	r24, 0x1E	; 30
    1458:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    145c:	1f 5f       	subi	r17, 0xFF	; 255
    145e:	10 17       	cp	r17, r16
    1460:	d0 f3       	brcs	.-12     	; 0x1456 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	08 2f       	mov	r16, r24
    146e:	10 e0       	ldi	r17, 0x00	; 0
    1470:	04 c0       	rjmp	.+8      	; 0x147a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1472:	88 e1       	ldi	r24, 0x18	; 24
    1474:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1478:	1f 5f       	subi	r17, 0xFF	; 255
    147a:	10 17       	cp	r17, r16
    147c:	d0 f3       	brcs	.-12     	; 0x1472 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	08 95       	ret

00001484 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1484:	8e e0       	ldi	r24, 0x0E	; 14
    1486:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    148a:	08 95       	ret

0000148c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    148c:	8f e0       	ldi	r24, 0x0F	; 15
    148e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    1492:	08 95       	ret

00001494 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1494:	8c e0       	ldi	r24, 0x0C	; 12
    1496:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    149a:	08 95       	ret

0000149c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    149c:	88 e0       	ldi	r24, 0x08	; 8
    149e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    14a2:	08 95       	ret

000014a4 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    14a4:	8c e0       	ldi	r24, 0x0C	; 12
    14a6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
}
    14aa:	08 95       	ret

000014ac <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	08 2f       	mov	r16, r24
    14b2:	10 e0       	ldi	r17, 0x00	; 0
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    14b6:	80 e1       	ldi	r24, 0x10	; 16
    14b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    14bc:	1f 5f       	subi	r17, 0xFF	; 255
    14be:	10 17       	cp	r17, r16
    14c0:	d0 f3       	brcs	.-12     	; 0x14b6 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	08 2f       	mov	r16, r24
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    14d2:	84 e1       	ldi	r24, 0x14	; 20
    14d4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    14d8:	1f 5f       	subi	r17, 0xFF	; 255
    14da:	10 17       	cp	r17, r16
    14dc:	d0 f3       	brcs	.-12     	; 0x14d2 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	08 95       	ret

000014e4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    14f4:	96 e0       	ldi	r25, 0x06	; 6
    14f6:	89 9f       	mul	r24, r25
    14f8:	c0 01       	movw	r24, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	24 2f       	mov	r18, r20
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	ac 01       	movw	r20, r24
    1502:	42 9f       	mul	r20, r18
    1504:	c0 01       	movw	r24, r0
    1506:	43 9f       	mul	r20, r19
    1508:	90 0d       	add	r25, r0
    150a:	52 9f       	mul	r21, r18
    150c:	90 0d       	add	r25, r0
    150e:	11 24       	eor	r1, r1
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divmodhi4>
    1516:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1518:	cb 01       	movw	r24, r22
    151a:	66 e0       	ldi	r22, 0x06	; 6
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 3f 12 	call	0x247e	; 0x247e <__udivmodhi4>
    1522:	e8 2e       	mov	r14, r24
    1524:	ff 24       	eor	r15, r15
    1526:	00 e0       	ldi	r16, 0x00	; 0
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	12 c0       	rjmp	.+36     	; 0x1550 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    152c:	c8 01       	movw	r24, r16
    152e:	05 96       	adiw	r24, 0x05	; 5
    1530:	c8 17       	cp	r28, r24
    1532:	d9 07       	cpc	r29, r25
    1534:	10 f0       	brcs	.+4      	; 0x153a <LCDprogressBar+0x56>
    1536:	85 e0       	ldi	r24, 0x05	; 5
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    153a:	c0 17       	cp	r28, r16
    153c:	d1 07       	cpc	r29, r17
    153e:	10 f0       	brcs	.+4      	; 0x1544 <LCDprogressBar+0x60>
    1540:	8e 2d       	mov	r24, r14
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <LCDprogressBar+0x62>
    1544:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1546:	0e 94 3d 09 	call	0x127a	; 0x127a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    154a:	f3 94       	inc	r15
    154c:	0a 5f       	subi	r16, 0xFA	; 250
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	fd 14       	cp	r15, r13
    1552:	60 f3       	brcs	.-40     	; 0x152c <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	08 95       	ret

00001564 <__fixsfsi>:
    1564:	04 d0       	rcall	.+8      	; 0x156e <__fixunssfsi>
    1566:	68 94       	set
    1568:	b1 11       	cpse	r27, r1
    156a:	8d c0       	rjmp	.+282    	; 0x1686 <__fp_szero>
    156c:	08 95       	ret

0000156e <__fixunssfsi>:
    156e:	70 d0       	rcall	.+224    	; 0x1650 <__fp_splitA>
    1570:	88 f0       	brcs	.+34     	; 0x1594 <__fixunssfsi+0x26>
    1572:	9f 57       	subi	r25, 0x7F	; 127
    1574:	90 f0       	brcs	.+36     	; 0x159a <__fixunssfsi+0x2c>
    1576:	b9 2f       	mov	r27, r25
    1578:	99 27       	eor	r25, r25
    157a:	b7 51       	subi	r27, 0x17	; 23
    157c:	a0 f0       	brcs	.+40     	; 0x15a6 <__fixunssfsi+0x38>
    157e:	d1 f0       	breq	.+52     	; 0x15b4 <__fixunssfsi+0x46>
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	1a f0       	brmi	.+6      	; 0x1590 <__fixunssfsi+0x22>
    158a:	ba 95       	dec	r27
    158c:	c9 f7       	brne	.-14     	; 0x1580 <__fixunssfsi+0x12>
    158e:	12 c0       	rjmp	.+36     	; 0x15b4 <__fixunssfsi+0x46>
    1590:	b1 30       	cpi	r27, 0x01	; 1
    1592:	81 f0       	breq	.+32     	; 0x15b4 <__fixunssfsi+0x46>
    1594:	77 d0       	rcall	.+238    	; 0x1684 <__fp_zero>
    1596:	b1 e0       	ldi	r27, 0x01	; 1
    1598:	08 95       	ret
    159a:	74 c0       	rjmp	.+232    	; 0x1684 <__fp_zero>
    159c:	67 2f       	mov	r22, r23
    159e:	78 2f       	mov	r23, r24
    15a0:	88 27       	eor	r24, r24
    15a2:	b8 5f       	subi	r27, 0xF8	; 248
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <__fixunssfsi+0x46>
    15a6:	b9 3f       	cpi	r27, 0xF9	; 249
    15a8:	cc f3       	brlt	.-14     	; 0x159c <__fixunssfsi+0x2e>
    15aa:	86 95       	lsr	r24
    15ac:	77 95       	ror	r23
    15ae:	67 95       	ror	r22
    15b0:	b3 95       	inc	r27
    15b2:	d9 f7       	brne	.-10     	; 0x15aa <__fixunssfsi+0x3c>
    15b4:	3e f4       	brtc	.+14     	; 0x15c4 <__fixunssfsi+0x56>
    15b6:	90 95       	com	r25
    15b8:	80 95       	com	r24
    15ba:	70 95       	com	r23
    15bc:	61 95       	neg	r22
    15be:	7f 4f       	sbci	r23, 0xFF	; 255
    15c0:	8f 4f       	sbci	r24, 0xFF	; 255
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	08 95       	ret

000015c6 <__floatunsisf>:
    15c6:	e8 94       	clt
    15c8:	09 c0       	rjmp	.+18     	; 0x15dc <__floatsisf+0x12>

000015ca <__floatsisf>:
    15ca:	97 fb       	bst	r25, 7
    15cc:	3e f4       	brtc	.+14     	; 0x15dc <__floatsisf+0x12>
    15ce:	90 95       	com	r25
    15d0:	80 95       	com	r24
    15d2:	70 95       	com	r23
    15d4:	61 95       	neg	r22
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	8f 4f       	sbci	r24, 0xFF	; 255
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	99 23       	and	r25, r25
    15de:	a9 f0       	breq	.+42     	; 0x160a <__floatsisf+0x40>
    15e0:	f9 2f       	mov	r31, r25
    15e2:	96 e9       	ldi	r25, 0x96	; 150
    15e4:	bb 27       	eor	r27, r27
    15e6:	93 95       	inc	r25
    15e8:	f6 95       	lsr	r31
    15ea:	87 95       	ror	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	b7 95       	ror	r27
    15f2:	f1 11       	cpse	r31, r1
    15f4:	f8 cf       	rjmp	.-16     	; 0x15e6 <__floatsisf+0x1c>
    15f6:	fa f4       	brpl	.+62     	; 0x1636 <__floatsisf+0x6c>
    15f8:	bb 0f       	add	r27, r27
    15fa:	11 f4       	brne	.+4      	; 0x1600 <__floatsisf+0x36>
    15fc:	60 ff       	sbrs	r22, 0
    15fe:	1b c0       	rjmp	.+54     	; 0x1636 <__floatsisf+0x6c>
    1600:	6f 5f       	subi	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	8f 4f       	sbci	r24, 0xFF	; 255
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	16 c0       	rjmp	.+44     	; 0x1636 <__floatsisf+0x6c>
    160a:	88 23       	and	r24, r24
    160c:	11 f0       	breq	.+4      	; 0x1612 <__floatsisf+0x48>
    160e:	96 e9       	ldi	r25, 0x96	; 150
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <__floatsisf+0x6a>
    1612:	77 23       	and	r23, r23
    1614:	21 f0       	breq	.+8      	; 0x161e <__floatsisf+0x54>
    1616:	9e e8       	ldi	r25, 0x8E	; 142
    1618:	87 2f       	mov	r24, r23
    161a:	76 2f       	mov	r23, r22
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <__floatsisf+0x5e>
    161e:	66 23       	and	r22, r22
    1620:	71 f0       	breq	.+28     	; 0x163e <__floatsisf+0x74>
    1622:	96 e8       	ldi	r25, 0x86	; 134
    1624:	86 2f       	mov	r24, r22
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	2a f0       	brmi	.+10     	; 0x1636 <__floatsisf+0x6c>
    162c:	9a 95       	dec	r25
    162e:	66 0f       	add	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	da f7       	brpl	.-10     	; 0x162c <__floatsisf+0x62>
    1636:	88 0f       	add	r24, r24
    1638:	96 95       	lsr	r25
    163a:	87 95       	ror	r24
    163c:	97 f9       	bld	r25, 7
    163e:	08 95       	ret

00001640 <__fp_split3>:
    1640:	57 fd       	sbrc	r21, 7
    1642:	90 58       	subi	r25, 0x80	; 128
    1644:	44 0f       	add	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	59 f0       	breq	.+22     	; 0x1660 <__fp_splitA+0x10>
    164a:	5f 3f       	cpi	r21, 0xFF	; 255
    164c:	71 f0       	breq	.+28     	; 0x166a <__fp_splitA+0x1a>
    164e:	47 95       	ror	r20

00001650 <__fp_splitA>:
    1650:	88 0f       	add	r24, r24
    1652:	97 fb       	bst	r25, 7
    1654:	99 1f       	adc	r25, r25
    1656:	61 f0       	breq	.+24     	; 0x1670 <__fp_splitA+0x20>
    1658:	9f 3f       	cpi	r25, 0xFF	; 255
    165a:	79 f0       	breq	.+30     	; 0x167a <__fp_splitA+0x2a>
    165c:	87 95       	ror	r24
    165e:	08 95       	ret
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	14 06       	cpc	r1, r20
    1666:	55 1f       	adc	r21, r21
    1668:	f2 cf       	rjmp	.-28     	; 0x164e <__fp_split3+0xe>
    166a:	46 95       	lsr	r20
    166c:	f1 df       	rcall	.-30     	; 0x1650 <__fp_splitA>
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <__fp_splitA+0x30>
    1670:	16 16       	cp	r1, r22
    1672:	17 06       	cpc	r1, r23
    1674:	18 06       	cpc	r1, r24
    1676:	99 1f       	adc	r25, r25
    1678:	f1 cf       	rjmp	.-30     	; 0x165c <__fp_splitA+0xc>
    167a:	86 95       	lsr	r24
    167c:	71 05       	cpc	r23, r1
    167e:	61 05       	cpc	r22, r1
    1680:	08 94       	sec
    1682:	08 95       	ret

00001684 <__fp_zero>:
    1684:	e8 94       	clt

00001686 <__fp_szero>:
    1686:	bb 27       	eor	r27, r27
    1688:	66 27       	eor	r22, r22
    168a:	77 27       	eor	r23, r23
    168c:	cb 01       	movw	r24, r22
    168e:	97 f9       	bld	r25, 7
    1690:	08 95       	ret

00001692 <__mulsf3>:
    1692:	0b d0       	rcall	.+22     	; 0x16aa <__mulsf3x>
    1694:	78 c0       	rjmp	.+240    	; 0x1786 <__fp_round>
    1696:	69 d0       	rcall	.+210    	; 0x176a <__fp_pscA>
    1698:	28 f0       	brcs	.+10     	; 0x16a4 <__mulsf3+0x12>
    169a:	6e d0       	rcall	.+220    	; 0x1778 <__fp_pscB>
    169c:	18 f0       	brcs	.+6      	; 0x16a4 <__mulsf3+0x12>
    169e:	95 23       	and	r25, r21
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <__mulsf3+0x12>
    16a2:	5a c0       	rjmp	.+180    	; 0x1758 <__fp_inf>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <__fp_nan>
    16a6:	11 24       	eor	r1, r1
    16a8:	ee cf       	rjmp	.-36     	; 0x1686 <__fp_szero>

000016aa <__mulsf3x>:
    16aa:	ca df       	rcall	.-108    	; 0x1640 <__fp_split3>
    16ac:	a0 f3       	brcs	.-24     	; 0x1696 <__mulsf3+0x4>

000016ae <__mulsf3_pse>:
    16ae:	95 9f       	mul	r25, r21
    16b0:	d1 f3       	breq	.-12     	; 0x16a6 <__mulsf3+0x14>
    16b2:	95 0f       	add	r25, r21
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	55 1f       	adc	r21, r21
    16b8:	62 9f       	mul	r22, r18
    16ba:	f0 01       	movw	r30, r0
    16bc:	72 9f       	mul	r23, r18
    16be:	bb 27       	eor	r27, r27
    16c0:	f0 0d       	add	r31, r0
    16c2:	b1 1d       	adc	r27, r1
    16c4:	63 9f       	mul	r22, r19
    16c6:	aa 27       	eor	r26, r26
    16c8:	f0 0d       	add	r31, r0
    16ca:	b1 1d       	adc	r27, r1
    16cc:	aa 1f       	adc	r26, r26
    16ce:	64 9f       	mul	r22, r20
    16d0:	66 27       	eor	r22, r22
    16d2:	b0 0d       	add	r27, r0
    16d4:	a1 1d       	adc	r26, r1
    16d6:	66 1f       	adc	r22, r22
    16d8:	82 9f       	mul	r24, r18
    16da:	22 27       	eor	r18, r18
    16dc:	b0 0d       	add	r27, r0
    16de:	a1 1d       	adc	r26, r1
    16e0:	62 1f       	adc	r22, r18
    16e2:	73 9f       	mul	r23, r19
    16e4:	b0 0d       	add	r27, r0
    16e6:	a1 1d       	adc	r26, r1
    16e8:	62 1f       	adc	r22, r18
    16ea:	83 9f       	mul	r24, r19
    16ec:	a0 0d       	add	r26, r0
    16ee:	61 1d       	adc	r22, r1
    16f0:	22 1f       	adc	r18, r18
    16f2:	74 9f       	mul	r23, r20
    16f4:	33 27       	eor	r19, r19
    16f6:	a0 0d       	add	r26, r0
    16f8:	61 1d       	adc	r22, r1
    16fa:	23 1f       	adc	r18, r19
    16fc:	84 9f       	mul	r24, r20
    16fe:	60 0d       	add	r22, r0
    1700:	21 1d       	adc	r18, r1
    1702:	82 2f       	mov	r24, r18
    1704:	76 2f       	mov	r23, r22
    1706:	6a 2f       	mov	r22, r26
    1708:	11 24       	eor	r1, r1
    170a:	9f 57       	subi	r25, 0x7F	; 127
    170c:	50 40       	sbci	r21, 0x00	; 0
    170e:	8a f0       	brmi	.+34     	; 0x1732 <__mulsf3_pse+0x84>
    1710:	e1 f0       	breq	.+56     	; 0x174a <__mulsf3_pse+0x9c>
    1712:	88 23       	and	r24, r24
    1714:	4a f0       	brmi	.+18     	; 0x1728 <__mulsf3_pse+0x7a>
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	bb 1f       	adc	r27, r27
    171c:	66 1f       	adc	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	91 50       	subi	r25, 0x01	; 1
    1724:	50 40       	sbci	r21, 0x00	; 0
    1726:	a9 f7       	brne	.-22     	; 0x1712 <__mulsf3_pse+0x64>
    1728:	9e 3f       	cpi	r25, 0xFE	; 254
    172a:	51 05       	cpc	r21, r1
    172c:	70 f0       	brcs	.+28     	; 0x174a <__mulsf3_pse+0x9c>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <__fp_inf>
    1730:	aa cf       	rjmp	.-172    	; 0x1686 <__fp_szero>
    1732:	5f 3f       	cpi	r21, 0xFF	; 255
    1734:	ec f3       	brlt	.-6      	; 0x1730 <__mulsf3_pse+0x82>
    1736:	98 3e       	cpi	r25, 0xE8	; 232
    1738:	dc f3       	brlt	.-10     	; 0x1730 <__mulsf3_pse+0x82>
    173a:	86 95       	lsr	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	b7 95       	ror	r27
    1742:	f7 95       	ror	r31
    1744:	e7 95       	ror	r30
    1746:	9f 5f       	subi	r25, 0xFF	; 255
    1748:	c1 f7       	brne	.-16     	; 0x173a <__mulsf3_pse+0x8c>
    174a:	fe 2b       	or	r31, r30
    174c:	88 0f       	add	r24, r24
    174e:	91 1d       	adc	r25, r1
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	97 f9       	bld	r25, 7
    1756:	08 95       	ret

00001758 <__fp_inf>:
    1758:	97 f9       	bld	r25, 7
    175a:	9f 67       	ori	r25, 0x7F	; 127
    175c:	80 e8       	ldi	r24, 0x80	; 128
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	08 95       	ret

00001764 <__fp_nan>:
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	80 ec       	ldi	r24, 0xC0	; 192
    1768:	08 95       	ret

0000176a <__fp_pscA>:
    176a:	00 24       	eor	r0, r0
    176c:	0a 94       	dec	r0
    176e:	16 16       	cp	r1, r22
    1770:	17 06       	cpc	r1, r23
    1772:	18 06       	cpc	r1, r24
    1774:	09 06       	cpc	r0, r25
    1776:	08 95       	ret

00001778 <__fp_pscB>:
    1778:	00 24       	eor	r0, r0
    177a:	0a 94       	dec	r0
    177c:	12 16       	cp	r1, r18
    177e:	13 06       	cpc	r1, r19
    1780:	14 06       	cpc	r1, r20
    1782:	05 06       	cpc	r0, r21
    1784:	08 95       	ret

00001786 <__fp_round>:
    1786:	09 2e       	mov	r0, r25
    1788:	03 94       	inc	r0
    178a:	00 0c       	add	r0, r0
    178c:	11 f4       	brne	.+4      	; 0x1792 <__fp_round+0xc>
    178e:	88 23       	and	r24, r24
    1790:	52 f0       	brmi	.+20     	; 0x17a6 <__fp_round+0x20>
    1792:	bb 0f       	add	r27, r27
    1794:	40 f4       	brcc	.+16     	; 0x17a6 <__fp_round+0x20>
    1796:	bf 2b       	or	r27, r31
    1798:	11 f4       	brne	.+4      	; 0x179e <__fp_round+0x18>
    179a:	60 ff       	sbrs	r22, 0
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__fp_round+0x20>
    179e:	6f 5f       	subi	r22, 0xFF	; 255
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	8f 4f       	sbci	r24, 0xFF	; 255
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	08 95       	ret

000017a8 <exit>:
    17a8:	f8 94       	cli
    17aa:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <_exit>

000017ae <fprintf>:
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	9e 01       	movw	r18, r28
    17b8:	27 5f       	subi	r18, 0xF7	; 247
    17ba:	3f 4f       	sbci	r19, 0xFF	; 255
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	a9 01       	movw	r20, r18
    17c6:	0e 94 81 0c 	call	0x1902	; 0x1902 <vfprintf>
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <fputc>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	8c 01       	movw	r16, r24
    17da:	eb 01       	movw	r28, r22
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	81 ff       	sbrs	r24, 1
    17e0:	1b c0       	rjmp	.+54     	; 0x1818 <fputc+0x48>
    17e2:	82 ff       	sbrs	r24, 2
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <fputc+0x30>
    17e6:	2e 81       	ldd	r18, Y+6	; 0x06
    17e8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	28 17       	cp	r18, r24
    17f0:	39 07       	cpc	r19, r25
    17f2:	64 f4       	brge	.+24     	; 0x180c <fputc+0x3c>
    17f4:	e8 81       	ld	r30, Y
    17f6:	f9 81       	ldd	r31, Y+1	; 0x01
    17f8:	01 93       	st	Z+, r16
    17fa:	f9 83       	std	Y+1, r31	; 0x01
    17fc:	e8 83       	st	Y, r30
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <fputc+0x3c>
    1800:	e8 85       	ldd	r30, Y+8	; 0x08
    1802:	f9 85       	ldd	r31, Y+9	; 0x09
    1804:	80 2f       	mov	r24, r16
    1806:	09 95       	icall
    1808:	89 2b       	or	r24, r25
    180a:	31 f4       	brne	.+12     	; 0x1818 <fputc+0x48>
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	8e 83       	std	Y+6, r24	; 0x06
    1816:	02 c0       	rjmp	.+4      	; 0x181c <fputc+0x4c>
    1818:	0f ef       	ldi	r16, 0xFF	; 255
    181a:	1f ef       	ldi	r17, 0xFF	; 255
    181c:	c8 01       	movw	r24, r16
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <fputs>:
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	7c 01       	movw	r14, r24
    1836:	8b 01       	movw	r16, r22
    1838:	db 01       	movw	r26, r22
    183a:	13 96       	adiw	r26, 0x03	; 3
    183c:	8c 91       	ld	r24, X
    183e:	81 fd       	sbrc	r24, 1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <fputs+0x20>
    1842:	cf ef       	ldi	r28, 0xFF	; 255
    1844:	df ef       	ldi	r29, 0xFF	; 255
    1846:	13 c0       	rjmp	.+38     	; 0x186e <fputs+0x46>
    1848:	c0 e0       	ldi	r28, 0x00	; 0
    184a:	d0 e0       	ldi	r29, 0x00	; 0
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <fputs+0x3c>
    184e:	d8 01       	movw	r26, r16
    1850:	18 96       	adiw	r26, 0x08	; 8
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	19 97       	sbiw	r26, 0x09	; 9
    1858:	b8 01       	movw	r22, r16
    185a:	09 95       	icall
    185c:	89 2b       	or	r24, r25
    185e:	11 f0       	breq	.+4      	; 0x1864 <fputs+0x3c>
    1860:	cf ef       	ldi	r28, 0xFF	; 255
    1862:	df ef       	ldi	r29, 0xFF	; 255
    1864:	f7 01       	movw	r30, r14
    1866:	81 91       	ld	r24, Z+
    1868:	7f 01       	movw	r14, r30
    186a:	88 23       	and	r24, r24
    186c:	81 f7       	brne	.-32     	; 0x184e <fputs+0x26>
    186e:	ce 01       	movw	r24, r28
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	08 95       	ret

0000187e <fscanf>:
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9e 01       	movw	r18, r28
    1888:	27 5f       	subi	r18, 0xF7	; 247
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	a9 01       	movw	r20, r18
    1896:	0e 94 36 10 	call	0x206c	; 0x206c <vfscanf>
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <sprintf>:
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	2e 97       	sbiw	r28, 0x0e	; 14
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	0d 89       	ldd	r16, Y+21	; 0x15
    18ba:	1e 89       	ldd	r17, Y+22	; 0x16
    18bc:	86 e0       	ldi	r24, 0x06	; 6
    18be:	8c 83       	std	Y+4, r24	; 0x04
    18c0:	1a 83       	std	Y+2, r17	; 0x02
    18c2:	09 83       	std	Y+1, r16	; 0x01
    18c4:	8f ef       	ldi	r24, 0xFF	; 255
    18c6:	9f e7       	ldi	r25, 0x7F	; 127
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	9e 01       	movw	r18, r28
    18ce:	27 5e       	subi	r18, 0xE7	; 231
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	6f 89       	ldd	r22, Y+23	; 0x17
    18d8:	78 8d       	ldd	r23, Y+24	; 0x18
    18da:	a9 01       	movw	r20, r18
    18dc:	0e 94 81 0c 	call	0x1902	; 0x1902 <vfprintf>
    18e0:	2f 81       	ldd	r18, Y+7	; 0x07
    18e2:	38 85       	ldd	r19, Y+8	; 0x08
    18e4:	02 0f       	add	r16, r18
    18e6:	13 1f       	adc	r17, r19
    18e8:	f8 01       	movw	r30, r16
    18ea:	10 82       	st	Z, r1
    18ec:	2e 96       	adiw	r28, 0x0e	; 14
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	08 95       	ret

00001902 <vfprintf>:
    1902:	2f 92       	push	r2
    1904:	3f 92       	push	r3
    1906:	4f 92       	push	r4
    1908:	5f 92       	push	r5
    190a:	6f 92       	push	r6
    190c:	7f 92       	push	r7
    190e:	8f 92       	push	r8
    1910:	9f 92       	push	r9
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	2b 97       	sbiw	r28, 0x0b	; 11
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	3c 01       	movw	r6, r24
    1938:	2b 01       	movw	r4, r22
    193a:	5a 01       	movw	r10, r20
    193c:	fc 01       	movw	r30, r24
    193e:	17 82       	std	Z+7, r1	; 0x07
    1940:	16 82       	std	Z+6, r1	; 0x06
    1942:	83 81       	ldd	r24, Z+3	; 0x03
    1944:	81 fd       	sbrc	r24, 1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <vfprintf+0x4c>
    1948:	6f ef       	ldi	r22, 0xFF	; 255
    194a:	7f ef       	ldi	r23, 0xFF	; 255
    194c:	c6 c1       	rjmp	.+908    	; 0x1cda <vfprintf+0x3d8>
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	89 2e       	mov	r8, r25
    1952:	1e 01       	movw	r2, r28
    1954:	08 94       	sec
    1956:	21 1c       	adc	r2, r1
    1958:	31 1c       	adc	r3, r1
    195a:	f3 01       	movw	r30, r6
    195c:	23 81       	ldd	r18, Z+3	; 0x03
    195e:	f2 01       	movw	r30, r4
    1960:	23 fd       	sbrc	r18, 3
    1962:	85 91       	lpm	r24, Z+
    1964:	23 ff       	sbrs	r18, 3
    1966:	81 91       	ld	r24, Z+
    1968:	2f 01       	movw	r4, r30
    196a:	88 23       	and	r24, r24
    196c:	09 f4       	brne	.+2      	; 0x1970 <vfprintf+0x6e>
    196e:	b2 c1       	rjmp	.+868    	; 0x1cd4 <vfprintf+0x3d2>
    1970:	85 32       	cpi	r24, 0x25	; 37
    1972:	39 f4       	brne	.+14     	; 0x1982 <vfprintf+0x80>
    1974:	23 fd       	sbrc	r18, 3
    1976:	85 91       	lpm	r24, Z+
    1978:	23 ff       	sbrs	r18, 3
    197a:	81 91       	ld	r24, Z+
    197c:	2f 01       	movw	r4, r30
    197e:	85 32       	cpi	r24, 0x25	; 37
    1980:	29 f4       	brne	.+10     	; 0x198c <vfprintf+0x8a>
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	b3 01       	movw	r22, r6
    1986:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    198a:	e7 cf       	rjmp	.-50     	; 0x195a <vfprintf+0x58>
    198c:	98 2f       	mov	r25, r24
    198e:	ff 24       	eor	r15, r15
    1990:	ee 24       	eor	r14, r14
    1992:	99 24       	eor	r9, r9
    1994:	ff e1       	ldi	r31, 0x1F	; 31
    1996:	ff 15       	cp	r31, r15
    1998:	d0 f0       	brcs	.+52     	; 0x19ce <vfprintf+0xcc>
    199a:	9b 32       	cpi	r25, 0x2B	; 43
    199c:	69 f0       	breq	.+26     	; 0x19b8 <vfprintf+0xb6>
    199e:	9c 32       	cpi	r25, 0x2C	; 44
    19a0:	28 f4       	brcc	.+10     	; 0x19ac <vfprintf+0xaa>
    19a2:	90 32       	cpi	r25, 0x20	; 32
    19a4:	59 f0       	breq	.+22     	; 0x19bc <vfprintf+0xba>
    19a6:	93 32       	cpi	r25, 0x23	; 35
    19a8:	91 f4       	brne	.+36     	; 0x19ce <vfprintf+0xcc>
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <vfprintf+0xc6>
    19ac:	9d 32       	cpi	r25, 0x2D	; 45
    19ae:	49 f0       	breq	.+18     	; 0x19c2 <vfprintf+0xc0>
    19b0:	90 33       	cpi	r25, 0x30	; 48
    19b2:	69 f4       	brne	.+26     	; 0x19ce <vfprintf+0xcc>
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	24 c0       	rjmp	.+72     	; 0x1a00 <vfprintf+0xfe>
    19b8:	52 e0       	ldi	r21, 0x02	; 2
    19ba:	f5 2a       	or	r15, r21
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	f8 2a       	or	r15, r24
    19c0:	28 c0       	rjmp	.+80     	; 0x1a12 <vfprintf+0x110>
    19c2:	98 e0       	ldi	r25, 0x08	; 8
    19c4:	f9 2a       	or	r15, r25
    19c6:	25 c0       	rjmp	.+74     	; 0x1a12 <vfprintf+0x110>
    19c8:	e0 e1       	ldi	r30, 0x10	; 16
    19ca:	fe 2a       	or	r15, r30
    19cc:	22 c0       	rjmp	.+68     	; 0x1a12 <vfprintf+0x110>
    19ce:	f7 fc       	sbrc	r15, 7
    19d0:	29 c0       	rjmp	.+82     	; 0x1a24 <vfprintf+0x122>
    19d2:	89 2f       	mov	r24, r25
    19d4:	80 53       	subi	r24, 0x30	; 48
    19d6:	8a 30       	cpi	r24, 0x0A	; 10
    19d8:	70 f4       	brcc	.+28     	; 0x19f6 <vfprintf+0xf4>
    19da:	f6 fe       	sbrs	r15, 6
    19dc:	05 c0       	rjmp	.+10     	; 0x19e8 <vfprintf+0xe6>
    19de:	98 9c       	mul	r9, r8
    19e0:	90 2c       	mov	r9, r0
    19e2:	11 24       	eor	r1, r1
    19e4:	98 0e       	add	r9, r24
    19e6:	15 c0       	rjmp	.+42     	; 0x1a12 <vfprintf+0x110>
    19e8:	e8 9c       	mul	r14, r8
    19ea:	e0 2c       	mov	r14, r0
    19ec:	11 24       	eor	r1, r1
    19ee:	e8 0e       	add	r14, r24
    19f0:	f0 e2       	ldi	r31, 0x20	; 32
    19f2:	ff 2a       	or	r15, r31
    19f4:	0e c0       	rjmp	.+28     	; 0x1a12 <vfprintf+0x110>
    19f6:	9e 32       	cpi	r25, 0x2E	; 46
    19f8:	29 f4       	brne	.+10     	; 0x1a04 <vfprintf+0x102>
    19fa:	f6 fc       	sbrc	r15, 6
    19fc:	6b c1       	rjmp	.+726    	; 0x1cd4 <vfprintf+0x3d2>
    19fe:	40 e4       	ldi	r20, 0x40	; 64
    1a00:	f4 2a       	or	r15, r20
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <vfprintf+0x110>
    1a04:	9c 36       	cpi	r25, 0x6C	; 108
    1a06:	19 f4       	brne	.+6      	; 0x1a0e <vfprintf+0x10c>
    1a08:	50 e8       	ldi	r21, 0x80	; 128
    1a0a:	f5 2a       	or	r15, r21
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <vfprintf+0x110>
    1a0e:	98 36       	cpi	r25, 0x68	; 104
    1a10:	49 f4       	brne	.+18     	; 0x1a24 <vfprintf+0x122>
    1a12:	f2 01       	movw	r30, r4
    1a14:	23 fd       	sbrc	r18, 3
    1a16:	95 91       	lpm	r25, Z+
    1a18:	23 ff       	sbrs	r18, 3
    1a1a:	91 91       	ld	r25, Z+
    1a1c:	2f 01       	movw	r4, r30
    1a1e:	99 23       	and	r25, r25
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <vfprintf+0x122>
    1a22:	b8 cf       	rjmp	.-144    	; 0x1994 <vfprintf+0x92>
    1a24:	89 2f       	mov	r24, r25
    1a26:	85 54       	subi	r24, 0x45	; 69
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	18 f0       	brcs	.+6      	; 0x1a32 <vfprintf+0x130>
    1a2c:	80 52       	subi	r24, 0x20	; 32
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	38 f4       	brcc	.+14     	; 0x1a40 <vfprintf+0x13e>
    1a32:	44 e0       	ldi	r20, 0x04	; 4
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	a4 0e       	add	r10, r20
    1a38:	b5 1e       	adc	r11, r21
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	59 83       	std	Y+1, r21	; 0x01
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <vfprintf+0x15c>
    1a40:	93 36       	cpi	r25, 0x63	; 99
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <vfprintf+0x14e>
    1a44:	93 37       	cpi	r25, 0x73	; 115
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <vfprintf+0x164>
    1a48:	93 35       	cpi	r25, 0x53	; 83
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <vfprintf+0x14c>
    1a4c:	56 c0       	rjmp	.+172    	; 0x1afa <vfprintf+0x1f8>
    1a4e:	20 c0       	rjmp	.+64     	; 0x1a90 <vfprintf+0x18e>
    1a50:	f5 01       	movw	r30, r10
    1a52:	80 81       	ld	r24, Z
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	42 e0       	ldi	r20, 0x02	; 2
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	a4 0e       	add	r10, r20
    1a5c:	b5 1e       	adc	r11, r21
    1a5e:	61 01       	movw	r12, r2
    1a60:	01 e0       	ldi	r16, 0x01	; 1
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	12 c0       	rjmp	.+36     	; 0x1a8a <vfprintf+0x188>
    1a66:	f5 01       	movw	r30, r10
    1a68:	c0 80       	ld	r12, Z
    1a6a:	d1 80       	ldd	r13, Z+1	; 0x01
    1a6c:	f6 fc       	sbrc	r15, 6
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <vfprintf+0x174>
    1a70:	6f ef       	ldi	r22, 0xFF	; 255
    1a72:	7f ef       	ldi	r23, 0xFF	; 255
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <vfprintf+0x178>
    1a76:	69 2d       	mov	r22, r9
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	42 e0       	ldi	r20, 0x02	; 2
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	a4 0e       	add	r10, r20
    1a80:	b5 1e       	adc	r11, r21
    1a82:	c6 01       	movw	r24, r12
    1a84:	0e 94 77 11 	call	0x22ee	; 0x22ee <strnlen>
    1a88:	8c 01       	movw	r16, r24
    1a8a:	5f e7       	ldi	r21, 0x7F	; 127
    1a8c:	f5 22       	and	r15, r21
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <vfprintf+0x1b6>
    1a90:	f5 01       	movw	r30, r10
    1a92:	c0 80       	ld	r12, Z
    1a94:	d1 80       	ldd	r13, Z+1	; 0x01
    1a96:	f6 fc       	sbrc	r15, 6
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <vfprintf+0x19e>
    1a9a:	6f ef       	ldi	r22, 0xFF	; 255
    1a9c:	7f ef       	ldi	r23, 0xFF	; 255
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <vfprintf+0x1a2>
    1aa0:	69 2d       	mov	r22, r9
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	42 e0       	ldi	r20, 0x02	; 2
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	a4 0e       	add	r10, r20
    1aaa:	b5 1e       	adc	r11, r21
    1aac:	c6 01       	movw	r24, r12
    1aae:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <strnlen_P>
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	50 e8       	ldi	r21, 0x80	; 128
    1ab6:	f5 2a       	or	r15, r21
    1ab8:	f3 fe       	sbrs	r15, 3
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <vfprintf+0x1c8>
    1abc:	1a c0       	rjmp	.+52     	; 0x1af2 <vfprintf+0x1f0>
    1abe:	80 e2       	ldi	r24, 0x20	; 32
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	b3 01       	movw	r22, r6
    1ac4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1ac8:	ea 94       	dec	r14
    1aca:	8e 2d       	mov	r24, r14
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	08 17       	cp	r16, r24
    1ad0:	19 07       	cpc	r17, r25
    1ad2:	a8 f3       	brcs	.-22     	; 0x1abe <vfprintf+0x1bc>
    1ad4:	0e c0       	rjmp	.+28     	; 0x1af2 <vfprintf+0x1f0>
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	f7 fc       	sbrc	r15, 7
    1ada:	85 91       	lpm	r24, Z+
    1adc:	f7 fe       	sbrs	r15, 7
    1ade:	81 91       	ld	r24, Z+
    1ae0:	6f 01       	movw	r12, r30
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	b3 01       	movw	r22, r6
    1ae6:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1aea:	e1 10       	cpse	r14, r1
    1aec:	ea 94       	dec	r14
    1aee:	01 50       	subi	r16, 0x01	; 1
    1af0:	10 40       	sbci	r17, 0x00	; 0
    1af2:	01 15       	cp	r16, r1
    1af4:	11 05       	cpc	r17, r1
    1af6:	79 f7       	brne	.-34     	; 0x1ad6 <vfprintf+0x1d4>
    1af8:	ea c0       	rjmp	.+468    	; 0x1cce <vfprintf+0x3cc>
    1afa:	94 36       	cpi	r25, 0x64	; 100
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <vfprintf+0x200>
    1afe:	99 36       	cpi	r25, 0x69	; 105
    1b00:	69 f5       	brne	.+90     	; 0x1b5c <vfprintf+0x25a>
    1b02:	f7 fe       	sbrs	r15, 7
    1b04:	08 c0       	rjmp	.+16     	; 0x1b16 <vfprintf+0x214>
    1b06:	f5 01       	movw	r30, r10
    1b08:	20 81       	ld	r18, Z
    1b0a:	31 81       	ldd	r19, Z+1	; 0x01
    1b0c:	42 81       	ldd	r20, Z+2	; 0x02
    1b0e:	53 81       	ldd	r21, Z+3	; 0x03
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0a c0       	rjmp	.+20     	; 0x1b2a <vfprintf+0x228>
    1b16:	f5 01       	movw	r30, r10
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	44 27       	eor	r20, r20
    1b20:	37 fd       	sbrc	r19, 7
    1b22:	40 95       	com	r20
    1b24:	54 2f       	mov	r21, r20
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a8 0e       	add	r10, r24
    1b2c:	b9 1e       	adc	r11, r25
    1b2e:	9f e6       	ldi	r25, 0x6F	; 111
    1b30:	f9 22       	and	r15, r25
    1b32:	57 ff       	sbrs	r21, 7
    1b34:	09 c0       	rjmp	.+18     	; 0x1b48 <vfprintf+0x246>
    1b36:	50 95       	com	r21
    1b38:	40 95       	com	r20
    1b3a:	30 95       	com	r19
    1b3c:	21 95       	neg	r18
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	4f 4f       	sbci	r20, 0xFF	; 255
    1b42:	5f 4f       	sbci	r21, 0xFF	; 255
    1b44:	e0 e8       	ldi	r30, 0x80	; 128
    1b46:	fe 2a       	or	r15, r30
    1b48:	ca 01       	movw	r24, r20
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	a1 01       	movw	r20, r2
    1b4e:	2a e0       	ldi	r18, 0x0A	; 10
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	0e 94 de 11 	call	0x23bc	; 0x23bc <__ultoa_invert>
    1b56:	d8 2e       	mov	r13, r24
    1b58:	d2 18       	sub	r13, r2
    1b5a:	40 c0       	rjmp	.+128    	; 0x1bdc <vfprintf+0x2da>
    1b5c:	95 37       	cpi	r25, 0x75	; 117
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <vfprintf+0x268>
    1b60:	1f 2d       	mov	r17, r15
    1b62:	1f 7e       	andi	r17, 0xEF	; 239
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	1d c0       	rjmp	.+58     	; 0x1ba4 <vfprintf+0x2a2>
    1b6a:	1f 2d       	mov	r17, r15
    1b6c:	19 7f       	andi	r17, 0xF9	; 249
    1b6e:	9f 36       	cpi	r25, 0x6F	; 111
    1b70:	61 f0       	breq	.+24     	; 0x1b8a <vfprintf+0x288>
    1b72:	90 37       	cpi	r25, 0x70	; 112
    1b74:	20 f4       	brcc	.+8      	; 0x1b7e <vfprintf+0x27c>
    1b76:	98 35       	cpi	r25, 0x58	; 88
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <vfprintf+0x27a>
    1b7a:	ac c0       	rjmp	.+344    	; 0x1cd4 <vfprintf+0x3d2>
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <vfprintf+0x29a>
    1b7e:	90 37       	cpi	r25, 0x70	; 112
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <vfprintf+0x28e>
    1b82:	98 37       	cpi	r25, 0x78	; 120
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <vfprintf+0x286>
    1b86:	a6 c0       	rjmp	.+332    	; 0x1cd4 <vfprintf+0x3d2>
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <vfprintf+0x290>
    1b8a:	28 e0       	ldi	r18, 0x08	; 8
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <vfprintf+0x2a2>
    1b90:	10 61       	ori	r17, 0x10	; 16
    1b92:	14 fd       	sbrc	r17, 4
    1b94:	14 60       	ori	r17, 0x04	; 4
    1b96:	20 e1       	ldi	r18, 0x10	; 16
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <vfprintf+0x2a2>
    1b9c:	14 fd       	sbrc	r17, 4
    1b9e:	16 60       	ori	r17, 0x06	; 6
    1ba0:	20 e1       	ldi	r18, 0x10	; 16
    1ba2:	32 e0       	ldi	r19, 0x02	; 2
    1ba4:	17 ff       	sbrs	r17, 7
    1ba6:	08 c0       	rjmp	.+16     	; 0x1bb8 <vfprintf+0x2b6>
    1ba8:	f5 01       	movw	r30, r10
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	44 e0       	ldi	r20, 0x04	; 4
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <vfprintf+0x2c6>
    1bb8:	f5 01       	movw	r30, r10
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	42 e0       	ldi	r20, 0x02	; 2
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	a4 0e       	add	r10, r20
    1bca:	b5 1e       	adc	r11, r21
    1bcc:	a1 01       	movw	r20, r2
    1bce:	0e 94 de 11 	call	0x23bc	; 0x23bc <__ultoa_invert>
    1bd2:	d8 2e       	mov	r13, r24
    1bd4:	d2 18       	sub	r13, r2
    1bd6:	8f e7       	ldi	r24, 0x7F	; 127
    1bd8:	f8 2e       	mov	r15, r24
    1bda:	f1 22       	and	r15, r17
    1bdc:	f6 fe       	sbrs	r15, 6
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <vfprintf+0x2f4>
    1be0:	5e ef       	ldi	r21, 0xFE	; 254
    1be2:	f5 22       	and	r15, r21
    1be4:	d9 14       	cp	r13, r9
    1be6:	38 f4       	brcc	.+14     	; 0x1bf6 <vfprintf+0x2f4>
    1be8:	f4 fe       	sbrs	r15, 4
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <vfprintf+0x2f8>
    1bec:	f2 fc       	sbrc	r15, 2
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <vfprintf+0x2f8>
    1bf0:	8f ee       	ldi	r24, 0xEF	; 239
    1bf2:	f8 22       	and	r15, r24
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <vfprintf+0x2f8>
    1bf6:	1d 2d       	mov	r17, r13
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <vfprintf+0x2fa>
    1bfa:	19 2d       	mov	r17, r9
    1bfc:	f4 fe       	sbrs	r15, 4
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <vfprintf+0x318>
    1c00:	fe 01       	movw	r30, r28
    1c02:	ed 0d       	add	r30, r13
    1c04:	f1 1d       	adc	r31, r1
    1c06:	80 81       	ld	r24, Z
    1c08:	80 33       	cpi	r24, 0x30	; 48
    1c0a:	19 f4       	brne	.+6      	; 0x1c12 <vfprintf+0x310>
    1c0c:	99 ee       	ldi	r25, 0xE9	; 233
    1c0e:	f9 22       	and	r15, r25
    1c10:	08 c0       	rjmp	.+16     	; 0x1c22 <vfprintf+0x320>
    1c12:	1f 5f       	subi	r17, 0xFF	; 255
    1c14:	f2 fe       	sbrs	r15, 2
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <vfprintf+0x320>
    1c18:	03 c0       	rjmp	.+6      	; 0x1c20 <vfprintf+0x31e>
    1c1a:	8f 2d       	mov	r24, r15
    1c1c:	86 78       	andi	r24, 0x86	; 134
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <vfprintf+0x320>
    1c20:	1f 5f       	subi	r17, 0xFF	; 255
    1c22:	0f 2d       	mov	r16, r15
    1c24:	f3 fc       	sbrc	r15, 3
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <vfprintf+0x34e>
    1c28:	f0 fe       	sbrs	r15, 0
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <vfprintf+0x348>
    1c2c:	1e 15       	cp	r17, r14
    1c2e:	10 f0       	brcs	.+4      	; 0x1c34 <vfprintf+0x332>
    1c30:	9d 2c       	mov	r9, r13
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <vfprintf+0x348>
    1c34:	9d 2c       	mov	r9, r13
    1c36:	9e 0c       	add	r9, r14
    1c38:	91 1a       	sub	r9, r17
    1c3a:	1e 2d       	mov	r17, r14
    1c3c:	06 c0       	rjmp	.+12     	; 0x1c4a <vfprintf+0x348>
    1c3e:	80 e2       	ldi	r24, 0x20	; 32
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	b3 01       	movw	r22, r6
    1c44:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1c48:	1f 5f       	subi	r17, 0xFF	; 255
    1c4a:	1e 15       	cp	r17, r14
    1c4c:	c0 f3       	brcs	.-16     	; 0x1c3e <vfprintf+0x33c>
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <vfprintf+0x356>
    1c50:	1e 15       	cp	r17, r14
    1c52:	10 f4       	brcc	.+4      	; 0x1c58 <vfprintf+0x356>
    1c54:	e1 1a       	sub	r14, r17
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <vfprintf+0x358>
    1c58:	ee 24       	eor	r14, r14
    1c5a:	04 ff       	sbrs	r16, 4
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <vfprintf+0x37a>
    1c5e:	80 e3       	ldi	r24, 0x30	; 48
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	b3 01       	movw	r22, r6
    1c64:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1c68:	02 ff       	sbrs	r16, 2
    1c6a:	1d c0       	rjmp	.+58     	; 0x1ca6 <vfprintf+0x3a4>
    1c6c:	01 fd       	sbrc	r16, 1
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <vfprintf+0x374>
    1c70:	88 e7       	ldi	r24, 0x78	; 120
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e c0       	rjmp	.+28     	; 0x1c92 <vfprintf+0x390>
    1c76:	88 e5       	ldi	r24, 0x58	; 88
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0b c0       	rjmp	.+22     	; 0x1c92 <vfprintf+0x390>
    1c7c:	80 2f       	mov	r24, r16
    1c7e:	86 78       	andi	r24, 0x86	; 134
    1c80:	91 f0       	breq	.+36     	; 0x1ca6 <vfprintf+0x3a4>
    1c82:	01 ff       	sbrs	r16, 1
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <vfprintf+0x388>
    1c86:	8b e2       	ldi	r24, 0x2B	; 43
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <vfprintf+0x38a>
    1c8a:	80 e2       	ldi	r24, 0x20	; 32
    1c8c:	f7 fc       	sbrc	r15, 7
    1c8e:	8d e2       	ldi	r24, 0x2D	; 45
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	b3 01       	movw	r22, r6
    1c94:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x3a4>
    1c9a:	80 e3       	ldi	r24, 0x30	; 48
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	b3 01       	movw	r22, r6
    1ca0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1ca4:	9a 94       	dec	r9
    1ca6:	d9 14       	cp	r13, r9
    1ca8:	c0 f3       	brcs	.-16     	; 0x1c9a <vfprintf+0x398>
    1caa:	da 94       	dec	r13
    1cac:	f1 01       	movw	r30, r2
    1cae:	ed 0d       	add	r30, r13
    1cb0:	f1 1d       	adc	r31, r1
    1cb2:	80 81       	ld	r24, Z
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	b3 01       	movw	r22, r6
    1cb8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1cbc:	dd 20       	and	r13, r13
    1cbe:	a9 f7       	brne	.-22     	; 0x1caa <vfprintf+0x3a8>
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x3cc>
    1cc2:	80 e2       	ldi	r24, 0x20	; 32
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	b3 01       	movw	r22, r6
    1cc8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <fputc>
    1ccc:	ea 94       	dec	r14
    1cce:	ee 20       	and	r14, r14
    1cd0:	c1 f7       	brne	.-16     	; 0x1cc2 <vfprintf+0x3c0>
    1cd2:	43 ce       	rjmp	.-890    	; 0x195a <vfprintf+0x58>
    1cd4:	f3 01       	movw	r30, r6
    1cd6:	66 81       	ldd	r22, Z+6	; 0x06
    1cd8:	77 81       	ldd	r23, Z+7	; 0x07
    1cda:	cb 01       	movw	r24, r22
    1cdc:	2b 96       	adiw	r28, 0x0b	; 11
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	cf 90       	pop	r12
    1cf8:	bf 90       	pop	r11
    1cfa:	af 90       	pop	r10
    1cfc:	9f 90       	pop	r9
    1cfe:	8f 90       	pop	r8
    1d00:	7f 90       	pop	r7
    1d02:	6f 90       	pop	r6
    1d04:	5f 90       	pop	r5
    1d06:	4f 90       	pop	r4
    1d08:	3f 90       	pop	r3
    1d0a:	2f 90       	pop	r2
    1d0c:	08 95       	ret

00001d0e <putval>:
    1d0e:	fc 01       	movw	r30, r24
    1d10:	20 fd       	sbrc	r18, 0
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <putval+0x16>
    1d14:	23 fd       	sbrc	r18, 3
    1d16:	05 c0       	rjmp	.+10     	; 0x1d22 <putval+0x14>
    1d18:	22 ff       	sbrs	r18, 2
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <putval+0x12>
    1d1c:	73 83       	std	Z+3, r23	; 0x03
    1d1e:	62 83       	std	Z+2, r22	; 0x02
    1d20:	51 83       	std	Z+1, r21	; 0x01
    1d22:	40 83       	st	Z, r20
    1d24:	08 95       	ret

00001d26 <mulacc>:
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	44 ff       	sbrs	r20, 4
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <mulacc+0x10>
    1d32:	33 e0       	ldi	r19, 0x03	; 3
    1d34:	11 c0       	rjmp	.+34     	; 0x1d58 <mulacc+0x32>
    1d36:	46 ff       	sbrs	r20, 6
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <mulacc+0x18>
    1d3a:	34 e0       	ldi	r19, 0x04	; 4
    1d3c:	0d c0       	rjmp	.+26     	; 0x1d58 <mulacc+0x32>
    1d3e:	db 01       	movw	r26, r22
    1d40:	fc 01       	movw	r30, r24
    1d42:	aa 0f       	add	r26, r26
    1d44:	bb 1f       	adc	r27, r27
    1d46:	ee 1f       	adc	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	10 94       	com	r1
    1d4c:	d1 f7       	brne	.-12     	; 0x1d42 <mulacc+0x1c>
    1d4e:	6a 0f       	add	r22, r26
    1d50:	7b 1f       	adc	r23, r27
    1d52:	8e 1f       	adc	r24, r30
    1d54:	9f 1f       	adc	r25, r31
    1d56:	31 e0       	ldi	r19, 0x01	; 1
    1d58:	66 0f       	add	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	31 50       	subi	r19, 0x01	; 1
    1d62:	d1 f7       	brne	.-12     	; 0x1d58 <mulacc+0x32>
    1d64:	7b 01       	movw	r14, r22
    1d66:	8c 01       	movw	r16, r24
    1d68:	e2 0e       	add	r14, r18
    1d6a:	f1 1c       	adc	r15, r1
    1d6c:	01 1d       	adc	r16, r1
    1d6e:	11 1d       	adc	r17, r1
    1d70:	a8 01       	movw	r20, r16
    1d72:	97 01       	movw	r18, r14
    1d74:	b7 01       	movw	r22, r14
    1d76:	ca 01       	movw	r24, r20
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	08 95       	ret

00001d82 <skip_spaces>:
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1d92:	ec 01       	movw	r28, r24
    1d94:	97 fd       	sbrc	r25, 7
    1d96:	08 c0       	rjmp	.+16     	; 0x1da8 <skip_spaces+0x26>
    1d98:	0e 94 59 11 	call	0x22b2	; 0x22b2 <isspace>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	b1 f7       	brne	.-20     	; 0x1d8c <skip_spaces+0xa>
    1da0:	ce 01       	movw	r24, r28
    1da2:	b8 01       	movw	r22, r16
    1da4:	0e 94 c4 11 	call	0x2388	; 0x2388 <ungetc>
    1da8:	ce 01       	movw	r24, r28
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <conv_int>:
    1db4:	af 92       	push	r10
    1db6:	bf 92       	push	r11
    1db8:	cf 92       	push	r12
    1dba:	df 92       	push	r13
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	ec 01       	movw	r28, r24
    1dca:	c6 2e       	mov	r12, r22
    1dcc:	5a 01       	movw	r10, r20
    1dce:	12 2f       	mov	r17, r18
    1dd0:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	8b 32       	cpi	r24, 0x2B	; 43
    1dd8:	19 f0       	breq	.+6      	; 0x1de0 <conv_int+0x2c>
    1dda:	8d 32       	cpi	r24, 0x2D	; 45
    1ddc:	51 f4       	brne	.+20     	; 0x1df2 <conv_int+0x3e>
    1dde:	10 68       	ori	r17, 0x80	; 128
    1de0:	ca 94       	dec	r12
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <conv_int+0x32>
    1de4:	6d c0       	rjmp	.+218    	; 0x1ec0 <conv_int+0x10c>
    1de6:	ce 01       	movw	r24, r28
    1de8:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1dec:	ac 01       	movw	r20, r24
    1dee:	97 fd       	sbrc	r25, 7
    1df0:	67 c0       	rjmp	.+206    	; 0x1ec0 <conv_int+0x10c>
    1df2:	6d ef       	ldi	r22, 0xFD	; 253
    1df4:	d6 2e       	mov	r13, r22
    1df6:	d1 22       	and	r13, r17
    1df8:	8d 2d       	mov	r24, r13
    1dfa:	80 73       	andi	r24, 0x30	; 48
    1dfc:	01 f5       	brne	.+64     	; 0x1e3e <conv_int+0x8a>
    1dfe:	40 33       	cpi	r20, 0x30	; 48
    1e00:	f1 f4       	brne	.+60     	; 0x1e3e <conv_int+0x8a>
    1e02:	ca 94       	dec	r12
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <conv_int+0x54>
    1e06:	47 c0       	rjmp	.+142    	; 0x1e96 <conv_int+0xe2>
    1e08:	ce 01       	movw	r24, r28
    1e0a:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1e0e:	ac 01       	movw	r20, r24
    1e10:	97 fd       	sbrc	r25, 7
    1e12:	41 c0       	rjmp	.+130    	; 0x1e96 <conv_int+0xe2>
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	d8 2a       	or	r13, r24
    1e18:	48 37       	cpi	r20, 0x78	; 120
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <conv_int+0x6c>
    1e1c:	48 35       	cpi	r20, 0x58	; 88
    1e1e:	59 f4       	brne	.+22     	; 0x1e36 <conv_int+0x82>
    1e20:	80 e4       	ldi	r24, 0x40	; 64
    1e22:	d8 2a       	or	r13, r24
    1e24:	ca 94       	dec	r12
    1e26:	b9 f1       	breq	.+110    	; 0x1e96 <conv_int+0xe2>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1e2e:	ac 01       	movw	r20, r24
    1e30:	99 23       	and	r25, r25
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <conv_int+0x8a>
    1e34:	30 c0       	rjmp	.+96     	; 0x1e96 <conv_int+0xe2>
    1e36:	d6 fc       	sbrc	r13, 6
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <conv_int+0x8a>
    1e3a:	80 e1       	ldi	r24, 0x10	; 16
    1e3c:	d8 2a       	or	r13, r24
    1e3e:	ee 24       	eor	r14, r14
    1e40:	ff 24       	eor	r15, r15
    1e42:	87 01       	movw	r16, r14
    1e44:	24 2f       	mov	r18, r20
    1e46:	20 53       	subi	r18, 0x30	; 48
    1e48:	28 30       	cpi	r18, 0x08	; 8
    1e4a:	88 f0       	brcs	.+34     	; 0x1e6e <conv_int+0xba>
    1e4c:	d4 fc       	sbrc	r13, 4
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <conv_int+0xae>
    1e50:	2a 30       	cpi	r18, 0x0A	; 10
    1e52:	68 f0       	brcs	.+26     	; 0x1e6e <conv_int+0xba>
    1e54:	d6 fe       	sbrs	r13, 6
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <conv_int+0xae>
    1e58:	2f 7d       	andi	r18, 0xDF	; 223
    1e5a:	82 2f       	mov	r24, r18
    1e5c:	81 51       	subi	r24, 0x11	; 17
    1e5e:	86 30       	cpi	r24, 0x06	; 6
    1e60:	28 f0       	brcs	.+10     	; 0x1e6c <conv_int+0xb8>
    1e62:	ca 01       	movw	r24, r20
    1e64:	be 01       	movw	r22, r28
    1e66:	0e 94 c4 11 	call	0x2388	; 0x2388 <ungetc>
    1e6a:	12 c0       	rjmp	.+36     	; 0x1e90 <conv_int+0xdc>
    1e6c:	27 50       	subi	r18, 0x07	; 7
    1e6e:	c8 01       	movw	r24, r16
    1e70:	b7 01       	movw	r22, r14
    1e72:	4d 2d       	mov	r20, r13
    1e74:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <mulacc>
    1e78:	7b 01       	movw	r14, r22
    1e7a:	8c 01       	movw	r16, r24
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	d8 2a       	or	r13, r24
    1e80:	ca 94       	dec	r12
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <conv_int+0xe8>
    1e84:	ce 01       	movw	r24, r28
    1e86:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1e8a:	ac 01       	movw	r20, r24
    1e8c:	97 ff       	sbrs	r25, 7
    1e8e:	da cf       	rjmp	.-76     	; 0x1e44 <conv_int+0x90>
    1e90:	d1 fc       	sbrc	r13, 1
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <conv_int+0xe8>
    1e94:	15 c0       	rjmp	.+42     	; 0x1ec0 <conv_int+0x10c>
    1e96:	ee 24       	eor	r14, r14
    1e98:	ff 24       	eor	r15, r15
    1e9a:	87 01       	movw	r16, r14
    1e9c:	d7 fe       	sbrs	r13, 7
    1e9e:	08 c0       	rjmp	.+16     	; 0x1eb0 <conv_int+0xfc>
    1ea0:	10 95       	com	r17
    1ea2:	00 95       	com	r16
    1ea4:	f0 94       	com	r15
    1ea6:	e0 94       	com	r14
    1ea8:	e1 1c       	adc	r14, r1
    1eaa:	f1 1c       	adc	r15, r1
    1eac:	01 1d       	adc	r16, r1
    1eae:	11 1d       	adc	r17, r1
    1eb0:	c5 01       	movw	r24, r10
    1eb2:	b8 01       	movw	r22, r16
    1eb4:	a7 01       	movw	r20, r14
    1eb6:	2d 2d       	mov	r18, r13
    1eb8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <putval>
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <conv_int+0x10e>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	08 95       	ret

00001ed8 <conv_brk>:
    1ed8:	6f 92       	push	r6
    1eda:	7f 92       	push	r7
    1edc:	8f 92       	push	r8
    1ede:	9f 92       	push	r9
    1ee0:	af 92       	push	r10
    1ee2:	bf 92       	push	r11
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	a0 97       	sbiw	r28, 0x20	; 32
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	6c 01       	movw	r12, r24
    1f06:	a6 2e       	mov	r10, r22
    1f08:	8a 01       	movw	r16, r20
    1f0a:	79 01       	movw	r14, r18
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	31 96       	adiw	r30, 0x01	; 1
    1f10:	80 e2       	ldi	r24, 0x20	; 32
    1f12:	df 01       	movw	r26, r30
    1f14:	1d 92       	st	X+, r1
    1f16:	8a 95       	dec	r24
    1f18:	e9 f7       	brne	.-6      	; 0x1f14 <conv_brk+0x3c>
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	4f 01       	movw	r8, r30
    1f26:	a1 e0       	ldi	r26, 0x01	; 1
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	f6 01       	movw	r30, r12
    1f2c:	83 81       	ldd	r24, Z+3	; 0x03
    1f2e:	f7 01       	movw	r30, r14
    1f30:	83 fd       	sbrc	r24, 3
    1f32:	25 91       	lpm	r18, Z+
    1f34:	83 ff       	sbrs	r24, 3
    1f36:	21 91       	ld	r18, Z+
    1f38:	7f 01       	movw	r14, r30
    1f3a:	22 23       	and	r18, r18
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <conv_brk+0x68>
    1f3e:	7e c0       	rjmp	.+252    	; 0x203c <conv_brk+0x164>
    1f40:	2e 35       	cpi	r18, 0x5E	; 94
    1f42:	19 f4       	brne	.+6      	; 0x1f4a <conv_brk+0x72>
    1f44:	41 15       	cp	r20, r1
    1f46:	51 05       	cpc	r21, r1
    1f48:	69 f1       	breq	.+90     	; 0x1fa4 <conv_brk+0xcc>
    1f4a:	87 2f       	mov	r24, r23
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	84 17       	cp	r24, r20
    1f50:	95 07       	cpc	r25, r21
    1f52:	44 f4       	brge	.+16     	; 0x1f64 <conv_brk+0x8c>
    1f54:	2d 35       	cpi	r18, 0x5D	; 93
    1f56:	51 f1       	breq	.+84     	; 0x1fac <conv_brk+0xd4>
    1f58:	2d 32       	cpi	r18, 0x2D	; 45
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <conv_brk+0x8c>
    1f5c:	33 23       	and	r19, r19
    1f5e:	29 f4       	brne	.+10     	; 0x1f6a <conv_brk+0x92>
    1f60:	31 e0       	ldi	r19, 0x01	; 1
    1f62:	21 c0       	rjmp	.+66     	; 0x1fa6 <conv_brk+0xce>
    1f64:	33 23       	and	r19, r19
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <conv_brk+0x92>
    1f68:	62 2f       	mov	r22, r18
    1f6a:	32 2f       	mov	r19, r18
    1f6c:	83 2f       	mov	r24, r19
    1f6e:	86 95       	lsr	r24
    1f70:	86 95       	lsr	r24
    1f72:	86 95       	lsr	r24
    1f74:	f4 01       	movw	r30, r8
    1f76:	e8 0f       	add	r30, r24
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	83 2f       	mov	r24, r19
    1f7c:	87 70       	andi	r24, 0x07	; 7
    1f7e:	3d 01       	movw	r6, r26
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <conv_brk+0xae>
    1f82:	66 0c       	add	r6, r6
    1f84:	77 1c       	adc	r7, r7
    1f86:	8a 95       	dec	r24
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <conv_brk+0xaa>
    1f8a:	20 81       	ld	r18, Z
    1f8c:	26 29       	or	r18, r6
    1f8e:	20 83       	st	Z, r18
    1f90:	36 17       	cp	r19, r22
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <conv_brk+0xc0>
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	07 c0       	rjmp	.+14     	; 0x1fa6 <conv_brk+0xce>
    1f98:	36 17       	cp	r19, r22
    1f9a:	10 f4       	brcc	.+4      	; 0x1fa0 <conv_brk+0xc8>
    1f9c:	3f 5f       	subi	r19, 0xFF	; 255
    1f9e:	e6 cf       	rjmp	.-52     	; 0x1f6c <conv_brk+0x94>
    1fa0:	31 50       	subi	r19, 0x01	; 1
    1fa2:	e4 cf       	rjmp	.-56     	; 0x1f6c <conv_brk+0x94>
    1fa4:	71 e0       	ldi	r23, 0x01	; 1
    1fa6:	4f 5f       	subi	r20, 0xFF	; 255
    1fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1faa:	bf cf       	rjmp	.-130    	; 0x1f2a <conv_brk+0x52>
    1fac:	33 23       	and	r19, r19
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <conv_brk+0xde>
    1fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb2:	80 62       	ori	r24, 0x20	; 32
    1fb4:	8e 83       	std	Y+6, r24	; 0x06
    1fb6:	77 23       	and	r23, r23
    1fb8:	59 f0       	breq	.+22     	; 0x1fd0 <conv_brk+0xf8>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	31 96       	adiw	r30, 0x01	; 1
    1fbe:	9e 01       	movw	r18, r28
    1fc0:	2f 5d       	subi	r18, 0xDF	; 223
    1fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 95       	com	r24
    1fc8:	81 93       	st	Z+, r24
    1fca:	e2 17       	cp	r30, r18
    1fcc:	f3 07       	cpc	r31, r19
    1fce:	d1 f7       	brne	.-12     	; 0x1fc4 <conv_brk+0xec>
    1fd0:	bb 24       	eor	r11, r11
    1fd2:	b3 94       	inc	r11
    1fd4:	4e 01       	movw	r8, r28
    1fd6:	08 94       	sec
    1fd8:	81 1c       	adc	r8, r1
    1fda:	91 1c       	adc	r9, r1
    1fdc:	c6 01       	movw	r24, r12
    1fde:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    1fe2:	ac 01       	movw	r20, r24
    1fe4:	97 fd       	sbrc	r25, 7
    1fe6:	22 c0       	rjmp	.+68     	; 0x202c <conv_brk+0x154>
    1fe8:	86 95       	lsr	r24
    1fea:	86 95       	lsr	r24
    1fec:	86 95       	lsr	r24
    1fee:	f4 01       	movw	r30, r8
    1ff0:	e8 0f       	add	r30, r24
    1ff2:	f1 1d       	adc	r31, r1
    1ff4:	80 81       	ld	r24, Z
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9a 01       	movw	r18, r20
    1ffa:	27 70       	andi	r18, 0x07	; 7
    1ffc:	30 70       	andi	r19, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <conv_brk+0x12c>
    2000:	95 95       	asr	r25
    2002:	87 95       	ror	r24
    2004:	2a 95       	dec	r18
    2006:	e2 f7       	brpl	.-8      	; 0x2000 <conv_brk+0x128>
    2008:	80 fd       	sbrc	r24, 0
    200a:	05 c0       	rjmp	.+10     	; 0x2016 <conv_brk+0x13e>
    200c:	ca 01       	movw	r24, r20
    200e:	b6 01       	movw	r22, r12
    2010:	0e 94 c4 11 	call	0x2388	; 0x2388 <ungetc>
    2014:	0b c0       	rjmp	.+22     	; 0x202c <conv_brk+0x154>
    2016:	01 15       	cp	r16, r1
    2018:	11 05       	cpc	r17, r1
    201a:	19 f0       	breq	.+6      	; 0x2022 <conv_brk+0x14a>
    201c:	d8 01       	movw	r26, r16
    201e:	4d 93       	st	X+, r20
    2020:	8d 01       	movw	r16, r26
    2022:	aa 94       	dec	r10
    2024:	bb 24       	eor	r11, r11
    2026:	aa 20       	and	r10, r10
    2028:	c9 f6       	brne	.-78     	; 0x1fdc <conv_brk+0x104>
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <conv_brk+0x158>
    202c:	bb 20       	and	r11, r11
    202e:	31 f4       	brne	.+12     	; 0x203c <conv_brk+0x164>
    2030:	01 15       	cp	r16, r1
    2032:	11 05       	cpc	r17, r1
    2034:	29 f0       	breq	.+10     	; 0x2040 <conv_brk+0x168>
    2036:	f8 01       	movw	r30, r16
    2038:	10 82       	st	Z, r1
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <conv_brk+0x168>
    203c:	ee 24       	eor	r14, r14
    203e:	ff 24       	eor	r15, r15
    2040:	c7 01       	movw	r24, r14
    2042:	a0 96       	adiw	r28, 0x20	; 32
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	df 90       	pop	r13
    205c:	cf 90       	pop	r12
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	7f 90       	pop	r7
    2068:	6f 90       	pop	r6
    206a:	08 95       	ret

0000206c <vfscanf>:
    206c:	6f 92       	push	r6
    206e:	7f 92       	push	r7
    2070:	8f 92       	push	r8
    2072:	9f 92       	push	r9
    2074:	af 92       	push	r10
    2076:	bf 92       	push	r11
    2078:	cf 92       	push	r12
    207a:	df 92       	push	r13
    207c:	ef 92       	push	r14
    207e:	ff 92       	push	r15
    2080:	0f 93       	push	r16
    2082:	1f 93       	push	r17
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	5c 01       	movw	r10, r24
    208a:	6b 01       	movw	r12, r22
    208c:	3a 01       	movw	r6, r20
    208e:	fc 01       	movw	r30, r24
    2090:	17 82       	std	Z+7, r1	; 0x07
    2092:	16 82       	std	Z+6, r1	; 0x06
    2094:	88 24       	eor	r8, r8
    2096:	ea c0       	rjmp	.+468    	; 0x226c <vfscanf+0x200>
    2098:	81 2f       	mov	r24, r17
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <isspace>
    20a0:	89 2b       	or	r24, r25
    20a2:	21 f0       	breq	.+8      	; 0x20ac <vfscanf+0x40>
    20a4:	c5 01       	movw	r24, r10
    20a6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <skip_spaces>
    20aa:	e0 c0       	rjmp	.+448    	; 0x226c <vfscanf+0x200>
    20ac:	15 32       	cpi	r17, 0x25	; 37
    20ae:	49 f4       	brne	.+18     	; 0x20c2 <vfscanf+0x56>
    20b0:	f6 01       	movw	r30, r12
    20b2:	f3 fc       	sbrc	r15, 3
    20b4:	65 91       	lpm	r22, Z+
    20b6:	f3 fe       	sbrs	r15, 3
    20b8:	61 91       	ld	r22, Z+
    20ba:	6f 01       	movw	r12, r30
    20bc:	65 32       	cpi	r22, 0x25	; 37
    20be:	69 f4       	brne	.+26     	; 0x20da <vfscanf+0x6e>
    20c0:	15 e2       	ldi	r17, 0x25	; 37
    20c2:	c5 01       	movw	r24, r10
    20c4:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    20c8:	97 fd       	sbrc	r25, 7
    20ca:	dc c0       	rjmp	.+440    	; 0x2284 <vfscanf+0x218>
    20cc:	18 17       	cp	r17, r24
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <vfscanf+0x66>
    20d0:	cd c0       	rjmp	.+410    	; 0x226c <vfscanf+0x200>
    20d2:	b5 01       	movw	r22, r10
    20d4:	0e 94 c4 11 	call	0x2388	; 0x2388 <ungetc>
    20d8:	da c0       	rjmp	.+436    	; 0x228e <vfscanf+0x222>
    20da:	6a 32       	cpi	r22, 0x2A	; 42
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <vfscanf+0x78>
    20de:	16 2f       	mov	r17, r22
    20e0:	00 e0       	ldi	r16, 0x00	; 0
    20e2:	06 c0       	rjmp	.+12     	; 0x20f0 <vfscanf+0x84>
    20e4:	f3 fc       	sbrc	r15, 3
    20e6:	15 91       	lpm	r17, Z+
    20e8:	f3 fe       	sbrs	r15, 3
    20ea:	11 91       	ld	r17, Z+
    20ec:	6f 01       	movw	r12, r30
    20ee:	01 e0       	ldi	r16, 0x01	; 1
    20f0:	99 24       	eor	r9, r9
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <vfscanf+0xa6>
    20f4:	02 60       	ori	r16, 0x02	; 2
    20f6:	69 2d       	mov	r22, r9
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <mulacc>
    2104:	96 2e       	mov	r9, r22
    2106:	f6 01       	movw	r30, r12
    2108:	f3 fc       	sbrc	r15, 3
    210a:	15 91       	lpm	r17, Z+
    210c:	f3 fe       	sbrs	r15, 3
    210e:	11 91       	ld	r17, Z+
    2110:	6f 01       	movw	r12, r30
    2112:	21 2f       	mov	r18, r17
    2114:	20 53       	subi	r18, 0x30	; 48
    2116:	2a 30       	cpi	r18, 0x0A	; 10
    2118:	68 f3       	brcs	.-38     	; 0x20f4 <vfscanf+0x88>
    211a:	01 fd       	sbrc	r16, 1
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <vfscanf+0xb8>
    211e:	99 24       	eor	r9, r9
    2120:	9a 94       	dec	r9
    2122:	03 c0       	rjmp	.+6      	; 0x212a <vfscanf+0xbe>
    2124:	99 20       	and	r9, r9
    2126:	09 f4       	brne	.+2      	; 0x212a <vfscanf+0xbe>
    2128:	b2 c0       	rjmp	.+356    	; 0x228e <vfscanf+0x222>
    212a:	18 36       	cpi	r17, 0x68	; 104
    212c:	21 f0       	breq	.+8      	; 0x2136 <vfscanf+0xca>
    212e:	1c 36       	cpi	r17, 0x6C	; 108
    2130:	99 f4       	brne	.+38     	; 0x2158 <vfscanf+0xec>
    2132:	f6 01       	movw	r30, r12
    2134:	0b c0       	rjmp	.+22     	; 0x214c <vfscanf+0xe0>
    2136:	f6 01       	movw	r30, r12
    2138:	f3 fc       	sbrc	r15, 3
    213a:	65 91       	lpm	r22, Z+
    213c:	f3 fe       	sbrs	r15, 3
    213e:	61 91       	ld	r22, Z+
    2140:	68 36       	cpi	r22, 0x68	; 104
    2142:	19 f0       	breq	.+6      	; 0x214a <vfscanf+0xde>
    2144:	6f 01       	movw	r12, r30
    2146:	16 2f       	mov	r17, r22
    2148:	07 c0       	rjmp	.+14     	; 0x2158 <vfscanf+0xec>
    214a:	08 60       	ori	r16, 0x08	; 8
    214c:	04 60       	ori	r16, 0x04	; 4
    214e:	f3 fc       	sbrc	r15, 3
    2150:	15 91       	lpm	r17, Z+
    2152:	f3 fe       	sbrs	r15, 3
    2154:	11 91       	ld	r17, Z+
    2156:	6f 01       	movw	r12, r30
    2158:	11 23       	and	r17, r17
    215a:	09 f4       	brne	.+2      	; 0x215e <vfscanf+0xf2>
    215c:	98 c0       	rjmp	.+304    	; 0x228e <vfscanf+0x222>
    215e:	86 e4       	ldi	r24, 0x46	; 70
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	61 2f       	mov	r22, r17
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	0e 94 61 11 	call	0x22c2	; 0x22c2 <strchr_P>
    216a:	89 2b       	or	r24, r25
    216c:	09 f4       	brne	.+2      	; 0x2170 <vfscanf+0x104>
    216e:	8f c0       	rjmp	.+286    	; 0x228e <vfscanf+0x222>
    2170:	80 2f       	mov	r24, r16
    2172:	00 ff       	sbrs	r16, 0
    2174:	03 c0       	rjmp	.+6      	; 0x217c <vfscanf+0x110>
    2176:	ee 24       	eor	r14, r14
    2178:	ff 24       	eor	r15, r15
    217a:	07 c0       	rjmp	.+14     	; 0x218a <vfscanf+0x11e>
    217c:	f3 01       	movw	r30, r6
    217e:	e0 80       	ld	r14, Z
    2180:	f1 80       	ldd	r15, Z+1	; 0x01
    2182:	22 e0       	ldi	r18, 0x02	; 2
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	62 0e       	add	r6, r18
    2188:	73 1e       	adc	r7, r19
    218a:	1e 36       	cpi	r17, 0x6E	; 110
    218c:	51 f4       	brne	.+20     	; 0x21a2 <vfscanf+0x136>
    218e:	f5 01       	movw	r30, r10
    2190:	46 81       	ldd	r20, Z+6	; 0x06
    2192:	57 81       	ldd	r21, Z+7	; 0x07
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	70 e0       	ldi	r23, 0x00	; 0
    2198:	c7 01       	movw	r24, r14
    219a:	20 2f       	mov	r18, r16
    219c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <putval>
    21a0:	65 c0       	rjmp	.+202    	; 0x226c <vfscanf+0x200>
    21a2:	13 36       	cpi	r17, 0x63	; 99
    21a4:	91 f4       	brne	.+36     	; 0x21ca <vfscanf+0x15e>
    21a6:	81 fd       	sbrc	r24, 1
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <vfscanf+0x142>
    21aa:	99 24       	eor	r9, r9
    21ac:	93 94       	inc	r9
    21ae:	c5 01       	movw	r24, r10
    21b0:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    21b4:	97 fd       	sbrc	r25, 7
    21b6:	66 c0       	rjmp	.+204    	; 0x2284 <vfscanf+0x218>
    21b8:	e1 14       	cp	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	19 f0       	breq	.+6      	; 0x21c4 <vfscanf+0x158>
    21be:	f7 01       	movw	r30, r14
    21c0:	81 93       	st	Z+, r24
    21c2:	7f 01       	movw	r14, r30
    21c4:	9a 94       	dec	r9
    21c6:	99 f7       	brne	.-26     	; 0x21ae <vfscanf+0x142>
    21c8:	4f c0       	rjmp	.+158    	; 0x2268 <vfscanf+0x1fc>
    21ca:	1b 35       	cpi	r17, 0x5B	; 91
    21cc:	59 f4       	brne	.+22     	; 0x21e4 <vfscanf+0x178>
    21ce:	c5 01       	movw	r24, r10
    21d0:	69 2d       	mov	r22, r9
    21d2:	a7 01       	movw	r20, r14
    21d4:	96 01       	movw	r18, r12
    21d6:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <conv_brk>
    21da:	6c 01       	movw	r12, r24
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	09 f0       	breq	.+2      	; 0x21e2 <vfscanf+0x176>
    21e0:	43 c0       	rjmp	.+134    	; 0x2268 <vfscanf+0x1fc>
    21e2:	3d c0       	rjmp	.+122    	; 0x225e <vfscanf+0x1f2>
    21e4:	c5 01       	movw	r24, r10
    21e6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <skip_spaces>
    21ea:	97 fd       	sbrc	r25, 7
    21ec:	4b c0       	rjmp	.+150    	; 0x2284 <vfscanf+0x218>
    21ee:	1f 36       	cpi	r17, 0x6F	; 111
    21f0:	59 f1       	breq	.+86     	; 0x2248 <vfscanf+0x1dc>
    21f2:	10 37       	cpi	r17, 0x70	; 112
    21f4:	28 f4       	brcc	.+10     	; 0x2200 <vfscanf+0x194>
    21f6:	14 36       	cpi	r17, 0x64	; 100
    21f8:	29 f1       	breq	.+74     	; 0x2244 <vfscanf+0x1d8>
    21fa:	19 36       	cpi	r17, 0x69	; 105
    21fc:	39 f5       	brne	.+78     	; 0x224c <vfscanf+0x1e0>
    21fe:	27 c0       	rjmp	.+78     	; 0x224e <vfscanf+0x1e2>
    2200:	13 37       	cpi	r17, 0x73	; 115
    2202:	19 f0       	breq	.+6      	; 0x220a <vfscanf+0x19e>
    2204:	15 37       	cpi	r17, 0x75	; 117
    2206:	11 f5       	brne	.+68     	; 0x224c <vfscanf+0x1e0>
    2208:	1d c0       	rjmp	.+58     	; 0x2244 <vfscanf+0x1d8>
    220a:	c5 01       	movw	r24, r10
    220c:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
    2210:	ec 01       	movw	r28, r24
    2212:	97 fd       	sbrc	r25, 7
    2214:	11 c0       	rjmp	.+34     	; 0x2238 <vfscanf+0x1cc>
    2216:	0e 94 59 11 	call	0x22b2	; 0x22b2 <isspace>
    221a:	89 2b       	or	r24, r25
    221c:	29 f0       	breq	.+10     	; 0x2228 <vfscanf+0x1bc>
    221e:	ce 01       	movw	r24, r28
    2220:	b5 01       	movw	r22, r10
    2222:	0e 94 c4 11 	call	0x2388	; 0x2388 <ungetc>
    2226:	08 c0       	rjmp	.+16     	; 0x2238 <vfscanf+0x1cc>
    2228:	e1 14       	cp	r14, r1
    222a:	f1 04       	cpc	r15, r1
    222c:	19 f0       	breq	.+6      	; 0x2234 <vfscanf+0x1c8>
    222e:	f7 01       	movw	r30, r14
    2230:	c1 93       	st	Z+, r28
    2232:	7f 01       	movw	r14, r30
    2234:	9a 94       	dec	r9
    2236:	49 f7       	brne	.-46     	; 0x220a <vfscanf+0x19e>
    2238:	e1 14       	cp	r14, r1
    223a:	f1 04       	cpc	r15, r1
    223c:	a9 f0       	breq	.+42     	; 0x2268 <vfscanf+0x1fc>
    223e:	f7 01       	movw	r30, r14
    2240:	10 82       	st	Z, r1
    2242:	12 c0       	rjmp	.+36     	; 0x2268 <vfscanf+0x1fc>
    2244:	00 62       	ori	r16, 0x20	; 32
    2246:	03 c0       	rjmp	.+6      	; 0x224e <vfscanf+0x1e2>
    2248:	00 61       	ori	r16, 0x10	; 16
    224a:	01 c0       	rjmp	.+2      	; 0x224e <vfscanf+0x1e2>
    224c:	00 64       	ori	r16, 0x40	; 64
    224e:	c5 01       	movw	r24, r10
    2250:	69 2d       	mov	r22, r9
    2252:	a7 01       	movw	r20, r14
    2254:	20 2f       	mov	r18, r16
    2256:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <conv_int>
    225a:	88 23       	and	r24, r24
    225c:	29 f4       	brne	.+10     	; 0x2268 <vfscanf+0x1fc>
    225e:	f5 01       	movw	r30, r10
    2260:	83 81       	ldd	r24, Z+3	; 0x03
    2262:	80 73       	andi	r24, 0x30	; 48
    2264:	79 f4       	brne	.+30     	; 0x2284 <vfscanf+0x218>
    2266:	13 c0       	rjmp	.+38     	; 0x228e <vfscanf+0x222>
    2268:	00 ff       	sbrs	r16, 0
    226a:	83 94       	inc	r8
    226c:	f5 01       	movw	r30, r10
    226e:	f3 80       	ldd	r15, Z+3	; 0x03
    2270:	f6 01       	movw	r30, r12
    2272:	f3 fc       	sbrc	r15, 3
    2274:	15 91       	lpm	r17, Z+
    2276:	f3 fe       	sbrs	r15, 3
    2278:	11 91       	ld	r17, Z+
    227a:	6f 01       	movw	r12, r30
    227c:	11 23       	and	r17, r17
    227e:	09 f0       	breq	.+2      	; 0x2282 <vfscanf+0x216>
    2280:	0b cf       	rjmp	.-490    	; 0x2098 <vfscanf+0x2c>
    2282:	05 c0       	rjmp	.+10     	; 0x228e <vfscanf+0x222>
    2284:	88 20       	and	r8, r8
    2286:	19 f4       	brne	.+6      	; 0x228e <vfscanf+0x222>
    2288:	2f ef       	ldi	r18, 0xFF	; 255
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <vfscanf+0x226>
    228e:	28 2d       	mov	r18, r8
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	c9 01       	movw	r24, r18
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	bf 90       	pop	r11
    22a6:	af 90       	pop	r10
    22a8:	9f 90       	pop	r9
    22aa:	8f 90       	pop	r8
    22ac:	7f 90       	pop	r7
    22ae:	6f 90       	pop	r6
    22b0:	08 95       	ret

000022b2 <isspace>:
    22b2:	91 11       	cpse	r25, r1
    22b4:	e1 c0       	rjmp	.+450    	; 0x2478 <__ctype_isfalse>
    22b6:	80 32       	cpi	r24, 0x20	; 32
    22b8:	19 f0       	breq	.+6      	; 0x22c0 <isspace+0xe>
    22ba:	89 50       	subi	r24, 0x09	; 9
    22bc:	85 50       	subi	r24, 0x05	; 5
    22be:	d0 f7       	brcc	.-12     	; 0x22b4 <isspace+0x2>
    22c0:	08 95       	ret

000022c2 <strchr_P>:
    22c2:	fc 01       	movw	r30, r24
    22c4:	05 90       	lpm	r0, Z+
    22c6:	06 16       	cp	r0, r22
    22c8:	21 f0       	breq	.+8      	; 0x22d2 <strchr_P+0x10>
    22ca:	00 20       	and	r0, r0
    22cc:	d9 f7       	brne	.-10     	; 0x22c4 <strchr_P+0x2>
    22ce:	c0 01       	movw	r24, r0
    22d0:	08 95       	ret
    22d2:	31 97       	sbiw	r30, 0x01	; 1
    22d4:	cf 01       	movw	r24, r30
    22d6:	08 95       	ret

000022d8 <strnlen_P>:
    22d8:	fc 01       	movw	r30, r24
    22da:	05 90       	lpm	r0, Z+
    22dc:	61 50       	subi	r22, 0x01	; 1
    22de:	70 40       	sbci	r23, 0x00	; 0
    22e0:	01 10       	cpse	r0, r1
    22e2:	d8 f7       	brcc	.-10     	; 0x22da <strnlen_P+0x2>
    22e4:	80 95       	com	r24
    22e6:	90 95       	com	r25
    22e8:	8e 0f       	add	r24, r30
    22ea:	9f 1f       	adc	r25, r31
    22ec:	08 95       	ret

000022ee <strnlen>:
    22ee:	fc 01       	movw	r30, r24
    22f0:	61 50       	subi	r22, 0x01	; 1
    22f2:	70 40       	sbci	r23, 0x00	; 0
    22f4:	01 90       	ld	r0, Z+
    22f6:	01 10       	cpse	r0, r1
    22f8:	d8 f7       	brcc	.-10     	; 0x22f0 <strnlen+0x2>
    22fa:	80 95       	com	r24
    22fc:	90 95       	com	r25
    22fe:	8e 0f       	add	r24, r30
    2300:	9f 1f       	adc	r25, r31
    2302:	08 95       	ret

00002304 <fgetc>:
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	ec 01       	movw	r28, r24
    230a:	4b 81       	ldd	r20, Y+3	; 0x03
    230c:	40 ff       	sbrs	r20, 0
    230e:	1a c0       	rjmp	.+52     	; 0x2344 <fgetc+0x40>
    2310:	46 ff       	sbrs	r20, 6
    2312:	0a c0       	rjmp	.+20     	; 0x2328 <fgetc+0x24>
    2314:	4f 7b       	andi	r20, 0xBF	; 191
    2316:	4b 83       	std	Y+3, r20	; 0x03
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	9f 83       	std	Y+7, r25	; 0x07
    2320:	8e 83       	std	Y+6, r24	; 0x06
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	28 2f       	mov	r18, r24
    2326:	2b c0       	rjmp	.+86     	; 0x237e <fgetc+0x7a>
    2328:	42 ff       	sbrs	r20, 2
    232a:	13 c0       	rjmp	.+38     	; 0x2352 <fgetc+0x4e>
    232c:	e8 81       	ld	r30, Y
    232e:	f9 81       	ldd	r31, Y+1	; 0x01
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	33 27       	eor	r19, r19
    2336:	27 fd       	sbrc	r18, 7
    2338:	30 95       	com	r19
    233a:	21 15       	cp	r18, r1
    233c:	31 05       	cpc	r19, r1
    233e:	29 f4       	brne	.+10     	; 0x234a <fgetc+0x46>
    2340:	40 62       	ori	r20, 0x20	; 32
    2342:	4b 83       	std	Y+3, r20	; 0x03
    2344:	2f ef       	ldi	r18, 0xFF	; 255
    2346:	3f ef       	ldi	r19, 0xFF	; 255
    2348:	1b c0       	rjmp	.+54     	; 0x2380 <fgetc+0x7c>
    234a:	31 96       	adiw	r30, 0x01	; 1
    234c:	f9 83       	std	Y+1, r31	; 0x01
    234e:	e8 83       	st	Y, r30
    2350:	11 c0       	rjmp	.+34     	; 0x2374 <fgetc+0x70>
    2352:	ea 85       	ldd	r30, Y+10	; 0x0a
    2354:	fb 85       	ldd	r31, Y+11	; 0x0b
    2356:	ce 01       	movw	r24, r28
    2358:	09 95       	icall
    235a:	9c 01       	movw	r18, r24
    235c:	97 ff       	sbrs	r25, 7
    235e:	0a c0       	rjmp	.+20     	; 0x2374 <fgetc+0x70>
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	2f 5f       	subi	r18, 0xFF	; 255
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	11 f0       	breq	.+4      	; 0x236c <fgetc+0x68>
    2368:	80 e2       	ldi	r24, 0x20	; 32
    236a:	01 c0       	rjmp	.+2      	; 0x236e <fgetc+0x6a>
    236c:	80 e1       	ldi	r24, 0x10	; 16
    236e:	89 2b       	or	r24, r25
    2370:	8b 83       	std	Y+3, r24	; 0x03
    2372:	e8 cf       	rjmp	.-48     	; 0x2344 <fgetc+0x40>
    2374:	8e 81       	ldd	r24, Y+6	; 0x06
    2376:	9f 81       	ldd	r25, Y+7	; 0x07
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	9f 83       	std	Y+7, r25	; 0x07
    237c:	8e 83       	std	Y+6, r24	; 0x06
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	c9 01       	movw	r24, r18
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <ungetc>:
    2388:	9c 01       	movw	r18, r24
    238a:	fb 01       	movw	r30, r22
    238c:	83 81       	ldd	r24, Z+3	; 0x03
    238e:	80 ff       	sbrs	r24, 0
    2390:	11 c0       	rjmp	.+34     	; 0x23b4 <ungetc+0x2c>
    2392:	86 fd       	sbrc	r24, 6
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <ungetc+0x2c>
    2396:	9f ef       	ldi	r25, 0xFF	; 255
    2398:	2f 3f       	cpi	r18, 0xFF	; 255
    239a:	39 07       	cpc	r19, r25
    239c:	59 f0       	breq	.+22     	; 0x23b4 <ungetc+0x2c>
    239e:	22 83       	std	Z+2, r18	; 0x02
    23a0:	80 64       	ori	r24, 0x40	; 64
    23a2:	8f 7d       	andi	r24, 0xDF	; 223
    23a4:	83 83       	std	Z+3, r24	; 0x03
    23a6:	86 81       	ldd	r24, Z+6	; 0x06
    23a8:	97 81       	ldd	r25, Z+7	; 0x07
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	97 83       	std	Z+7, r25	; 0x07
    23ae:	86 83       	std	Z+6, r24	; 0x06
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <ungetc+0x30>
    23b4:	2f ef       	ldi	r18, 0xFF	; 255
    23b6:	3f ef       	ldi	r19, 0xFF	; 255
    23b8:	c9 01       	movw	r24, r18
    23ba:	08 95       	ret

000023bc <__ultoa_invert>:
    23bc:	fa 01       	movw	r30, r20
    23be:	aa 27       	eor	r26, r26
    23c0:	28 30       	cpi	r18, 0x08	; 8
    23c2:	51 f1       	breq	.+84     	; 0x2418 <__ultoa_invert+0x5c>
    23c4:	20 31       	cpi	r18, 0x10	; 16
    23c6:	81 f1       	breq	.+96     	; 0x2428 <__ultoa_invert+0x6c>
    23c8:	e8 94       	clt
    23ca:	6f 93       	push	r22
    23cc:	6e 7f       	andi	r22, 0xFE	; 254
    23ce:	6e 5f       	subi	r22, 0xFE	; 254
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	af 4f       	sbci	r26, 0xFF	; 255
    23d8:	b1 e0       	ldi	r27, 0x01	; 1
    23da:	3e d0       	rcall	.+124    	; 0x2458 <__ultoa_invert+0x9c>
    23dc:	b4 e0       	ldi	r27, 0x04	; 4
    23de:	3c d0       	rcall	.+120    	; 0x2458 <__ultoa_invert+0x9c>
    23e0:	67 0f       	add	r22, r23
    23e2:	78 1f       	adc	r23, r24
    23e4:	89 1f       	adc	r24, r25
    23e6:	9a 1f       	adc	r25, r26
    23e8:	a1 1d       	adc	r26, r1
    23ea:	68 0f       	add	r22, r24
    23ec:	79 1f       	adc	r23, r25
    23ee:	8a 1f       	adc	r24, r26
    23f0:	91 1d       	adc	r25, r1
    23f2:	a1 1d       	adc	r26, r1
    23f4:	6a 0f       	add	r22, r26
    23f6:	71 1d       	adc	r23, r1
    23f8:	81 1d       	adc	r24, r1
    23fa:	91 1d       	adc	r25, r1
    23fc:	a1 1d       	adc	r26, r1
    23fe:	20 d0       	rcall	.+64     	; 0x2440 <__ultoa_invert+0x84>
    2400:	09 f4       	brne	.+2      	; 0x2404 <__ultoa_invert+0x48>
    2402:	68 94       	set
    2404:	3f 91       	pop	r19
    2406:	2a e0       	ldi	r18, 0x0A	; 10
    2408:	26 9f       	mul	r18, r22
    240a:	11 24       	eor	r1, r1
    240c:	30 19       	sub	r19, r0
    240e:	30 5d       	subi	r19, 0xD0	; 208
    2410:	31 93       	st	Z+, r19
    2412:	de f6       	brtc	.-74     	; 0x23ca <__ultoa_invert+0xe>
    2414:	cf 01       	movw	r24, r30
    2416:	08 95       	ret
    2418:	46 2f       	mov	r20, r22
    241a:	47 70       	andi	r20, 0x07	; 7
    241c:	40 5d       	subi	r20, 0xD0	; 208
    241e:	41 93       	st	Z+, r20
    2420:	b3 e0       	ldi	r27, 0x03	; 3
    2422:	0f d0       	rcall	.+30     	; 0x2442 <__ultoa_invert+0x86>
    2424:	c9 f7       	brne	.-14     	; 0x2418 <__ultoa_invert+0x5c>
    2426:	f6 cf       	rjmp	.-20     	; 0x2414 <__ultoa_invert+0x58>
    2428:	46 2f       	mov	r20, r22
    242a:	4f 70       	andi	r20, 0x0F	; 15
    242c:	40 5d       	subi	r20, 0xD0	; 208
    242e:	4a 33       	cpi	r20, 0x3A	; 58
    2430:	18 f0       	brcs	.+6      	; 0x2438 <__ultoa_invert+0x7c>
    2432:	49 5d       	subi	r20, 0xD9	; 217
    2434:	31 fd       	sbrc	r19, 1
    2436:	40 52       	subi	r20, 0x20	; 32
    2438:	41 93       	st	Z+, r20
    243a:	02 d0       	rcall	.+4      	; 0x2440 <__ultoa_invert+0x84>
    243c:	a9 f7       	brne	.-22     	; 0x2428 <__ultoa_invert+0x6c>
    243e:	ea cf       	rjmp	.-44     	; 0x2414 <__ultoa_invert+0x58>
    2440:	b4 e0       	ldi	r27, 0x04	; 4
    2442:	a6 95       	lsr	r26
    2444:	97 95       	ror	r25
    2446:	87 95       	ror	r24
    2448:	77 95       	ror	r23
    244a:	67 95       	ror	r22
    244c:	ba 95       	dec	r27
    244e:	c9 f7       	brne	.-14     	; 0x2442 <__ultoa_invert+0x86>
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	61 05       	cpc	r22, r1
    2454:	71 05       	cpc	r23, r1
    2456:	08 95       	ret
    2458:	9b 01       	movw	r18, r22
    245a:	ac 01       	movw	r20, r24
    245c:	0a 2e       	mov	r0, r26
    245e:	06 94       	lsr	r0
    2460:	57 95       	ror	r21
    2462:	47 95       	ror	r20
    2464:	37 95       	ror	r19
    2466:	27 95       	ror	r18
    2468:	ba 95       	dec	r27
    246a:	c9 f7       	brne	.-14     	; 0x245e <__ultoa_invert+0xa2>
    246c:	62 0f       	add	r22, r18
    246e:	73 1f       	adc	r23, r19
    2470:	84 1f       	adc	r24, r20
    2472:	95 1f       	adc	r25, r21
    2474:	a0 1d       	adc	r26, r0
    2476:	08 95       	ret

00002478 <__ctype_isfalse>:
    2478:	99 27       	eor	r25, r25
    247a:	88 27       	eor	r24, r24

0000247c <__ctype_istrue>:
    247c:	08 95       	ret

0000247e <__udivmodhi4>:
    247e:	aa 1b       	sub	r26, r26
    2480:	bb 1b       	sub	r27, r27
    2482:	51 e1       	ldi	r21, 0x11	; 17
    2484:	07 c0       	rjmp	.+14     	; 0x2494 <__udivmodhi4_ep>

00002486 <__udivmodhi4_loop>:
    2486:	aa 1f       	adc	r26, r26
    2488:	bb 1f       	adc	r27, r27
    248a:	a6 17       	cp	r26, r22
    248c:	b7 07       	cpc	r27, r23
    248e:	10 f0       	brcs	.+4      	; 0x2494 <__udivmodhi4_ep>
    2490:	a6 1b       	sub	r26, r22
    2492:	b7 0b       	sbc	r27, r23

00002494 <__udivmodhi4_ep>:
    2494:	88 1f       	adc	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	5a 95       	dec	r21
    249a:	a9 f7       	brne	.-22     	; 0x2486 <__udivmodhi4_loop>
    249c:	80 95       	com	r24
    249e:	90 95       	com	r25
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	08 95       	ret

000024a6 <__divmodhi4>:
    24a6:	97 fb       	bst	r25, 7
    24a8:	09 2e       	mov	r0, r25
    24aa:	07 26       	eor	r0, r23
    24ac:	0a d0       	rcall	.+20     	; 0x24c2 <__divmodhi4_neg1>
    24ae:	77 fd       	sbrc	r23, 7
    24b0:	04 d0       	rcall	.+8      	; 0x24ba <__divmodhi4_neg2>
    24b2:	e5 df       	rcall	.-54     	; 0x247e <__udivmodhi4>
    24b4:	06 d0       	rcall	.+12     	; 0x24c2 <__divmodhi4_neg1>
    24b6:	00 20       	and	r0, r0
    24b8:	1a f4       	brpl	.+6      	; 0x24c0 <__divmodhi4_exit>

000024ba <__divmodhi4_neg2>:
    24ba:	70 95       	com	r23
    24bc:	61 95       	neg	r22
    24be:	7f 4f       	sbci	r23, 0xFF	; 255

000024c0 <__divmodhi4_exit>:
    24c0:	08 95       	ret

000024c2 <__divmodhi4_neg1>:
    24c2:	f6 f7       	brtc	.-4      	; 0x24c0 <__divmodhi4_exit>
    24c4:	90 95       	com	r25
    24c6:	81 95       	neg	r24
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	08 95       	ret

000024cc <__divmodsi4>:
    24cc:	97 fb       	bst	r25, 7
    24ce:	09 2e       	mov	r0, r25
    24d0:	05 26       	eor	r0, r21
    24d2:	0e d0       	rcall	.+28     	; 0x24f0 <__divmodsi4_neg1>
    24d4:	57 fd       	sbrc	r21, 7
    24d6:	04 d0       	rcall	.+8      	; 0x24e0 <__divmodsi4_neg2>
    24d8:	14 d0       	rcall	.+40     	; 0x2502 <__udivmodsi4>
    24da:	0a d0       	rcall	.+20     	; 0x24f0 <__divmodsi4_neg1>
    24dc:	00 1c       	adc	r0, r0
    24de:	38 f4       	brcc	.+14     	; 0x24ee <__divmodsi4_exit>

000024e0 <__divmodsi4_neg2>:
    24e0:	50 95       	com	r21
    24e2:	40 95       	com	r20
    24e4:	30 95       	com	r19
    24e6:	21 95       	neg	r18
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	4f 4f       	sbci	r20, 0xFF	; 255
    24ec:	5f 4f       	sbci	r21, 0xFF	; 255

000024ee <__divmodsi4_exit>:
    24ee:	08 95       	ret

000024f0 <__divmodsi4_neg1>:
    24f0:	f6 f7       	brtc	.-4      	; 0x24ee <__divmodsi4_exit>
    24f2:	90 95       	com	r25
    24f4:	80 95       	com	r24
    24f6:	70 95       	com	r23
    24f8:	61 95       	neg	r22
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	8f 4f       	sbci	r24, 0xFF	; 255
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	08 95       	ret

00002502 <__udivmodsi4>:
    2502:	a1 e2       	ldi	r26, 0x21	; 33
    2504:	1a 2e       	mov	r1, r26
    2506:	aa 1b       	sub	r26, r26
    2508:	bb 1b       	sub	r27, r27
    250a:	fd 01       	movw	r30, r26
    250c:	0d c0       	rjmp	.+26     	; 0x2528 <__udivmodsi4_ep>

0000250e <__udivmodsi4_loop>:
    250e:	aa 1f       	adc	r26, r26
    2510:	bb 1f       	adc	r27, r27
    2512:	ee 1f       	adc	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	a2 17       	cp	r26, r18
    2518:	b3 07       	cpc	r27, r19
    251a:	e4 07       	cpc	r30, r20
    251c:	f5 07       	cpc	r31, r21
    251e:	20 f0       	brcs	.+8      	; 0x2528 <__udivmodsi4_ep>
    2520:	a2 1b       	sub	r26, r18
    2522:	b3 0b       	sbc	r27, r19
    2524:	e4 0b       	sbc	r30, r20
    2526:	f5 0b       	sbc	r31, r21

00002528 <__udivmodsi4_ep>:
    2528:	66 1f       	adc	r22, r22
    252a:	77 1f       	adc	r23, r23
    252c:	88 1f       	adc	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	1a 94       	dec	r1
    2532:	69 f7       	brne	.-38     	; 0x250e <__udivmodsi4_loop>
    2534:	60 95       	com	r22
    2536:	70 95       	com	r23
    2538:	80 95       	com	r24
    253a:	90 95       	com	r25
    253c:	9b 01       	movw	r18, r22
    253e:	ac 01       	movw	r20, r24
    2540:	bd 01       	movw	r22, r26
    2542:	cf 01       	movw	r24, r30
    2544:	08 95       	ret

00002546 <_exit>:
    2546:	f8 94       	cli

00002548 <__stop_program>:
    2548:	ff cf       	rjmp	.-2      	; 0x2548 <__stop_program>
