
lab4_c_f.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000025b4  00002648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a6  008001aa  008001aa  000026f2  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000478  00000000  00000000  00002732  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001460  00000000  00000000  00002baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e0  00000000  00000000  0000400a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000113b  00000000  00000000  000044ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  00005628  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000596  00000000  00000000  00005928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cb2  00000000  00000000  00005ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__ctors_end>
       4:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_1>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_11>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_20>
      54:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_21>
      58:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      5c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      64:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      68:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      6c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      70:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      74:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      78:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      7c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      80:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      84:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      88:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

000000d3 <LCD_dur_syllable>:
      d3:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

000000e4 <LCD_rpt_interval>:
      e4:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

000000f4 <LCD_playing>:
      f4:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000103 <LCD_cap_clear>:
     103:	20 00 00                                             ..

00000106 <LcdCustomChar>:
     106:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     116:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     126:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     136:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000146 <__c.1988>:
     146:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e4       	ldi	r29, 0x40	; 64
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e4 eb       	ldi	r30, 0xB4	; 180
     166:	f5 e2       	ldi	r31, 0x25	; 37
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 3a       	cpi	r26, 0xAA	; 170
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	13 e0       	ldi	r17, 0x03	; 3
     17a:	aa ea       	ldi	r26, 0xAA	; 170
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a0 35       	cpi	r26, 0x50	; 80
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 95 06 	call	0xd2a	; 0xd2a <main>
     18c:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	0b b6       	in	r0, 0x3b	; 59
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	2f 92       	push	r2
     1a4:	3f 92       	push	r3
     1a6:	4f 92       	push	r4
     1a8:	5f 92       	push	r5
     1aa:	6f 92       	push	r6
     1ac:	7f 92       	push	r7
     1ae:	8f 92       	push	r8
     1b0:	9f 92       	push	r9
     1b2:	af 92       	push	r10
     1b4:	bf 92       	push	r11
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	2f 93       	push	r18
     1c4:	3f 93       	push	r19
     1c6:	4f 93       	push	r20
     1c8:	5f 93       	push	r21
     1ca:	6f 93       	push	r22
     1cc:	7f 93       	push	r23
     1ce:	8f 93       	push	r24
     1d0:	9f 93       	push	r25
     1d2:	af 93       	push	r26
     1d4:	bf 93       	push	r27
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     1de:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     1e2:	50 90 00 03 	lds	r5, 0x0300
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     1e6:	b0 9b       	sbis	0x16, 0	; 22
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <__vector_13+0x7e>
    ++kernel.cycles;
     1ea:	80 91 41 03 	lds	r24, 0x0341
     1ee:	90 91 42 03 	lds	r25, 0x0342
     1f2:	a0 91 43 03 	lds	r26, 0x0343
     1f6:	b0 91 44 03 	lds	r27, 0x0344
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	a1 1d       	adc	r26, r1
     1fe:	b1 1d       	adc	r27, r1
     200:	80 93 41 03 	sts	0x0341, r24
     204:	90 93 42 03 	sts	0x0342, r25
     208:	a0 93 43 03 	sts	0x0343, r26
     20c:	b0 93 44 03 	sts	0x0344, r27
    TIFR1 |= (1<<TOV1) ;
     210:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     212:	80 91 84 00 	lds	r24, 0x0084
     216:	90 91 85 00 	lds	r25, 0x0085
     21a:	3c 01       	movw	r6, r24
     21c:	88 24       	eor	r8, r8
     21e:	99 24       	eor	r9, r9
     220:	80 91 41 03 	lds	r24, 0x0341
     224:	90 91 42 03 	lds	r25, 0x0342
     228:	a0 91 43 03 	lds	r26, 0x0343
     22c:	b0 91 44 03 	lds	r27, 0x0344
     230:	dc 01       	movw	r26, r24
     232:	99 27       	eor	r25, r25
     234:	88 27       	eor	r24, r24
     236:	68 0e       	add	r6, r24
     238:	79 1e       	adc	r7, r25
     23a:	8a 1e       	adc	r8, r26
     23c:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     23e:	40 90 ff 02 	lds	r4, 0x02FF
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	ff ef       	ldi	r31, 0xFF	; 255
     248:	af 2e       	mov	r10, r31
     24a:	ff ef       	ldi	r31, 0xFF	; 255
     24c:	bf 2e       	mov	r11, r31
     24e:	ff ef       	ldi	r31, 0xFF	; 255
     250:	cf 2e       	mov	r12, r31
     252:	ff e7       	ldi	r31, 0x7F	; 127
     254:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     256:	eb e0       	ldi	r30, 0x0B	; 11
     258:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     25a:	33 24       	eor	r3, r3
     25c:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     25e:	cb e0       	ldi	r28, 0x0B	; 11
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	43 c0       	rjmp	.+134    	; 0x2ea <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     264:	62 9d       	mul	r22, r2
     266:	d0 01       	movw	r26, r0
     268:	11 24       	eor	r1, r1
     26a:	af 5f       	subi	r26, 0xFF	; 255
     26c:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == TIMEQ) {
     26e:	1a 96       	adiw	r26, 0x0a	; 10
     270:	8c 91       	ld	r24, X
     272:	1a 97       	sbiw	r26, 0x0a	; 10
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	a1 f4       	brne	.+40     	; 0x2a0 <__vector_13+0x10c>
      if (t->release <= now) {
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	ed 90       	ld	r14, X+
     27c:	fd 90       	ld	r15, X+
     27e:	0d 91       	ld	r16, X+
     280:	1c 91       	ld	r17, X
     282:	15 97       	sbiw	r26, 0x05	; 5
     284:	6e 14       	cp	r6, r14
     286:	7f 04       	cpc	r7, r15
     288:	80 06       	cpc	r8, r16
     28a:	91 06       	cpc	r9, r17
     28c:	20 f0       	brcs	.+8      	; 0x296 <__vector_13+0x102>
	t->state = READYQ;
     28e:	1a 96       	adiw	r26, 0x0a	; 10
     290:	3c 92       	st	X, r3
     292:	1a 97       	sbiw	r26, 0x0a	; 10
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     296:	ea 14       	cp	r14, r10
     298:	fb 04       	cpc	r15, r11
     29a:	0c 05       	cpc	r16, r12
     29c:	1d 05       	cpc	r17, r13
     29e:	10 f0       	brcs	.+4      	; 0x2a4 <__vector_13+0x110>
     2a0:	86 01       	movw	r16, r12
     2a2:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     2a4:	1a 96       	adiw	r26, 0x0a	; 10
     2a6:	8c 91       	ld	r24, X
     2a8:	1a 97       	sbiw	r26, 0x0a	; 10
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	d9 f4       	brne	.+54     	; 0x2e4 <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     2ae:	87 2f       	mov	r24, r23
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	8c 9f       	mul	r24, r28
     2b4:	f0 01       	movw	r30, r0
     2b6:	8d 9f       	mul	r24, r29
     2b8:	f0 0d       	add	r31, r0
     2ba:	9c 9f       	mul	r25, r28
     2bc:	f0 0d       	add	r31, r0
     2be:	11 24       	eor	r1, r1
     2c0:	e1 50       	subi	r30, 0x01	; 1
     2c2:	fd 4f       	sbci	r31, 0xFD	; 253
     2c4:	16 96       	adiw	r26, 0x06	; 6
     2c6:	2d 91       	ld	r18, X+
     2c8:	3d 91       	ld	r19, X+
     2ca:	4d 91       	ld	r20, X+
     2cc:	5c 91       	ld	r21, X
     2ce:	19 97       	sbiw	r26, 0x09	; 9
     2d0:	80 85       	ldd	r24, Z+8	; 0x08
     2d2:	91 85       	ldd	r25, Z+9	; 0x09
     2d4:	a2 85       	ldd	r26, Z+10	; 0x0a
     2d6:	b3 85       	ldd	r27, Z+11	; 0x0b
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	4a 07       	cpc	r20, r26
     2de:	5b 07       	cpc	r21, r27
     2e0:	08 f4       	brcc	.+2      	; 0x2e4 <__vector_13+0x150>
     2e2:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	6f 5f       	subi	r22, 0xFF	; 255
     2e6:	57 01       	movw	r10, r14
     2e8:	68 01       	movw	r12, r16
     2ea:	46 16       	cp	r4, r22
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__vector_13+0x15c>
     2ee:	ba cf       	rjmp	.-140    	; 0x264 <__vector_13+0xd0>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     2f0:	75 15       	cp	r23, r5
     2f2:	b1 f0       	breq	.+44     	; 0x320 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     2f4:	eb e0       	ldi	r30, 0x0B	; 11
     2f6:	5e 9e       	mul	r5, r30
     2f8:	d0 01       	movw	r26, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	af 5f       	subi	r26, 0xFF	; 255
     2fe:	bc 4f       	sbci	r27, 0xFC	; 252
    t->spl = SPL;
     300:	8d b7       	in	r24, 0x3d	; 61
     302:	8c 93       	st	X, r24
    t->sph = SPH;
     304:	8e b7       	in	r24, 0x3e	; 62
     306:	11 96       	adiw	r26, 0x01	; 1
     308:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     30a:	7e 9f       	mul	r23, r30
     30c:	f0 01       	movw	r30, r0
     30e:	11 24       	eor	r1, r1
     310:	ef 5f       	subi	r30, 0xFF	; 255
     312:	fc 4f       	sbci	r31, 0xFC	; 252
    SPH = t->sph;
     314:	81 81       	ldd	r24, Z+1	; 0x01
     316:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     318:	80 81       	ld	r24, Z
     31a:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     31c:	70 93 00 03 	sts	0x0300, r23

  }

  kernel.nextHit = nextHit;  
     320:	a0 92 45 03 	sts	0x0345, r10
     324:	b0 92 46 03 	sts	0x0346, r11
     328:	c0 92 47 03 	sts	0x0347, r12
     32c:	d0 92 48 03 	sts	0x0348, r13

  now = (kernel.cycles << 16) + TCNT1;
     330:	20 91 84 00 	lds	r18, 0x0084
     334:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	80 91 41 03 	lds	r24, 0x0341
     340:	90 91 42 03 	lds	r25, 0x0342
     344:	a0 91 43 03 	lds	r26, 0x0343
     348:	b0 91 44 03 	lds	r27, 0x0344
     34c:	dc 01       	movw	r26, r24
     34e:	99 27       	eor	r25, r25
     350:	88 27       	eor	r24, r24
     352:	28 0f       	add	r18, r24
     354:	39 1f       	adc	r19, r25
     356:	4a 1f       	adc	r20, r26
     358:	5b 1f       	adc	r21, r27
     35a:	d6 01       	movw	r26, r12
     35c:	c5 01       	movw	r24, r10
     35e:	82 1b       	sub	r24, r18
     360:	93 0b       	sbc	r25, r19
     362:	a4 0b       	sbc	r26, r20
     364:	b5 0b       	sbc	r27, r21
     366:	9c 01       	movw	r18, r24
     368:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     36a:	84 30       	cpi	r24, 0x04	; 4
     36c:	91 05       	cpc	r25, r1
     36e:	a1 05       	cpc	r26, r1
     370:	b1 05       	cpc	r27, r1
     372:	24 f4       	brge	.+8      	; 0x37c <__vector_13+0x1e8>
     374:	24 e0       	ldi	r18, 0x04	; 4
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     37c:	80 91 84 00 	lds	r24, 0x0084
     380:	90 91 85 00 	lds	r25, 0x0085
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	a4 1f       	adc	r26, r20
     38e:	b5 1f       	adc	r27, r21
     390:	80 50       	subi	r24, 0x00	; 0
     392:	90 40       	sbci	r25, 0x00	; 0
     394:	a1 40       	sbci	r26, 0x01	; 1
     396:	b0 40       	sbci	r27, 0x00	; 0
     398:	38 f4       	brcc	.+14     	; 0x3a8 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     39a:	80 91 84 00 	lds	r24, 0x0084
     39e:	90 91 85 00 	lds	r25, 0x0085
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     3a8:	80 91 84 00 	lds	r24, 0x0084
     3ac:	90 91 85 00 	lds	r25, 0x0085
     3b0:	8c 5f       	subi	r24, 0xFC	; 252
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <__vector_13+0x22c>
    OCR1A = 0x0000;
     3b6:	10 92 89 00 	sts	0x0089, r1
     3ba:	10 92 88 00 	sts	0x0088, r1
     3be:	06 c0       	rjmp	.+12     	; 0x3cc <__vector_13+0x238>
  } else {
    OCR1A = 4;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 89 00 	sts	0x0089, r25
     3c8:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 93 6f 00 	sts	0x006F, r24
}
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	2f 90       	pop	r2
     40e:	0f 90       	pop	r0
     410:	0b be       	out	0x3b, r0	; 59
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     41c:	10 92 85 00 	sts	0x0085, r1
     420:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     424:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     428:	25 e0       	ldi	r18, 0x05	; 5
     42a:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     42e:	22 e0       	ldi	r18, 0x02	; 2
     430:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	30 e4       	ldi	r19, 0x40	; 64
     438:	28 1b       	sub	r18, r24
     43a:	39 0b       	sbc	r19, r25
     43c:	30 93 40 03 	sts	0x0340, r19
     440:	20 93 3f 03 	sts	0x033F, r18
  kernel.nbrOfTasks = 0;
     444:	10 92 ff 02 	sts	0x02FF, r1
  kernel.running = 0;
     448:	10 92 00 03 	sts	0x0300, r1

  kernel.cycles = 0x0000;
     44c:	10 92 41 03 	sts	0x0341, r1
     450:	10 92 42 03 	sts	0x0342, r1
     454:	10 92 43 03 	sts	0x0343, r1
     458:	10 92 44 03 	sts	0x0344, r1
  kernel.nextHit = 0x7FFFFFFF;
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	9f ef       	ldi	r25, 0xFF	; 255
     460:	af ef       	ldi	r26, 0xFF	; 255
     462:	bf e7       	ldi	r27, 0x7F	; 127
     464:	80 93 45 03 	sts	0x0345, r24
     468:	90 93 46 03 	sts	0x0346, r25
     46c:	a0 93 47 03 	sts	0x0347, r26
     470:	b0 93 48 03 	sts	0x0348, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     474:	80 93 07 03 	sts	0x0307, r24
     478:	90 93 08 03 	sts	0x0308, r25
     47c:	a0 93 09 03 	sts	0x0309, r26
     480:	b0 93 0a 03 	sts	0x030A, r27
  kernel.tasks[0].release = 0x00000000;
     484:	10 92 03 03 	sts	0x0303, r1
     488:	10 92 04 03 	sts	0x0304, r1
     48c:	10 92 05 03 	sts	0x0305, r1
     490:	10 92 06 03 	sts	0x0306, r1

  sei(); /* set enabled interrupts */
     494:	78 94       	sei
}
     496:	08 95       	ret

00000498 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	49 01       	movw	r8, r18
     4b2:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     4b4:	f8 94       	cli

  ++kernel.nbrOfTasks;
     4b6:	20 91 ff 02 	lds	r18, 0x02FF
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	20 93 ff 02 	sts	0x02FF, r18

  sp = kernel.memptr;
     4c0:	c0 91 3f 03 	lds	r28, 0x033F
     4c4:	d0 91 40 03 	lds	r29, 0x0340
  kernel.memptr -= stacksize;  // decrease free mem ptr
     4c8:	9e 01       	movw	r18, r28
     4ca:	26 1b       	sub	r18, r22
     4cc:	37 0b       	sbc	r19, r23
     4ce:	30 93 40 03 	sts	0x0340, r19
     4d2:	20 93 3f 03 	sts	0x033F, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     4d6:	88 83       	st	Y, r24
     4d8:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     4da:	92 93       	st	-Z, r25
     4dc:	31 97       	sbiw	r30, 0x01	; 1
     4de:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     4e0:	ce 01       	movw	r24, r28
     4e2:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     4e4:	1c 92       	st	X, r1
     4e6:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     4e8:	a8 17       	cp	r26, r24
     4ea:	b9 07       	cpc	r27, r25
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <trtCreateTask+0x4c>
     4ee:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     4f0:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     4f2:	d2 92       	st	-Z, r13
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     4f8:	9e 01       	movw	r18, r28
     4fa:	24 52       	subi	r18, 0x24	; 36
     4fc:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     4fe:	1c 92       	st	X, r1
     500:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     502:	a2 17       	cp	r26, r18
     504:	b3 07       	cpc	r27, r19
     506:	d9 f7       	brne	.-10     	; 0x4fe <trtCreateTask+0x66>
     508:	9f 01       	movw	r18, r30
     50a:	26 50       	subi	r18, 0x06	; 6
     50c:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     50e:	e0 91 ff 02 	lds	r30, 0x02FF
     512:	8b e0       	ldi	r24, 0x0B	; 11
     514:	e8 9f       	mul	r30, r24
     516:	f0 01       	movw	r30, r0
     518:	11 24       	eor	r1, r1
     51a:	ef 5f       	subi	r30, 0xFF	; 255
     51c:	fc 4f       	sbci	r31, 0xFC	; 252

  t->release = release;
     51e:	82 82       	std	Z+2, r8	; 0x02
     520:	93 82       	std	Z+3, r9	; 0x03
     522:	a4 82       	std	Z+4, r10	; 0x04
     524:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     526:	e6 82       	std	Z+6, r14	; 0x06
     528:	f7 82       	std	Z+7, r15	; 0x07
     52a:	00 87       	std	Z+8, r16	; 0x08
     52c:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     532:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     534:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>

}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	af 90       	pop	r10
     54e:	9f 90       	pop	r9
     550:	8f 90       	pop	r8
     552:	08 95       	ret

00000554 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     554:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     556:	ef ef       	ldi	r30, 0xFF	; 255
     558:	f2 e0       	ldi	r31, 0x02	; 2
     55a:	e8 0f       	add	r30, r24
     55c:	f1 1d       	adc	r31, r1
     55e:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     560:	78 94       	sei
}
     562:	08 95       	ret

00000564 <trtWait>:

void trtWait(uint8_t semnbr) {
     564:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     566:	20 91 00 03 	lds	r18, 0x0300

  cli(); // disable interrupts
     56a:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     56c:	e8 2f       	mov	r30, r24
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e9 5c       	subi	r30, 0xC9	; 201
     572:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	19 f0       	breq	.+6      	; 0x580 <trtWait+0x1c>
    (*s)--;
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	80 83       	st	Z, r24
     57e:	10 c0       	rjmp	.+32     	; 0x5a0 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	28 9f       	mul	r18, r24
     588:	f0 01       	movw	r30, r0
     58a:	29 9f       	mul	r18, r25
     58c:	f0 0d       	add	r31, r0
     58e:	38 9f       	mul	r19, r24
     590:	f0 0d       	add	r31, r0
     592:	11 24       	eor	r1, r1
     594:	ef 5f       	subi	r30, 0xFF	; 255
     596:	fc 4f       	sbci	r31, 0xFC	; 252
     598:	4e 5f       	subi	r20, 0xFE	; 254
     59a:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     59c:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
  }

  sei(); // reenable interrupts
     5a0:	78 94       	sei
}
     5a2:	08 95       	ret

000005a4 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     5ac:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     5ae:	00 91 ff 02 	lds	r16, 0x02FF
     5b2:	e1 e0       	ldi	r30, 0x01	; 1
     5b4:	4f ef       	ldi	r20, 0xFF	; 255
     5b6:	5f ef       	ldi	r21, 0xFF	; 255
     5b8:	6f ef       	ldi	r22, 0xFF	; 255
     5ba:	7f ef       	ldi	r23, 0xFF	; 255
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5c2:	21 2f       	mov	r18, r17
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	2e 5f       	subi	r18, 0xFE	; 254
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	1e c0       	rjmp	.+60     	; 0x608 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     5cc:	ef 9d       	mul	r30, r15
     5ce:	d0 01       	movw	r26, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	af 5f       	subi	r26, 0xFF	; 255
     5d4:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5d6:	1a 96       	adiw	r26, 0x0a	; 10
     5d8:	8c 91       	ld	r24, X
     5da:	1a 97       	sbiw	r26, 0x0a	; 10
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	82 17       	cp	r24, r18
     5e0:	93 07       	cpc	r25, r19
     5e2:	69 f4       	brne	.+26     	; 0x5fe <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     5e4:	16 96       	adiw	r26, 0x06	; 6
     5e6:	8d 91       	ld	r24, X+
     5e8:	9d 91       	ld	r25, X+
     5ea:	0d 90       	ld	r0, X+
     5ec:	bc 91       	ld	r27, X
     5ee:	a0 2d       	mov	r26, r0
     5f0:	48 17       	cp	r20, r24
     5f2:	59 07       	cpc	r21, r25
     5f4:	6a 07       	cpc	r22, r26
     5f6:	7b 07       	cpc	r23, r27
     5f8:	10 f0       	brcs	.+4      	; 0x5fe <trtSignal+0x5a>
     5fa:	fe 2f       	mov	r31, r30
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <trtSignal+0x5e>
     5fe:	db 01       	movw	r26, r22
     600:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     602:	ef 5f       	subi	r30, 0xFF	; 255
     604:	ac 01       	movw	r20, r24
     606:	bd 01       	movw	r22, r26
     608:	0e 17       	cp	r16, r30
     60a:	00 f7       	brcc	.-64     	; 0x5cc <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     60c:	ff 23       	and	r31, r31
     60e:	41 f4       	brne	.+16     	; 0x620 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     610:	e1 2f       	mov	r30, r17
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	e2 50       	subi	r30, 0x02	; 2
     616:	fd 4f       	sbci	r31, 0xFD	; 253
     618:	81 ad       	ldd	r24, Z+57	; 0x39
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	81 af       	std	Z+57, r24	; 0x39
     61e:	11 c0       	rjmp	.+34     	; 0x642 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     620:	2f 2f       	mov	r18, r31
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e1 50       	subi	r30, 0x01	; 1
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	08 95       	ret

0000064c <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     64c:	20 91 84 00 	lds	r18, 0x0084
     650:	30 91 85 00 	lds	r19, 0x0085
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	80 91 41 03 	lds	r24, 0x0341
     65c:	90 91 42 03 	lds	r25, 0x0342
     660:	a0 91 43 03 	lds	r26, 0x0343
     664:	b0 91 44 03 	lds	r27, 0x0344
     668:	dc 01       	movw	r26, r24
     66a:	99 27       	eor	r25, r25
     66c:	88 27       	eor	r24, r24
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	4a 1f       	adc	r20, r26
     674:	5b 1f       	adc	r21, r27
}
     676:	b9 01       	movw	r22, r18
     678:	ca 01       	movw	r24, r20
     67a:	08 95       	ret

0000067c <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     67c:	e0 91 00 03 	lds	r30, 0x0300
     680:	ab e0       	ldi	r26, 0x0B	; 11
     682:	ea 9f       	mul	r30, r26
     684:	f0 01       	movw	r30, r0
     686:	11 24       	eor	r1, r1
     688:	ef 5f       	subi	r30, 0xFF	; 255
     68a:	fc 4f       	sbci	r31, 0xFC	; 252

  cli(); // turn off interrupts
     68c:	f8 94       	cli

  t->state = TIMEQ;
     68e:	a2 e0       	ldi	r26, 0x02	; 2
     690:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     692:	62 83       	std	Z+2, r22	; 0x02
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	84 83       	std	Z+4, r24	; 0x04
     698:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     69a:	26 83       	std	Z+6, r18	; 0x06
     69c:	37 83       	std	Z+7, r19	; 0x07
     69e:	40 87       	std	Z+8, r20	; 0x08
     6a0:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6a2:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
}
     6a6:	08 95       	ret

000006a8 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     6a8:	80 91 00 03 	lds	r24, 0x0300
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	82 9f       	mul	r24, r18
     6b4:	f0 01       	movw	r30, r0
     6b6:	83 9f       	mul	r24, r19
     6b8:	f0 0d       	add	r31, r0
     6ba:	92 9f       	mul	r25, r18
     6bc:	f0 0d       	add	r31, r0
     6be:	11 24       	eor	r1, r1
     6c0:	e1 50       	subi	r30, 0x01	; 1
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	df 01       	movw	r26, r30
     6c6:	14 96       	adiw	r26, 0x04	; 4
     6c8:	64 81       	ldd	r22, Z+4	; 0x04
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	7c 91       	ld	r23, X
     6ce:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     6d0:	12 96       	adiw	r26, 0x02	; 2
     6d2:	8c 91       	ld	r24, X
     6d4:	12 97       	sbiw	r26, 0x02	; 2
     6d6:	13 96       	adiw	r26, 0x03	; 3
     6d8:	9c 91       	ld	r25, X
     6da:	08 95       	ret

000006dc <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     6dc:	80 91 00 03 	lds	r24, 0x0300
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2b e0       	ldi	r18, 0x0B	; 11
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	82 9f       	mul	r24, r18
     6e8:	f0 01       	movw	r30, r0
     6ea:	83 9f       	mul	r24, r19
     6ec:	f0 0d       	add	r31, r0
     6ee:	92 9f       	mul	r25, r18
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e1 50       	subi	r30, 0x01	; 1
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	df 01       	movw	r26, r30
     6fa:	18 96       	adiw	r26, 0x08	; 8
     6fc:	60 85       	ldd	r22, Z+8	; 0x08
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	7c 91       	ld	r23, X
     702:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	8c 91       	ld	r24, X
     708:	12 97       	sbiw	r26, 0x02	; 2
     70a:	13 96       	adiw	r26, 0x03	; 3
     70c:	9c 91       	ld	r25, X
     70e:	08 95       	ret

00000710 <trtTerminate>:

void trtTerminate(void) {

  cli();
     710:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     712:	80 91 00 03 	lds	r24, 0x0300
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2b e0       	ldi	r18, 0x0B	; 11
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	82 9f       	mul	r24, r18
     71e:	f0 01       	movw	r30, r0
     720:	83 9f       	mul	r24, r19
     722:	f0 0d       	add	r31, r0
     724:	92 9f       	mul	r25, r18
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	e1 50       	subi	r30, 0x01	; 1
     72c:	fd 4f       	sbci	r31, 0xFD	; 253
     72e:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     730:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
}
     734:	08 95       	ret

00000736 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     736:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     738:	e8 2f       	mov	r30, r24
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	e9 5c       	subi	r30, 0xC9	; 201
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     740:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     742:	88 23       	and	r24, r24
     744:	19 f0       	breq	.+6      	; 0x74c <trtAccept+0x16>
    (*s)--;
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 83       	st	Z, r24
     74a:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     74c:	78 94       	sei
  return temp ;
}
     74e:	08 95       	ret

00000750 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     750:	87 e6       	ldi	r24, 0x67	; 103
     752:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     756:	e1 ec       	ldi	r30, 0xC1	; 193
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	88 e1       	ldi	r24, 0x18	; 24
     75c:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     75e:	10 92 fd 01 	sts	0x01FD, r1
     762:	10 92 fc 01 	sts	0x01FC, r1
  tx_out = 0;
     766:	10 92 ff 01 	sts	0x01FF, r1
     76a:	10 92 fe 01 	sts	0x01FE, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     76e:	80 81       	ld	r24, Z
     770:	80 68       	ori	r24, 0x80	; 128
     772:	80 83       	st	Z, r24
}
     774:	08 95       	ret

00000776 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	0b b6       	in	r0, 0x3b	; 59
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     790:	20 91 fc 01 	lds	r18, 0x01FC
     794:	30 91 fd 01 	lds	r19, 0x01FD
     798:	80 91 fe 01 	lds	r24, 0x01FE
     79c:	90 91 ff 01 	lds	r25, 0x01FF
     7a0:	28 17       	cp	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	31 f4       	brne	.+12     	; 0x7b2 <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     7a6:	80 91 c1 00 	lds	r24, 0x00C1
     7aa:	8f 7d       	andi	r24, 0xDF	; 223
     7ac:	80 93 c1 00 	sts	0x00C1, r24
     7b0:	1d c0       	rjmp	.+58     	; 0x7ec <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     7b2:	e0 91 fe 01 	lds	r30, 0x01FE
     7b6:	f0 91 ff 01 	lds	r31, 0x01FF
     7ba:	e0 50       	subi	r30, 0x00	; 0
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	80 81       	ld	r24, Z
     7c0:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     7c4:	80 91 fe 01 	lds	r24, 0x01FE
     7c8:	90 91 ff 01 	lds	r25, 0x01FF
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	90 93 ff 01 	sts	0x01FF, r25
     7d2:	80 93 fe 01 	sts	0x01FE, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     7d6:	80 91 fe 01 	lds	r24, 0x01FE
     7da:	90 91 ff 01 	lds	r25, 0x01FF
     7de:	88 3c       	cpi	r24, 0xC8	; 200
     7e0:	91 05       	cpc	r25, r1
     7e2:	21 f4       	brne	.+8      	; 0x7ec <__vector_21+0x76>
     7e4:	10 92 ff 01 	sts	0x01FF, r1
     7e8:	10 92 fe 01 	sts	0x01FE, r1
  }
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	3f 91       	pop	r19
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0b be       	out	0x3b, r0	; 59
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     806:	1f 93       	push	r17
     808:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     80a:	8a 30       	cpi	r24, 0x0A	; 10
     80c:	19 f4       	brne	.+6      	; 0x814 <uart_putchar+0xe>
     80e:	8d e0       	ldi	r24, 0x0D	; 13
     810:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
  char i = tx_in;
     814:	80 91 fc 01 	lds	r24, 0x01FC
     818:	90 91 fd 01 	lds	r25, 0x01FD
  i++;
     81c:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     81e:	88 3c       	cpi	r24, 0xC8	; 200
     820:	09 f4       	brne	.+2      	; 0x824 <uart_putchar+0x1e>
     822:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     824:	e0 91 fc 01 	lds	r30, 0x01FC
     828:	f0 91 fd 01 	lds	r31, 0x01FD
     82c:	e0 50       	subi	r30, 0x00	; 0
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	80 91 fe 01 	lds	r24, 0x01FE
     83a:	90 91 ff 01 	lds	r25, 0x01FF
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	c9 f3       	breq	.-14     	; 0x836 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     844:	30 93 fd 01 	sts	0x01FD, r19
     848:	20 93 fc 01 	sts	0x01FC, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     84c:	80 91 c1 00 	lds	r24, 0x00C1
     850:	80 62       	ori	r24, 0x20	; 32
     852:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	1f 91       	pop	r17
     85c:	08 95       	ret

0000085e <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	0b b6       	in	r0, 0x3b	; 59
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
	trt_rx_c = UDR0;
     884:	80 91 c6 00 	lds	r24, 0x00C6
     888:	80 93 49 03 	sts	0x0349, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     8c6:	80 91 aa 01 	lds	r24, 0x01AA
     8ca:	90 91 ab 01 	lds	r25, 0x01AB
     8ce:	89 2b       	or	r24, r25
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <uart_getchar+0x1c>
     8d2:	a1 c0       	rjmp	.+322    	; 0xa16 <uart_getchar+0x15e>
     8d4:	0c ea       	ldi	r16, 0xAC	; 172
     8d6:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
	if (UCSR0A & _BV(FE0))
     8de:	80 91 c0 00 	lds	r24, 0x00C0
     8e2:	84 ff       	sbrs	r24, 4
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <uart_getchar+0x34>
     8e6:	2e ef       	ldi	r18, 0xFE	; 254
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	a9 c0       	rjmp	.+338    	; 0xa3e <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     8ec:	80 91 c0 00 	lds	r24, 0x00C0
     8f0:	83 fd       	sbrc	r24, 3
     8f2:	a3 c0       	rjmp	.+326    	; 0xa3a <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     8f4:	90 91 49 03 	lds	r25, 0x0349

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     8f8:	9d 30       	cpi	r25, 0x0D	; 13
     8fa:	11 f0       	breq	.+4      	; 0x900 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     8fc:	9a 30       	cpi	r25, 0x0A	; 10
     8fe:	81 f4       	brne	.+32     	; 0x920 <uart_getchar+0x68>
	  {
	    *cp = c;
     900:	8a e0       	ldi	r24, 0x0A	; 10
     902:	f8 01       	movw	r30, r16
     904:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     906:	b7 01       	movw	r22, r14
     908:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
	    rxp = b;
     90c:	8c ea       	ldi	r24, 0xAC	; 172
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	90 93 ab 01 	sts	0x01AB, r25
     914:	80 93 aa 01 	sts	0x01AA, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
     91e:	7b c0       	rjmp	.+246    	; 0xa16 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     920:	99 30       	cpi	r25, 0x09	; 9
     922:	09 f4       	brne	.+2      	; 0x926 <uart_getchar+0x6e>
     924:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     926:	89 2f       	mov	r24, r25
     928:	80 52       	subi	r24, 0x20	; 32
     92a:	8f 35       	cpi	r24, 0x5F	; 95
     92c:	10 f0       	brcs	.+4      	; 0x932 <uart_getchar+0x7a>
     92e:	90 3a       	cpi	r25, 0xA0	; 160
     930:	70 f0       	brcs	.+28     	; 0x94e <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	0b 3f       	cpi	r16, 0xFB	; 251
     936:	1f 07       	cpc	r17, r31
     938:	11 f4       	brne	.+4      	; 0x93e <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     93a:	87 e0       	ldi	r24, 0x07	; 7
     93c:	04 c0       	rjmp	.+8      	; 0x946 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     93e:	f8 01       	movw	r30, r16
     940:	91 93       	st	Z+, r25
     942:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     944:	89 2f       	mov	r24, r25
     946:	b7 01       	movw	r22, r14
     948:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     94c:	c5 cf       	rjmp	.-118    	; 0x8d8 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     94e:	92 31       	cpi	r25, 0x12	; 18
     950:	39 f1       	breq	.+78     	; 0x9a0 <uart_getchar+0xe8>
     952:	93 31       	cpi	r25, 0x13	; 19
     954:	38 f4       	brcc	.+14     	; 0x964 <uart_getchar+0xac>
     956:	93 30       	cpi	r25, 0x03	; 3
     958:	09 f4       	brne	.+2      	; 0x95c <uart_getchar+0xa4>
     95a:	6f c0       	rjmp	.+222    	; 0xa3a <uart_getchar+0x182>
     95c:	98 30       	cpi	r25, 0x08	; 8
     95e:	09 f0       	breq	.+2      	; 0x962 <uart_getchar+0xaa>
     960:	bb cf       	rjmp	.-138    	; 0x8d8 <uart_getchar+0x20>
     962:	09 c0       	rjmp	.+18     	; 0x976 <uart_getchar+0xbe>
     964:	97 31       	cpi	r25, 0x17	; 23
     966:	09 f4       	brne	.+2      	; 0x96a <uart_getchar+0xb2>
     968:	4b c0       	rjmp	.+150    	; 0xa00 <uart_getchar+0x148>
     96a:	9f 37       	cpi	r25, 0x7F	; 127
     96c:	21 f0       	breq	.+8      	; 0x976 <uart_getchar+0xbe>
     96e:	95 31       	cpi	r25, 0x15	; 21
     970:	09 f0       	breq	.+2      	; 0x974 <uart_getchar+0xbc>
     972:	b2 cf       	rjmp	.-156    	; 0x8d8 <uart_getchar+0x20>
     974:	32 c0       	rjmp	.+100    	; 0x9da <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	0c 3a       	cpi	r16, 0xAC	; 172
     97a:	1f 07       	cpc	r17, r31
     97c:	09 f0       	breq	.+2      	; 0x980 <uart_getchar+0xc8>
     97e:	08 f4       	brcc	.+2      	; 0x982 <uart_getchar+0xca>
     980:	ab cf       	rjmp	.-170    	; 0x8d8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	b7 01       	movw	r22, r14
     986:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     98a:	80 e2       	ldi	r24, 0x20	; 32
     98c:	b7 01       	movw	r22, r14
     98e:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	b7 01       	movw	r22, r14
     996:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		cp--;
     99a:	01 50       	subi	r16, 0x01	; 1
     99c:	10 40       	sbci	r17, 0x00	; 0
     99e:	9c cf       	rjmp	.-200    	; 0x8d8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	b7 01       	movw	r22, r14
     9a4:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     9a8:	cc ea       	ldi	r28, 0xAC	; 172
     9aa:	d1 e0       	ldi	r29, 0x01	; 1
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     9ae:	89 91       	ld	r24, Y+
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     9b6:	c0 17       	cp	r28, r16
     9b8:	d1 07       	cpc	r29, r17
     9ba:	c8 f3       	brcs	.-14     	; 0x9ae <uart_getchar+0xf6>
     9bc:	8d cf       	rjmp	.-230    	; 0x8d8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     9c6:	80 e2       	ldi	r24, 0x20	; 32
     9c8:	b7 01       	movw	r22, r14
     9ca:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     9ce:	88 e0       	ldi	r24, 0x08	; 8
     9d0:	b7 01       	movw	r22, r14
     9d2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		cp--;
     9d6:	01 50       	subi	r16, 0x01	; 1
     9d8:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0c 3a       	cpi	r16, 0xAC	; 172
     9de:	18 07       	cpc	r17, r24
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <uart_getchar+0x12c>
     9e2:	68 f7       	brcc	.-38     	; 0x9be <uart_getchar+0x106>
     9e4:	79 cf       	rjmp	.-270    	; 0x8d8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	b7 01       	movw	r22, r14
     9ea:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	b7 01       	movw	r22, r14
     9f2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     9fe:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a00:	e1 e0       	ldi	r30, 0x01	; 1
     a02:	0c 3a       	cpi	r16, 0xAC	; 172
     a04:	1e 07       	cpc	r17, r30
     a06:	09 f0       	breq	.+2      	; 0xa0a <uart_getchar+0x152>
     a08:	08 f4       	brcc	.+2      	; 0xa0c <uart_getchar+0x154>
     a0a:	66 cf       	rjmp	.-308    	; 0x8d8 <uart_getchar+0x20>
     a0c:	e8 01       	movw	r28, r16
     a0e:	8a 91       	ld	r24, -Y
     a10:	80 32       	cpi	r24, 0x20	; 32
     a12:	49 f7       	brne	.-46     	; 0x9e6 <uart_getchar+0x12e>
     a14:	61 cf       	rjmp	.-318    	; 0x8d8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     a16:	e0 91 aa 01 	lds	r30, 0x01AA
     a1a:	f0 91 ab 01 	lds	r31, 0x01AB
     a1e:	81 91       	ld	r24, Z+
     a20:	f0 93 ab 01 	sts	0x01AB, r31
     a24:	e0 93 aa 01 	sts	0x01AA, r30
  if (c == '\n')
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	21 f4       	brne	.+8      	; 0xa34 <uart_getchar+0x17c>
    rxp = 0;
     a2c:	10 92 ab 01 	sts	0x01AB, r1
     a30:	10 92 aa 01 	sts	0x01AA, r1

  return c;
     a34:	28 2f       	mov	r18, r24
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <uart_getchar+0x186>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	3f ef       	ldi	r19, 0xFF	; 255
}
     a3e:	c9 01       	movw	r24, r18
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	08 95       	ret

00000a4e <port_init>:
uint16_t motor_period_ovlf;

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     a4e:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     a50:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     a56:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     a58:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     a5a:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     a5c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     a5e:	5a 9a       	sbi	0x0b, 2	; 11
end
     a60:	08 95       	ret

00000a62 <timer2_init>:
end

// sets timer2 to be a counter
void timer2_init(void)
begin
	TCCR2A = 0x00;
     a62:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x00;
     a66:	a1 eb       	ldi	r26, 0xB1	; 177
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	1c 92       	st	X, r1
	TIMSK2 = 0x00;
     a6c:	e0 e7       	ldi	r30, 0x70	; 112
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	10 82       	st	Z, r1

	TIMSK2 |= (1<<TOIE2);    // enables the overflow ISR
     a72:	80 81       	ld	r24, Z
     a74:	81 60       	ori	r24, 0x01	; 1
     a76:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21) + (1<<CS20);    // sets the prescaler to 64
     a78:	8c 91       	ld	r24, X
     a7a:	83 60       	ori	r24, 0x03	; 3
     a7c:	8c 93       	st	X, r24
end
     a7e:	08 95       	ret

00000a80 <timer0_init>:

void timer0_init(void)
begin
	TCCR0A = 0x00;
     a80:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
     a82:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0x00;
     a84:	10 92 6e 00 	sts	0x006E, r1
	OCR0A = 0;    // sets up 0 duty cycle
     a88:	17 bc       	out	0x27, r1	; 39
	EICRA = 0x00;
     a8a:	e9 e6       	ldi	r30, 0x69	; 105
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	10 82       	st	Z, r1
	EIMSK = 0x00;
     a90:	1d ba       	out	0x1d, r1	; 29

	EICRA |= (1<<ISC01);    // falling edge triggers INT0
     a92:	80 81       	ld	r24, Z
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);    // enables INT0
     a98:	e8 9a       	sbi	0x1d, 0	; 29

	TCCR0A |= (1<<COM0A1) + (1<<WGM01) + (1<<WGM00);    // fast pwm
     a9a:	84 b5       	in	r24, 0x24	; 36
     a9c:	83 68       	ori	r24, 0x83	; 131
     a9e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) + (1<<CS00);    // prescaler of 64 -> 976 cycles/sec
     aa0:	85 b5       	in	r24, 0x25	; 37
     aa2:	83 60       	ori	r24, 0x03	; 3
     aa4:	85 bd       	out	0x25, r24	; 37
end
     aa6:	08 95       	ret

00000aa8 <calc_PWM_Const>:
	end
  end

// --- define task 2  ----------------------------------------
void calc_PWM_Const(void* args) 
  begin	
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
	int error, prev_error, sum_error; 
	int CF;
	float p, i, d;
	float rpm_isr;

	s_value = 1000; // <------------------------------------- This is a test statement only
     abe:	88 ee       	ldi	r24, 0xE8	; 232
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	90 93 e2 02 	sts	0x02E2, r25
     ac6:	80 93 e1 02 	sts	0x02E1, r24
	p = 17;
	i = 0;
	d = 0;
	error = 0;
	OCR0A = 150;
     aca:	86 e9       	ldi	r24, 0x96	; 150
     acc:	87 bd       	out	0x27, r24	; 39
     ace:	cc 24       	eor	r12, r12
     ad0:	dd 24       	eor	r13, r13
		trtSignal(SEM_SHARED_S);


		CF = 0.8574*CF;

		if (CF>255) OCR0A = 255;
     ad2:	99 24       	eor	r9, r9
     ad4:	9a 94       	dec	r9
	OCR0A = 150;
	prev_error = 0;

	while(1)
	begin
		fan_period = fan_period*7;    // ticks for one rotation
     ad6:	20 91 ea 02 	lds	r18, 0x02EA
     ada:	30 91 eb 02 	lds	r19, 0x02EB
     ade:	c9 01       	movw	r24, r18
     ae0:	e3 e0       	ldi	r30, 0x03	; 3
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	ea 95       	dec	r30
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <calc_PWM_Const+0x3a>
     aea:	82 1b       	sub	r24, r18
     aec:	93 0b       	sbc	r25, r19
     aee:	90 93 eb 02 	sts	0x02EB, r25
     af2:	80 93 ea 02 	sts	0x02EA, r24
		rpm_isr = 500000*60/fan_period;    // divide 60 seconsd by rotations/sec for rpm
     af6:	e0 90 ea 02 	lds	r14, 0x02EA
     afa:	f0 90 eb 02 	lds	r15, 0x02EB

		prev_error = error;
		
		// lock and look at error
		trtWait(SEM_SHARED_RPM);
     afe:	87 e0       	ldi	r24, 0x07	; 7
     b00:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		RPM = (int)rpm_isr;    // saves the calculated value into a global that LCD func can use
     b04:	00 e0       	ldi	r16, 0x00	; 0
     b06:	10 e0       	ldi	r17, 0x00	; 0
     b08:	60 e8       	ldi	r22, 0x80	; 128
     b0a:	73 ec       	ldi	r23, 0xC3	; 195
     b0c:	89 ec       	ldi	r24, 0xC9	; 201
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	a8 01       	movw	r20, r16
     b12:	97 01       	movw	r18, r14
     b14:	0e 94 33 0c 	call	0x1866	; 0x1866 <__divmodsi4>
     b18:	ca 01       	movw	r24, r20
     b1a:	b9 01       	movw	r22, r18
     b1c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatsisf>
     b20:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fixsfsi>
     b24:	70 93 e0 02 	sts	0x02E0, r23
     b28:	60 93 df 02 	sts	0x02DF, r22
		trtWait(SEM_SHARED_S);
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		error = s_value - RPM;
     b32:	c0 91 e1 02 	lds	r28, 0x02E1
     b36:	d0 91 e2 02 	lds	r29, 0x02E2
     b3a:	80 91 df 02 	lds	r24, 0x02DF
     b3e:	90 91 e0 02 	lds	r25, 0x02E0
     b42:	c8 1b       	sub	r28, r24
     b44:	d9 0b       	sbc	r29, r25
		trtSignal(SEM_SHARED_S);
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		trtSignal(SEM_SHARED_RPM);
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>

		// check if error had a zero crossing and reset the i term
		if((error>0 && prev_error>0) || (error<0 && prev_error<0)) sum_error += error;
     b52:	1c 16       	cp	r1, r28
     b54:	1d 06       	cpc	r1, r29
     b56:	24 f4       	brge	.+8      	; 0xb60 <calc_PWM_Const+0xb8>
     b58:	1c 14       	cp	r1, r12
     b5a:	1d 04       	cpc	r1, r13
     b5c:	2c f0       	brlt	.+10     	; 0xb68 <calc_PWM_Const+0xc0>
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <calc_PWM_Const+0xc6>
     b60:	20 97       	sbiw	r28, 0x00	; 0
     b62:	29 f0       	breq	.+10     	; 0xb6e <calc_PWM_Const+0xc6>
     b64:	d7 fe       	sbrs	r13, 7
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <calc_PWM_Const+0xc6>
     b68:	ac 0e       	add	r10, r28
     b6a:	bd 1e       	adc	r11, r29
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <calc_PWM_Const+0xca>
     b6e:	aa 24       	eor	r10, r10
     b70:	bb 24       	eor	r11, r11
		else sum_error = 0;

		// calculate CF
		trtWait(SEM_SHARED_S);
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		trtWait(SEM_SHARED_P);
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		trtWait(SEM_SHARED_I);
     b7e:	85 e0       	ldi	r24, 0x05	; 5
     b80:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		trtWait(SEM_SHARED_D);
     b84:	86 e0       	ldi	r24, 0x06	; 6
     b86:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		CF = p * error + d * (error-prev_error) + i * (sum_error);
		trtSignal(SEM_SHARED_D);
     b8a:	86 e0       	ldi	r24, 0x06	; 6
     b8c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		trtSignal(SEM_SHARED_I);
     b90:	85 e0       	ldi	r24, 0x05	; 5
     b92:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		trtSignal(SEM_SHARED_P);
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		trtSignal(SEM_SHARED_S);
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>


		CF = 0.8574*CF;
     ba2:	be 01       	movw	r22, r28
     ba4:	88 27       	eor	r24, r24
     ba6:	77 fd       	sbrc	r23, 7
     ba8:	80 95       	com	r24
     baa:	98 2f       	mov	r25, r24
     bac:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatsisf>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	48 e8       	ldi	r20, 0x88	; 136
     bb6:	51 e4       	ldi	r21, 0x41	; 65
     bb8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     bbc:	7b 01       	movw	r14, r22
     bbe:	8c 01       	movw	r16, r24
     bc0:	be 01       	movw	r22, r28
     bc2:	6c 19       	sub	r22, r12
     bc4:	7d 09       	sbc	r23, r13
     bc6:	88 27       	eor	r24, r24
     bc8:	77 fd       	sbrc	r23, 7
     bca:	80 95       	com	r24
     bcc:	98 2f       	mov	r25, r24
     bce:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatsisf>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	c8 01       	movw	r24, r16
     be4:	b7 01       	movw	r22, r14
     be6:	0e 94 86 0a 	call	0x150c	; 0x150c <__addsf3>
     bea:	7b 01       	movw	r14, r22
     bec:	8c 01       	movw	r16, r24
     bee:	b5 01       	movw	r22, r10
     bf0:	88 27       	eor	r24, r24
     bf2:	77 fd       	sbrc	r23, 7
     bf4:	80 95       	com	r24
     bf6:	98 2f       	mov	r25, r24
     bf8:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatsisf>
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     c08:	9b 01       	movw	r18, r22
     c0a:	ac 01       	movw	r20, r24
     c0c:	c8 01       	movw	r24, r16
     c0e:	b7 01       	movw	r22, r14
     c10:	0e 94 86 0a 	call	0x150c	; 0x150c <__addsf3>
     c14:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fixsfsi>
     c18:	88 27       	eor	r24, r24
     c1a:	77 fd       	sbrc	r23, 7
     c1c:	80 95       	com	r24
     c1e:	98 2f       	mov	r25, r24
     c20:	0e 94 1d 0b 	call	0x163a	; 0x163a <__floatsisf>
     c24:	21 e9       	ldi	r18, 0x91	; 145
     c26:	3e e7       	ldi	r19, 0x7E	; 126
     c28:	4b e5       	ldi	r20, 0x5B	; 91
     c2a:	5f e3       	ldi	r21, 0x3F	; 63
     c2c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__mulsf3>
     c30:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fixsfsi>

		if (CF>255) OCR0A = 255;
     c34:	6f 3f       	cpi	r22, 0xFF	; 255
     c36:	71 05       	cpc	r23, r1
     c38:	11 f0       	breq	.+4      	; 0xc3e <calc_PWM_Const+0x196>
     c3a:	0c f0       	brlt	.+2      	; 0xc3e <calc_PWM_Const+0x196>
     c3c:	97 bc       	out	0x27, r9	; 39
		if (CF<0) OCR0A = 0;
     c3e:	77 fd       	sbrc	r23, 7
     c40:	17 bc       	out	0x27, r1	; 39
		if (CF<=255 && CF>=0) OCR0A = (char)CF; 
     c42:	6f 3f       	cpi	r22, 0xFF	; 255
     c44:	71 05       	cpc	r23, r1
     c46:	09 f0       	breq	.+2      	; 0xc4a <calc_PWM_Const+0x1a2>
     c48:	08 f4       	brcc	.+2      	; 0xc4c <calc_PWM_Const+0x1a4>
     c4a:	67 bd       	out	0x27, r22	; 39
		
		OCR0B = OCR0A; // set for the Oscope measurement
     c4c:	87 b5       	in	r24, 0x27	; 39
     c4e:	88 bd       	out	0x28, r24	; 40
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     c50:	20 91 41 03 	lds	r18, 0x0341
     c54:	30 91 42 03 	lds	r19, 0x0342
     c58:	40 91 43 03 	lds	r20, 0x0343
     c5c:	50 91 44 03 	lds	r21, 0x0344
     c60:	a9 01       	movw	r20, r18
     c62:	33 27       	eor	r19, r19
     c64:	22 27       	eor	r18, r18
     c66:	60 91 84 00 	lds	r22, 0x0084
     c6a:	70 91 85 00 	lds	r23, 0x0085

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.01);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.04);
	    trtSleepUntil(rel, dead);
     c6e:	e0 90 84 00 	lds	r14, 0x0084
     c72:	f0 90 85 00 	lds	r15, 0x0085
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	62 0f       	add	r22, r18
     c7c:	73 1f       	adc	r23, r19
     c7e:	84 1f       	adc	r24, r20
     c80:	95 1f       	adc	r25, r21
     c82:	64 56       	subi	r22, 0x64	; 100
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	8f 4f       	sbci	r24, 0xFF	; 255
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	00 e0       	ldi	r16, 0x00	; 0
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	2e 0d       	add	r18, r14
     c90:	3f 1d       	adc	r19, r15
     c92:	40 1f       	adc	r20, r16
     c94:	51 1f       	adc	r21, r17
     c96:	2f 58       	subi	r18, 0x8F	; 143
     c98:	3d 4f       	sbci	r19, 0xFD	; 253
     c9a:	4f 4f       	sbci	r20, 0xFF	; 255
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
     ca2:	6e 01       	movw	r12, r28
     ca4:	18 cf       	rjmp	.-464    	; 0xad6 <calc_PWM_Const+0x2e>

00000ca6 <__vector_1>:
	end
  end

// pin change interrupt on D.2. Initialized in task 2
ISR(INT0_vect)
begin
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	0b b6       	in	r0, 0x3b	; 59
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
	fan_period = TCNT2 + motor_period_ovlf;
     cbe:	e2 eb       	ldi	r30, 0xB2	; 178
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	20 81       	ld	r18, Z
     cc4:	80 91 fd 02 	lds	r24, 0x02FD
     cc8:	90 91 fe 02 	lds	r25, 0x02FE
     ccc:	82 0f       	add	r24, r18
     cce:	91 1d       	adc	r25, r1
     cd0:	90 93 eb 02 	sts	0x02EB, r25
     cd4:	80 93 ea 02 	sts	0x02EA, r24
    TCNT2 = 0;
     cd8:	10 82       	st	Z, r1
	motor_period_ovlf = 0 ;
     cda:	10 92 fe 02 	sts	0x02FE, r1
     cde:	10 92 fd 02 	sts	0x02FD, r1
end
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	2f 91       	pop	r18
     cec:	0f 90       	pop	r0
     cee:	0b be       	out	0x3b, r0	; 59
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_11>:

// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     d08:	80 91 fd 02 	lds	r24, 0x02FD
     d0c:	90 91 fe 02 	lds	r25, 0x02FE
     d10:	80 50       	subi	r24, 0x00	; 0
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	90 93 fe 02 	sts	0x02FE, r25
     d18:	80 93 fd 02 	sts	0x02FD, r24
}
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <main>:

// --- Main Program ----------------------------------
int main(void) {
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     d36:	0e 94 a8 03 	call	0x750	; 0x750 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     d3a:	6b e9       	ldi	r22, 0x9B	; 155
     d3c:	71 e0       	ldi	r23, 0x01	; 1
     d3e:	70 93 4f 03 	sts	0x034F, r23
     d42:	60 93 4e 03 	sts	0x034E, r22
     d46:	70 93 4b 03 	sts	0x034B, r23
     d4a:	60 93 4a 03 	sts	0x034A, r22
     d4e:	70 93 4d 03 	sts	0x034D, r23
     d52:	60 93 4c 03 	sts	0x034C, r22
  fprintf(stdout,"\n\r Hi\n\r\n\r");
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 ad 0c 	call	0x195a	; 0x195a <fputs>

  // start TRT
  trtInitKernel(140); // 80 bytes for the idle task stack
     d5e:	8c e8       	ldi	r24, 0x8C	; 140
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 0e 02 	call	0x41c	; 0x41c <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d66:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d68:	10 92 38 03 	sts	0x0338, r1
  
  sei(); // set enabled interrupts;
     d6c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d6e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d70:	10 92 39 03 	sts	0x0339, r1
  
  sei(); // set enabled interrupts;
     d74:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d76:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 3a 03 	sts	0x033A, r24
  
  sei(); // set enabled interrupts;
     d7e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d80:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d82:	80 93 3b 03 	sts	0x033B, r24
  
  sei(); // set enabled interrupts;
     d86:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d88:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d8a:	80 93 3c 03 	sts	0x033C, r24
  
  sei(); // set enabled interrupts;
     d8e:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d90:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d92:	80 93 3d 03 	sts	0x033D, r24
  
  sei(); // set enabled interrupts;
     d96:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     d98:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     d9a:	80 93 3e 03 	sts	0x033E, r24
  
  sei(); // set enabled interrupts;
     d9e:	78 94       	sei
  trtCreateSemaphore(SEM_SHARED_D, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_SHARED_RPM, 1) ; // protect shared variables


 // --- creat tasks  ----------------
  trtCreateTask(get_User_Input, 1000, SECONDS2TICKS(0.01), SECONDS2TICKS(0.1), &(args[0]));
     da0:	84 e1       	ldi	r24, 0x14	; 20
     da2:	97 e0       	ldi	r25, 0x07	; 7
     da4:	68 ee       	ldi	r22, 0xE8	; 232
     da6:	73 e0       	ldi	r23, 0x03	; 3
     da8:	2c e9       	ldi	r18, 0x9C	; 156
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	aa e1       	ldi	r26, 0x1A	; 26
     db2:	ea 2e       	mov	r14, r26
     db4:	a6 e0       	ldi	r26, 0x06	; 6
     db6:	fa 2e       	mov	r15, r26
     db8:	01 2d       	mov	r16, r1
     dba:	11 2d       	mov	r17, r1
     dbc:	f8 ec       	ldi	r31, 0xC8	; 200
     dbe:	cf 2e       	mov	r12, r31
     dc0:	f2 e0       	ldi	r31, 0x02	; 2
     dc2:	df 2e       	mov	r13, r31
     dc4:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  trtCreateTask(calc_PWM_Const, 1000, SECONDS2TICKS(0.01), SECONDS2TICKS(0.05), &(args[1]));
     dc8:	84 e5       	ldi	r24, 0x54	; 84
     dca:	95 e0       	ldi	r25, 0x05	; 5
     dcc:	68 ee       	ldi	r22, 0xE8	; 232
     dce:	73 e0       	ldi	r23, 0x03	; 3
     dd0:	2c e9       	ldi	r18, 0x9C	; 156
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	ed e0       	ldi	r30, 0x0D	; 13
     dda:	ee 2e       	mov	r14, r30
     ddc:	e3 e0       	ldi	r30, 0x03	; 3
     dde:	fe 2e       	mov	r15, r30
     de0:	01 2d       	mov	r16, r1
     de2:	11 2d       	mov	r17, r1
     de4:	ba ec       	ldi	r27, 0xCA	; 202
     de6:	cb 2e       	mov	r12, r27
     de8:	b2 e0       	ldi	r27, 0x02	; 2
     dea:	db 2e       	mov	r13, r27
     dec:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  trtCreateTask(get_Fan_Speed, 1000, SECONDS2TICKS(0.05), SECONDS2TICKS(0.2), &(args[2]));
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	98 e0       	ldi	r25, 0x08	; 8
     df4:	68 ee       	ldi	r22, 0xE8	; 232
     df6:	73 e0       	ldi	r23, 0x03	; 3
     df8:	2d e0       	ldi	r18, 0x0D	; 13
     dfa:	33 e0       	ldi	r19, 0x03	; 3
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	a5 e3       	ldi	r26, 0x35	; 53
     e02:	ea 2e       	mov	r14, r26
     e04:	ac e0       	ldi	r26, 0x0C	; 12
     e06:	fa 2e       	mov	r15, r26
     e08:	01 2d       	mov	r16, r1
     e0a:	11 2d       	mov	r17, r1
     e0c:	fc ec       	ldi	r31, 0xCC	; 204
     e0e:	cf 2e       	mov	r12, r31
     e10:	f2 e0       	ldi	r31, 0x02	; 2
     e12:	df 2e       	mov	r13, r31
     e14:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     e18:	83 b7       	in	r24, 0x33	; 51
     e1a:	81 7f       	andi	r24, 0xF1	; 241
     e1c:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     e1e:	83 b7       	in	r24, 0x33	; 51
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	83 bf       	out	0x33, r24	; 51
  while (1) 
  begin
  	sleep_cpu();
     e24:	88 95       	sleep
     e26:	fe cf       	rjmp	.-4      	; 0xe24 <main+0xfa>

00000e28 <get_User_Input>:
end
*/

// --- define task 1  ----------------------------------------
void get_User_Input(void* args) 
  begin
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <get_User_Input+0x26>
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <get_User_Input+0x28>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <get_User_Input+0x2a>
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %d", cmd, &inputValue) ;
     e56:	23 e0       	ldi	r18, 0x03	; 3
     e58:	22 2e       	mov	r2, r18
     e5a:	31 2c       	mov	r3, r1
     e5c:	2c 0e       	add	r2, r28
     e5e:	3d 1e       	adc	r3, r29
     e60:	2e 01       	movw	r4, r28
     e62:	08 94       	sec
     e64:	41 1c       	adc	r4, r1
     e66:	51 1c       	adc	r5, r1
		
		if (cmd[0] == 's')
		begin
			trtWait(SEM_SHARED_S) ;
			s_value = inputValue;
			fprintf(stdout,"value of s changed to %i\n\n",inputValue);
     e68:	90 e1       	ldi	r25, 0x10	; 16
     e6a:	69 2e       	mov	r6, r25
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	79 2e       	mov	r7, r25
		end
		if (cmd[0] == 'p')
		begin
			trtWait(SEM_SHARED_P) ;
			p_value = inputValue;
			fprintf(stdout,"value of p changed to %i\n\n",inputValue);
     e70:	8b e2       	ldi	r24, 0x2B	; 43
     e72:	88 2e       	mov	r8, r24
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	98 2e       	mov	r9, r24
		end
		if (cmd[0] == 'i')
		begin
			trtWait(SEM_SHARED_I) ;
			i_value = inputValue;
			fprintf(stdout,"value of i changed to %i\n\n",inputValue);
     e78:	06 e4       	ldi	r16, 0x46	; 70
     e7a:	a0 2e       	mov	r10, r16
     e7c:	01 e0       	ldi	r16, 0x01	; 1
     e7e:	b0 2e       	mov	r11, r16
		end
		if (cmd[0] == 'd')
		begin
			trtWait(SEM_SHARED_D) ;
			d_value = inputValue;
			fprintf(stdout,"value of d changed to %i\n\n",inputValue);
     e80:	11 e6       	ldi	r17, 0x61	; 97
     e82:	c1 2e       	mov	r12, r17
     e84:	11 e0       	ldi	r17, 0x01	; 1
     e86:	d1 2e       	mov	r13, r17
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     e88:	60 91 4c 03 	lds	r22, 0x034C
     e8c:	70 91 4d 03 	lds	r23, 0x034D
     e90:	8e e3       	ldi	r24, 0x3E	; 62
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
		fscanf(stdin, "%s %d", cmd, &inputValue) ;
     e98:	8d b7       	in	r24, 0x3d	; 61
     e9a:	9e b7       	in	r25, 0x3e	; 62
     e9c:	08 97       	sbiw	r24, 0x08	; 8
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	9e bf       	out	0x3e, r25	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	8d bf       	out	0x3d, r24	; 61
     ea8:	ed b7       	in	r30, 0x3d	; 61
     eaa:	fe b7       	in	r31, 0x3e	; 62
     eac:	31 96       	adiw	r30, 0x01	; 1
     eae:	80 91 4a 03 	lds	r24, 0x034A
     eb2:	90 91 4b 03 	lds	r25, 0x034B
     eb6:	ad b7       	in	r26, 0x3d	; 61
     eb8:	be b7       	in	r27, 0x3e	; 62
     eba:	12 96       	adiw	r26, 0x02	; 2
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	11 97       	sbiw	r26, 0x01	; 1
     ec2:	8a e0       	ldi	r24, 0x0A	; 10
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	93 83       	std	Z+3, r25	; 0x03
     ec8:	82 83       	std	Z+2, r24	; 0x02
     eca:	35 82       	std	Z+5, r3	; 0x05
     ecc:	24 82       	std	Z+4, r2	; 0x04
     ece:	57 82       	std	Z+7, r5	; 0x07
     ed0:	46 82       	std	Z+6, r4	; 0x06
     ed2:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <fscanf>
		//trtWait(SEM_STRING_DONE);

		// update shared leds
		
		if (cmd[0] == 's')
     ed6:	ad b7       	in	r26, 0x3d	; 61
     ed8:	be b7       	in	r27, 0x3e	; 62
     eda:	18 96       	adiw	r26, 0x08	; 8
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	be bf       	out	0x3e, r27	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	ad bf       	out	0x3d, r26	; 61
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	83 37       	cpi	r24, 0x73	; 115
     eea:	51 f5       	brne	.+84     	; 0xf40 <get_User_Input+0x118>
		begin
			trtWait(SEM_SHARED_S) ;
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			s_value = inputValue;
     ef2:	29 81       	ldd	r18, Y+1	; 0x01
     ef4:	3a 81       	ldd	r19, Y+2	; 0x02
     ef6:	30 93 e2 02 	sts	0x02E2, r19
     efa:	20 93 e1 02 	sts	0x02E1, r18
			fprintf(stdout,"value of s changed to %i\n\n",inputValue);
     efe:	00 d0       	rcall	.+0      	; 0xf00 <get_User_Input+0xd8>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <get_User_Input+0xda>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <get_User_Input+0xdc>
     f04:	ed b7       	in	r30, 0x3d	; 61
     f06:	fe b7       	in	r31, 0x3e	; 62
     f08:	31 96       	adiw	r30, 0x01	; 1
     f0a:	80 91 4c 03 	lds	r24, 0x034C
     f0e:	90 91 4d 03 	lds	r25, 0x034D
     f12:	ad b7       	in	r26, 0x3d	; 61
     f14:	be b7       	in	r27, 0x3e	; 62
     f16:	12 96       	adiw	r26, 0x02	; 2
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
     f1c:	11 97       	sbiw	r26, 0x01	; 1
     f1e:	73 82       	std	Z+3, r7	; 0x03
     f20:	62 82       	std	Z+2, r6	; 0x02
     f22:	35 83       	std	Z+5, r19	; 0x05
     f24:	24 83       	std	Z+4, r18	; 0x04
     f26:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fprintf>
			trtSignal(SEM_SHARED_S);
     f2a:	8d b7       	in	r24, 0x3d	; 61
     f2c:	9e b7       	in	r25, 0x3e	; 62
     f2e:	06 96       	adiw	r24, 0x06	; 6
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	9e bf       	out	0x3e, r25	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	8d bf       	out	0x3d, r24	; 61
     f3a:	83 e0       	ldi	r24, 0x03	; 3
     f3c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'p')
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	80 37       	cpi	r24, 0x70	; 112
     f44:	51 f5       	brne	.+84     	; 0xf9a <get_User_Input+0x172>
		begin
			trtWait(SEM_SHARED_P) ;
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			p_value = inputValue;
     f4c:	29 81       	ldd	r18, Y+1	; 0x01
     f4e:	3a 81       	ldd	r19, Y+2	; 0x02
     f50:	30 93 e7 02 	sts	0x02E7, r19
     f54:	20 93 e6 02 	sts	0x02E6, r18
			fprintf(stdout,"value of p changed to %i\n\n",inputValue);
     f58:	00 d0       	rcall	.+0      	; 0xf5a <get_User_Input+0x132>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <get_User_Input+0x134>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <get_User_Input+0x136>
     f5e:	ed b7       	in	r30, 0x3d	; 61
     f60:	fe b7       	in	r31, 0x3e	; 62
     f62:	31 96       	adiw	r30, 0x01	; 1
     f64:	80 91 4c 03 	lds	r24, 0x034C
     f68:	90 91 4d 03 	lds	r25, 0x034D
     f6c:	ad b7       	in	r26, 0x3d	; 61
     f6e:	be b7       	in	r27, 0x3e	; 62
     f70:	12 96       	adiw	r26, 0x02	; 2
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
     f76:	11 97       	sbiw	r26, 0x01	; 1
     f78:	93 82       	std	Z+3, r9	; 0x03
     f7a:	82 82       	std	Z+2, r8	; 0x02
     f7c:	35 83       	std	Z+5, r19	; 0x05
     f7e:	24 83       	std	Z+4, r18	; 0x04
     f80:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fprintf>
			trtSignal(SEM_SHARED_P);
     f84:	8d b7       	in	r24, 0x3d	; 61
     f86:	9e b7       	in	r25, 0x3e	; 62
     f88:	06 96       	adiw	r24, 0x06	; 6
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	9e bf       	out	0x3e, r25	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	8d bf       	out	0x3d, r24	; 61
     f94:	84 e0       	ldi	r24, 0x04	; 4
     f96:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'i')
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	89 36       	cpi	r24, 0x69	; 105
     f9e:	51 f5       	brne	.+84     	; 0xff4 <get_User_Input+0x1cc>
		begin
			trtWait(SEM_SHARED_I) ;
     fa0:	85 e0       	ldi	r24, 0x05	; 5
     fa2:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			i_value = inputValue;
     fa6:	29 81       	ldd	r18, Y+1	; 0x01
     fa8:	3a 81       	ldd	r19, Y+2	; 0x02
     faa:	30 93 e9 02 	sts	0x02E9, r19
     fae:	20 93 e8 02 	sts	0x02E8, r18
			fprintf(stdout,"value of i changed to %i\n\n",inputValue);
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <get_User_Input+0x18c>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <get_User_Input+0x18e>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <get_User_Input+0x190>
     fb8:	ed b7       	in	r30, 0x3d	; 61
     fba:	fe b7       	in	r31, 0x3e	; 62
     fbc:	31 96       	adiw	r30, 0x01	; 1
     fbe:	80 91 4c 03 	lds	r24, 0x034C
     fc2:	90 91 4d 03 	lds	r25, 0x034D
     fc6:	ad b7       	in	r26, 0x3d	; 61
     fc8:	be b7       	in	r27, 0x3e	; 62
     fca:	12 96       	adiw	r26, 0x02	; 2
     fcc:	9c 93       	st	X, r25
     fce:	8e 93       	st	-X, r24
     fd0:	11 97       	sbiw	r26, 0x01	; 1
     fd2:	b3 82       	std	Z+3, r11	; 0x03
     fd4:	a2 82       	std	Z+2, r10	; 0x02
     fd6:	35 83       	std	Z+5, r19	; 0x05
     fd8:	24 83       	std	Z+4, r18	; 0x04
     fda:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fprintf>
			trtSignal(SEM_SHARED_I);
     fde:	8d b7       	in	r24, 0x3d	; 61
     fe0:	9e b7       	in	r25, 0x3e	; 62
     fe2:	06 96       	adiw	r24, 0x06	; 6
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	9e bf       	out	0x3e, r25	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	8d bf       	out	0x3d, r24	; 61
     fee:	85 e0       	ldi	r24, 0x05	; 5
     ff0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'd')
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	84 36       	cpi	r24, 0x64	; 100
     ff8:	51 f5       	brne	.+84     	; 0x104e <get_User_Input+0x226>
		begin
			trtWait(SEM_SHARED_D) ;
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			d_value = inputValue;
    1000:	29 81       	ldd	r18, Y+1	; 0x01
    1002:	3a 81       	ldd	r19, Y+2	; 0x02
    1004:	30 93 e5 02 	sts	0x02E5, r19
    1008:	20 93 e4 02 	sts	0x02E4, r18
			fprintf(stdout,"value of d changed to %i\n\n",inputValue);
    100c:	00 d0       	rcall	.+0      	; 0x100e <get_User_Input+0x1e6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <get_User_Input+0x1e8>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <get_User_Input+0x1ea>
    1012:	ed b7       	in	r30, 0x3d	; 61
    1014:	fe b7       	in	r31, 0x3e	; 62
    1016:	31 96       	adiw	r30, 0x01	; 1
    1018:	80 91 4c 03 	lds	r24, 0x034C
    101c:	90 91 4d 03 	lds	r25, 0x034D
    1020:	ad b7       	in	r26, 0x3d	; 61
    1022:	be b7       	in	r27, 0x3e	; 62
    1024:	12 96       	adiw	r26, 0x02	; 2
    1026:	9c 93       	st	X, r25
    1028:	8e 93       	st	-X, r24
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	d3 82       	std	Z+3, r13	; 0x03
    102e:	c2 82       	std	Z+2, r12	; 0x02
    1030:	35 83       	std	Z+5, r19	; 0x05
    1032:	24 83       	std	Z+4, r18	; 0x04
    1034:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <fprintf>
			trtSignal(SEM_SHARED_D);
    1038:	8d b7       	in	r24, 0x3d	; 61
    103a:	9e b7       	in	r25, 0x3e	; 62
    103c:	06 96       	adiw	r24, 0x06	; 6
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	9e bf       	out	0x3e, r25	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	8d bf       	out	0x3d, r24	; 61
    1048:	86 e0       	ldi	r24, 0x06	; 6
    104a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    104e:	20 91 41 03 	lds	r18, 0x0341
    1052:	30 91 42 03 	lds	r19, 0x0342
    1056:	40 91 43 03 	lds	r20, 0x0343
    105a:	50 91 44 03 	lds	r21, 0x0344
    105e:	a9 01       	movw	r20, r18
    1060:	33 27       	eor	r19, r19
    1062:	22 27       	eor	r18, r18
    1064:	60 91 84 00 	lds	r22, 0x0084
    1068:	70 91 85 00 	lds	r23, 0x0085
		end
		
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
    106c:	e0 90 84 00 	lds	r14, 0x0084
    1070:	f0 90 85 00 	lds	r15, 0x0085
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	62 0f       	add	r22, r18
    107a:	73 1f       	adc	r23, r19
    107c:	84 1f       	adc	r24, r20
    107e:	95 1f       	adc	r25, r21
    1080:	66 5e       	subi	r22, 0xE6	; 230
    1082:	79 4f       	sbci	r23, 0xF9	; 249
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	00 e0       	ldi	r16, 0x00	; 0
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	2e 0d       	add	r18, r14
    108e:	3f 1d       	adc	r19, r15
    1090:	40 1f       	adc	r20, r16
    1092:	51 1f       	adc	r21, r17
    1094:	21 5b       	subi	r18, 0xB1	; 177
    1096:	3d 4e       	sbci	r19, 0xED	; 237
    1098:	4f 4f       	sbci	r20, 0xFF	; 255
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
    10a0:	f3 ce       	rjmp	.-538    	; 0xe88 <get_User_Input+0x60>

000010a2 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    10a2:	0e 94 b5 09 	call	0x136a	; 0x136a <LCDinit>
	LCDcursorOFF();
    10a6:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCDcursorOFF>
	LCDclr();	//clear the display
    10aa:	0e 94 4e 09 	call	0x129c	; 0x129c <LCDclr>
	LCDGotoXY(0,0);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    10b6:	8c e8       	ldi	r24, 0x8C	; 140
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <CopyStringtoLCD>
	LCD_char_count = 0;
    10c2:	10 92 e3 02 	sts	0x02E3, r1
end
    10c6:	08 95       	ret

000010c8 <get_Fan_Speed>:

// --- define task 3  ----------------------------------------
// writes the desired fan speed and the current fan speed to the LCD
// approx five times a second
void get_Fan_Speed(void* args) 
  begin	
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
  	uint32_t rel, dead ;
	timer2_init();
    10dc:	0e 94 31 05 	call	0xa62	; 0xa62 <timer2_init>
	timer0_init();    // sets up the fast pwm
    10e0:	0e 94 40 05 	call	0xa80	; 0xa80 <timer0_init>
	LCD_init();    // init LCD for our use
    10e4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_init>
	port_init();    // init port c
    10e8:	0e 94 27 05 	call	0xa4e	; 0xa4e <port_init>

	while(1)
	begin
		trtWait(SEM_SHARED_S) ;
		sprintf(lcd_buffer,"input RPM: %-i ", s_value);
    10ec:	ce ec       	ldi	r28, 0xCE	; 206
    10ee:	d2 e0       	ldi	r29, 0x02	; 2
    10f0:	ec e7       	ldi	r30, 0x7C	; 124
    10f2:	ae 2e       	mov	r10, r30
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	be 2e       	mov	r11, r30
		trtSignal(SEM_SHARED_S) ;
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, strlen(lcd_buffer));

		trtWait(SEM_SHARED_RPM);
		sprintf(lcd_buffer,"fan RPM: %-i  ", RPM);
    10f8:	7c e8       	ldi	r23, 0x8C	; 140
    10fa:	c7 2e       	mov	r12, r23
    10fc:	71 e0       	ldi	r23, 0x01	; 1
    10fe:	d7 2e       	mov	r13, r23
	LCD_init();    // init LCD for our use
	port_init();    // init port c

	while(1)
	begin
		trtWait(SEM_SHARED_S) ;
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		sprintf(lcd_buffer,"input RPM: %-i ", s_value);
    1106:	00 d0       	rcall	.+0      	; 0x1108 <get_Fan_Speed+0x40>
    1108:	00 d0       	rcall	.+0      	; 0x110a <get_Fan_Speed+0x42>
    110a:	00 d0       	rcall	.+0      	; 0x110c <get_Fan_Speed+0x44>
    110c:	ed b7       	in	r30, 0x3d	; 61
    110e:	fe b7       	in	r31, 0x3e	; 62
    1110:	31 96       	adiw	r30, 0x01	; 1
    1112:	ad b7       	in	r26, 0x3d	; 61
    1114:	be b7       	in	r27, 0x3e	; 62
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	dc 93       	st	X, r29
    111a:	ce 93       	st	-X, r28
    111c:	11 97       	sbiw	r26, 0x01	; 1
    111e:	b3 82       	std	Z+3, r11	; 0x03
    1120:	a2 82       	std	Z+2, r10	; 0x02
    1122:	80 91 e1 02 	lds	r24, 0x02E1
    1126:	90 91 e2 02 	lds	r25, 0x02E2
    112a:	95 83       	std	Z+5, r25	; 0x05
    112c:	84 83       	std	Z+4, r24	; 0x04
    112e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <sprintf>
		trtSignal(SEM_SHARED_S) ;
    1132:	8d b7       	in	r24, 0x3d	; 61
    1134:	9e b7       	in	r25, 0x3e	; 62
    1136:	06 96       	adiw	r24, 0x06	; 6
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	9e bf       	out	0x3e, r25	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	8d bf       	out	0x3d, r24	; 61
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		LCDGotoXY(0, 0);
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCDGotoXY>
		LCDstring(lcd_buffer, strlen(lcd_buffer));
    1150:	fe 01       	movw	r30, r28
    1152:	01 90       	ld	r0, Z+
    1154:	00 20       	and	r0, r0
    1156:	e9 f7       	brne	.-6      	; 0x1152 <get_Fan_Speed+0x8a>
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	ee 5c       	subi	r30, 0xCE	; 206
    115c:	f2 40       	sbci	r31, 0x02	; 2
    115e:	ce 01       	movw	r24, r28
    1160:	6e 2f       	mov	r22, r30
    1162:	0e 94 56 09 	call	0x12ac	; 0x12ac <LCDstring>

		trtWait(SEM_SHARED_RPM);
    1166:	87 e0       	ldi	r24, 0x07	; 7
    1168:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		sprintf(lcd_buffer,"fan RPM: %-i  ", RPM);
    116c:	00 d0       	rcall	.+0      	; 0x116e <get_Fan_Speed+0xa6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <get_Fan_Speed+0xa8>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <get_Fan_Speed+0xaa>
    1172:	ed b7       	in	r30, 0x3d	; 61
    1174:	fe b7       	in	r31, 0x3e	; 62
    1176:	31 96       	adiw	r30, 0x01	; 1
    1178:	ad b7       	in	r26, 0x3d	; 61
    117a:	be b7       	in	r27, 0x3e	; 62
    117c:	12 96       	adiw	r26, 0x02	; 2
    117e:	dc 93       	st	X, r29
    1180:	ce 93       	st	-X, r28
    1182:	11 97       	sbiw	r26, 0x01	; 1
    1184:	d3 82       	std	Z+3, r13	; 0x03
    1186:	c2 82       	std	Z+2, r12	; 0x02
    1188:	80 91 df 02 	lds	r24, 0x02DF
    118c:	90 91 e0 02 	lds	r25, 0x02E0
    1190:	95 83       	std	Z+5, r25	; 0x05
    1192:	84 83       	std	Z+4, r24	; 0x04
    1194:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <sprintf>
		trtSignal(SEM_SHARED_RPM);
    1198:	8d b7       	in	r24, 0x3d	; 61
    119a:	9e b7       	in	r25, 0x3e	; 62
    119c:	06 96       	adiw	r24, 0x06	; 6
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	9e bf       	out	0x3e, r25	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	8d bf       	out	0x3d, r24	; 61
    11a8:	87 e0       	ldi	r24, 0x07	; 7
    11aa:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		LCDGotoXY(0, 1);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCDGotoXY>
		LCDstring(lcd_buffer, strlen(lcd_buffer));
    11b6:	fe 01       	movw	r30, r28
    11b8:	01 90       	ld	r0, Z+
    11ba:	00 20       	and	r0, r0
    11bc:	e9 f7       	brne	.-6      	; 0x11b8 <get_Fan_Speed+0xf0>
    11be:	31 97       	sbiw	r30, 0x01	; 1
    11c0:	ee 5c       	subi	r30, 0xCE	; 206
    11c2:	f2 40       	sbci	r31, 0x02	; 2
    11c4:	ce 01       	movw	r24, r28
    11c6:	6e 2f       	mov	r22, r30
    11c8:	0e 94 56 09 	call	0x12ac	; 0x12ac <LCDstring>
    11cc:	20 91 41 03 	lds	r18, 0x0341
    11d0:	30 91 42 03 	lds	r19, 0x0342
    11d4:	40 91 43 03 	lds	r20, 0x0343
    11d8:	50 91 44 03 	lds	r21, 0x0344
    11dc:	a9 01       	movw	r20, r18
    11de:	33 27       	eor	r19, r19
    11e0:	22 27       	eor	r18, r18
    11e2:	60 91 84 00 	lds	r22, 0x0084
    11e6:	70 91 85 00 	lds	r23, 0x0085
		

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
    11ea:	e0 90 84 00 	lds	r14, 0x0084
    11ee:	f0 90 85 00 	lds	r15, 0x0085
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	62 0f       	add	r22, r18
    11f8:	73 1f       	adc	r23, r19
    11fa:	84 1f       	adc	r24, r20
    11fc:	95 1f       	adc	r25, r21
    11fe:	66 5e       	subi	r22, 0xE6	; 230
    1200:	79 4f       	sbci	r23, 0xF9	; 249
    1202:	8f 4f       	sbci	r24, 0xFF	; 255
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	2e 0d       	add	r18, r14
    120c:	3f 1d       	adc	r19, r15
    120e:	40 1f       	adc	r20, r16
    1210:	51 1f       	adc	r21, r17
    1212:	21 5b       	subi	r18, 0xB1	; 177
    1214:	3d 4e       	sbci	r19, 0xED	; 237
    1216:	4f 4f       	sbci	r20, 0xFF	; 255
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
    121e:	70 cf       	rjmp	.-288    	; 0x1100 <get_Fan_Speed+0x38>

00001220 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    1220:	28 2f       	mov	r18, r24
    1222:	20 7f       	andi	r18, 0xF0	; 240
    1224:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1226:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1228:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    122a:	20 e4       	ldi	r18, 0x40	; 64
    122c:	3f e1       	ldi	r19, 0x1F	; 31
    122e:	f9 01       	movw	r30, r18
    1230:	31 97       	sbiw	r30, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1234:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1236:	40 98       	cbi	0x08, 0	; 8
    1238:	f9 01       	movw	r30, r18
    123a:	31 97       	sbiw	r30, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	44 e0       	ldi	r20, 0x04	; 4
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	4a 95       	dec	r20
    1248:	e1 f7       	brne	.-8      	; 0x1242 <LCDsendChar+0x22>
    124a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    124c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    124e:	42 9a       	sbi	0x08, 2	; 8
    1250:	c9 01       	movw	r24, r18
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1256:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1258:	40 98       	cbi	0x08, 0	; 8
    125a:	c9 01       	movw	r24, r18
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1260:	08 95       	ret

00001262 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1262:	28 2f       	mov	r18, r24
    1264:	20 7f       	andi	r18, 0xF0	; 240
    1266:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    1268:	42 9a       	sbi	0x08, 2	; 8
    126a:	20 e4       	ldi	r18, 0x40	; 64
    126c:	3f e1       	ldi	r19, 0x1F	; 31
    126e:	f9 01       	movw	r30, r18
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1274:	42 98       	cbi	0x08, 2	; 8
    1276:	f9 01       	movw	r30, r18
    1278:	31 97       	sbiw	r30, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	54 e0       	ldi	r21, 0x04	; 4
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	5a 95       	dec	r21
    1286:	e1 f7       	brne	.-8      	; 0x1280 <LCDsendCommand+0x1e>
    1288:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    128a:	42 9a       	sbi	0x08, 2	; 8
    128c:	c9 01       	movw	r24, r18
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1292:	42 98       	cbi	0x08, 2	; 8
    1294:	c9 01       	movw	r24, r18
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    129a:	08 95       	ret

0000129c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    12a2:	08 95       	ret

000012a4 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    12aa:	08 95       	ret

000012ac <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	49 f0       	breq	.+18     	; 0x12cc <LCDstring+0x20>
    12ba:	ec 01       	movw	r28, r24
    12bc:	10 e0       	ldi	r17, 0x00	; 0
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    12c0:	89 91       	ld	r24, Y+
    12c2:	0e 94 10 09 	call	0x1220	; 0x1220 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    12c6:	1f 5f       	subi	r17, 0xFF	; 255
    12c8:	10 17       	cp	r17, r16
    12ca:	d0 f3       	brcs	.-12     	; 0x12c0 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    12d6:	62 30       	cpi	r22, 0x02	; 2
    12d8:	31 f0       	breq	.+12     	; 0x12e6 <LCDGotoXY+0x10>
    12da:	63 30       	cpi	r22, 0x03	; 3
    12dc:	31 f0       	breq	.+12     	; 0x12ea <LCDGotoXY+0x14>
    12de:	61 30       	cpi	r22, 0x01	; 1
    12e0:	29 f4       	brne	.+10     	; 0x12ec <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    12e2:	80 5c       	subi	r24, 0xC0	; 192
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    12e6:	8c 5e       	subi	r24, 0xEC	; 236
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    12ea:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
	
}
    12f2:	08 95       	ret

000012f4 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    12fe:	64 2f       	mov	r22, r20
    1300:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCDGotoXY>
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	03 c0       	rjmp	.+6      	; 0x130e <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1308:	0e 94 10 09 	call	0x1220	; 0x1220 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    130c:	1f 5f       	subi	r17, 0xFF	; 255
    130e:	fe 01       	movw	r30, r28
    1310:	e1 0f       	add	r30, r17
    1312:	f1 1d       	adc	r31, r1
    1314:	84 91       	lpm	r24, Z+
    1316:	88 23       	and	r24, r24
    1318:	b9 f7       	brne	.-18     	; 0x1308 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	08 95       	ret

00001322 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	7c 01       	movw	r14, r24
    1330:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1332:	11 0f       	add	r17, r17
    1334:	11 0f       	add	r17, r17
    1336:	11 0f       	add	r17, r17
    1338:	10 64       	ori	r17, 0x40	; 64
    133a:	c0 e0       	ldi	r28, 0x00	; 0
    133c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    133e:	f7 01       	movw	r30, r14
    1340:	ec 0f       	add	r30, r28
    1342:	fd 1f       	adc	r31, r29
    1344:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1346:	81 2f       	mov	r24, r17
    1348:	8c 0f       	add	r24, r28
    134a:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
		LCDsendChar(pcc);
    134e:	80 2f       	mov	r24, r16
    1350:	0e 94 10 09 	call	0x1220	; 0x1220 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1354:	21 96       	adiw	r28, 0x01	; 1
    1356:	c8 30       	cpi	r28, 0x08	; 8
    1358:	d1 05       	cpc	r29, r1
    135a:	89 f7       	brne	.-30     	; 0x133e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	08 95       	ret

0000136a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	80 e6       	ldi	r24, 0x60	; 96
    1372:	9a ee       	ldi	r25, 0xEA	; 234
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1378:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    137a:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    137c:	87 b1       	in	r24, 0x07	; 7
    137e:	80 6f       	ori	r24, 0xF0	; 240
    1380:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1382:	87 b1       	in	r24, 0x07	; 7
    1384:	87 60       	ori	r24, 0x07	; 7
    1386:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1388:	80 e3       	ldi	r24, 0x30	; 48
    138a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    138c:	42 9a       	sbi	0x08, 2	; 8
    138e:	20 e4       	ldi	r18, 0x40	; 64
    1390:	3f e1       	ldi	r19, 0x1F	; 31
    1392:	f9 01       	movw	r30, r18
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1398:	42 98       	cbi	0x08, 2	; 8
    139a:	f9 01       	movw	r30, r18
    139c:	31 97       	sbiw	r30, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    13a0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    13a2:	42 9a       	sbi	0x08, 2	; 8
    13a4:	c9 01       	movw	r24, r18
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13aa:	42 98       	cbi	0x08, 2	; 8
    13ac:	c9 01       	movw	r24, r18
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    13b6:	42 9a       	sbi	0x08, 2	; 8
    13b8:	c9 01       	movw	r24, r18
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13be:	42 98       	cbi	0x08, 2	; 8
    13c0:	c9 01       	movw	r24, r18
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    13c6:	88 e2       	ldi	r24, 0x28	; 40
    13c8:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    13cc:	8c e0       	ldi	r24, 0x0C	; 12
    13ce:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
    13d2:	c6 e0       	ldi	r28, 0x06	; 6
    13d4:	d1 e0       	ldi	r29, 0x01	; 1
    13d6:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    13d8:	16 2f       	mov	r17, r22
    13da:	1f 5f       	subi	r17, 0xFF	; 255
    13dc:	ce 01       	movw	r24, r28
    13de:	0e 94 91 09 	call	0x1322	; 0x1322 <LCDdefinechar>
    13e2:	28 96       	adiw	r28, 0x08	; 8
    13e4:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    13e6:	18 30       	cpi	r17, 0x08	; 8
    13e8:	b9 f7       	brne	.-18     	; 0x13d8 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	08 95       	ret

000013f2 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	08 2f       	mov	r16, r24
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    13fc:	8e e1       	ldi	r24, 0x1E	; 30
    13fe:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1402:	1f 5f       	subi	r17, 0xFF	; 255
    1404:	10 17       	cp	r17, r16
    1406:	d0 f3       	brcs	.-12     	; 0x13fc <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	08 95       	ret

0000140e <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	08 2f       	mov	r16, r24
    1414:	10 e0       	ldi	r17, 0x00	; 0
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1418:	88 e1       	ldi	r24, 0x18	; 24
    141a:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    141e:	1f 5f       	subi	r17, 0xFF	; 255
    1420:	10 17       	cp	r17, r16
    1422:	d0 f3       	brcs	.-12     	; 0x1418 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	08 95       	ret

0000142a <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    142a:	8e e0       	ldi	r24, 0x0E	; 14
    142c:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    1430:	08 95       	ret

00001432 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1432:	8f e0       	ldi	r24, 0x0F	; 15
    1434:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    1438:	08 95       	ret

0000143a <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    143a:	8c e0       	ldi	r24, 0x0C	; 12
    143c:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    1440:	08 95       	ret

00001442 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1442:	88 e0       	ldi	r24, 0x08	; 8
    1444:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    1448:	08 95       	ret

0000144a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    144a:	8c e0       	ldi	r24, 0x0C	; 12
    144c:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
}
    1450:	08 95       	ret

00001452 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	08 2f       	mov	r16, r24
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    145c:	80 e1       	ldi	r24, 0x10	; 16
    145e:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1462:	1f 5f       	subi	r17, 0xFF	; 255
    1464:	10 17       	cp	r17, r16
    1466:	d0 f3       	brcs	.-12     	; 0x145c <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	08 2f       	mov	r16, r24
    1474:	10 e0       	ldi	r17, 0x00	; 0
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1478:	84 e1       	ldi	r24, 0x14	; 20
    147a:	0e 94 31 09 	call	0x1262	; 0x1262 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    147e:	1f 5f       	subi	r17, 0xFF	; 255
    1480:	10 17       	cp	r17, r16
    1482:	d0 f3       	brcs	.-12     	; 0x1478 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    149a:	96 e0       	ldi	r25, 0x06	; 6
    149c:	89 9f       	mul	r24, r25
    149e:	c0 01       	movw	r24, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	24 2f       	mov	r18, r20
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	ac 01       	movw	r20, r24
    14a8:	42 9f       	mul	r20, r18
    14aa:	c0 01       	movw	r24, r0
    14ac:	43 9f       	mul	r20, r19
    14ae:	90 0d       	add	r25, r0
    14b0:	52 9f       	mul	r21, r18
    14b2:	90 0d       	add	r25, r0
    14b4:	11 24       	eor	r1, r1
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 20 0c 	call	0x1840	; 0x1840 <__divmodhi4>
    14bc:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    14be:	cb 01       	movw	r24, r22
    14c0:	66 e0       	ldi	r22, 0x06	; 6
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__udivmodhi4>
    14c8:	e8 2e       	mov	r14, r24
    14ca:	ff 24       	eor	r15, r15
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    14d2:	c8 01       	movw	r24, r16
    14d4:	05 96       	adiw	r24, 0x05	; 5
    14d6:	c8 17       	cp	r28, r24
    14d8:	d9 07       	cpc	r29, r25
    14da:	10 f0       	brcs	.+4      	; 0x14e0 <LCDprogressBar+0x56>
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    14e0:	c0 17       	cp	r28, r16
    14e2:	d1 07       	cpc	r29, r17
    14e4:	10 f0       	brcs	.+4      	; 0x14ea <LCDprogressBar+0x60>
    14e6:	8e 2d       	mov	r24, r14
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <LCDprogressBar+0x62>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    14ec:	0e 94 10 09 	call	0x1220	; 0x1220 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    14f0:	f3 94       	inc	r15
    14f2:	0a 5f       	subi	r16, 0xFA	; 250
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	fd 14       	cp	r15, r13
    14f8:	60 f3       	brcs	.-40     	; 0x14d2 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	08 95       	ret

0000150a <__subsf3>:
    150a:	50 58       	subi	r21, 0x80	; 128

0000150c <__addsf3>:
    150c:	bb 27       	eor	r27, r27
    150e:	aa 27       	eor	r26, r26
    1510:	0e d0       	rcall	.+28     	; 0x152e <__addsf3x>
    1512:	e5 c0       	rjmp	.+458    	; 0x16de <__fp_round>
    1514:	d6 d0       	rcall	.+428    	; 0x16c2 <__fp_pscA>
    1516:	30 f0       	brcs	.+12     	; 0x1524 <__addsf3+0x18>
    1518:	db d0       	rcall	.+438    	; 0x16d0 <__fp_pscB>
    151a:	20 f0       	brcs	.+8      	; 0x1524 <__addsf3+0x18>
    151c:	31 f4       	brne	.+12     	; 0x152a <__addsf3+0x1e>
    151e:	9f 3f       	cpi	r25, 0xFF	; 255
    1520:	11 f4       	brne	.+4      	; 0x1526 <__addsf3+0x1a>
    1522:	1e f4       	brtc	.+6      	; 0x152a <__addsf3+0x1e>
    1524:	cb c0       	rjmp	.+406    	; 0x16bc <__fp_nan>
    1526:	0e f4       	brtc	.+2      	; 0x152a <__addsf3+0x1e>
    1528:	e0 95       	com	r30
    152a:	e7 fb       	bst	r30, 7
    152c:	c1 c0       	rjmp	.+386    	; 0x16b0 <__fp_inf>

0000152e <__addsf3x>:
    152e:	e9 2f       	mov	r30, r25
    1530:	e7 d0       	rcall	.+462    	; 0x1700 <__fp_split3>
    1532:	80 f3       	brcs	.-32     	; 0x1514 <__addsf3+0x8>
    1534:	ba 17       	cp	r27, r26
    1536:	62 07       	cpc	r22, r18
    1538:	73 07       	cpc	r23, r19
    153a:	84 07       	cpc	r24, r20
    153c:	95 07       	cpc	r25, r21
    153e:	18 f0       	brcs	.+6      	; 0x1546 <__addsf3x+0x18>
    1540:	71 f4       	brne	.+28     	; 0x155e <__addsf3x+0x30>
    1542:	9e f5       	brtc	.+102    	; 0x15aa <__addsf3x+0x7c>
    1544:	ff c0       	rjmp	.+510    	; 0x1744 <__fp_zero>
    1546:	0e f4       	brtc	.+2      	; 0x154a <__addsf3x+0x1c>
    1548:	e0 95       	com	r30
    154a:	0b 2e       	mov	r0, r27
    154c:	ba 2f       	mov	r27, r26
    154e:	a0 2d       	mov	r26, r0
    1550:	0b 01       	movw	r0, r22
    1552:	b9 01       	movw	r22, r18
    1554:	90 01       	movw	r18, r0
    1556:	0c 01       	movw	r0, r24
    1558:	ca 01       	movw	r24, r20
    155a:	a0 01       	movw	r20, r0
    155c:	11 24       	eor	r1, r1
    155e:	ff 27       	eor	r31, r31
    1560:	59 1b       	sub	r21, r25
    1562:	99 f0       	breq	.+38     	; 0x158a <__addsf3x+0x5c>
    1564:	59 3f       	cpi	r21, 0xF9	; 249
    1566:	50 f4       	brcc	.+20     	; 0x157c <__addsf3x+0x4e>
    1568:	50 3e       	cpi	r21, 0xE0	; 224
    156a:	68 f1       	brcs	.+90     	; 0x15c6 <__addsf3x+0x98>
    156c:	1a 16       	cp	r1, r26
    156e:	f0 40       	sbci	r31, 0x00	; 0
    1570:	a2 2f       	mov	r26, r18
    1572:	23 2f       	mov	r18, r19
    1574:	34 2f       	mov	r19, r20
    1576:	44 27       	eor	r20, r20
    1578:	58 5f       	subi	r21, 0xF8	; 248
    157a:	f3 cf       	rjmp	.-26     	; 0x1562 <__addsf3x+0x34>
    157c:	46 95       	lsr	r20
    157e:	37 95       	ror	r19
    1580:	27 95       	ror	r18
    1582:	a7 95       	ror	r26
    1584:	f0 40       	sbci	r31, 0x00	; 0
    1586:	53 95       	inc	r21
    1588:	c9 f7       	brne	.-14     	; 0x157c <__addsf3x+0x4e>
    158a:	7e f4       	brtc	.+30     	; 0x15aa <__addsf3x+0x7c>
    158c:	1f 16       	cp	r1, r31
    158e:	ba 0b       	sbc	r27, r26
    1590:	62 0b       	sbc	r22, r18
    1592:	73 0b       	sbc	r23, r19
    1594:	84 0b       	sbc	r24, r20
    1596:	ba f0       	brmi	.+46     	; 0x15c6 <__addsf3x+0x98>
    1598:	91 50       	subi	r25, 0x01	; 1
    159a:	a1 f0       	breq	.+40     	; 0x15c4 <__addsf3x+0x96>
    159c:	ff 0f       	add	r31, r31
    159e:	bb 1f       	adc	r27, r27
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	c2 f7       	brpl	.-16     	; 0x1598 <__addsf3x+0x6a>
    15a8:	0e c0       	rjmp	.+28     	; 0x15c6 <__addsf3x+0x98>
    15aa:	ba 0f       	add	r27, r26
    15ac:	62 1f       	adc	r22, r18
    15ae:	73 1f       	adc	r23, r19
    15b0:	84 1f       	adc	r24, r20
    15b2:	48 f4       	brcc	.+18     	; 0x15c6 <__addsf3x+0x98>
    15b4:	87 95       	ror	r24
    15b6:	77 95       	ror	r23
    15b8:	67 95       	ror	r22
    15ba:	b7 95       	ror	r27
    15bc:	f7 95       	ror	r31
    15be:	9e 3f       	cpi	r25, 0xFE	; 254
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <__addsf3x+0x96>
    15c2:	b3 cf       	rjmp	.-154    	; 0x152a <__addsf3+0x1e>
    15c4:	93 95       	inc	r25
    15c6:	88 0f       	add	r24, r24
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <__addsf3x+0x9e>
    15ca:	99 27       	eor	r25, r25
    15cc:	ee 0f       	add	r30, r30
    15ce:	97 95       	ror	r25
    15d0:	87 95       	ror	r24
    15d2:	08 95       	ret

000015d4 <__fixsfsi>:
    15d4:	04 d0       	rcall	.+8      	; 0x15de <__fixunssfsi>
    15d6:	68 94       	set
    15d8:	b1 11       	cpse	r27, r1
    15da:	b5 c0       	rjmp	.+362    	; 0x1746 <__fp_szero>
    15dc:	08 95       	ret

000015de <__fixunssfsi>:
    15de:	98 d0       	rcall	.+304    	; 0x1710 <__fp_splitA>
    15e0:	88 f0       	brcs	.+34     	; 0x1604 <__fixunssfsi+0x26>
    15e2:	9f 57       	subi	r25, 0x7F	; 127
    15e4:	90 f0       	brcs	.+36     	; 0x160a <__fixunssfsi+0x2c>
    15e6:	b9 2f       	mov	r27, r25
    15e8:	99 27       	eor	r25, r25
    15ea:	b7 51       	subi	r27, 0x17	; 23
    15ec:	a0 f0       	brcs	.+40     	; 0x1616 <__fixunssfsi+0x38>
    15ee:	d1 f0       	breq	.+52     	; 0x1624 <__fixunssfsi+0x46>
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	88 1f       	adc	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	1a f0       	brmi	.+6      	; 0x1600 <__fixunssfsi+0x22>
    15fa:	ba 95       	dec	r27
    15fc:	c9 f7       	brne	.-14     	; 0x15f0 <__fixunssfsi+0x12>
    15fe:	12 c0       	rjmp	.+36     	; 0x1624 <__fixunssfsi+0x46>
    1600:	b1 30       	cpi	r27, 0x01	; 1
    1602:	81 f0       	breq	.+32     	; 0x1624 <__fixunssfsi+0x46>
    1604:	9f d0       	rcall	.+318    	; 0x1744 <__fp_zero>
    1606:	b1 e0       	ldi	r27, 0x01	; 1
    1608:	08 95       	ret
    160a:	9c c0       	rjmp	.+312    	; 0x1744 <__fp_zero>
    160c:	67 2f       	mov	r22, r23
    160e:	78 2f       	mov	r23, r24
    1610:	88 27       	eor	r24, r24
    1612:	b8 5f       	subi	r27, 0xF8	; 248
    1614:	39 f0       	breq	.+14     	; 0x1624 <__fixunssfsi+0x46>
    1616:	b9 3f       	cpi	r27, 0xF9	; 249
    1618:	cc f3       	brlt	.-14     	; 0x160c <__fixunssfsi+0x2e>
    161a:	86 95       	lsr	r24
    161c:	77 95       	ror	r23
    161e:	67 95       	ror	r22
    1620:	b3 95       	inc	r27
    1622:	d9 f7       	brne	.-10     	; 0x161a <__fixunssfsi+0x3c>
    1624:	3e f4       	brtc	.+14     	; 0x1634 <__fixunssfsi+0x56>
    1626:	90 95       	com	r25
    1628:	80 95       	com	r24
    162a:	70 95       	com	r23
    162c:	61 95       	neg	r22
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	08 95       	ret

00001636 <__floatunsisf>:
    1636:	e8 94       	clt
    1638:	09 c0       	rjmp	.+18     	; 0x164c <__floatsisf+0x12>

0000163a <__floatsisf>:
    163a:	97 fb       	bst	r25, 7
    163c:	3e f4       	brtc	.+14     	; 0x164c <__floatsisf+0x12>
    163e:	90 95       	com	r25
    1640:	80 95       	com	r24
    1642:	70 95       	com	r23
    1644:	61 95       	neg	r22
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	8f 4f       	sbci	r24, 0xFF	; 255
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	99 23       	and	r25, r25
    164e:	a9 f0       	breq	.+42     	; 0x167a <__floatsisf+0x40>
    1650:	f9 2f       	mov	r31, r25
    1652:	96 e9       	ldi	r25, 0x96	; 150
    1654:	bb 27       	eor	r27, r27
    1656:	93 95       	inc	r25
    1658:	f6 95       	lsr	r31
    165a:	87 95       	ror	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	b7 95       	ror	r27
    1662:	f1 11       	cpse	r31, r1
    1664:	f8 cf       	rjmp	.-16     	; 0x1656 <__floatsisf+0x1c>
    1666:	fa f4       	brpl	.+62     	; 0x16a6 <__floatsisf+0x6c>
    1668:	bb 0f       	add	r27, r27
    166a:	11 f4       	brne	.+4      	; 0x1670 <__floatsisf+0x36>
    166c:	60 ff       	sbrs	r22, 0
    166e:	1b c0       	rjmp	.+54     	; 0x16a6 <__floatsisf+0x6c>
    1670:	6f 5f       	subi	r22, 0xFF	; 255
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	16 c0       	rjmp	.+44     	; 0x16a6 <__floatsisf+0x6c>
    167a:	88 23       	and	r24, r24
    167c:	11 f0       	breq	.+4      	; 0x1682 <__floatsisf+0x48>
    167e:	96 e9       	ldi	r25, 0x96	; 150
    1680:	11 c0       	rjmp	.+34     	; 0x16a4 <__floatsisf+0x6a>
    1682:	77 23       	and	r23, r23
    1684:	21 f0       	breq	.+8      	; 0x168e <__floatsisf+0x54>
    1686:	9e e8       	ldi	r25, 0x8E	; 142
    1688:	87 2f       	mov	r24, r23
    168a:	76 2f       	mov	r23, r22
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <__floatsisf+0x5e>
    168e:	66 23       	and	r22, r22
    1690:	71 f0       	breq	.+28     	; 0x16ae <__floatsisf+0x74>
    1692:	96 e8       	ldi	r25, 0x86	; 134
    1694:	86 2f       	mov	r24, r22
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	2a f0       	brmi	.+10     	; 0x16a6 <__floatsisf+0x6c>
    169c:	9a 95       	dec	r25
    169e:	66 0f       	add	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	88 1f       	adc	r24, r24
    16a4:	da f7       	brpl	.-10     	; 0x169c <__floatsisf+0x62>
    16a6:	88 0f       	add	r24, r24
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	97 f9       	bld	r25, 7
    16ae:	08 95       	ret

000016b0 <__fp_inf>:
    16b0:	97 f9       	bld	r25, 7
    16b2:	9f 67       	ori	r25, 0x7F	; 127
    16b4:	80 e8       	ldi	r24, 0x80	; 128
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	08 95       	ret

000016bc <__fp_nan>:
    16bc:	9f ef       	ldi	r25, 0xFF	; 255
    16be:	80 ec       	ldi	r24, 0xC0	; 192
    16c0:	08 95       	ret

000016c2 <__fp_pscA>:
    16c2:	00 24       	eor	r0, r0
    16c4:	0a 94       	dec	r0
    16c6:	16 16       	cp	r1, r22
    16c8:	17 06       	cpc	r1, r23
    16ca:	18 06       	cpc	r1, r24
    16cc:	09 06       	cpc	r0, r25
    16ce:	08 95       	ret

000016d0 <__fp_pscB>:
    16d0:	00 24       	eor	r0, r0
    16d2:	0a 94       	dec	r0
    16d4:	12 16       	cp	r1, r18
    16d6:	13 06       	cpc	r1, r19
    16d8:	14 06       	cpc	r1, r20
    16da:	05 06       	cpc	r0, r21
    16dc:	08 95       	ret

000016de <__fp_round>:
    16de:	09 2e       	mov	r0, r25
    16e0:	03 94       	inc	r0
    16e2:	00 0c       	add	r0, r0
    16e4:	11 f4       	brne	.+4      	; 0x16ea <__fp_round+0xc>
    16e6:	88 23       	and	r24, r24
    16e8:	52 f0       	brmi	.+20     	; 0x16fe <__fp_round+0x20>
    16ea:	bb 0f       	add	r27, r27
    16ec:	40 f4       	brcc	.+16     	; 0x16fe <__fp_round+0x20>
    16ee:	bf 2b       	or	r27, r31
    16f0:	11 f4       	brne	.+4      	; 0x16f6 <__fp_round+0x18>
    16f2:	60 ff       	sbrs	r22, 0
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <__fp_round+0x20>
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__fp_split3>:
    1700:	57 fd       	sbrc	r21, 7
    1702:	90 58       	subi	r25, 0x80	; 128
    1704:	44 0f       	add	r20, r20
    1706:	55 1f       	adc	r21, r21
    1708:	59 f0       	breq	.+22     	; 0x1720 <__fp_splitA+0x10>
    170a:	5f 3f       	cpi	r21, 0xFF	; 255
    170c:	71 f0       	breq	.+28     	; 0x172a <__fp_splitA+0x1a>
    170e:	47 95       	ror	r20

00001710 <__fp_splitA>:
    1710:	88 0f       	add	r24, r24
    1712:	97 fb       	bst	r25, 7
    1714:	99 1f       	adc	r25, r25
    1716:	61 f0       	breq	.+24     	; 0x1730 <__fp_splitA+0x20>
    1718:	9f 3f       	cpi	r25, 0xFF	; 255
    171a:	79 f0       	breq	.+30     	; 0x173a <__fp_splitA+0x2a>
    171c:	87 95       	ror	r24
    171e:	08 95       	ret
    1720:	12 16       	cp	r1, r18
    1722:	13 06       	cpc	r1, r19
    1724:	14 06       	cpc	r1, r20
    1726:	55 1f       	adc	r21, r21
    1728:	f2 cf       	rjmp	.-28     	; 0x170e <__fp_split3+0xe>
    172a:	46 95       	lsr	r20
    172c:	f1 df       	rcall	.-30     	; 0x1710 <__fp_splitA>
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <__fp_splitA+0x30>
    1730:	16 16       	cp	r1, r22
    1732:	17 06       	cpc	r1, r23
    1734:	18 06       	cpc	r1, r24
    1736:	99 1f       	adc	r25, r25
    1738:	f1 cf       	rjmp	.-30     	; 0x171c <__fp_splitA+0xc>
    173a:	86 95       	lsr	r24
    173c:	71 05       	cpc	r23, r1
    173e:	61 05       	cpc	r22, r1
    1740:	08 94       	sec
    1742:	08 95       	ret

00001744 <__fp_zero>:
    1744:	e8 94       	clt

00001746 <__fp_szero>:
    1746:	bb 27       	eor	r27, r27
    1748:	66 27       	eor	r22, r22
    174a:	77 27       	eor	r23, r23
    174c:	cb 01       	movw	r24, r22
    174e:	97 f9       	bld	r25, 7
    1750:	08 95       	ret

00001752 <__mulsf3>:
    1752:	0b d0       	rcall	.+22     	; 0x176a <__mulsf3x>
    1754:	c4 cf       	rjmp	.-120    	; 0x16de <__fp_round>
    1756:	b5 df       	rcall	.-150    	; 0x16c2 <__fp_pscA>
    1758:	28 f0       	brcs	.+10     	; 0x1764 <__mulsf3+0x12>
    175a:	ba df       	rcall	.-140    	; 0x16d0 <__fp_pscB>
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__mulsf3+0x12>
    175e:	95 23       	and	r25, r21
    1760:	09 f0       	breq	.+2      	; 0x1764 <__mulsf3+0x12>
    1762:	a6 cf       	rjmp	.-180    	; 0x16b0 <__fp_inf>
    1764:	ab cf       	rjmp	.-170    	; 0x16bc <__fp_nan>
    1766:	11 24       	eor	r1, r1
    1768:	ee cf       	rjmp	.-36     	; 0x1746 <__fp_szero>

0000176a <__mulsf3x>:
    176a:	ca df       	rcall	.-108    	; 0x1700 <__fp_split3>
    176c:	a0 f3       	brcs	.-24     	; 0x1756 <__mulsf3+0x4>

0000176e <__mulsf3_pse>:
    176e:	95 9f       	mul	r25, r21
    1770:	d1 f3       	breq	.-12     	; 0x1766 <__mulsf3+0x14>
    1772:	95 0f       	add	r25, r21
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	55 1f       	adc	r21, r21
    1778:	62 9f       	mul	r22, r18
    177a:	f0 01       	movw	r30, r0
    177c:	72 9f       	mul	r23, r18
    177e:	bb 27       	eor	r27, r27
    1780:	f0 0d       	add	r31, r0
    1782:	b1 1d       	adc	r27, r1
    1784:	63 9f       	mul	r22, r19
    1786:	aa 27       	eor	r26, r26
    1788:	f0 0d       	add	r31, r0
    178a:	b1 1d       	adc	r27, r1
    178c:	aa 1f       	adc	r26, r26
    178e:	64 9f       	mul	r22, r20
    1790:	66 27       	eor	r22, r22
    1792:	b0 0d       	add	r27, r0
    1794:	a1 1d       	adc	r26, r1
    1796:	66 1f       	adc	r22, r22
    1798:	82 9f       	mul	r24, r18
    179a:	22 27       	eor	r18, r18
    179c:	b0 0d       	add	r27, r0
    179e:	a1 1d       	adc	r26, r1
    17a0:	62 1f       	adc	r22, r18
    17a2:	73 9f       	mul	r23, r19
    17a4:	b0 0d       	add	r27, r0
    17a6:	a1 1d       	adc	r26, r1
    17a8:	62 1f       	adc	r22, r18
    17aa:	83 9f       	mul	r24, r19
    17ac:	a0 0d       	add	r26, r0
    17ae:	61 1d       	adc	r22, r1
    17b0:	22 1f       	adc	r18, r18
    17b2:	74 9f       	mul	r23, r20
    17b4:	33 27       	eor	r19, r19
    17b6:	a0 0d       	add	r26, r0
    17b8:	61 1d       	adc	r22, r1
    17ba:	23 1f       	adc	r18, r19
    17bc:	84 9f       	mul	r24, r20
    17be:	60 0d       	add	r22, r0
    17c0:	21 1d       	adc	r18, r1
    17c2:	82 2f       	mov	r24, r18
    17c4:	76 2f       	mov	r23, r22
    17c6:	6a 2f       	mov	r22, r26
    17c8:	11 24       	eor	r1, r1
    17ca:	9f 57       	subi	r25, 0x7F	; 127
    17cc:	50 40       	sbci	r21, 0x00	; 0
    17ce:	8a f0       	brmi	.+34     	; 0x17f2 <__mulsf3_pse+0x84>
    17d0:	e1 f0       	breq	.+56     	; 0x180a <__mulsf3_pse+0x9c>
    17d2:	88 23       	and	r24, r24
    17d4:	4a f0       	brmi	.+18     	; 0x17e8 <__mulsf3_pse+0x7a>
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	bb 1f       	adc	r27, r27
    17dc:	66 1f       	adc	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	88 1f       	adc	r24, r24
    17e2:	91 50       	subi	r25, 0x01	; 1
    17e4:	50 40       	sbci	r21, 0x00	; 0
    17e6:	a9 f7       	brne	.-22     	; 0x17d2 <__mulsf3_pse+0x64>
    17e8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ea:	51 05       	cpc	r21, r1
    17ec:	70 f0       	brcs	.+28     	; 0x180a <__mulsf3_pse+0x9c>
    17ee:	60 cf       	rjmp	.-320    	; 0x16b0 <__fp_inf>
    17f0:	aa cf       	rjmp	.-172    	; 0x1746 <__fp_szero>
    17f2:	5f 3f       	cpi	r21, 0xFF	; 255
    17f4:	ec f3       	brlt	.-6      	; 0x17f0 <__mulsf3_pse+0x82>
    17f6:	98 3e       	cpi	r25, 0xE8	; 232
    17f8:	dc f3       	brlt	.-10     	; 0x17f0 <__mulsf3_pse+0x82>
    17fa:	86 95       	lsr	r24
    17fc:	77 95       	ror	r23
    17fe:	67 95       	ror	r22
    1800:	b7 95       	ror	r27
    1802:	f7 95       	ror	r31
    1804:	e7 95       	ror	r30
    1806:	9f 5f       	subi	r25, 0xFF	; 255
    1808:	c1 f7       	brne	.-16     	; 0x17fa <__mulsf3_pse+0x8c>
    180a:	fe 2b       	or	r31, r30
    180c:	88 0f       	add	r24, r24
    180e:	91 1d       	adc	r25, r1
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	97 f9       	bld	r25, 7
    1816:	08 95       	ret

00001818 <__udivmodhi4>:
    1818:	aa 1b       	sub	r26, r26
    181a:	bb 1b       	sub	r27, r27
    181c:	51 e1       	ldi	r21, 0x11	; 17
    181e:	07 c0       	rjmp	.+14     	; 0x182e <__udivmodhi4_ep>

00001820 <__udivmodhi4_loop>:
    1820:	aa 1f       	adc	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	a6 17       	cp	r26, r22
    1826:	b7 07       	cpc	r27, r23
    1828:	10 f0       	brcs	.+4      	; 0x182e <__udivmodhi4_ep>
    182a:	a6 1b       	sub	r26, r22
    182c:	b7 0b       	sbc	r27, r23

0000182e <__udivmodhi4_ep>:
    182e:	88 1f       	adc	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	5a 95       	dec	r21
    1834:	a9 f7       	brne	.-22     	; 0x1820 <__udivmodhi4_loop>
    1836:	80 95       	com	r24
    1838:	90 95       	com	r25
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	08 95       	ret

00001840 <__divmodhi4>:
    1840:	97 fb       	bst	r25, 7
    1842:	09 2e       	mov	r0, r25
    1844:	07 26       	eor	r0, r23
    1846:	0a d0       	rcall	.+20     	; 0x185c <__divmodhi4_neg1>
    1848:	77 fd       	sbrc	r23, 7
    184a:	04 d0       	rcall	.+8      	; 0x1854 <__divmodhi4_neg2>
    184c:	e5 df       	rcall	.-54     	; 0x1818 <__udivmodhi4>
    184e:	06 d0       	rcall	.+12     	; 0x185c <__divmodhi4_neg1>
    1850:	00 20       	and	r0, r0
    1852:	1a f4       	brpl	.+6      	; 0x185a <__divmodhi4_exit>

00001854 <__divmodhi4_neg2>:
    1854:	70 95       	com	r23
    1856:	61 95       	neg	r22
    1858:	7f 4f       	sbci	r23, 0xFF	; 255

0000185a <__divmodhi4_exit>:
    185a:	08 95       	ret

0000185c <__divmodhi4_neg1>:
    185c:	f6 f7       	brtc	.-4      	; 0x185a <__divmodhi4_exit>
    185e:	90 95       	com	r25
    1860:	81 95       	neg	r24
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__divmodsi4>:
    1866:	97 fb       	bst	r25, 7
    1868:	09 2e       	mov	r0, r25
    186a:	05 26       	eor	r0, r21
    186c:	0e d0       	rcall	.+28     	; 0x188a <__divmodsi4_neg1>
    186e:	57 fd       	sbrc	r21, 7
    1870:	04 d0       	rcall	.+8      	; 0x187a <__divmodsi4_neg2>
    1872:	14 d0       	rcall	.+40     	; 0x189c <__udivmodsi4>
    1874:	0a d0       	rcall	.+20     	; 0x188a <__divmodsi4_neg1>
    1876:	00 1c       	adc	r0, r0
    1878:	38 f4       	brcc	.+14     	; 0x1888 <__divmodsi4_exit>

0000187a <__divmodsi4_neg2>:
    187a:	50 95       	com	r21
    187c:	40 95       	com	r20
    187e:	30 95       	com	r19
    1880:	21 95       	neg	r18
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	4f 4f       	sbci	r20, 0xFF	; 255
    1886:	5f 4f       	sbci	r21, 0xFF	; 255

00001888 <__divmodsi4_exit>:
    1888:	08 95       	ret

0000188a <__divmodsi4_neg1>:
    188a:	f6 f7       	brtc	.-4      	; 0x1888 <__divmodsi4_exit>
    188c:	90 95       	com	r25
    188e:	80 95       	com	r24
    1890:	70 95       	com	r23
    1892:	61 95       	neg	r22
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	8f 4f       	sbci	r24, 0xFF	; 255
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	08 95       	ret

0000189c <__udivmodsi4>:
    189c:	a1 e2       	ldi	r26, 0x21	; 33
    189e:	1a 2e       	mov	r1, r26
    18a0:	aa 1b       	sub	r26, r26
    18a2:	bb 1b       	sub	r27, r27
    18a4:	fd 01       	movw	r30, r26
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <__udivmodsi4_ep>

000018a8 <__udivmodsi4_loop>:
    18a8:	aa 1f       	adc	r26, r26
    18aa:	bb 1f       	adc	r27, r27
    18ac:	ee 1f       	adc	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	a2 17       	cp	r26, r18
    18b2:	b3 07       	cpc	r27, r19
    18b4:	e4 07       	cpc	r30, r20
    18b6:	f5 07       	cpc	r31, r21
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__udivmodsi4_ep>
    18ba:	a2 1b       	sub	r26, r18
    18bc:	b3 0b       	sbc	r27, r19
    18be:	e4 0b       	sbc	r30, r20
    18c0:	f5 0b       	sbc	r31, r21

000018c2 <__udivmodsi4_ep>:
    18c2:	66 1f       	adc	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	1a 94       	dec	r1
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <__udivmodsi4_loop>
    18ce:	60 95       	com	r22
    18d0:	70 95       	com	r23
    18d2:	80 95       	com	r24
    18d4:	90 95       	com	r25
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
    18da:	bd 01       	movw	r22, r26
    18dc:	cf 01       	movw	r24, r30
    18de:	08 95       	ret

000018e0 <fprintf>:
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9e 01       	movw	r18, r28
    18ea:	27 5f       	subi	r18, 0xF7	; 247
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	a9 01       	movw	r20, r18
    18f8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <vfprintf>
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <fputc>:
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	8c 01       	movw	r16, r24
    190c:	eb 01       	movw	r28, r22
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	81 ff       	sbrs	r24, 1
    1912:	1b c0       	rjmp	.+54     	; 0x194a <fputc+0x48>
    1914:	82 ff       	sbrs	r24, 2
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <fputc+0x30>
    1918:	2e 81       	ldd	r18, Y+6	; 0x06
    191a:	3f 81       	ldd	r19, Y+7	; 0x07
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	28 17       	cp	r18, r24
    1922:	39 07       	cpc	r19, r25
    1924:	64 f4       	brge	.+24     	; 0x193e <fputc+0x3c>
    1926:	e8 81       	ld	r30, Y
    1928:	f9 81       	ldd	r31, Y+1	; 0x01
    192a:	01 93       	st	Z+, r16
    192c:	f9 83       	std	Y+1, r31	; 0x01
    192e:	e8 83       	st	Y, r30
    1930:	06 c0       	rjmp	.+12     	; 0x193e <fputc+0x3c>
    1932:	e8 85       	ldd	r30, Y+8	; 0x08
    1934:	f9 85       	ldd	r31, Y+9	; 0x09
    1936:	80 2f       	mov	r24, r16
    1938:	09 95       	icall
    193a:	89 2b       	or	r24, r25
    193c:	31 f4       	brne	.+12     	; 0x194a <fputc+0x48>
    193e:	8e 81       	ldd	r24, Y+6	; 0x06
    1940:	9f 81       	ldd	r25, Y+7	; 0x07
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	9f 83       	std	Y+7, r25	; 0x07
    1946:	8e 83       	std	Y+6, r24	; 0x06
    1948:	02 c0       	rjmp	.+4      	; 0x194e <fputc+0x4c>
    194a:	0f ef       	ldi	r16, 0xFF	; 255
    194c:	1f ef       	ldi	r17, 0xFF	; 255
    194e:	c8 01       	movw	r24, r16
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <fputs>:
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	7c 01       	movw	r14, r24
    1968:	8b 01       	movw	r16, r22
    196a:	db 01       	movw	r26, r22
    196c:	13 96       	adiw	r26, 0x03	; 3
    196e:	8c 91       	ld	r24, X
    1970:	81 fd       	sbrc	r24, 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <fputs+0x20>
    1974:	cf ef       	ldi	r28, 0xFF	; 255
    1976:	df ef       	ldi	r29, 0xFF	; 255
    1978:	13 c0       	rjmp	.+38     	; 0x19a0 <fputs+0x46>
    197a:	c0 e0       	ldi	r28, 0x00	; 0
    197c:	d0 e0       	ldi	r29, 0x00	; 0
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <fputs+0x3c>
    1980:	d8 01       	movw	r26, r16
    1982:	18 96       	adiw	r26, 0x08	; 8
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	19 97       	sbiw	r26, 0x09	; 9
    198a:	b8 01       	movw	r22, r16
    198c:	09 95       	icall
    198e:	89 2b       	or	r24, r25
    1990:	11 f0       	breq	.+4      	; 0x1996 <fputs+0x3c>
    1992:	cf ef       	ldi	r28, 0xFF	; 255
    1994:	df ef       	ldi	r29, 0xFF	; 255
    1996:	f7 01       	movw	r30, r14
    1998:	81 91       	ld	r24, Z+
    199a:	7f 01       	movw	r14, r30
    199c:	88 23       	and	r24, r24
    199e:	81 f7       	brne	.-32     	; 0x1980 <fputs+0x26>
    19a0:	ce 01       	movw	r24, r28
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <fscanf>:
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	9e 01       	movw	r18, r28
    19ba:	27 5f       	subi	r18, 0xF7	; 247
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	a9 01       	movw	r20, r18
    19c8:	0e 94 cf 10 	call	0x219e	; 0x219e <vfscanf>
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <sprintf>:
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	2e 97       	sbiw	r28, 0x0e	; 14
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	0d 89       	ldd	r16, Y+21	; 0x15
    19ec:	1e 89       	ldd	r17, Y+22	; 0x16
    19ee:	86 e0       	ldi	r24, 0x06	; 6
    19f0:	8c 83       	std	Y+4, r24	; 0x04
    19f2:	1a 83       	std	Y+2, r17	; 0x02
    19f4:	09 83       	std	Y+1, r16	; 0x01
    19f6:	8f ef       	ldi	r24, 0xFF	; 255
    19f8:	9f e7       	ldi	r25, 0x7F	; 127
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	9e 01       	movw	r18, r28
    1a00:	27 5e       	subi	r18, 0xE7	; 231
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	6f 89       	ldd	r22, Y+23	; 0x17
    1a0a:	78 8d       	ldd	r23, Y+24	; 0x18
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <vfprintf>
    1a12:	2f 81       	ldd	r18, Y+7	; 0x07
    1a14:	38 85       	ldd	r19, Y+8	; 0x08
    1a16:	02 0f       	add	r16, r18
    1a18:	13 1f       	adc	r17, r19
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	10 82       	st	Z, r1
    1a1e:	2e 96       	adiw	r28, 0x0e	; 14
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <vfprintf>:
    1a34:	2f 92       	push	r2
    1a36:	3f 92       	push	r3
    1a38:	4f 92       	push	r4
    1a3a:	5f 92       	push	r5
    1a3c:	6f 92       	push	r6
    1a3e:	7f 92       	push	r7
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	2b 97       	sbiw	r28, 0x0b	; 11
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	3c 01       	movw	r6, r24
    1a6a:	2b 01       	movw	r4, r22
    1a6c:	5a 01       	movw	r10, r20
    1a6e:	fc 01       	movw	r30, r24
    1a70:	17 82       	std	Z+7, r1	; 0x07
    1a72:	16 82       	std	Z+6, r1	; 0x06
    1a74:	83 81       	ldd	r24, Z+3	; 0x03
    1a76:	81 fd       	sbrc	r24, 1
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <vfprintf+0x4c>
    1a7a:	6f ef       	ldi	r22, 0xFF	; 255
    1a7c:	7f ef       	ldi	r23, 0xFF	; 255
    1a7e:	c6 c1       	rjmp	.+908    	; 0x1e0c <vfprintf+0x3d8>
    1a80:	9a e0       	ldi	r25, 0x0A	; 10
    1a82:	89 2e       	mov	r8, r25
    1a84:	1e 01       	movw	r2, r28
    1a86:	08 94       	sec
    1a88:	21 1c       	adc	r2, r1
    1a8a:	31 1c       	adc	r3, r1
    1a8c:	f3 01       	movw	r30, r6
    1a8e:	23 81       	ldd	r18, Z+3	; 0x03
    1a90:	f2 01       	movw	r30, r4
    1a92:	23 fd       	sbrc	r18, 3
    1a94:	85 91       	lpm	r24, Z+
    1a96:	23 ff       	sbrs	r18, 3
    1a98:	81 91       	ld	r24, Z+
    1a9a:	2f 01       	movw	r4, r30
    1a9c:	88 23       	and	r24, r24
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <vfprintf+0x6e>
    1aa0:	b2 c1       	rjmp	.+868    	; 0x1e06 <vfprintf+0x3d2>
    1aa2:	85 32       	cpi	r24, 0x25	; 37
    1aa4:	39 f4       	brne	.+14     	; 0x1ab4 <vfprintf+0x80>
    1aa6:	23 fd       	sbrc	r18, 3
    1aa8:	85 91       	lpm	r24, Z+
    1aaa:	23 ff       	sbrs	r18, 3
    1aac:	81 91       	ld	r24, Z+
    1aae:	2f 01       	movw	r4, r30
    1ab0:	85 32       	cpi	r24, 0x25	; 37
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <vfprintf+0x8a>
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	b3 01       	movw	r22, r6
    1ab8:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1abc:	e7 cf       	rjmp	.-50     	; 0x1a8c <vfprintf+0x58>
    1abe:	98 2f       	mov	r25, r24
    1ac0:	ff 24       	eor	r15, r15
    1ac2:	ee 24       	eor	r14, r14
    1ac4:	99 24       	eor	r9, r9
    1ac6:	ff e1       	ldi	r31, 0x1F	; 31
    1ac8:	ff 15       	cp	r31, r15
    1aca:	d0 f0       	brcs	.+52     	; 0x1b00 <vfprintf+0xcc>
    1acc:	9b 32       	cpi	r25, 0x2B	; 43
    1ace:	69 f0       	breq	.+26     	; 0x1aea <vfprintf+0xb6>
    1ad0:	9c 32       	cpi	r25, 0x2C	; 44
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <vfprintf+0xaa>
    1ad4:	90 32       	cpi	r25, 0x20	; 32
    1ad6:	59 f0       	breq	.+22     	; 0x1aee <vfprintf+0xba>
    1ad8:	93 32       	cpi	r25, 0x23	; 35
    1ada:	91 f4       	brne	.+36     	; 0x1b00 <vfprintf+0xcc>
    1adc:	0e c0       	rjmp	.+28     	; 0x1afa <vfprintf+0xc6>
    1ade:	9d 32       	cpi	r25, 0x2D	; 45
    1ae0:	49 f0       	breq	.+18     	; 0x1af4 <vfprintf+0xc0>
    1ae2:	90 33       	cpi	r25, 0x30	; 48
    1ae4:	69 f4       	brne	.+26     	; 0x1b00 <vfprintf+0xcc>
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	24 c0       	rjmp	.+72     	; 0x1b32 <vfprintf+0xfe>
    1aea:	52 e0       	ldi	r21, 0x02	; 2
    1aec:	f5 2a       	or	r15, r21
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	f8 2a       	or	r15, r24
    1af2:	28 c0       	rjmp	.+80     	; 0x1b44 <vfprintf+0x110>
    1af4:	98 e0       	ldi	r25, 0x08	; 8
    1af6:	f9 2a       	or	r15, r25
    1af8:	25 c0       	rjmp	.+74     	; 0x1b44 <vfprintf+0x110>
    1afa:	e0 e1       	ldi	r30, 0x10	; 16
    1afc:	fe 2a       	or	r15, r30
    1afe:	22 c0       	rjmp	.+68     	; 0x1b44 <vfprintf+0x110>
    1b00:	f7 fc       	sbrc	r15, 7
    1b02:	29 c0       	rjmp	.+82     	; 0x1b56 <vfprintf+0x122>
    1b04:	89 2f       	mov	r24, r25
    1b06:	80 53       	subi	r24, 0x30	; 48
    1b08:	8a 30       	cpi	r24, 0x0A	; 10
    1b0a:	70 f4       	brcc	.+28     	; 0x1b28 <vfprintf+0xf4>
    1b0c:	f6 fe       	sbrs	r15, 6
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <vfprintf+0xe6>
    1b10:	98 9c       	mul	r9, r8
    1b12:	90 2c       	mov	r9, r0
    1b14:	11 24       	eor	r1, r1
    1b16:	98 0e       	add	r9, r24
    1b18:	15 c0       	rjmp	.+42     	; 0x1b44 <vfprintf+0x110>
    1b1a:	e8 9c       	mul	r14, r8
    1b1c:	e0 2c       	mov	r14, r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	e8 0e       	add	r14, r24
    1b22:	f0 e2       	ldi	r31, 0x20	; 32
    1b24:	ff 2a       	or	r15, r31
    1b26:	0e c0       	rjmp	.+28     	; 0x1b44 <vfprintf+0x110>
    1b28:	9e 32       	cpi	r25, 0x2E	; 46
    1b2a:	29 f4       	brne	.+10     	; 0x1b36 <vfprintf+0x102>
    1b2c:	f6 fc       	sbrc	r15, 6
    1b2e:	6b c1       	rjmp	.+726    	; 0x1e06 <vfprintf+0x3d2>
    1b30:	40 e4       	ldi	r20, 0x40	; 64
    1b32:	f4 2a       	or	r15, r20
    1b34:	07 c0       	rjmp	.+14     	; 0x1b44 <vfprintf+0x110>
    1b36:	9c 36       	cpi	r25, 0x6C	; 108
    1b38:	19 f4       	brne	.+6      	; 0x1b40 <vfprintf+0x10c>
    1b3a:	50 e8       	ldi	r21, 0x80	; 128
    1b3c:	f5 2a       	or	r15, r21
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <vfprintf+0x110>
    1b40:	98 36       	cpi	r25, 0x68	; 104
    1b42:	49 f4       	brne	.+18     	; 0x1b56 <vfprintf+0x122>
    1b44:	f2 01       	movw	r30, r4
    1b46:	23 fd       	sbrc	r18, 3
    1b48:	95 91       	lpm	r25, Z+
    1b4a:	23 ff       	sbrs	r18, 3
    1b4c:	91 91       	ld	r25, Z+
    1b4e:	2f 01       	movw	r4, r30
    1b50:	99 23       	and	r25, r25
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <vfprintf+0x122>
    1b54:	b8 cf       	rjmp	.-144    	; 0x1ac6 <vfprintf+0x92>
    1b56:	89 2f       	mov	r24, r25
    1b58:	85 54       	subi	r24, 0x45	; 69
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	18 f0       	brcs	.+6      	; 0x1b64 <vfprintf+0x130>
    1b5e:	80 52       	subi	r24, 0x20	; 32
    1b60:	83 30       	cpi	r24, 0x03	; 3
    1b62:	38 f4       	brcc	.+14     	; 0x1b72 <vfprintf+0x13e>
    1b64:	44 e0       	ldi	r20, 0x04	; 4
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	a4 0e       	add	r10, r20
    1b6a:	b5 1e       	adc	r11, r21
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	59 83       	std	Y+1, r21	; 0x01
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <vfprintf+0x15c>
    1b72:	93 36       	cpi	r25, 0x63	; 99
    1b74:	31 f0       	breq	.+12     	; 0x1b82 <vfprintf+0x14e>
    1b76:	93 37       	cpi	r25, 0x73	; 115
    1b78:	79 f0       	breq	.+30     	; 0x1b98 <vfprintf+0x164>
    1b7a:	93 35       	cpi	r25, 0x53	; 83
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <vfprintf+0x14c>
    1b7e:	56 c0       	rjmp	.+172    	; 0x1c2c <vfprintf+0x1f8>
    1b80:	20 c0       	rjmp	.+64     	; 0x1bc2 <vfprintf+0x18e>
    1b82:	f5 01       	movw	r30, r10
    1b84:	80 81       	ld	r24, Z
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	42 e0       	ldi	r20, 0x02	; 2
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	a4 0e       	add	r10, r20
    1b8e:	b5 1e       	adc	r11, r21
    1b90:	61 01       	movw	r12, r2
    1b92:	01 e0       	ldi	r16, 0x01	; 1
    1b94:	10 e0       	ldi	r17, 0x00	; 0
    1b96:	12 c0       	rjmp	.+36     	; 0x1bbc <vfprintf+0x188>
    1b98:	f5 01       	movw	r30, r10
    1b9a:	c0 80       	ld	r12, Z
    1b9c:	d1 80       	ldd	r13, Z+1	; 0x01
    1b9e:	f6 fc       	sbrc	r15, 6
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <vfprintf+0x174>
    1ba2:	6f ef       	ldi	r22, 0xFF	; 255
    1ba4:	7f ef       	ldi	r23, 0xFF	; 255
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <vfprintf+0x178>
    1ba8:	69 2d       	mov	r22, r9
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	42 e0       	ldi	r20, 0x02	; 2
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	a4 0e       	add	r10, r20
    1bb2:	b5 1e       	adc	r11, r21
    1bb4:	c6 01       	movw	r24, r12
    1bb6:	0e 94 10 12 	call	0x2420	; 0x2420 <strnlen>
    1bba:	8c 01       	movw	r16, r24
    1bbc:	5f e7       	ldi	r21, 0x7F	; 127
    1bbe:	f5 22       	and	r15, r21
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <vfprintf+0x1b6>
    1bc2:	f5 01       	movw	r30, r10
    1bc4:	c0 80       	ld	r12, Z
    1bc6:	d1 80       	ldd	r13, Z+1	; 0x01
    1bc8:	f6 fc       	sbrc	r15, 6
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <vfprintf+0x19e>
    1bcc:	6f ef       	ldi	r22, 0xFF	; 255
    1bce:	7f ef       	ldi	r23, 0xFF	; 255
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <vfprintf+0x1a2>
    1bd2:	69 2d       	mov	r22, r9
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	42 e0       	ldi	r20, 0x02	; 2
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	a4 0e       	add	r10, r20
    1bdc:	b5 1e       	adc	r11, r21
    1bde:	c6 01       	movw	r24, r12
    1be0:	0e 94 05 12 	call	0x240a	; 0x240a <strnlen_P>
    1be4:	8c 01       	movw	r16, r24
    1be6:	50 e8       	ldi	r21, 0x80	; 128
    1be8:	f5 2a       	or	r15, r21
    1bea:	f3 fe       	sbrs	r15, 3
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <vfprintf+0x1c8>
    1bee:	1a c0       	rjmp	.+52     	; 0x1c24 <vfprintf+0x1f0>
    1bf0:	80 e2       	ldi	r24, 0x20	; 32
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	b3 01       	movw	r22, r6
    1bf6:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1bfa:	ea 94       	dec	r14
    1bfc:	8e 2d       	mov	r24, r14
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	08 17       	cp	r16, r24
    1c02:	19 07       	cpc	r17, r25
    1c04:	a8 f3       	brcs	.-22     	; 0x1bf0 <vfprintf+0x1bc>
    1c06:	0e c0       	rjmp	.+28     	; 0x1c24 <vfprintf+0x1f0>
    1c08:	f6 01       	movw	r30, r12
    1c0a:	f7 fc       	sbrc	r15, 7
    1c0c:	85 91       	lpm	r24, Z+
    1c0e:	f7 fe       	sbrs	r15, 7
    1c10:	81 91       	ld	r24, Z+
    1c12:	6f 01       	movw	r12, r30
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	b3 01       	movw	r22, r6
    1c18:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1c1c:	e1 10       	cpse	r14, r1
    1c1e:	ea 94       	dec	r14
    1c20:	01 50       	subi	r16, 0x01	; 1
    1c22:	10 40       	sbci	r17, 0x00	; 0
    1c24:	01 15       	cp	r16, r1
    1c26:	11 05       	cpc	r17, r1
    1c28:	79 f7       	brne	.-34     	; 0x1c08 <vfprintf+0x1d4>
    1c2a:	ea c0       	rjmp	.+468    	; 0x1e00 <vfprintf+0x3cc>
    1c2c:	94 36       	cpi	r25, 0x64	; 100
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <vfprintf+0x200>
    1c30:	99 36       	cpi	r25, 0x69	; 105
    1c32:	69 f5       	brne	.+90     	; 0x1c8e <vfprintf+0x25a>
    1c34:	f7 fe       	sbrs	r15, 7
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <vfprintf+0x214>
    1c38:	f5 01       	movw	r30, r10
    1c3a:	20 81       	ld	r18, Z
    1c3c:	31 81       	ldd	r19, Z+1	; 0x01
    1c3e:	42 81       	ldd	r20, Z+2	; 0x02
    1c40:	53 81       	ldd	r21, Z+3	; 0x03
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0a c0       	rjmp	.+20     	; 0x1c5c <vfprintf+0x228>
    1c48:	f5 01       	movw	r30, r10
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	9c 01       	movw	r18, r24
    1c50:	44 27       	eor	r20, r20
    1c52:	37 fd       	sbrc	r19, 7
    1c54:	40 95       	com	r20
    1c56:	54 2f       	mov	r21, r20
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a8 0e       	add	r10, r24
    1c5e:	b9 1e       	adc	r11, r25
    1c60:	9f e6       	ldi	r25, 0x6F	; 111
    1c62:	f9 22       	and	r15, r25
    1c64:	57 ff       	sbrs	r21, 7
    1c66:	09 c0       	rjmp	.+18     	; 0x1c7a <vfprintf+0x246>
    1c68:	50 95       	com	r21
    1c6a:	40 95       	com	r20
    1c6c:	30 95       	com	r19
    1c6e:	21 95       	neg	r18
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	4f 4f       	sbci	r20, 0xFF	; 255
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	e0 e8       	ldi	r30, 0x80	; 128
    1c78:	fe 2a       	or	r15, r30
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	b9 01       	movw	r22, r18
    1c7e:	a1 01       	movw	r20, r2
    1c80:	2a e0       	ldi	r18, 0x0A	; 10
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	0e 94 77 12 	call	0x24ee	; 0x24ee <__ultoa_invert>
    1c88:	d8 2e       	mov	r13, r24
    1c8a:	d2 18       	sub	r13, r2
    1c8c:	40 c0       	rjmp	.+128    	; 0x1d0e <vfprintf+0x2da>
    1c8e:	95 37       	cpi	r25, 0x75	; 117
    1c90:	29 f4       	brne	.+10     	; 0x1c9c <vfprintf+0x268>
    1c92:	1f 2d       	mov	r17, r15
    1c94:	1f 7e       	andi	r17, 0xEF	; 239
    1c96:	2a e0       	ldi	r18, 0x0A	; 10
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	1d c0       	rjmp	.+58     	; 0x1cd6 <vfprintf+0x2a2>
    1c9c:	1f 2d       	mov	r17, r15
    1c9e:	19 7f       	andi	r17, 0xF9	; 249
    1ca0:	9f 36       	cpi	r25, 0x6F	; 111
    1ca2:	61 f0       	breq	.+24     	; 0x1cbc <vfprintf+0x288>
    1ca4:	90 37       	cpi	r25, 0x70	; 112
    1ca6:	20 f4       	brcc	.+8      	; 0x1cb0 <vfprintf+0x27c>
    1ca8:	98 35       	cpi	r25, 0x58	; 88
    1caa:	09 f0       	breq	.+2      	; 0x1cae <vfprintf+0x27a>
    1cac:	ac c0       	rjmp	.+344    	; 0x1e06 <vfprintf+0x3d2>
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <vfprintf+0x29a>
    1cb0:	90 37       	cpi	r25, 0x70	; 112
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <vfprintf+0x28e>
    1cb4:	98 37       	cpi	r25, 0x78	; 120
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <vfprintf+0x286>
    1cb8:	a6 c0       	rjmp	.+332    	; 0x1e06 <vfprintf+0x3d2>
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <vfprintf+0x290>
    1cbc:	28 e0       	ldi	r18, 0x08	; 8
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <vfprintf+0x2a2>
    1cc2:	10 61       	ori	r17, 0x10	; 16
    1cc4:	14 fd       	sbrc	r17, 4
    1cc6:	14 60       	ori	r17, 0x04	; 4
    1cc8:	20 e1       	ldi	r18, 0x10	; 16
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	04 c0       	rjmp	.+8      	; 0x1cd6 <vfprintf+0x2a2>
    1cce:	14 fd       	sbrc	r17, 4
    1cd0:	16 60       	ori	r17, 0x06	; 6
    1cd2:	20 e1       	ldi	r18, 0x10	; 16
    1cd4:	32 e0       	ldi	r19, 0x02	; 2
    1cd6:	17 ff       	sbrs	r17, 7
    1cd8:	08 c0       	rjmp	.+16     	; 0x1cea <vfprintf+0x2b6>
    1cda:	f5 01       	movw	r30, r10
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	44 e0       	ldi	r20, 0x04	; 4
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x2c6>
    1cea:	f5 01       	movw	r30, r10
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	42 e0       	ldi	r20, 0x02	; 2
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	a4 0e       	add	r10, r20
    1cfc:	b5 1e       	adc	r11, r21
    1cfe:	a1 01       	movw	r20, r2
    1d00:	0e 94 77 12 	call	0x24ee	; 0x24ee <__ultoa_invert>
    1d04:	d8 2e       	mov	r13, r24
    1d06:	d2 18       	sub	r13, r2
    1d08:	8f e7       	ldi	r24, 0x7F	; 127
    1d0a:	f8 2e       	mov	r15, r24
    1d0c:	f1 22       	and	r15, r17
    1d0e:	f6 fe       	sbrs	r15, 6
    1d10:	0b c0       	rjmp	.+22     	; 0x1d28 <vfprintf+0x2f4>
    1d12:	5e ef       	ldi	r21, 0xFE	; 254
    1d14:	f5 22       	and	r15, r21
    1d16:	d9 14       	cp	r13, r9
    1d18:	38 f4       	brcc	.+14     	; 0x1d28 <vfprintf+0x2f4>
    1d1a:	f4 fe       	sbrs	r15, 4
    1d1c:	07 c0       	rjmp	.+14     	; 0x1d2c <vfprintf+0x2f8>
    1d1e:	f2 fc       	sbrc	r15, 2
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <vfprintf+0x2f8>
    1d22:	8f ee       	ldi	r24, 0xEF	; 239
    1d24:	f8 22       	and	r15, r24
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <vfprintf+0x2f8>
    1d28:	1d 2d       	mov	r17, r13
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <vfprintf+0x2fa>
    1d2c:	19 2d       	mov	r17, r9
    1d2e:	f4 fe       	sbrs	r15, 4
    1d30:	0d c0       	rjmp	.+26     	; 0x1d4c <vfprintf+0x318>
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 0d       	add	r30, r13
    1d36:	f1 1d       	adc	r31, r1
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 33       	cpi	r24, 0x30	; 48
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <vfprintf+0x310>
    1d3e:	99 ee       	ldi	r25, 0xE9	; 233
    1d40:	f9 22       	and	r15, r25
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <vfprintf+0x320>
    1d44:	1f 5f       	subi	r17, 0xFF	; 255
    1d46:	f2 fe       	sbrs	r15, 2
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <vfprintf+0x320>
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <vfprintf+0x31e>
    1d4c:	8f 2d       	mov	r24, r15
    1d4e:	86 78       	andi	r24, 0x86	; 134
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <vfprintf+0x320>
    1d52:	1f 5f       	subi	r17, 0xFF	; 255
    1d54:	0f 2d       	mov	r16, r15
    1d56:	f3 fc       	sbrc	r15, 3
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <vfprintf+0x34e>
    1d5a:	f0 fe       	sbrs	r15, 0
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <vfprintf+0x348>
    1d5e:	1e 15       	cp	r17, r14
    1d60:	10 f0       	brcs	.+4      	; 0x1d66 <vfprintf+0x332>
    1d62:	9d 2c       	mov	r9, r13
    1d64:	0b c0       	rjmp	.+22     	; 0x1d7c <vfprintf+0x348>
    1d66:	9d 2c       	mov	r9, r13
    1d68:	9e 0c       	add	r9, r14
    1d6a:	91 1a       	sub	r9, r17
    1d6c:	1e 2d       	mov	r17, r14
    1d6e:	06 c0       	rjmp	.+12     	; 0x1d7c <vfprintf+0x348>
    1d70:	80 e2       	ldi	r24, 0x20	; 32
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	b3 01       	movw	r22, r6
    1d76:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1d7a:	1f 5f       	subi	r17, 0xFF	; 255
    1d7c:	1e 15       	cp	r17, r14
    1d7e:	c0 f3       	brcs	.-16     	; 0x1d70 <vfprintf+0x33c>
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <vfprintf+0x356>
    1d82:	1e 15       	cp	r17, r14
    1d84:	10 f4       	brcc	.+4      	; 0x1d8a <vfprintf+0x356>
    1d86:	e1 1a       	sub	r14, r17
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <vfprintf+0x358>
    1d8a:	ee 24       	eor	r14, r14
    1d8c:	04 ff       	sbrs	r16, 4
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <vfprintf+0x37a>
    1d90:	80 e3       	ldi	r24, 0x30	; 48
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	b3 01       	movw	r22, r6
    1d96:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1d9a:	02 ff       	sbrs	r16, 2
    1d9c:	1d c0       	rjmp	.+58     	; 0x1dd8 <vfprintf+0x3a4>
    1d9e:	01 fd       	sbrc	r16, 1
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <vfprintf+0x374>
    1da2:	88 e7       	ldi	r24, 0x78	; 120
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <vfprintf+0x390>
    1da8:	88 e5       	ldi	r24, 0x58	; 88
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0b c0       	rjmp	.+22     	; 0x1dc4 <vfprintf+0x390>
    1dae:	80 2f       	mov	r24, r16
    1db0:	86 78       	andi	r24, 0x86	; 134
    1db2:	91 f0       	breq	.+36     	; 0x1dd8 <vfprintf+0x3a4>
    1db4:	01 ff       	sbrs	r16, 1
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <vfprintf+0x388>
    1db8:	8b e2       	ldi	r24, 0x2B	; 43
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <vfprintf+0x38a>
    1dbc:	80 e2       	ldi	r24, 0x20	; 32
    1dbe:	f7 fc       	sbrc	r15, 7
    1dc0:	8d e2       	ldi	r24, 0x2D	; 45
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <vfprintf+0x3a4>
    1dcc:	80 e3       	ldi	r24, 0x30	; 48
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	b3 01       	movw	r22, r6
    1dd2:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1dd6:	9a 94       	dec	r9
    1dd8:	d9 14       	cp	r13, r9
    1dda:	c0 f3       	brcs	.-16     	; 0x1dcc <vfprintf+0x398>
    1ddc:	da 94       	dec	r13
    1dde:	f1 01       	movw	r30, r2
    1de0:	ed 0d       	add	r30, r13
    1de2:	f1 1d       	adc	r31, r1
    1de4:	80 81       	ld	r24, Z
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b3 01       	movw	r22, r6
    1dea:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1dee:	dd 20       	and	r13, r13
    1df0:	a9 f7       	brne	.-22     	; 0x1ddc <vfprintf+0x3a8>
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <vfprintf+0x3cc>
    1df4:	80 e2       	ldi	r24, 0x20	; 32
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	b3 01       	movw	r22, r6
    1dfa:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1dfe:	ea 94       	dec	r14
    1e00:	ee 20       	and	r14, r14
    1e02:	c1 f7       	brne	.-16     	; 0x1df4 <vfprintf+0x3c0>
    1e04:	43 ce       	rjmp	.-890    	; 0x1a8c <vfprintf+0x58>
    1e06:	f3 01       	movw	r30, r6
    1e08:	66 81       	ldd	r22, Z+6	; 0x06
    1e0a:	77 81       	ldd	r23, Z+7	; 0x07
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	2b 96       	adiw	r28, 0x0b	; 11
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	df 90       	pop	r13
    1e28:	cf 90       	pop	r12
    1e2a:	bf 90       	pop	r11
    1e2c:	af 90       	pop	r10
    1e2e:	9f 90       	pop	r9
    1e30:	8f 90       	pop	r8
    1e32:	7f 90       	pop	r7
    1e34:	6f 90       	pop	r6
    1e36:	5f 90       	pop	r5
    1e38:	4f 90       	pop	r4
    1e3a:	3f 90       	pop	r3
    1e3c:	2f 90       	pop	r2
    1e3e:	08 95       	ret

00001e40 <putval>:
    1e40:	fc 01       	movw	r30, r24
    1e42:	20 fd       	sbrc	r18, 0
    1e44:	08 c0       	rjmp	.+16     	; 0x1e56 <putval+0x16>
    1e46:	23 fd       	sbrc	r18, 3
    1e48:	05 c0       	rjmp	.+10     	; 0x1e54 <putval+0x14>
    1e4a:	22 ff       	sbrs	r18, 2
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <putval+0x12>
    1e4e:	73 83       	std	Z+3, r23	; 0x03
    1e50:	62 83       	std	Z+2, r22	; 0x02
    1e52:	51 83       	std	Z+1, r21	; 0x01
    1e54:	40 83       	st	Z, r20
    1e56:	08 95       	ret

00001e58 <mulacc>:
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	44 ff       	sbrs	r20, 4
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <mulacc+0x10>
    1e64:	33 e0       	ldi	r19, 0x03	; 3
    1e66:	11 c0       	rjmp	.+34     	; 0x1e8a <mulacc+0x32>
    1e68:	46 ff       	sbrs	r20, 6
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <mulacc+0x18>
    1e6c:	34 e0       	ldi	r19, 0x04	; 4
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <mulacc+0x32>
    1e70:	db 01       	movw	r26, r22
    1e72:	fc 01       	movw	r30, r24
    1e74:	aa 0f       	add	r26, r26
    1e76:	bb 1f       	adc	r27, r27
    1e78:	ee 1f       	adc	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	10 94       	com	r1
    1e7e:	d1 f7       	brne	.-12     	; 0x1e74 <mulacc+0x1c>
    1e80:	6a 0f       	add	r22, r26
    1e82:	7b 1f       	adc	r23, r27
    1e84:	8e 1f       	adc	r24, r30
    1e86:	9f 1f       	adc	r25, r31
    1e88:	31 e0       	ldi	r19, 0x01	; 1
    1e8a:	66 0f       	add	r22, r22
    1e8c:	77 1f       	adc	r23, r23
    1e8e:	88 1f       	adc	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	31 50       	subi	r19, 0x01	; 1
    1e94:	d1 f7       	brne	.-12     	; 0x1e8a <mulacc+0x32>
    1e96:	7b 01       	movw	r14, r22
    1e98:	8c 01       	movw	r16, r24
    1e9a:	e2 0e       	add	r14, r18
    1e9c:	f1 1c       	adc	r15, r1
    1e9e:	01 1d       	adc	r16, r1
    1ea0:	11 1d       	adc	r17, r1
    1ea2:	a8 01       	movw	r20, r16
    1ea4:	97 01       	movw	r18, r14
    1ea6:	b7 01       	movw	r22, r14
    1ea8:	ca 01       	movw	r24, r20
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	ff 90       	pop	r15
    1eb0:	ef 90       	pop	r14
    1eb2:	08 95       	ret

00001eb4 <skip_spaces>:
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	8c 01       	movw	r16, r24
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    1ec4:	ec 01       	movw	r28, r24
    1ec6:	97 fd       	sbrc	r25, 7
    1ec8:	08 c0       	rjmp	.+16     	; 0x1eda <skip_spaces+0x26>
    1eca:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <isspace>
    1ece:	89 2b       	or	r24, r25
    1ed0:	b1 f7       	brne	.-20     	; 0x1ebe <skip_spaces+0xa>
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	b8 01       	movw	r22, r16
    1ed6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <ungetc>
    1eda:	ce 01       	movw	r24, r28
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <conv_int>:
    1ee6:	af 92       	push	r10
    1ee8:	bf 92       	push	r11
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	ec 01       	movw	r28, r24
    1efc:	c6 2e       	mov	r12, r22
    1efe:	5a 01       	movw	r10, r20
    1f00:	12 2f       	mov	r17, r18
    1f02:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    1f06:	ac 01       	movw	r20, r24
    1f08:	8b 32       	cpi	r24, 0x2B	; 43
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <conv_int+0x2c>
    1f0c:	8d 32       	cpi	r24, 0x2D	; 45
    1f0e:	51 f4       	brne	.+20     	; 0x1f24 <conv_int+0x3e>
    1f10:	10 68       	ori	r17, 0x80	; 128
    1f12:	ca 94       	dec	r12
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <conv_int+0x32>
    1f16:	6d c0       	rjmp	.+218    	; 0x1ff2 <conv_int+0x10c>
    1f18:	ce 01       	movw	r24, r28
    1f1a:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    1f1e:	ac 01       	movw	r20, r24
    1f20:	97 fd       	sbrc	r25, 7
    1f22:	67 c0       	rjmp	.+206    	; 0x1ff2 <conv_int+0x10c>
    1f24:	6d ef       	ldi	r22, 0xFD	; 253
    1f26:	d6 2e       	mov	r13, r22
    1f28:	d1 22       	and	r13, r17
    1f2a:	8d 2d       	mov	r24, r13
    1f2c:	80 73       	andi	r24, 0x30	; 48
    1f2e:	01 f5       	brne	.+64     	; 0x1f70 <conv_int+0x8a>
    1f30:	40 33       	cpi	r20, 0x30	; 48
    1f32:	f1 f4       	brne	.+60     	; 0x1f70 <conv_int+0x8a>
    1f34:	ca 94       	dec	r12
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <conv_int+0x54>
    1f38:	47 c0       	rjmp	.+142    	; 0x1fc8 <conv_int+0xe2>
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    1f40:	ac 01       	movw	r20, r24
    1f42:	97 fd       	sbrc	r25, 7
    1f44:	41 c0       	rjmp	.+130    	; 0x1fc8 <conv_int+0xe2>
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	d8 2a       	or	r13, r24
    1f4a:	48 37       	cpi	r20, 0x78	; 120
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <conv_int+0x6c>
    1f4e:	48 35       	cpi	r20, 0x58	; 88
    1f50:	59 f4       	brne	.+22     	; 0x1f68 <conv_int+0x82>
    1f52:	80 e4       	ldi	r24, 0x40	; 64
    1f54:	d8 2a       	or	r13, r24
    1f56:	ca 94       	dec	r12
    1f58:	b9 f1       	breq	.+110    	; 0x1fc8 <conv_int+0xe2>
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    1f60:	ac 01       	movw	r20, r24
    1f62:	99 23       	and	r25, r25
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <conv_int+0x8a>
    1f66:	30 c0       	rjmp	.+96     	; 0x1fc8 <conv_int+0xe2>
    1f68:	d6 fc       	sbrc	r13, 6
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <conv_int+0x8a>
    1f6c:	80 e1       	ldi	r24, 0x10	; 16
    1f6e:	d8 2a       	or	r13, r24
    1f70:	ee 24       	eor	r14, r14
    1f72:	ff 24       	eor	r15, r15
    1f74:	87 01       	movw	r16, r14
    1f76:	24 2f       	mov	r18, r20
    1f78:	20 53       	subi	r18, 0x30	; 48
    1f7a:	28 30       	cpi	r18, 0x08	; 8
    1f7c:	88 f0       	brcs	.+34     	; 0x1fa0 <conv_int+0xba>
    1f7e:	d4 fc       	sbrc	r13, 4
    1f80:	09 c0       	rjmp	.+18     	; 0x1f94 <conv_int+0xae>
    1f82:	2a 30       	cpi	r18, 0x0A	; 10
    1f84:	68 f0       	brcs	.+26     	; 0x1fa0 <conv_int+0xba>
    1f86:	d6 fe       	sbrs	r13, 6
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <conv_int+0xae>
    1f8a:	2f 7d       	andi	r18, 0xDF	; 223
    1f8c:	82 2f       	mov	r24, r18
    1f8e:	81 51       	subi	r24, 0x11	; 17
    1f90:	86 30       	cpi	r24, 0x06	; 6
    1f92:	28 f0       	brcs	.+10     	; 0x1f9e <conv_int+0xb8>
    1f94:	ca 01       	movw	r24, r20
    1f96:	be 01       	movw	r22, r28
    1f98:	0e 94 5d 12 	call	0x24ba	; 0x24ba <ungetc>
    1f9c:	12 c0       	rjmp	.+36     	; 0x1fc2 <conv_int+0xdc>
    1f9e:	27 50       	subi	r18, 0x07	; 7
    1fa0:	c8 01       	movw	r24, r16
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	4d 2d       	mov	r20, r13
    1fa6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <mulacc>
    1faa:	7b 01       	movw	r14, r22
    1fac:	8c 01       	movw	r16, r24
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	d8 2a       	or	r13, r24
    1fb2:	ca 94       	dec	r12
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <conv_int+0xe8>
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	97 ff       	sbrs	r25, 7
    1fc0:	da cf       	rjmp	.-76     	; 0x1f76 <conv_int+0x90>
    1fc2:	d1 fc       	sbrc	r13, 1
    1fc4:	04 c0       	rjmp	.+8      	; 0x1fce <conv_int+0xe8>
    1fc6:	15 c0       	rjmp	.+42     	; 0x1ff2 <conv_int+0x10c>
    1fc8:	ee 24       	eor	r14, r14
    1fca:	ff 24       	eor	r15, r15
    1fcc:	87 01       	movw	r16, r14
    1fce:	d7 fe       	sbrs	r13, 7
    1fd0:	08 c0       	rjmp	.+16     	; 0x1fe2 <conv_int+0xfc>
    1fd2:	10 95       	com	r17
    1fd4:	00 95       	com	r16
    1fd6:	f0 94       	com	r15
    1fd8:	e0 94       	com	r14
    1fda:	e1 1c       	adc	r14, r1
    1fdc:	f1 1c       	adc	r15, r1
    1fde:	01 1d       	adc	r16, r1
    1fe0:	11 1d       	adc	r17, r1
    1fe2:	c5 01       	movw	r24, r10
    1fe4:	b8 01       	movw	r22, r16
    1fe6:	a7 01       	movw	r20, r14
    1fe8:	2d 2d       	mov	r18, r13
    1fea:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <putval>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <conv_int+0x10e>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	08 95       	ret

0000200a <conv_brk>:
    200a:	6f 92       	push	r6
    200c:	7f 92       	push	r7
    200e:	8f 92       	push	r8
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	a0 97       	sbiw	r28, 0x20	; 32
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	6c 01       	movw	r12, r24
    2038:	a6 2e       	mov	r10, r22
    203a:	8a 01       	movw	r16, r20
    203c:	79 01       	movw	r14, r18
    203e:	fe 01       	movw	r30, r28
    2040:	31 96       	adiw	r30, 0x01	; 1
    2042:	80 e2       	ldi	r24, 0x20	; 32
    2044:	df 01       	movw	r26, r30
    2046:	1d 92       	st	X+, r1
    2048:	8a 95       	dec	r24
    204a:	e9 f7       	brne	.-6      	; 0x2046 <conv_brk+0x3c>
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	4f 01       	movw	r8, r30
    2058:	a1 e0       	ldi	r26, 0x01	; 1
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	f6 01       	movw	r30, r12
    205e:	83 81       	ldd	r24, Z+3	; 0x03
    2060:	f7 01       	movw	r30, r14
    2062:	83 fd       	sbrc	r24, 3
    2064:	25 91       	lpm	r18, Z+
    2066:	83 ff       	sbrs	r24, 3
    2068:	21 91       	ld	r18, Z+
    206a:	7f 01       	movw	r14, r30
    206c:	22 23       	and	r18, r18
    206e:	09 f4       	brne	.+2      	; 0x2072 <conv_brk+0x68>
    2070:	7e c0       	rjmp	.+252    	; 0x216e <conv_brk+0x164>
    2072:	2e 35       	cpi	r18, 0x5E	; 94
    2074:	19 f4       	brne	.+6      	; 0x207c <conv_brk+0x72>
    2076:	41 15       	cp	r20, r1
    2078:	51 05       	cpc	r21, r1
    207a:	69 f1       	breq	.+90     	; 0x20d6 <conv_brk+0xcc>
    207c:	87 2f       	mov	r24, r23
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	84 17       	cp	r24, r20
    2082:	95 07       	cpc	r25, r21
    2084:	44 f4       	brge	.+16     	; 0x2096 <conv_brk+0x8c>
    2086:	2d 35       	cpi	r18, 0x5D	; 93
    2088:	51 f1       	breq	.+84     	; 0x20de <conv_brk+0xd4>
    208a:	2d 32       	cpi	r18, 0x2D	; 45
    208c:	21 f4       	brne	.+8      	; 0x2096 <conv_brk+0x8c>
    208e:	33 23       	and	r19, r19
    2090:	29 f4       	brne	.+10     	; 0x209c <conv_brk+0x92>
    2092:	31 e0       	ldi	r19, 0x01	; 1
    2094:	21 c0       	rjmp	.+66     	; 0x20d8 <conv_brk+0xce>
    2096:	33 23       	and	r19, r19
    2098:	09 f4       	brne	.+2      	; 0x209c <conv_brk+0x92>
    209a:	62 2f       	mov	r22, r18
    209c:	32 2f       	mov	r19, r18
    209e:	83 2f       	mov	r24, r19
    20a0:	86 95       	lsr	r24
    20a2:	86 95       	lsr	r24
    20a4:	86 95       	lsr	r24
    20a6:	f4 01       	movw	r30, r8
    20a8:	e8 0f       	add	r30, r24
    20aa:	f1 1d       	adc	r31, r1
    20ac:	83 2f       	mov	r24, r19
    20ae:	87 70       	andi	r24, 0x07	; 7
    20b0:	3d 01       	movw	r6, r26
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <conv_brk+0xae>
    20b4:	66 0c       	add	r6, r6
    20b6:	77 1c       	adc	r7, r7
    20b8:	8a 95       	dec	r24
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <conv_brk+0xaa>
    20bc:	20 81       	ld	r18, Z
    20be:	26 29       	or	r18, r6
    20c0:	20 83       	st	Z, r18
    20c2:	36 17       	cp	r19, r22
    20c4:	11 f4       	brne	.+4      	; 0x20ca <conv_brk+0xc0>
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	07 c0       	rjmp	.+14     	; 0x20d8 <conv_brk+0xce>
    20ca:	36 17       	cp	r19, r22
    20cc:	10 f4       	brcc	.+4      	; 0x20d2 <conv_brk+0xc8>
    20ce:	3f 5f       	subi	r19, 0xFF	; 255
    20d0:	e6 cf       	rjmp	.-52     	; 0x209e <conv_brk+0x94>
    20d2:	31 50       	subi	r19, 0x01	; 1
    20d4:	e4 cf       	rjmp	.-56     	; 0x209e <conv_brk+0x94>
    20d6:	71 e0       	ldi	r23, 0x01	; 1
    20d8:	4f 5f       	subi	r20, 0xFF	; 255
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	bf cf       	rjmp	.-130    	; 0x205c <conv_brk+0x52>
    20de:	33 23       	and	r19, r19
    20e0:	19 f0       	breq	.+6      	; 0x20e8 <conv_brk+0xde>
    20e2:	8e 81       	ldd	r24, Y+6	; 0x06
    20e4:	80 62       	ori	r24, 0x20	; 32
    20e6:	8e 83       	std	Y+6, r24	; 0x06
    20e8:	77 23       	and	r23, r23
    20ea:	59 f0       	breq	.+22     	; 0x2102 <conv_brk+0xf8>
    20ec:	fe 01       	movw	r30, r28
    20ee:	31 96       	adiw	r30, 0x01	; 1
    20f0:	9e 01       	movw	r18, r28
    20f2:	2f 5d       	subi	r18, 0xDF	; 223
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	80 95       	com	r24
    20fa:	81 93       	st	Z+, r24
    20fc:	e2 17       	cp	r30, r18
    20fe:	f3 07       	cpc	r31, r19
    2100:	d1 f7       	brne	.-12     	; 0x20f6 <conv_brk+0xec>
    2102:	bb 24       	eor	r11, r11
    2104:	b3 94       	inc	r11
    2106:	4e 01       	movw	r8, r28
    2108:	08 94       	sec
    210a:	81 1c       	adc	r8, r1
    210c:	91 1c       	adc	r9, r1
    210e:	c6 01       	movw	r24, r12
    2110:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    2114:	ac 01       	movw	r20, r24
    2116:	97 fd       	sbrc	r25, 7
    2118:	22 c0       	rjmp	.+68     	; 0x215e <conv_brk+0x154>
    211a:	86 95       	lsr	r24
    211c:	86 95       	lsr	r24
    211e:	86 95       	lsr	r24
    2120:	f4 01       	movw	r30, r8
    2122:	e8 0f       	add	r30, r24
    2124:	f1 1d       	adc	r31, r1
    2126:	80 81       	ld	r24, Z
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9a 01       	movw	r18, r20
    212c:	27 70       	andi	r18, 0x07	; 7
    212e:	30 70       	andi	r19, 0x00	; 0
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <conv_brk+0x12c>
    2132:	95 95       	asr	r25
    2134:	87 95       	ror	r24
    2136:	2a 95       	dec	r18
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <conv_brk+0x128>
    213a:	80 fd       	sbrc	r24, 0
    213c:	05 c0       	rjmp	.+10     	; 0x2148 <conv_brk+0x13e>
    213e:	ca 01       	movw	r24, r20
    2140:	b6 01       	movw	r22, r12
    2142:	0e 94 5d 12 	call	0x24ba	; 0x24ba <ungetc>
    2146:	0b c0       	rjmp	.+22     	; 0x215e <conv_brk+0x154>
    2148:	01 15       	cp	r16, r1
    214a:	11 05       	cpc	r17, r1
    214c:	19 f0       	breq	.+6      	; 0x2154 <conv_brk+0x14a>
    214e:	d8 01       	movw	r26, r16
    2150:	4d 93       	st	X+, r20
    2152:	8d 01       	movw	r16, r26
    2154:	aa 94       	dec	r10
    2156:	bb 24       	eor	r11, r11
    2158:	aa 20       	and	r10, r10
    215a:	c9 f6       	brne	.-78     	; 0x210e <conv_brk+0x104>
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <conv_brk+0x158>
    215e:	bb 20       	and	r11, r11
    2160:	31 f4       	brne	.+12     	; 0x216e <conv_brk+0x164>
    2162:	01 15       	cp	r16, r1
    2164:	11 05       	cpc	r17, r1
    2166:	29 f0       	breq	.+10     	; 0x2172 <conv_brk+0x168>
    2168:	f8 01       	movw	r30, r16
    216a:	10 82       	st	Z, r1
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <conv_brk+0x168>
    216e:	ee 24       	eor	r14, r14
    2170:	ff 24       	eor	r15, r15
    2172:	c7 01       	movw	r24, r14
    2174:	a0 96       	adiw	r28, 0x20	; 32
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	ff 90       	pop	r15
    218a:	ef 90       	pop	r14
    218c:	df 90       	pop	r13
    218e:	cf 90       	pop	r12
    2190:	bf 90       	pop	r11
    2192:	af 90       	pop	r10
    2194:	9f 90       	pop	r9
    2196:	8f 90       	pop	r8
    2198:	7f 90       	pop	r7
    219a:	6f 90       	pop	r6
    219c:	08 95       	ret

0000219e <vfscanf>:
    219e:	6f 92       	push	r6
    21a0:	7f 92       	push	r7
    21a2:	8f 92       	push	r8
    21a4:	9f 92       	push	r9
    21a6:	af 92       	push	r10
    21a8:	bf 92       	push	r11
    21aa:	cf 92       	push	r12
    21ac:	df 92       	push	r13
    21ae:	ef 92       	push	r14
    21b0:	ff 92       	push	r15
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	5c 01       	movw	r10, r24
    21bc:	6b 01       	movw	r12, r22
    21be:	3a 01       	movw	r6, r20
    21c0:	fc 01       	movw	r30, r24
    21c2:	17 82       	std	Z+7, r1	; 0x07
    21c4:	16 82       	std	Z+6, r1	; 0x06
    21c6:	88 24       	eor	r8, r8
    21c8:	ea c0       	rjmp	.+468    	; 0x239e <vfscanf+0x200>
    21ca:	81 2f       	mov	r24, r17
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <isspace>
    21d2:	89 2b       	or	r24, r25
    21d4:	21 f0       	breq	.+8      	; 0x21de <vfscanf+0x40>
    21d6:	c5 01       	movw	r24, r10
    21d8:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <skip_spaces>
    21dc:	e0 c0       	rjmp	.+448    	; 0x239e <vfscanf+0x200>
    21de:	15 32       	cpi	r17, 0x25	; 37
    21e0:	49 f4       	brne	.+18     	; 0x21f4 <vfscanf+0x56>
    21e2:	f6 01       	movw	r30, r12
    21e4:	f3 fc       	sbrc	r15, 3
    21e6:	65 91       	lpm	r22, Z+
    21e8:	f3 fe       	sbrs	r15, 3
    21ea:	61 91       	ld	r22, Z+
    21ec:	6f 01       	movw	r12, r30
    21ee:	65 32       	cpi	r22, 0x25	; 37
    21f0:	69 f4       	brne	.+26     	; 0x220c <vfscanf+0x6e>
    21f2:	15 e2       	ldi	r17, 0x25	; 37
    21f4:	c5 01       	movw	r24, r10
    21f6:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    21fa:	97 fd       	sbrc	r25, 7
    21fc:	dc c0       	rjmp	.+440    	; 0x23b6 <vfscanf+0x218>
    21fe:	18 17       	cp	r17, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <vfscanf+0x66>
    2202:	cd c0       	rjmp	.+410    	; 0x239e <vfscanf+0x200>
    2204:	b5 01       	movw	r22, r10
    2206:	0e 94 5d 12 	call	0x24ba	; 0x24ba <ungetc>
    220a:	da c0       	rjmp	.+436    	; 0x23c0 <vfscanf+0x222>
    220c:	6a 32       	cpi	r22, 0x2A	; 42
    220e:	19 f0       	breq	.+6      	; 0x2216 <vfscanf+0x78>
    2210:	16 2f       	mov	r17, r22
    2212:	00 e0       	ldi	r16, 0x00	; 0
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <vfscanf+0x84>
    2216:	f3 fc       	sbrc	r15, 3
    2218:	15 91       	lpm	r17, Z+
    221a:	f3 fe       	sbrs	r15, 3
    221c:	11 91       	ld	r17, Z+
    221e:	6f 01       	movw	r12, r30
    2220:	01 e0       	ldi	r16, 0x01	; 1
    2222:	99 24       	eor	r9, r9
    2224:	0f c0       	rjmp	.+30     	; 0x2244 <vfscanf+0xa6>
    2226:	02 60       	ori	r16, 0x02	; 2
    2228:	69 2d       	mov	r22, r9
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <mulacc>
    2236:	96 2e       	mov	r9, r22
    2238:	f6 01       	movw	r30, r12
    223a:	f3 fc       	sbrc	r15, 3
    223c:	15 91       	lpm	r17, Z+
    223e:	f3 fe       	sbrs	r15, 3
    2240:	11 91       	ld	r17, Z+
    2242:	6f 01       	movw	r12, r30
    2244:	21 2f       	mov	r18, r17
    2246:	20 53       	subi	r18, 0x30	; 48
    2248:	2a 30       	cpi	r18, 0x0A	; 10
    224a:	68 f3       	brcs	.-38     	; 0x2226 <vfscanf+0x88>
    224c:	01 fd       	sbrc	r16, 1
    224e:	03 c0       	rjmp	.+6      	; 0x2256 <vfscanf+0xb8>
    2250:	99 24       	eor	r9, r9
    2252:	9a 94       	dec	r9
    2254:	03 c0       	rjmp	.+6      	; 0x225c <vfscanf+0xbe>
    2256:	99 20       	and	r9, r9
    2258:	09 f4       	brne	.+2      	; 0x225c <vfscanf+0xbe>
    225a:	b2 c0       	rjmp	.+356    	; 0x23c0 <vfscanf+0x222>
    225c:	18 36       	cpi	r17, 0x68	; 104
    225e:	21 f0       	breq	.+8      	; 0x2268 <vfscanf+0xca>
    2260:	1c 36       	cpi	r17, 0x6C	; 108
    2262:	99 f4       	brne	.+38     	; 0x228a <vfscanf+0xec>
    2264:	f6 01       	movw	r30, r12
    2266:	0b c0       	rjmp	.+22     	; 0x227e <vfscanf+0xe0>
    2268:	f6 01       	movw	r30, r12
    226a:	f3 fc       	sbrc	r15, 3
    226c:	65 91       	lpm	r22, Z+
    226e:	f3 fe       	sbrs	r15, 3
    2270:	61 91       	ld	r22, Z+
    2272:	68 36       	cpi	r22, 0x68	; 104
    2274:	19 f0       	breq	.+6      	; 0x227c <vfscanf+0xde>
    2276:	6f 01       	movw	r12, r30
    2278:	16 2f       	mov	r17, r22
    227a:	07 c0       	rjmp	.+14     	; 0x228a <vfscanf+0xec>
    227c:	08 60       	ori	r16, 0x08	; 8
    227e:	04 60       	ori	r16, 0x04	; 4
    2280:	f3 fc       	sbrc	r15, 3
    2282:	15 91       	lpm	r17, Z+
    2284:	f3 fe       	sbrs	r15, 3
    2286:	11 91       	ld	r17, Z+
    2288:	6f 01       	movw	r12, r30
    228a:	11 23       	and	r17, r17
    228c:	09 f4       	brne	.+2      	; 0x2290 <vfscanf+0xf2>
    228e:	98 c0       	rjmp	.+304    	; 0x23c0 <vfscanf+0x222>
    2290:	86 e4       	ldi	r24, 0x46	; 70
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	61 2f       	mov	r22, r17
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <strchr_P>
    229c:	89 2b       	or	r24, r25
    229e:	09 f4       	brne	.+2      	; 0x22a2 <vfscanf+0x104>
    22a0:	8f c0       	rjmp	.+286    	; 0x23c0 <vfscanf+0x222>
    22a2:	80 2f       	mov	r24, r16
    22a4:	00 ff       	sbrs	r16, 0
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <vfscanf+0x110>
    22a8:	ee 24       	eor	r14, r14
    22aa:	ff 24       	eor	r15, r15
    22ac:	07 c0       	rjmp	.+14     	; 0x22bc <vfscanf+0x11e>
    22ae:	f3 01       	movw	r30, r6
    22b0:	e0 80       	ld	r14, Z
    22b2:	f1 80       	ldd	r15, Z+1	; 0x01
    22b4:	22 e0       	ldi	r18, 0x02	; 2
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	62 0e       	add	r6, r18
    22ba:	73 1e       	adc	r7, r19
    22bc:	1e 36       	cpi	r17, 0x6E	; 110
    22be:	51 f4       	brne	.+20     	; 0x22d4 <vfscanf+0x136>
    22c0:	f5 01       	movw	r30, r10
    22c2:	46 81       	ldd	r20, Z+6	; 0x06
    22c4:	57 81       	ldd	r21, Z+7	; 0x07
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	c7 01       	movw	r24, r14
    22cc:	20 2f       	mov	r18, r16
    22ce:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <putval>
    22d2:	65 c0       	rjmp	.+202    	; 0x239e <vfscanf+0x200>
    22d4:	13 36       	cpi	r17, 0x63	; 99
    22d6:	91 f4       	brne	.+36     	; 0x22fc <vfscanf+0x15e>
    22d8:	81 fd       	sbrc	r24, 1
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <vfscanf+0x142>
    22dc:	99 24       	eor	r9, r9
    22de:	93 94       	inc	r9
    22e0:	c5 01       	movw	r24, r10
    22e2:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    22e6:	97 fd       	sbrc	r25, 7
    22e8:	66 c0       	rjmp	.+204    	; 0x23b6 <vfscanf+0x218>
    22ea:	e1 14       	cp	r14, r1
    22ec:	f1 04       	cpc	r15, r1
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <vfscanf+0x158>
    22f0:	f7 01       	movw	r30, r14
    22f2:	81 93       	st	Z+, r24
    22f4:	7f 01       	movw	r14, r30
    22f6:	9a 94       	dec	r9
    22f8:	99 f7       	brne	.-26     	; 0x22e0 <vfscanf+0x142>
    22fa:	4f c0       	rjmp	.+158    	; 0x239a <vfscanf+0x1fc>
    22fc:	1b 35       	cpi	r17, 0x5B	; 91
    22fe:	59 f4       	brne	.+22     	; 0x2316 <vfscanf+0x178>
    2300:	c5 01       	movw	r24, r10
    2302:	69 2d       	mov	r22, r9
    2304:	a7 01       	movw	r20, r14
    2306:	96 01       	movw	r18, r12
    2308:	0e 94 05 10 	call	0x200a	; 0x200a <conv_brk>
    230c:	6c 01       	movw	r12, r24
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	09 f0       	breq	.+2      	; 0x2314 <vfscanf+0x176>
    2312:	43 c0       	rjmp	.+134    	; 0x239a <vfscanf+0x1fc>
    2314:	3d c0       	rjmp	.+122    	; 0x2390 <vfscanf+0x1f2>
    2316:	c5 01       	movw	r24, r10
    2318:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <skip_spaces>
    231c:	97 fd       	sbrc	r25, 7
    231e:	4b c0       	rjmp	.+150    	; 0x23b6 <vfscanf+0x218>
    2320:	1f 36       	cpi	r17, 0x6F	; 111
    2322:	59 f1       	breq	.+86     	; 0x237a <vfscanf+0x1dc>
    2324:	10 37       	cpi	r17, 0x70	; 112
    2326:	28 f4       	brcc	.+10     	; 0x2332 <vfscanf+0x194>
    2328:	14 36       	cpi	r17, 0x64	; 100
    232a:	29 f1       	breq	.+74     	; 0x2376 <vfscanf+0x1d8>
    232c:	19 36       	cpi	r17, 0x69	; 105
    232e:	39 f5       	brne	.+78     	; 0x237e <vfscanf+0x1e0>
    2330:	27 c0       	rjmp	.+78     	; 0x2380 <vfscanf+0x1e2>
    2332:	13 37       	cpi	r17, 0x73	; 115
    2334:	19 f0       	breq	.+6      	; 0x233c <vfscanf+0x19e>
    2336:	15 37       	cpi	r17, 0x75	; 117
    2338:	11 f5       	brne	.+68     	; 0x237e <vfscanf+0x1e0>
    233a:	1d c0       	rjmp	.+58     	; 0x2376 <vfscanf+0x1d8>
    233c:	c5 01       	movw	r24, r10
    233e:	0e 94 1b 12 	call	0x2436	; 0x2436 <fgetc>
    2342:	ec 01       	movw	r28, r24
    2344:	97 fd       	sbrc	r25, 7
    2346:	11 c0       	rjmp	.+34     	; 0x236a <vfscanf+0x1cc>
    2348:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <isspace>
    234c:	89 2b       	or	r24, r25
    234e:	29 f0       	breq	.+10     	; 0x235a <vfscanf+0x1bc>
    2350:	ce 01       	movw	r24, r28
    2352:	b5 01       	movw	r22, r10
    2354:	0e 94 5d 12 	call	0x24ba	; 0x24ba <ungetc>
    2358:	08 c0       	rjmp	.+16     	; 0x236a <vfscanf+0x1cc>
    235a:	e1 14       	cp	r14, r1
    235c:	f1 04       	cpc	r15, r1
    235e:	19 f0       	breq	.+6      	; 0x2366 <vfscanf+0x1c8>
    2360:	f7 01       	movw	r30, r14
    2362:	c1 93       	st	Z+, r28
    2364:	7f 01       	movw	r14, r30
    2366:	9a 94       	dec	r9
    2368:	49 f7       	brne	.-46     	; 0x233c <vfscanf+0x19e>
    236a:	e1 14       	cp	r14, r1
    236c:	f1 04       	cpc	r15, r1
    236e:	a9 f0       	breq	.+42     	; 0x239a <vfscanf+0x1fc>
    2370:	f7 01       	movw	r30, r14
    2372:	10 82       	st	Z, r1
    2374:	12 c0       	rjmp	.+36     	; 0x239a <vfscanf+0x1fc>
    2376:	00 62       	ori	r16, 0x20	; 32
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <vfscanf+0x1e2>
    237a:	00 61       	ori	r16, 0x10	; 16
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <vfscanf+0x1e2>
    237e:	00 64       	ori	r16, 0x40	; 64
    2380:	c5 01       	movw	r24, r10
    2382:	69 2d       	mov	r22, r9
    2384:	a7 01       	movw	r20, r14
    2386:	20 2f       	mov	r18, r16
    2388:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <conv_int>
    238c:	88 23       	and	r24, r24
    238e:	29 f4       	brne	.+10     	; 0x239a <vfscanf+0x1fc>
    2390:	f5 01       	movw	r30, r10
    2392:	83 81       	ldd	r24, Z+3	; 0x03
    2394:	80 73       	andi	r24, 0x30	; 48
    2396:	79 f4       	brne	.+30     	; 0x23b6 <vfscanf+0x218>
    2398:	13 c0       	rjmp	.+38     	; 0x23c0 <vfscanf+0x222>
    239a:	00 ff       	sbrs	r16, 0
    239c:	83 94       	inc	r8
    239e:	f5 01       	movw	r30, r10
    23a0:	f3 80       	ldd	r15, Z+3	; 0x03
    23a2:	f6 01       	movw	r30, r12
    23a4:	f3 fc       	sbrc	r15, 3
    23a6:	15 91       	lpm	r17, Z+
    23a8:	f3 fe       	sbrs	r15, 3
    23aa:	11 91       	ld	r17, Z+
    23ac:	6f 01       	movw	r12, r30
    23ae:	11 23       	and	r17, r17
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <vfscanf+0x216>
    23b2:	0b cf       	rjmp	.-490    	; 0x21ca <vfscanf+0x2c>
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <vfscanf+0x222>
    23b6:	88 20       	and	r8, r8
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <vfscanf+0x222>
    23ba:	2f ef       	ldi	r18, 0xFF	; 255
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <vfscanf+0x226>
    23c0:	28 2d       	mov	r18, r8
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	c9 01       	movw	r24, r18
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	bf 90       	pop	r11
    23d8:	af 90       	pop	r10
    23da:	9f 90       	pop	r9
    23dc:	8f 90       	pop	r8
    23de:	7f 90       	pop	r7
    23e0:	6f 90       	pop	r6
    23e2:	08 95       	ret

000023e4 <isspace>:
    23e4:	91 11       	cpse	r25, r1
    23e6:	e1 c0       	rjmp	.+450    	; 0x25aa <__ctype_isfalse>
    23e8:	80 32       	cpi	r24, 0x20	; 32
    23ea:	19 f0       	breq	.+6      	; 0x23f2 <isspace+0xe>
    23ec:	89 50       	subi	r24, 0x09	; 9
    23ee:	85 50       	subi	r24, 0x05	; 5
    23f0:	d0 f7       	brcc	.-12     	; 0x23e6 <isspace+0x2>
    23f2:	08 95       	ret

000023f4 <strchr_P>:
    23f4:	fc 01       	movw	r30, r24
    23f6:	05 90       	lpm	r0, Z+
    23f8:	06 16       	cp	r0, r22
    23fa:	21 f0       	breq	.+8      	; 0x2404 <strchr_P+0x10>
    23fc:	00 20       	and	r0, r0
    23fe:	d9 f7       	brne	.-10     	; 0x23f6 <strchr_P+0x2>
    2400:	c0 01       	movw	r24, r0
    2402:	08 95       	ret
    2404:	31 97       	sbiw	r30, 0x01	; 1
    2406:	cf 01       	movw	r24, r30
    2408:	08 95       	ret

0000240a <strnlen_P>:
    240a:	fc 01       	movw	r30, r24
    240c:	05 90       	lpm	r0, Z+
    240e:	61 50       	subi	r22, 0x01	; 1
    2410:	70 40       	sbci	r23, 0x00	; 0
    2412:	01 10       	cpse	r0, r1
    2414:	d8 f7       	brcc	.-10     	; 0x240c <strnlen_P+0x2>
    2416:	80 95       	com	r24
    2418:	90 95       	com	r25
    241a:	8e 0f       	add	r24, r30
    241c:	9f 1f       	adc	r25, r31
    241e:	08 95       	ret

00002420 <strnlen>:
    2420:	fc 01       	movw	r30, r24
    2422:	61 50       	subi	r22, 0x01	; 1
    2424:	70 40       	sbci	r23, 0x00	; 0
    2426:	01 90       	ld	r0, Z+
    2428:	01 10       	cpse	r0, r1
    242a:	d8 f7       	brcc	.-10     	; 0x2422 <strnlen+0x2>
    242c:	80 95       	com	r24
    242e:	90 95       	com	r25
    2430:	8e 0f       	add	r24, r30
    2432:	9f 1f       	adc	r25, r31
    2434:	08 95       	ret

00002436 <fgetc>:
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
    243c:	4b 81       	ldd	r20, Y+3	; 0x03
    243e:	40 ff       	sbrs	r20, 0
    2440:	1a c0       	rjmp	.+52     	; 0x2476 <fgetc+0x40>
    2442:	46 ff       	sbrs	r20, 6
    2444:	0a c0       	rjmp	.+20     	; 0x245a <fgetc+0x24>
    2446:	4f 7b       	andi	r20, 0xBF	; 191
    2448:	4b 83       	std	Y+3, r20	; 0x03
    244a:	8e 81       	ldd	r24, Y+6	; 0x06
    244c:	9f 81       	ldd	r25, Y+7	; 0x07
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	9f 83       	std	Y+7, r25	; 0x07
    2452:	8e 83       	std	Y+6, r24	; 0x06
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	28 2f       	mov	r18, r24
    2458:	2b c0       	rjmp	.+86     	; 0x24b0 <fgetc+0x7a>
    245a:	42 ff       	sbrs	r20, 2
    245c:	13 c0       	rjmp	.+38     	; 0x2484 <fgetc+0x4e>
    245e:	e8 81       	ld	r30, Y
    2460:	f9 81       	ldd	r31, Y+1	; 0x01
    2462:	80 81       	ld	r24, Z
    2464:	28 2f       	mov	r18, r24
    2466:	33 27       	eor	r19, r19
    2468:	27 fd       	sbrc	r18, 7
    246a:	30 95       	com	r19
    246c:	21 15       	cp	r18, r1
    246e:	31 05       	cpc	r19, r1
    2470:	29 f4       	brne	.+10     	; 0x247c <fgetc+0x46>
    2472:	40 62       	ori	r20, 0x20	; 32
    2474:	4b 83       	std	Y+3, r20	; 0x03
    2476:	2f ef       	ldi	r18, 0xFF	; 255
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	1b c0       	rjmp	.+54     	; 0x24b2 <fgetc+0x7c>
    247c:	31 96       	adiw	r30, 0x01	; 1
    247e:	f9 83       	std	Y+1, r31	; 0x01
    2480:	e8 83       	st	Y, r30
    2482:	11 c0       	rjmp	.+34     	; 0x24a6 <fgetc+0x70>
    2484:	ea 85       	ldd	r30, Y+10	; 0x0a
    2486:	fb 85       	ldd	r31, Y+11	; 0x0b
    2488:	ce 01       	movw	r24, r28
    248a:	09 95       	icall
    248c:	9c 01       	movw	r18, r24
    248e:	97 ff       	sbrs	r25, 7
    2490:	0a c0       	rjmp	.+20     	; 0x24a6 <fgetc+0x70>
    2492:	9b 81       	ldd	r25, Y+3	; 0x03
    2494:	2f 5f       	subi	r18, 0xFF	; 255
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	11 f0       	breq	.+4      	; 0x249e <fgetc+0x68>
    249a:	80 e2       	ldi	r24, 0x20	; 32
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <fgetc+0x6a>
    249e:	80 e1       	ldi	r24, 0x10	; 16
    24a0:	89 2b       	or	r24, r25
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	e8 cf       	rjmp	.-48     	; 0x2476 <fgetc+0x40>
    24a6:	8e 81       	ldd	r24, Y+6	; 0x06
    24a8:	9f 81       	ldd	r25, Y+7	; 0x07
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	9f 83       	std	Y+7, r25	; 0x07
    24ae:	8e 83       	std	Y+6, r24	; 0x06
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	c9 01       	movw	r24, r18
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	08 95       	ret

000024ba <ungetc>:
    24ba:	9c 01       	movw	r18, r24
    24bc:	fb 01       	movw	r30, r22
    24be:	83 81       	ldd	r24, Z+3	; 0x03
    24c0:	80 ff       	sbrs	r24, 0
    24c2:	11 c0       	rjmp	.+34     	; 0x24e6 <ungetc+0x2c>
    24c4:	86 fd       	sbrc	r24, 6
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <ungetc+0x2c>
    24c8:	9f ef       	ldi	r25, 0xFF	; 255
    24ca:	2f 3f       	cpi	r18, 0xFF	; 255
    24cc:	39 07       	cpc	r19, r25
    24ce:	59 f0       	breq	.+22     	; 0x24e6 <ungetc+0x2c>
    24d0:	22 83       	std	Z+2, r18	; 0x02
    24d2:	80 64       	ori	r24, 0x40	; 64
    24d4:	8f 7d       	andi	r24, 0xDF	; 223
    24d6:	83 83       	std	Z+3, r24	; 0x03
    24d8:	86 81       	ldd	r24, Z+6	; 0x06
    24da:	97 81       	ldd	r25, Z+7	; 0x07
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	97 83       	std	Z+7, r25	; 0x07
    24e0:	86 83       	std	Z+6, r24	; 0x06
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <ungetc+0x30>
    24e6:	2f ef       	ldi	r18, 0xFF	; 255
    24e8:	3f ef       	ldi	r19, 0xFF	; 255
    24ea:	c9 01       	movw	r24, r18
    24ec:	08 95       	ret

000024ee <__ultoa_invert>:
    24ee:	fa 01       	movw	r30, r20
    24f0:	aa 27       	eor	r26, r26
    24f2:	28 30       	cpi	r18, 0x08	; 8
    24f4:	51 f1       	breq	.+84     	; 0x254a <__ultoa_invert+0x5c>
    24f6:	20 31       	cpi	r18, 0x10	; 16
    24f8:	81 f1       	breq	.+96     	; 0x255a <__ultoa_invert+0x6c>
    24fa:	e8 94       	clt
    24fc:	6f 93       	push	r22
    24fe:	6e 7f       	andi	r22, 0xFE	; 254
    2500:	6e 5f       	subi	r22, 0xFE	; 254
    2502:	7f 4f       	sbci	r23, 0xFF	; 255
    2504:	8f 4f       	sbci	r24, 0xFF	; 255
    2506:	9f 4f       	sbci	r25, 0xFF	; 255
    2508:	af 4f       	sbci	r26, 0xFF	; 255
    250a:	b1 e0       	ldi	r27, 0x01	; 1
    250c:	3e d0       	rcall	.+124    	; 0x258a <__ultoa_invert+0x9c>
    250e:	b4 e0       	ldi	r27, 0x04	; 4
    2510:	3c d0       	rcall	.+120    	; 0x258a <__ultoa_invert+0x9c>
    2512:	67 0f       	add	r22, r23
    2514:	78 1f       	adc	r23, r24
    2516:	89 1f       	adc	r24, r25
    2518:	9a 1f       	adc	r25, r26
    251a:	a1 1d       	adc	r26, r1
    251c:	68 0f       	add	r22, r24
    251e:	79 1f       	adc	r23, r25
    2520:	8a 1f       	adc	r24, r26
    2522:	91 1d       	adc	r25, r1
    2524:	a1 1d       	adc	r26, r1
    2526:	6a 0f       	add	r22, r26
    2528:	71 1d       	adc	r23, r1
    252a:	81 1d       	adc	r24, r1
    252c:	91 1d       	adc	r25, r1
    252e:	a1 1d       	adc	r26, r1
    2530:	20 d0       	rcall	.+64     	; 0x2572 <__ultoa_invert+0x84>
    2532:	09 f4       	brne	.+2      	; 0x2536 <__ultoa_invert+0x48>
    2534:	68 94       	set
    2536:	3f 91       	pop	r19
    2538:	2a e0       	ldi	r18, 0x0A	; 10
    253a:	26 9f       	mul	r18, r22
    253c:	11 24       	eor	r1, r1
    253e:	30 19       	sub	r19, r0
    2540:	30 5d       	subi	r19, 0xD0	; 208
    2542:	31 93       	st	Z+, r19
    2544:	de f6       	brtc	.-74     	; 0x24fc <__ultoa_invert+0xe>
    2546:	cf 01       	movw	r24, r30
    2548:	08 95       	ret
    254a:	46 2f       	mov	r20, r22
    254c:	47 70       	andi	r20, 0x07	; 7
    254e:	40 5d       	subi	r20, 0xD0	; 208
    2550:	41 93       	st	Z+, r20
    2552:	b3 e0       	ldi	r27, 0x03	; 3
    2554:	0f d0       	rcall	.+30     	; 0x2574 <__ultoa_invert+0x86>
    2556:	c9 f7       	brne	.-14     	; 0x254a <__ultoa_invert+0x5c>
    2558:	f6 cf       	rjmp	.-20     	; 0x2546 <__ultoa_invert+0x58>
    255a:	46 2f       	mov	r20, r22
    255c:	4f 70       	andi	r20, 0x0F	; 15
    255e:	40 5d       	subi	r20, 0xD0	; 208
    2560:	4a 33       	cpi	r20, 0x3A	; 58
    2562:	18 f0       	brcs	.+6      	; 0x256a <__ultoa_invert+0x7c>
    2564:	49 5d       	subi	r20, 0xD9	; 217
    2566:	31 fd       	sbrc	r19, 1
    2568:	40 52       	subi	r20, 0x20	; 32
    256a:	41 93       	st	Z+, r20
    256c:	02 d0       	rcall	.+4      	; 0x2572 <__ultoa_invert+0x84>
    256e:	a9 f7       	brne	.-22     	; 0x255a <__ultoa_invert+0x6c>
    2570:	ea cf       	rjmp	.-44     	; 0x2546 <__ultoa_invert+0x58>
    2572:	b4 e0       	ldi	r27, 0x04	; 4
    2574:	a6 95       	lsr	r26
    2576:	97 95       	ror	r25
    2578:	87 95       	ror	r24
    257a:	77 95       	ror	r23
    257c:	67 95       	ror	r22
    257e:	ba 95       	dec	r27
    2580:	c9 f7       	brne	.-14     	; 0x2574 <__ultoa_invert+0x86>
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	61 05       	cpc	r22, r1
    2586:	71 05       	cpc	r23, r1
    2588:	08 95       	ret
    258a:	9b 01       	movw	r18, r22
    258c:	ac 01       	movw	r20, r24
    258e:	0a 2e       	mov	r0, r26
    2590:	06 94       	lsr	r0
    2592:	57 95       	ror	r21
    2594:	47 95       	ror	r20
    2596:	37 95       	ror	r19
    2598:	27 95       	ror	r18
    259a:	ba 95       	dec	r27
    259c:	c9 f7       	brne	.-14     	; 0x2590 <__ultoa_invert+0xa2>
    259e:	62 0f       	add	r22, r18
    25a0:	73 1f       	adc	r23, r19
    25a2:	84 1f       	adc	r24, r20
    25a4:	95 1f       	adc	r25, r21
    25a6:	a0 1d       	adc	r26, r0
    25a8:	08 95       	ret

000025aa <__ctype_isfalse>:
    25aa:	99 27       	eor	r25, r25
    25ac:	88 27       	eor	r24, r24

000025ae <__ctype_istrue>:
    25ae:	08 95       	ret

000025b0 <_exit>:
    25b0:	f8 94       	cli

000025b2 <__stop_program>:
    25b2:	ff cf       	rjmp	.-2      	; 0x25b2 <__stop_program>
