
lab4_c_f.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  0000313a  000031ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000313a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ae  008001b2  008001b2  00003280  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000478  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000149b  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e0  00000000  00000000  00004bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000115b  00000000  00000000  000050b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  00006210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059e  00000000  00000000  00006510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ca8  00000000  00000000  00006aae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 01 	jmp	0x296	; 0x296 <__ctors_end>
       4:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_1>
       8:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
       c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      10:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      18:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      1c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      20:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      24:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      28:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      2c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__vector_11>
      30:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      34:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_13>
      38:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      3c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      40:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      44:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      48:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      4c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      50:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_20>
      54:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_21>
      58:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      5c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      60:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      64:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      68:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      6c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      70:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      74:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      78:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      7c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      80:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      84:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>
      88:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__bad_interrupt>

0000008c <__c.1790>:
      8c:	6e 61 6e 00                                         nan.

00000090 <__c.1788>:
      90:	69 6e 66 00                                         inf.

00000094 <__c.2085>:
      94:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
      a4:	47 00                                               G.

000000a6 <pstr_an>:
      a6:	61 6e 00                                            an.

000000a9 <pstr_nfinity>:
      a9:	6e 66 69 6e 69 74 79 00                             nfinity.

000000b1 <pwr_m10>:
      b1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      c1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000c9 <pwr_p10>:
      c9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      d9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000e1 <LCD_initialize>:
      e1:	4c 43 44 20 49 6e 69 74 69 61 6c 69 20 20 20 20     LCD Initiali    
	...

000000f3 <LCD_burst_freq>:
      f3:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

00000105 <LCD_interval>:
     105:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

00000117 <LCD_num_syllable>:
     117:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

00000128 <LCD_dur_syllable>:
     128:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

00000139 <LCD_rpt_interval>:
     139:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

00000149 <LCD_playing>:
     149:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000158 <LCD_cap_clear>:
     158:	20 00 00                                             ..

0000015b <LcdCustomChar>:
     15b:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     16b:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     17b:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     18b:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................
     19b:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     1ab:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     1bb:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     1cb:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     1db:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     1eb:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     1fb:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     20b:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     21b:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     22b:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     23b:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     24b:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     25b:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     26b:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     27b:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     28b:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

00000296 <__ctors_end>:
     296:	11 24       	eor	r1, r1
     298:	1f be       	out	0x3f, r1	; 63
     29a:	cf ef       	ldi	r28, 0xFF	; 255
     29c:	d0 e4       	ldi	r29, 0x40	; 64
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	cd bf       	out	0x3d, r28	; 61

000002a2 <__do_copy_data>:
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b1 e0       	ldi	r27, 0x01	; 1
     2a8:	ea e3       	ldi	r30, 0x3A	; 58
     2aa:	f1 e3       	ldi	r31, 0x31	; 49
     2ac:	00 e0       	ldi	r16, 0x00	; 0
     2ae:	0b bf       	out	0x3b, r16	; 59
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x14>
     2b2:	07 90       	elpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a2 3b       	cpi	r26, 0xB2	; 178
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0x10>

000002bc <__do_clear_bss>:
     2bc:	13 e0       	ldi	r17, 0x03	; 3
     2be:	a2 eb       	ldi	r26, 0xB2	; 178
     2c0:	b1 e0       	ldi	r27, 0x01	; 1
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <.do_clear_bss_start>

000002c4 <.do_clear_bss_loop>:
     2c4:	1d 92       	st	X+, r1

000002c6 <.do_clear_bss_start>:
     2c6:	a0 36       	cpi	r26, 0x60	; 96
     2c8:	b1 07       	cpc	r27, r17
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <.do_clear_bss_loop>
     2cc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <main>
     2d0:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <exit>

000002d4 <__bad_interrupt>:
     2d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d8 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	0b b6       	in	r0, 0x3b	; 59
     2e2:	0f 92       	push	r0
     2e4:	11 24       	eor	r1, r1
     2e6:	2f 92       	push	r2
     2e8:	3f 92       	push	r3
     2ea:	4f 92       	push	r4
     2ec:	5f 92       	push	r5
     2ee:	6f 92       	push	r6
     2f0:	7f 92       	push	r7
     2f2:	8f 92       	push	r8
     2f4:	9f 92       	push	r9
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     322:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     326:	50 90 10 03 	lds	r5, 0x0310
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     32a:	b0 9b       	sbis	0x16, 0	; 22
     32c:	14 c0       	rjmp	.+40     	; 0x356 <__vector_13+0x7e>
    ++kernel.cycles;
     32e:	80 91 51 03 	lds	r24, 0x0351
     332:	90 91 52 03 	lds	r25, 0x0352
     336:	a0 91 53 03 	lds	r26, 0x0353
     33a:	b0 91 54 03 	lds	r27, 0x0354
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	a1 1d       	adc	r26, r1
     342:	b1 1d       	adc	r27, r1
     344:	80 93 51 03 	sts	0x0351, r24
     348:	90 93 52 03 	sts	0x0352, r25
     34c:	a0 93 53 03 	sts	0x0353, r26
     350:	b0 93 54 03 	sts	0x0354, r27
    TIFR1 |= (1<<TOV1) ;
     354:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     356:	80 91 84 00 	lds	r24, 0x0084
     35a:	90 91 85 00 	lds	r25, 0x0085
     35e:	3c 01       	movw	r6, r24
     360:	88 24       	eor	r8, r8
     362:	99 24       	eor	r9, r9
     364:	80 91 51 03 	lds	r24, 0x0351
     368:	90 91 52 03 	lds	r25, 0x0352
     36c:	a0 91 53 03 	lds	r26, 0x0353
     370:	b0 91 54 03 	lds	r27, 0x0354
     374:	dc 01       	movw	r26, r24
     376:	99 27       	eor	r25, r25
     378:	88 27       	eor	r24, r24
     37a:	68 0e       	add	r6, r24
     37c:	79 1e       	adc	r7, r25
     37e:	8a 1e       	adc	r8, r26
     380:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     382:	40 90 0f 03 	lds	r4, 0x030F
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	ff ef       	ldi	r31, 0xFF	; 255
     38c:	af 2e       	mov	r10, r31
     38e:	ff ef       	ldi	r31, 0xFF	; 255
     390:	bf 2e       	mov	r11, r31
     392:	ff ef       	ldi	r31, 0xFF	; 255
     394:	cf 2e       	mov	r12, r31
     396:	ff e7       	ldi	r31, 0x7F	; 127
     398:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     39a:	eb e0       	ldi	r30, 0x0B	; 11
     39c:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     39e:	33 24       	eor	r3, r3
     3a0:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     3a2:	cb e0       	ldi	r28, 0x0B	; 11
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
     3a6:	43 c0       	rjmp	.+134    	; 0x42e <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     3a8:	62 9d       	mul	r22, r2
     3aa:	d0 01       	movw	r26, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	af 5e       	subi	r26, 0xEF	; 239
     3b0:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == TIMEQ) {
     3b2:	1a 96       	adiw	r26, 0x0a	; 10
     3b4:	8c 91       	ld	r24, X
     3b6:	1a 97       	sbiw	r26, 0x0a	; 10
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	a1 f4       	brne	.+40     	; 0x3e4 <__vector_13+0x10c>
      if (t->release <= now) {
     3bc:	12 96       	adiw	r26, 0x02	; 2
     3be:	ed 90       	ld	r14, X+
     3c0:	fd 90       	ld	r15, X+
     3c2:	0d 91       	ld	r16, X+
     3c4:	1c 91       	ld	r17, X
     3c6:	15 97       	sbiw	r26, 0x05	; 5
     3c8:	6e 14       	cp	r6, r14
     3ca:	7f 04       	cpc	r7, r15
     3cc:	80 06       	cpc	r8, r16
     3ce:	91 06       	cpc	r9, r17
     3d0:	20 f0       	brcs	.+8      	; 0x3da <__vector_13+0x102>
	t->state = READYQ;
     3d2:	1a 96       	adiw	r26, 0x0a	; 10
     3d4:	3c 92       	st	X, r3
     3d6:	1a 97       	sbiw	r26, 0x0a	; 10
     3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     3da:	ea 14       	cp	r14, r10
     3dc:	fb 04       	cpc	r15, r11
     3de:	0c 05       	cpc	r16, r12
     3e0:	1d 05       	cpc	r17, r13
     3e2:	10 f0       	brcs	.+4      	; 0x3e8 <__vector_13+0x110>
     3e4:	86 01       	movw	r16, r12
     3e6:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     3e8:	1a 96       	adiw	r26, 0x0a	; 10
     3ea:	8c 91       	ld	r24, X
     3ec:	1a 97       	sbiw	r26, 0x0a	; 10
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	d9 f4       	brne	.+54     	; 0x428 <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     3f2:	87 2f       	mov	r24, r23
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	8c 9f       	mul	r24, r28
     3f8:	f0 01       	movw	r30, r0
     3fa:	8d 9f       	mul	r24, r29
     3fc:	f0 0d       	add	r31, r0
     3fe:	9c 9f       	mul	r25, r28
     400:	f0 0d       	add	r31, r0
     402:	11 24       	eor	r1, r1
     404:	e1 5f       	subi	r30, 0xF1	; 241
     406:	fc 4f       	sbci	r31, 0xFC	; 252
     408:	16 96       	adiw	r26, 0x06	; 6
     40a:	2d 91       	ld	r18, X+
     40c:	3d 91       	ld	r19, X+
     40e:	4d 91       	ld	r20, X+
     410:	5c 91       	ld	r21, X
     412:	19 97       	sbiw	r26, 0x09	; 9
     414:	80 85       	ldd	r24, Z+8	; 0x08
     416:	91 85       	ldd	r25, Z+9	; 0x09
     418:	a2 85       	ldd	r26, Z+10	; 0x0a
     41a:	b3 85       	ldd	r27, Z+11	; 0x0b
     41c:	28 17       	cp	r18, r24
     41e:	39 07       	cpc	r19, r25
     420:	4a 07       	cpc	r20, r26
     422:	5b 07       	cpc	r21, r27
     424:	08 f4       	brcc	.+2      	; 0x428 <__vector_13+0x150>
     426:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	57 01       	movw	r10, r14
     42c:	68 01       	movw	r12, r16
     42e:	46 16       	cp	r4, r22
     430:	08 f0       	brcs	.+2      	; 0x434 <__vector_13+0x15c>
     432:	ba cf       	rjmp	.-140    	; 0x3a8 <__vector_13+0xd0>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     434:	75 15       	cp	r23, r5
     436:	b1 f0       	breq	.+44     	; 0x464 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     438:	eb e0       	ldi	r30, 0x0B	; 11
     43a:	5e 9e       	mul	r5, r30
     43c:	d0 01       	movw	r26, r0
     43e:	11 24       	eor	r1, r1
     440:	af 5e       	subi	r26, 0xEF	; 239
     442:	bc 4f       	sbci	r27, 0xFC	; 252
    t->spl = SPL;
     444:	8d b7       	in	r24, 0x3d	; 61
     446:	8c 93       	st	X, r24
    t->sph = SPH;
     448:	8e b7       	in	r24, 0x3e	; 62
     44a:	11 96       	adiw	r26, 0x01	; 1
     44c:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     44e:	7e 9f       	mul	r23, r30
     450:	f0 01       	movw	r30, r0
     452:	11 24       	eor	r1, r1
     454:	ef 5e       	subi	r30, 0xEF	; 239
     456:	fc 4f       	sbci	r31, 0xFC	; 252
    SPH = t->sph;
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     45c:	80 81       	ld	r24, Z
     45e:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     460:	70 93 10 03 	sts	0x0310, r23

  }

  kernel.nextHit = nextHit;  
     464:	a0 92 55 03 	sts	0x0355, r10
     468:	b0 92 56 03 	sts	0x0356, r11
     46c:	c0 92 57 03 	sts	0x0357, r12
     470:	d0 92 58 03 	sts	0x0358, r13

  now = (kernel.cycles << 16) + TCNT1;
     474:	20 91 84 00 	lds	r18, 0x0084
     478:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	80 91 51 03 	lds	r24, 0x0351
     484:	90 91 52 03 	lds	r25, 0x0352
     488:	a0 91 53 03 	lds	r26, 0x0353
     48c:	b0 91 54 03 	lds	r27, 0x0354
     490:	dc 01       	movw	r26, r24
     492:	99 27       	eor	r25, r25
     494:	88 27       	eor	r24, r24
     496:	28 0f       	add	r18, r24
     498:	39 1f       	adc	r19, r25
     49a:	4a 1f       	adc	r20, r26
     49c:	5b 1f       	adc	r21, r27
     49e:	d6 01       	movw	r26, r12
     4a0:	c5 01       	movw	r24, r10
     4a2:	82 1b       	sub	r24, r18
     4a4:	93 0b       	sbc	r25, r19
     4a6:	a4 0b       	sbc	r26, r20
     4a8:	b5 0b       	sbc	r27, r21
     4aa:	9c 01       	movw	r18, r24
     4ac:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     4ae:	84 30       	cpi	r24, 0x04	; 4
     4b0:	91 05       	cpc	r25, r1
     4b2:	a1 05       	cpc	r26, r1
     4b4:	b1 05       	cpc	r27, r1
     4b6:	24 f4       	brge	.+8      	; 0x4c0 <__vector_13+0x1e8>
     4b8:	24 e0       	ldi	r18, 0x04	; 4
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     4c0:	80 91 84 00 	lds	r24, 0x0084
     4c4:	90 91 85 00 	lds	r25, 0x0085
     4c8:	a0 e0       	ldi	r26, 0x00	; 0
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
     4cc:	82 0f       	add	r24, r18
     4ce:	93 1f       	adc	r25, r19
     4d0:	a4 1f       	adc	r26, r20
     4d2:	b5 1f       	adc	r27, r21
     4d4:	80 50       	subi	r24, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	a1 40       	sbci	r26, 0x01	; 1
     4da:	b0 40       	sbci	r27, 0x00	; 0
     4dc:	38 f4       	brcc	.+14     	; 0x4ec <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     4de:	80 91 84 00 	lds	r24, 0x0084
     4e2:	90 91 85 00 	lds	r25, 0x0085
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	0e c0       	rjmp	.+28     	; 0x508 <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     4ec:	80 91 84 00 	lds	r24, 0x0084
     4f0:	90 91 85 00 	lds	r25, 0x0085
     4f4:	8c 5f       	subi	r24, 0xFC	; 252
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
     4f8:	28 f4       	brcc	.+10     	; 0x504 <__vector_13+0x22c>
    OCR1A = 0x0000;
     4fa:	10 92 89 00 	sts	0x0089, r1
     4fe:	10 92 88 00 	sts	0x0088, r1
     502:	06 c0       	rjmp	.+12     	; 0x510 <__vector_13+0x238>
  } else {
    OCR1A = 4;
     504:	84 e0       	ldi	r24, 0x04	; 4
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	90 93 89 00 	sts	0x0089, r25
     50c:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	80 93 6f 00 	sts	0x006F, r24
}
     516:	ff 91       	pop	r31
     518:	ef 91       	pop	r30
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	bf 91       	pop	r27
     520:	af 91       	pop	r26
     522:	9f 91       	pop	r25
     524:	8f 91       	pop	r24
     526:	7f 91       	pop	r23
     528:	6f 91       	pop	r22
     52a:	5f 91       	pop	r21
     52c:	4f 91       	pop	r20
     52e:	3f 91       	pop	r19
     530:	2f 91       	pop	r18
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	bf 90       	pop	r11
     540:	af 90       	pop	r10
     542:	9f 90       	pop	r9
     544:	8f 90       	pop	r8
     546:	7f 90       	pop	r7
     548:	6f 90       	pop	r6
     54a:	5f 90       	pop	r5
     54c:	4f 90       	pop	r4
     54e:	3f 90       	pop	r3
     550:	2f 90       	pop	r2
     552:	0f 90       	pop	r0
     554:	0b be       	out	0x3b, r0	; 59
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     560:	10 92 85 00 	sts	0x0085, r1
     564:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     568:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     56c:	25 e0       	ldi	r18, 0x05	; 5
     56e:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     572:	22 e0       	ldi	r18, 0x02	; 2
     574:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     578:	2f ef       	ldi	r18, 0xFF	; 255
     57a:	30 e4       	ldi	r19, 0x40	; 64
     57c:	28 1b       	sub	r18, r24
     57e:	39 0b       	sbc	r19, r25
     580:	30 93 50 03 	sts	0x0350, r19
     584:	20 93 4f 03 	sts	0x034F, r18
  kernel.nbrOfTasks = 0;
     588:	10 92 0f 03 	sts	0x030F, r1
  kernel.running = 0;
     58c:	10 92 10 03 	sts	0x0310, r1

  kernel.cycles = 0x0000;
     590:	10 92 51 03 	sts	0x0351, r1
     594:	10 92 52 03 	sts	0x0352, r1
     598:	10 92 53 03 	sts	0x0353, r1
     59c:	10 92 54 03 	sts	0x0354, r1
  kernel.nextHit = 0x7FFFFFFF;
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	9f ef       	ldi	r25, 0xFF	; 255
     5a4:	af ef       	ldi	r26, 0xFF	; 255
     5a6:	bf e7       	ldi	r27, 0x7F	; 127
     5a8:	80 93 55 03 	sts	0x0355, r24
     5ac:	90 93 56 03 	sts	0x0356, r25
     5b0:	a0 93 57 03 	sts	0x0357, r26
     5b4:	b0 93 58 03 	sts	0x0358, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     5b8:	80 93 17 03 	sts	0x0317, r24
     5bc:	90 93 18 03 	sts	0x0318, r25
     5c0:	a0 93 19 03 	sts	0x0319, r26
     5c4:	b0 93 1a 03 	sts	0x031A, r27
  kernel.tasks[0].release = 0x00000000;
     5c8:	10 92 13 03 	sts	0x0313, r1
     5cc:	10 92 14 03 	sts	0x0314, r1
     5d0:	10 92 15 03 	sts	0x0315, r1
     5d4:	10 92 16 03 	sts	0x0316, r1

  sei(); /* set enabled interrupts */
     5d8:	78 94       	sei
}
     5da:	08 95       	ret

000005dc <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	49 01       	movw	r8, r18
     5f6:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     5f8:	f8 94       	cli

  ++kernel.nbrOfTasks;
     5fa:	20 91 0f 03 	lds	r18, 0x030F
     5fe:	2f 5f       	subi	r18, 0xFF	; 255
     600:	20 93 0f 03 	sts	0x030F, r18

  sp = kernel.memptr;
     604:	c0 91 4f 03 	lds	r28, 0x034F
     608:	d0 91 50 03 	lds	r29, 0x0350
  kernel.memptr -= stacksize;  // decrease free mem ptr
     60c:	9e 01       	movw	r18, r28
     60e:	26 1b       	sub	r18, r22
     610:	37 0b       	sbc	r19, r23
     612:	30 93 50 03 	sts	0x0350, r19
     616:	20 93 4f 03 	sts	0x034F, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     61a:	88 83       	st	Y, r24
     61c:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     61e:	92 93       	st	-Z, r25
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     624:	ce 01       	movw	r24, r28
     626:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     628:	1c 92       	st	X, r1
     62a:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     62c:	a8 17       	cp	r26, r24
     62e:	b9 07       	cpc	r27, r25
     630:	d9 f7       	brne	.-10     	; 0x628 <trtCreateTask+0x4c>
     632:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     634:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     636:	d2 92       	st	-Z, r13
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     63c:	9e 01       	movw	r18, r28
     63e:	24 52       	subi	r18, 0x24	; 36
     640:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     642:	1c 92       	st	X, r1
     644:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     646:	a2 17       	cp	r26, r18
     648:	b3 07       	cpc	r27, r19
     64a:	d9 f7       	brne	.-10     	; 0x642 <trtCreateTask+0x66>
     64c:	9f 01       	movw	r18, r30
     64e:	26 50       	subi	r18, 0x06	; 6
     650:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     652:	e0 91 0f 03 	lds	r30, 0x030F
     656:	8b e0       	ldi	r24, 0x0B	; 11
     658:	e8 9f       	mul	r30, r24
     65a:	f0 01       	movw	r30, r0
     65c:	11 24       	eor	r1, r1
     65e:	ef 5e       	subi	r30, 0xEF	; 239
     660:	fc 4f       	sbci	r31, 0xFC	; 252

  t->release = release;
     662:	82 82       	std	Z+2, r8	; 0x02
     664:	93 82       	std	Z+3, r9	; 0x03
     666:	a4 82       	std	Z+4, r10	; 0x04
     668:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     66a:	e6 82       	std	Z+6, r14	; 0x06
     66c:	f7 82       	std	Z+7, r15	; 0x07
     66e:	00 87       	std	Z+8, r16	; 0x08
     670:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     676:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     678:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     67a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__vector_13>

}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	9f 90       	pop	r9
     694:	8f 90       	pop	r8
     696:	08 95       	ret

00000698 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     698:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     69a:	ef e0       	ldi	r30, 0x0F	; 15
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	e8 0f       	add	r30, r24
     6a0:	f1 1d       	adc	r31, r1
     6a2:	60 af       	std	Z+56, r22	; 0x38
  
  sei(); // set enabled interrupts;
     6a4:	78 94       	sei
}
     6a6:	08 95       	ret

000006a8 <trtWait>:

void trtWait(uint8_t semnbr) {
     6a8:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     6aa:	20 91 10 03 	lds	r18, 0x0310

  cli(); // disable interrupts
     6ae:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     6b0:	e8 2f       	mov	r30, r24
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	e9 5b       	subi	r30, 0xB9	; 185
     6b6:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     6b8:	80 81       	ld	r24, Z
     6ba:	88 23       	and	r24, r24
     6bc:	19 f0       	breq	.+6      	; 0x6c4 <trtWait+0x1c>
    (*s)--;
     6be:	81 50       	subi	r24, 0x01	; 1
     6c0:	80 83       	st	Z, r24
     6c2:	10 c0       	rjmp	.+32     	; 0x6e4 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	28 9f       	mul	r18, r24
     6cc:	f0 01       	movw	r30, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	f0 0d       	add	r31, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	ef 5e       	subi	r30, 0xEF	; 239
     6da:	fc 4f       	sbci	r31, 0xFC	; 252
     6dc:	4e 5f       	subi	r20, 0xFE	; 254
     6de:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     6e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__vector_13>
  }

  sei(); // reenable interrupts
     6e4:	78 94       	sei
}
     6e6:	08 95       	ret

000006e8 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     6f0:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     6f2:	00 91 0f 03 	lds	r16, 0x030F
     6f6:	e1 e0       	ldi	r30, 0x01	; 1
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f ef       	ldi	r21, 0xFF	; 255
     6fc:	6f ef       	ldi	r22, 0xFF	; 255
     6fe:	7f ef       	ldi	r23, 0xFF	; 255
     700:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     702:	8b e0       	ldi	r24, 0x0B	; 11
     704:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     706:	21 2f       	mov	r18, r17
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	2e 5f       	subi	r18, 0xFE	; 254
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	1e c0       	rjmp	.+60     	; 0x74c <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     710:	ef 9d       	mul	r30, r15
     712:	d0 01       	movw	r26, r0
     714:	11 24       	eor	r1, r1
     716:	af 5e       	subi	r26, 0xEF	; 239
     718:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == (semnbr + WAIT_OFFSET)) {
     71a:	1a 96       	adiw	r26, 0x0a	; 10
     71c:	8c 91       	ld	r24, X
     71e:	1a 97       	sbiw	r26, 0x0a	; 10
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	82 17       	cp	r24, r18
     724:	93 07       	cpc	r25, r19
     726:	69 f4       	brne	.+26     	; 0x742 <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     728:	16 96       	adiw	r26, 0x06	; 6
     72a:	8d 91       	ld	r24, X+
     72c:	9d 91       	ld	r25, X+
     72e:	0d 90       	ld	r0, X+
     730:	bc 91       	ld	r27, X
     732:	a0 2d       	mov	r26, r0
     734:	48 17       	cp	r20, r24
     736:	59 07       	cpc	r21, r25
     738:	6a 07       	cpc	r22, r26
     73a:	7b 07       	cpc	r23, r27
     73c:	10 f0       	brcs	.+4      	; 0x742 <trtSignal+0x5a>
     73e:	fe 2f       	mov	r31, r30
     740:	02 c0       	rjmp	.+4      	; 0x746 <trtSignal+0x5e>
     742:	db 01       	movw	r26, r22
     744:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     746:	ef 5f       	subi	r30, 0xFF	; 255
     748:	ac 01       	movw	r20, r24
     74a:	bd 01       	movw	r22, r26
     74c:	0e 17       	cp	r16, r30
     74e:	00 f7       	brcc	.-64     	; 0x710 <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     750:	ff 23       	and	r31, r31
     752:	41 f4       	brne	.+16     	; 0x764 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     754:	e1 2f       	mov	r30, r17
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	e2 5f       	subi	r30, 0xF2	; 242
     75a:	fc 4f       	sbci	r31, 0xFC	; 252
     75c:	81 ad       	ldd	r24, Z+57	; 0x39
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	81 af       	std	Z+57, r24	; 0x39
     762:	11 c0       	rjmp	.+34     	; 0x786 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     764:	2f 2f       	mov	r18, r31
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	8b e0       	ldi	r24, 0x0B	; 11
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	28 9f       	mul	r18, r24
     76e:	f0 01       	movw	r30, r0
     770:	29 9f       	mul	r18, r25
     772:	f0 0d       	add	r31, r0
     774:	38 9f       	mul	r19, r24
     776:	f0 0d       	add	r31, r0
     778:	11 24       	eor	r1, r1
     77a:	e1 5f       	subi	r30, 0xF1	; 241
     77c:	fc 4f       	sbci	r31, 0xFC	; 252
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     782:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__vector_13>
  }

  sei(); // reenable interrupts
     786:	78 94       	sei
}
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	08 95       	ret

00000790 <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     790:	20 91 84 00 	lds	r18, 0x0084
     794:	30 91 85 00 	lds	r19, 0x0085
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	80 91 51 03 	lds	r24, 0x0351
     7a0:	90 91 52 03 	lds	r25, 0x0352
     7a4:	a0 91 53 03 	lds	r26, 0x0353
     7a8:	b0 91 54 03 	lds	r27, 0x0354
     7ac:	dc 01       	movw	r26, r24
     7ae:	99 27       	eor	r25, r25
     7b0:	88 27       	eor	r24, r24
     7b2:	28 0f       	add	r18, r24
     7b4:	39 1f       	adc	r19, r25
     7b6:	4a 1f       	adc	r20, r26
     7b8:	5b 1f       	adc	r21, r27
}
     7ba:	b9 01       	movw	r22, r18
     7bc:	ca 01       	movw	r24, r20
     7be:	08 95       	ret

000007c0 <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     7c0:	e0 91 10 03 	lds	r30, 0x0310
     7c4:	ab e0       	ldi	r26, 0x0B	; 11
     7c6:	ea 9f       	mul	r30, r26
     7c8:	f0 01       	movw	r30, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	ef 5e       	subi	r30, 0xEF	; 239
     7ce:	fc 4f       	sbci	r31, 0xFC	; 252

  cli(); // turn off interrupts
     7d0:	f8 94       	cli

  t->state = TIMEQ;
     7d2:	a2 e0       	ldi	r26, 0x02	; 2
     7d4:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     7d6:	62 83       	std	Z+2, r22	; 0x02
     7d8:	73 83       	std	Z+3, r23	; 0x03
     7da:	84 83       	std	Z+4, r24	; 0x04
     7dc:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     7de:	26 83       	std	Z+6, r18	; 0x06
     7e0:	37 83       	std	Z+7, r19	; 0x07
     7e2:	40 87       	std	Z+8, r20	; 0x08
     7e4:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     7e6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__vector_13>
}
     7ea:	08 95       	ret

000007ec <trtGetRelease>:


uint32_t trtGetRelease(void) {
     7ec:	80 91 10 03 	lds	r24, 0x0310
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	2b e0       	ldi	r18, 0x0B	; 11
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	82 9f       	mul	r24, r18
     7f8:	f0 01       	movw	r30, r0
     7fa:	83 9f       	mul	r24, r19
     7fc:	f0 0d       	add	r31, r0
     7fe:	92 9f       	mul	r25, r18
     800:	f0 0d       	add	r31, r0
     802:	11 24       	eor	r1, r1
     804:	e1 5f       	subi	r30, 0xF1	; 241
     806:	fc 4f       	sbci	r31, 0xFC	; 252
     808:	df 01       	movw	r26, r30
     80a:	14 96       	adiw	r26, 0x04	; 4
     80c:	64 81       	ldd	r22, Z+4	; 0x04
     80e:	11 96       	adiw	r26, 0x01	; 1
     810:	7c 91       	ld	r23, X
     812:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     814:	12 96       	adiw	r26, 0x02	; 2
     816:	8c 91       	ld	r24, X
     818:	12 97       	sbiw	r26, 0x02	; 2
     81a:	13 96       	adiw	r26, 0x03	; 3
     81c:	9c 91       	ld	r25, X
     81e:	08 95       	ret

00000820 <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     820:	80 91 10 03 	lds	r24, 0x0310
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	2b e0       	ldi	r18, 0x0B	; 11
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	82 9f       	mul	r24, r18
     82c:	f0 01       	movw	r30, r0
     82e:	83 9f       	mul	r24, r19
     830:	f0 0d       	add	r31, r0
     832:	92 9f       	mul	r25, r18
     834:	f0 0d       	add	r31, r0
     836:	11 24       	eor	r1, r1
     838:	e1 5f       	subi	r30, 0xF1	; 241
     83a:	fc 4f       	sbci	r31, 0xFC	; 252
     83c:	df 01       	movw	r26, r30
     83e:	18 96       	adiw	r26, 0x08	; 8
     840:	60 85       	ldd	r22, Z+8	; 0x08
     842:	11 96       	adiw	r26, 0x01	; 1
     844:	7c 91       	ld	r23, X
     846:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     848:	12 96       	adiw	r26, 0x02	; 2
     84a:	8c 91       	ld	r24, X
     84c:	12 97       	sbiw	r26, 0x02	; 2
     84e:	13 96       	adiw	r26, 0x03	; 3
     850:	9c 91       	ld	r25, X
     852:	08 95       	ret

00000854 <trtTerminate>:

void trtTerminate(void) {

  cli();
     854:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     856:	80 91 10 03 	lds	r24, 0x0310
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	2b e0       	ldi	r18, 0x0B	; 11
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	82 9f       	mul	r24, r18
     862:	f0 01       	movw	r30, r0
     864:	83 9f       	mul	r24, r19
     866:	f0 0d       	add	r31, r0
     868:	92 9f       	mul	r25, r18
     86a:	f0 0d       	add	r31, r0
     86c:	11 24       	eor	r1, r1
     86e:	e1 5f       	subi	r30, 0xF1	; 241
     870:	fc 4f       	sbci	r31, 0xFC	; 252
     872:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     874:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__vector_13>
}
     878:	08 95       	ret

0000087a <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     87a:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     87c:	e8 2f       	mov	r30, r24
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	e9 5b       	subi	r30, 0xB9	; 185
     882:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     884:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     886:	88 23       	and	r24, r24
     888:	19 f0       	breq	.+6      	; 0x890 <trtAccept+0x16>
    (*s)--;
     88a:	81 50       	subi	r24, 0x01	; 1
     88c:	80 83       	st	Z, r24
     88e:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     890:	78 94       	sei
  return temp ;
}
     892:	08 95       	ret

00000894 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     894:	87 e6       	ldi	r24, 0x67	; 103
     896:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     89a:	e1 ec       	ldi	r30, 0xC1	; 193
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	88 e1       	ldi	r24, 0x18	; 24
     8a0:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     8a2:	10 92 05 02 	sts	0x0205, r1
     8a6:	10 92 04 02 	sts	0x0204, r1
  tx_out = 0;
     8aa:	10 92 07 02 	sts	0x0207, r1
     8ae:	10 92 06 02 	sts	0x0206, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     8b2:	80 81       	ld	r24, Z
     8b4:	80 68       	ori	r24, 0x80	; 128
     8b6:	80 83       	st	Z, r24
}
     8b8:	08 95       	ret

000008ba <__vector_21>:



ISR( USART0_UDRE_vect )
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	0b b6       	in	r0, 0x3b	; 59
     8c4:	0f 92       	push	r0
     8c6:	11 24       	eor	r1, r1
     8c8:	2f 93       	push	r18
     8ca:	3f 93       	push	r19
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     8d4:	20 91 04 02 	lds	r18, 0x0204
     8d8:	30 91 05 02 	lds	r19, 0x0205
     8dc:	80 91 06 02 	lds	r24, 0x0206
     8e0:	90 91 07 02 	lds	r25, 0x0207
     8e4:	28 17       	cp	r18, r24
     8e6:	39 07       	cpc	r19, r25
     8e8:	31 f4       	brne	.+12     	; 0x8f6 <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     8ea:	80 91 c1 00 	lds	r24, 0x00C1
     8ee:	8f 7d       	andi	r24, 0xDF	; 223
     8f0:	80 93 c1 00 	sts	0x00C1, r24
     8f4:	1d c0       	rjmp	.+58     	; 0x930 <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     8f6:	e0 91 06 02 	lds	r30, 0x0206
     8fa:	f0 91 07 02 	lds	r31, 0x0207
     8fe:	e8 5f       	subi	r30, 0xF8	; 248
     900:	fd 4f       	sbci	r31, 0xFD	; 253
     902:	80 81       	ld	r24, Z
     904:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     908:	80 91 06 02 	lds	r24, 0x0206
     90c:	90 91 07 02 	lds	r25, 0x0207
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	90 93 07 02 	sts	0x0207, r25
     916:	80 93 06 02 	sts	0x0206, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     91a:	80 91 06 02 	lds	r24, 0x0206
     91e:	90 91 07 02 	lds	r25, 0x0207
     922:	88 3c       	cpi	r24, 0xC8	; 200
     924:	91 05       	cpc	r25, r1
     926:	21 f4       	brne	.+8      	; 0x930 <__vector_21+0x76>
     928:	10 92 07 02 	sts	0x0207, r1
     92c:	10 92 06 02 	sts	0x0206, r1
  }
}
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0b be       	out	0x3b, r0	; 59
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     94a:	1f 93       	push	r17
     94c:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     94e:	8a 30       	cpi	r24, 0x0A	; 10
     950:	19 f4       	brne	.+6      	; 0x958 <uart_putchar+0xe>
     952:	8d e0       	ldi	r24, 0x0D	; 13
     954:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
  char i = tx_in;
     958:	80 91 04 02 	lds	r24, 0x0204
     95c:	90 91 05 02 	lds	r25, 0x0205
  i++;
     960:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     962:	88 3c       	cpi	r24, 0xC8	; 200
     964:	09 f4       	brne	.+2      	; 0x968 <uart_putchar+0x1e>
     966:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     968:	e0 91 04 02 	lds	r30, 0x0204
     96c:	f0 91 05 02 	lds	r31, 0x0205
     970:	e8 5f       	subi	r30, 0xF8	; 248
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     976:	28 2f       	mov	r18, r24
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	80 91 06 02 	lds	r24, 0x0206
     97e:	90 91 07 02 	lds	r25, 0x0207
     982:	28 17       	cp	r18, r24
     984:	39 07       	cpc	r19, r25
     986:	c9 f3       	breq	.-14     	; 0x97a <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     988:	30 93 05 02 	sts	0x0205, r19
     98c:	20 93 04 02 	sts	0x0204, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     990:	80 91 c1 00 	lds	r24, 0x00C1
     994:	80 62       	ori	r24, 0x20	; 32
     996:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	1f 91       	pop	r17
     9a0:	08 95       	ret

000009a2 <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	0b b6       	in	r0, 0x3b	; 59
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 93       	push	r18
     9b2:	3f 93       	push	r19
     9b4:	4f 93       	push	r20
     9b6:	5f 93       	push	r21
     9b8:	6f 93       	push	r22
     9ba:	7f 93       	push	r23
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	af 93       	push	r26
     9c2:	bf 93       	push	r27
     9c4:	ef 93       	push	r30
     9c6:	ff 93       	push	r31
	trt_rx_c = UDR0;
     9c8:	80 91 c6 00 	lds	r24, 0x00C6
     9cc:	80 93 59 03 	sts	0x0359, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
}
     9d6:	ff 91       	pop	r31
     9d8:	ef 91       	pop	r30
     9da:	bf 91       	pop	r27
     9dc:	af 91       	pop	r26
     9de:	9f 91       	pop	r25
     9e0:	8f 91       	pop	r24
     9e2:	7f 91       	pop	r23
     9e4:	6f 91       	pop	r22
     9e6:	5f 91       	pop	r21
     9e8:	4f 91       	pop	r20
     9ea:	3f 91       	pop	r19
     9ec:	2f 91       	pop	r18
     9ee:	0f 90       	pop	r0
     9f0:	0b be       	out	0x3b, r0	; 59
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     a0a:	80 91 b2 01 	lds	r24, 0x01B2
     a0e:	90 91 b3 01 	lds	r25, 0x01B3
     a12:	89 2b       	or	r24, r25
     a14:	09 f0       	breq	.+2      	; 0xa18 <uart_getchar+0x1c>
     a16:	a1 c0       	rjmp	.+322    	; 0xb5a <uart_getchar+0x15e>
     a18:	04 eb       	ldi	r16, 0xB4	; 180
     a1a:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
	if (UCSR0A & _BV(FE0))
     a22:	80 91 c0 00 	lds	r24, 0x00C0
     a26:	84 ff       	sbrs	r24, 4
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <uart_getchar+0x34>
     a2a:	2e ef       	ldi	r18, 0xFE	; 254
     a2c:	3f ef       	ldi	r19, 0xFF	; 255
     a2e:	a9 c0       	rjmp	.+338    	; 0xb82 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     a30:	80 91 c0 00 	lds	r24, 0x00C0
     a34:	83 fd       	sbrc	r24, 3
     a36:	a3 c0       	rjmp	.+326    	; 0xb7e <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     a38:	90 91 59 03 	lds	r25, 0x0359

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     a3c:	9d 30       	cpi	r25, 0x0D	; 13
     a3e:	11 f0       	breq	.+4      	; 0xa44 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     a40:	9a 30       	cpi	r25, 0x0A	; 10
     a42:	81 f4       	brne	.+32     	; 0xa64 <uart_getchar+0x68>
	  {
	    *cp = c;
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	f8 01       	movw	r30, r16
     a48:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
	    rxp = b;
     a50:	84 eb       	ldi	r24, 0xB4	; 180
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	90 93 b3 01 	sts	0x01B3, r25
     a58:	80 93 b2 01 	sts	0x01B2, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
     a62:	7b c0       	rjmp	.+246    	; 0xb5a <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     a64:	99 30       	cpi	r25, 0x09	; 9
     a66:	09 f4       	brne	.+2      	; 0xa6a <uart_getchar+0x6e>
     a68:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     a6a:	89 2f       	mov	r24, r25
     a6c:	80 52       	subi	r24, 0x20	; 32
     a6e:	8f 35       	cpi	r24, 0x5F	; 95
     a70:	10 f0       	brcs	.+4      	; 0xa76 <uart_getchar+0x7a>
     a72:	90 3a       	cpi	r25, 0xA0	; 160
     a74:	70 f0       	brcs	.+28     	; 0xa92 <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     a76:	f2 e0       	ldi	r31, 0x02	; 2
     a78:	03 30       	cpi	r16, 0x03	; 3
     a7a:	1f 07       	cpc	r17, r31
     a7c:	11 f4       	brne	.+4      	; 0xa82 <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     a7e:	87 e0       	ldi	r24, 0x07	; 7
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     a82:	f8 01       	movw	r30, r16
     a84:	91 93       	st	Z+, r25
     a86:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     a88:	89 2f       	mov	r24, r25
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
     a90:	c5 cf       	rjmp	.-118    	; 0xa1c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     a92:	92 31       	cpi	r25, 0x12	; 18
     a94:	39 f1       	breq	.+78     	; 0xae4 <uart_getchar+0xe8>
     a96:	93 31       	cpi	r25, 0x13	; 19
     a98:	38 f4       	brcc	.+14     	; 0xaa8 <uart_getchar+0xac>
     a9a:	93 30       	cpi	r25, 0x03	; 3
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <uart_getchar+0xa4>
     a9e:	6f c0       	rjmp	.+222    	; 0xb7e <uart_getchar+0x182>
     aa0:	98 30       	cpi	r25, 0x08	; 8
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <uart_getchar+0xaa>
     aa4:	bb cf       	rjmp	.-138    	; 0xa1c <uart_getchar+0x20>
     aa6:	09 c0       	rjmp	.+18     	; 0xaba <uart_getchar+0xbe>
     aa8:	97 31       	cpi	r25, 0x17	; 23
     aaa:	09 f4       	brne	.+2      	; 0xaae <uart_getchar+0xb2>
     aac:	4b c0       	rjmp	.+150    	; 0xb44 <uart_getchar+0x148>
     aae:	9f 37       	cpi	r25, 0x7F	; 127
     ab0:	21 f0       	breq	.+8      	; 0xaba <uart_getchar+0xbe>
     ab2:	95 31       	cpi	r25, 0x15	; 21
     ab4:	09 f0       	breq	.+2      	; 0xab8 <uart_getchar+0xbc>
     ab6:	b2 cf       	rjmp	.-156    	; 0xa1c <uart_getchar+0x20>
     ab8:	32 c0       	rjmp	.+100    	; 0xb1e <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	04 3b       	cpi	r16, 0xB4	; 180
     abe:	1f 07       	cpc	r17, r31
     ac0:	09 f0       	breq	.+2      	; 0xac4 <uart_getchar+0xc8>
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <uart_getchar+0xca>
     ac4:	ab cf       	rjmp	.-170    	; 0xa1c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	b7 01       	movw	r22, r14
     aca:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		uart_putchar(' ', stream);
     ace:	80 e2       	ldi	r24, 0x20	; 32
     ad0:	b7 01       	movw	r22, r14
     ad2:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		uart_putchar('\b', stream);
     ad6:	88 e0       	ldi	r24, 0x08	; 8
     ad8:	b7 01       	movw	r22, r14
     ada:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		cp--;
     ade:	01 50       	subi	r16, 0x01	; 1
     ae0:	10 40       	sbci	r17, 0x00	; 0
     ae2:	9c cf       	rjmp	.-200    	; 0xa1c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     ae4:	8d e0       	ldi	r24, 0x0D	; 13
     ae6:	b7 01       	movw	r22, r14
     ae8:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
     aec:	c4 eb       	ldi	r28, 0xB4	; 180
     aee:	d1 e0       	ldi	r29, 0x01	; 1
     af0:	04 c0       	rjmp	.+8      	; 0xafa <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     af2:	89 91       	ld	r24, Y+
     af4:	b7 01       	movw	r22, r14
     af6:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     afa:	c0 17       	cp	r28, r16
     afc:	d1 07       	cpc	r29, r17
     afe:	c8 f3       	brcs	.-14     	; 0xaf2 <uart_getchar+0xf6>
     b00:	8d cf       	rjmp	.-230    	; 0xa1c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     b02:	88 e0       	ldi	r24, 0x08	; 8
     b04:	b7 01       	movw	r22, r14
     b06:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		uart_putchar(' ', stream);
     b0a:	80 e2       	ldi	r24, 0x20	; 32
     b0c:	b7 01       	movw	r22, r14
     b0e:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		uart_putchar('\b', stream);
     b12:	88 e0       	ldi	r24, 0x08	; 8
     b14:	b7 01       	movw	r22, r14
     b16:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		cp--;
     b1a:	01 50       	subi	r16, 0x01	; 1
     b1c:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	04 3b       	cpi	r16, 0xB4	; 180
     b22:	18 07       	cpc	r17, r24
     b24:	09 f0       	breq	.+2      	; 0xb28 <uart_getchar+0x12c>
     b26:	68 f7       	brcc	.-38     	; 0xb02 <uart_getchar+0x106>
     b28:	79 cf       	rjmp	.-270    	; 0xa1c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     b2a:	88 e0       	ldi	r24, 0x08	; 8
     b2c:	b7 01       	movw	r22, r14
     b2e:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		uart_putchar(' ', stream);
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	b7 01       	movw	r22, r14
     b36:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
		uart_putchar('\b', stream);
     b3a:	88 e0       	ldi	r24, 0x08	; 8
     b3c:	b7 01       	movw	r22, r14
     b3e:	0e 94 a5 04 	call	0x94a	; 0x94a <uart_putchar>
     b42:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     b44:	e1 e0       	ldi	r30, 0x01	; 1
     b46:	04 3b       	cpi	r16, 0xB4	; 180
     b48:	1e 07       	cpc	r17, r30
     b4a:	09 f0       	breq	.+2      	; 0xb4e <uart_getchar+0x152>
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <uart_getchar+0x154>
     b4e:	66 cf       	rjmp	.-308    	; 0xa1c <uart_getchar+0x20>
     b50:	e8 01       	movw	r28, r16
     b52:	8a 91       	ld	r24, -Y
     b54:	80 32       	cpi	r24, 0x20	; 32
     b56:	49 f7       	brne	.-46     	; 0xb2a <uart_getchar+0x12e>
     b58:	61 cf       	rjmp	.-318    	; 0xa1c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     b5a:	e0 91 b2 01 	lds	r30, 0x01B2
     b5e:	f0 91 b3 01 	lds	r31, 0x01B3
     b62:	81 91       	ld	r24, Z+
     b64:	f0 93 b3 01 	sts	0x01B3, r31
     b68:	e0 93 b2 01 	sts	0x01B2, r30
  if (c == '\n')
     b6c:	8a 30       	cpi	r24, 0x0A	; 10
     b6e:	21 f4       	brne	.+8      	; 0xb78 <uart_getchar+0x17c>
    rxp = 0;
     b70:	10 92 b3 01 	sts	0x01B3, r1
     b74:	10 92 b2 01 	sts	0x01B2, r1

  return c;
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <uart_getchar+0x186>
     b7e:	2f ef       	ldi	r18, 0xFF	; 255
     b80:	3f ef       	ldi	r19, 0xFF	; 255
}
     b82:	c9 01       	movw	r24, r18
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	08 95       	ret

00000b92 <port_init>:
volatile uint16_t motor_period_ovlf;

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     b92:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     b94:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     b9a:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     b9c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     b9e:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     ba0:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     ba2:	5a 9a       	sbi	0x0b, 2	; 11
end
     ba4:	08 95       	ret

00000ba6 <timer2_init>:
end

// sets timer2 to be a counter
void timer2_init(void)
begin
	TCCR2A = 0x00;
     ba6:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x00;
     baa:	a1 eb       	ldi	r26, 0xB1	; 177
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	1c 92       	st	X, r1
	TIMSK2 = 0x00;
     bb0:	e0 e7       	ldi	r30, 0x70	; 112
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	10 82       	st	Z, r1

	TIMSK2 |= (1<<TOIE2);    // enables the overflow ISR
     bb6:	80 81       	ld	r24, Z
     bb8:	81 60       	ori	r24, 0x01	; 1
     bba:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22) + (1<<CS21);// + (1<<CS20);    // sets the prescaler to 256
     bbc:	8c 91       	ld	r24, X
     bbe:	86 60       	ori	r24, 0x06	; 6
     bc0:	8c 93       	st	X, r24
end
     bc2:	08 95       	ret

00000bc4 <timer0_init>:

void timer0_init(void)
begin
	TCCR0A = 0x00;
     bc4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
     bc6:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0x00;
     bc8:	10 92 6e 00 	sts	0x006E, r1
	OCR0A = 0;    // sets up 0 duty cycle
     bcc:	17 bc       	out	0x27, r1	; 39
	EICRA = 0x00;
     bce:	e9 e6       	ldi	r30, 0x69	; 105
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	10 82       	st	Z, r1
	EIMSK = 0x00;
     bd4:	1d ba       	out	0x1d, r1	; 29

	EICRA |= (1<<ISC01);    // falling edge triggers INT0
     bd6:	80 81       	ld	r24, Z
     bd8:	82 60       	ori	r24, 0x02	; 2
     bda:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);    // enables INT0
     bdc:	e8 9a       	sbi	0x1d, 0	; 29

	TCCR0A |= (1<<COM0A1) + (1<<COM0B1) + (1<<WGM01) + (1<<WGM00);    // fast pwm
     bde:	84 b5       	in	r24, 0x24	; 36
     be0:	83 6a       	ori	r24, 0xA3	; 163
     be2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) + (1<<CS00);    // prescaler of 64 -> 976 cycles/sec
     be4:	85 b5       	in	r24, 0x25	; 37
     be6:	83 60       	ori	r24, 0x03	; 3
     be8:	85 bd       	out	0x25, r24	; 37
end
     bea:	08 95       	ret

00000bec <calc_PWM_Const>:
	end
  end

// --- define task 2  ----------------------------------------
void calc_PWM_Const(void* args) 
  begin	
     bec:	2f 92       	push	r2
     bee:	3f 92       	push	r3
     bf0:	4f 92       	push	r4
     bf2:	5f 92       	push	r5
     bf4:	6f 92       	push	r6
     bf6:	7f 92       	push	r7
     bf8:	8f 92       	push	r8
     bfa:	9f 92       	push	r9
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <calc_PWM_Const+0x26>
     c12:	00 d0       	rcall	.+0      	; 0xc14 <calc_PWM_Const+0x28>
     c14:	00 d0       	rcall	.+0      	; 0xc16 <calc_PWM_Const+0x2a>
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
	signed int error, prev_error, sum_error, temp; 
	float CF,i_calc;
	signed int p, i, d;
	float rpm_isr;

	s_value = 1000; // <------------------------------------- This is a test statement only
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	aa e7       	ldi	r26, 0x7A	; 122
     c20:	b4 e4       	ldi	r27, 0x44	; 68
     c22:	80 93 e9 02 	sts	0x02E9, r24
     c26:	90 93 ea 02 	sts	0x02EA, r25
     c2a:	a0 93 eb 02 	sts	0x02EB, r26
     c2e:	b0 93 ec 02 	sts	0x02EC, r27
	p = 0;
	i = 0;
	d = 0;
	p_value = 4;
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a0 e8       	ldi	r26, 0x80	; 128
     c38:	b0 e4       	ldi	r27, 0x40	; 64
     c3a:	80 93 f2 02 	sts	0x02F2, r24
     c3e:	90 93 f3 02 	sts	0x02F3, r25
     c42:	a0 93 f4 02 	sts	0x02F4, r26
     c46:	b0 93 f5 02 	sts	0x02F5, r27
	i_value = .25;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a0 e8       	ldi	r26, 0x80	; 128
     c50:	be e3       	ldi	r27, 0x3E	; 62
     c52:	80 93 f6 02 	sts	0x02F6, r24
     c56:	90 93 f7 02 	sts	0x02F7, r25
     c5a:	a0 93 f8 02 	sts	0x02F8, r26
     c5e:	b0 93 f9 02 	sts	0x02F9, r27
	d_value = .3;
     c62:	8a e9       	ldi	r24, 0x9A	; 154
     c64:	99 e9       	ldi	r25, 0x99	; 153
     c66:	a9 e9       	ldi	r26, 0x99	; 153
     c68:	be e3       	ldi	r27, 0x3E	; 62
     c6a:	80 93 ee 02 	sts	0x02EE, r24
     c6e:	90 93 ef 02 	sts	0x02EF, r25
     c72:	a0 93 f0 02 	sts	0x02F0, r26
     c76:	b0 93 f1 02 	sts	0x02F1, r27
	error = 0;
	OCR0A = 150;
     c7a:	86 e9       	ldi	r24, 0x96	; 150
     c7c:	87 bd       	out	0x27, r24	; 39
     c7e:	44 24       	eor	r4, r4
     c80:	55 24       	eor	r5, r5
	prev_error = 0;

	while(1)
	begin
		temp = fan_period*7;    // ticks for one rotation
     c82:	80 91 fa 02 	lds	r24, 0x02FA
     c86:	90 91 fb 02 	lds	r25, 0x02FB
		rpm_isr = 62500 * 60 /temp;    // divide 60 seconsd by rotations/sec for rpm
     c8a:	9c 01       	movw	r18, r24
     c8c:	e3 e0       	ldi	r30, 0x03	; 3
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	ea 95       	dec	r30
     c94:	e1 f7       	brne	.-8      	; 0xc8e <calc_PWM_Const+0xa2>
     c96:	28 1b       	sub	r18, r24
     c98:	39 0b       	sbc	r19, r25
     c9a:	44 27       	eor	r20, r20
     c9c:	37 fd       	sbrc	r19, 7
     c9e:	40 95       	com	r20
     ca0:	54 2f       	mov	r21, r20
     ca2:	60 e7       	ldi	r22, 0x70	; 112
     ca4:	78 e3       	ldi	r23, 0x38	; 56
     ca6:	89 e3       	ldi	r24, 0x39	; 57
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__divmodsi4>
     cae:	ca 01       	movw	r24, r20
     cb0:	b9 01       	movw	r22, r18
     cb2:	0e 94 13 14 	call	0x2826	; 0x2826 <__floatsisf>
     cb6:	69 83       	std	Y+1, r22	; 0x01
     cb8:	7a 83       	std	Y+2, r23	; 0x02
     cba:	8b 83       	std	Y+3, r24	; 0x03
     cbc:	9c 83       	std	Y+4, r25	; 0x04
		
		prev_error = error;
		
		// lock and look at error
		trtWait(SEM_SHARED_RPM);
     cbe:	87 e0       	ldi	r24, 0x07	; 7
     cc0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		RPM = (int)rpm_isr;    // saves the calculated value into a global that LCD func can use
     cc4:	69 81       	ldd	r22, Y+1	; 0x01
     cc6:	7a 81       	ldd	r23, Y+2	; 0x02
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__fixsfsi>
     cd0:	70 93 e8 02 	sts	0x02E8, r23
     cd4:	60 93 e7 02 	sts	0x02E7, r22
		trtWait(SEM_SHARED_S);
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		error = (int)s_value - RPM;
     cde:	60 91 e9 02 	lds	r22, 0x02E9
     ce2:	70 91 ea 02 	lds	r23, 0x02EA
     ce6:	80 91 eb 02 	lds	r24, 0x02EB
     cea:	90 91 ec 02 	lds	r25, 0x02EC
     cee:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__fixsfsi>
     cf2:	80 91 e7 02 	lds	r24, 0x02E7
     cf6:	90 91 e8 02 	lds	r25, 0x02E8
     cfa:	9b 01       	movw	r18, r22
     cfc:	28 1b       	sub	r18, r24
     cfe:	39 0b       	sbc	r19, r25
     d00:	3e 83       	std	Y+6, r19	; 0x06
     d02:	2d 83       	std	Y+5, r18	; 0x05
		trtSignal(SEM_SHARED_S);
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		trtSignal(SEM_SHARED_RPM);
     d0a:	87 e0       	ldi	r24, 0x07	; 7
     d0c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>

		// check if error had a zero crossing and reset the i term
		if((error>0 && prev_error>0) || (error<0 && prev_error<0))
     d10:	8d 81       	ldd	r24, Y+5	; 0x05
     d12:	9e 81       	ldd	r25, Y+6	; 0x06
     d14:	18 16       	cp	r1, r24
     d16:	19 06       	cpc	r1, r25
     d18:	24 f4       	brge	.+8      	; 0xd22 <calc_PWM_Const+0x136>
     d1a:	14 14       	cp	r1, r4
     d1c:	15 04       	cpc	r1, r5
     d1e:	3c f0       	brlt	.+14     	; 0xd2e <calc_PWM_Const+0x142>
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <calc_PWM_Const+0x14c>
     d22:	ed 81       	ldd	r30, Y+5	; 0x05
     d24:	fe 81       	ldd	r31, Y+6	; 0x06
     d26:	ef 2b       	or	r30, r31
     d28:	39 f0       	breq	.+14     	; 0xd38 <calc_PWM_Const+0x14c>
     d2a:	57 fe       	sbrs	r5, 7
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <calc_PWM_Const+0x14c>
		begin
			sum_error += error;
     d2e:	2d 81       	ldd	r18, Y+5	; 0x05
     d30:	3e 81       	ldd	r19, Y+6	; 0x06
     d32:	22 0e       	add	r2, r18
     d34:	33 1e       	adc	r3, r19
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <calc_PWM_Const+0x150>
		error = (int)s_value - RPM;
		trtSignal(SEM_SHARED_S);
		trtSignal(SEM_SHARED_RPM);

		// check if error had a zero crossing and reset the i term
		if((error>0 && prev_error>0) || (error<0 && prev_error<0))
     d38:	22 24       	eor	r2, r2
     d3a:	33 24       	eor	r3, r3
		trtWait(SEM_SHARED_D);
		d = d_value;
		trtSignal(SEM_SHARED_D);*/
		
		
		trtWait(SEM_SHARED_P);
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		trtWait(SEM_SHARED_I);
     d42:	85 e0       	ldi	r24, 0x05	; 5
     d44:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		trtWait(SEM_SHARED_D);
     d48:	86 e0       	ldi	r24, 0x06	; 6
     d4a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		//CF = p * error + d * (error-prev_error) + i * (sum_error);
		i_calc = i_value * (sum_error) > 50 ? 50 : i_value * (sum_error);
     d4e:	e0 90 f6 02 	lds	r14, 0x02F6
     d52:	f0 90 f7 02 	lds	r15, 0x02F7
     d56:	00 91 f8 02 	lds	r16, 0x02F8
     d5a:	10 91 f9 02 	lds	r17, 0x02F9
     d5e:	b1 01       	movw	r22, r2
     d60:	88 27       	eor	r24, r24
     d62:	77 fd       	sbrc	r23, 7
     d64:	80 95       	com	r24
     d66:	98 2f       	mov	r25, r24
     d68:	0e 94 13 14 	call	0x2826	; 0x2826 <__floatsisf>
     d6c:	5b 01       	movw	r10, r22
     d6e:	6c 01       	movw	r12, r24
     d70:	c8 01       	movw	r24, r16
     d72:	b7 01       	movw	r22, r14
     d74:	a6 01       	movw	r20, r12
     d76:	95 01       	movw	r18, r10
     d78:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	48 e4       	ldi	r20, 0x48	; 72
     d82:	52 e4       	ldi	r21, 0x42	; 66
     d84:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__gesf2>
     d88:	18 16       	cp	r1, r24
     d8a:	44 f0       	brlt	.+16     	; 0xd9c <calc_PWM_Const+0x1b0>
     d8c:	80 91 f6 02 	lds	r24, 0x02F6
     d90:	90 91 f7 02 	lds	r25, 0x02F7
     d94:	a0 91 f8 02 	lds	r26, 0x02F8
     d98:	b0 91 f9 02 	lds	r27, 0x02F9
		i_calc = i_value * (sum_error) < -50? -50 : i_value * (sum_error);
     d9c:	60 91 f6 02 	lds	r22, 0x02F6
     da0:	70 91 f7 02 	lds	r23, 0x02F7
     da4:	80 91 f8 02 	lds	r24, 0x02F8
     da8:	90 91 f9 02 	lds	r25, 0x02F9
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	48 e4       	ldi	r20, 0x48	; 72
     dba:	52 ec       	ldi	r21, 0xC2	; 194
     dbc:	0e 94 67 15 	call	0x2ace	; 0x2ace <__cmpsf2>
     dc0:	88 23       	and	r24, r24
     dc2:	5c f4       	brge	.+22     	; 0xdda <calc_PWM_Const+0x1ee>
     dc4:	0f 2e       	mov	r0, r31
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	6f 2e       	mov	r6, r31
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	7f 2e       	mov	r7, r31
     dce:	f8 e4       	ldi	r31, 0x48	; 72
     dd0:	8f 2e       	mov	r8, r31
     dd2:	f2 ec       	ldi	r31, 0xC2	; 194
     dd4:	9f 2e       	mov	r9, r31
     dd6:	f0 2d       	mov	r31, r0
     dd8:	0e c0       	rjmp	.+28     	; 0xdf6 <calc_PWM_Const+0x20a>
     dda:	60 91 f6 02 	lds	r22, 0x02F6
     dde:	70 91 f7 02 	lds	r23, 0x02F7
     de2:	80 91 f8 02 	lds	r24, 0x02F8
     de6:	90 91 f9 02 	lds	r25, 0x02F9
     dea:	a6 01       	movw	r20, r12
     dec:	95 01       	movw	r18, r10
     dee:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
     df2:	3b 01       	movw	r6, r22
     df4:	4c 01       	movw	r8, r24
		CF = p_value * error + d_value * (error-prev_error) + i_calc;
     df6:	e0 90 f2 02 	lds	r14, 0x02F2
     dfa:	f0 90 f3 02 	lds	r15, 0x02F3
     dfe:	00 91 f4 02 	lds	r16, 0x02F4
     e02:	10 91 f5 02 	lds	r17, 0x02F5
     e06:	a0 90 ee 02 	lds	r10, 0x02EE
     e0a:	b0 90 ef 02 	lds	r11, 0x02EF
     e0e:	c0 90 f0 02 	lds	r12, 0x02F0
     e12:	d0 90 f1 02 	lds	r13, 0x02F1
     e16:	ed 81       	ldd	r30, Y+5	; 0x05
     e18:	fe 81       	ldd	r31, Y+6	; 0x06
     e1a:	bf 01       	movw	r22, r30
     e1c:	88 27       	eor	r24, r24
     e1e:	77 fd       	sbrc	r23, 7
     e20:	80 95       	com	r24
     e22:	98 2f       	mov	r25, r24
     e24:	0e 94 13 14 	call	0x2826	; 0x2826 <__floatsisf>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	c8 01       	movw	r24, r16
     e2e:	b7 01       	movw	r22, r14
     e30:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
     e34:	7b 01       	movw	r14, r22
     e36:	8c 01       	movw	r16, r24
     e38:	6d 81       	ldd	r22, Y+5	; 0x05
     e3a:	7e 81       	ldd	r23, Y+6	; 0x06
     e3c:	64 19       	sub	r22, r4
     e3e:	75 09       	sbc	r23, r5
     e40:	88 27       	eor	r24, r24
     e42:	77 fd       	sbrc	r23, 7
     e44:	80 95       	com	r24
     e46:	98 2f       	mov	r25, r24
     e48:	0e 94 13 14 	call	0x2826	; 0x2826 <__floatsisf>
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	c6 01       	movw	r24, r12
     e52:	b5 01       	movw	r22, r10
     e54:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	c8 01       	movw	r24, r16
     e5e:	b7 01       	movw	r22, r14
     e60:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__addsf3>
     e64:	a4 01       	movw	r20, r8
     e66:	93 01       	movw	r18, r6
     e68:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__addsf3>
     e6c:	7b 01       	movw	r14, r22
     e6e:	8c 01       	movw	r16, r24
		trtSignal(SEM_SHARED_P);
     e70:	84 e0       	ldi	r24, 0x04	; 4
     e72:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		trtSignal(SEM_SHARED_I);
     e76:	85 e0       	ldi	r24, 0x05	; 5
     e78:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		trtSignal(SEM_SHARED_D);
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>

		if (CF>255) OCR0A = 255;
     e82:	c8 01       	movw	r24, r16
     e84:	b7 01       	movw	r22, r14
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	4f e7       	ldi	r20, 0x7F	; 127
     e8c:	53 e4       	ldi	r21, 0x43	; 67
     e8e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__gesf2>
     e92:	18 16       	cp	r1, r24
     e94:	14 f4       	brge	.+4      	; 0xe9a <calc_PWM_Const+0x2ae>
     e96:	ff ef       	ldi	r31, 0xFF	; 255
     e98:	f7 bd       	out	0x27, r31	; 39
		if (CF<0) OCR0A = 0;
     e9a:	c8 01       	movw	r24, r16
     e9c:	b7 01       	movw	r22, r14
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	0e 94 67 15 	call	0x2ace	; 0x2ace <__cmpsf2>
     eaa:	88 23       	and	r24, r24
     eac:	0c f4       	brge	.+2      	; 0xeb0 <calc_PWM_Const+0x2c4>
     eae:	17 bc       	out	0x27, r1	; 39
		if (CF<=255 && CF>=0) OCR0A = (char)CF; 
     eb0:	c8 01       	movw	r24, r16
     eb2:	b7 01       	movw	r22, r14
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	0e 94 67 15 	call	0x2ace	; 0x2ace <__cmpsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	7c f0       	brlt	.+30     	; 0xee2 <calc_PWM_Const+0x2f6>
     ec4:	c8 01       	movw	r24, r16
     ec6:	b7 01       	movw	r22, r14
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__gesf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f0       	brlt	.+10     	; 0xee2 <calc_PWM_Const+0x2f6>
     ed8:	c8 01       	movw	r24, r16
     eda:	b7 01       	movw	r22, r14
     edc:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__fixunssfsi>
     ee0:	67 bd       	out	0x27, r22	; 39
		
		OCR0B = (char)(rpm_isr*.0853); // set for the Oscope measurement
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	7a 81       	ldd	r23, Y+2	; 0x02
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	24 ec       	ldi	r18, 0xC4	; 196
     eec:	31 eb       	ldi	r19, 0xB1	; 177
     eee:	4e ea       	ldi	r20, 0xAE	; 174
     ef0:	5d e3       	ldi	r21, 0x3D	; 61
     ef2:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
     ef6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__fixunssfsi>
     efa:	68 bd       	out	0x28, r22	; 40
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     efc:	20 91 51 03 	lds	r18, 0x0351
     f00:	30 91 52 03 	lds	r19, 0x0352
     f04:	40 91 53 03 	lds	r20, 0x0353
     f08:	50 91 54 03 	lds	r21, 0x0354
     f0c:	a9 01       	movw	r20, r18
     f0e:	33 27       	eor	r19, r19
     f10:	22 27       	eor	r18, r18
     f12:	60 91 84 00 	lds	r22, 0x0084
     f16:	70 91 85 00 	lds	r23, 0x0085

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.01);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.04);
	    trtSleepUntil(rel, dead);
     f1a:	e0 90 84 00 	lds	r14, 0x0084
     f1e:	f0 90 85 00 	lds	r15, 0x0085
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	62 0f       	add	r22, r18
     f28:	73 1f       	adc	r23, r19
     f2a:	84 1f       	adc	r24, r20
     f2c:	95 1f       	adc	r25, r21
     f2e:	64 56       	subi	r22, 0x64	; 100
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	8f 4f       	sbci	r24, 0xFF	; 255
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	2e 0d       	add	r18, r14
     f3c:	3f 1d       	adc	r19, r15
     f3e:	40 1f       	adc	r20, r16
     f40:	51 1f       	adc	r21, r17
     f42:	2f 58       	subi	r18, 0x8F	; 143
     f44:	3d 4f       	sbci	r19, 0xFD	; 253
     f46:	4f 4f       	sbci	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <trtSleepUntil>
     f4e:	4d 80       	ldd	r4, Y+5	; 0x05
     f50:	5e 80       	ldd	r5, Y+6	; 0x06
     f52:	97 ce       	rjmp	.-722    	; 0xc82 <calc_PWM_Const+0x96>

00000f54 <__vector_1>:
	end
  end

// pin change interrupt on D.2. Initialized in task 2
ISR(INT0_vect)
begin
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	0b b6       	in	r0, 0x3b	; 59
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
	fan_period = TCNT2 + motor_period_ovlf;
     f6c:	e2 eb       	ldi	r30, 0xB2	; 178
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	20 81       	ld	r18, Z
     f72:	80 91 0d 03 	lds	r24, 0x030D
     f76:	90 91 0e 03 	lds	r25, 0x030E
     f7a:	82 0f       	add	r24, r18
     f7c:	91 1d       	adc	r25, r1
     f7e:	90 93 fb 02 	sts	0x02FB, r25
     f82:	80 93 fa 02 	sts	0x02FA, r24
    TCNT2 = 0;
     f86:	10 82       	st	Z, r1
	motor_period_ovlf = 0 ;
     f88:	10 92 0e 03 	sts	0x030E, r1
     f8c:	10 92 0d 03 	sts	0x030D, r1
end
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_11>:

// --- set up extra 8 bits on timer 2 ----------------
ISR (TIMER2_OVF_vect) {
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
        motor_period_ovlf = motor_period_ovlf + 256 ;
     fb6:	80 91 0d 03 	lds	r24, 0x030D
     fba:	90 91 0e 03 	lds	r25, 0x030E
     fbe:	80 50       	subi	r24, 0x00	; 0
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	90 93 0e 03 	sts	0x030E, r25
     fc6:	80 93 0d 03 	sts	0x030D, r24
}
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <main>:

// --- Main Program ----------------------------------
int main(void) {
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     fe4:	0e 94 4a 04 	call	0x894	; 0x894 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     fe8:	64 ea       	ldi	r22, 0xA4	; 164
     fea:	71 e0       	ldi	r23, 0x01	; 1
     fec:	70 93 5f 03 	sts	0x035F, r23
     ff0:	60 93 5e 03 	sts	0x035E, r22
     ff4:	70 93 5b 03 	sts	0x035B, r23
     ff8:	60 93 5a 03 	sts	0x035A, r22
     ffc:	70 93 5d 03 	sts	0x035D, r23
    1000:	60 93 5c 03 	sts	0x035C, r22
  fprintf(stdout,"\n\r Hi\n\r\n\r");
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <fputs>

  // start TRT
  trtInitKernel(140); // 80 bytes for the idle task stack
    100c:	8c e8       	ldi	r24, 0x8C	; 140
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 b0 02 	call	0x560	; 0x560 <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1014:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1016:	10 92 48 03 	sts	0x0348, r1
  
  sei(); // set enabled interrupts;
    101a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    101c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    101e:	10 92 49 03 	sts	0x0349, r1
  
  sei(); // set enabled interrupts;
    1022:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1024:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 4a 03 	sts	0x034A, r24
  
  sei(); // set enabled interrupts;
    102c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    102e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1030:	80 93 4b 03 	sts	0x034B, r24
  
  sei(); // set enabled interrupts;
    1034:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1036:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1038:	80 93 4c 03 	sts	0x034C, r24
  
  sei(); // set enabled interrupts;
    103c:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    103e:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1040:	80 93 4d 03 	sts	0x034D, r24
  
  sei(); // set enabled interrupts;
    1044:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
    1046:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
    1048:	80 93 4e 03 	sts	0x034E, r24
  
  sei(); // set enabled interrupts;
    104c:	78 94       	sei
  trtCreateSemaphore(SEM_SHARED_D, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_SHARED_RPM, 1) ; // protect shared variables


 // --- creat tasks  ----------------
  trtCreateTask(get_User_Input, 1000, SECONDS2TICKS(0.01), SECONDS2TICKS(0.1), &(args[0]));
    104e:	8b e6       	ldi	r24, 0x6B	; 107
    1050:	98 e0       	ldi	r25, 0x08	; 8
    1052:	68 ee       	ldi	r22, 0xE8	; 232
    1054:	73 e0       	ldi	r23, 0x03	; 3
    1056:	2c e9       	ldi	r18, 0x9C	; 156
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	aa e1       	ldi	r26, 0x1A	; 26
    1060:	ea 2e       	mov	r14, r26
    1062:	a6 e0       	ldi	r26, 0x06	; 6
    1064:	fa 2e       	mov	r15, r26
    1066:	01 2d       	mov	r16, r1
    1068:	11 2d       	mov	r17, r1
    106a:	f0 ed       	ldi	r31, 0xD0	; 208
    106c:	cf 2e       	mov	r12, r31
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	df 2e       	mov	r13, r31
    1072:	0e 94 ee 02 	call	0x5dc	; 0x5dc <trtCreateTask>
  trtCreateTask(calc_PWM_Const, 1000, SECONDS2TICKS(0.01), SECONDS2TICKS(0.05), &(args[1]));
    1076:	86 ef       	ldi	r24, 0xF6	; 246
    1078:	95 e0       	ldi	r25, 0x05	; 5
    107a:	68 ee       	ldi	r22, 0xE8	; 232
    107c:	73 e0       	ldi	r23, 0x03	; 3
    107e:	2c e9       	ldi	r18, 0x9C	; 156
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	ed e0       	ldi	r30, 0x0D	; 13
    1088:	ee 2e       	mov	r14, r30
    108a:	e3 e0       	ldi	r30, 0x03	; 3
    108c:	fe 2e       	mov	r15, r30
    108e:	01 2d       	mov	r16, r1
    1090:	11 2d       	mov	r17, r1
    1092:	b2 ed       	ldi	r27, 0xD2	; 210
    1094:	cb 2e       	mov	r12, r27
    1096:	b2 e0       	ldi	r27, 0x02	; 2
    1098:	db 2e       	mov	r13, r27
    109a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <trtCreateTask>
  trtCreateTask(get_Fan_Speed, 1000, SECONDS2TICKS(0.05), SECONDS2TICKS(0.2), &(args[2]));
    109e:	8f ee       	ldi	r24, 0xEF	; 239
    10a0:	99 e0       	ldi	r25, 0x09	; 9
    10a2:	68 ee       	ldi	r22, 0xE8	; 232
    10a4:	73 e0       	ldi	r23, 0x03	; 3
    10a6:	2d e0       	ldi	r18, 0x0D	; 13
    10a8:	33 e0       	ldi	r19, 0x03	; 3
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	a5 e3       	ldi	r26, 0x35	; 53
    10b0:	ea 2e       	mov	r14, r26
    10b2:	ac e0       	ldi	r26, 0x0C	; 12
    10b4:	fa 2e       	mov	r15, r26
    10b6:	01 2d       	mov	r16, r1
    10b8:	11 2d       	mov	r17, r1
    10ba:	f4 ed       	ldi	r31, 0xD4	; 212
    10bc:	cf 2e       	mov	r12, r31
    10be:	f2 e0       	ldi	r31, 0x02	; 2
    10c0:	df 2e       	mov	r13, r31
    10c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <trtCreateTask>
  
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
    10c6:	83 b7       	in	r24, 0x33	; 51
    10c8:	81 7f       	andi	r24, 0xF1	; 241
    10ca:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
    10cc:	83 b7       	in	r24, 0x33	; 51
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	83 bf       	out	0x33, r24	; 51
  while (1) 
  begin
  	sleep_cpu();
    10d2:	88 95       	sleep
    10d4:	fe cf       	rjmp	.-4      	; 0x10d2 <main+0xfa>

000010d6 <get_User_Input>:
end
*/

// --- define task 1  ----------------------------------------
void get_User_Input(void* args) 
  begin
    10d6:	2f 92       	push	r2
    10d8:	3f 92       	push	r3
    10da:	4f 92       	push	r4
    10dc:	5f 92       	push	r5
    10de:	6f 92       	push	r6
    10e0:	7f 92       	push	r7
    10e2:	8f 92       	push	r8
    10e4:	9f 92       	push	r9
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	28 97       	sbiw	r28, 0x08	; 8
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
    110a:	25 e0       	ldi	r18, 0x05	; 5
    110c:	22 2e       	mov	r2, r18
    110e:	31 2c       	mov	r3, r1
    1110:	2c 0e       	add	r2, r28
    1112:	3d 1e       	adc	r3, r29
    1114:	2e 01       	movw	r4, r28
    1116:	08 94       	sec
    1118:	41 1c       	adc	r4, r1
    111a:	51 1c       	adc	r5, r1
		
		if (cmd[0] == 's')
		begin
			trtWait(SEM_SHARED_S) ;
			s_value = finputValue;
			fprintf(stdout,"value of s changed to %.1f\n\n",finputValue);
    111c:	90 e1       	ldi	r25, 0x10	; 16
    111e:	69 2e       	mov	r6, r25
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	79 2e       	mov	r7, r25
		end
		if (cmd[0] == 'p')
		begin
			trtWait(SEM_SHARED_P) ;
			p_value = finputValue;
			fprintf(stdout,"value of p changed to %.1f\n\n",finputValue);
    1124:	8d e2       	ldi	r24, 0x2D	; 45
    1126:	88 2e       	mov	r8, r24
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	98 2e       	mov	r9, r24
		end
		if (cmd[0] == 'i')
		begin
			trtWait(SEM_SHARED_I) ;
			i_value = finputValue;
			fprintf(stdout,"value of i changed to %.1f\n\n",finputValue);
    112c:	0a e4       	ldi	r16, 0x4A	; 74
    112e:	a0 2e       	mov	r10, r16
    1130:	01 e0       	ldi	r16, 0x01	; 1
    1132:	b0 2e       	mov	r11, r16
		end
		if (cmd[0] == 'd')
		begin
			trtWait(SEM_SHARED_D) ;
			d_value = finputValue;
			fprintf(stdout,"value of d changed to %.1f\n\n",finputValue);
    1134:	17 e6       	ldi	r17, 0x67	; 103
    1136:	c1 2e       	mov	r12, r17
    1138:	11 e0       	ldi	r17, 0x01	; 1
    113a:	d1 2e       	mov	r13, r17
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
    113c:	60 91 5c 03 	lds	r22, 0x035C
    1140:	70 91 5d 03 	lds	r23, 0x035D
    1144:	8e e3       	ldi	r24, 0x3E	; 62
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
		fscanf(stdin, "%s %f", cmd, &finputValue) ;
    114c:	2d b7       	in	r18, 0x3d	; 61
    114e:	3e b7       	in	r19, 0x3e	; 62
    1150:	28 50       	subi	r18, 0x08	; 8
    1152:	30 40       	sbci	r19, 0x00	; 0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	3e bf       	out	0x3e, r19	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	2d bf       	out	0x3d, r18	; 61
    115e:	ed b7       	in	r30, 0x3d	; 61
    1160:	fe b7       	in	r31, 0x3e	; 62
    1162:	31 96       	adiw	r30, 0x01	; 1
    1164:	80 91 5a 03 	lds	r24, 0x035A
    1168:	90 91 5b 03 	lds	r25, 0x035B
    116c:	ad b7       	in	r26, 0x3d	; 61
    116e:	be b7       	in	r27, 0x3e	; 62
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	9c 93       	st	X, r25
    1174:	8e 93       	st	-X, r24
    1176:	11 97       	sbiw	r26, 0x01	; 1
    1178:	2a e0       	ldi	r18, 0x0A	; 10
    117a:	31 e0       	ldi	r19, 0x01	; 1
    117c:	33 83       	std	Z+3, r19	; 0x03
    117e:	22 83       	std	Z+2, r18	; 0x02
    1180:	35 82       	std	Z+5, r3	; 0x05
    1182:	24 82       	std	Z+4, r2	; 0x04
    1184:	57 82       	std	Z+7, r5	; 0x07
    1186:	46 82       	std	Z+6, r4	; 0x06
    1188:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <fscanf>
		//trtWait(SEM_STRING_DONE);

		// update shared leds
		
		if (cmd[0] == 's')
    118c:	8d b7       	in	r24, 0x3d	; 61
    118e:	9e b7       	in	r25, 0x3e	; 62
    1190:	08 96       	adiw	r24, 0x08	; 8
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	9e bf       	out	0x3e, r25	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	8d bf       	out	0x3d, r24	; 61
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	83 37       	cpi	r24, 0x73	; 115
    11a0:	b1 f5       	brne	.+108    	; 0x120e <get_User_Input+0x138>
		begin
			trtWait(SEM_SHARED_S) ;
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
			s_value = finputValue;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	ab 81       	ldd	r26, Y+3	; 0x03
    11ae:	bc 81       	ldd	r27, Y+4	; 0x04
    11b0:	80 93 e9 02 	sts	0x02E9, r24
    11b4:	90 93 ea 02 	sts	0x02EA, r25
    11b8:	a0 93 eb 02 	sts	0x02EB, r26
    11bc:	b0 93 ec 02 	sts	0x02EC, r27
			fprintf(stdout,"value of s changed to %.1f\n\n",finputValue);
    11c0:	ed b7       	in	r30, 0x3d	; 61
    11c2:	fe b7       	in	r31, 0x3e	; 62
    11c4:	38 97       	sbiw	r30, 0x08	; 8
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	fe bf       	out	0x3e, r31	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	ed bf       	out	0x3d, r30	; 61
    11d0:	4d b7       	in	r20, 0x3d	; 61
    11d2:	5e b7       	in	r21, 0x3e	; 62
    11d4:	4f 5f       	subi	r20, 0xFF	; 255
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	20 91 5c 03 	lds	r18, 0x035C
    11dc:	30 91 5d 03 	lds	r19, 0x035D
    11e0:	32 83       	std	Z+2, r19	; 0x02
    11e2:	21 83       	std	Z+1, r18	; 0x01
    11e4:	fa 01       	movw	r30, r20
    11e6:	73 82       	std	Z+3, r7	; 0x03
    11e8:	62 82       	std	Z+2, r6	; 0x02
    11ea:	84 83       	std	Z+4, r24	; 0x04
    11ec:	95 83       	std	Z+5, r25	; 0x05
    11ee:	a6 83       	std	Z+6, r26	; 0x06
    11f0:	b7 83       	std	Z+7, r27	; 0x07
    11f2:	0e 94 12 17 	call	0x2e24	; 0x2e24 <fprintf>
			trtSignal(SEM_SHARED_S);
    11f6:	2d b7       	in	r18, 0x3d	; 61
    11f8:	3e b7       	in	r19, 0x3e	; 62
    11fa:	28 5f       	subi	r18, 0xF8	; 248
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	3e bf       	out	0x3e, r19	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	2d bf       	out	0x3d, r18	; 61
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		end
		if (cmd[0] == 'p')
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	80 37       	cpi	r24, 0x70	; 112
    1212:	b1 f5       	brne	.+108    	; 0x1280 <get_User_Input+0x1aa>
		begin
			trtWait(SEM_SHARED_P) ;
    1214:	84 e0       	ldi	r24, 0x04	; 4
    1216:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
			p_value = finputValue;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	ab 81       	ldd	r26, Y+3	; 0x03
    1220:	bc 81       	ldd	r27, Y+4	; 0x04
    1222:	80 93 f2 02 	sts	0x02F2, r24
    1226:	90 93 f3 02 	sts	0x02F3, r25
    122a:	a0 93 f4 02 	sts	0x02F4, r26
    122e:	b0 93 f5 02 	sts	0x02F5, r27
			fprintf(stdout,"value of p changed to %.1f\n\n",finputValue);
    1232:	ed b7       	in	r30, 0x3d	; 61
    1234:	fe b7       	in	r31, 0x3e	; 62
    1236:	38 97       	sbiw	r30, 0x08	; 8
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	fe bf       	out	0x3e, r31	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	ed bf       	out	0x3d, r30	; 61
    1242:	4d b7       	in	r20, 0x3d	; 61
    1244:	5e b7       	in	r21, 0x3e	; 62
    1246:	4f 5f       	subi	r20, 0xFF	; 255
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	20 91 5c 03 	lds	r18, 0x035C
    124e:	30 91 5d 03 	lds	r19, 0x035D
    1252:	32 83       	std	Z+2, r19	; 0x02
    1254:	21 83       	std	Z+1, r18	; 0x01
    1256:	fa 01       	movw	r30, r20
    1258:	93 82       	std	Z+3, r9	; 0x03
    125a:	82 82       	std	Z+2, r8	; 0x02
    125c:	84 83       	std	Z+4, r24	; 0x04
    125e:	95 83       	std	Z+5, r25	; 0x05
    1260:	a6 83       	std	Z+6, r26	; 0x06
    1262:	b7 83       	std	Z+7, r27	; 0x07
    1264:	0e 94 12 17 	call	0x2e24	; 0x2e24 <fprintf>
			trtSignal(SEM_SHARED_P);
    1268:	2d b7       	in	r18, 0x3d	; 61
    126a:	3e b7       	in	r19, 0x3e	; 62
    126c:	28 5f       	subi	r18, 0xF8	; 248
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	3e bf       	out	0x3e, r19	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	2d bf       	out	0x3d, r18	; 61
    127a:	84 e0       	ldi	r24, 0x04	; 4
    127c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		end
		if (cmd[0] == 'i')
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	89 36       	cpi	r24, 0x69	; 105
    1284:	b1 f5       	brne	.+108    	; 0x12f2 <get_User_Input+0x21c>
		begin
			trtWait(SEM_SHARED_I) ;
    1286:	85 e0       	ldi	r24, 0x05	; 5
    1288:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
			i_value = finputValue;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	ab 81       	ldd	r26, Y+3	; 0x03
    1292:	bc 81       	ldd	r27, Y+4	; 0x04
    1294:	80 93 f6 02 	sts	0x02F6, r24
    1298:	90 93 f7 02 	sts	0x02F7, r25
    129c:	a0 93 f8 02 	sts	0x02F8, r26
    12a0:	b0 93 f9 02 	sts	0x02F9, r27
			fprintf(stdout,"value of i changed to %.1f\n\n",finputValue);
    12a4:	ed b7       	in	r30, 0x3d	; 61
    12a6:	fe b7       	in	r31, 0x3e	; 62
    12a8:	38 97       	sbiw	r30, 0x08	; 8
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	fe bf       	out	0x3e, r31	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	ed bf       	out	0x3d, r30	; 61
    12b4:	4d b7       	in	r20, 0x3d	; 61
    12b6:	5e b7       	in	r21, 0x3e	; 62
    12b8:	4f 5f       	subi	r20, 0xFF	; 255
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	20 91 5c 03 	lds	r18, 0x035C
    12c0:	30 91 5d 03 	lds	r19, 0x035D
    12c4:	32 83       	std	Z+2, r19	; 0x02
    12c6:	21 83       	std	Z+1, r18	; 0x01
    12c8:	fa 01       	movw	r30, r20
    12ca:	b3 82       	std	Z+3, r11	; 0x03
    12cc:	a2 82       	std	Z+2, r10	; 0x02
    12ce:	84 83       	std	Z+4, r24	; 0x04
    12d0:	95 83       	std	Z+5, r25	; 0x05
    12d2:	a6 83       	std	Z+6, r26	; 0x06
    12d4:	b7 83       	std	Z+7, r27	; 0x07
    12d6:	0e 94 12 17 	call	0x2e24	; 0x2e24 <fprintf>
			trtSignal(SEM_SHARED_I);
    12da:	2d b7       	in	r18, 0x3d	; 61
    12dc:	3e b7       	in	r19, 0x3e	; 62
    12de:	28 5f       	subi	r18, 0xF8	; 248
    12e0:	3f 4f       	sbci	r19, 0xFF	; 255
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	3e bf       	out	0x3e, r19	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	2d bf       	out	0x3d, r18	; 61
    12ec:	85 e0       	ldi	r24, 0x05	; 5
    12ee:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		end
		if (cmd[0] == 'd')
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	84 36       	cpi	r24, 0x64	; 100
    12f6:	b1 f5       	brne	.+108    	; 0x1364 <get_User_Input+0x28e>
		begin
			trtWait(SEM_SHARED_D) ;
    12f8:	86 e0       	ldi	r24, 0x06	; 6
    12fa:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
			d_value = finputValue;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	ab 81       	ldd	r26, Y+3	; 0x03
    1304:	bc 81       	ldd	r27, Y+4	; 0x04
    1306:	80 93 ee 02 	sts	0x02EE, r24
    130a:	90 93 ef 02 	sts	0x02EF, r25
    130e:	a0 93 f0 02 	sts	0x02F0, r26
    1312:	b0 93 f1 02 	sts	0x02F1, r27
			fprintf(stdout,"value of d changed to %.1f\n\n",finputValue);
    1316:	ed b7       	in	r30, 0x3d	; 61
    1318:	fe b7       	in	r31, 0x3e	; 62
    131a:	38 97       	sbiw	r30, 0x08	; 8
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	fe bf       	out	0x3e, r31	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	ed bf       	out	0x3d, r30	; 61
    1326:	4d b7       	in	r20, 0x3d	; 61
    1328:	5e b7       	in	r21, 0x3e	; 62
    132a:	4f 5f       	subi	r20, 0xFF	; 255
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	20 91 5c 03 	lds	r18, 0x035C
    1332:	30 91 5d 03 	lds	r19, 0x035D
    1336:	32 83       	std	Z+2, r19	; 0x02
    1338:	21 83       	std	Z+1, r18	; 0x01
    133a:	fa 01       	movw	r30, r20
    133c:	d3 82       	std	Z+3, r13	; 0x03
    133e:	c2 82       	std	Z+2, r12	; 0x02
    1340:	84 83       	std	Z+4, r24	; 0x04
    1342:	95 83       	std	Z+5, r25	; 0x05
    1344:	a6 83       	std	Z+6, r26	; 0x06
    1346:	b7 83       	std	Z+7, r27	; 0x07
    1348:	0e 94 12 17 	call	0x2e24	; 0x2e24 <fprintf>
			trtSignal(SEM_SHARED_D);
    134c:	2d b7       	in	r18, 0x3d	; 61
    134e:	3e b7       	in	r19, 0x3e	; 62
    1350:	28 5f       	subi	r18, 0xF8	; 248
    1352:	3f 4f       	sbci	r19, 0xFF	; 255
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	3e bf       	out	0x3e, r19	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	2d bf       	out	0x3d, r18	; 61
    135e:	86 e0       	ldi	r24, 0x06	; 6
    1360:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
    1364:	20 91 51 03 	lds	r18, 0x0351
    1368:	30 91 52 03 	lds	r19, 0x0352
    136c:	40 91 53 03 	lds	r20, 0x0353
    1370:	50 91 54 03 	lds	r21, 0x0354
    1374:	a9 01       	movw	r20, r18
    1376:	33 27       	eor	r19, r19
    1378:	22 27       	eor	r18, r18
    137a:	60 91 84 00 	lds	r22, 0x0084
    137e:	70 91 85 00 	lds	r23, 0x0085
		end
		
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
    1382:	e0 90 84 00 	lds	r14, 0x0084
    1386:	f0 90 85 00 	lds	r15, 0x0085
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	62 0f       	add	r22, r18
    1390:	73 1f       	adc	r23, r19
    1392:	84 1f       	adc	r24, r20
    1394:	95 1f       	adc	r25, r21
    1396:	66 5e       	subi	r22, 0xE6	; 230
    1398:	79 4f       	sbci	r23, 0xF9	; 249
    139a:	8f 4f       	sbci	r24, 0xFF	; 255
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	2e 0d       	add	r18, r14
    13a4:	3f 1d       	adc	r19, r15
    13a6:	40 1f       	adc	r20, r16
    13a8:	51 1f       	adc	r21, r17
    13aa:	21 5b       	subi	r18, 0xB1	; 177
    13ac:	3d 4e       	sbci	r19, 0xED	; 237
    13ae:	4f 4f       	sbci	r20, 0xFF	; 255
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <trtSleepUntil>
    13b6:	c2 ce       	rjmp	.-636    	; 0x113c <get_User_Input+0x66>

000013b8 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
    13b8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCDinit>
	LCDcursorOFF();
    13bc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <LCDcursorOFF>
	LCDclr();	//clear the display
    13c0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LCDclr>
	LCDGotoXY(0,0);
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	0e 94 01 0b 	call	0x1602	; 0x1602 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    13cc:	81 ee       	ldi	r24, 0xE1	; 225
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 10 0b 	call	0x1620	; 0x1620 <CopyStringtoLCD>
	LCD_char_count = 0;
    13d8:	10 92 ed 02 	sts	0x02ED, r1
end
    13dc:	08 95       	ret

000013de <get_Fan_Speed>:

// --- define task 3  ----------------------------------------
// writes the desired fan speed and the current fan speed to the LCD
// approx five times a second
void get_Fan_Speed(void* args) 
  begin	
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
  	uint32_t rel, dead ;
	timer2_init();
    13f2:	0e 94 d3 05 	call	0xba6	; 0xba6 <timer2_init>
	timer0_init();    // sets up the fast pwm
    13f6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <timer0_init>
	LCD_init();    // init LCD for our use
    13fa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <LCD_init>
	port_init();    // init port c
    13fe:	0e 94 c9 05 	call	0xb92	; 0xb92 <port_init>

	while(1)
	begin
		trtWait(SEM_SHARED_S) ;
		sprintf(lcd_buffer,"input RPM: %-i ", (int)s_value);
    1402:	c6 ed       	ldi	r28, 0xD6	; 214
    1404:	d2 e0       	ldi	r29, 0x02	; 2
    1406:	e4 e8       	ldi	r30, 0x84	; 132
    1408:	ae 2e       	mov	r10, r30
    140a:	e1 e0       	ldi	r30, 0x01	; 1
    140c:	be 2e       	mov	r11, r30
		trtSignal(SEM_SHARED_S) ;
		LCDGotoXY(0, 0);
		LCDstring(lcd_buffer, strlen(lcd_buffer));

		trtWait(SEM_SHARED_RPM);
		sprintf(lcd_buffer,"fan RPM: %-i   ", RPM);
    140e:	74 e9       	ldi	r23, 0x94	; 148
    1410:	c7 2e       	mov	r12, r23
    1412:	71 e0       	ldi	r23, 0x01	; 1
    1414:	d7 2e       	mov	r13, r23
	LCD_init();    // init LCD for our use
	port_init();    // init port c

	while(1)
	begin
		trtWait(SEM_SHARED_S) ;
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		sprintf(lcd_buffer,"input RPM: %-i ", (int)s_value);
    141c:	60 91 e9 02 	lds	r22, 0x02E9
    1420:	70 91 ea 02 	lds	r23, 0x02EA
    1424:	80 91 eb 02 	lds	r24, 0x02EB
    1428:	90 91 ec 02 	lds	r25, 0x02EC
    142c:	00 d0       	rcall	.+0      	; 0x142e <get_Fan_Speed+0x50>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <get_Fan_Speed+0x52>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <get_Fan_Speed+0x54>
    1432:	0d b7       	in	r16, 0x3d	; 61
    1434:	1e b7       	in	r17, 0x3e	; 62
    1436:	0f 5f       	subi	r16, 0xFF	; 255
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	ad b7       	in	r26, 0x3d	; 61
    143c:	be b7       	in	r27, 0x3e	; 62
    143e:	12 96       	adiw	r26, 0x02	; 2
    1440:	dc 93       	st	X, r29
    1442:	ce 93       	st	-X, r28
    1444:	11 97       	sbiw	r26, 0x01	; 1
    1446:	f8 01       	movw	r30, r16
    1448:	b3 82       	std	Z+3, r11	; 0x03
    144a:	a2 82       	std	Z+2, r10	; 0x02
    144c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__fixsfsi>
    1450:	d8 01       	movw	r26, r16
    1452:	15 96       	adiw	r26, 0x05	; 5
    1454:	7c 93       	st	X, r23
    1456:	6e 93       	st	-X, r22
    1458:	14 97       	sbiw	r26, 0x04	; 4
    145a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <sprintf>
		//sprintf(lcd_buffer,"%d, %d", (int)s_value, RPM);
		trtSignal(SEM_SHARED_S) ;
    145e:	ed b7       	in	r30, 0x3d	; 61
    1460:	fe b7       	in	r31, 0x3e	; 62
    1462:	36 96       	adiw	r30, 0x06	; 6
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	fe bf       	out	0x3e, r31	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	ed bf       	out	0x3d, r30	; 61
    146e:	83 e0       	ldi	r24, 0x03	; 3
    1470:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		LCDGotoXY(0, 0);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	0e 94 01 0b 	call	0x1602	; 0x1602 <LCDGotoXY>
		LCDstring(lcd_buffer, strlen(lcd_buffer));
    147c:	fe 01       	movw	r30, r28
    147e:	01 90       	ld	r0, Z+
    1480:	00 20       	and	r0, r0
    1482:	e9 f7       	brne	.-6      	; 0x147e <get_Fan_Speed+0xa0>
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	e6 5d       	subi	r30, 0xD6	; 214
    1488:	f2 40       	sbci	r31, 0x02	; 2
    148a:	ce 01       	movw	r24, r28
    148c:	6e 2f       	mov	r22, r30
    148e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCDstring>

		trtWait(SEM_SHARED_RPM);
    1492:	87 e0       	ldi	r24, 0x07	; 7
    1494:	0e 94 54 03 	call	0x6a8	; 0x6a8 <trtWait>
		sprintf(lcd_buffer,"fan RPM: %-i   ", RPM);
    1498:	00 d0       	rcall	.+0      	; 0x149a <get_Fan_Speed+0xbc>
    149a:	00 d0       	rcall	.+0      	; 0x149c <get_Fan_Speed+0xbe>
    149c:	00 d0       	rcall	.+0      	; 0x149e <get_Fan_Speed+0xc0>
    149e:	ed b7       	in	r30, 0x3d	; 61
    14a0:	fe b7       	in	r31, 0x3e	; 62
    14a2:	31 96       	adiw	r30, 0x01	; 1
    14a4:	ad b7       	in	r26, 0x3d	; 61
    14a6:	be b7       	in	r27, 0x3e	; 62
    14a8:	12 96       	adiw	r26, 0x02	; 2
    14aa:	dc 93       	st	X, r29
    14ac:	ce 93       	st	-X, r28
    14ae:	11 97       	sbiw	r26, 0x01	; 1
    14b0:	d3 82       	std	Z+3, r13	; 0x03
    14b2:	c2 82       	std	Z+2, r12	; 0x02
    14b4:	80 91 e7 02 	lds	r24, 0x02E7
    14b8:	90 91 e8 02 	lds	r25, 0x02E8
    14bc:	95 83       	std	Z+5, r25	; 0x05
    14be:	84 83       	std	Z+4, r24	; 0x04
    14c0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <sprintf>
		//sprintf(lcd_buffer,"err %d %d", error, (int)d_value * (error-prev_error));
		//sprintf(lcd_buffer," %-i %-i %-i",(int)p_value, (int)i_value,(int)d_value);
		trtSignal(SEM_SHARED_RPM);
    14c4:	ed b7       	in	r30, 0x3d	; 61
    14c6:	fe b7       	in	r31, 0x3e	; 62
    14c8:	36 96       	adiw	r30, 0x06	; 6
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	fe bf       	out	0x3e, r31	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	ed bf       	out	0x3d, r30	; 61
    14d4:	87 e0       	ldi	r24, 0x07	; 7
    14d6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <trtSignal>
		LCDGotoXY(0, 1);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	0e 94 01 0b 	call	0x1602	; 0x1602 <LCDGotoXY>
		LCDstring(lcd_buffer, strlen(lcd_buffer));
    14e2:	fe 01       	movw	r30, r28
    14e4:	01 90       	ld	r0, Z+
    14e6:	00 20       	and	r0, r0
    14e8:	e9 f7       	brne	.-6      	; 0x14e4 <get_Fan_Speed+0x106>
    14ea:	31 97       	sbiw	r30, 0x01	; 1
    14ec:	e6 5d       	subi	r30, 0xD6	; 214
    14ee:	f2 40       	sbci	r31, 0x02	; 2
    14f0:	ce 01       	movw	r24, r28
    14f2:	6e 2f       	mov	r22, r30
    14f4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCDstring>
    14f8:	20 91 51 03 	lds	r18, 0x0351
    14fc:	30 91 52 03 	lds	r19, 0x0352
    1500:	40 91 53 03 	lds	r20, 0x0353
    1504:	50 91 54 03 	lds	r21, 0x0354
    1508:	a9 01       	movw	r20, r18
    150a:	33 27       	eor	r19, r19
    150c:	22 27       	eor	r18, r18
    150e:	60 91 84 00 	lds	r22, 0x0084
    1512:	70 91 85 00 	lds	r23, 0x0085
		

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
    1516:	e0 90 84 00 	lds	r14, 0x0084
    151a:	f0 90 85 00 	lds	r15, 0x0085
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	62 0f       	add	r22, r18
    1524:	73 1f       	adc	r23, r19
    1526:	84 1f       	adc	r24, r20
    1528:	95 1f       	adc	r25, r21
    152a:	66 5e       	subi	r22, 0xE6	; 230
    152c:	79 4f       	sbci	r23, 0xF9	; 249
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	00 e0       	ldi	r16, 0x00	; 0
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	2e 0d       	add	r18, r14
    1538:	3f 1d       	adc	r19, r15
    153a:	40 1f       	adc	r20, r16
    153c:	51 1f       	adc	r21, r17
    153e:	21 5b       	subi	r18, 0xB1	; 177
    1540:	3d 4e       	sbci	r19, 0xED	; 237
    1542:	4f 4f       	sbci	r20, 0xFF	; 255
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <trtSleepUntil>
    154a:	65 cf       	rjmp	.-310    	; 0x1416 <get_Fan_Speed+0x38>

0000154c <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    154c:	28 2f       	mov	r18, r24
    154e:	20 7f       	andi	r18, 0xF0	; 240
    1550:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1552:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1554:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1556:	20 e4       	ldi	r18, 0x40	; 64
    1558:	3f e1       	ldi	r19, 0x1F	; 31
    155a:	f9 01       	movw	r30, r18
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1560:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1562:	40 98       	cbi	0x08, 0	; 8
    1564:	f9 01       	movw	r30, r18
    1566:	31 97       	sbiw	r30, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	44 e0       	ldi	r20, 0x04	; 4
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	4a 95       	dec	r20
    1574:	e1 f7       	brne	.-8      	; 0x156e <LCDsendChar+0x22>
    1576:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1578:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    157a:	42 9a       	sbi	0x08, 2	; 8
    157c:	c9 01       	movw	r24, r18
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1582:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1584:	40 98       	cbi	0x08, 0	; 8
    1586:	c9 01       	movw	r24, r18
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    158c:	08 95       	ret

0000158e <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    158e:	28 2f       	mov	r18, r24
    1590:	20 7f       	andi	r18, 0xF0	; 240
    1592:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    1594:	42 9a       	sbi	0x08, 2	; 8
    1596:	20 e4       	ldi	r18, 0x40	; 64
    1598:	3f e1       	ldi	r19, 0x1F	; 31
    159a:	f9 01       	movw	r30, r18
    159c:	31 97       	sbiw	r30, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    15a0:	42 98       	cbi	0x08, 2	; 8
    15a2:	f9 01       	movw	r30, r18
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	54 e0       	ldi	r21, 0x04	; 4
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	5a 95       	dec	r21
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <LCDsendCommand+0x1e>
    15b4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    15b6:	42 9a       	sbi	0x08, 2	; 8
    15b8:	c9 01       	movw	r24, r18
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    15be:	42 98       	cbi	0x08, 2	; 8
    15c0:	c9 01       	movw	r24, r18
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    15c6:	08 95       	ret

000015c8 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    15ce:	08 95       	ret

000015d0 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    15d6:	08 95       	ret

000015d8 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	49 f0       	breq	.+18     	; 0x15f8 <LCDstring+0x20>
    15e6:	ec 01       	movw	r28, r24
    15e8:	10 e0       	ldi	r17, 0x00	; 0
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    15ec:	89 91       	ld	r24, Y+
    15ee:	0e 94 a6 0a 	call	0x154c	; 0x154c <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    15f2:	1f 5f       	subi	r17, 0xFF	; 255
    15f4:	10 17       	cp	r17, r16
    15f6:	d0 f3       	brcs	.-12     	; 0x15ec <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1602:	62 30       	cpi	r22, 0x02	; 2
    1604:	31 f0       	breq	.+12     	; 0x1612 <LCDGotoXY+0x10>
    1606:	63 30       	cpi	r22, 0x03	; 3
    1608:	31 f0       	breq	.+12     	; 0x1616 <LCDGotoXY+0x14>
    160a:	61 30       	cpi	r22, 0x01	; 1
    160c:	29 f4       	brne	.+10     	; 0x1618 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    160e:	80 5c       	subi	r24, 0xC0	; 192
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1612:	8c 5e       	subi	r24, 0xEC	; 236
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1616:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1618:	80 68       	ori	r24, 0x80	; 128
    161a:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
	
}
    161e:	08 95       	ret

00001620 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ec 01       	movw	r28, r24
    1628:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    162a:	64 2f       	mov	r22, r20
    162c:	0e 94 01 0b 	call	0x1602	; 0x1602 <LCDGotoXY>
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	03 c0       	rjmp	.+6      	; 0x163a <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1634:	0e 94 a6 0a 	call	0x154c	; 0x154c <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1638:	1f 5f       	subi	r17, 0xFF	; 255
    163a:	fe 01       	movw	r30, r28
    163c:	e1 0f       	add	r30, r17
    163e:	f1 1d       	adc	r31, r1
    1640:	84 91       	lpm	r24, Z+
    1642:	88 23       	and	r24, r24
    1644:	b9 f7       	brne	.-18     	; 0x1634 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	08 95       	ret

0000164e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	7c 01       	movw	r14, r24
    165c:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    165e:	11 0f       	add	r17, r17
    1660:	11 0f       	add	r17, r17
    1662:	11 0f       	add	r17, r17
    1664:	10 64       	ori	r17, 0x40	; 64
    1666:	c0 e0       	ldi	r28, 0x00	; 0
    1668:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    166a:	f7 01       	movw	r30, r14
    166c:	ec 0f       	add	r30, r28
    166e:	fd 1f       	adc	r31, r29
    1670:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1672:	81 2f       	mov	r24, r17
    1674:	8c 0f       	add	r24, r28
    1676:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
		LCDsendChar(pcc);
    167a:	80 2f       	mov	r24, r16
    167c:	0e 94 a6 0a 	call	0x154c	; 0x154c <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1680:	21 96       	adiw	r28, 0x01	; 1
    1682:	c8 30       	cpi	r28, 0x08	; 8
    1684:	d1 05       	cpc	r29, r1
    1686:	89 f7       	brne	.-30     	; 0x166a <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	08 95       	ret

00001696 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	80 e6       	ldi	r24, 0x60	; 96
    169e:	9a ee       	ldi	r25, 0xEA	; 234
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    16a4:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    16a6:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    16a8:	87 b1       	in	r24, 0x07	; 7
    16aa:	80 6f       	ori	r24, 0xF0	; 240
    16ac:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    16ae:	87 b1       	in	r24, 0x07	; 7
    16b0:	87 60       	ori	r24, 0x07	; 7
    16b2:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    16b4:	80 e3       	ldi	r24, 0x30	; 48
    16b6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    16b8:	42 9a       	sbi	0x08, 2	; 8
    16ba:	20 e4       	ldi	r18, 0x40	; 64
    16bc:	3f e1       	ldi	r19, 0x1F	; 31
    16be:	f9 01       	movw	r30, r18
    16c0:	31 97       	sbiw	r30, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    16c4:	42 98       	cbi	0x08, 2	; 8
    16c6:	f9 01       	movw	r30, r18
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    16cc:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    16ce:	42 9a       	sbi	0x08, 2	; 8
    16d0:	c9 01       	movw	r24, r18
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    16d6:	42 98       	cbi	0x08, 2	; 8
    16d8:	c9 01       	movw	r24, r18
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    16e2:	42 9a       	sbi	0x08, 2	; 8
    16e4:	c9 01       	movw	r24, r18
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    16ea:	42 98       	cbi	0x08, 2	; 8
    16ec:	c9 01       	movw	r24, r18
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    16f2:	88 e2       	ldi	r24, 0x28	; 40
    16f4:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    16f8:	8c e0       	ldi	r24, 0x0C	; 12
    16fa:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
    16fe:	cb e5       	ldi	r28, 0x5B	; 91
    1700:	d1 e0       	ldi	r29, 0x01	; 1
    1702:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1704:	16 2f       	mov	r17, r22
    1706:	1f 5f       	subi	r17, 0xFF	; 255
    1708:	ce 01       	movw	r24, r28
    170a:	0e 94 27 0b 	call	0x164e	; 0x164e <LCDdefinechar>
    170e:	28 96       	adiw	r28, 0x08	; 8
    1710:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1712:	18 30       	cpi	r17, 0x08	; 8
    1714:	b9 f7       	brne	.-18     	; 0x1704 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	08 95       	ret

0000171e <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	08 2f       	mov	r16, r24
    1724:	10 e0       	ldi	r17, 0x00	; 0
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1728:	8e e1       	ldi	r24, 0x1E	; 30
    172a:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    172e:	1f 5f       	subi	r17, 0xFF	; 255
    1730:	10 17       	cp	r17, r16
    1732:	d0 f3       	brcs	.-12     	; 0x1728 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	08 2f       	mov	r16, r24
    1740:	10 e0       	ldi	r17, 0x00	; 0
    1742:	04 c0       	rjmp	.+8      	; 0x174c <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1744:	88 e1       	ldi	r24, 0x18	; 24
    1746:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    174a:	1f 5f       	subi	r17, 0xFF	; 255
    174c:	10 17       	cp	r17, r16
    174e:	d0 f3       	brcs	.-12     	; 0x1744 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1756:	8e e0       	ldi	r24, 0x0E	; 14
    1758:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    175c:	08 95       	ret

0000175e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    175e:	8f e0       	ldi	r24, 0x0F	; 15
    1760:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    1764:	08 95       	ret

00001766 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1766:	8c e0       	ldi	r24, 0x0C	; 12
    1768:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    176c:	08 95       	ret

0000176e <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    176e:	88 e0       	ldi	r24, 0x08	; 8
    1770:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    1774:	08 95       	ret

00001776 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1776:	8c e0       	ldi	r24, 0x0C	; 12
    1778:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
}
    177c:	08 95       	ret

0000177e <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	08 2f       	mov	r16, r24
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1788:	80 e1       	ldi	r24, 0x10	; 16
    178a:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    178e:	1f 5f       	subi	r17, 0xFF	; 255
    1790:	10 17       	cp	r17, r16
    1792:	d0 f3       	brcs	.-12     	; 0x1788 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	08 95       	ret

0000179a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	08 2f       	mov	r16, r24
    17a0:	10 e0       	ldi	r17, 0x00	; 0
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    17a4:	84 e1       	ldi	r24, 0x14	; 20
    17a6:	0e 94 c7 0a 	call	0x158e	; 0x158e <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    17aa:	1f 5f       	subi	r17, 0xFF	; 255
    17ac:	10 17       	cp	r17, r16
    17ae:	d0 f3       	brcs	.-12     	; 0x17a4 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    17c6:	96 e0       	ldi	r25, 0x06	; 6
    17c8:	89 9f       	mul	r24, r25
    17ca:	c0 01       	movw	r24, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	24 2f       	mov	r18, r20
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	ac 01       	movw	r20, r24
    17d4:	42 9f       	mul	r20, r18
    17d6:	c0 01       	movw	r24, r0
    17d8:	43 9f       	mul	r20, r19
    17da:	90 0d       	add	r25, r0
    17dc:	52 9f       	mul	r21, r18
    17de:	90 0d       	add	r25, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	0e 94 4b 18 	call	0x3096	; 0x3096 <__divmodhi4>
    17e8:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    17ea:	cb 01       	movw	r24, r22
    17ec:	66 e0       	ldi	r22, 0x06	; 6
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodhi4>
    17f4:	e8 2e       	mov	r14, r24
    17f6:	ff 24       	eor	r15, r15
    17f8:	00 e0       	ldi	r16, 0x00	; 0
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	12 c0       	rjmp	.+36     	; 0x1822 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    17fe:	c8 01       	movw	r24, r16
    1800:	05 96       	adiw	r24, 0x05	; 5
    1802:	c8 17       	cp	r28, r24
    1804:	d9 07       	cpc	r29, r25
    1806:	10 f0       	brcs	.+4      	; 0x180c <LCDprogressBar+0x56>
    1808:	85 e0       	ldi	r24, 0x05	; 5
    180a:	06 c0       	rjmp	.+12     	; 0x1818 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    180c:	c0 17       	cp	r28, r16
    180e:	d1 07       	cpc	r29, r17
    1810:	10 f0       	brcs	.+4      	; 0x1816 <LCDprogressBar+0x60>
    1812:	8e 2d       	mov	r24, r14
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <LCDprogressBar+0x62>
    1816:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1818:	0e 94 a6 0a 	call	0x154c	; 0x154c <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    181c:	f3 94       	inc	r15
    181e:	0a 5f       	subi	r16, 0xFA	; 250
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	fd 14       	cp	r15, r13
    1824:	60 f3       	brcs	.-40     	; 0x17fe <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	08 95       	ret

00001836 <vfprintf>:
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	61 97       	sbiw	r28, 0x11	; 17
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	3c 01       	movw	r6, r24
    186c:	7f 87       	std	Y+15, r23	; 0x0f
    186e:	6e 87       	std	Y+14, r22	; 0x0e
    1870:	6a 01       	movw	r12, r20
    1872:	fc 01       	movw	r30, r24
    1874:	17 82       	std	Z+7, r1	; 0x07
    1876:	16 82       	std	Z+6, r1	; 0x06
    1878:	83 81       	ldd	r24, Z+3	; 0x03
    187a:	81 fd       	sbrc	r24, 1
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfprintf+0x4e>
    187e:	6f ef       	ldi	r22, 0xFF	; 255
    1880:	7f ef       	ldi	r23, 0xFF	; 255
    1882:	6f c3       	rjmp	.+1758   	; 0x1f62 <vfprintf+0x72c>
    1884:	9e 01       	movw	r18, r28
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	39 8b       	std	Y+17, r19	; 0x11
    188c:	28 8b       	std	Y+16, r18	; 0x10
    188e:	f3 01       	movw	r30, r6
    1890:	23 81       	ldd	r18, Z+3	; 0x03
    1892:	ee 85       	ldd	r30, Y+14	; 0x0e
    1894:	ff 85       	ldd	r31, Y+15	; 0x0f
    1896:	23 fd       	sbrc	r18, 3
    1898:	85 91       	lpm	r24, Z+
    189a:	23 ff       	sbrs	r18, 3
    189c:	81 91       	ld	r24, Z+
    189e:	ff 87       	std	Y+15, r31	; 0x0f
    18a0:	ee 87       	std	Y+14, r30	; 0x0e
    18a2:	88 23       	and	r24, r24
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <vfprintf+0x72>
    18a6:	5a c3       	rjmp	.+1716   	; 0x1f5c <vfprintf+0x726>
    18a8:	85 32       	cpi	r24, 0x25	; 37
    18aa:	51 f4       	brne	.+20     	; 0x18c0 <vfprintf+0x8a>
    18ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    18ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    18b0:	23 fd       	sbrc	r18, 3
    18b2:	85 91       	lpm	r24, Z+
    18b4:	23 ff       	sbrs	r18, 3
    18b6:	81 91       	ld	r24, Z+
    18b8:	ff 87       	std	Y+15, r31	; 0x0f
    18ba:	ee 87       	std	Y+14, r30	; 0x0e
    18bc:	85 32       	cpi	r24, 0x25	; 37
    18be:	29 f4       	brne	.+10     	; 0x18ca <vfprintf+0x94>
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b3 01       	movw	r22, r6
    18c4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    18c8:	e2 cf       	rjmp	.-60     	; 0x188e <vfprintf+0x58>
    18ca:	98 2f       	mov	r25, r24
    18cc:	10 e0       	ldi	r17, 0x00	; 0
    18ce:	88 24       	eor	r8, r8
    18d0:	99 24       	eor	r9, r9
    18d2:	10 32       	cpi	r17, 0x20	; 32
    18d4:	b0 f4       	brcc	.+44     	; 0x1902 <vfprintf+0xcc>
    18d6:	9b 32       	cpi	r25, 0x2B	; 43
    18d8:	69 f0       	breq	.+26     	; 0x18f4 <vfprintf+0xbe>
    18da:	9c 32       	cpi	r25, 0x2C	; 44
    18dc:	28 f4       	brcc	.+10     	; 0x18e8 <vfprintf+0xb2>
    18de:	90 32       	cpi	r25, 0x20	; 32
    18e0:	51 f0       	breq	.+20     	; 0x18f6 <vfprintf+0xc0>
    18e2:	93 32       	cpi	r25, 0x23	; 35
    18e4:	71 f4       	brne	.+28     	; 0x1902 <vfprintf+0xcc>
    18e6:	0b c0       	rjmp	.+22     	; 0x18fe <vfprintf+0xc8>
    18e8:	9d 32       	cpi	r25, 0x2D	; 45
    18ea:	39 f0       	breq	.+14     	; 0x18fa <vfprintf+0xc4>
    18ec:	90 33       	cpi	r25, 0x30	; 48
    18ee:	49 f4       	brne	.+18     	; 0x1902 <vfprintf+0xcc>
    18f0:	11 60       	ori	r17, 0x01	; 1
    18f2:	28 c0       	rjmp	.+80     	; 0x1944 <vfprintf+0x10e>
    18f4:	12 60       	ori	r17, 0x02	; 2
    18f6:	14 60       	ori	r17, 0x04	; 4
    18f8:	25 c0       	rjmp	.+74     	; 0x1944 <vfprintf+0x10e>
    18fa:	18 60       	ori	r17, 0x08	; 8
    18fc:	23 c0       	rjmp	.+70     	; 0x1944 <vfprintf+0x10e>
    18fe:	10 61       	ori	r17, 0x10	; 16
    1900:	21 c0       	rjmp	.+66     	; 0x1944 <vfprintf+0x10e>
    1902:	17 fd       	sbrc	r17, 7
    1904:	2a c0       	rjmp	.+84     	; 0x195a <vfprintf+0x124>
    1906:	89 2f       	mov	r24, r25
    1908:	80 53       	subi	r24, 0x30	; 48
    190a:	8a 30       	cpi	r24, 0x0A	; 10
    190c:	78 f4       	brcc	.+30     	; 0x192c <vfprintf+0xf6>
    190e:	16 ff       	sbrs	r17, 6
    1910:	06 c0       	rjmp	.+12     	; 0x191e <vfprintf+0xe8>
    1912:	fa e0       	ldi	r31, 0x0A	; 10
    1914:	9f 9e       	mul	r9, r31
    1916:	90 2c       	mov	r9, r0
    1918:	11 24       	eor	r1, r1
    191a:	98 0e       	add	r9, r24
    191c:	13 c0       	rjmp	.+38     	; 0x1944 <vfprintf+0x10e>
    191e:	3a e0       	ldi	r19, 0x0A	; 10
    1920:	83 9e       	mul	r8, r19
    1922:	80 2c       	mov	r8, r0
    1924:	11 24       	eor	r1, r1
    1926:	88 0e       	add	r8, r24
    1928:	10 62       	ori	r17, 0x20	; 32
    192a:	0c c0       	rjmp	.+24     	; 0x1944 <vfprintf+0x10e>
    192c:	9e 32       	cpi	r25, 0x2E	; 46
    192e:	21 f4       	brne	.+8      	; 0x1938 <vfprintf+0x102>
    1930:	16 fd       	sbrc	r17, 6
    1932:	14 c3       	rjmp	.+1576   	; 0x1f5c <vfprintf+0x726>
    1934:	10 64       	ori	r17, 0x40	; 64
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <vfprintf+0x10e>
    1938:	9c 36       	cpi	r25, 0x6C	; 108
    193a:	11 f4       	brne	.+4      	; 0x1940 <vfprintf+0x10a>
    193c:	10 68       	ori	r17, 0x80	; 128
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0x10e>
    1940:	98 36       	cpi	r25, 0x68	; 104
    1942:	59 f4       	brne	.+22     	; 0x195a <vfprintf+0x124>
    1944:	ee 85       	ldd	r30, Y+14	; 0x0e
    1946:	ff 85       	ldd	r31, Y+15	; 0x0f
    1948:	23 fd       	sbrc	r18, 3
    194a:	95 91       	lpm	r25, Z+
    194c:	23 ff       	sbrs	r18, 3
    194e:	91 91       	ld	r25, Z+
    1950:	ff 87       	std	Y+15, r31	; 0x0f
    1952:	ee 87       	std	Y+14, r30	; 0x0e
    1954:	99 23       	and	r25, r25
    1956:	09 f0       	breq	.+2      	; 0x195a <vfprintf+0x124>
    1958:	bc cf       	rjmp	.-136    	; 0x18d2 <vfprintf+0x9c>
    195a:	89 2f       	mov	r24, r25
    195c:	85 54       	subi	r24, 0x45	; 69
    195e:	83 30       	cpi	r24, 0x03	; 3
    1960:	20 f4       	brcc	.+8      	; 0x196a <vfprintf+0x134>
    1962:	81 2f       	mov	r24, r17
    1964:	80 61       	ori	r24, 0x10	; 16
    1966:	90 5e       	subi	r25, 0xE0	; 224
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <vfprintf+0x142>
    196a:	89 2f       	mov	r24, r25
    196c:	85 56       	subi	r24, 0x65	; 101
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	08 f0       	brcs	.+2      	; 0x1974 <vfprintf+0x13e>
    1972:	9f c1       	rjmp	.+830    	; 0x1cb2 <vfprintf+0x47c>
    1974:	81 2f       	mov	r24, r17
    1976:	8f 7e       	andi	r24, 0xEF	; 239
    1978:	86 fd       	sbrc	r24, 6
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vfprintf+0x14a>
    197c:	76 e0       	ldi	r23, 0x06	; 6
    197e:	97 2e       	mov	r9, r23
    1980:	6f e3       	ldi	r22, 0x3F	; 63
    1982:	f6 2e       	mov	r15, r22
    1984:	f8 22       	and	r15, r24
    1986:	95 36       	cpi	r25, 0x65	; 101
    1988:	19 f4       	brne	.+6      	; 0x1990 <vfprintf+0x15a>
    198a:	f0 e4       	ldi	r31, 0x40	; 64
    198c:	ff 2a       	or	r15, r31
    198e:	07 c0       	rjmp	.+14     	; 0x199e <vfprintf+0x168>
    1990:	96 36       	cpi	r25, 0x66	; 102
    1992:	19 f4       	brne	.+6      	; 0x199a <vfprintf+0x164>
    1994:	20 e8       	ldi	r18, 0x80	; 128
    1996:	f2 2a       	or	r15, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <vfprintf+0x168>
    199a:	91 10       	cpse	r9, r1
    199c:	9a 94       	dec	r9
    199e:	f7 fe       	sbrs	r15, 7
    19a0:	0a c0       	rjmp	.+20     	; 0x19b6 <vfprintf+0x180>
    19a2:	3b e3       	ldi	r19, 0x3B	; 59
    19a4:	39 15       	cp	r19, r9
    19a6:	18 f4       	brcc	.+6      	; 0x19ae <vfprintf+0x178>
    19a8:	5c e3       	ldi	r21, 0x3C	; 60
    19aa:	b5 2e       	mov	r11, r21
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <vfprintf+0x17c>
    19ae:	b9 2c       	mov	r11, r9
    19b0:	b3 94       	inc	r11
    19b2:	27 e0       	ldi	r18, 0x07	; 7
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <vfprintf+0x192>
    19b6:	47 e0       	ldi	r20, 0x07	; 7
    19b8:	49 15       	cp	r20, r9
    19ba:	20 f4       	brcc	.+8      	; 0x19c4 <vfprintf+0x18e>
    19bc:	bb 24       	eor	r11, r11
    19be:	47 e0       	ldi	r20, 0x07	; 7
    19c0:	94 2e       	mov	r9, r20
    19c2:	f7 cf       	rjmp	.-18     	; 0x19b2 <vfprintf+0x17c>
    19c4:	29 2d       	mov	r18, r9
    19c6:	bb 24       	eor	r11, r11
    19c8:	c6 01       	movw	r24, r12
    19ca:	04 96       	adiw	r24, 0x04	; 4
    19cc:	9d 87       	std	Y+13, r25	; 0x0d
    19ce:	8c 87       	std	Y+12, r24	; 0x0c
    19d0:	f6 01       	movw	r30, r12
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	ae 01       	movw	r20, r28
    19dc:	4f 5f       	subi	r20, 0xFF	; 255
    19de:	5f 4f       	sbci	r21, 0xFF	; 255
    19e0:	0b 2d       	mov	r16, r11
    19e2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__ftoa_engine>
    19e6:	6c 01       	movw	r12, r24
    19e8:	09 81       	ldd	r16, Y+1	; 0x01
    19ea:	20 2e       	mov	r2, r16
    19ec:	33 24       	eor	r3, r3
    19ee:	00 ff       	sbrs	r16, 0
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <vfprintf+0x1c4>
    19f2:	03 fd       	sbrc	r16, 3
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x1c4>
    19f6:	1d e2       	ldi	r17, 0x2D	; 45
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <vfprintf+0x1d6>
    19fa:	f1 fe       	sbrs	r15, 1
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <vfprintf+0x1cc>
    19fe:	1b e2       	ldi	r17, 0x2B	; 43
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <vfprintf+0x1d6>
    1a02:	f2 fc       	sbrc	r15, 2
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <vfprintf+0x1d4>
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <vfprintf+0x1d6>
    1a0a:	10 e2       	ldi	r17, 0x20	; 32
    1a0c:	c1 01       	movw	r24, r2
    1a0e:	8c 70       	andi	r24, 0x0C	; 12
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	89 2b       	or	r24, r25
    1a14:	b9 f1       	breq	.+110    	; 0x1a84 <vfprintf+0x24e>
    1a16:	11 23       	and	r17, r17
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <vfprintf+0x1e8>
    1a1a:	83 e0       	ldi	r24, 0x03	; 3
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <vfprintf+0x1ea>
    1a1e:	84 e0       	ldi	r24, 0x04	; 4
    1a20:	88 15       	cp	r24, r8
    1a22:	10 f0       	brcs	.+4      	; 0x1a28 <vfprintf+0x1f2>
    1a24:	88 24       	eor	r8, r8
    1a26:	0a c0       	rjmp	.+20     	; 0x1a3c <vfprintf+0x206>
    1a28:	88 1a       	sub	r8, r24
    1a2a:	f3 fc       	sbrc	r15, 3
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <vfprintf+0x206>
    1a2e:	80 e2       	ldi	r24, 0x20	; 32
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	b3 01       	movw	r22, r6
    1a34:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1a38:	8a 94       	dec	r8
    1a3a:	c9 f7       	brne	.-14     	; 0x1a2e <vfprintf+0x1f8>
    1a3c:	11 23       	and	r17, r17
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <vfprintf+0x214>
    1a40:	81 2f       	mov	r24, r17
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	b3 01       	movw	r22, r6
    1a46:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1a4a:	23 fe       	sbrs	r2, 3
    1a4c:	03 c0       	rjmp	.+6      	; 0x1a54 <vfprintf+0x21e>
    1a4e:	0c e8       	ldi	r16, 0x8C	; 140
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	0e c0       	rjmp	.+28     	; 0x1a70 <vfprintf+0x23a>
    1a54:	00 e9       	ldi	r16, 0x90	; 144
    1a56:	10 e0       	ldi	r17, 0x00	; 0
    1a58:	0b c0       	rjmp	.+22     	; 0x1a70 <vfprintf+0x23a>
    1a5a:	e1 14       	cp	r14, r1
    1a5c:	f1 04       	cpc	r15, r1
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <vfprintf+0x22c>
    1a60:	80 52       	subi	r24, 0x20	; 32
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	b3 01       	movw	r22, r6
    1a66:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1a6a:	0f 5f       	subi	r16, 0xFF	; 255
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <vfprintf+0x244>
    1a70:	ef 2c       	mov	r14, r15
    1a72:	ff 24       	eor	r15, r15
    1a74:	f0 e1       	ldi	r31, 0x10	; 16
    1a76:	ef 22       	and	r14, r31
    1a78:	ff 24       	eor	r15, r15
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	84 91       	lpm	r24, Z+
    1a7e:	88 23       	and	r24, r24
    1a80:	61 f7       	brne	.-40     	; 0x1a5a <vfprintf+0x224>
    1a82:	14 c1       	rjmp	.+552    	; 0x1cac <vfprintf+0x476>
    1a84:	f7 fe       	sbrs	r15, 7
    1a86:	12 c0       	rjmp	.+36     	; 0x1aac <vfprintf+0x276>
    1a88:	bc 0c       	add	r11, r12
    1a8a:	24 fe       	sbrs	r2, 4
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <vfprintf+0x260>
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	81 33       	cpi	r24, 0x31	; 49
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <vfprintf+0x260>
    1a94:	ba 94       	dec	r11
    1a96:	1b 14       	cp	r1, r11
    1a98:	1c f0       	brlt	.+6      	; 0x1aa0 <vfprintf+0x26a>
    1a9a:	bb 24       	eor	r11, r11
    1a9c:	b3 94       	inc	r11
    1a9e:	2d c0       	rjmp	.+90     	; 0x1afa <vfprintf+0x2c4>
    1aa0:	f8 e0       	ldi	r31, 0x08	; 8
    1aa2:	fb 15       	cp	r31, r11
    1aa4:	50 f5       	brcc	.+84     	; 0x1afa <vfprintf+0x2c4>
    1aa6:	38 e0       	ldi	r19, 0x08	; 8
    1aa8:	b3 2e       	mov	r11, r19
    1aaa:	27 c0       	rjmp	.+78     	; 0x1afa <vfprintf+0x2c4>
    1aac:	f6 fc       	sbrc	r15, 6
    1aae:	25 c0       	rjmp	.+74     	; 0x1afa <vfprintf+0x2c4>
    1ab0:	89 2d       	mov	r24, r9
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	8c 15       	cp	r24, r12
    1ab6:	9d 05       	cpc	r25, r13
    1ab8:	4c f0       	brlt	.+18     	; 0x1acc <vfprintf+0x296>
    1aba:	2c ef       	ldi	r18, 0xFC	; 252
    1abc:	c2 16       	cp	r12, r18
    1abe:	2f ef       	ldi	r18, 0xFF	; 255
    1ac0:	d2 06       	cpc	r13, r18
    1ac2:	24 f0       	brlt	.+8      	; 0x1acc <vfprintf+0x296>
    1ac4:	30 e8       	ldi	r19, 0x80	; 128
    1ac6:	f3 2a       	or	r15, r19
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <vfprintf+0x296>
    1aca:	9a 94       	dec	r9
    1acc:	99 20       	and	r9, r9
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <vfprintf+0x2ac>
    1ad0:	e2 e0       	ldi	r30, 0x02	; 2
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	ec 0f       	add	r30, r28
    1ad6:	fd 1f       	adc	r31, r29
    1ad8:	e9 0d       	add	r30, r9
    1ada:	f1 1d       	adc	r31, r1
    1adc:	80 81       	ld	r24, Z
    1ade:	80 33       	cpi	r24, 0x30	; 48
    1ae0:	a1 f3       	breq	.-24     	; 0x1aca <vfprintf+0x294>
    1ae2:	f7 fe       	sbrs	r15, 7
    1ae4:	0a c0       	rjmp	.+20     	; 0x1afa <vfprintf+0x2c4>
    1ae6:	b9 2c       	mov	r11, r9
    1ae8:	b3 94       	inc	r11
    1aea:	89 2d       	mov	r24, r9
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	c8 16       	cp	r12, r24
    1af0:	d9 06       	cpc	r13, r25
    1af2:	14 f0       	brlt	.+4      	; 0x1af8 <vfprintf+0x2c2>
    1af4:	99 24       	eor	r9, r9
    1af6:	01 c0       	rjmp	.+2      	; 0x1afa <vfprintf+0x2c4>
    1af8:	9c 18       	sub	r9, r12
    1afa:	f7 fc       	sbrc	r15, 7
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <vfprintf+0x2ce>
    1afe:	25 e0       	ldi	r18, 0x05	; 5
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <vfprintf+0x2e0>
    1b04:	1c 14       	cp	r1, r12
    1b06:	1d 04       	cpc	r1, r13
    1b08:	1c f0       	brlt	.+6      	; 0x1b10 <vfprintf+0x2da>
    1b0a:	21 e0       	ldi	r18, 0x01	; 1
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <vfprintf+0x2e0>
    1b10:	96 01       	movw	r18, r12
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	11 23       	and	r17, r17
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <vfprintf+0x2e8>
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	99 20       	and	r9, r9
    1b20:	29 f0       	breq	.+10     	; 0x1b2c <vfprintf+0x2f6>
    1b22:	89 2d       	mov	r24, r9
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	28 0f       	add	r18, r24
    1b2a:	39 1f       	adc	r19, r25
    1b2c:	88 2d       	mov	r24, r8
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	28 17       	cp	r18, r24
    1b32:	39 07       	cpc	r19, r25
    1b34:	14 f0       	brlt	.+4      	; 0x1b3a <vfprintf+0x304>
    1b36:	88 24       	eor	r8, r8
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <vfprintf+0x306>
    1b3a:	82 1a       	sub	r8, r18
    1b3c:	4f 2c       	mov	r4, r15
    1b3e:	55 24       	eor	r5, r5
    1b40:	c2 01       	movw	r24, r4
    1b42:	89 70       	andi	r24, 0x09	; 9
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	89 2b       	or	r24, r25
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <vfprintf+0x322>
    1b4a:	08 c0       	rjmp	.+16     	; 0x1b5c <vfprintf+0x326>
    1b4c:	80 e2       	ldi	r24, 0x20	; 32
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	b3 01       	movw	r22, r6
    1b52:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1b56:	8a 94       	dec	r8
    1b58:	88 20       	and	r8, r8
    1b5a:	c1 f7       	brne	.-16     	; 0x1b4c <vfprintf+0x316>
    1b5c:	11 23       	and	r17, r17
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <vfprintf+0x334>
    1b60:	81 2f       	mov	r24, r17
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	b3 01       	movw	r22, r6
    1b66:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1b6a:	43 fe       	sbrs	r4, 3
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <vfprintf+0x346>
    1b6e:	08 c0       	rjmp	.+16     	; 0x1b80 <vfprintf+0x34a>
    1b70:	80 e3       	ldi	r24, 0x30	; 48
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	b3 01       	movw	r22, r6
    1b76:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1b7a:	8a 94       	dec	r8
    1b7c:	88 20       	and	r8, r8
    1b7e:	c1 f7       	brne	.-16     	; 0x1b70 <vfprintf+0x33a>
    1b80:	f7 fe       	sbrs	r15, 7
    1b82:	46 c0       	rjmp	.+140    	; 0x1c10 <vfprintf+0x3da>
    1b84:	86 01       	movw	r16, r12
    1b86:	d7 fe       	sbrs	r13, 7
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfprintf+0x358>
    1b8a:	00 e0       	ldi	r16, 0x00	; 0
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
    1b8e:	76 01       	movw	r14, r12
    1b90:	08 94       	sec
    1b92:	e1 1c       	adc	r14, r1
    1b94:	f1 1c       	adc	r15, r1
    1b96:	e0 1a       	sub	r14, r16
    1b98:	f1 0a       	sbc	r15, r17
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	4c 0f       	add	r20, r28
    1ba0:	5d 1f       	adc	r21, r29
    1ba2:	e4 0e       	add	r14, r20
    1ba4:	f5 1e       	adc	r15, r21
    1ba6:	26 01       	movw	r4, r12
    1ba8:	4b 18       	sub	r4, r11
    1baa:	51 08       	sbc	r5, r1
    1bac:	89 2d       	mov	r24, r9
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	aa 24       	eor	r10, r10
    1bb2:	bb 24       	eor	r11, r11
    1bb4:	a8 1a       	sub	r10, r24
    1bb6:	b9 0a       	sbc	r11, r25
    1bb8:	5f ef       	ldi	r21, 0xFF	; 255
    1bba:	0f 3f       	cpi	r16, 0xFF	; 255
    1bbc:	15 07       	cpc	r17, r21
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <vfprintf+0x394>
    1bc0:	8e e2       	ldi	r24, 0x2E	; 46
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	b3 01       	movw	r22, r6
    1bc6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1bca:	c0 16       	cp	r12, r16
    1bcc:	d1 06       	cpc	r13, r17
    1bce:	34 f0       	brlt	.+12     	; 0x1bdc <vfprintf+0x3a6>
    1bd0:	40 16       	cp	r4, r16
    1bd2:	51 06       	cpc	r5, r17
    1bd4:	1c f4       	brge	.+6      	; 0x1bdc <vfprintf+0x3a6>
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	80 81       	ld	r24, Z
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <vfprintf+0x3a8>
    1bdc:	80 e3       	ldi	r24, 0x30	; 48
    1bde:	01 50       	subi	r16, 0x01	; 1
    1be0:	10 40       	sbci	r17, 0x00	; 0
    1be2:	08 94       	sec
    1be4:	e1 1c       	adc	r14, r1
    1be6:	f1 1c       	adc	r15, r1
    1be8:	0a 15       	cp	r16, r10
    1bea:	1b 05       	cpc	r17, r11
    1bec:	2c f0       	brlt	.+10     	; 0x1bf8 <vfprintf+0x3c2>
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	b3 01       	movw	r22, r6
    1bf2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1bf6:	e0 cf       	rjmp	.-64     	; 0x1bb8 <vfprintf+0x382>
    1bf8:	0c 15       	cp	r16, r12
    1bfa:	1d 05       	cpc	r17, r13
    1bfc:	39 f4       	brne	.+14     	; 0x1c0c <vfprintf+0x3d6>
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1c00:	96 33       	cpi	r25, 0x36	; 54
    1c02:	18 f4       	brcc	.+6      	; 0x1c0a <vfprintf+0x3d4>
    1c04:	95 33       	cpi	r25, 0x35	; 53
    1c06:	11 f4       	brne	.+4      	; 0x1c0c <vfprintf+0x3d6>
    1c08:	24 fe       	sbrs	r2, 4
    1c0a:	81 e3       	ldi	r24, 0x31	; 49
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	4b c0       	rjmp	.+150    	; 0x1ca6 <vfprintf+0x470>
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	81 33       	cpi	r24, 0x31	; 49
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <vfprintf+0x3e2>
    1c16:	0f 7e       	andi	r16, 0xEF	; 239
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	b3 01       	movw	r22, r6
    1c1c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1c20:	99 20       	and	r9, r9
    1c22:	a1 f0       	breq	.+40     	; 0x1c4c <vfprintf+0x416>
    1c24:	8e e2       	ldi	r24, 0x2E	; 46
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	b3 01       	movw	r22, r6
    1c2a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1c2e:	12 e0       	ldi	r17, 0x02	; 2
    1c30:	e1 e0       	ldi	r30, 0x01	; 1
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	ec 0f       	add	r30, r28
    1c36:	fd 1f       	adc	r31, r29
    1c38:	e1 0f       	add	r30, r17
    1c3a:	f1 1d       	adc	r31, r1
    1c3c:	1f 5f       	subi	r17, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	b3 01       	movw	r22, r6
    1c44:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1c48:	9a 94       	dec	r9
    1c4a:	91 f7       	brne	.-28     	; 0x1c30 <vfprintf+0x3fa>
    1c4c:	44 fc       	sbrc	r4, 4
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <vfprintf+0x420>
    1c50:	85 e6       	ldi	r24, 0x65	; 101
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0x424>
    1c56:	85 e4       	ldi	r24, 0x45	; 69
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	b3 01       	movw	r22, r6
    1c5c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1c60:	d7 fc       	sbrc	r13, 7
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <vfprintf+0x438>
    1c64:	c1 14       	cp	r12, r1
    1c66:	d1 04       	cpc	r13, r1
    1c68:	41 f4       	brne	.+16     	; 0x1c7a <vfprintf+0x444>
    1c6a:	04 ff       	sbrs	r16, 4
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <vfprintf+0x444>
    1c6e:	d0 94       	com	r13
    1c70:	c1 94       	neg	r12
    1c72:	d1 08       	sbc	r13, r1
    1c74:	d3 94       	inc	r13
    1c76:	8d e2       	ldi	r24, 0x2D	; 45
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <vfprintf+0x446>
    1c7a:	8b e2       	ldi	r24, 0x2B	; 43
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	b3 01       	movw	r22, r6
    1c80:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1c84:	80 e3       	ldi	r24, 0x30	; 48
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <vfprintf+0x45c>
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
    1c8a:	26 ef       	ldi	r18, 0xF6	; 246
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	c2 0e       	add	r12, r18
    1c90:	d3 1e       	adc	r13, r19
    1c92:	3a e0       	ldi	r19, 0x0A	; 10
    1c94:	c3 16       	cp	r12, r19
    1c96:	d1 04       	cpc	r13, r1
    1c98:	bc f7       	brge	.-18     	; 0x1c88 <vfprintf+0x452>
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	b3 01       	movw	r22, r6
    1c9e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1ca2:	c6 01       	movw	r24, r12
    1ca4:	c0 96       	adiw	r24, 0x30	; 48
    1ca6:	b3 01       	movw	r22, r6
    1ca8:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1cac:	cc 84       	ldd	r12, Y+12	; 0x0c
    1cae:	dd 84       	ldd	r13, Y+13	; 0x0d
    1cb0:	52 c1       	rjmp	.+676    	; 0x1f56 <vfprintf+0x720>
    1cb2:	93 36       	cpi	r25, 0x63	; 99
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <vfprintf+0x48c>
    1cb6:	93 37       	cpi	r25, 0x73	; 115
    1cb8:	99 f0       	breq	.+38     	; 0x1ce0 <vfprintf+0x4aa>
    1cba:	93 35       	cpi	r25, 0x53	; 83
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <vfprintf+0x48a>
    1cbe:	59 c0       	rjmp	.+178    	; 0x1d72 <vfprintf+0x53c>
    1cc0:	23 c0       	rjmp	.+70     	; 0x1d08 <vfprintf+0x4d2>
    1cc2:	f6 01       	movw	r30, r12
    1cc4:	80 81       	ld	r24, Z
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	5e 01       	movw	r10, r28
    1cca:	08 94       	sec
    1ccc:	a1 1c       	adc	r10, r1
    1cce:	b1 1c       	adc	r11, r1
    1cd0:	22 e0       	ldi	r18, 0x02	; 2
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	c2 0e       	add	r12, r18
    1cd6:	d3 1e       	adc	r13, r19
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	e2 2e       	mov	r14, r18
    1cdc:	f1 2c       	mov	r15, r1
    1cde:	12 c0       	rjmp	.+36     	; 0x1d04 <vfprintf+0x4ce>
    1ce0:	f6 01       	movw	r30, r12
    1ce2:	a0 80       	ld	r10, Z
    1ce4:	b1 80       	ldd	r11, Z+1	; 0x01
    1ce6:	16 fd       	sbrc	r17, 6
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <vfprintf+0x4ba>
    1cea:	6f ef       	ldi	r22, 0xFF	; 255
    1cec:	7f ef       	ldi	r23, 0xFF	; 255
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <vfprintf+0x4be>
    1cf0:	69 2d       	mov	r22, r9
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	22 e0       	ldi	r18, 0x02	; 2
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	c2 0e       	add	r12, r18
    1cfa:	d3 1e       	adc	r13, r19
    1cfc:	c5 01       	movw	r24, r10
    1cfe:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <strnlen>
    1d02:	7c 01       	movw	r14, r24
    1d04:	1f 77       	andi	r17, 0x7F	; 127
    1d06:	13 c0       	rjmp	.+38     	; 0x1d2e <vfprintf+0x4f8>
    1d08:	f6 01       	movw	r30, r12
    1d0a:	a0 80       	ld	r10, Z
    1d0c:	b1 80       	ldd	r11, Z+1	; 0x01
    1d0e:	16 fd       	sbrc	r17, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x4e2>
    1d12:	6f ef       	ldi	r22, 0xFF	; 255
    1d14:	7f ef       	ldi	r23, 0xFF	; 255
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x4e6>
    1d18:	69 2d       	mov	r22, r9
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	22 e0       	ldi	r18, 0x02	; 2
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	c2 0e       	add	r12, r18
    1d22:	d3 1e       	adc	r13, r19
    1d24:	c5 01       	movw	r24, r10
    1d26:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <strnlen_P>
    1d2a:	7c 01       	movw	r14, r24
    1d2c:	10 68       	ori	r17, 0x80	; 128
    1d2e:	13 ff       	sbrs	r17, 3
    1d30:	07 c0       	rjmp	.+14     	; 0x1d40 <vfprintf+0x50a>
    1d32:	1b c0       	rjmp	.+54     	; 0x1d6a <vfprintf+0x534>
    1d34:	80 e2       	ldi	r24, 0x20	; 32
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	b3 01       	movw	r22, r6
    1d3a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1d3e:	8a 94       	dec	r8
    1d40:	88 2d       	mov	r24, r8
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	e8 16       	cp	r14, r24
    1d46:	f9 06       	cpc	r15, r25
    1d48:	a8 f3       	brcs	.-22     	; 0x1d34 <vfprintf+0x4fe>
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <vfprintf+0x534>
    1d4c:	f5 01       	movw	r30, r10
    1d4e:	17 fd       	sbrc	r17, 7
    1d50:	85 91       	lpm	r24, Z+
    1d52:	17 ff       	sbrs	r17, 7
    1d54:	81 91       	ld	r24, Z+
    1d56:	5f 01       	movw	r10, r30
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	b3 01       	movw	r22, r6
    1d5c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1d60:	81 10       	cpse	r8, r1
    1d62:	8a 94       	dec	r8
    1d64:	08 94       	sec
    1d66:	e1 08       	sbc	r14, r1
    1d68:	f1 08       	sbc	r15, r1
    1d6a:	e1 14       	cp	r14, r1
    1d6c:	f1 04       	cpc	r15, r1
    1d6e:	71 f7       	brne	.-36     	; 0x1d4c <vfprintf+0x516>
    1d70:	f2 c0       	rjmp	.+484    	; 0x1f56 <vfprintf+0x720>
    1d72:	94 36       	cpi	r25, 0x64	; 100
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <vfprintf+0x544>
    1d76:	99 36       	cpi	r25, 0x69	; 105
    1d78:	89 f5       	brne	.+98     	; 0x1ddc <vfprintf+0x5a6>
    1d7a:	17 ff       	sbrs	r17, 7
    1d7c:	08 c0       	rjmp	.+16     	; 0x1d8e <vfprintf+0x558>
    1d7e:	f6 01       	movw	r30, r12
    1d80:	20 81       	ld	r18, Z
    1d82:	31 81       	ldd	r19, Z+1	; 0x01
    1d84:	42 81       	ldd	r20, Z+2	; 0x02
    1d86:	53 81       	ldd	r21, Z+3	; 0x03
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0a c0       	rjmp	.+20     	; 0x1da2 <vfprintf+0x56c>
    1d8e:	f6 01       	movw	r30, r12
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	9c 01       	movw	r18, r24
    1d96:	44 27       	eor	r20, r20
    1d98:	37 fd       	sbrc	r19, 7
    1d9a:	40 95       	com	r20
    1d9c:	54 2f       	mov	r21, r20
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	c8 0e       	add	r12, r24
    1da4:	d9 1e       	adc	r13, r25
    1da6:	9f e6       	ldi	r25, 0x6F	; 111
    1da8:	f9 2e       	mov	r15, r25
    1daa:	f1 22       	and	r15, r17
    1dac:	57 ff       	sbrs	r21, 7
    1dae:	09 c0       	rjmp	.+18     	; 0x1dc2 <vfprintf+0x58c>
    1db0:	50 95       	com	r21
    1db2:	40 95       	com	r20
    1db4:	30 95       	com	r19
    1db6:	21 95       	neg	r18
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	4f 4f       	sbci	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	90 e8       	ldi	r25, 0x80	; 128
    1dc0:	f9 2a       	or	r15, r25
    1dc2:	ca 01       	movw	r24, r20
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	ae 01       	movw	r20, r28
    1dc8:	4f 5f       	subi	r20, 0xFF	; 255
    1dca:	5f 4f       	sbci	r21, 0xFF	; 255
    1dcc:	2a e0       	ldi	r18, 0x0A	; 10
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__ultoa_invert>
    1dd4:	e8 2e       	mov	r14, r24
    1dd6:	e8 89       	ldd	r30, Y+16	; 0x10
    1dd8:	ee 1a       	sub	r14, r30
    1dda:	41 c0       	rjmp	.+130    	; 0x1e5e <vfprintf+0x628>
    1ddc:	95 37       	cpi	r25, 0x75	; 117
    1dde:	21 f4       	brne	.+8      	; 0x1de8 <vfprintf+0x5b2>
    1de0:	1f 7e       	andi	r17, 0xEF	; 239
    1de2:	2a e0       	ldi	r18, 0x0A	; 10
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	1c c0       	rjmp	.+56     	; 0x1e20 <vfprintf+0x5ea>
    1de8:	19 7f       	andi	r17, 0xF9	; 249
    1dea:	9f 36       	cpi	r25, 0x6F	; 111
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <vfprintf+0x5d0>
    1dee:	90 37       	cpi	r25, 0x70	; 112
    1df0:	20 f4       	brcc	.+8      	; 0x1dfa <vfprintf+0x5c4>
    1df2:	98 35       	cpi	r25, 0x58	; 88
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <vfprintf+0x5c2>
    1df6:	b2 c0       	rjmp	.+356    	; 0x1f5c <vfprintf+0x726>
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <vfprintf+0x5e2>
    1dfa:	90 37       	cpi	r25, 0x70	; 112
    1dfc:	39 f0       	breq	.+14     	; 0x1e0c <vfprintf+0x5d6>
    1dfe:	98 37       	cpi	r25, 0x78	; 120
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <vfprintf+0x5ce>
    1e02:	ac c0       	rjmp	.+344    	; 0x1f5c <vfprintf+0x726>
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <vfprintf+0x5d8>
    1e06:	28 e0       	ldi	r18, 0x08	; 8
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	0a c0       	rjmp	.+20     	; 0x1e20 <vfprintf+0x5ea>
    1e0c:	10 61       	ori	r17, 0x10	; 16
    1e0e:	14 fd       	sbrc	r17, 4
    1e10:	14 60       	ori	r17, 0x04	; 4
    1e12:	20 e1       	ldi	r18, 0x10	; 16
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <vfprintf+0x5ea>
    1e18:	14 fd       	sbrc	r17, 4
    1e1a:	16 60       	ori	r17, 0x06	; 6
    1e1c:	20 e1       	ldi	r18, 0x10	; 16
    1e1e:	32 e0       	ldi	r19, 0x02	; 2
    1e20:	17 ff       	sbrs	r17, 7
    1e22:	08 c0       	rjmp	.+16     	; 0x1e34 <vfprintf+0x5fe>
    1e24:	f6 01       	movw	r30, r12
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	44 e0       	ldi	r20, 0x04	; 4
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	08 c0       	rjmp	.+16     	; 0x1e44 <vfprintf+0x60e>
    1e34:	f6 01       	movw	r30, r12
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	42 e0       	ldi	r20, 0x02	; 2
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	c4 0e       	add	r12, r20
    1e46:	d5 1e       	adc	r13, r21
    1e48:	ae 01       	movw	r20, r28
    1e4a:	4f 5f       	subi	r20, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__ultoa_invert>
    1e52:	e8 2e       	mov	r14, r24
    1e54:	58 89       	ldd	r21, Y+16	; 0x10
    1e56:	e5 1a       	sub	r14, r21
    1e58:	8f e7       	ldi	r24, 0x7F	; 127
    1e5a:	f8 2e       	mov	r15, r24
    1e5c:	f1 22       	and	r15, r17
    1e5e:	f6 fe       	sbrs	r15, 6
    1e60:	0b c0       	rjmp	.+22     	; 0x1e78 <vfprintf+0x642>
    1e62:	8e ef       	ldi	r24, 0xFE	; 254
    1e64:	f8 22       	and	r15, r24
    1e66:	e9 14       	cp	r14, r9
    1e68:	38 f4       	brcc	.+14     	; 0x1e78 <vfprintf+0x642>
    1e6a:	f4 fe       	sbrs	r15, 4
    1e6c:	07 c0       	rjmp	.+14     	; 0x1e7c <vfprintf+0x646>
    1e6e:	f2 fc       	sbrc	r15, 2
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <vfprintf+0x646>
    1e72:	9f ee       	ldi	r25, 0xEF	; 239
    1e74:	f9 22       	and	r15, r25
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vfprintf+0x646>
    1e78:	1e 2d       	mov	r17, r14
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <vfprintf+0x648>
    1e7c:	19 2d       	mov	r17, r9
    1e7e:	f4 fe       	sbrs	r15, 4
    1e80:	0d c0       	rjmp	.+26     	; 0x1e9c <vfprintf+0x666>
    1e82:	fe 01       	movw	r30, r28
    1e84:	ee 0d       	add	r30, r14
    1e86:	f1 1d       	adc	r31, r1
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 33       	cpi	r24, 0x30	; 48
    1e8c:	19 f4       	brne	.+6      	; 0x1e94 <vfprintf+0x65e>
    1e8e:	e9 ee       	ldi	r30, 0xE9	; 233
    1e90:	fe 22       	and	r15, r30
    1e92:	08 c0       	rjmp	.+16     	; 0x1ea4 <vfprintf+0x66e>
    1e94:	1f 5f       	subi	r17, 0xFF	; 255
    1e96:	f2 fe       	sbrs	r15, 2
    1e98:	05 c0       	rjmp	.+10     	; 0x1ea4 <vfprintf+0x66e>
    1e9a:	03 c0       	rjmp	.+6      	; 0x1ea2 <vfprintf+0x66c>
    1e9c:	8f 2d       	mov	r24, r15
    1e9e:	86 78       	andi	r24, 0x86	; 134
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <vfprintf+0x66e>
    1ea2:	1f 5f       	subi	r17, 0xFF	; 255
    1ea4:	0f 2d       	mov	r16, r15
    1ea6:	f3 fc       	sbrc	r15, 3
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <vfprintf+0x69c>
    1eaa:	f0 fe       	sbrs	r15, 0
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <vfprintf+0x696>
    1eae:	18 15       	cp	r17, r8
    1eb0:	10 f0       	brcs	.+4      	; 0x1eb6 <vfprintf+0x680>
    1eb2:	9e 2c       	mov	r9, r14
    1eb4:	0b c0       	rjmp	.+22     	; 0x1ecc <vfprintf+0x696>
    1eb6:	9e 2c       	mov	r9, r14
    1eb8:	98 0c       	add	r9, r8
    1eba:	91 1a       	sub	r9, r17
    1ebc:	18 2d       	mov	r17, r8
    1ebe:	06 c0       	rjmp	.+12     	; 0x1ecc <vfprintf+0x696>
    1ec0:	80 e2       	ldi	r24, 0x20	; 32
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	b3 01       	movw	r22, r6
    1ec6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1eca:	1f 5f       	subi	r17, 0xFF	; 255
    1ecc:	18 15       	cp	r17, r8
    1ece:	c0 f3       	brcs	.-16     	; 0x1ec0 <vfprintf+0x68a>
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <vfprintf+0x6a4>
    1ed2:	18 15       	cp	r17, r8
    1ed4:	10 f4       	brcc	.+4      	; 0x1eda <vfprintf+0x6a4>
    1ed6:	81 1a       	sub	r8, r17
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <vfprintf+0x6a6>
    1eda:	88 24       	eor	r8, r8
    1edc:	04 ff       	sbrs	r16, 4
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <vfprintf+0x6c8>
    1ee0:	80 e3       	ldi	r24, 0x30	; 48
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	b3 01       	movw	r22, r6
    1ee6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1eea:	02 ff       	sbrs	r16, 2
    1eec:	1d c0       	rjmp	.+58     	; 0x1f28 <vfprintf+0x6f2>
    1eee:	01 fd       	sbrc	r16, 1
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <vfprintf+0x6c2>
    1ef2:	88 e7       	ldi	r24, 0x78	; 120
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e c0       	rjmp	.+28     	; 0x1f14 <vfprintf+0x6de>
    1ef8:	88 e5       	ldi	r24, 0x58	; 88
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <vfprintf+0x6de>
    1efe:	80 2f       	mov	r24, r16
    1f00:	86 78       	andi	r24, 0x86	; 134
    1f02:	91 f0       	breq	.+36     	; 0x1f28 <vfprintf+0x6f2>
    1f04:	01 ff       	sbrs	r16, 1
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <vfprintf+0x6d6>
    1f08:	8b e2       	ldi	r24, 0x2B	; 43
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <vfprintf+0x6d8>
    1f0c:	80 e2       	ldi	r24, 0x20	; 32
    1f0e:	f7 fc       	sbrc	r15, 7
    1f10:	8d e2       	ldi	r24, 0x2D	; 45
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	b3 01       	movw	r22, r6
    1f16:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0x6f2>
    1f1c:	80 e3       	ldi	r24, 0x30	; 48
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	b3 01       	movw	r22, r6
    1f22:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1f26:	9a 94       	dec	r9
    1f28:	e9 14       	cp	r14, r9
    1f2a:	c0 f3       	brcs	.-16     	; 0x1f1c <vfprintf+0x6e6>
    1f2c:	ea 94       	dec	r14
    1f2e:	e1 e0       	ldi	r30, 0x01	; 1
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	ec 0f       	add	r30, r28
    1f34:	fd 1f       	adc	r31, r29
    1f36:	ee 0d       	add	r30, r14
    1f38:	f1 1d       	adc	r31, r1
    1f3a:	80 81       	ld	r24, Z
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	b3 01       	movw	r22, r6
    1f40:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1f44:	ee 20       	and	r14, r14
    1f46:	91 f7       	brne	.-28     	; 0x1f2c <vfprintf+0x6f6>
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <vfprintf+0x720>
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b3 01       	movw	r22, r6
    1f50:	0e 94 23 17 	call	0x2e46	; 0x2e46 <fputc>
    1f54:	8a 94       	dec	r8
    1f56:	88 20       	and	r8, r8
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <vfprintf+0x714>
    1f5a:	99 cc       	rjmp	.-1742   	; 0x188e <vfprintf+0x58>
    1f5c:	f3 01       	movw	r30, r6
    1f5e:	66 81       	ldd	r22, Z+6	; 0x06
    1f60:	77 81       	ldd	r23, Z+7	; 0x07
    1f62:	cb 01       	movw	r24, r22
    1f64:	61 96       	adiw	r28, 0x11	; 17
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	7f 90       	pop	r7
    1f8a:	6f 90       	pop	r6
    1f8c:	5f 90       	pop	r5
    1f8e:	4f 90       	pop	r4
    1f90:	3f 90       	pop	r3
    1f92:	2f 90       	pop	r2
    1f94:	08 95       	ret

00001f96 <putval>:
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 fd       	sbrc	r18, 0
    1f9a:	08 c0       	rjmp	.+16     	; 0x1fac <putval+0x16>
    1f9c:	23 fd       	sbrc	r18, 3
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <putval+0x14>
    1fa0:	22 ff       	sbrs	r18, 2
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <putval+0x12>
    1fa4:	73 83       	std	Z+3, r23	; 0x03
    1fa6:	62 83       	std	Z+2, r22	; 0x02
    1fa8:	51 83       	std	Z+1, r21	; 0x01
    1faa:	40 83       	st	Z, r20
    1fac:	08 95       	ret

00001fae <mulacc>:
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	44 ff       	sbrs	r20, 4
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <mulacc+0x10>
    1fba:	33 e0       	ldi	r19, 0x03	; 3
    1fbc:	11 c0       	rjmp	.+34     	; 0x1fe0 <mulacc+0x32>
    1fbe:	46 ff       	sbrs	r20, 6
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <mulacc+0x18>
    1fc2:	34 e0       	ldi	r19, 0x04	; 4
    1fc4:	0d c0       	rjmp	.+26     	; 0x1fe0 <mulacc+0x32>
    1fc6:	db 01       	movw	r26, r22
    1fc8:	fc 01       	movw	r30, r24
    1fca:	aa 0f       	add	r26, r26
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	ee 1f       	adc	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	10 94       	com	r1
    1fd4:	d1 f7       	brne	.-12     	; 0x1fca <mulacc+0x1c>
    1fd6:	6a 0f       	add	r22, r26
    1fd8:	7b 1f       	adc	r23, r27
    1fda:	8e 1f       	adc	r24, r30
    1fdc:	9f 1f       	adc	r25, r31
    1fde:	31 e0       	ldi	r19, 0x01	; 1
    1fe0:	66 0f       	add	r22, r22
    1fe2:	77 1f       	adc	r23, r23
    1fe4:	88 1f       	adc	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	31 50       	subi	r19, 0x01	; 1
    1fea:	d1 f7       	brne	.-12     	; 0x1fe0 <mulacc+0x32>
    1fec:	7b 01       	movw	r14, r22
    1fee:	8c 01       	movw	r16, r24
    1ff0:	e2 0e       	add	r14, r18
    1ff2:	f1 1c       	adc	r15, r1
    1ff4:	01 1d       	adc	r16, r1
    1ff6:	11 1d       	adc	r17, r1
    1ff8:	a8 01       	movw	r20, r16
    1ffa:	97 01       	movw	r18, r14
    1ffc:	b7 01       	movw	r22, r14
    1ffe:	ca 01       	movw	r24, r20
    2000:	1f 91       	pop	r17
    2002:	0f 91       	pop	r16
    2004:	ff 90       	pop	r15
    2006:	ef 90       	pop	r14
    2008:	08 95       	ret

0000200a <skip_spaces>:
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	8c 01       	movw	r16, r24
    2014:	c8 01       	movw	r24, r16
    2016:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    201a:	ec 01       	movw	r28, r24
    201c:	97 fd       	sbrc	r25, 7
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <skip_spaces+0x26>
    2020:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <isspace>
    2024:	89 2b       	or	r24, r25
    2026:	b1 f7       	brne	.-20     	; 0x2014 <skip_spaces+0xa>
    2028:	ce 01       	movw	r24, r28
    202a:	b8 01       	movw	r22, r16
    202c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    2030:	ce 01       	movw	r24, r28
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <conv_int>:
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	5c 01       	movw	r10, r24
    2054:	eb 01       	movw	r28, r22
    2056:	4a 01       	movw	r8, r20
    2058:	12 2f       	mov	r17, r18
    205a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    205e:	ac 01       	movw	r20, r24
    2060:	8b 32       	cpi	r24, 0x2B	; 43
    2062:	19 f0       	breq	.+6      	; 0x206a <conv_int+0x2e>
    2064:	8d 32       	cpi	r24, 0x2D	; 45
    2066:	51 f4       	brne	.+20     	; 0x207c <conv_int+0x40>
    2068:	10 68       	ori	r17, 0x80	; 128
    206a:	21 97       	sbiw	r28, 0x01	; 1
    206c:	09 f4       	brne	.+2      	; 0x2070 <conv_int+0x34>
    206e:	6d c0       	rjmp	.+218    	; 0x214a <conv_int+0x10e>
    2070:	c5 01       	movw	r24, r10
    2072:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2076:	ac 01       	movw	r20, r24
    2078:	97 fd       	sbrc	r25, 7
    207a:	67 c0       	rjmp	.+206    	; 0x214a <conv_int+0x10e>
    207c:	6d ef       	ldi	r22, 0xFD	; 253
    207e:	d6 2e       	mov	r13, r22
    2080:	d1 22       	and	r13, r17
    2082:	8d 2d       	mov	r24, r13
    2084:	80 73       	andi	r24, 0x30	; 48
    2086:	01 f5       	brne	.+64     	; 0x20c8 <conv_int+0x8c>
    2088:	40 33       	cpi	r20, 0x30	; 48
    208a:	f1 f4       	brne	.+60     	; 0x20c8 <conv_int+0x8c>
    208c:	21 97       	sbiw	r28, 0x01	; 1
    208e:	09 f4       	brne	.+2      	; 0x2092 <conv_int+0x56>
    2090:	47 c0       	rjmp	.+142    	; 0x2120 <conv_int+0xe4>
    2092:	c5 01       	movw	r24, r10
    2094:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2098:	ac 01       	movw	r20, r24
    209a:	97 fd       	sbrc	r25, 7
    209c:	41 c0       	rjmp	.+130    	; 0x2120 <conv_int+0xe4>
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	d8 2a       	or	r13, r24
    20a2:	48 37       	cpi	r20, 0x78	; 120
    20a4:	11 f0       	breq	.+4      	; 0x20aa <conv_int+0x6e>
    20a6:	48 35       	cpi	r20, 0x58	; 88
    20a8:	59 f4       	brne	.+22     	; 0x20c0 <conv_int+0x84>
    20aa:	80 e4       	ldi	r24, 0x40	; 64
    20ac:	d8 2a       	or	r13, r24
    20ae:	21 97       	sbiw	r28, 0x01	; 1
    20b0:	b9 f1       	breq	.+110    	; 0x2120 <conv_int+0xe4>
    20b2:	c5 01       	movw	r24, r10
    20b4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    20b8:	ac 01       	movw	r20, r24
    20ba:	99 23       	and	r25, r25
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <conv_int+0x8c>
    20be:	30 c0       	rjmp	.+96     	; 0x2120 <conv_int+0xe4>
    20c0:	d6 fc       	sbrc	r13, 6
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <conv_int+0x8c>
    20c4:	80 e1       	ldi	r24, 0x10	; 16
    20c6:	d8 2a       	or	r13, r24
    20c8:	ee 24       	eor	r14, r14
    20ca:	ff 24       	eor	r15, r15
    20cc:	87 01       	movw	r16, r14
    20ce:	24 2f       	mov	r18, r20
    20d0:	20 53       	subi	r18, 0x30	; 48
    20d2:	28 30       	cpi	r18, 0x08	; 8
    20d4:	88 f0       	brcs	.+34     	; 0x20f8 <conv_int+0xbc>
    20d6:	d4 fc       	sbrc	r13, 4
    20d8:	09 c0       	rjmp	.+18     	; 0x20ec <conv_int+0xb0>
    20da:	2a 30       	cpi	r18, 0x0A	; 10
    20dc:	68 f0       	brcs	.+26     	; 0x20f8 <conv_int+0xbc>
    20de:	d6 fe       	sbrs	r13, 6
    20e0:	05 c0       	rjmp	.+10     	; 0x20ec <conv_int+0xb0>
    20e2:	2f 7d       	andi	r18, 0xDF	; 223
    20e4:	82 2f       	mov	r24, r18
    20e6:	81 51       	subi	r24, 0x11	; 17
    20e8:	86 30       	cpi	r24, 0x06	; 6
    20ea:	28 f0       	brcs	.+10     	; 0x20f6 <conv_int+0xba>
    20ec:	ca 01       	movw	r24, r20
    20ee:	b5 01       	movw	r22, r10
    20f0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    20f4:	12 c0       	rjmp	.+36     	; 0x211a <conv_int+0xde>
    20f6:	27 50       	subi	r18, 0x07	; 7
    20f8:	c8 01       	movw	r24, r16
    20fa:	b7 01       	movw	r22, r14
    20fc:	4d 2d       	mov	r20, r13
    20fe:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <mulacc>
    2102:	7b 01       	movw	r14, r22
    2104:	8c 01       	movw	r16, r24
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	d8 2a       	or	r13, r24
    210a:	21 97       	sbiw	r28, 0x01	; 1
    210c:	61 f0       	breq	.+24     	; 0x2126 <conv_int+0xea>
    210e:	c5 01       	movw	r24, r10
    2110:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2114:	ac 01       	movw	r20, r24
    2116:	97 ff       	sbrs	r25, 7
    2118:	da cf       	rjmp	.-76     	; 0x20ce <conv_int+0x92>
    211a:	d1 fc       	sbrc	r13, 1
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <conv_int+0xea>
    211e:	15 c0       	rjmp	.+42     	; 0x214a <conv_int+0x10e>
    2120:	ee 24       	eor	r14, r14
    2122:	ff 24       	eor	r15, r15
    2124:	87 01       	movw	r16, r14
    2126:	d7 fe       	sbrs	r13, 7
    2128:	08 c0       	rjmp	.+16     	; 0x213a <conv_int+0xfe>
    212a:	10 95       	com	r17
    212c:	00 95       	com	r16
    212e:	f0 94       	com	r15
    2130:	e0 94       	com	r14
    2132:	e1 1c       	adc	r14, r1
    2134:	f1 1c       	adc	r15, r1
    2136:	01 1d       	adc	r16, r1
    2138:	11 1d       	adc	r17, r1
    213a:	c4 01       	movw	r24, r8
    213c:	b8 01       	movw	r22, r16
    213e:	a7 01       	movw	r20, r14
    2140:	2d 2d       	mov	r18, r13
    2142:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <putval>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	01 c0       	rjmp	.+2      	; 0x214c <conv_int+0x110>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	df 90       	pop	r13
    215a:	bf 90       	pop	r11
    215c:	af 90       	pop	r10
    215e:	9f 90       	pop	r9
    2160:	8f 90       	pop	r8
    2162:	08 95       	ret

00002164 <conv_brk>:
    2164:	6f 92       	push	r6
    2166:	7f 92       	push	r7
    2168:	8f 92       	push	r8
    216a:	9f 92       	push	r9
    216c:	af 92       	push	r10
    216e:	bf 92       	push	r11
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	a0 97       	sbiw	r28, 0x20	; 32
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	5c 01       	movw	r10, r24
    2192:	6b 01       	movw	r12, r22
    2194:	8a 01       	movw	r16, r20
    2196:	79 01       	movw	r14, r18
    2198:	fe 01       	movw	r30, r28
    219a:	31 96       	adiw	r30, 0x01	; 1
    219c:	80 e2       	ldi	r24, 0x20	; 32
    219e:	df 01       	movw	r26, r30
    21a0:	1d 92       	st	X+, r1
    21a2:	8a 95       	dec	r24
    21a4:	e9 f7       	brne	.-6      	; 0x21a0 <conv_brk+0x3c>
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	3f 01       	movw	r6, r30
    21b2:	a1 e0       	ldi	r26, 0x01	; 1
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	f5 01       	movw	r30, r10
    21b8:	83 81       	ldd	r24, Z+3	; 0x03
    21ba:	f7 01       	movw	r30, r14
    21bc:	83 fd       	sbrc	r24, 3
    21be:	25 91       	lpm	r18, Z+
    21c0:	83 ff       	sbrs	r24, 3
    21c2:	21 91       	ld	r18, Z+
    21c4:	7f 01       	movw	r14, r30
    21c6:	22 23       	and	r18, r18
    21c8:	09 f4       	brne	.+2      	; 0x21cc <conv_brk+0x68>
    21ca:	81 c0       	rjmp	.+258    	; 0x22ce <conv_brk+0x16a>
    21cc:	2e 35       	cpi	r18, 0x5E	; 94
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <conv_brk+0x72>
    21d0:	41 15       	cp	r20, r1
    21d2:	51 05       	cpc	r21, r1
    21d4:	69 f1       	breq	.+90     	; 0x2230 <conv_brk+0xcc>
    21d6:	87 2f       	mov	r24, r23
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	84 17       	cp	r24, r20
    21dc:	95 07       	cpc	r25, r21
    21de:	44 f4       	brge	.+16     	; 0x21f0 <conv_brk+0x8c>
    21e0:	2d 35       	cpi	r18, 0x5D	; 93
    21e2:	51 f1       	breq	.+84     	; 0x2238 <conv_brk+0xd4>
    21e4:	2d 32       	cpi	r18, 0x2D	; 45
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <conv_brk+0x8c>
    21e8:	33 23       	and	r19, r19
    21ea:	29 f4       	brne	.+10     	; 0x21f6 <conv_brk+0x92>
    21ec:	31 e0       	ldi	r19, 0x01	; 1
    21ee:	21 c0       	rjmp	.+66     	; 0x2232 <conv_brk+0xce>
    21f0:	33 23       	and	r19, r19
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <conv_brk+0x92>
    21f4:	62 2f       	mov	r22, r18
    21f6:	32 2f       	mov	r19, r18
    21f8:	83 2f       	mov	r24, r19
    21fa:	86 95       	lsr	r24
    21fc:	86 95       	lsr	r24
    21fe:	86 95       	lsr	r24
    2200:	f3 01       	movw	r30, r6
    2202:	e8 0f       	add	r30, r24
    2204:	f1 1d       	adc	r31, r1
    2206:	83 2f       	mov	r24, r19
    2208:	87 70       	andi	r24, 0x07	; 7
    220a:	4d 01       	movw	r8, r26
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <conv_brk+0xae>
    220e:	88 0c       	add	r8, r8
    2210:	99 1c       	adc	r9, r9
    2212:	8a 95       	dec	r24
    2214:	e2 f7       	brpl	.-8      	; 0x220e <conv_brk+0xaa>
    2216:	20 81       	ld	r18, Z
    2218:	28 29       	or	r18, r8
    221a:	20 83       	st	Z, r18
    221c:	36 17       	cp	r19, r22
    221e:	11 f4       	brne	.+4      	; 0x2224 <conv_brk+0xc0>
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <conv_brk+0xce>
    2224:	36 17       	cp	r19, r22
    2226:	10 f4       	brcc	.+4      	; 0x222c <conv_brk+0xc8>
    2228:	3f 5f       	subi	r19, 0xFF	; 255
    222a:	e6 cf       	rjmp	.-52     	; 0x21f8 <conv_brk+0x94>
    222c:	31 50       	subi	r19, 0x01	; 1
    222e:	e4 cf       	rjmp	.-56     	; 0x21f8 <conv_brk+0x94>
    2230:	71 e0       	ldi	r23, 0x01	; 1
    2232:	4f 5f       	subi	r20, 0xFF	; 255
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
    2236:	bf cf       	rjmp	.-130    	; 0x21b6 <conv_brk+0x52>
    2238:	33 23       	and	r19, r19
    223a:	19 f0       	breq	.+6      	; 0x2242 <conv_brk+0xde>
    223c:	8e 81       	ldd	r24, Y+6	; 0x06
    223e:	80 62       	ori	r24, 0x20	; 32
    2240:	8e 83       	std	Y+6, r24	; 0x06
    2242:	77 23       	and	r23, r23
    2244:	59 f0       	breq	.+22     	; 0x225c <conv_brk+0xf8>
    2246:	fe 01       	movw	r30, r28
    2248:	31 96       	adiw	r30, 0x01	; 1
    224a:	9e 01       	movw	r18, r28
    224c:	2f 5d       	subi	r18, 0xDF	; 223
    224e:	3f 4f       	sbci	r19, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	80 95       	com	r24
    2254:	81 93       	st	Z+, r24
    2256:	e2 17       	cp	r30, r18
    2258:	f3 07       	cpc	r31, r19
    225a:	d1 f7       	brne	.-12     	; 0x2250 <conv_brk+0xec>
    225c:	99 24       	eor	r9, r9
    225e:	93 94       	inc	r9
    2260:	3e 01       	movw	r6, r28
    2262:	08 94       	sec
    2264:	61 1c       	adc	r6, r1
    2266:	71 1c       	adc	r7, r1
    2268:	c5 01       	movw	r24, r10
    226a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    226e:	ac 01       	movw	r20, r24
    2270:	97 fd       	sbrc	r25, 7
    2272:	25 c0       	rjmp	.+74     	; 0x22be <conv_brk+0x15a>
    2274:	86 95       	lsr	r24
    2276:	86 95       	lsr	r24
    2278:	86 95       	lsr	r24
    227a:	f3 01       	movw	r30, r6
    227c:	e8 0f       	add	r30, r24
    227e:	f1 1d       	adc	r31, r1
    2280:	80 81       	ld	r24, Z
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9a 01       	movw	r18, r20
    2286:	27 70       	andi	r18, 0x07	; 7
    2288:	30 70       	andi	r19, 0x00	; 0
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <conv_brk+0x12c>
    228c:	95 95       	asr	r25
    228e:	87 95       	ror	r24
    2290:	2a 95       	dec	r18
    2292:	e2 f7       	brpl	.-8      	; 0x228c <conv_brk+0x128>
    2294:	80 fd       	sbrc	r24, 0
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <conv_brk+0x13e>
    2298:	ca 01       	movw	r24, r20
    229a:	b5 01       	movw	r22, r10
    229c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    22a0:	0e c0       	rjmp	.+28     	; 0x22be <conv_brk+0x15a>
    22a2:	01 15       	cp	r16, r1
    22a4:	11 05       	cpc	r17, r1
    22a6:	19 f0       	breq	.+6      	; 0x22ae <conv_brk+0x14a>
    22a8:	d8 01       	movw	r26, r16
    22aa:	4d 93       	st	X+, r20
    22ac:	8d 01       	movw	r16, r26
    22ae:	08 94       	sec
    22b0:	c1 08       	sbc	r12, r1
    22b2:	d1 08       	sbc	r13, r1
    22b4:	99 24       	eor	r9, r9
    22b6:	c1 14       	cp	r12, r1
    22b8:	d1 04       	cpc	r13, r1
    22ba:	b1 f6       	brne	.-84     	; 0x2268 <conv_brk+0x104>
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <conv_brk+0x15e>
    22be:	99 20       	and	r9, r9
    22c0:	31 f4       	brne	.+12     	; 0x22ce <conv_brk+0x16a>
    22c2:	01 15       	cp	r16, r1
    22c4:	11 05       	cpc	r17, r1
    22c6:	29 f0       	breq	.+10     	; 0x22d2 <conv_brk+0x16e>
    22c8:	f8 01       	movw	r30, r16
    22ca:	10 82       	st	Z, r1
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <conv_brk+0x16e>
    22ce:	ee 24       	eor	r14, r14
    22d0:	ff 24       	eor	r15, r15
    22d2:	c7 01       	movw	r24, r14
    22d4:	a0 96       	adiw	r28, 0x20	; 32
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	ff 90       	pop	r15
    22ea:	ef 90       	pop	r14
    22ec:	df 90       	pop	r13
    22ee:	cf 90       	pop	r12
    22f0:	bf 90       	pop	r11
    22f2:	af 90       	pop	r10
    22f4:	9f 90       	pop	r9
    22f6:	8f 90       	pop	r8
    22f8:	7f 90       	pop	r7
    22fa:	6f 90       	pop	r6
    22fc:	08 95       	ret

000022fe <conv_flt>:
    22fe:	2f 92       	push	r2
    2300:	3f 92       	push	r3
    2302:	5f 92       	push	r5
    2304:	6f 92       	push	r6
    2306:	7f 92       	push	r7
    2308:	8f 92       	push	r8
    230a:	9f 92       	push	r9
    230c:	af 92       	push	r10
    230e:	bf 92       	push	r11
    2310:	cf 92       	push	r12
    2312:	df 92       	push	r13
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	3c 01       	movw	r6, r24
    2322:	7b 01       	movw	r14, r22
    2324:	1a 01       	movw	r2, r20
    2326:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    232a:	ec 01       	movw	r28, r24
    232c:	8b 32       	cpi	r24, 0x2B	; 43
    232e:	39 f0       	breq	.+14     	; 0x233e <conv_flt+0x40>
    2330:	8d 32       	cpi	r24, 0x2D	; 45
    2332:	11 f0       	breq	.+4      	; 0x2338 <conv_flt+0x3a>
    2334:	55 24       	eor	r5, r5
    2336:	11 c0       	rjmp	.+34     	; 0x235a <conv_flt+0x5c>
    2338:	b0 e8       	ldi	r27, 0x80	; 128
    233a:	5b 2e       	mov	r5, r27
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <conv_flt+0x42>
    233e:	55 24       	eor	r5, r5
    2340:	08 94       	sec
    2342:	e1 08       	sbc	r14, r1
    2344:	f1 08       	sbc	r15, r1
    2346:	e1 14       	cp	r14, r1
    2348:	f1 04       	cpc	r15, r1
    234a:	09 f4       	brne	.+2      	; 0x234e <conv_flt+0x50>
    234c:	18 c1       	rjmp	.+560    	; 0x257e <conv_flt+0x280>
    234e:	c3 01       	movw	r24, r6
    2350:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2354:	ec 01       	movw	r28, r24
    2356:	97 fd       	sbrc	r25, 7
    2358:	12 c1       	rjmp	.+548    	; 0x257e <conv_flt+0x280>
    235a:	ce 01       	movw	r24, r28
    235c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <tolower>
    2360:	89 36       	cpi	r24, 0x69	; 105
    2362:	91 05       	cpc	r25, r1
    2364:	21 f0       	breq	.+8      	; 0x236e <conv_flt+0x70>
    2366:	8e 36       	cpi	r24, 0x6E	; 110
    2368:	91 05       	cpc	r25, r1
    236a:	99 f5       	brne	.+102    	; 0x23d2 <conv_flt+0xd4>
    236c:	1d c0       	rjmp	.+58     	; 0x23a8 <conv_flt+0xaa>
    236e:	09 ea       	ldi	r16, 0xA9	; 169
    2370:	10 e0       	ldi	r17, 0x00	; 0
    2372:	1c c0       	rjmp	.+56     	; 0x23ac <conv_flt+0xae>
    2374:	08 94       	sec
    2376:	e1 08       	sbc	r14, r1
    2378:	f1 08       	sbc	r15, r1
    237a:	e1 14       	cp	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	71 f0       	breq	.+28     	; 0x239c <conv_flt+0x9e>
    2380:	c3 01       	movw	r24, r6
    2382:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2386:	ec 01       	movw	r28, r24
    2388:	97 fd       	sbrc	r25, 7
    238a:	08 c0       	rjmp	.+16     	; 0x239c <conv_flt+0x9e>
    238c:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <tolower>
    2390:	d8 16       	cp	r13, r24
    2392:	61 f0       	breq	.+24     	; 0x23ac <conv_flt+0xae>
    2394:	ce 01       	movw	r24, r28
    2396:	b3 01       	movw	r22, r6
    2398:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	0c 3a       	cpi	r16, 0xAC	; 172
    23a0:	12 07       	cpc	r17, r18
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <conv_flt+0xa8>
    23a4:	ec c0       	rjmp	.+472    	; 0x257e <conv_flt+0x280>
    23a6:	08 c0       	rjmp	.+16     	; 0x23b8 <conv_flt+0xba>
    23a8:	06 ea       	ldi	r16, 0xA6	; 166
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	f8 01       	movw	r30, r16
    23ae:	0f 5f       	subi	r16, 0xFF	; 255
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	d4 90       	lpm	r13, Z+
    23b4:	dd 20       	and	r13, r13
    23b6:	f1 f6       	brne	.-68     	; 0x2374 <conv_flt+0x76>
    23b8:	09 5a       	subi	r16, 0xA9	; 169
    23ba:	10 40       	sbci	r17, 0x00	; 0
    23bc:	29 f0       	breq	.+10     	; 0x23c8 <conv_flt+0xca>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e8       	ldi	r26, 0x80	; 128
    23c4:	bf e7       	ldi	r27, 0x7F	; 127
    23c6:	cf c0       	rjmp	.+414    	; 0x2566 <conv_flt+0x268>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 ec       	ldi	r26, 0xC0	; 192
    23ce:	bf e7       	ldi	r27, 0x7F	; 127
    23d0:	ca c0       	rjmp	.+404    	; 0x2566 <conv_flt+0x268>
    23d2:	cc 24       	eor	r12, r12
    23d4:	dd 24       	eor	r13, r13
    23d6:	88 24       	eor	r8, r8
    23d8:	99 24       	eor	r9, r9
    23da:	54 01       	movw	r10, r8
    23dc:	ae 01       	movw	r20, r28
    23de:	40 53       	subi	r20, 0x30	; 48
    23e0:	24 2f       	mov	r18, r20
    23e2:	4a 30       	cpi	r20, 0x0A	; 10
    23e4:	38 f5       	brcc	.+78     	; 0x2434 <conv_flt+0x136>
    23e6:	52 e0       	ldi	r21, 0x02	; 2
    23e8:	55 2a       	or	r5, r21
    23ea:	85 2d       	mov	r24, r5
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	ac 01       	movw	r20, r24
    23f0:	48 70       	andi	r20, 0x08	; 8
    23f2:	50 70       	andi	r21, 0x00	; 0
    23f4:	52 fe       	sbrs	r5, 2
    23f6:	06 c0       	rjmp	.+12     	; 0x2404 <conv_flt+0x106>
    23f8:	45 2b       	or	r20, r21
    23fa:	11 f5       	brne	.+68     	; 0x2440 <conv_flt+0x142>
    23fc:	08 94       	sec
    23fe:	c1 1c       	adc	r12, r1
    2400:	d1 1c       	adc	r13, r1
    2402:	1e c0       	rjmp	.+60     	; 0x2440 <conv_flt+0x142>
    2404:	45 2b       	or	r20, r21
    2406:	19 f0       	breq	.+6      	; 0x240e <conv_flt+0x110>
    2408:	08 94       	sec
    240a:	c1 08       	sbc	r12, r1
    240c:	d1 08       	sbc	r13, r1
    240e:	c5 01       	movw	r24, r10
    2410:	b4 01       	movw	r22, r8
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <mulacc>
    2418:	4b 01       	movw	r8, r22
    241a:	5c 01       	movw	r10, r24
    241c:	88 e9       	ldi	r24, 0x98	; 152
    241e:	88 16       	cp	r8, r24
    2420:	89 e9       	ldi	r24, 0x99	; 153
    2422:	98 06       	cpc	r9, r24
    2424:	89 e9       	ldi	r24, 0x99	; 153
    2426:	a8 06       	cpc	r10, r24
    2428:	89 e1       	ldi	r24, 0x19	; 25
    242a:	b8 06       	cpc	r11, r24
    242c:	48 f0       	brcs	.+18     	; 0x2440 <conv_flt+0x142>
    242e:	94 e0       	ldi	r25, 0x04	; 4
    2430:	59 2a       	or	r5, r25
    2432:	06 c0       	rjmp	.+12     	; 0x2440 <conv_flt+0x142>
    2434:	4e 3f       	cpi	r20, 0xFE	; 254
    2436:	81 f4       	brne	.+32     	; 0x2458 <conv_flt+0x15a>
    2438:	53 fc       	sbrc	r5, 3
    243a:	0e c0       	rjmp	.+28     	; 0x2458 <conv_flt+0x15a>
    243c:	e8 e0       	ldi	r30, 0x08	; 8
    243e:	5e 2a       	or	r5, r30
    2440:	08 94       	sec
    2442:	e1 08       	sbc	r14, r1
    2444:	f1 08       	sbc	r15, r1
    2446:	e1 14       	cp	r14, r1
    2448:	f1 04       	cpc	r15, r1
    244a:	31 f0       	breq	.+12     	; 0x2458 <conv_flt+0x15a>
    244c:	c3 01       	movw	r24, r6
    244e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2452:	ec 01       	movw	r28, r24
    2454:	97 ff       	sbrs	r25, 7
    2456:	c2 cf       	rjmp	.-124    	; 0x23dc <conv_flt+0xde>
    2458:	51 fe       	sbrs	r5, 1
    245a:	91 c0       	rjmp	.+290    	; 0x257e <conv_flt+0x280>
    245c:	c5 36       	cpi	r28, 0x65	; 101
    245e:	19 f0       	breq	.+6      	; 0x2466 <conv_flt+0x168>
    2460:	c5 34       	cpi	r28, 0x45	; 69
    2462:	09 f0       	breq	.+2      	; 0x2466 <conv_flt+0x168>
    2464:	46 c0       	rjmp	.+140    	; 0x24f2 <conv_flt+0x1f4>
    2466:	08 94       	sec
    2468:	e1 08       	sbc	r14, r1
    246a:	f1 08       	sbc	r15, r1
    246c:	e1 14       	cp	r14, r1
    246e:	f1 04       	cpc	r15, r1
    2470:	09 f4       	brne	.+2      	; 0x2474 <conv_flt+0x176>
    2472:	85 c0       	rjmp	.+266    	; 0x257e <conv_flt+0x280>
    2474:	c3 01       	movw	r24, r6
    2476:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    247a:	ec 01       	movw	r28, r24
    247c:	97 fd       	sbrc	r25, 7
    247e:	7f c0       	rjmp	.+254    	; 0x257e <conv_flt+0x280>
    2480:	8b 32       	cpi	r24, 0x2B	; 43
    2482:	21 f0       	breq	.+8      	; 0x248c <conv_flt+0x18e>
    2484:	8d 32       	cpi	r24, 0x2D	; 45
    2486:	69 f4       	brne	.+26     	; 0x24a2 <conv_flt+0x1a4>
    2488:	f0 e1       	ldi	r31, 0x10	; 16
    248a:	5f 2a       	or	r5, r31
    248c:	08 94       	sec
    248e:	e1 08       	sbc	r14, r1
    2490:	f1 08       	sbc	r15, r1
    2492:	e1 14       	cp	r14, r1
    2494:	f1 04       	cpc	r15, r1
    2496:	09 f4       	brne	.+2      	; 0x249a <conv_flt+0x19c>
    2498:	72 c0       	rjmp	.+228    	; 0x257e <conv_flt+0x280>
    249a:	c3 01       	movw	r24, r6
    249c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    24a0:	ec 01       	movw	r28, r24
    24a2:	ce 01       	movw	r24, r28
    24a4:	c0 97       	sbiw	r24, 0x30	; 48
    24a6:	0a 97       	sbiw	r24, 0x0a	; 10
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <conv_flt+0x1ae>
    24aa:	69 c0       	rjmp	.+210    	; 0x257e <conv_flt+0x280>
    24ac:	00 e0       	ldi	r16, 0x00	; 0
    24ae:	10 e0       	ldi	r17, 0x00	; 0
    24b0:	b8 01       	movw	r22, r16
    24b2:	88 27       	eor	r24, r24
    24b4:	77 fd       	sbrc	r23, 7
    24b6:	80 95       	com	r24
    24b8:	98 2f       	mov	r25, r24
    24ba:	ae 01       	movw	r20, r28
    24bc:	40 53       	subi	r20, 0x30	; 48
    24be:	24 2f       	mov	r18, r20
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <mulacc>
    24c6:	8b 01       	movw	r16, r22
    24c8:	08 94       	sec
    24ca:	e1 08       	sbc	r14, r1
    24cc:	f1 08       	sbc	r15, r1
    24ce:	e1 14       	cp	r14, r1
    24d0:	f1 04       	cpc	r15, r1
    24d2:	39 f0       	breq	.+14     	; 0x24e2 <conv_flt+0x1e4>
    24d4:	c3 01       	movw	r24, r6
    24d6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    24da:	ec 01       	movw	r28, r24
    24dc:	c0 97       	sbiw	r24, 0x30	; 48
    24de:	0a 97       	sbiw	r24, 0x0a	; 10
    24e0:	38 f3       	brcs	.-50     	; 0x24b0 <conv_flt+0x1b2>
    24e2:	b8 01       	movw	r22, r16
    24e4:	54 fe       	sbrs	r5, 4
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <conv_flt+0x1f0>
    24e8:	70 95       	com	r23
    24ea:	61 95       	neg	r22
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	c6 0e       	add	r12, r22
    24f0:	d7 1e       	adc	r13, r23
    24f2:	ef 28       	or	r14, r15
    24f4:	31 f0       	breq	.+12     	; 0x2502 <conv_flt+0x204>
    24f6:	d7 fd       	sbrc	r29, 7
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <conv_flt+0x204>
    24fa:	ce 01       	movw	r24, r28
    24fc:	b3 01       	movw	r22, r6
    24fe:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    2502:	c5 01       	movw	r24, r10
    2504:	b4 01       	movw	r22, r8
    2506:	0e 94 11 14 	call	0x2822	; 0x2822 <__floatunsisf>
    250a:	d7 fe       	sbrs	r13, 7
    250c:	0d c0       	rjmp	.+26     	; 0x2528 <conv_flt+0x22a>
    250e:	a5 ec       	ldi	r26, 0xC5	; 197
    2510:	ea 2e       	mov	r14, r26
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	fa 2e       	mov	r15, r26
    2516:	d0 94       	com	r13
    2518:	c1 94       	neg	r12
    251a:	d1 08       	sbc	r13, r1
    251c:	d3 94       	inc	r13
    251e:	c0 e2       	ldi	r28, 0x20	; 32
    2520:	d0 e0       	ldi	r29, 0x00	; 0
    2522:	00 e0       	ldi	r16, 0x00	; 0
    2524:	10 e0       	ldi	r17, 0x00	; 0
    2526:	0e c0       	rjmp	.+28     	; 0x2544 <conv_flt+0x246>
    2528:	fd ed       	ldi	r31, 0xDD	; 221
    252a:	ef 2e       	mov	r14, r31
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	ff 2e       	mov	r15, r31
    2530:	f6 cf       	rjmp	.-20     	; 0x251e <conv_flt+0x220>
    2532:	f7 01       	movw	r30, r14
    2534:	25 91       	lpm	r18, Z+
    2536:	35 91       	lpm	r19, Z+
    2538:	45 91       	lpm	r20, Z+
    253a:	54 91       	lpm	r21, Z+
    253c:	0e 94 4e 14 	call	0x289c	; 0x289c <__mulsf3>
    2540:	cc 1a       	sub	r12, r28
    2542:	dd 0a       	sbc	r13, r29
    2544:	cc 16       	cp	r12, r28
    2546:	dd 06       	cpc	r13, r29
    2548:	a0 f7       	brcc	.-24     	; 0x2532 <conv_flt+0x234>
    254a:	d6 95       	lsr	r29
    254c:	c7 95       	ror	r28
    254e:	0f 5f       	subi	r16, 0xFF	; 255
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	06 30       	cpi	r16, 0x06	; 6
    2554:	11 05       	cpc	r17, r1
    2556:	29 f0       	breq	.+10     	; 0x2562 <conv_flt+0x264>
    2558:	ec ef       	ldi	r30, 0xFC	; 252
    255a:	ff ef       	ldi	r31, 0xFF	; 255
    255c:	ee 0e       	add	r14, r30
    255e:	ff 1e       	adc	r15, r31
    2560:	f1 cf       	rjmp	.-30     	; 0x2544 <conv_flt+0x246>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	57 fc       	sbrc	r5, 7
    2568:	b0 58       	subi	r27, 0x80	; 128
    256a:	21 14       	cp	r2, r1
    256c:	31 04       	cpc	r3, r1
    256e:	29 f0       	breq	.+10     	; 0x257a <conv_flt+0x27c>
    2570:	f1 01       	movw	r30, r2
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <conv_flt+0x282>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	7f 90       	pop	r7
    259a:	6f 90       	pop	r6
    259c:	5f 90       	pop	r5
    259e:	3f 90       	pop	r3
    25a0:	2f 90       	pop	r2
    25a2:	08 95       	ret

000025a4 <vfscanf>:
    25a4:	5f 92       	push	r5
    25a6:	6f 92       	push	r6
    25a8:	7f 92       	push	r7
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	4c 01       	movw	r8, r24
    25c4:	5b 01       	movw	r10, r22
    25c6:	3a 01       	movw	r6, r20
    25c8:	fc 01       	movw	r30, r24
    25ca:	17 82       	std	Z+7, r1	; 0x07
    25cc:	16 82       	std	Z+6, r1	; 0x06
    25ce:	55 24       	eor	r5, r5
    25d0:	04 c1       	rjmp	.+520    	; 0x27da <vfscanf+0x236>
    25d2:	81 2f       	mov	r24, r17
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <isspace>
    25da:	89 2b       	or	r24, r25
    25dc:	21 f0       	breq	.+8      	; 0x25e6 <vfscanf+0x42>
    25de:	c4 01       	movw	r24, r8
    25e0:	0e 94 05 10 	call	0x200a	; 0x200a <skip_spaces>
    25e4:	fa c0       	rjmp	.+500    	; 0x27da <vfscanf+0x236>
    25e6:	15 32       	cpi	r17, 0x25	; 37
    25e8:	49 f4       	brne	.+18     	; 0x25fc <vfscanf+0x58>
    25ea:	f5 01       	movw	r30, r10
    25ec:	f3 fc       	sbrc	r15, 3
    25ee:	65 91       	lpm	r22, Z+
    25f0:	f3 fe       	sbrs	r15, 3
    25f2:	61 91       	ld	r22, Z+
    25f4:	5f 01       	movw	r10, r30
    25f6:	65 32       	cpi	r22, 0x25	; 37
    25f8:	69 f4       	brne	.+26     	; 0x2614 <vfscanf+0x70>
    25fa:	15 e2       	ldi	r17, 0x25	; 37
    25fc:	c4 01       	movw	r24, r8
    25fe:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    2602:	97 fd       	sbrc	r25, 7
    2604:	f6 c0       	rjmp	.+492    	; 0x27f2 <vfscanf+0x24e>
    2606:	18 17       	cp	r17, r24
    2608:	09 f4       	brne	.+2      	; 0x260c <vfscanf+0x68>
    260a:	e7 c0       	rjmp	.+462    	; 0x27da <vfscanf+0x236>
    260c:	b4 01       	movw	r22, r8
    260e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    2612:	f4 c0       	rjmp	.+488    	; 0x27fc <vfscanf+0x258>
    2614:	6a 32       	cpi	r22, 0x2A	; 42
    2616:	19 f0       	breq	.+6      	; 0x261e <vfscanf+0x7a>
    2618:	16 2f       	mov	r17, r22
    261a:	00 e0       	ldi	r16, 0x00	; 0
    261c:	06 c0       	rjmp	.+12     	; 0x262a <vfscanf+0x86>
    261e:	f3 fc       	sbrc	r15, 3
    2620:	15 91       	lpm	r17, Z+
    2622:	f3 fe       	sbrs	r15, 3
    2624:	11 91       	ld	r17, Z+
    2626:	5f 01       	movw	r10, r30
    2628:	01 e0       	ldi	r16, 0x01	; 1
    262a:	cc 24       	eor	r12, r12
    262c:	dd 24       	eor	r13, r13
    262e:	0e c0       	rjmp	.+28     	; 0x264c <vfscanf+0xa8>
    2630:	02 60       	ori	r16, 0x02	; 2
    2632:	b6 01       	movw	r22, r12
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	40 e2       	ldi	r20, 0x20	; 32
    263a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <mulacc>
    263e:	6b 01       	movw	r12, r22
    2640:	f5 01       	movw	r30, r10
    2642:	f3 fc       	sbrc	r15, 3
    2644:	15 91       	lpm	r17, Z+
    2646:	f3 fe       	sbrs	r15, 3
    2648:	11 91       	ld	r17, Z+
    264a:	5f 01       	movw	r10, r30
    264c:	21 2f       	mov	r18, r17
    264e:	20 53       	subi	r18, 0x30	; 48
    2650:	2a 30       	cpi	r18, 0x0A	; 10
    2652:	70 f3       	brcs	.-36     	; 0x2630 <vfscanf+0x8c>
    2654:	01 fd       	sbrc	r16, 1
    2656:	04 c0       	rjmp	.+8      	; 0x2660 <vfscanf+0xbc>
    2658:	cc 24       	eor	r12, r12
    265a:	ca 94       	dec	r12
    265c:	dc 2c       	mov	r13, r12
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <vfscanf+0xc4>
    2660:	c1 14       	cp	r12, r1
    2662:	d1 04       	cpc	r13, r1
    2664:	09 f4       	brne	.+2      	; 0x2668 <vfscanf+0xc4>
    2666:	ca c0       	rjmp	.+404    	; 0x27fc <vfscanf+0x258>
    2668:	18 36       	cpi	r17, 0x68	; 104
    266a:	21 f0       	breq	.+8      	; 0x2674 <vfscanf+0xd0>
    266c:	1c 36       	cpi	r17, 0x6C	; 108
    266e:	99 f4       	brne	.+38     	; 0x2696 <vfscanf+0xf2>
    2670:	f5 01       	movw	r30, r10
    2672:	0b c0       	rjmp	.+22     	; 0x268a <vfscanf+0xe6>
    2674:	f5 01       	movw	r30, r10
    2676:	f3 fc       	sbrc	r15, 3
    2678:	65 91       	lpm	r22, Z+
    267a:	f3 fe       	sbrs	r15, 3
    267c:	61 91       	ld	r22, Z+
    267e:	68 36       	cpi	r22, 0x68	; 104
    2680:	19 f0       	breq	.+6      	; 0x2688 <vfscanf+0xe4>
    2682:	5f 01       	movw	r10, r30
    2684:	16 2f       	mov	r17, r22
    2686:	07 c0       	rjmp	.+14     	; 0x2696 <vfscanf+0xf2>
    2688:	08 60       	ori	r16, 0x08	; 8
    268a:	04 60       	ori	r16, 0x04	; 4
    268c:	f3 fc       	sbrc	r15, 3
    268e:	15 91       	lpm	r17, Z+
    2690:	f3 fe       	sbrs	r15, 3
    2692:	11 91       	ld	r17, Z+
    2694:	5f 01       	movw	r10, r30
    2696:	11 23       	and	r17, r17
    2698:	09 f4       	brne	.+2      	; 0x269c <vfscanf+0xf8>
    269a:	b0 c0       	rjmp	.+352    	; 0x27fc <vfscanf+0x258>
    269c:	84 e9       	ldi	r24, 0x94	; 148
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	61 2f       	mov	r22, r17
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <strchr_P>
    26a8:	89 2b       	or	r24, r25
    26aa:	09 f4       	brne	.+2      	; 0x26ae <vfscanf+0x10a>
    26ac:	a7 c0       	rjmp	.+334    	; 0x27fc <vfscanf+0x258>
    26ae:	80 2f       	mov	r24, r16
    26b0:	00 ff       	sbrs	r16, 0
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <vfscanf+0x116>
    26b4:	ee 24       	eor	r14, r14
    26b6:	ff 24       	eor	r15, r15
    26b8:	07 c0       	rjmp	.+14     	; 0x26c8 <vfscanf+0x124>
    26ba:	f3 01       	movw	r30, r6
    26bc:	e0 80       	ld	r14, Z
    26be:	f1 80       	ldd	r15, Z+1	; 0x01
    26c0:	22 e0       	ldi	r18, 0x02	; 2
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	62 0e       	add	r6, r18
    26c6:	73 1e       	adc	r7, r19
    26c8:	1e 36       	cpi	r17, 0x6E	; 110
    26ca:	51 f4       	brne	.+20     	; 0x26e0 <vfscanf+0x13c>
    26cc:	f4 01       	movw	r30, r8
    26ce:	46 81       	ldd	r20, Z+6	; 0x06
    26d0:	57 81       	ldd	r21, Z+7	; 0x07
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	70 e0       	ldi	r23, 0x00	; 0
    26d6:	c7 01       	movw	r24, r14
    26d8:	20 2f       	mov	r18, r16
    26da:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <putval>
    26de:	7d c0       	rjmp	.+250    	; 0x27da <vfscanf+0x236>
    26e0:	13 36       	cpi	r17, 0x63	; 99
    26e2:	b9 f4       	brne	.+46     	; 0x2712 <vfscanf+0x16e>
    26e4:	81 fd       	sbrc	r24, 1
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <vfscanf+0x14a>
    26e8:	11 e0       	ldi	r17, 0x01	; 1
    26ea:	c1 2e       	mov	r12, r17
    26ec:	d1 2c       	mov	r13, r1
    26ee:	c4 01       	movw	r24, r8
    26f0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    26f4:	97 fd       	sbrc	r25, 7
    26f6:	7d c0       	rjmp	.+250    	; 0x27f2 <vfscanf+0x24e>
    26f8:	e1 14       	cp	r14, r1
    26fa:	f1 04       	cpc	r15, r1
    26fc:	19 f0       	breq	.+6      	; 0x2704 <vfscanf+0x160>
    26fe:	f7 01       	movw	r30, r14
    2700:	81 93       	st	Z+, r24
    2702:	7f 01       	movw	r14, r30
    2704:	08 94       	sec
    2706:	c1 08       	sbc	r12, r1
    2708:	d1 08       	sbc	r13, r1
    270a:	c1 14       	cp	r12, r1
    270c:	d1 04       	cpc	r13, r1
    270e:	79 f7       	brne	.-34     	; 0x26ee <vfscanf+0x14a>
    2710:	62 c0       	rjmp	.+196    	; 0x27d6 <vfscanf+0x232>
    2712:	1b 35       	cpi	r17, 0x5B	; 91
    2714:	59 f4       	brne	.+22     	; 0x272c <vfscanf+0x188>
    2716:	c4 01       	movw	r24, r8
    2718:	b6 01       	movw	r22, r12
    271a:	a7 01       	movw	r20, r14
    271c:	95 01       	movw	r18, r10
    271e:	0e 94 b2 10 	call	0x2164	; 0x2164 <conv_brk>
    2722:	5c 01       	movw	r10, r24
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	09 f0       	breq	.+2      	; 0x272a <vfscanf+0x186>
    2728:	56 c0       	rjmp	.+172    	; 0x27d6 <vfscanf+0x232>
    272a:	50 c0       	rjmp	.+160    	; 0x27cc <vfscanf+0x228>
    272c:	c4 01       	movw	r24, r8
    272e:	0e 94 05 10 	call	0x200a	; 0x200a <skip_spaces>
    2732:	97 fd       	sbrc	r25, 7
    2734:	5e c0       	rjmp	.+188    	; 0x27f2 <vfscanf+0x24e>
    2736:	1f 36       	cpi	r17, 0x6F	; 111
    2738:	d1 f1       	breq	.+116    	; 0x27ae <vfscanf+0x20a>
    273a:	10 37       	cpi	r17, 0x70	; 112
    273c:	38 f4       	brcc	.+14     	; 0x274c <vfscanf+0x1a8>
    273e:	14 36       	cpi	r17, 0x64	; 100
    2740:	a1 f1       	breq	.+104    	; 0x27aa <vfscanf+0x206>
    2742:	19 36       	cpi	r17, 0x69	; 105
    2744:	a9 f1       	breq	.+106    	; 0x27b0 <vfscanf+0x20c>
    2746:	18 35       	cpi	r17, 0x58	; 88
    2748:	d1 f5       	brne	.+116    	; 0x27be <vfscanf+0x21a>
    274a:	2d c0       	rjmp	.+90     	; 0x27a6 <vfscanf+0x202>
    274c:	13 37       	cpi	r17, 0x73	; 115
    274e:	51 f0       	breq	.+20     	; 0x2764 <vfscanf+0x1c0>
    2750:	14 37       	cpi	r17, 0x74	; 116
    2752:	18 f4       	brcc	.+6      	; 0x275a <vfscanf+0x1b6>
    2754:	10 37       	cpi	r17, 0x70	; 112
    2756:	99 f5       	brne	.+102    	; 0x27be <vfscanf+0x21a>
    2758:	26 c0       	rjmp	.+76     	; 0x27a6 <vfscanf+0x202>
    275a:	15 37       	cpi	r17, 0x75	; 117
    275c:	31 f1       	breq	.+76     	; 0x27aa <vfscanf+0x206>
    275e:	18 37       	cpi	r17, 0x78	; 120
    2760:	71 f5       	brne	.+92     	; 0x27be <vfscanf+0x21a>
    2762:	21 c0       	rjmp	.+66     	; 0x27a6 <vfscanf+0x202>
    2764:	c4 01       	movw	r24, r8
    2766:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fgetc>
    276a:	ec 01       	movw	r28, r24
    276c:	97 fd       	sbrc	r25, 7
    276e:	15 c0       	rjmp	.+42     	; 0x279a <vfscanf+0x1f6>
    2770:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <isspace>
    2774:	89 2b       	or	r24, r25
    2776:	29 f0       	breq	.+10     	; 0x2782 <vfscanf+0x1de>
    2778:	ce 01       	movw	r24, r28
    277a:	b4 01       	movw	r22, r8
    277c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <ungetc>
    2780:	0c c0       	rjmp	.+24     	; 0x279a <vfscanf+0x1f6>
    2782:	e1 14       	cp	r14, r1
    2784:	f1 04       	cpc	r15, r1
    2786:	19 f0       	breq	.+6      	; 0x278e <vfscanf+0x1ea>
    2788:	f7 01       	movw	r30, r14
    278a:	c1 93       	st	Z+, r28
    278c:	7f 01       	movw	r14, r30
    278e:	08 94       	sec
    2790:	c1 08       	sbc	r12, r1
    2792:	d1 08       	sbc	r13, r1
    2794:	c1 14       	cp	r12, r1
    2796:	d1 04       	cpc	r13, r1
    2798:	29 f7       	brne	.-54     	; 0x2764 <vfscanf+0x1c0>
    279a:	e1 14       	cp	r14, r1
    279c:	f1 04       	cpc	r15, r1
    279e:	d9 f0       	breq	.+54     	; 0x27d6 <vfscanf+0x232>
    27a0:	f7 01       	movw	r30, r14
    27a2:	10 82       	st	Z, r1
    27a4:	18 c0       	rjmp	.+48     	; 0x27d6 <vfscanf+0x232>
    27a6:	00 64       	ori	r16, 0x40	; 64
    27a8:	03 c0       	rjmp	.+6      	; 0x27b0 <vfscanf+0x20c>
    27aa:	00 62       	ori	r16, 0x20	; 32
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <vfscanf+0x20c>
    27ae:	00 61       	ori	r16, 0x10	; 16
    27b0:	c4 01       	movw	r24, r8
    27b2:	b6 01       	movw	r22, r12
    27b4:	a7 01       	movw	r20, r14
    27b6:	20 2f       	mov	r18, r16
    27b8:	0e 94 1e 10 	call	0x203c	; 0x203c <conv_int>
    27bc:	05 c0       	rjmp	.+10     	; 0x27c8 <vfscanf+0x224>
    27be:	c4 01       	movw	r24, r8
    27c0:	b6 01       	movw	r22, r12
    27c2:	a7 01       	movw	r20, r14
    27c4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <conv_flt>
    27c8:	88 23       	and	r24, r24
    27ca:	29 f4       	brne	.+10     	; 0x27d6 <vfscanf+0x232>
    27cc:	f4 01       	movw	r30, r8
    27ce:	83 81       	ldd	r24, Z+3	; 0x03
    27d0:	80 73       	andi	r24, 0x30	; 48
    27d2:	79 f4       	brne	.+30     	; 0x27f2 <vfscanf+0x24e>
    27d4:	13 c0       	rjmp	.+38     	; 0x27fc <vfscanf+0x258>
    27d6:	00 ff       	sbrs	r16, 0
    27d8:	53 94       	inc	r5
    27da:	f4 01       	movw	r30, r8
    27dc:	f3 80       	ldd	r15, Z+3	; 0x03
    27de:	f5 01       	movw	r30, r10
    27e0:	f3 fc       	sbrc	r15, 3
    27e2:	15 91       	lpm	r17, Z+
    27e4:	f3 fe       	sbrs	r15, 3
    27e6:	11 91       	ld	r17, Z+
    27e8:	5f 01       	movw	r10, r30
    27ea:	11 23       	and	r17, r17
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <vfscanf+0x24c>
    27ee:	f1 ce       	rjmp	.-542    	; 0x25d2 <vfscanf+0x2e>
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <vfscanf+0x258>
    27f2:	55 20       	and	r5, r5
    27f4:	19 f4       	brne	.+6      	; 0x27fc <vfscanf+0x258>
    27f6:	2f ef       	ldi	r18, 0xFF	; 255
    27f8:	3f ef       	ldi	r19, 0xFF	; 255
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfscanf+0x25c>
    27fc:	25 2d       	mov	r18, r5
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	c9 01       	movw	r24, r18
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	bf 90       	pop	r11
    2814:	af 90       	pop	r10
    2816:	9f 90       	pop	r9
    2818:	8f 90       	pop	r8
    281a:	7f 90       	pop	r7
    281c:	6f 90       	pop	r6
    281e:	5f 90       	pop	r5
    2820:	08 95       	ret

00002822 <__floatunsisf>:
    2822:	e8 94       	clt
    2824:	09 c0       	rjmp	.+18     	; 0x2838 <__floatsisf+0x12>

00002826 <__floatsisf>:
    2826:	97 fb       	bst	r25, 7
    2828:	3e f4       	brtc	.+14     	; 0x2838 <__floatsisf+0x12>
    282a:	90 95       	com	r25
    282c:	80 95       	com	r24
    282e:	70 95       	com	r23
    2830:	61 95       	neg	r22
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	8f 4f       	sbci	r24, 0xFF	; 255
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	99 23       	and	r25, r25
    283a:	a9 f0       	breq	.+42     	; 0x2866 <__floatsisf+0x40>
    283c:	f9 2f       	mov	r31, r25
    283e:	96 e9       	ldi	r25, 0x96	; 150
    2840:	bb 27       	eor	r27, r27
    2842:	93 95       	inc	r25
    2844:	f6 95       	lsr	r31
    2846:	87 95       	ror	r24
    2848:	77 95       	ror	r23
    284a:	67 95       	ror	r22
    284c:	b7 95       	ror	r27
    284e:	f1 11       	cpse	r31, r1
    2850:	f8 cf       	rjmp	.-16     	; 0x2842 <__floatsisf+0x1c>
    2852:	fa f4       	brpl	.+62     	; 0x2892 <__floatsisf+0x6c>
    2854:	bb 0f       	add	r27, r27
    2856:	11 f4       	brne	.+4      	; 0x285c <__floatsisf+0x36>
    2858:	60 ff       	sbrs	r22, 0
    285a:	1b c0       	rjmp	.+54     	; 0x2892 <__floatsisf+0x6c>
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	16 c0       	rjmp	.+44     	; 0x2892 <__floatsisf+0x6c>
    2866:	88 23       	and	r24, r24
    2868:	11 f0       	breq	.+4      	; 0x286e <__floatsisf+0x48>
    286a:	96 e9       	ldi	r25, 0x96	; 150
    286c:	11 c0       	rjmp	.+34     	; 0x2890 <__floatsisf+0x6a>
    286e:	77 23       	and	r23, r23
    2870:	21 f0       	breq	.+8      	; 0x287a <__floatsisf+0x54>
    2872:	9e e8       	ldi	r25, 0x8E	; 142
    2874:	87 2f       	mov	r24, r23
    2876:	76 2f       	mov	r23, r22
    2878:	05 c0       	rjmp	.+10     	; 0x2884 <__floatsisf+0x5e>
    287a:	66 23       	and	r22, r22
    287c:	71 f0       	breq	.+28     	; 0x289a <__floatsisf+0x74>
    287e:	96 e8       	ldi	r25, 0x86	; 134
    2880:	86 2f       	mov	r24, r22
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	2a f0       	brmi	.+10     	; 0x2892 <__floatsisf+0x6c>
    2888:	9a 95       	dec	r25
    288a:	66 0f       	add	r22, r22
    288c:	77 1f       	adc	r23, r23
    288e:	88 1f       	adc	r24, r24
    2890:	da f7       	brpl	.-10     	; 0x2888 <__floatsisf+0x62>
    2892:	88 0f       	add	r24, r24
    2894:	96 95       	lsr	r25
    2896:	87 95       	ror	r24
    2898:	97 f9       	bld	r25, 7
    289a:	08 95       	ret

0000289c <__mulsf3>:
    289c:	0b d0       	rcall	.+22     	; 0x28b4 <__mulsf3x>
    289e:	78 c0       	rjmp	.+240    	; 0x2990 <__fp_round>
    28a0:	69 d0       	rcall	.+210    	; 0x2974 <__fp_pscA>
    28a2:	28 f0       	brcs	.+10     	; 0x28ae <__mulsf3+0x12>
    28a4:	6e d0       	rcall	.+220    	; 0x2982 <__fp_pscB>
    28a6:	18 f0       	brcs	.+6      	; 0x28ae <__mulsf3+0x12>
    28a8:	95 23       	and	r25, r21
    28aa:	09 f0       	breq	.+2      	; 0x28ae <__mulsf3+0x12>
    28ac:	5a c0       	rjmp	.+180    	; 0x2962 <__fp_inf>
    28ae:	5f c0       	rjmp	.+190    	; 0x296e <__fp_nan>
    28b0:	11 24       	eor	r1, r1
    28b2:	a2 c0       	rjmp	.+324    	; 0x29f8 <__fp_szero>

000028b4 <__mulsf3x>:
    28b4:	7e d0       	rcall	.+252    	; 0x29b2 <__fp_split3>
    28b6:	a0 f3       	brcs	.-24     	; 0x28a0 <__mulsf3+0x4>

000028b8 <__mulsf3_pse>:
    28b8:	95 9f       	mul	r25, r21
    28ba:	d1 f3       	breq	.-12     	; 0x28b0 <__mulsf3+0x14>
    28bc:	95 0f       	add	r25, r21
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	55 1f       	adc	r21, r21
    28c2:	62 9f       	mul	r22, r18
    28c4:	f0 01       	movw	r30, r0
    28c6:	72 9f       	mul	r23, r18
    28c8:	bb 27       	eor	r27, r27
    28ca:	f0 0d       	add	r31, r0
    28cc:	b1 1d       	adc	r27, r1
    28ce:	63 9f       	mul	r22, r19
    28d0:	aa 27       	eor	r26, r26
    28d2:	f0 0d       	add	r31, r0
    28d4:	b1 1d       	adc	r27, r1
    28d6:	aa 1f       	adc	r26, r26
    28d8:	64 9f       	mul	r22, r20
    28da:	66 27       	eor	r22, r22
    28dc:	b0 0d       	add	r27, r0
    28de:	a1 1d       	adc	r26, r1
    28e0:	66 1f       	adc	r22, r22
    28e2:	82 9f       	mul	r24, r18
    28e4:	22 27       	eor	r18, r18
    28e6:	b0 0d       	add	r27, r0
    28e8:	a1 1d       	adc	r26, r1
    28ea:	62 1f       	adc	r22, r18
    28ec:	73 9f       	mul	r23, r19
    28ee:	b0 0d       	add	r27, r0
    28f0:	a1 1d       	adc	r26, r1
    28f2:	62 1f       	adc	r22, r18
    28f4:	83 9f       	mul	r24, r19
    28f6:	a0 0d       	add	r26, r0
    28f8:	61 1d       	adc	r22, r1
    28fa:	22 1f       	adc	r18, r18
    28fc:	74 9f       	mul	r23, r20
    28fe:	33 27       	eor	r19, r19
    2900:	a0 0d       	add	r26, r0
    2902:	61 1d       	adc	r22, r1
    2904:	23 1f       	adc	r18, r19
    2906:	84 9f       	mul	r24, r20
    2908:	60 0d       	add	r22, r0
    290a:	21 1d       	adc	r18, r1
    290c:	82 2f       	mov	r24, r18
    290e:	76 2f       	mov	r23, r22
    2910:	6a 2f       	mov	r22, r26
    2912:	11 24       	eor	r1, r1
    2914:	9f 57       	subi	r25, 0x7F	; 127
    2916:	50 40       	sbci	r21, 0x00	; 0
    2918:	8a f0       	brmi	.+34     	; 0x293c <__mulsf3_pse+0x84>
    291a:	e1 f0       	breq	.+56     	; 0x2954 <__mulsf3_pse+0x9c>
    291c:	88 23       	and	r24, r24
    291e:	4a f0       	brmi	.+18     	; 0x2932 <__mulsf3_pse+0x7a>
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	bb 1f       	adc	r27, r27
    2926:	66 1f       	adc	r22, r22
    2928:	77 1f       	adc	r23, r23
    292a:	88 1f       	adc	r24, r24
    292c:	91 50       	subi	r25, 0x01	; 1
    292e:	50 40       	sbci	r21, 0x00	; 0
    2930:	a9 f7       	brne	.-22     	; 0x291c <__mulsf3_pse+0x64>
    2932:	9e 3f       	cpi	r25, 0xFE	; 254
    2934:	51 05       	cpc	r21, r1
    2936:	70 f0       	brcs	.+28     	; 0x2954 <__mulsf3_pse+0x9c>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <__fp_inf>
    293a:	5e c0       	rjmp	.+188    	; 0x29f8 <__fp_szero>
    293c:	5f 3f       	cpi	r21, 0xFF	; 255
    293e:	ec f3       	brlt	.-6      	; 0x293a <__mulsf3_pse+0x82>
    2940:	98 3e       	cpi	r25, 0xE8	; 232
    2942:	dc f3       	brlt	.-10     	; 0x293a <__mulsf3_pse+0x82>
    2944:	86 95       	lsr	r24
    2946:	77 95       	ror	r23
    2948:	67 95       	ror	r22
    294a:	b7 95       	ror	r27
    294c:	f7 95       	ror	r31
    294e:	e7 95       	ror	r30
    2950:	9f 5f       	subi	r25, 0xFF	; 255
    2952:	c1 f7       	brne	.-16     	; 0x2944 <__mulsf3_pse+0x8c>
    2954:	fe 2b       	or	r31, r30
    2956:	88 0f       	add	r24, r24
    2958:	91 1d       	adc	r25, r1
    295a:	96 95       	lsr	r25
    295c:	87 95       	ror	r24
    295e:	97 f9       	bld	r25, 7
    2960:	08 95       	ret

00002962 <__fp_inf>:
    2962:	97 f9       	bld	r25, 7
    2964:	9f 67       	ori	r25, 0x7F	; 127
    2966:	80 e8       	ldi	r24, 0x80	; 128
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	08 95       	ret

0000296e <__fp_nan>:
    296e:	9f ef       	ldi	r25, 0xFF	; 255
    2970:	80 ec       	ldi	r24, 0xC0	; 192
    2972:	08 95       	ret

00002974 <__fp_pscA>:
    2974:	00 24       	eor	r0, r0
    2976:	0a 94       	dec	r0
    2978:	16 16       	cp	r1, r22
    297a:	17 06       	cpc	r1, r23
    297c:	18 06       	cpc	r1, r24
    297e:	09 06       	cpc	r0, r25
    2980:	08 95       	ret

00002982 <__fp_pscB>:
    2982:	00 24       	eor	r0, r0
    2984:	0a 94       	dec	r0
    2986:	12 16       	cp	r1, r18
    2988:	13 06       	cpc	r1, r19
    298a:	14 06       	cpc	r1, r20
    298c:	05 06       	cpc	r0, r21
    298e:	08 95       	ret

00002990 <__fp_round>:
    2990:	09 2e       	mov	r0, r25
    2992:	03 94       	inc	r0
    2994:	00 0c       	add	r0, r0
    2996:	11 f4       	brne	.+4      	; 0x299c <__fp_round+0xc>
    2998:	88 23       	and	r24, r24
    299a:	52 f0       	brmi	.+20     	; 0x29b0 <__fp_round+0x20>
    299c:	bb 0f       	add	r27, r27
    299e:	40 f4       	brcc	.+16     	; 0x29b0 <__fp_round+0x20>
    29a0:	bf 2b       	or	r27, r31
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <__fp_round+0x18>
    29a4:	60 ff       	sbrs	r22, 0
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <__fp_round+0x20>
    29a8:	6f 5f       	subi	r22, 0xFF	; 255
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255
    29ac:	8f 4f       	sbci	r24, 0xFF	; 255
    29ae:	9f 4f       	sbci	r25, 0xFF	; 255
    29b0:	08 95       	ret

000029b2 <__fp_split3>:
    29b2:	57 fd       	sbrc	r21, 7
    29b4:	90 58       	subi	r25, 0x80	; 128
    29b6:	44 0f       	add	r20, r20
    29b8:	55 1f       	adc	r21, r21
    29ba:	59 f0       	breq	.+22     	; 0x29d2 <__fp_splitA+0x10>
    29bc:	5f 3f       	cpi	r21, 0xFF	; 255
    29be:	71 f0       	breq	.+28     	; 0x29dc <__fp_splitA+0x1a>
    29c0:	47 95       	ror	r20

000029c2 <__fp_splitA>:
    29c2:	88 0f       	add	r24, r24
    29c4:	97 fb       	bst	r25, 7
    29c6:	99 1f       	adc	r25, r25
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <__fp_splitA+0x20>
    29ca:	9f 3f       	cpi	r25, 0xFF	; 255
    29cc:	79 f0       	breq	.+30     	; 0x29ec <__fp_splitA+0x2a>
    29ce:	87 95       	ror	r24
    29d0:	08 95       	ret
    29d2:	12 16       	cp	r1, r18
    29d4:	13 06       	cpc	r1, r19
    29d6:	14 06       	cpc	r1, r20
    29d8:	55 1f       	adc	r21, r21
    29da:	f2 cf       	rjmp	.-28     	; 0x29c0 <__fp_split3+0xe>
    29dc:	46 95       	lsr	r20
    29de:	f1 df       	rcall	.-30     	; 0x29c2 <__fp_splitA>
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <__fp_splitA+0x30>
    29e2:	16 16       	cp	r1, r22
    29e4:	17 06       	cpc	r1, r23
    29e6:	18 06       	cpc	r1, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	f1 cf       	rjmp	.-30     	; 0x29ce <__fp_splitA+0xc>
    29ec:	86 95       	lsr	r24
    29ee:	71 05       	cpc	r23, r1
    29f0:	61 05       	cpc	r22, r1
    29f2:	08 94       	sec
    29f4:	08 95       	ret

000029f6 <__fp_zero>:
    29f6:	e8 94       	clt

000029f8 <__fp_szero>:
    29f8:	bb 27       	eor	r27, r27
    29fa:	66 27       	eor	r22, r22
    29fc:	77 27       	eor	r23, r23
    29fe:	cb 01       	movw	r24, r22
    2a00:	97 f9       	bld	r25, 7
    2a02:	08 95       	ret

00002a04 <__subsf3>:
    2a04:	50 58       	subi	r21, 0x80	; 128

00002a06 <__addsf3>:
    2a06:	bb 27       	eor	r27, r27
    2a08:	aa 27       	eor	r26, r26
    2a0a:	0e d0       	rcall	.+28     	; 0x2a28 <__addsf3x>
    2a0c:	c1 cf       	rjmp	.-126    	; 0x2990 <__fp_round>
    2a0e:	b2 df       	rcall	.-156    	; 0x2974 <__fp_pscA>
    2a10:	30 f0       	brcs	.+12     	; 0x2a1e <__addsf3+0x18>
    2a12:	b7 df       	rcall	.-146    	; 0x2982 <__fp_pscB>
    2a14:	20 f0       	brcs	.+8      	; 0x2a1e <__addsf3+0x18>
    2a16:	31 f4       	brne	.+12     	; 0x2a24 <__addsf3+0x1e>
    2a18:	9f 3f       	cpi	r25, 0xFF	; 255
    2a1a:	11 f4       	brne	.+4      	; 0x2a20 <__addsf3+0x1a>
    2a1c:	1e f4       	brtc	.+6      	; 0x2a24 <__addsf3+0x1e>
    2a1e:	a7 cf       	rjmp	.-178    	; 0x296e <__fp_nan>
    2a20:	0e f4       	brtc	.+2      	; 0x2a24 <__addsf3+0x1e>
    2a22:	e0 95       	com	r30
    2a24:	e7 fb       	bst	r30, 7
    2a26:	9d cf       	rjmp	.-198    	; 0x2962 <__fp_inf>

00002a28 <__addsf3x>:
    2a28:	e9 2f       	mov	r30, r25
    2a2a:	c3 df       	rcall	.-122    	; 0x29b2 <__fp_split3>
    2a2c:	80 f3       	brcs	.-32     	; 0x2a0e <__addsf3+0x8>
    2a2e:	ba 17       	cp	r27, r26
    2a30:	62 07       	cpc	r22, r18
    2a32:	73 07       	cpc	r23, r19
    2a34:	84 07       	cpc	r24, r20
    2a36:	95 07       	cpc	r25, r21
    2a38:	18 f0       	brcs	.+6      	; 0x2a40 <__addsf3x+0x18>
    2a3a:	71 f4       	brne	.+28     	; 0x2a58 <__addsf3x+0x30>
    2a3c:	9e f5       	brtc	.+102    	; 0x2aa4 <__addsf3x+0x7c>
    2a3e:	db cf       	rjmp	.-74     	; 0x29f6 <__fp_zero>
    2a40:	0e f4       	brtc	.+2      	; 0x2a44 <__addsf3x+0x1c>
    2a42:	e0 95       	com	r30
    2a44:	0b 2e       	mov	r0, r27
    2a46:	ba 2f       	mov	r27, r26
    2a48:	a0 2d       	mov	r26, r0
    2a4a:	0b 01       	movw	r0, r22
    2a4c:	b9 01       	movw	r22, r18
    2a4e:	90 01       	movw	r18, r0
    2a50:	0c 01       	movw	r0, r24
    2a52:	ca 01       	movw	r24, r20
    2a54:	a0 01       	movw	r20, r0
    2a56:	11 24       	eor	r1, r1
    2a58:	ff 27       	eor	r31, r31
    2a5a:	59 1b       	sub	r21, r25
    2a5c:	99 f0       	breq	.+38     	; 0x2a84 <__addsf3x+0x5c>
    2a5e:	59 3f       	cpi	r21, 0xF9	; 249
    2a60:	50 f4       	brcc	.+20     	; 0x2a76 <__addsf3x+0x4e>
    2a62:	50 3e       	cpi	r21, 0xE0	; 224
    2a64:	68 f1       	brcs	.+90     	; 0x2ac0 <__addsf3x+0x98>
    2a66:	1a 16       	cp	r1, r26
    2a68:	f0 40       	sbci	r31, 0x00	; 0
    2a6a:	a2 2f       	mov	r26, r18
    2a6c:	23 2f       	mov	r18, r19
    2a6e:	34 2f       	mov	r19, r20
    2a70:	44 27       	eor	r20, r20
    2a72:	58 5f       	subi	r21, 0xF8	; 248
    2a74:	f3 cf       	rjmp	.-26     	; 0x2a5c <__addsf3x+0x34>
    2a76:	46 95       	lsr	r20
    2a78:	37 95       	ror	r19
    2a7a:	27 95       	ror	r18
    2a7c:	a7 95       	ror	r26
    2a7e:	f0 40       	sbci	r31, 0x00	; 0
    2a80:	53 95       	inc	r21
    2a82:	c9 f7       	brne	.-14     	; 0x2a76 <__addsf3x+0x4e>
    2a84:	7e f4       	brtc	.+30     	; 0x2aa4 <__addsf3x+0x7c>
    2a86:	1f 16       	cp	r1, r31
    2a88:	ba 0b       	sbc	r27, r26
    2a8a:	62 0b       	sbc	r22, r18
    2a8c:	73 0b       	sbc	r23, r19
    2a8e:	84 0b       	sbc	r24, r20
    2a90:	ba f0       	brmi	.+46     	; 0x2ac0 <__addsf3x+0x98>
    2a92:	91 50       	subi	r25, 0x01	; 1
    2a94:	a1 f0       	breq	.+40     	; 0x2abe <__addsf3x+0x96>
    2a96:	ff 0f       	add	r31, r31
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	66 1f       	adc	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	c2 f7       	brpl	.-16     	; 0x2a92 <__addsf3x+0x6a>
    2aa2:	0e c0       	rjmp	.+28     	; 0x2ac0 <__addsf3x+0x98>
    2aa4:	ba 0f       	add	r27, r26
    2aa6:	62 1f       	adc	r22, r18
    2aa8:	73 1f       	adc	r23, r19
    2aaa:	84 1f       	adc	r24, r20
    2aac:	48 f4       	brcc	.+18     	; 0x2ac0 <__addsf3x+0x98>
    2aae:	87 95       	ror	r24
    2ab0:	77 95       	ror	r23
    2ab2:	67 95       	ror	r22
    2ab4:	b7 95       	ror	r27
    2ab6:	f7 95       	ror	r31
    2ab8:	9e 3f       	cpi	r25, 0xFE	; 254
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <__addsf3x+0x96>
    2abc:	b3 cf       	rjmp	.-154    	; 0x2a24 <__addsf3+0x1e>
    2abe:	93 95       	inc	r25
    2ac0:	88 0f       	add	r24, r24
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <__addsf3x+0x9e>
    2ac4:	99 27       	eor	r25, r25
    2ac6:	ee 0f       	add	r30, r30
    2ac8:	97 95       	ror	r25
    2aca:	87 95       	ror	r24
    2acc:	08 95       	ret

00002ace <__cmpsf2>:
    2ace:	34 d0       	rcall	.+104    	; 0x2b38 <__fp_cmp>
    2ad0:	08 f4       	brcc	.+2      	; 0x2ad4 <__cmpsf2+0x6>
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	08 95       	ret

00002ad6 <__fixsfsi>:
    2ad6:	04 d0       	rcall	.+8      	; 0x2ae0 <__fixunssfsi>
    2ad8:	68 94       	set
    2ada:	b1 11       	cpse	r27, r1
    2adc:	8d cf       	rjmp	.-230    	; 0x29f8 <__fp_szero>
    2ade:	08 95       	ret

00002ae0 <__fixunssfsi>:
    2ae0:	70 df       	rcall	.-288    	; 0x29c2 <__fp_splitA>
    2ae2:	88 f0       	brcs	.+34     	; 0x2b06 <__fixunssfsi+0x26>
    2ae4:	9f 57       	subi	r25, 0x7F	; 127
    2ae6:	90 f0       	brcs	.+36     	; 0x2b0c <__fixunssfsi+0x2c>
    2ae8:	b9 2f       	mov	r27, r25
    2aea:	99 27       	eor	r25, r25
    2aec:	b7 51       	subi	r27, 0x17	; 23
    2aee:	a0 f0       	brcs	.+40     	; 0x2b18 <__fixunssfsi+0x38>
    2af0:	d1 f0       	breq	.+52     	; 0x2b26 <__fixunssfsi+0x46>
    2af2:	66 0f       	add	r22, r22
    2af4:	77 1f       	adc	r23, r23
    2af6:	88 1f       	adc	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	1a f0       	brmi	.+6      	; 0x2b02 <__fixunssfsi+0x22>
    2afc:	ba 95       	dec	r27
    2afe:	c9 f7       	brne	.-14     	; 0x2af2 <__fixunssfsi+0x12>
    2b00:	12 c0       	rjmp	.+36     	; 0x2b26 <__fixunssfsi+0x46>
    2b02:	b1 30       	cpi	r27, 0x01	; 1
    2b04:	81 f0       	breq	.+32     	; 0x2b26 <__fixunssfsi+0x46>
    2b06:	77 df       	rcall	.-274    	; 0x29f6 <__fp_zero>
    2b08:	b1 e0       	ldi	r27, 0x01	; 1
    2b0a:	08 95       	ret
    2b0c:	74 cf       	rjmp	.-280    	; 0x29f6 <__fp_zero>
    2b0e:	67 2f       	mov	r22, r23
    2b10:	78 2f       	mov	r23, r24
    2b12:	88 27       	eor	r24, r24
    2b14:	b8 5f       	subi	r27, 0xF8	; 248
    2b16:	39 f0       	breq	.+14     	; 0x2b26 <__fixunssfsi+0x46>
    2b18:	b9 3f       	cpi	r27, 0xF9	; 249
    2b1a:	cc f3       	brlt	.-14     	; 0x2b0e <__fixunssfsi+0x2e>
    2b1c:	86 95       	lsr	r24
    2b1e:	77 95       	ror	r23
    2b20:	67 95       	ror	r22
    2b22:	b3 95       	inc	r27
    2b24:	d9 f7       	brne	.-10     	; 0x2b1c <__fixunssfsi+0x3c>
    2b26:	3e f4       	brtc	.+14     	; 0x2b36 <__fixunssfsi+0x56>
    2b28:	90 95       	com	r25
    2b2a:	80 95       	com	r24
    2b2c:	70 95       	com	r23
    2b2e:	61 95       	neg	r22
    2b30:	7f 4f       	sbci	r23, 0xFF	; 255
    2b32:	8f 4f       	sbci	r24, 0xFF	; 255
    2b34:	9f 4f       	sbci	r25, 0xFF	; 255
    2b36:	08 95       	ret

00002b38 <__fp_cmp>:
    2b38:	99 0f       	add	r25, r25
    2b3a:	00 08       	sbc	r0, r0
    2b3c:	55 0f       	add	r21, r21
    2b3e:	aa 0b       	sbc	r26, r26
    2b40:	e0 e8       	ldi	r30, 0x80	; 128
    2b42:	fe ef       	ldi	r31, 0xFE	; 254
    2b44:	16 16       	cp	r1, r22
    2b46:	17 06       	cpc	r1, r23
    2b48:	e8 07       	cpc	r30, r24
    2b4a:	f9 07       	cpc	r31, r25
    2b4c:	c0 f0       	brcs	.+48     	; 0x2b7e <__fp_cmp+0x46>
    2b4e:	12 16       	cp	r1, r18
    2b50:	13 06       	cpc	r1, r19
    2b52:	e4 07       	cpc	r30, r20
    2b54:	f5 07       	cpc	r31, r21
    2b56:	98 f0       	brcs	.+38     	; 0x2b7e <__fp_cmp+0x46>
    2b58:	62 1b       	sub	r22, r18
    2b5a:	73 0b       	sbc	r23, r19
    2b5c:	84 0b       	sbc	r24, r20
    2b5e:	95 0b       	sbc	r25, r21
    2b60:	39 f4       	brne	.+14     	; 0x2b70 <__fp_cmp+0x38>
    2b62:	0a 26       	eor	r0, r26
    2b64:	61 f0       	breq	.+24     	; 0x2b7e <__fp_cmp+0x46>
    2b66:	23 2b       	or	r18, r19
    2b68:	24 2b       	or	r18, r20
    2b6a:	25 2b       	or	r18, r21
    2b6c:	21 f4       	brne	.+8      	; 0x2b76 <__fp_cmp+0x3e>
    2b6e:	08 95       	ret
    2b70:	0a 26       	eor	r0, r26
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__fp_cmp+0x3e>
    2b74:	a1 40       	sbci	r26, 0x01	; 1
    2b76:	a6 95       	lsr	r26
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	81 1d       	adc	r24, r1
    2b7c:	81 1d       	adc	r24, r1
    2b7e:	08 95       	ret

00002b80 <__gesf2>:
    2b80:	db df       	rcall	.-74     	; 0x2b38 <__fp_cmp>
    2b82:	08 f4       	brcc	.+2      	; 0x2b86 <__gesf2+0x6>
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	08 95       	ret

00002b88 <exit>:
    2b88:	f8 94       	cli
    2b8a:	0c 94 9b 18 	jmp	0x3136	; 0x3136 <_exit>

00002b8e <__ftoa_engine>:
    2b8e:	28 30       	cpi	r18, 0x08	; 8
    2b90:	08 f0       	brcs	.+2      	; 0x2b94 <__ftoa_engine+0x6>
    2b92:	27 e0       	ldi	r18, 0x07	; 7
    2b94:	33 27       	eor	r19, r19
    2b96:	da 01       	movw	r26, r20
    2b98:	99 0f       	add	r25, r25
    2b9a:	31 1d       	adc	r19, r1
    2b9c:	87 fd       	sbrc	r24, 7
    2b9e:	91 60       	ori	r25, 0x01	; 1
    2ba0:	00 96       	adiw	r24, 0x00	; 0
    2ba2:	61 05       	cpc	r22, r1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	39 f4       	brne	.+14     	; 0x2bb6 <__ftoa_engine+0x28>
    2ba8:	32 60       	ori	r19, 0x02	; 2
    2baa:	2e 5f       	subi	r18, 0xFE	; 254
    2bac:	3d 93       	st	X+, r19
    2bae:	30 e3       	ldi	r19, 0x30	; 48
    2bb0:	2a 95       	dec	r18
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <__ftoa_engine+0x1e>
    2bb4:	08 95       	ret
    2bb6:	9f 3f       	cpi	r25, 0xFF	; 255
    2bb8:	30 f0       	brcs	.+12     	; 0x2bc6 <__ftoa_engine+0x38>
    2bba:	80 38       	cpi	r24, 0x80	; 128
    2bbc:	71 05       	cpc	r23, r1
    2bbe:	61 05       	cpc	r22, r1
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <__ftoa_engine+0x36>
    2bc2:	3c 5f       	subi	r19, 0xFC	; 252
    2bc4:	3c 5f       	subi	r19, 0xFC	; 252
    2bc6:	3d 93       	st	X+, r19
    2bc8:	91 30       	cpi	r25, 0x01	; 1
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <__ftoa_engine+0x40>
    2bcc:	80 68       	ori	r24, 0x80	; 128
    2bce:	91 1d       	adc	r25, r1
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	1f 93       	push	r17
    2bd6:	0f 93       	push	r16
    2bd8:	ff 92       	push	r15
    2bda:	ef 92       	push	r14
    2bdc:	19 2f       	mov	r17, r25
    2bde:	98 7f       	andi	r25, 0xF8	; 248
    2be0:	96 95       	lsr	r25
    2be2:	e9 2f       	mov	r30, r25
    2be4:	96 95       	lsr	r25
    2be6:	96 95       	lsr	r25
    2be8:	e9 0f       	add	r30, r25
    2bea:	ff 27       	eor	r31, r31
    2bec:	eb 50       	subi	r30, 0x0B	; 11
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	99 27       	eor	r25, r25
    2bf2:	33 27       	eor	r19, r19
    2bf4:	ee 24       	eor	r14, r14
    2bf6:	ff 24       	eor	r15, r15
    2bf8:	a7 01       	movw	r20, r14
    2bfa:	e7 01       	movw	r28, r14
    2bfc:	05 90       	lpm	r0, Z+
    2bfe:	08 94       	sec
    2c00:	07 94       	ror	r0
    2c02:	28 f4       	brcc	.+10     	; 0x2c0e <__ftoa_engine+0x80>
    2c04:	36 0f       	add	r19, r22
    2c06:	e7 1e       	adc	r14, r23
    2c08:	f8 1e       	adc	r15, r24
    2c0a:	49 1f       	adc	r20, r25
    2c0c:	51 1d       	adc	r21, r1
    2c0e:	66 0f       	add	r22, r22
    2c10:	77 1f       	adc	r23, r23
    2c12:	88 1f       	adc	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	06 94       	lsr	r0
    2c18:	a1 f7       	brne	.-24     	; 0x2c02 <__ftoa_engine+0x74>
    2c1a:	05 90       	lpm	r0, Z+
    2c1c:	07 94       	ror	r0
    2c1e:	28 f4       	brcc	.+10     	; 0x2c2a <__ftoa_engine+0x9c>
    2c20:	e7 0e       	add	r14, r23
    2c22:	f8 1e       	adc	r15, r24
    2c24:	49 1f       	adc	r20, r25
    2c26:	56 1f       	adc	r21, r22
    2c28:	c1 1d       	adc	r28, r1
    2c2a:	77 0f       	add	r23, r23
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	66 1f       	adc	r22, r22
    2c32:	06 94       	lsr	r0
    2c34:	a1 f7       	brne	.-24     	; 0x2c1e <__ftoa_engine+0x90>
    2c36:	05 90       	lpm	r0, Z+
    2c38:	07 94       	ror	r0
    2c3a:	28 f4       	brcc	.+10     	; 0x2c46 <__ftoa_engine+0xb8>
    2c3c:	f8 0e       	add	r15, r24
    2c3e:	49 1f       	adc	r20, r25
    2c40:	56 1f       	adc	r21, r22
    2c42:	c7 1f       	adc	r28, r23
    2c44:	d1 1d       	adc	r29, r1
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	66 1f       	adc	r22, r22
    2c4c:	77 1f       	adc	r23, r23
    2c4e:	06 94       	lsr	r0
    2c50:	a1 f7       	brne	.-24     	; 0x2c3a <__ftoa_engine+0xac>
    2c52:	05 90       	lpm	r0, Z+
    2c54:	07 94       	ror	r0
    2c56:	20 f4       	brcc	.+8      	; 0x2c60 <__ftoa_engine+0xd2>
    2c58:	49 0f       	add	r20, r25
    2c5a:	56 1f       	adc	r21, r22
    2c5c:	c7 1f       	adc	r28, r23
    2c5e:	d8 1f       	adc	r29, r24
    2c60:	99 0f       	add	r25, r25
    2c62:	66 1f       	adc	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	88 1f       	adc	r24, r24
    2c68:	06 94       	lsr	r0
    2c6a:	a9 f7       	brne	.-22     	; 0x2c56 <__ftoa_engine+0xc8>
    2c6c:	84 91       	lpm	r24, Z+
    2c6e:	10 95       	com	r17
    2c70:	17 70       	andi	r17, 0x07	; 7
    2c72:	41 f0       	breq	.+16     	; 0x2c84 <__ftoa_engine+0xf6>
    2c74:	d6 95       	lsr	r29
    2c76:	c7 95       	ror	r28
    2c78:	57 95       	ror	r21
    2c7a:	47 95       	ror	r20
    2c7c:	f7 94       	ror	r15
    2c7e:	e7 94       	ror	r14
    2c80:	1a 95       	dec	r17
    2c82:	c1 f7       	brne	.-16     	; 0x2c74 <__ftoa_engine+0xe6>
    2c84:	eb e9       	ldi	r30, 0x9B	; 155
    2c86:	f1 e0       	ldi	r31, 0x01	; 1
    2c88:	68 94       	set
    2c8a:	15 90       	lpm	r1, Z+
    2c8c:	15 91       	lpm	r17, Z+
    2c8e:	35 91       	lpm	r19, Z+
    2c90:	65 91       	lpm	r22, Z+
    2c92:	95 91       	lpm	r25, Z+
    2c94:	05 90       	lpm	r0, Z+
    2c96:	7f e2       	ldi	r23, 0x2F	; 47
    2c98:	73 95       	inc	r23
    2c9a:	e1 18       	sub	r14, r1
    2c9c:	f1 0a       	sbc	r15, r17
    2c9e:	43 0b       	sbc	r20, r19
    2ca0:	56 0b       	sbc	r21, r22
    2ca2:	c9 0b       	sbc	r28, r25
    2ca4:	d0 09       	sbc	r29, r0
    2ca6:	c0 f7       	brcc	.-16     	; 0x2c98 <__ftoa_engine+0x10a>
    2ca8:	e1 0c       	add	r14, r1
    2caa:	f1 1e       	adc	r15, r17
    2cac:	43 1f       	adc	r20, r19
    2cae:	56 1f       	adc	r21, r22
    2cb0:	c9 1f       	adc	r28, r25
    2cb2:	d0 1d       	adc	r29, r0
    2cb4:	7e f4       	brtc	.+30     	; 0x2cd4 <__ftoa_engine+0x146>
    2cb6:	70 33       	cpi	r23, 0x30	; 48
    2cb8:	11 f4       	brne	.+4      	; 0x2cbe <__ftoa_engine+0x130>
    2cba:	8a 95       	dec	r24
    2cbc:	e6 cf       	rjmp	.-52     	; 0x2c8a <__ftoa_engine+0xfc>
    2cbe:	e8 94       	clt
    2cc0:	01 50       	subi	r16, 0x01	; 1
    2cc2:	30 f0       	brcs	.+12     	; 0x2cd0 <__ftoa_engine+0x142>
    2cc4:	08 0f       	add	r16, r24
    2cc6:	0a f4       	brpl	.+2      	; 0x2cca <__ftoa_engine+0x13c>
    2cc8:	00 27       	eor	r16, r16
    2cca:	02 17       	cp	r16, r18
    2ccc:	08 f4       	brcc	.+2      	; 0x2cd0 <__ftoa_engine+0x142>
    2cce:	20 2f       	mov	r18, r16
    2cd0:	23 95       	inc	r18
    2cd2:	02 2f       	mov	r16, r18
    2cd4:	7a 33       	cpi	r23, 0x3A	; 58
    2cd6:	28 f0       	brcs	.+10     	; 0x2ce2 <__ftoa_engine+0x154>
    2cd8:	79 e3       	ldi	r23, 0x39	; 57
    2cda:	7d 93       	st	X+, r23
    2cdc:	2a 95       	dec	r18
    2cde:	e9 f7       	brne	.-6      	; 0x2cda <__ftoa_engine+0x14c>
    2ce0:	10 c0       	rjmp	.+32     	; 0x2d02 <__ftoa_engine+0x174>
    2ce2:	7d 93       	st	X+, r23
    2ce4:	2a 95       	dec	r18
    2ce6:	89 f6       	brne	.-94     	; 0x2c8a <__ftoa_engine+0xfc>
    2ce8:	06 94       	lsr	r0
    2cea:	97 95       	ror	r25
    2cec:	67 95       	ror	r22
    2cee:	37 95       	ror	r19
    2cf0:	17 95       	ror	r17
    2cf2:	17 94       	ror	r1
    2cf4:	e1 18       	sub	r14, r1
    2cf6:	f1 0a       	sbc	r15, r17
    2cf8:	43 0b       	sbc	r20, r19
    2cfa:	56 0b       	sbc	r21, r22
    2cfc:	c9 0b       	sbc	r28, r25
    2cfe:	d0 09       	sbc	r29, r0
    2d00:	98 f0       	brcs	.+38     	; 0x2d28 <__ftoa_engine+0x19a>
    2d02:	23 95       	inc	r18
    2d04:	7e 91       	ld	r23, -X
    2d06:	73 95       	inc	r23
    2d08:	7a 33       	cpi	r23, 0x3A	; 58
    2d0a:	08 f0       	brcs	.+2      	; 0x2d0e <__ftoa_engine+0x180>
    2d0c:	70 e3       	ldi	r23, 0x30	; 48
    2d0e:	7c 93       	st	X, r23
    2d10:	20 13       	cpse	r18, r16
    2d12:	b8 f7       	brcc	.-18     	; 0x2d02 <__ftoa_engine+0x174>
    2d14:	7e 91       	ld	r23, -X
    2d16:	70 61       	ori	r23, 0x10	; 16
    2d18:	7d 93       	st	X+, r23
    2d1a:	30 f0       	brcs	.+12     	; 0x2d28 <__ftoa_engine+0x19a>
    2d1c:	83 95       	inc	r24
    2d1e:	71 e3       	ldi	r23, 0x31	; 49
    2d20:	7d 93       	st	X+, r23
    2d22:	70 e3       	ldi	r23, 0x30	; 48
    2d24:	2a 95       	dec	r18
    2d26:	e1 f7       	brne	.-8      	; 0x2d20 <__ftoa_engine+0x192>
    2d28:	11 24       	eor	r1, r1
    2d2a:	ef 90       	pop	r14
    2d2c:	ff 90       	pop	r15
    2d2e:	0f 91       	pop	r16
    2d30:	1f 91       	pop	r17
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	99 27       	eor	r25, r25
    2d38:	87 fd       	sbrc	r24, 7
    2d3a:	90 95       	com	r25
    2d3c:	08 95       	ret

00002d3e <isspace>:
    2d3e:	91 11       	cpse	r25, r1
    2d40:	93 c1       	rjmp	.+806    	; 0x3068 <__ctype_isfalse>
    2d42:	80 32       	cpi	r24, 0x20	; 32
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <isspace+0xe>
    2d46:	89 50       	subi	r24, 0x09	; 9
    2d48:	85 50       	subi	r24, 0x05	; 5
    2d4a:	d0 f7       	brcc	.-12     	; 0x2d40 <isspace+0x2>
    2d4c:	08 95       	ret

00002d4e <tolower>:
    2d4e:	91 11       	cpse	r25, r1
    2d50:	08 95       	ret
    2d52:	81 54       	subi	r24, 0x41	; 65
    2d54:	8a 51       	subi	r24, 0x1A	; 26
    2d56:	08 f4       	brcc	.+2      	; 0x2d5a <tolower+0xc>
    2d58:	80 5e       	subi	r24, 0xE0	; 224
    2d5a:	85 5a       	subi	r24, 0xA5	; 165
    2d5c:	08 95       	ret

00002d5e <strchr_P>:
    2d5e:	fc 01       	movw	r30, r24
    2d60:	05 90       	lpm	r0, Z+
    2d62:	06 16       	cp	r0, r22
    2d64:	21 f0       	breq	.+8      	; 0x2d6e <strchr_P+0x10>
    2d66:	00 20       	and	r0, r0
    2d68:	d9 f7       	brne	.-10     	; 0x2d60 <strchr_P+0x2>
    2d6a:	c0 01       	movw	r24, r0
    2d6c:	08 95       	ret
    2d6e:	31 97       	sbiw	r30, 0x01	; 1
    2d70:	cf 01       	movw	r24, r30
    2d72:	08 95       	ret

00002d74 <strnlen_P>:
    2d74:	fc 01       	movw	r30, r24
    2d76:	05 90       	lpm	r0, Z+
    2d78:	61 50       	subi	r22, 0x01	; 1
    2d7a:	70 40       	sbci	r23, 0x00	; 0
    2d7c:	01 10       	cpse	r0, r1
    2d7e:	d8 f7       	brcc	.-10     	; 0x2d76 <strnlen_P+0x2>
    2d80:	80 95       	com	r24
    2d82:	90 95       	com	r25
    2d84:	8e 0f       	add	r24, r30
    2d86:	9f 1f       	adc	r25, r31
    2d88:	08 95       	ret

00002d8a <strnlen>:
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	61 50       	subi	r22, 0x01	; 1
    2d8e:	70 40       	sbci	r23, 0x00	; 0
    2d90:	01 90       	ld	r0, Z+
    2d92:	01 10       	cpse	r0, r1
    2d94:	d8 f7       	brcc	.-10     	; 0x2d8c <strnlen+0x2>
    2d96:	80 95       	com	r24
    2d98:	90 95       	com	r25
    2d9a:	8e 0f       	add	r24, r30
    2d9c:	9f 1f       	adc	r25, r31
    2d9e:	08 95       	ret

00002da0 <fgetc>:
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	ec 01       	movw	r28, r24
    2da6:	4b 81       	ldd	r20, Y+3	; 0x03
    2da8:	40 ff       	sbrs	r20, 0
    2daa:	1a c0       	rjmp	.+52     	; 0x2de0 <fgetc+0x40>
    2dac:	46 ff       	sbrs	r20, 6
    2dae:	0a c0       	rjmp	.+20     	; 0x2dc4 <fgetc+0x24>
    2db0:	4f 7b       	andi	r20, 0xBF	; 191
    2db2:	4b 83       	std	Y+3, r20	; 0x03
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	9f 81       	ldd	r25, Y+7	; 0x07
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	9f 83       	std	Y+7, r25	; 0x07
    2dbc:	8e 83       	std	Y+6, r24	; 0x06
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	2b c0       	rjmp	.+86     	; 0x2e1a <fgetc+0x7a>
    2dc4:	42 ff       	sbrs	r20, 2
    2dc6:	13 c0       	rjmp	.+38     	; 0x2dee <fgetc+0x4e>
    2dc8:	e8 81       	ld	r30, Y
    2dca:	f9 81       	ldd	r31, Y+1	; 0x01
    2dcc:	80 81       	ld	r24, Z
    2dce:	28 2f       	mov	r18, r24
    2dd0:	33 27       	eor	r19, r19
    2dd2:	27 fd       	sbrc	r18, 7
    2dd4:	30 95       	com	r19
    2dd6:	21 15       	cp	r18, r1
    2dd8:	31 05       	cpc	r19, r1
    2dda:	29 f4       	brne	.+10     	; 0x2de6 <fgetc+0x46>
    2ddc:	40 62       	ori	r20, 0x20	; 32
    2dde:	4b 83       	std	Y+3, r20	; 0x03
    2de0:	2f ef       	ldi	r18, 0xFF	; 255
    2de2:	3f ef       	ldi	r19, 0xFF	; 255
    2de4:	1b c0       	rjmp	.+54     	; 0x2e1c <fgetc+0x7c>
    2de6:	31 96       	adiw	r30, 0x01	; 1
    2de8:	f9 83       	std	Y+1, r31	; 0x01
    2dea:	e8 83       	st	Y, r30
    2dec:	11 c0       	rjmp	.+34     	; 0x2e10 <fgetc+0x70>
    2dee:	ea 85       	ldd	r30, Y+10	; 0x0a
    2df0:	fb 85       	ldd	r31, Y+11	; 0x0b
    2df2:	ce 01       	movw	r24, r28
    2df4:	09 95       	icall
    2df6:	9c 01       	movw	r18, r24
    2df8:	97 ff       	sbrs	r25, 7
    2dfa:	0a c0       	rjmp	.+20     	; 0x2e10 <fgetc+0x70>
    2dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfe:	2f 5f       	subi	r18, 0xFF	; 255
    2e00:	3f 4f       	sbci	r19, 0xFF	; 255
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <fgetc+0x68>
    2e04:	80 e2       	ldi	r24, 0x20	; 32
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <fgetc+0x6a>
    2e08:	80 e1       	ldi	r24, 0x10	; 16
    2e0a:	89 2b       	or	r24, r25
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
    2e0e:	e8 cf       	rjmp	.-48     	; 0x2de0 <fgetc+0x40>
    2e10:	8e 81       	ldd	r24, Y+6	; 0x06
    2e12:	9f 81       	ldd	r25, Y+7	; 0x07
    2e14:	01 96       	adiw	r24, 0x01	; 1
    2e16:	9f 83       	std	Y+7, r25	; 0x07
    2e18:	8e 83       	std	Y+6, r24	; 0x06
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	c9 01       	movw	r24, r18
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	08 95       	ret

00002e24 <fprintf>:
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	9e 01       	movw	r18, r28
    2e2e:	27 5f       	subi	r18, 0xF7	; 247
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	a9 01       	movw	r20, r18
    2e3c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <vfprintf>
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <fputc>:
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	8c 01       	movw	r16, r24
    2e50:	eb 01       	movw	r28, r22
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	81 ff       	sbrs	r24, 1
    2e56:	1b c0       	rjmp	.+54     	; 0x2e8e <fputc+0x48>
    2e58:	82 ff       	sbrs	r24, 2
    2e5a:	0d c0       	rjmp	.+26     	; 0x2e76 <fputc+0x30>
    2e5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e60:	8c 81       	ldd	r24, Y+4	; 0x04
    2e62:	9d 81       	ldd	r25, Y+5	; 0x05
    2e64:	28 17       	cp	r18, r24
    2e66:	39 07       	cpc	r19, r25
    2e68:	64 f4       	brge	.+24     	; 0x2e82 <fputc+0x3c>
    2e6a:	e8 81       	ld	r30, Y
    2e6c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e6e:	01 93       	st	Z+, r16
    2e70:	f9 83       	std	Y+1, r31	; 0x01
    2e72:	e8 83       	st	Y, r30
    2e74:	06 c0       	rjmp	.+12     	; 0x2e82 <fputc+0x3c>
    2e76:	e8 85       	ldd	r30, Y+8	; 0x08
    2e78:	f9 85       	ldd	r31, Y+9	; 0x09
    2e7a:	80 2f       	mov	r24, r16
    2e7c:	09 95       	icall
    2e7e:	89 2b       	or	r24, r25
    2e80:	31 f4       	brne	.+12     	; 0x2e8e <fputc+0x48>
    2e82:	8e 81       	ldd	r24, Y+6	; 0x06
    2e84:	9f 81       	ldd	r25, Y+7	; 0x07
    2e86:	01 96       	adiw	r24, 0x01	; 1
    2e88:	9f 83       	std	Y+7, r25	; 0x07
    2e8a:	8e 83       	std	Y+6, r24	; 0x06
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <fputc+0x4c>
    2e8e:	0f ef       	ldi	r16, 0xFF	; 255
    2e90:	1f ef       	ldi	r17, 0xFF	; 255
    2e92:	c8 01       	movw	r24, r16
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <fputs>:
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	7c 01       	movw	r14, r24
    2eac:	8b 01       	movw	r16, r22
    2eae:	db 01       	movw	r26, r22
    2eb0:	13 96       	adiw	r26, 0x03	; 3
    2eb2:	8c 91       	ld	r24, X
    2eb4:	81 fd       	sbrc	r24, 1
    2eb6:	03 c0       	rjmp	.+6      	; 0x2ebe <fputs+0x20>
    2eb8:	cf ef       	ldi	r28, 0xFF	; 255
    2eba:	df ef       	ldi	r29, 0xFF	; 255
    2ebc:	13 c0       	rjmp	.+38     	; 0x2ee4 <fputs+0x46>
    2ebe:	c0 e0       	ldi	r28, 0x00	; 0
    2ec0:	d0 e0       	ldi	r29, 0x00	; 0
    2ec2:	0b c0       	rjmp	.+22     	; 0x2eda <fputs+0x3c>
    2ec4:	d8 01       	movw	r26, r16
    2ec6:	18 96       	adiw	r26, 0x08	; 8
    2ec8:	ed 91       	ld	r30, X+
    2eca:	fc 91       	ld	r31, X
    2ecc:	19 97       	sbiw	r26, 0x09	; 9
    2ece:	b8 01       	movw	r22, r16
    2ed0:	09 95       	icall
    2ed2:	89 2b       	or	r24, r25
    2ed4:	11 f0       	breq	.+4      	; 0x2eda <fputs+0x3c>
    2ed6:	cf ef       	ldi	r28, 0xFF	; 255
    2ed8:	df ef       	ldi	r29, 0xFF	; 255
    2eda:	f7 01       	movw	r30, r14
    2edc:	81 91       	ld	r24, Z+
    2ede:	7f 01       	movw	r14, r30
    2ee0:	88 23       	and	r24, r24
    2ee2:	81 f7       	brne	.-32     	; 0x2ec4 <fputs+0x26>
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	ff 90       	pop	r15
    2ef0:	ef 90       	pop	r14
    2ef2:	08 95       	ret

00002ef4 <fscanf>:
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	9e 01       	movw	r18, r28
    2efe:	27 5f       	subi	r18, 0xF7	; 247
    2f00:	3f 4f       	sbci	r19, 0xFF	; 255
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	6f 81       	ldd	r22, Y+7	; 0x07
    2f08:	78 85       	ldd	r23, Y+8	; 0x08
    2f0a:	a9 01       	movw	r20, r18
    2f0c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <vfscanf>
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	08 95       	ret

00002f16 <sprintf>:
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	2e 97       	sbiw	r28, 0x0e	; 14
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	0d 89       	ldd	r16, Y+21	; 0x15
    2f30:	1e 89       	ldd	r17, Y+22	; 0x16
    2f32:	86 e0       	ldi	r24, 0x06	; 6
    2f34:	8c 83       	std	Y+4, r24	; 0x04
    2f36:	1a 83       	std	Y+2, r17	; 0x02
    2f38:	09 83       	std	Y+1, r16	; 0x01
    2f3a:	8f ef       	ldi	r24, 0xFF	; 255
    2f3c:	9f e7       	ldi	r25, 0x7F	; 127
    2f3e:	9e 83       	std	Y+6, r25	; 0x06
    2f40:	8d 83       	std	Y+5, r24	; 0x05
    2f42:	9e 01       	movw	r18, r28
    2f44:	27 5e       	subi	r18, 0xE7	; 231
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	ce 01       	movw	r24, r28
    2f4a:	01 96       	adiw	r24, 0x01	; 1
    2f4c:	6f 89       	ldd	r22, Y+23	; 0x17
    2f4e:	78 8d       	ldd	r23, Y+24	; 0x18
    2f50:	a9 01       	movw	r20, r18
    2f52:	0e 94 1b 0c 	call	0x1836	; 0x1836 <vfprintf>
    2f56:	2f 81       	ldd	r18, Y+7	; 0x07
    2f58:	38 85       	ldd	r19, Y+8	; 0x08
    2f5a:	02 0f       	add	r16, r18
    2f5c:	13 1f       	adc	r17, r19
    2f5e:	f8 01       	movw	r30, r16
    2f60:	10 82       	st	Z, r1
    2f62:	2e 96       	adiw	r28, 0x0e	; 14
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	08 95       	ret

00002f78 <ungetc>:
    2f78:	9c 01       	movw	r18, r24
    2f7a:	fb 01       	movw	r30, r22
    2f7c:	83 81       	ldd	r24, Z+3	; 0x03
    2f7e:	80 ff       	sbrs	r24, 0
    2f80:	11 c0       	rjmp	.+34     	; 0x2fa4 <ungetc+0x2c>
    2f82:	86 fd       	sbrc	r24, 6
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <ungetc+0x2c>
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	2f 3f       	cpi	r18, 0xFF	; 255
    2f8a:	39 07       	cpc	r19, r25
    2f8c:	59 f0       	breq	.+22     	; 0x2fa4 <ungetc+0x2c>
    2f8e:	22 83       	std	Z+2, r18	; 0x02
    2f90:	80 64       	ori	r24, 0x40	; 64
    2f92:	8f 7d       	andi	r24, 0xDF	; 223
    2f94:	83 83       	std	Z+3, r24	; 0x03
    2f96:	86 81       	ldd	r24, Z+6	; 0x06
    2f98:	97 81       	ldd	r25, Z+7	; 0x07
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	97 83       	std	Z+7, r25	; 0x07
    2f9e:	86 83       	std	Z+6, r24	; 0x06
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <ungetc+0x30>
    2fa4:	2f ef       	ldi	r18, 0xFF	; 255
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	c9 01       	movw	r24, r18
    2faa:	08 95       	ret

00002fac <__ultoa_invert>:
    2fac:	fa 01       	movw	r30, r20
    2fae:	aa 27       	eor	r26, r26
    2fb0:	28 30       	cpi	r18, 0x08	; 8
    2fb2:	51 f1       	breq	.+84     	; 0x3008 <__ultoa_invert+0x5c>
    2fb4:	20 31       	cpi	r18, 0x10	; 16
    2fb6:	81 f1       	breq	.+96     	; 0x3018 <__ultoa_invert+0x6c>
    2fb8:	e8 94       	clt
    2fba:	6f 93       	push	r22
    2fbc:	6e 7f       	andi	r22, 0xFE	; 254
    2fbe:	6e 5f       	subi	r22, 0xFE	; 254
    2fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	af 4f       	sbci	r26, 0xFF	; 255
    2fc8:	b1 e0       	ldi	r27, 0x01	; 1
    2fca:	3e d0       	rcall	.+124    	; 0x3048 <__ultoa_invert+0x9c>
    2fcc:	b4 e0       	ldi	r27, 0x04	; 4
    2fce:	3c d0       	rcall	.+120    	; 0x3048 <__ultoa_invert+0x9c>
    2fd0:	67 0f       	add	r22, r23
    2fd2:	78 1f       	adc	r23, r24
    2fd4:	89 1f       	adc	r24, r25
    2fd6:	9a 1f       	adc	r25, r26
    2fd8:	a1 1d       	adc	r26, r1
    2fda:	68 0f       	add	r22, r24
    2fdc:	79 1f       	adc	r23, r25
    2fde:	8a 1f       	adc	r24, r26
    2fe0:	91 1d       	adc	r25, r1
    2fe2:	a1 1d       	adc	r26, r1
    2fe4:	6a 0f       	add	r22, r26
    2fe6:	71 1d       	adc	r23, r1
    2fe8:	81 1d       	adc	r24, r1
    2fea:	91 1d       	adc	r25, r1
    2fec:	a1 1d       	adc	r26, r1
    2fee:	20 d0       	rcall	.+64     	; 0x3030 <__ultoa_invert+0x84>
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <__ultoa_invert+0x48>
    2ff2:	68 94       	set
    2ff4:	3f 91       	pop	r19
    2ff6:	2a e0       	ldi	r18, 0x0A	; 10
    2ff8:	26 9f       	mul	r18, r22
    2ffa:	11 24       	eor	r1, r1
    2ffc:	30 19       	sub	r19, r0
    2ffe:	30 5d       	subi	r19, 0xD0	; 208
    3000:	31 93       	st	Z+, r19
    3002:	de f6       	brtc	.-74     	; 0x2fba <__ultoa_invert+0xe>
    3004:	cf 01       	movw	r24, r30
    3006:	08 95       	ret
    3008:	46 2f       	mov	r20, r22
    300a:	47 70       	andi	r20, 0x07	; 7
    300c:	40 5d       	subi	r20, 0xD0	; 208
    300e:	41 93       	st	Z+, r20
    3010:	b3 e0       	ldi	r27, 0x03	; 3
    3012:	0f d0       	rcall	.+30     	; 0x3032 <__ultoa_invert+0x86>
    3014:	c9 f7       	brne	.-14     	; 0x3008 <__ultoa_invert+0x5c>
    3016:	f6 cf       	rjmp	.-20     	; 0x3004 <__ultoa_invert+0x58>
    3018:	46 2f       	mov	r20, r22
    301a:	4f 70       	andi	r20, 0x0F	; 15
    301c:	40 5d       	subi	r20, 0xD0	; 208
    301e:	4a 33       	cpi	r20, 0x3A	; 58
    3020:	18 f0       	brcs	.+6      	; 0x3028 <__ultoa_invert+0x7c>
    3022:	49 5d       	subi	r20, 0xD9	; 217
    3024:	31 fd       	sbrc	r19, 1
    3026:	40 52       	subi	r20, 0x20	; 32
    3028:	41 93       	st	Z+, r20
    302a:	02 d0       	rcall	.+4      	; 0x3030 <__ultoa_invert+0x84>
    302c:	a9 f7       	brne	.-22     	; 0x3018 <__ultoa_invert+0x6c>
    302e:	ea cf       	rjmp	.-44     	; 0x3004 <__ultoa_invert+0x58>
    3030:	b4 e0       	ldi	r27, 0x04	; 4
    3032:	a6 95       	lsr	r26
    3034:	97 95       	ror	r25
    3036:	87 95       	ror	r24
    3038:	77 95       	ror	r23
    303a:	67 95       	ror	r22
    303c:	ba 95       	dec	r27
    303e:	c9 f7       	brne	.-14     	; 0x3032 <__ultoa_invert+0x86>
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	61 05       	cpc	r22, r1
    3044:	71 05       	cpc	r23, r1
    3046:	08 95       	ret
    3048:	9b 01       	movw	r18, r22
    304a:	ac 01       	movw	r20, r24
    304c:	0a 2e       	mov	r0, r26
    304e:	06 94       	lsr	r0
    3050:	57 95       	ror	r21
    3052:	47 95       	ror	r20
    3054:	37 95       	ror	r19
    3056:	27 95       	ror	r18
    3058:	ba 95       	dec	r27
    305a:	c9 f7       	brne	.-14     	; 0x304e <__ultoa_invert+0xa2>
    305c:	62 0f       	add	r22, r18
    305e:	73 1f       	adc	r23, r19
    3060:	84 1f       	adc	r24, r20
    3062:	95 1f       	adc	r25, r21
    3064:	a0 1d       	adc	r26, r0
    3066:	08 95       	ret

00003068 <__ctype_isfalse>:
    3068:	99 27       	eor	r25, r25
    306a:	88 27       	eor	r24, r24

0000306c <__ctype_istrue>:
    306c:	08 95       	ret

0000306e <__udivmodhi4>:
    306e:	aa 1b       	sub	r26, r26
    3070:	bb 1b       	sub	r27, r27
    3072:	51 e1       	ldi	r21, 0x11	; 17
    3074:	07 c0       	rjmp	.+14     	; 0x3084 <__udivmodhi4_ep>

00003076 <__udivmodhi4_loop>:
    3076:	aa 1f       	adc	r26, r26
    3078:	bb 1f       	adc	r27, r27
    307a:	a6 17       	cp	r26, r22
    307c:	b7 07       	cpc	r27, r23
    307e:	10 f0       	brcs	.+4      	; 0x3084 <__udivmodhi4_ep>
    3080:	a6 1b       	sub	r26, r22
    3082:	b7 0b       	sbc	r27, r23

00003084 <__udivmodhi4_ep>:
    3084:	88 1f       	adc	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	5a 95       	dec	r21
    308a:	a9 f7       	brne	.-22     	; 0x3076 <__udivmodhi4_loop>
    308c:	80 95       	com	r24
    308e:	90 95       	com	r25
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	08 95       	ret

00003096 <__divmodhi4>:
    3096:	97 fb       	bst	r25, 7
    3098:	09 2e       	mov	r0, r25
    309a:	07 26       	eor	r0, r23
    309c:	0a d0       	rcall	.+20     	; 0x30b2 <__divmodhi4_neg1>
    309e:	77 fd       	sbrc	r23, 7
    30a0:	04 d0       	rcall	.+8      	; 0x30aa <__divmodhi4_neg2>
    30a2:	e5 df       	rcall	.-54     	; 0x306e <__udivmodhi4>
    30a4:	06 d0       	rcall	.+12     	; 0x30b2 <__divmodhi4_neg1>
    30a6:	00 20       	and	r0, r0
    30a8:	1a f4       	brpl	.+6      	; 0x30b0 <__divmodhi4_exit>

000030aa <__divmodhi4_neg2>:
    30aa:	70 95       	com	r23
    30ac:	61 95       	neg	r22
    30ae:	7f 4f       	sbci	r23, 0xFF	; 255

000030b0 <__divmodhi4_exit>:
    30b0:	08 95       	ret

000030b2 <__divmodhi4_neg1>:
    30b2:	f6 f7       	brtc	.-4      	; 0x30b0 <__divmodhi4_exit>
    30b4:	90 95       	com	r25
    30b6:	81 95       	neg	r24
    30b8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ba:	08 95       	ret

000030bc <__divmodsi4>:
    30bc:	97 fb       	bst	r25, 7
    30be:	09 2e       	mov	r0, r25
    30c0:	05 26       	eor	r0, r21
    30c2:	0e d0       	rcall	.+28     	; 0x30e0 <__divmodsi4_neg1>
    30c4:	57 fd       	sbrc	r21, 7
    30c6:	04 d0       	rcall	.+8      	; 0x30d0 <__divmodsi4_neg2>
    30c8:	14 d0       	rcall	.+40     	; 0x30f2 <__udivmodsi4>
    30ca:	0a d0       	rcall	.+20     	; 0x30e0 <__divmodsi4_neg1>
    30cc:	00 1c       	adc	r0, r0
    30ce:	38 f4       	brcc	.+14     	; 0x30de <__divmodsi4_exit>

000030d0 <__divmodsi4_neg2>:
    30d0:	50 95       	com	r21
    30d2:	40 95       	com	r20
    30d4:	30 95       	com	r19
    30d6:	21 95       	neg	r18
    30d8:	3f 4f       	sbci	r19, 0xFF	; 255
    30da:	4f 4f       	sbci	r20, 0xFF	; 255
    30dc:	5f 4f       	sbci	r21, 0xFF	; 255

000030de <__divmodsi4_exit>:
    30de:	08 95       	ret

000030e0 <__divmodsi4_neg1>:
    30e0:	f6 f7       	brtc	.-4      	; 0x30de <__divmodsi4_exit>
    30e2:	90 95       	com	r25
    30e4:	80 95       	com	r24
    30e6:	70 95       	com	r23
    30e8:	61 95       	neg	r22
    30ea:	7f 4f       	sbci	r23, 0xFF	; 255
    30ec:	8f 4f       	sbci	r24, 0xFF	; 255
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	08 95       	ret

000030f2 <__udivmodsi4>:
    30f2:	a1 e2       	ldi	r26, 0x21	; 33
    30f4:	1a 2e       	mov	r1, r26
    30f6:	aa 1b       	sub	r26, r26
    30f8:	bb 1b       	sub	r27, r27
    30fa:	fd 01       	movw	r30, r26
    30fc:	0d c0       	rjmp	.+26     	; 0x3118 <__udivmodsi4_ep>

000030fe <__udivmodsi4_loop>:
    30fe:	aa 1f       	adc	r26, r26
    3100:	bb 1f       	adc	r27, r27
    3102:	ee 1f       	adc	r30, r30
    3104:	ff 1f       	adc	r31, r31
    3106:	a2 17       	cp	r26, r18
    3108:	b3 07       	cpc	r27, r19
    310a:	e4 07       	cpc	r30, r20
    310c:	f5 07       	cpc	r31, r21
    310e:	20 f0       	brcs	.+8      	; 0x3118 <__udivmodsi4_ep>
    3110:	a2 1b       	sub	r26, r18
    3112:	b3 0b       	sbc	r27, r19
    3114:	e4 0b       	sbc	r30, r20
    3116:	f5 0b       	sbc	r31, r21

00003118 <__udivmodsi4_ep>:
    3118:	66 1f       	adc	r22, r22
    311a:	77 1f       	adc	r23, r23
    311c:	88 1f       	adc	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	1a 94       	dec	r1
    3122:	69 f7       	brne	.-38     	; 0x30fe <__udivmodsi4_loop>
    3124:	60 95       	com	r22
    3126:	70 95       	com	r23
    3128:	80 95       	com	r24
    312a:	90 95       	com	r25
    312c:	9b 01       	movw	r18, r22
    312e:	ac 01       	movw	r20, r24
    3130:	bd 01       	movw	r22, r26
    3132:	cf 01       	movw	r24, r30
    3134:	08 95       	ret

00003136 <_exit>:
    3136:	f8 94       	cli

00003138 <__stop_program>:
    3138:	ff cf       	rjmp	.-2      	; 0x3138 <__stop_program>
