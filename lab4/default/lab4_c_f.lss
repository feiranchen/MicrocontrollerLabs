
lab4_c_f.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00002868  000028fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000199  00800230  00800230  00002a2c  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005ab  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a23  00000000  00000000  000030f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010af  00000000  00000000  00005b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b76  00000000  00000000  00006bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  00008740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007be  00000000  00000000  00008b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001196  00000000  00000000  000092ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000a484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a9 00 	jmp	0x152	; 0x152 <__ctors_end>
       4:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_1>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_13>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_20>
      54:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_21>
      58:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      5c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      64:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      68:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      6c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      70:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      74:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      78:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      7c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      80:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      84:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      88:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Num Syllables: .
	...

000000d3 <LCD_dur_syllable>:
      d3:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 00     Dur Syllables: .
	...

000000e4 <LCD_rpt_interval>:
      e4:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 00 00     Rpt interval: ..

000000f4 <LCD_playing>:
      f4:	43 68 69 72 70 2c 20 43 68 69 72 70 20 00 00        Chirp, Chirp ..

00000103 <LCD_cap_clear>:
     103:	20 00 00                                             ..

00000106 <LcdCustomChar>:
     106:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     116:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     126:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     136:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000146 <__c.1988>:
     146:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e4       	ldi	r29, 0x40	; 64
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	12 e0       	ldi	r17, 0x02	; 2
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e8 e6       	ldi	r30, 0x68	; 104
     166:	f8 e2       	ldi	r31, 0x28	; 40
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 33       	cpi	r26, 0x30	; 48
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	13 e0       	ldi	r17, 0x03	; 3
     17a:	a0 e3       	ldi	r26, 0x30	; 48
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a9 3c       	cpi	r26, 0xC9	; 201
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 cf 05 	call	0xb9e	; 0xb9e <main>
     18c:	0c 94 32 14 	jmp	0x2864	; 0x2864 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <__vector_13>:
/******************* CLOCK INTERRUPT HANDLER ************************/

/**
 * Clock interrupt handler executing the kernel
 */
ISR(TIMER1_COMPA_vect) {
     194:	1f 92       	push	r1
     196:	0f 92       	push	r0
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	0f 92       	push	r0
     19c:	0b b6       	in	r0, 0x3b	; 59
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	2f 92       	push	r2
     1a4:	3f 92       	push	r3
     1a6:	4f 92       	push	r4
     1a8:	5f 92       	push	r5
     1aa:	6f 92       	push	r6
     1ac:	7f 92       	push	r7
     1ae:	8f 92       	push	r8
     1b0:	9f 92       	push	r9
     1b2:	af 92       	push	r10
     1b4:	bf 92       	push	r11
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	2f 93       	push	r18
     1c4:	3f 93       	push	r19
     1c6:	4f 93       	push	r20
     1c8:	5f 93       	push	r21
     1ca:	6f 93       	push	r22
     1cc:	7f 93       	push	r23
     1ce:	8f 93       	push	r24
     1d0:	9f 93       	push	r25
     1d2:	af 93       	push	r26
     1d4:	bf 93       	push	r27
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
  uint8_t i;
  uint32_t now;
  uint32_t nextHit;
  int32_t timeleft;
	
  TIMSK1 = 0 ; //&= ~(1<<OCIE1A); // turn off output compare 1A ISR
     1de:	10 92 6f 00 	sts	0x006F, r1
  //PORTC = ~PORTC ;
  nextHit = 0x7FFFFFFF;
  oldrunning = kernel.running;
     1e2:	50 90 84 03 	lds	r5, 0x0384
  running = 0;

  if (TIFR1 & (1<<TOV1)) {
     1e6:	b0 9b       	sbis	0x16, 0	; 22
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <__vector_13+0x7e>
    ++kernel.cycles;
     1ea:	80 91 ba 03 	lds	r24, 0x03BA
     1ee:	90 91 bb 03 	lds	r25, 0x03BB
     1f2:	a0 91 bc 03 	lds	r26, 0x03BC
     1f6:	b0 91 bd 03 	lds	r27, 0x03BD
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	a1 1d       	adc	r26, r1
     1fe:	b1 1d       	adc	r27, r1
     200:	80 93 ba 03 	sts	0x03BA, r24
     204:	90 93 bb 03 	sts	0x03BB, r25
     208:	a0 93 bc 03 	sts	0x03BC, r26
     20c:	b0 93 bd 03 	sts	0x03BD, r27
    TIFR1 |= (1<<TOV1) ;
     210:	b0 9a       	sbi	0x16, 0	; 22
  }

  // Read clock

  now = (kernel.cycles << 16) + TCNT1;
     212:	80 91 84 00 	lds	r24, 0x0084
     216:	90 91 85 00 	lds	r25, 0x0085
     21a:	3c 01       	movw	r6, r24
     21c:	88 24       	eor	r8, r8
     21e:	99 24       	eor	r9, r9
     220:	80 91 ba 03 	lds	r24, 0x03BA
     224:	90 91 bb 03 	lds	r25, 0x03BB
     228:	a0 91 bc 03 	lds	r26, 0x03BC
     22c:	b0 91 bd 03 	lds	r27, 0x03BD
     230:	dc 01       	movw	r26, r24
     232:	99 27       	eor	r25, r25
     234:	88 27       	eor	r24, r24
     236:	68 0e       	add	r6, r24
     238:	79 1e       	adc	r7, r25
     23a:	8a 1e       	adc	r8, r26
     23c:	9b 1e       	adc	r9, r27

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     23e:	40 90 83 03 	lds	r4, 0x0383
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	ff ef       	ldi	r31, 0xFF	; 255
     248:	af 2e       	mov	r10, r31
     24a:	ff ef       	ldi	r31, 0xFF	; 255
     24c:	bf 2e       	mov	r11, r31
     24e:	ff ef       	ldi	r31, 0xFF	; 255
     250:	cf 2e       	mov	r12, r31
     252:	ff e7       	ldi	r31, 0x7F	; 127
     254:	df 2e       	mov	r13, r31
    t = &kernel.tasks[i];
     256:	eb e0       	ldi	r30, 0x0B	; 11
     258:	2e 2e       	mov	r2, r30
    if (t->state == TIMEQ) {
      if (t->release <= now) {
	t->state = READYQ;
     25a:	33 24       	eor	r3, r3
     25c:	33 94       	inc	r3
      } else if (t->release < nextHit) {
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
      if (t->deadline < kernel.tasks[running].deadline) {
     25e:	cb e0       	ldi	r28, 0x0B	; 11
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	43 c0       	rjmp	.+134    	; 0x2ea <__vector_13+0x156>
  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     264:	62 9d       	mul	r22, r2
     266:	d0 01       	movw	r26, r0
     268:	11 24       	eor	r1, r1
     26a:	ab 57       	subi	r26, 0x7B	; 123
     26c:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == TIMEQ) {
     26e:	1a 96       	adiw	r26, 0x0a	; 10
     270:	8c 91       	ld	r24, X
     272:	1a 97       	sbiw	r26, 0x0a	; 10
     274:	82 30       	cpi	r24, 0x02	; 2
     276:	a1 f4       	brne	.+40     	; 0x2a0 <__vector_13+0x10c>
      if (t->release <= now) {
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	ed 90       	ld	r14, X+
     27c:	fd 90       	ld	r15, X+
     27e:	0d 91       	ld	r16, X+
     280:	1c 91       	ld	r17, X
     282:	15 97       	sbiw	r26, 0x05	; 5
     284:	6e 14       	cp	r6, r14
     286:	7f 04       	cpc	r7, r15
     288:	80 06       	cpc	r8, r16
     28a:	91 06       	cpc	r9, r17
     28c:	20 f0       	brcs	.+8      	; 0x296 <__vector_13+0x102>
	t->state = READYQ;
     28e:	1a 96       	adiw	r26, 0x0a	; 10
     290:	3c 92       	st	X, r3
     292:	1a 97       	sbiw	r26, 0x0a	; 10
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <__vector_13+0x10c>
      } else if (t->release < nextHit) {
     296:	ea 14       	cp	r14, r10
     298:	fb 04       	cpc	r15, r11
     29a:	0c 05       	cpc	r16, r12
     29c:	1d 05       	cpc	r17, r13
     29e:	10 f0       	brcs	.+4      	; 0x2a4 <__vector_13+0x110>
     2a0:	86 01       	movw	r16, r12
     2a2:	75 01       	movw	r14, r10
	nextHit = t->release;
      }
    }
    if (t->state == READYQ) {
     2a4:	1a 96       	adiw	r26, 0x0a	; 10
     2a6:	8c 91       	ld	r24, X
     2a8:	1a 97       	sbiw	r26, 0x0a	; 10
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	d9 f4       	brne	.+54     	; 0x2e4 <__vector_13+0x150>
      if (t->deadline < kernel.tasks[running].deadline) {
     2ae:	87 2f       	mov	r24, r23
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	8c 9f       	mul	r24, r28
     2b4:	f0 01       	movw	r30, r0
     2b6:	8d 9f       	mul	r24, r29
     2b8:	f0 0d       	add	r31, r0
     2ba:	9c 9f       	mul	r25, r28
     2bc:	f0 0d       	add	r31, r0
     2be:	11 24       	eor	r1, r1
     2c0:	ed 57       	subi	r30, 0x7D	; 125
     2c2:	fc 4f       	sbci	r31, 0xFC	; 252
     2c4:	16 96       	adiw	r26, 0x06	; 6
     2c6:	2d 91       	ld	r18, X+
     2c8:	3d 91       	ld	r19, X+
     2ca:	4d 91       	ld	r20, X+
     2cc:	5c 91       	ld	r21, X
     2ce:	19 97       	sbiw	r26, 0x09	; 9
     2d0:	80 85       	ldd	r24, Z+8	; 0x08
     2d2:	91 85       	ldd	r25, Z+9	; 0x09
     2d4:	a2 85       	ldd	r26, Z+10	; 0x0a
     2d6:	b3 85       	ldd	r27, Z+11	; 0x0b
     2d8:	28 17       	cp	r18, r24
     2da:	39 07       	cpc	r19, r25
     2dc:	4a 07       	cpc	r20, r26
     2de:	5b 07       	cpc	r21, r27
     2e0:	08 f4       	brcc	.+2      	; 0x2e4 <__vector_13+0x150>
     2e2:	76 2f       	mov	r23, r22

  now = (kernel.cycles << 16) + TCNT1;

  // Release tasks from TimeQ and determine new running task

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     2e4:	6f 5f       	subi	r22, 0xFF	; 255
     2e6:	57 01       	movw	r10, r14
     2e8:	68 01       	movw	r12, r16
     2ea:	46 16       	cp	r4, r22
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__vector_13+0x15c>
     2ee:	ba cf       	rjmp	.-140    	; 0x264 <__vector_13+0xd0>
	running = i;
      }
    }
  }

  if (running != oldrunning) { // perform context switch?
     2f0:	75 15       	cp	r23, r5
     2f2:	b1 f0       	breq	.+44     	; 0x320 <__vector_13+0x18c>

    // store old context
    t = &kernel.tasks[oldrunning];
     2f4:	eb e0       	ldi	r30, 0x0B	; 11
     2f6:	5e 9e       	mul	r5, r30
     2f8:	d0 01       	movw	r26, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	ab 57       	subi	r26, 0x7B	; 123
     2fe:	bc 4f       	sbci	r27, 0xFC	; 252
    t->spl = SPL;
     300:	8d b7       	in	r24, 0x3d	; 61
     302:	8c 93       	st	X, r24
    t->sph = SPH;
     304:	8e b7       	in	r24, 0x3e	; 62
     306:	11 96       	adiw	r26, 0x01	; 1
     308:	8c 93       	st	X, r24

    // load new context
    t = &kernel.tasks[running];
     30a:	7e 9f       	mul	r23, r30
     30c:	f0 01       	movw	r30, r0
     30e:	11 24       	eor	r1, r1
     310:	eb 57       	subi	r30, 0x7B	; 123
     312:	fc 4f       	sbci	r31, 0xFC	; 252
    SPH = t->sph;
     314:	81 81       	ldd	r24, Z+1	; 0x01
     316:	8e bf       	out	0x3e, r24	; 62
    SPL = t->spl;
     318:	80 81       	ld	r24, Z
     31a:	8d bf       	out	0x3d, r24	; 61

    kernel.running = running;
     31c:	70 93 84 03 	sts	0x0384, r23

  }

  kernel.nextHit = nextHit;  
     320:	a0 92 be 03 	sts	0x03BE, r10
     324:	b0 92 bf 03 	sts	0x03BF, r11
     328:	c0 92 c0 03 	sts	0x03C0, r12
     32c:	d0 92 c1 03 	sts	0x03C1, r13

  now = (kernel.cycles << 16) + TCNT1;
     330:	20 91 84 00 	lds	r18, 0x0084
     334:	30 91 85 00 	lds	r19, 0x0085
  timeleft = (int32_t)nextHit - (int32_t)now;
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	80 91 ba 03 	lds	r24, 0x03BA
     340:	90 91 bb 03 	lds	r25, 0x03BB
     344:	a0 91 bc 03 	lds	r26, 0x03BC
     348:	b0 91 bd 03 	lds	r27, 0x03BD
     34c:	dc 01       	movw	r26, r24
     34e:	99 27       	eor	r25, r25
     350:	88 27       	eor	r24, r24
     352:	28 0f       	add	r18, r24
     354:	39 1f       	adc	r19, r25
     356:	4a 1f       	adc	r20, r26
     358:	5b 1f       	adc	r21, r27
     35a:	d6 01       	movw	r26, r12
     35c:	c5 01       	movw	r24, r10
     35e:	82 1b       	sub	r24, r18
     360:	93 0b       	sbc	r25, r19
     362:	a4 0b       	sbc	r26, r20
     364:	b5 0b       	sbc	r27, r21
     366:	9c 01       	movw	r18, r24
     368:	ad 01       	movw	r20, r26
  if (timeleft < 4) {
     36a:	84 30       	cpi	r24, 0x04	; 4
     36c:	91 05       	cpc	r25, r1
     36e:	a1 05       	cpc	r26, r1
     370:	b1 05       	cpc	r27, r1
     372:	24 f4       	brge	.+8      	; 0x37c <__vector_13+0x1e8>
     374:	24 e0       	ldi	r18, 0x04	; 4
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
    timeleft = 4;
  }

  if ((unsigned long)TCNT1 + timeleft < 65536) {
     37c:	80 91 84 00 	lds	r24, 0x0084
     380:	90 91 85 00 	lds	r25, 0x0085
     384:	a0 e0       	ldi	r26, 0x00	; 0
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	82 0f       	add	r24, r18
     38a:	93 1f       	adc	r25, r19
     38c:	a4 1f       	adc	r26, r20
     38e:	b5 1f       	adc	r27, r21
     390:	80 50       	subi	r24, 0x00	; 0
     392:	90 40       	sbci	r25, 0x00	; 0
     394:	a1 40       	sbci	r26, 0x01	; 1
     396:	b0 40       	sbci	r27, 0x00	; 0
     398:	38 f4       	brcc	.+14     	; 0x3a8 <__vector_13+0x214>
    OCR1A = TCNT1 + timeleft;
     39a:	80 91 84 00 	lds	r24, 0x0084
     39e:	90 91 85 00 	lds	r25, 0x0085
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <__vector_13+0x230>
  } else if (TCNT1 < 65536 - 4) {
     3a8:	80 91 84 00 	lds	r24, 0x0084
     3ac:	90 91 85 00 	lds	r25, 0x0085
     3b0:	8c 5f       	subi	r24, 0xFC	; 252
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <__vector_13+0x22c>
    OCR1A = 0x0000;
     3b6:	10 92 89 00 	sts	0x0089, r1
     3ba:	10 92 88 00 	sts	0x0088, r1
     3be:	06 c0       	rjmp	.+12     	; 0x3cc <__vector_13+0x238>
  } else {
    OCR1A = 4;
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 89 00 	sts	0x0089, r25
     3c8:	80 93 88 00 	sts	0x0088, r24
  }

  TIMSK1 = (1<<OCIE1A);
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 93 6f 00 	sts	0x006F, r24
}
     3d2:	ff 91       	pop	r31
     3d4:	ef 91       	pop	r30
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	bf 91       	pop	r27
     3dc:	af 91       	pop	r26
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	7f 91       	pop	r23
     3e4:	6f 91       	pop	r22
     3e6:	5f 91       	pop	r21
     3e8:	4f 91       	pop	r20
     3ea:	3f 91       	pop	r19
     3ec:	2f 91       	pop	r18
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	7f 90       	pop	r7
     404:	6f 90       	pop	r6
     406:	5f 90       	pop	r5
     408:	4f 90       	pop	r4
     40a:	3f 90       	pop	r3
     40c:	2f 90       	pop	r2
     40e:	0f 90       	pop	r0
     410:	0b be       	out	0x3b, r0	; 59
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <trtInitKernel>:
/********************************** API ************************************/

void trtInitKernel(int idlestack) {

  /* Set up timer 1 */
  TCNT1 = 0x0000;        /* reset counter 1 */
     41c:	10 92 85 00 	sts	0x0085, r1
     420:	10 92 84 00 	sts	0x0084, r1
  TCCR1A = 0x00;         /* normal operation */
     424:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = PRESCALEBITS; /* prescaler = 1024 */
     428:	25 e0       	ldi	r18, 0x05	; 5
     42a:	20 93 81 00 	sts	0x0081, r18
  TIMSK1 = (1<<OCIE1A);  // turn on compare match ISR
     42e:	22 e0       	ldi	r18, 0x02	; 2
     430:	20 93 6f 00 	sts	0x006F, r18

  kernel.memptr = (void*)(RAMEND - idlestack);
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	30 e4       	ldi	r19, 0x40	; 64
     438:	28 1b       	sub	r18, r24
     43a:	39 0b       	sbc	r19, r25
     43c:	30 93 b9 03 	sts	0x03B9, r19
     440:	20 93 b8 03 	sts	0x03B8, r18
  kernel.nbrOfTasks = 0;
     444:	10 92 83 03 	sts	0x0383, r1
  kernel.running = 0;
     448:	10 92 84 03 	sts	0x0384, r1

  kernel.cycles = 0x0000;
     44c:	10 92 ba 03 	sts	0x03BA, r1
     450:	10 92 bb 03 	sts	0x03BB, r1
     454:	10 92 bc 03 	sts	0x03BC, r1
     458:	10 92 bd 03 	sts	0x03BD, r1
  kernel.nextHit = 0x7FFFFFFF;
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	9f ef       	ldi	r25, 0xFF	; 255
     460:	af ef       	ldi	r26, 0xFF	; 255
     462:	bf e7       	ldi	r27, 0x7F	; 127
     464:	80 93 be 03 	sts	0x03BE, r24
     468:	90 93 bf 03 	sts	0x03BF, r25
     46c:	a0 93 c0 03 	sts	0x03C0, r26
     470:	b0 93 c1 03 	sts	0x03C1, r27

  // Initialize idle task (task 0)
  kernel.tasks[0].deadline = 0x7FFFFFFF;
     474:	80 93 8b 03 	sts	0x038B, r24
     478:	90 93 8c 03 	sts	0x038C, r25
     47c:	a0 93 8d 03 	sts	0x038D, r26
     480:	b0 93 8e 03 	sts	0x038E, r27
  kernel.tasks[0].release = 0x00000000;
     484:	10 92 87 03 	sts	0x0387, r1
     488:	10 92 88 03 	sts	0x0388, r1
     48c:	10 92 89 03 	sts	0x0389, r1
     490:	10 92 8a 03 	sts	0x038A, r1

  sei(); /* set enabled interrupts */
     494:	78 94       	sei
}
     496:	08 95       	ret

00000498 <trtCreateTask>:


void trtCreateTask(void (*fun)(void*), uint16_t stacksize, uint32_t release, uint32_t deadline, void *args) {
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	49 01       	movw	r8, r18
     4b2:	5a 01       	movw	r10, r20

  uint8_t *sp;
  struct task *t;
  int i;

  cli(); // turn off interrupts
     4b4:	f8 94       	cli

  ++kernel.nbrOfTasks;
     4b6:	20 91 83 03 	lds	r18, 0x0383
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	20 93 83 03 	sts	0x0383, r18

  sp = kernel.memptr;
     4c0:	c0 91 b8 03 	lds	r28, 0x03B8
     4c4:	d0 91 b9 03 	lds	r29, 0x03B9
  kernel.memptr -= stacksize;  // decrease free mem ptr
     4c8:	9e 01       	movw	r18, r28
     4ca:	26 1b       	sub	r18, r22
     4cc:	37 0b       	sbc	r19, r23
     4ce:	30 93 b9 03 	sts	0x03B9, r19
     4d2:	20 93 b8 03 	sts	0x03B8, r18

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
     4d6:	88 83       	st	Y, r24
     4d8:	fe 01       	movw	r30, r28
  *sp-- = hi8(fun);       // store PC(hi)
     4da:	92 93       	st	-Z, r25
     4dc:	31 97       	sbiw	r30, 0x01	; 1
     4de:	df 01       	movw	r26, r30
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     4e0:	ce 01       	movw	r24, r28
     4e2:	4c 97       	sbiw	r24, 0x1c	; 28
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23
     4e4:	1c 92       	st	X, r1
     4e6:	11 97       	sbiw	r26, 0x01	; 1
  kernel.memptr -= stacksize;  // decrease free mem ptr

  // initialize stack
  *sp-- = lo8(fun);       // store PC(lo)
  *sp-- = hi8(fun);       // store PC(hi)
  for (i=0; i<26; i++)    //WAS -- for (i=0; i<25; i++)
     4e8:	a8 17       	cp	r26, r24
     4ea:	b9 07       	cpc	r27, r25
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <trtCreateTask+0x4c>
     4ee:	7a 97       	sbiw	r30, 0x1a	; 26
    *sp-- = 0x00;         // store SREG,r0-r1,r3-r23

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
     4f0:	c0 82       	st	Z, r12
  *sp-- = hi8(args);
     4f2:	d2 92       	st	-Z, r13
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	df 01       	movw	r26, r30

  for (i=0; i<6; i++)
     4f8:	9e 01       	movw	r18, r28
     4fa:	24 52       	subi	r18, 0x24	; 36
     4fc:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31
     4fe:	1c 92       	st	X, r1
     500:	11 97       	sbiw	r26, 0x01	; 1

  // Save args in r24-25 (input arguments stored in these registers)
  *sp-- = lo8(args);
  *sp-- = hi8(args);

  for (i=0; i<6; i++)
     502:	a2 17       	cp	r26, r18
     504:	b3 07       	cpc	r27, r19
     506:	d9 f7       	brne	.-10     	; 0x4fe <trtCreateTask+0x66>
     508:	9f 01       	movw	r18, r30
     50a:	26 50       	subi	r18, 0x06	; 6
     50c:	30 40       	sbci	r19, 0x00	; 0
    *sp-- = 0x00;         // store r26-r31

  t = &kernel.tasks[kernel.nbrOfTasks];
     50e:	e0 91 83 03 	lds	r30, 0x0383
     512:	8b e0       	ldi	r24, 0x0B	; 11
     514:	e8 9f       	mul	r30, r24
     516:	f0 01       	movw	r30, r0
     518:	11 24       	eor	r1, r1
     51a:	eb 57       	subi	r30, 0x7B	; 123
     51c:	fc 4f       	sbci	r31, 0xFC	; 252

  t->release = release;
     51e:	82 82       	std	Z+2, r8	; 0x02
     520:	93 82       	std	Z+3, r9	; 0x03
     522:	a4 82       	std	Z+4, r10	; 0x04
     524:	b5 82       	std	Z+5, r11	; 0x05
  t->deadline = deadline;
     526:	e6 82       	std	Z+6, r14	; 0x06
     528:	f7 82       	std	Z+7, r15	; 0x07
     52a:	00 87       	std	Z+8, r16	; 0x08
     52c:	11 87       	std	Z+9, r17	; 0x09
  t->state = TIMEQ;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	82 87       	std	Z+10, r24	; 0x0a

  t->spl = lo8(sp);       // store stack pointer
     532:	20 83       	st	Z, r18
  t->sph = hi8(sp);
     534:	31 83       	std	Z+1, r19	; 0x01
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     536:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>

}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	df 90       	pop	r13
     548:	cf 90       	pop	r12
     54a:	bf 90       	pop	r11
     54c:	af 90       	pop	r10
     54e:	9f 90       	pop	r9
     550:	8f 90       	pop	r8
     552:	08 95       	ret

00000554 <trtCreateSemaphore>:

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     554:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     556:	e3 e8       	ldi	r30, 0x83	; 131
     558:	f3 e0       	ldi	r31, 0x03	; 3
     55a:	e8 0f       	add	r30, r24
     55c:	f1 1d       	adc	r31, r1
     55e:	65 a7       	std	Z+45, r22	; 0x2d
  
  sei(); // set enabled interrupts;
     560:	78 94       	sei
}
     562:	08 95       	ret

00000564 <trtWait>:

void trtWait(uint8_t semnbr) {
     564:	48 2f       	mov	r20, r24

  struct task *t;
  uint8_t *s;

  t = &kernel.tasks[kernel.running];
     566:	20 91 84 03 	lds	r18, 0x0384

  cli(); // disable interrupts
     56a:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     56c:	e8 2f       	mov	r30, r24
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e0 55       	subi	r30, 0x50	; 80
     572:	fc 4f       	sbci	r31, 0xFC	; 252
  if ((*s) > 0) {
     574:	80 81       	ld	r24, Z
     576:	88 23       	and	r24, r24
     578:	19 f0       	breq	.+6      	; 0x580 <trtWait+0x1c>
    (*s)--;
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	80 83       	st	Z, r24
     57e:	10 c0       	rjmp	.+32     	; 0x5a0 <trtWait+0x3c>
  } else {

    t->state = semnbr + WAIT_OFFSET; // waiting for Sem#semnbr
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	8b e0       	ldi	r24, 0x0B	; 11
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	28 9f       	mul	r18, r24
     588:	f0 01       	movw	r30, r0
     58a:	29 9f       	mul	r18, r25
     58c:	f0 0d       	add	r31, r0
     58e:	38 9f       	mul	r19, r24
     590:	f0 0d       	add	r31, r0
     592:	11 24       	eor	r1, r1
     594:	eb 57       	subi	r30, 0x7B	; 123
     596:	fc 4f       	sbci	r31, 0xFC	; 252
     598:	4e 5f       	subi	r20, 0xFE	; 254
     59a:	42 87       	std	Z+10, r20	; 0x0a
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     59c:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
  }

  sei(); // reenable interrupts
     5a0:	78 94       	sei
}
     5a2:	08 95       	ret

000005a4 <trtSignal>:

void trtSignal(uint8_t semnbr) {
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	18 2f       	mov	r17, r24
  uint8_t i;
  struct task *t;
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts
     5ac:	f8 94       	cli

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     5ae:	00 91 83 03 	lds	r16, 0x0383
     5b2:	e1 e0       	ldi	r30, 0x01	; 1
     5b4:	4f ef       	ldi	r20, 0xFF	; 255
     5b6:	5f ef       	ldi	r21, 0xFF	; 255
     5b8:	6f ef       	ldi	r22, 0xFF	; 255
     5ba:	7f ef       	ldi	r23, 0xFF	; 255
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
    t = &kernel.tasks[i];
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	f8 2e       	mov	r15, r24
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5c2:	21 2f       	mov	r18, r17
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	2e 5f       	subi	r18, 0xFE	; 254
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	1e c0       	rjmp	.+60     	; 0x608 <trtSignal+0x64>
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
    t = &kernel.tasks[i];
     5cc:	ef 9d       	mul	r30, r15
     5ce:	d0 01       	movw	r26, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	ab 57       	subi	r26, 0x7B	; 123
     5d4:	bc 4f       	sbci	r27, 0xFC	; 252
    if (t->state == (semnbr + WAIT_OFFSET)) {
     5d6:	1a 96       	adiw	r26, 0x0a	; 10
     5d8:	8c 91       	ld	r24, X
     5da:	1a 97       	sbiw	r26, 0x0a	; 10
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	82 17       	cp	r24, r18
     5e0:	93 07       	cpc	r25, r19
     5e2:	69 f4       	brne	.+26     	; 0x5fe <trtSignal+0x5a>
      if (t->deadline <= minDeadline) {
     5e4:	16 96       	adiw	r26, 0x06	; 6
     5e6:	8d 91       	ld	r24, X+
     5e8:	9d 91       	ld	r25, X+
     5ea:	0d 90       	ld	r0, X+
     5ec:	bc 91       	ld	r27, X
     5ee:	a0 2d       	mov	r26, r0
     5f0:	48 17       	cp	r20, r24
     5f2:	59 07       	cpc	r21, r25
     5f4:	6a 07       	cpc	r22, r26
     5f6:	7b 07       	cpc	r23, r27
     5f8:	10 f0       	brcs	.+4      	; 0x5fe <trtSignal+0x5a>
     5fa:	fe 2f       	mov	r31, r30
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <trtSignal+0x5e>
     5fe:	db 01       	movw	r26, r22
     600:	ca 01       	movw	r24, r20
  uint32_t minDeadline = 0xFFFFFFFF;
  uint8_t taskToReadyQ = 0;

  cli(); // disable interrupts

  for (i=1; i <= kernel.nbrOfTasks; i++) {
     602:	ef 5f       	subi	r30, 0xFF	; 255
     604:	ac 01       	movw	r20, r24
     606:	bd 01       	movw	r22, r26
     608:	0e 17       	cp	r16, r30
     60a:	00 f7       	brcc	.-64     	; 0x5cc <trtSignal+0x28>
	minDeadline = t->deadline;
      }
    }
  }

  if (taskToReadyQ == 0) {
     60c:	ff 23       	and	r31, r31
     60e:	41 f4       	brne	.+16     	; 0x620 <trtSignal+0x7c>
    kernel.semaphores[semnbr-1]++;
     610:	e1 2f       	mov	r30, r17
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	ee 57       	subi	r30, 0x7E	; 126
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	86 a5       	ldd	r24, Z+46	; 0x2e
     61a:	8f 5f       	subi	r24, 0xFF	; 255
     61c:	86 a7       	std	Z+46, r24	; 0x2e
     61e:	11 c0       	rjmp	.+34     	; 0x642 <trtSignal+0x9e>
  } else {
    kernel.tasks[taskToReadyQ].state = READYQ; // make task ready
     620:	2f 2f       	mov	r18, r31
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	8b e0       	ldi	r24, 0x0B	; 11
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	28 9f       	mul	r18, r24
     62a:	f0 01       	movw	r30, r0
     62c:	29 9f       	mul	r18, r25
     62e:	f0 0d       	add	r31, r0
     630:	38 9f       	mul	r19, r24
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	ed 57       	subi	r30, 0x7D	; 125
     638:	fc 4f       	sbci	r31, 0xFC	; 252
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	84 87       	std	Z+12, r24	; 0x0c
    // call interrupt handler to schedule
	TIMER1_COMPA_vect();
     63e:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
  }

  sei(); // reenable interrupts
     642:	78 94       	sei
}
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	08 95       	ret

0000064c <trtCurrentTime>:

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     64c:	20 91 84 00 	lds	r18, 0x0084
     650:	30 91 85 00 	lds	r19, 0x0085
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	80 91 ba 03 	lds	r24, 0x03BA
     65c:	90 91 bb 03 	lds	r25, 0x03BB
     660:	a0 91 bc 03 	lds	r26, 0x03BC
     664:	b0 91 bd 03 	lds	r27, 0x03BD
     668:	dc 01       	movw	r26, r24
     66a:	99 27       	eor	r25, r25
     66c:	88 27       	eor	r24, r24
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	4a 1f       	adc	r20, r26
     674:	5b 1f       	adc	r21, r27
}
     676:	b9 01       	movw	r22, r18
     678:	ca 01       	movw	r24, r20
     67a:	08 95       	ret

0000067c <trtSleepUntil>:

void trtSleepUntil(uint32_t release, uint32_t deadline) {

  struct task *t;

  t = &kernel.tasks[kernel.running];
     67c:	e0 91 84 03 	lds	r30, 0x0384
     680:	ab e0       	ldi	r26, 0x0B	; 11
     682:	ea 9f       	mul	r30, r26
     684:	f0 01       	movw	r30, r0
     686:	11 24       	eor	r1, r1
     688:	eb 57       	subi	r30, 0x7B	; 123
     68a:	fc 4f       	sbci	r31, 0xFC	; 252

  cli(); // turn off interrupts
     68c:	f8 94       	cli

  t->state = TIMEQ;
     68e:	a2 e0       	ldi	r26, 0x02	; 2
     690:	a2 87       	std	Z+10, r26	; 0x0a
  t->release = release;
     692:	62 83       	std	Z+2, r22	; 0x02
     694:	73 83       	std	Z+3, r23	; 0x03
     696:	84 83       	std	Z+4, r24	; 0x04
     698:	95 83       	std	Z+5, r25	; 0x05
  t->deadline = deadline;
     69a:	26 83       	std	Z+6, r18	; 0x06
     69c:	37 83       	std	Z+7, r19	; 0x07
     69e:	40 87       	std	Z+8, r20	; 0x08
     6a0:	51 87       	std	Z+9, r21	; 0x09
  
  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     6a2:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
}
     6a6:	08 95       	ret

000006a8 <trtGetRelease>:


uint32_t trtGetRelease(void) {
     6a8:	80 91 84 03 	lds	r24, 0x0384
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2b e0       	ldi	r18, 0x0B	; 11
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	82 9f       	mul	r24, r18
     6b4:	f0 01       	movw	r30, r0
     6b6:	83 9f       	mul	r24, r19
     6b8:	f0 0d       	add	r31, r0
     6ba:	92 9f       	mul	r25, r18
     6bc:	f0 0d       	add	r31, r0
     6be:	11 24       	eor	r1, r1
     6c0:	ed 57       	subi	r30, 0x7D	; 125
     6c2:	fc 4f       	sbci	r31, 0xFC	; 252
     6c4:	df 01       	movw	r26, r30
     6c6:	14 96       	adiw	r26, 0x04	; 4
     6c8:	64 81       	ldd	r22, Z+4	; 0x04
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	7c 91       	ld	r23, X
     6ce:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].release;
}
     6d0:	12 96       	adiw	r26, 0x02	; 2
     6d2:	8c 91       	ld	r24, X
     6d4:	12 97       	sbiw	r26, 0x02	; 2
     6d6:	13 96       	adiw	r26, 0x03	; 3
     6d8:	9c 91       	ld	r25, X
     6da:	08 95       	ret

000006dc <trtGetDeadline>:

uint32_t trtGetDeadline(void) {
     6dc:	80 91 84 03 	lds	r24, 0x0384
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2b e0       	ldi	r18, 0x0B	; 11
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	82 9f       	mul	r24, r18
     6e8:	f0 01       	movw	r30, r0
     6ea:	83 9f       	mul	r24, r19
     6ec:	f0 0d       	add	r31, r0
     6ee:	92 9f       	mul	r25, r18
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	ed 57       	subi	r30, 0x7D	; 125
     6f6:	fc 4f       	sbci	r31, 0xFC	; 252
     6f8:	df 01       	movw	r26, r30
     6fa:	18 96       	adiw	r26, 0x08	; 8
     6fc:	60 85       	ldd	r22, Z+8	; 0x08
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	7c 91       	ld	r23, X
     702:	11 97       	sbiw	r26, 0x01	; 1
  return kernel.tasks[kernel.running].deadline;
}
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	8c 91       	ld	r24, X
     708:	12 97       	sbiw	r26, 0x02	; 2
     70a:	13 96       	adiw	r26, 0x03	; 3
     70c:	9c 91       	ld	r25, X
     70e:	08 95       	ret

00000710 <trtTerminate>:

void trtTerminate(void) {

  cli();
     710:	f8 94       	cli

  kernel.tasks[kernel.running].state = TERMINATED;
     712:	80 91 84 03 	lds	r24, 0x0384
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	2b e0       	ldi	r18, 0x0B	; 11
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	82 9f       	mul	r24, r18
     71e:	f0 01       	movw	r30, r0
     720:	83 9f       	mul	r24, r19
     722:	f0 0d       	add	r31, r0
     724:	92 9f       	mul	r25, r18
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	ed 57       	subi	r30, 0x7D	; 125
     72c:	fc 4f       	sbci	r31, 0xFC	; 252
     72e:	14 86       	std	Z+12, r1	; 0x0c

  // call interrupt handler to schedule
  TIMER1_COMPA_vect();
     730:	0e 94 ca 00 	call	0x194	; 0x194 <__vector_13>
}
     734:	08 95       	ret

00000736 <trtAccept>:
  //struct task *t;
  uint8_t *s;
  uint8_t temp ;
  //t = &kernel.tasks[kernel.running];

  cli(); // disable interrupts
     736:	f8 94       	cli

  s = &kernel.semaphores[semnbr-1];
     738:	e8 2f       	mov	r30, r24
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	e0 55       	subi	r30, 0x50	; 80
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
  temp = *s ;
     740:	80 81       	ld	r24, Z
  if ((*s) > 0) {
     742:	88 23       	and	r24, r24
     744:	19 f0       	breq	.+6      	; 0x74c <trtAccept+0x16>
    (*s)--;
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 83       	st	Z, r24
     74a:	8f 5f       	subi	r24, 0xFF	; 255
  } 
  sei(); // reenable interrupts
     74c:	78 94       	sei
  return temp ;
}
     74e:	08 95       	ret

00000750 <trt_uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     750:	87 e6       	ldi	r24, 0x67	; 103
     752:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     756:	e1 ec       	ldi	r30, 0xC1	; 193
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	88 e1       	ldi	r24, 0x18	; 24
     75c:	80 83       	st	Z, r24
  
  //Set up circular buffer state variables
  tx_in = 0;
     75e:	10 92 83 02 	sts	0x0283, r1
     762:	10 92 82 02 	sts	0x0282, r1
  tx_out = 0;
     766:	10 92 85 02 	sts	0x0285, r1
     76a:	10 92 84 02 	sts	0x0284, r1

  //enable receive ISR -- added for TRT
  UCSR0B |= (1<<RXCIE0) ;
     76e:	80 81       	ld	r24, Z
     770:	80 68       	ori	r24, 0x80	; 128
     772:	80 83       	st	Z, r24
}
     774:	08 95       	ret

00000776 <__vector_21>:



ISR( USART0_UDRE_vect )
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	0b b6       	in	r0, 0x3b	; 59
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	3f 93       	push	r19
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
  if( tx_in == tx_out ){		// nothing to send
     790:	20 91 82 02 	lds	r18, 0x0282
     794:	30 91 83 02 	lds	r19, 0x0283
     798:	80 91 84 02 	lds	r24, 0x0284
     79c:	90 91 85 02 	lds	r25, 0x0285
     7a0:	28 17       	cp	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	31 f4       	brne	.+12     	; 0x7b2 <__vector_21+0x3c>
    UCSR0B &= ~(1 << UDRIE0);	// disable TX interrupt
     7a6:	80 91 c1 00 	lds	r24, 0x00C1
     7aa:	8f 7d       	andi	r24, 0xDF	; 223
     7ac:	80 93 c1 00 	sts	0x00C1, r24
     7b0:	1d c0       	rjmp	.+58     	; 0x7ec <__vector_21+0x76>
    //return;
  }
  else {
  	UDR0 = tx_buff[tx_out];
     7b2:	e0 91 84 02 	lds	r30, 0x0284
     7b6:	f0 91 85 02 	lds	r31, 0x0285
     7ba:	ea 57       	subi	r30, 0x7A	; 122
     7bc:	fd 4f       	sbci	r31, 0xFD	; 253
     7be:	80 81       	ld	r24, Z
     7c0:	80 93 c6 00 	sts	0x00C6, r24
  	tx_out++;
     7c4:	80 91 84 02 	lds	r24, 0x0284
     7c8:	90 91 85 02 	lds	r25, 0x0285
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	90 93 85 02 	sts	0x0285, r25
     7d2:	80 93 84 02 	sts	0x0284, r24
  	if (tx_out == TX_BUF_SIZE) tx_out = 0;
     7d6:	80 91 84 02 	lds	r24, 0x0284
     7da:	90 91 85 02 	lds	r25, 0x0285
     7de:	88 3c       	cpi	r24, 0xC8	; 200
     7e0:	91 05       	cpc	r25, r1
     7e2:	21 f4       	brne	.+8      	; 0x7ec <__vector_21+0x76>
     7e4:	10 92 85 02 	sts	0x0285, r1
     7e8:	10 92 84 02 	sts	0x0284, r1
  }
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	3f 91       	pop	r19
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0b be       	out	0x3b, r0	; 59
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <uart_putchar>:

int uart_putchar(char c, FILE *stream) {
     806:	1f 93       	push	r17
     808:	18 2f       	mov	r17, r24
  if (c == '\n') uart_putchar('\r', stream);
     80a:	8a 30       	cpi	r24, 0x0A	; 10
     80c:	19 f4       	brne	.+6      	; 0x814 <uart_putchar+0xe>
     80e:	8d e0       	ldi	r24, 0x0D	; 13
     810:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
  char i = tx_in;
     814:	80 91 82 02 	lds	r24, 0x0282
     818:	90 91 83 02 	lds	r25, 0x0283
  i++;
     81c:	8f 5f       	subi	r24, 0xFF	; 255
  if (i == TX_BUF_SIZE) i = 0;
     81e:	88 3c       	cpi	r24, 0xC8	; 200
     820:	09 f4       	brne	.+2      	; 0x824 <uart_putchar+0x1e>
     822:	80 e0       	ldi	r24, 0x00	; 0
  tx_buff[tx_in] = c;
     824:	e0 91 82 02 	lds	r30, 0x0282
     828:	f0 91 83 02 	lds	r31, 0x0283
     82c:	ea 57       	subi	r30, 0x7A	; 122
     82e:	fd 4f       	sbci	r31, 0xFD	; 253
     830:	10 83       	st	Z, r17
  while( i == tx_out);		// until at least one byte free
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	80 91 84 02 	lds	r24, 0x0284
     83a:	90 91 85 02 	lds	r25, 0x0285
     83e:	28 17       	cp	r18, r24
     840:	39 07       	cpc	r19, r25
     842:	c9 f3       	breq	.-14     	; 0x836 <uart_putchar+0x30>
					// tx_out modified by interrupt !
  tx_in = i;
     844:	30 93 83 02 	sts	0x0283, r19
     848:	20 93 82 02 	sts	0x0282, r18
  UCSR0B |= (1 << UDRIE0);  // enable TX interrupt
     84c:	80 91 c1 00 	lds	r24, 0x00C1
     850:	80 62       	ori	r24, 0x20	; 32
     852:	80 93 c1 00 	sts	0x00C1, r24
  return 0;
 }
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	1f 91       	pop	r17
     85c:	08 95       	ret

0000085e <__vector_20>:
 */

 // --- added for TRT ------------
uint8_t trt_rx_c;

ISR(USART0_RX_vect) {
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	0b b6       	in	r0, 0x3b	; 59
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
	trt_rx_c = UDR0;
     884:	80 91 c6 00 	lds	r24, 0x00C6
     888:	80 93 c2 03 	sts	0x03C2, r24
	trtSignal(SEM_RX_ISR_SIGNAL) ;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <uart_getchar>:
// --- end addition --------------

int
uart_getchar(FILE *stream)
{
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     8c6:	80 91 30 02 	lds	r24, 0x0230
     8ca:	90 91 31 02 	lds	r25, 0x0231
     8ce:	89 2b       	or	r24, r25
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <uart_getchar+0x1c>
     8d2:	a1 c0       	rjmp	.+322    	; 0xa16 <uart_getchar+0x15e>
     8d4:	02 e3       	ldi	r16, 0x32	; 50
     8d6:	12 e0       	ldi	r17, 0x02	; 2
    for (cp = b;;)
      {
	// --- trtWait added instead of loop_until wait
	trtWait(SEM_RX_ISR_SIGNAL) ; //loop_until_bit_is_set(UCSR0A, RXC0)
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
	if (UCSR0A & _BV(FE0))
     8de:	80 91 c0 00 	lds	r24, 0x00C0
     8e2:	84 ff       	sbrs	r24, 4
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <uart_getchar+0x34>
     8e6:	2e ef       	ldi	r18, 0xFE	; 254
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	a9 c0       	rjmp	.+338    	; 0xa3e <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     8ec:	80 91 c0 00 	lds	r24, 0x00C0
     8f0:	83 fd       	sbrc	r24, 3
     8f2:	a3 c0       	rjmp	.+326    	; 0xa3a <uart_getchar+0x182>
	  return _FDEV_ERR;
	// -- added to take char from ISR ---
	  c = trt_rx_c ; //c = UDR0; -- CHANGED
     8f4:	90 91 c2 03 	lds	r25, 0x03C2

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     8f8:	9d 30       	cpi	r25, 0x0D	; 13
     8fa:	11 f0       	breq	.+4      	; 0x900 <uart_getchar+0x48>
	  c = '\n';
	if (c == '\n')
     8fc:	9a 30       	cpi	r25, 0x0A	; 10
     8fe:	81 f4       	brne	.+32     	; 0x920 <uart_getchar+0x68>
	  {
	    *cp = c;
     900:	8a e0       	ldi	r24, 0x0A	; 10
     902:	f8 01       	movw	r30, r16
     904:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     906:	b7 01       	movw	r22, r14
     908:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
	    rxp = b;
     90c:	82 e3       	ldi	r24, 0x32	; 50
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	90 93 31 02 	sts	0x0231, r25
     914:	80 93 30 02 	sts	0x0230, r24
		// --- added for TRT to signal string-end
		trtSignal(SEM_STRING_DONE); //added--to signal end of string
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
     91e:	7b c0       	rjmp	.+246    	; 0xa16 <uart_getchar+0x15e>
	    break;
	  }
	else if (c == '\t')
     920:	99 30       	cpi	r25, 0x09	; 9
     922:	09 f4       	brne	.+2      	; 0x926 <uart_getchar+0x6e>
     924:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     926:	89 2f       	mov	r24, r25
     928:	80 52       	subi	r24, 0x20	; 32
     92a:	8f 35       	cpi	r24, 0x5F	; 95
     92c:	10 f0       	brcs	.+4      	; 0x932 <uart_getchar+0x7a>
     92e:	90 3a       	cpi	r25, 0xA0	; 160
     930:	70 f0       	brcs	.+28     	; 0x94e <uart_getchar+0x96>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	01 38       	cpi	r16, 0x81	; 129
     936:	1f 07       	cpc	r17, r31
     938:	11 f4       	brne	.+4      	; 0x93e <uart_getchar+0x86>
	      uart_putchar('\a', stream);
     93a:	87 e0       	ldi	r24, 0x07	; 7
     93c:	04 c0       	rjmp	.+8      	; 0x946 <uart_getchar+0x8e>
	    else
	      {
		*cp++ = c;
     93e:	f8 01       	movw	r30, r16
     940:	91 93       	st	Z+, r25
     942:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     944:	89 2f       	mov	r24, r25
     946:	b7 01       	movw	r22, r14
     948:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     94c:	c5 cf       	rjmp	.-118    	; 0x8d8 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     94e:	92 31       	cpi	r25, 0x12	; 18
     950:	39 f1       	breq	.+78     	; 0x9a0 <uart_getchar+0xe8>
     952:	93 31       	cpi	r25, 0x13	; 19
     954:	38 f4       	brcc	.+14     	; 0x964 <uart_getchar+0xac>
     956:	93 30       	cpi	r25, 0x03	; 3
     958:	09 f4       	brne	.+2      	; 0x95c <uart_getchar+0xa4>
     95a:	6f c0       	rjmp	.+222    	; 0xa3a <uart_getchar+0x182>
     95c:	98 30       	cpi	r25, 0x08	; 8
     95e:	09 f0       	breq	.+2      	; 0x962 <uart_getchar+0xaa>
     960:	bb cf       	rjmp	.-138    	; 0x8d8 <uart_getchar+0x20>
     962:	09 c0       	rjmp	.+18     	; 0x976 <uart_getchar+0xbe>
     964:	97 31       	cpi	r25, 0x17	; 23
     966:	09 f4       	brne	.+2      	; 0x96a <uart_getchar+0xb2>
     968:	4b c0       	rjmp	.+150    	; 0xa00 <uart_getchar+0x148>
     96a:	9f 37       	cpi	r25, 0x7F	; 127
     96c:	21 f0       	breq	.+8      	; 0x976 <uart_getchar+0xbe>
     96e:	95 31       	cpi	r25, 0x15	; 21
     970:	09 f0       	breq	.+2      	; 0x974 <uart_getchar+0xbc>
     972:	b2 cf       	rjmp	.-156    	; 0x8d8 <uart_getchar+0x20>
     974:	32 c0       	rjmp	.+100    	; 0x9da <uart_getchar+0x122>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     976:	f2 e0       	ldi	r31, 0x02	; 2
     978:	02 33       	cpi	r16, 0x32	; 50
     97a:	1f 07       	cpc	r17, r31
     97c:	09 f0       	breq	.+2      	; 0x980 <uart_getchar+0xc8>
     97e:	08 f4       	brcc	.+2      	; 0x982 <uart_getchar+0xca>
     980:	ab cf       	rjmp	.-170    	; 0x8d8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	b7 01       	movw	r22, r14
     986:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     98a:	80 e2       	ldi	r24, 0x20	; 32
     98c:	b7 01       	movw	r22, r14
     98e:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	b7 01       	movw	r22, r14
     996:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		cp--;
     99a:	01 50       	subi	r16, 0x01	; 1
     99c:	10 40       	sbci	r17, 0x00	; 0
     99e:	9c cf       	rjmp	.-200    	; 0x8d8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     9a0:	8d e0       	ldi	r24, 0x0D	; 13
     9a2:	b7 01       	movw	r22, r14
     9a4:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     9a8:	c2 e3       	ldi	r28, 0x32	; 50
     9aa:	d2 e0       	ldi	r29, 0x02	; 2
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <uart_getchar+0xfe>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
     9ae:	89 91       	ld	r24, Y+
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     9b6:	c0 17       	cp	r28, r16
     9b8:	d1 07       	cpc	r29, r17
     9ba:	c8 f3       	brcs	.-14     	; 0x9ae <uart_getchar+0xf6>
     9bc:	8d cf       	rjmp	.-230    	; 0x8d8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	b7 01       	movw	r22, r14
     9c2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     9c6:	80 e2       	ldi	r24, 0x20	; 32
     9c8:	b7 01       	movw	r22, r14
     9ca:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     9ce:	88 e0       	ldi	r24, 0x08	; 8
     9d0:	b7 01       	movw	r22, r14
     9d2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		cp--;
     9d6:	01 50       	subi	r16, 0x01	; 1
     9d8:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	02 33       	cpi	r16, 0x32	; 50
     9de:	18 07       	cpc	r17, r24
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <uart_getchar+0x12c>
     9e2:	68 f7       	brcc	.-38     	; 0x9be <uart_getchar+0x106>
     9e4:	79 cf       	rjmp	.-270    	; 0x8d8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	b7 01       	movw	r22, r14
     9ea:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar(' ', stream);
     9ee:	80 e2       	ldi	r24, 0x20	; 32
     9f0:	b7 01       	movw	r22, r14
     9f2:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
		uart_putchar('\b', stream);
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 03 04 	call	0x806	; 0x806 <uart_putchar>
     9fe:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     a00:	e2 e0       	ldi	r30, 0x02	; 2
     a02:	02 33       	cpi	r16, 0x32	; 50
     a04:	1e 07       	cpc	r17, r30
     a06:	09 f0       	breq	.+2      	; 0xa0a <uart_getchar+0x152>
     a08:	08 f4       	brcc	.+2      	; 0xa0c <uart_getchar+0x154>
     a0a:	66 cf       	rjmp	.-308    	; 0x8d8 <uart_getchar+0x20>
     a0c:	e8 01       	movw	r28, r16
     a0e:	8a 91       	ld	r24, -Y
     a10:	80 32       	cpi	r24, 0x20	; 32
     a12:	49 f7       	brne	.-46     	; 0x9e6 <uart_getchar+0x12e>
     a14:	61 cf       	rjmp	.-318    	; 0x8d8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     a16:	e0 91 30 02 	lds	r30, 0x0230
     a1a:	f0 91 31 02 	lds	r31, 0x0231
     a1e:	81 91       	ld	r24, Z+
     a20:	f0 93 31 02 	sts	0x0231, r31
     a24:	e0 93 30 02 	sts	0x0230, r30
  if (c == '\n')
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	21 f4       	brne	.+8      	; 0xa34 <uart_getchar+0x17c>
    rxp = 0;
     a2c:	10 92 31 02 	sts	0x0231, r1
     a30:	10 92 30 02 	sts	0x0230, r1

  return c;
     a34:	28 2f       	mov	r18, r24
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <uart_getchar+0x186>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	3f ef       	ldi	r19, 0xFF	; 255
}
     a3e:	c9 01       	movw	r24, r18
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	08 95       	ret

00000a4e <port_init>:
volatile int RPM; // sem 7

//Helper functions
void port_init(void)
begin
	DDRA = 0x00; // all of PORTA is an input to avoid coupling with ADC meas
     a4e:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00; // no pull-up resistors to avoid coupling
     a50:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xff; // all output
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
     a56:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xff; // all output esp port B.3
     a58:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
     a5a:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~0x04; // d.2 is an input
     a5c:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= 0x04; // pull-up resistor on d.2 
     a5e:	5a 9a       	sbi	0x0b, 2	; 11
end
     a60:	08 95       	ret

00000a62 <timer2_init>:
end

// sets timer2 to be a counter
void timer2_init(void)
begin
	TCCR2A = 0x00;
     a62:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x00;
     a66:	e1 eb       	ldi	r30, 0xB1	; 177
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	10 82       	st	Z, r1
	TIMSK2 = 0x00;
     a6c:	10 92 70 00 	sts	0x0070, r1

	TCCR2B |= (1<<CS22);    // sets the prescaler to 64
     a70:	80 81       	ld	r24, Z
     a72:	84 60       	ori	r24, 0x04	; 4
     a74:	80 83       	st	Z, r24
end
     a76:	08 95       	ret

00000a78 <timer0_init>:

void timer0_init(void)
begin
	TCCR0A = 0x00;
     a78:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
     a7a:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0x00;
     a7c:	10 92 6e 00 	sts	0x006E, r1
	OCR0A = 150;    // sets up 0 duty cycle
     a80:	86 e9       	ldi	r24, 0x96	; 150
     a82:	87 bd       	out	0x27, r24	; 39
	EICRA = 0x00;
     a84:	e9 e6       	ldi	r30, 0x69	; 105
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	10 82       	st	Z, r1
	EIMSK = 0x00;
     a8a:	1d ba       	out	0x1d, r1	; 29

	EICRA |= (1<<ISC01);    // falling edge triggers INT0
     a8c:	80 81       	ld	r24, Z
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);    // enables INT0
     a92:	e8 9a       	sbi	0x1d, 0	; 29

	TCCR0A |= (1<<COM0A1) + (1<<WGM01) + (1<<WGM00);    // fast pwm
     a94:	84 b5       	in	r24, 0x24	; 36
     a96:	83 68       	ori	r24, 0x83	; 131
     a98:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) + (1<<CS00);    // prescaler of 64 -> 976 cycles/sec
     a9a:	85 b5       	in	r24, 0x25	; 37
     a9c:	83 60       	ori	r24, 0x03	; 3
     a9e:	85 bd       	out	0x25, r24	; 37
end
     aa0:	08 95       	ret

00000aa2 <calc_PWM_Const>:
	end
  end

// --- define task 2  ----------------------------------------
void calc_PWM_Const(void* args) 
  begin	
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
  	uint32_t rel, dead ;
	int error, prev_error, sum_error, CF;
	char p, i, d;
	s_value = 1000;
     ab0:	88 ee       	ldi	r24, 0xE8	; 232
     ab2:	80 93 67 03 	sts	0x0367, r24
		trtSignal(SEM_SHARED_RPM);

		// check if error had a zero crossing and reset the i term
				
		// calculate CF
		CF = p * error + d * (error-prev_error) + i * (sum_error);
     ab6:	c6 e4       	ldi	r28, 0x46	; 70
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
		if (CF>255) OCR0A = 255;
     aba:	dd 24       	eor	r13, r13
     abc:	da 94       	dec	r13
	while(1)
	begin
		prev_error = error;
		sum_error += error;
		// lock and look at error
		trtWait(SEM_SHARED_RPM);
     abe:	87 e0       	ldi	r24, 0x07	; 7
     ac0:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		trtWait(SEM_SHARED_S);
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		error = RPM-s_value;
     aca:	00 91 65 03 	lds	r16, 0x0365
     ace:	10 91 66 03 	lds	r17, 0x0366
     ad2:	80 91 67 03 	lds	r24, 0x0367
     ad6:	08 1b       	sub	r16, r24
     ad8:	11 09       	sbc	r17, r1
		trtSignal(SEM_SHARED_S);
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		trtSignal(SEM_SHARED_RPM);
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>

		// check if error had a zero crossing and reset the i term
				
		// calculate CF
		CF = p * error + d * (error-prev_error) + i * (sum_error);
     ae6:	0c 9f       	mul	r16, r28
     ae8:	c0 01       	movw	r24, r0
     aea:	0d 9f       	mul	r16, r29
     aec:	90 0d       	add	r25, r0
     aee:	1c 9f       	mul	r17, r28
     af0:	90 0d       	add	r25, r0
     af2:	11 24       	eor	r1, r1
		if (CF>255) OCR0A = 255;
     af4:	8f 3f       	cpi	r24, 0xFF	; 255
     af6:	91 05       	cpc	r25, r1
     af8:	11 f0       	breq	.+4      	; 0xafe <calc_PWM_Const+0x5c>
     afa:	0c f0       	brlt	.+2      	; 0xafe <calc_PWM_Const+0x5c>
     afc:	d7 bc       	out	0x27, r13	; 39
		if (CF<0) OCR0A = 0;
     afe:	97 fd       	sbrc	r25, 7
     b00:	17 bc       	out	0x27, r1	; 39
		if (CF<=255 && CF>=0) OCR0A = CF; 
     b02:	8f 3f       	cpi	r24, 0xFF	; 255
     b04:	91 05       	cpc	r25, r1
     b06:	09 f0       	breq	.+2      	; 0xb0a <calc_PWM_Const+0x68>
     b08:	08 f4       	brcc	.+2      	; 0xb0c <calc_PWM_Const+0x6a>
     b0a:	87 bd       	out	0x27, r24	; 39
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     b0c:	20 91 ba 03 	lds	r18, 0x03BA
     b10:	30 91 bb 03 	lds	r19, 0x03BB
     b14:	40 91 bc 03 	lds	r20, 0x03BC
     b18:	50 91 bd 03 	lds	r21, 0x03BD
     b1c:	a9 01       	movw	r20, r18
     b1e:	33 27       	eor	r19, r19
     b20:	22 27       	eor	r18, r18
     b22:	60 91 84 00 	lds	r22, 0x0084
     b26:	70 91 85 00 	lds	r23, 0x0085

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.05);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.08);
	    trtSleepUntil(rel, dead);
     b2a:	e0 90 84 00 	lds	r14, 0x0084
     b2e:	f0 90 85 00 	lds	r15, 0x0085
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	62 0f       	add	r22, r18
     b38:	73 1f       	adc	r23, r19
     b3a:	84 1f       	adc	r24, r20
     b3c:	95 1f       	adc	r25, r21
     b3e:	63 5f       	subi	r22, 0xF3	; 243
     b40:	7c 4f       	sbci	r23, 0xFC	; 252
     b42:	8f 4f       	sbci	r24, 0xFF	; 255
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	00 e0       	ldi	r16, 0x00	; 0
     b48:	10 e0       	ldi	r17, 0x00	; 0
     b4a:	2e 0d       	add	r18, r14
     b4c:	3f 1d       	adc	r19, r15
     b4e:	40 1f       	adc	r20, r16
     b50:	51 1f       	adc	r21, r17
     b52:	2e 51       	subi	r18, 0x1E	; 30
     b54:	3b 4f       	sbci	r19, 0xFB	; 251
     b56:	4f 4f       	sbci	r20, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
     b5e:	af cf       	rjmp	.-162    	; 0xabe <calc_PWM_Const+0x1c>

00000b60 <__vector_1>:
	end
  end

// pin change interrupt on D.2. Initialized in task 2
ISR(INT0_vect)
begin
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	0b b6       	in	r0, 0x3b	; 59
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	ef 93       	push	r30
     b74:	ff 93       	push	r31
	fan_period = TCNT2;
     b76:	e2 eb       	ldi	r30, 0xB2	; 178
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	90 93 6d 03 	sts	0x036D, r25
     b82:	80 93 6c 03 	sts	0x036C, r24
    TCNT2 = 0;
     b86:	10 82       	st	Z, r1
end
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	0f 90       	pop	r0
     b92:	0b be       	out	0x3b, r0	; 59
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <main>:


// --- Main Program ----------------------------------
int main(void) {
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
  //init the UART -- trt_uart_init() is in trtUart.c
  trt_uart_init();
     baa:	0e 94 a8 03 	call	0x750	; 0x750 <trt_uart_init>
  stdout = stdin = stderr = &uart_str;
     bae:	6a e1       	ldi	r22, 0x1A	; 26
     bb0:	71 e0       	ldi	r23, 0x01	; 1
     bb2:	70 93 c8 03 	sts	0x03C8, r23
     bb6:	60 93 c7 03 	sts	0x03C7, r22
     bba:	70 93 c4 03 	sts	0x03C4, r23
     bbe:	60 93 c3 03 	sts	0x03C3, r22
     bc2:	70 93 c6 03 	sts	0x03C6, r23
     bc6:	60 93 c5 03 	sts	0x03C5, r22
  fprintf(stdout,"\n\r Hi\n\r\n\r");
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <fputs>

  // start TRT
  trtInitKernel(140); // 80 bytes for the idle task stack
     bd2:	8c e8       	ldi	r24, 0x8C	; 140
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 0e 02 	call	0x41c	; 0x41c <trtInitKernel>

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     bda:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     bdc:	10 92 b1 03 	sts	0x03B1, r1
  
  sei(); // set enabled interrupts;
     be0:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     be2:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     be4:	10 92 b2 03 	sts	0x03B2, r1
  
  sei(); // set enabled interrupts;
     be8:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     bea:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 b3 03 	sts	0x03B3, r24
  
  sei(); // set enabled interrupts;
     bf2:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     bf4:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     bf6:	80 93 b4 03 	sts	0x03B4, r24
  
  sei(); // set enabled interrupts;
     bfa:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     bfc:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     bfe:	80 93 b5 03 	sts	0x03B5, r24
  
  sei(); // set enabled interrupts;
     c02:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c04:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c06:	80 93 b6 03 	sts	0x03B6, r24
  
  sei(); // set enabled interrupts;
     c0a:	78 94       	sei

}

void trtCreateSemaphore(uint8_t semnbr, uint8_t initVal) {

  cli(); // turn off interrupts
     c0c:	f8 94       	cli

  kernel.semaphores[semnbr-1] = initVal;
     c0e:	80 93 b7 03 	sts	0x03B7, r24
  
  sei(); // set enabled interrupts;
     c12:	78 94       	sei
  trtCreateSemaphore(SEM_SHARED_D, 1) ; // protect shared variables
  trtCreateSemaphore(SEM_SHARED_RPM, 1) ; // protect shared variables


 // --- creat tasks  ----------------
  trtCreateTask(get_User_Input, 100, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[0]));
     c14:	88 e4       	ldi	r24, 0x48	; 72
     c16:	96 e0       	ldi	r25, 0x06	; 6
     c18:	64 e6       	ldi	r22, 0x64	; 100
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	2a e1       	ldi	r18, 0x1A	; 26
     c1e:	36 e0       	ldi	r19, 0x06	; 6
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	ea e1       	ldi	r30, 0x1A	; 26
     c26:	ee 2e       	mov	r14, r30
     c28:	e6 e0       	ldi	r30, 0x06	; 6
     c2a:	fe 2e       	mov	r15, r30
     c2c:	01 2d       	mov	r16, r1
     c2e:	11 2d       	mov	r17, r1
     c30:	be e4       	ldi	r27, 0x4E	; 78
     c32:	cb 2e       	mov	r12, r27
     c34:	b3 e0       	ldi	r27, 0x03	; 3
     c36:	db 2e       	mov	r13, r27
     c38:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  trtCreateTask(get_User_Input, 100, SECONDS2TICKS(0.1), SECONDS2TICKS(0.1), &(args[1]));
     c3c:	88 e4       	ldi	r24, 0x48	; 72
     c3e:	96 e0       	ldi	r25, 0x06	; 6
     c40:	64 e6       	ldi	r22, 0x64	; 100
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	2a e1       	ldi	r18, 0x1A	; 26
     c46:	36 e0       	ldi	r19, 0x06	; 6
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	a0 e5       	ldi	r26, 0x50	; 80
     c4e:	ca 2e       	mov	r12, r26
     c50:	a3 e0       	ldi	r26, 0x03	; 3
     c52:	da 2e       	mov	r13, r26
     c54:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  trtCreateTask(get_Fan_Speed, 100, SECONDS2TICKS(0.05), SECONDS2TICKS(0.05), &(args[2]));
     c58:	80 e7       	ldi	r24, 0x70	; 112
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	64 e6       	ldi	r22, 0x64	; 100
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	2d e0       	ldi	r18, 0x0D	; 13
     c62:	33 e0       	ldi	r19, 0x03	; 3
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	fd e0       	ldi	r31, 0x0D	; 13
     c6a:	ef 2e       	mov	r14, r31
     c6c:	f3 e0       	ldi	r31, 0x03	; 3
     c6e:	ff 2e       	mov	r15, r31
     c70:	01 2d       	mov	r16, r1
     c72:	11 2d       	mov	r17, r1
     c74:	e2 e5       	ldi	r30, 0x52	; 82
     c76:	ce 2e       	mov	r12, r30
     c78:	e3 e0       	ldi	r30, 0x03	; 3
     c7a:	de 2e       	mov	r13, r30
     c7c:	0e 94 4c 02 	call	0x498	; 0x498 <trtCreateTask>
  
  
  // --- Idle task --------------------------------------
  // just sleeps the cpu to save power 
  // every time it executes
  set_sleep_mode(SLEEP_MODE_IDLE);
     c80:	83 b7       	in	r24, 0x33	; 51
     c82:	81 7f       	andi	r24, 0xF1	; 241
     c84:	83 bf       	out	0x33, r24	; 51
  sleep_enable();
     c86:	83 b7       	in	r24, 0x33	; 51
     c88:	81 60       	ori	r24, 0x01	; 1
     c8a:	83 bf       	out	0x33, r24	; 51
  while (1) 
  begin
  	sleep_cpu();
     c8c:	88 95       	sleep
     c8e:	fe cf       	rjmp	.-4      	; 0xc8c <main+0xee>

00000c90 <get_User_Input>:
end


// --- define task 1  ----------------------------------------
void get_User_Input(void* args) 
  begin
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	af 92       	push	r10
     c96:	bf 92       	push	r11
     c98:	cf 92       	push	r12
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <get_User_Input+0x1a>
     caa:	00 d0       	rcall	.+0      	; 0xcac <get_User_Input+0x1c>
     cac:	00 d0       	rcall	.+0      	; 0xcae <get_User_Input+0x1e>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
		fscanf(stdin, "%s %d", cmd, &inputValue) ;
     cb2:	ba e0       	ldi	r27, 0x0A	; 10
     cb4:	8b 2e       	mov	r8, r27
     cb6:	b1 e0       	ldi	r27, 0x01	; 1
     cb8:	9b 2e       	mov	r9, r27
     cba:	a3 e0       	ldi	r26, 0x03	; 3
     cbc:	aa 2e       	mov	r10, r26
     cbe:	b1 2c       	mov	r11, r1
     cc0:	ac 0e       	add	r10, r28
     cc2:	bd 1e       	adc	r11, r29
     cc4:	6e 01       	movw	r12, r28
     cc6:	08 94       	sec
     cc8:	c1 1c       	adc	r12, r1
     cca:	d1 1c       	adc	r13, r1
	begin
		// commands:
		// 's 3' turns on led 3
		// 'c 4' turns off led 4
		// 't 1' toggles led 1
		fprintf(stdout, ">") ;
     ccc:	60 91 c5 03 	lds	r22, 0x03C5
     cd0:	70 91 c6 03 	lds	r23, 0x03C6
     cd4:	8e e3       	ldi	r24, 0x3E	; 62
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
		fscanf(stdin, "%s %d", cmd, &inputValue) ;
     cdc:	8d b7       	in	r24, 0x3d	; 61
     cde:	9e b7       	in	r25, 0x3e	; 62
     ce0:	08 97       	sbiw	r24, 0x08	; 8
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	9e bf       	out	0x3e, r25	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	8d bf       	out	0x3d, r24	; 61
     cec:	ed b7       	in	r30, 0x3d	; 61
     cee:	fe b7       	in	r31, 0x3e	; 62
     cf0:	31 96       	adiw	r30, 0x01	; 1
     cf2:	80 91 c3 03 	lds	r24, 0x03C3
     cf6:	90 91 c4 03 	lds	r25, 0x03C4
     cfa:	ad b7       	in	r26, 0x3d	; 61
     cfc:	be b7       	in	r27, 0x3e	; 62
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	9c 93       	st	X, r25
     d02:	8e 93       	st	-X, r24
     d04:	11 97       	sbiw	r26, 0x01	; 1
     d06:	93 82       	std	Z+3, r9	; 0x03
     d08:	82 82       	std	Z+2, r8	; 0x02
     d0a:	b5 82       	std	Z+5, r11	; 0x05
     d0c:	a4 82       	std	Z+4, r10	; 0x04
     d0e:	d7 82       	std	Z+7, r13	; 0x07
     d10:	c6 82       	std	Z+6, r12	; 0x06
     d12:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fscanf>
		//trtWait(SEM_STRING_DONE);

		// update shared leds
		
		if (cmd[0] == 's')
     d16:	8d b7       	in	r24, 0x3d	; 61
     d18:	9e b7       	in	r25, 0x3e	; 62
     d1a:	08 96       	adiw	r24, 0x08	; 8
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	9e bf       	out	0x3e, r25	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	8d bf       	out	0x3d, r24	; 61
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	83 37       	cpi	r24, 0x73	; 115
     d2a:	49 f4       	brne	.+18     	; 0xd3e <get_User_Input+0xae>
		begin
			trtWait(SEM_SHARED_S) ;
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			s_value = inputValue;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	80 93 67 03 	sts	0x0367, r24
			trtSignal(SEM_SHARED_S);
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'p')
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	80 37       	cpi	r24, 0x70	; 112
     d42:	49 f4       	brne	.+18     	; 0xd56 <get_User_Input+0xc6>
		begin
			trtWait(SEM_SHARED_P) ;
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			p_value = inputValue;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	80 93 6a 03 	sts	0x036A, r24
			trtSignal(SEM_SHARED_P);
     d50:	84 e0       	ldi	r24, 0x04	; 4
     d52:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'i')
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	89 36       	cpi	r24, 0x69	; 105
     d5a:	49 f4       	brne	.+18     	; 0xd6e <get_User_Input+0xde>
		begin
			trtWait(SEM_SHARED_I) ;
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			i_value = inputValue;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	80 93 6b 03 	sts	0x036B, r24
			trtSignal(SEM_SHARED_I);
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
		end
		if (cmd[0] == 'd')
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	84 36       	cpi	r24, 0x64	; 100
     d72:	49 f4       	brne	.+18     	; 0xd86 <get_User_Input+0xf6>
		begin
			trtWait(SEM_SHARED_D) ;
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
			d_value = inputValue;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	80 93 69 03 	sts	0x0369, r24
			trtSignal(SEM_SHARED_D);
     d80:	86 e0       	ldi	r24, 0x06	; 6
     d82:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
  sei(); // reenable interrupts
}

uint32_t trtCurrentTime(void) {

  return (((uint32_t)kernel.cycles << 16) + (uint32_t)TCNT1);
     d86:	20 91 ba 03 	lds	r18, 0x03BA
     d8a:	30 91 bb 03 	lds	r19, 0x03BB
     d8e:	40 91 bc 03 	lds	r20, 0x03BC
     d92:	50 91 bd 03 	lds	r21, 0x03BD
     d96:	a9 01       	movw	r20, r18
     d98:	33 27       	eor	r19, r19
     d9a:	22 27       	eor	r18, r18
     d9c:	60 91 84 00 	lds	r22, 0x0084
     da0:	70 91 85 00 	lds	r23, 0x0085
		end
		
		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.1);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
     da4:	e0 90 84 00 	lds	r14, 0x0084
     da8:	f0 90 85 00 	lds	r15, 0x0085
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	62 0f       	add	r22, r18
     db2:	73 1f       	adc	r23, r19
     db4:	84 1f       	adc	r24, r20
     db6:	95 1f       	adc	r25, r21
     db8:	66 5e       	subi	r22, 0xE6	; 230
     dba:	79 4f       	sbci	r23, 0xF9	; 249
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	00 e0       	ldi	r16, 0x00	; 0
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	2e 0d       	add	r18, r14
     dc6:	3f 1d       	adc	r19, r15
     dc8:	40 1f       	adc	r20, r16
     dca:	51 1f       	adc	r21, r17
     dcc:	21 5b       	subi	r18, 0xB1	; 177
     dce:	3d 4e       	sbci	r19, 0xED	; 237
     dd0:	4f 4f       	sbci	r20, 0xFF	; 255
     dd2:	5f 4f       	sbci	r21, 0xFF	; 255
     dd4:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
     dd8:	79 cf       	rjmp	.-270    	; 0xccc <get_User_Input+0x3c>

00000dda <write_string_LCD>:
	LCDGotoXY(x, y);
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end

void write_string_LCD(char* str, int x, int y)
begin
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	f6 2e       	mov	r15, r22
     de4:	e4 2e       	mov	r14, r20
	sprintf(lcd_buffer,"%12s\n", str);
     de6:	00 d0       	rcall	.+0      	; 0xde8 <write_string_LCD+0xe>
     de8:	00 d0       	rcall	.+0      	; 0xdea <write_string_LCD+0x10>
     dea:	00 d0       	rcall	.+0      	; 0xdec <write_string_LCD+0x12>
     dec:	ed b7       	in	r30, 0x3d	; 61
     dee:	fe b7       	in	r31, 0x3e	; 62
     df0:	31 96       	adiw	r30, 0x01	; 1
     df2:	04 e5       	ldi	r16, 0x54	; 84
     df4:	13 e0       	ldi	r17, 0x03	; 3
     df6:	ad b7       	in	r26, 0x3d	; 61
     df8:	be b7       	in	r27, 0x3e	; 62
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	1c 93       	st	X, r17
     dfe:	0e 93       	st	-X, r16
     e00:	11 97       	sbiw	r26, 0x01	; 1
     e02:	20 e1       	ldi	r18, 0x10	; 16
     e04:	31 e0       	ldi	r19, 0x01	; 1
     e06:	33 83       	std	Z+3, r19	; 0x03
     e08:	22 83       	std	Z+2, r18	; 0x02
     e0a:	95 83       	std	Z+5, r25	; 0x05
     e0c:	84 83       	std	Z+4, r24	; 0x04
     e0e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <sprintf>
	LCDGotoXY(x, y);
     e12:	8d b7       	in	r24, 0x3d	; 61
     e14:	9e b7       	in	r25, 0x3e	; 62
     e16:	06 96       	adiw	r24, 0x06	; 6
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	9e bf       	out	0x3e, r25	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	8d bf       	out	0x3d, r24	; 61
     e22:	8f 2d       	mov	r24, r15
     e24:	6e 2d       	mov	r22, r14
     e26:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     e2a:	f8 01       	movw	r30, r16
     e2c:	01 90       	ld	r0, Z+
     e2e:	00 20       	and	r0, r0
     e30:	e9 f7       	brne	.-6      	; 0xe2c <write_string_LCD+0x52>
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	e0 1b       	sub	r30, r16
     e36:	f1 0b       	sbc	r31, r17
     e38:	c8 01       	movw	r24, r16
     e3a:	6e 2f       	mov	r22, r30
     e3c:	0e 94 3f 08 	call	0x107e	; 0x107e <LCDstring>
end
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	08 95       	ret

00000e4a <write_3digit_LCD>:
	TCCR0B |= (1<<CS01) + (1<<CS00);    // prescaler of 64 -> 976 cycles/sec
end

// write to LCD
void write_3digit_LCD(int num, int x, int y)
begin
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	f6 2e       	mov	r15, r22
     e54:	e4 2e       	mov	r14, r20
	sprintf(lcd_buffer,"%4d", num);
     e56:	00 d0       	rcall	.+0      	; 0xe58 <write_3digit_LCD+0xe>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <write_3digit_LCD+0x10>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <write_3digit_LCD+0x12>
     e5c:	ed b7       	in	r30, 0x3d	; 61
     e5e:	fe b7       	in	r31, 0x3e	; 62
     e60:	31 96       	adiw	r30, 0x01	; 1
     e62:	04 e5       	ldi	r16, 0x54	; 84
     e64:	13 e0       	ldi	r17, 0x03	; 3
     e66:	ad b7       	in	r26, 0x3d	; 61
     e68:	be b7       	in	r27, 0x3e	; 62
     e6a:	12 96       	adiw	r26, 0x02	; 2
     e6c:	1c 93       	st	X, r17
     e6e:	0e 93       	st	-X, r16
     e70:	11 97       	sbiw	r26, 0x01	; 1
     e72:	26 e1       	ldi	r18, 0x16	; 22
     e74:	31 e0       	ldi	r19, 0x01	; 1
     e76:	33 83       	std	Z+3, r19	; 0x03
     e78:	22 83       	std	Z+2, r18	; 0x02
     e7a:	95 83       	std	Z+5, r25	; 0x05
     e7c:	84 83       	std	Z+4, r24	; 0x04
     e7e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <sprintf>
	LCDGotoXY(x, y);
     e82:	8d b7       	in	r24, 0x3d	; 61
     e84:	9e b7       	in	r25, 0x3e	; 62
     e86:	06 96       	adiw	r24, 0x06	; 6
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	9e bf       	out	0x3e, r25	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	8d bf       	out	0x3d, r24	; 61
     e92:	8f 2d       	mov	r24, r15
     e94:	6e 2d       	mov	r22, r14
     e96:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     e9a:	f8 01       	movw	r30, r16
     e9c:	01 90       	ld	r0, Z+
     e9e:	00 20       	and	r0, r0
     ea0:	e9 f7       	brne	.-6      	; 0xe9c <write_3digit_LCD+0x52>
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	e0 1b       	sub	r30, r16
     ea6:	f1 0b       	sbc	r31, r17
     ea8:	c8 01       	movw	r24, r16
     eaa:	6e 2f       	mov	r22, r30
     eac:	0e 94 3f 08 	call	0x107e	; 0x107e <LCDstring>
end
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD
	LCDinit();	//initialize the display
     eba:	0e 94 9e 08 	call	0x113c	; 0x113c <LCDinit>
	LCDcursorOFF();
     ebe:	0e 94 06 09 	call	0x120c	; 0x120c <LCDcursorOFF>
	LCDclr();	//clear the display
     ec2:	0e 94 37 08 	call	0x106e	; 0x106e <LCDclr>
	LCDGotoXY(0,0);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     ece:	8c e8       	ldi	r24, 0x8C	; 140
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <CopyStringtoLCD>
	LCD_char_count = 0;
     eda:	10 92 68 03 	sts	0x0368, r1
end
     ede:	08 95       	ret

00000ee0 <get_Fan_Speed>:

// --- define task 3  ----------------------------------------
// writes the desired fan speed and the current fan speed to the LCD
// approx five times a second
void get_Fan_Speed(void* args) 
  begin	
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
end

// sets timer2 to be a counter
void timer2_init(void)
begin
	TCCR2A = 0x00;
     ee8:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0x00;
     eec:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0x00;
     ef0:	10 92 70 00 	sts	0x0070, r1

	TCCR2B |= (1<<CS22);    // sets the prescaler to 64
     ef4:	80 91 b1 00 	lds	r24, 0x00B1
     ef8:	84 60       	ori	r24, 0x04	; 4
     efa:	80 93 b1 00 	sts	0x00B1, r24
// approx five times a second
void get_Fan_Speed(void* args) 
  begin	
  	uint32_t rel, dead ;
	timer2_init();
	timer0_init();    // sets up the fast pwm
     efe:	0e 94 3c 05 	call	0xa78	; 0xa78 <timer0_init>
	LCD_init();    // init LCD for our use
     f02:	0e 94 5d 07 	call	0xeba	; 0xeba <LCD_init>
	port_init();    // init port c
     f06:	0e 94 27 05 	call	0xa4e	; 0xa4e <port_init>

	while(1)
	begin
		rpm_isr = (float)fan_period*7;
     f0a:	60 91 6c 03 	lds	r22, 0x036C
     f0e:	70 91 6d 03 	lds	r23, 0x036D
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__floatunsisf>
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 ee       	ldi	r20, 0xE0	; 224
     f20:	50 e4       	ldi	r21, 0x40	; 64
     f22:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__mulsf3>
     f26:	60 93 6e 03 	sts	0x036E, r22
     f2a:	70 93 6f 03 	sts	0x036F, r23
     f2e:	80 93 70 03 	sts	0x0370, r24
     f32:	90 93 71 03 	sts	0x0371, r25
		rpm_isr = 1/rpm_isr;
     f36:	20 91 6e 03 	lds	r18, 0x036E
     f3a:	30 91 6f 03 	lds	r19, 0x036F
     f3e:	40 91 70 03 	lds	r20, 0x0370
     f42:	50 91 71 03 	lds	r21, 0x0371
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	9f e3       	ldi	r25, 0x3F	; 63
     f4e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__divsf3>
     f52:	60 93 6e 03 	sts	0x036E, r22
     f56:	70 93 6f 03 	sts	0x036F, r23
     f5a:	80 93 70 03 	sts	0x0370, r24
     f5e:	90 93 71 03 	sts	0x0371, r25

		trtWait(SEM_SHARED_RPM);
     f62:	87 e0       	ldi	r24, 0x07	; 7
     f64:	0e 94 b2 02 	call	0x564	; 0x564 <trtWait>
		RPM = (int)rpm_isr;
     f68:	60 91 6e 03 	lds	r22, 0x036E
     f6c:	70 91 6f 03 	lds	r23, 0x036F
     f70:	80 91 70 03 	lds	r24, 0x0370
     f74:	90 91 71 03 	lds	r25, 0x0371
     f78:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fixsfsi>
     f7c:	70 93 66 03 	sts	0x0366, r23
     f80:	60 93 65 03 	sts	0x0365, r22
		write_3digit_LCD(RPM, 1, 1);
     f84:	80 91 65 03 	lds	r24, 0x0365
     f88:	90 91 66 03 	lds	r25, 0x0366
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	0e 94 25 07 	call	0xe4a	; 0xe4a <write_3digit_LCD>
		trtSignal(SEM_SHARED_RPM);
     f98:	87 e0       	ldi	r24, 0x07	; 7
     f9a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <trtSignal>
     f9e:	20 91 ba 03 	lds	r18, 0x03BA
     fa2:	30 91 bb 03 	lds	r19, 0x03BB
     fa6:	40 91 bc 03 	lds	r20, 0x03BC
     faa:	50 91 bd 03 	lds	r21, 0x03BD
     fae:	a9 01       	movw	r20, r18
     fb0:	33 27       	eor	r19, r19
     fb2:	22 27       	eor	r18, r18
     fb4:	60 91 84 00 	lds	r22, 0x0084
     fb8:	70 91 85 00 	lds	r23, 0x0085

		// Sleep
	    rel = trtCurrentTime() + SECONDS2TICKS(0.2);
	    dead = trtCurrentTime() + SECONDS2TICKS(0.3);
	    trtSleepUntil(rel, dead);
     fbc:	e0 90 84 00 	lds	r14, 0x0084
     fc0:	f0 90 85 00 	lds	r15, 0x0085
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	62 0f       	add	r22, r18
     fca:	73 1f       	adc	r23, r19
     fcc:	84 1f       	adc	r24, r20
     fce:	95 1f       	adc	r25, r21
     fd0:	6b 5c       	subi	r22, 0xCB	; 203
     fd2:	73 4f       	sbci	r23, 0xF3	; 243
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	00 e0       	ldi	r16, 0x00	; 0
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	2e 0d       	add	r18, r14
     fde:	3f 1d       	adc	r19, r15
     fe0:	40 1f       	adc	r20, r16
     fe2:	51 1f       	adc	r21, r17
     fe4:	21 5b       	subi	r18, 0xB1	; 177
     fe6:	3d 4e       	sbci	r19, 0xED	; 237
     fe8:	4f 4f       	sbci	r20, 0xFF	; 255
     fea:	5f 4f       	sbci	r21, 0xFF	; 255
     fec:	0e 94 3e 03 	call	0x67c	; 0x67c <trtSleepUntil>
     ff0:	8c cf       	rjmp	.-232    	; 0xf0a <get_Fan_Speed+0x2a>

00000ff2 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     ff2:	28 2f       	mov	r18, r24
     ff4:	20 7f       	andi	r18, 0xF0	; 240
     ff6:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     ff8:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     ffa:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ffc:	20 e4       	ldi	r18, 0x40	; 64
     ffe:	3f e1       	ldi	r19, 0x1F	; 31
    1000:	f9 01       	movw	r30, r18
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1006:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1008:	40 98       	cbi	0x08, 0	; 8
    100a:	f9 01       	movw	r30, r18
    100c:	31 97       	sbiw	r30, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	44 e0       	ldi	r20, 0x04	; 4
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	4a 95       	dec	r20
    101a:	e1 f7       	brne	.-8      	; 0x1014 <LCDsendChar+0x22>
    101c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    101e:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1020:	42 9a       	sbi	0x08, 2	; 8
    1022:	c9 01       	movw	r24, r18
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1028:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    102a:	40 98       	cbi	0x08, 0	; 8
    102c:	c9 01       	movw	r24, r18
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1032:	08 95       	ret

00001034 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1034:	28 2f       	mov	r18, r24
    1036:	20 7f       	andi	r18, 0xF0	; 240
    1038:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    103a:	42 9a       	sbi	0x08, 2	; 8
    103c:	20 e4       	ldi	r18, 0x40	; 64
    103e:	3f e1       	ldi	r19, 0x1F	; 31
    1040:	f9 01       	movw	r30, r18
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1046:	42 98       	cbi	0x08, 2	; 8
    1048:	f9 01       	movw	r30, r18
    104a:	31 97       	sbiw	r30, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	54 e0       	ldi	r21, 0x04	; 4
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	5a 95       	dec	r21
    1058:	e1 f7       	brne	.-8      	; 0x1052 <LCDsendCommand+0x1e>
    105a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    105c:	42 9a       	sbi	0x08, 2	; 8
    105e:	c9 01       	movw	r24, r18
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1064:	42 98       	cbi	0x08, 2	; 8
    1066:	c9 01       	movw	r24, r18
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    106c:	08 95       	ret

0000106e <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    1074:	08 95       	ret

00001076 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    107c:	08 95       	ret

0000107e <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	49 f0       	breq	.+18     	; 0x109e <LCDstring+0x20>
    108c:	ec 01       	movw	r28, r24
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	04 c0       	rjmp	.+8      	; 0x109a <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1092:	89 91       	ld	r24, Y+
    1094:	0e 94 f9 07 	call	0xff2	; 0xff2 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1098:	1f 5f       	subi	r17, 0xFF	; 255
    109a:	10 17       	cp	r17, r16
    109c:	d0 f3       	brcs	.-12     	; 0x1092 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    10a8:	62 30       	cpi	r22, 0x02	; 2
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <LCDGotoXY+0x10>
    10ac:	63 30       	cpi	r22, 0x03	; 3
    10ae:	31 f0       	breq	.+12     	; 0x10bc <LCDGotoXY+0x14>
    10b0:	61 30       	cpi	r22, 0x01	; 1
    10b2:	29 f4       	brne	.+10     	; 0x10be <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    10b4:	80 5c       	subi	r24, 0xC0	; 192
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    10b8:	8c 5e       	subi	r24, 0xEC	; 236
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    10bc:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
	
}
    10c4:	08 95       	ret

000010c6 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    10d0:	64 2f       	mov	r22, r20
    10d2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    10da:	0e 94 f9 07 	call	0xff2	; 0xff2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    10de:	1f 5f       	subi	r17, 0xFF	; 255
    10e0:	fe 01       	movw	r30, r28
    10e2:	e1 0f       	add	r30, r17
    10e4:	f1 1d       	adc	r31, r1
    10e6:	84 91       	lpm	r24, Z+
    10e8:	88 23       	and	r24, r24
    10ea:	b9 f7       	brne	.-18     	; 0x10da <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	08 95       	ret

000010f4 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	7c 01       	movw	r14, r24
    1102:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1104:	11 0f       	add	r17, r17
    1106:	11 0f       	add	r17, r17
    1108:	11 0f       	add	r17, r17
    110a:	10 64       	ori	r17, 0x40	; 64
    110c:	c0 e0       	ldi	r28, 0x00	; 0
    110e:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1110:	f7 01       	movw	r30, r14
    1112:	ec 0f       	add	r30, r28
    1114:	fd 1f       	adc	r31, r29
    1116:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1118:	81 2f       	mov	r24, r17
    111a:	8c 0f       	add	r24, r28
    111c:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
		LCDsendChar(pcc);
    1120:	80 2f       	mov	r24, r16
    1122:	0e 94 f9 07 	call	0xff2	; 0xff2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	c8 30       	cpi	r28, 0x08	; 8
    112a:	d1 05       	cpc	r29, r1
    112c:	89 f7       	brne	.-30     	; 0x1110 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	08 95       	ret

0000113c <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	80 e6       	ldi	r24, 0x60	; 96
    1144:	9a ee       	ldi	r25, 0xEA	; 234
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    114a:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    114c:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    114e:	87 b1       	in	r24, 0x07	; 7
    1150:	80 6f       	ori	r24, 0xF0	; 240
    1152:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1154:	87 b1       	in	r24, 0x07	; 7
    1156:	87 60       	ori	r24, 0x07	; 7
    1158:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    115a:	80 e3       	ldi	r24, 0x30	; 48
    115c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    115e:	42 9a       	sbi	0x08, 2	; 8
    1160:	20 e4       	ldi	r18, 0x40	; 64
    1162:	3f e1       	ldi	r19, 0x1F	; 31
    1164:	f9 01       	movw	r30, r18
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    116a:	42 98       	cbi	0x08, 2	; 8
    116c:	f9 01       	movw	r30, r18
    116e:	31 97       	sbiw	r30, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1172:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1174:	42 9a       	sbi	0x08, 2	; 8
    1176:	c9 01       	movw	r24, r18
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	f1 f7       	brne	.-4      	; 0x1178 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    117c:	42 98       	cbi	0x08, 2	; 8
    117e:	c9 01       	movw	r24, r18
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1188:	42 9a       	sbi	0x08, 2	; 8
    118a:	c9 01       	movw	r24, r18
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1190:	42 98       	cbi	0x08, 2	; 8
    1192:	c9 01       	movw	r24, r18
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1198:	88 e2       	ldi	r24, 0x28	; 40
    119a:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    119e:	8c e0       	ldi	r24, 0x0C	; 12
    11a0:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
    11a4:	c6 e0       	ldi	r28, 0x06	; 6
    11a6:	d1 e0       	ldi	r29, 0x01	; 1
    11a8:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    11aa:	16 2f       	mov	r17, r22
    11ac:	1f 5f       	subi	r17, 0xFF	; 255
    11ae:	ce 01       	movw	r24, r28
    11b0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <LCDdefinechar>
    11b4:	28 96       	adiw	r28, 0x08	; 8
    11b6:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    11b8:	18 30       	cpi	r17, 0x08	; 8
    11ba:	b9 f7       	brne	.-18     	; 0x11aa <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	08 95       	ret

000011c4 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	08 2f       	mov	r16, r24
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    11ce:	8e e1       	ldi	r24, 0x1E	; 30
    11d0:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    11d4:	1f 5f       	subi	r17, 0xFF	; 255
    11d6:	10 17       	cp	r17, r16
    11d8:	d0 f3       	brcs	.-12     	; 0x11ce <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	08 2f       	mov	r16, r24
    11e6:	10 e0       	ldi	r17, 0x00	; 0
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    11ea:	88 e1       	ldi	r24, 0x18	; 24
    11ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    11f0:	1f 5f       	subi	r17, 0xFF	; 255
    11f2:	10 17       	cp	r17, r16
    11f4:	d0 f3       	brcs	.-12     	; 0x11ea <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	08 95       	ret

000011fc <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    11fc:	8e e0       	ldi	r24, 0x0E	; 14
    11fe:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    1202:	08 95       	ret

00001204 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1204:	8f e0       	ldi	r24, 0x0F	; 15
    1206:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    120a:	08 95       	ret

0000120c <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    120c:	8c e0       	ldi	r24, 0x0C	; 12
    120e:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    1212:	08 95       	ret

00001214 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    121a:	08 95       	ret

0000121c <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    121c:	8c e0       	ldi	r24, 0x0C	; 12
    121e:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
}
    1222:	08 95       	ret

00001224 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	08 2f       	mov	r16, r24
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    122e:	80 e1       	ldi	r24, 0x10	; 16
    1230:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1234:	1f 5f       	subi	r17, 0xFF	; 255
    1236:	10 17       	cp	r17, r16
    1238:	d0 f3       	brcs	.-12     	; 0x122e <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	08 95       	ret

00001240 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	08 2f       	mov	r16, r24
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    124a:	84 e1       	ldi	r24, 0x14	; 20
    124c:	0e 94 1a 08 	call	0x1034	; 0x1034 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1250:	1f 5f       	subi	r17, 0xFF	; 255
    1252:	10 17       	cp	r17, r16
    1254:	d0 f3       	brcs	.-12     	; 0x124a <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    126c:	96 e0       	ldi	r25, 0x06	; 6
    126e:	89 9f       	mul	r24, r25
    1270:	c0 01       	movw	r24, r0
    1272:	11 24       	eor	r1, r1
    1274:	24 2f       	mov	r18, r20
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	ac 01       	movw	r20, r24
    127a:	42 9f       	mul	r20, r18
    127c:	c0 01       	movw	r24, r0
    127e:	43 9f       	mul	r20, r19
    1280:	90 0d       	add	r25, r0
    1282:	52 9f       	mul	r21, r18
    1284:	90 0d       	add	r25, r0
    1286:	11 24       	eor	r1, r1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__divmodhi4>
    128e:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1290:	cb 01       	movw	r24, r22
    1292:	66 e0       	ldi	r22, 0x06	; 6
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__udivmodhi4>
    129a:	e8 2e       	mov	r14, r24
    129c:	ff 24       	eor	r15, r15
    129e:	00 e0       	ldi	r16, 0x00	; 0
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	12 c0       	rjmp	.+36     	; 0x12c8 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    12a4:	c8 01       	movw	r24, r16
    12a6:	05 96       	adiw	r24, 0x05	; 5
    12a8:	c8 17       	cp	r28, r24
    12aa:	d9 07       	cpc	r29, r25
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <LCDprogressBar+0x56>
    12ae:	85 e0       	ldi	r24, 0x05	; 5
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    12b2:	c0 17       	cp	r28, r16
    12b4:	d1 07       	cpc	r29, r17
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <LCDprogressBar+0x60>
    12b8:	8e 2d       	mov	r24, r14
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <LCDprogressBar+0x62>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    12be:	0e 94 f9 07 	call	0xff2	; 0xff2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    12c2:	f3 94       	inc	r15
    12c4:	0a 5f       	subi	r16, 0xFA	; 250
    12c6:	1f 4f       	sbci	r17, 0xFF	; 255
    12c8:	fd 14       	cp	r15, r13
    12ca:	60 f3       	brcs	.-40     	; 0x12a4 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	08 95       	ret

000012dc <__mulsf3>:
    12dc:	a0 e2       	ldi	r26, 0x20	; 32
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e4 e7       	ldi	r30, 0x74	; 116
    12e2:	f9 e0       	ldi	r31, 0x09	; 9
    12e4:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__prologue_saves__>
    12e8:	69 83       	std	Y+1, r22	; 0x01
    12ea:	7a 83       	std	Y+2, r23	; 0x02
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	2d 83       	std	Y+5, r18	; 0x05
    12f2:	3e 83       	std	Y+6, r19	; 0x06
    12f4:	4f 83       	std	Y+7, r20	; 0x07
    12f6:	58 87       	std	Y+8, r21	; 0x08
    12f8:	ce 01       	movw	r24, r28
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	be 01       	movw	r22, r28
    12fe:	67 5f       	subi	r22, 0xF7	; 247
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__unpack_f>
    1306:	ce 01       	movw	r24, r28
    1308:	05 96       	adiw	r24, 0x05	; 5
    130a:	be 01       	movw	r22, r28
    130c:	6f 5e       	subi	r22, 0xEF	; 239
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__unpack_f>
    1314:	99 85       	ldd	r25, Y+9	; 0x09
    1316:	92 30       	cpi	r25, 0x02	; 2
    1318:	88 f0       	brcs	.+34     	; 0x133c <__mulsf3+0x60>
    131a:	89 89       	ldd	r24, Y+17	; 0x11
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	c8 f0       	brcs	.+50     	; 0x1352 <__mulsf3+0x76>
    1320:	94 30       	cpi	r25, 0x04	; 4
    1322:	19 f4       	brne	.+6      	; 0x132a <__mulsf3+0x4e>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	51 f4       	brne	.+20     	; 0x133c <__mulsf3+0x60>
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <__mulsf3+0x56>
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	29 f4       	brne	.+10     	; 0x1338 <__mulsf3+0x5c>
    132e:	92 30       	cpi	r25, 0x02	; 2
    1330:	81 f4       	brne	.+32     	; 0x1352 <__mulsf3+0x76>
    1332:	88 e2       	ldi	r24, 0x28	; 40
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	c6 c0       	rjmp	.+396    	; 0x14c4 <__mulsf3+0x1e8>
    1338:	92 30       	cpi	r25, 0x02	; 2
    133a:	49 f4       	brne	.+18     	; 0x134e <__mulsf3+0x72>
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1340:	8a 89       	ldd	r24, Y+18	; 0x12
    1342:	98 13       	cpse	r25, r24
    1344:	21 e0       	ldi	r18, 0x01	; 1
    1346:	2a 87       	std	Y+10, r18	; 0x0a
    1348:	ce 01       	movw	r24, r28
    134a:	09 96       	adiw	r24, 0x09	; 9
    134c:	bb c0       	rjmp	.+374    	; 0x14c4 <__mulsf3+0x1e8>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	49 f4       	brne	.+18     	; 0x1364 <__mulsf3+0x88>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	8a 89       	ldd	r24, Y+18	; 0x12
    1358:	98 13       	cpse	r25, r24
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	2a 8b       	std	Y+18, r18	; 0x12
    135e:	ce 01       	movw	r24, r28
    1360:	41 96       	adiw	r24, 0x11	; 17
    1362:	b0 c0       	rjmp	.+352    	; 0x14c4 <__mulsf3+0x1e8>
    1364:	2d 84       	ldd	r2, Y+13	; 0x0d
    1366:	3e 84       	ldd	r3, Y+14	; 0x0e
    1368:	4f 84       	ldd	r4, Y+15	; 0x0f
    136a:	58 88       	ldd	r5, Y+16	; 0x10
    136c:	6d 88       	ldd	r6, Y+21	; 0x15
    136e:	7e 88       	ldd	r7, Y+22	; 0x16
    1370:	8f 88       	ldd	r8, Y+23	; 0x17
    1372:	98 8c       	ldd	r9, Y+24	; 0x18
    1374:	ee 24       	eor	r14, r14
    1376:	ff 24       	eor	r15, r15
    1378:	87 01       	movw	r16, r14
    137a:	aa 24       	eor	r10, r10
    137c:	bb 24       	eor	r11, r11
    137e:	65 01       	movw	r12, r10
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	c1 01       	movw	r24, r2
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	90 70       	andi	r25, 0x00	; 0
    1392:	89 2b       	or	r24, r25
    1394:	e9 f0       	breq	.+58     	; 0x13d0 <__mulsf3+0xf4>
    1396:	e6 0c       	add	r14, r6
    1398:	f7 1c       	adc	r15, r7
    139a:	08 1d       	adc	r16, r8
    139c:	19 1d       	adc	r17, r9
    139e:	9a 01       	movw	r18, r20
    13a0:	ab 01       	movw	r20, r22
    13a2:	2a 0d       	add	r18, r10
    13a4:	3b 1d       	adc	r19, r11
    13a6:	4c 1d       	adc	r20, r12
    13a8:	5d 1d       	adc	r21, r13
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e6 14       	cp	r14, r6
    13b4:	f7 04       	cpc	r15, r7
    13b6:	08 05       	cpc	r16, r8
    13b8:	19 05       	cpc	r17, r9
    13ba:	20 f4       	brcc	.+8      	; 0x13c4 <__mulsf3+0xe8>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ba 01       	movw	r22, r20
    13c6:	a9 01       	movw	r20, r18
    13c8:	48 0f       	add	r20, r24
    13ca:	59 1f       	adc	r21, r25
    13cc:	6a 1f       	adc	r22, r26
    13ce:	7b 1f       	adc	r23, r27
    13d0:	aa 0c       	add	r10, r10
    13d2:	bb 1c       	adc	r11, r11
    13d4:	cc 1c       	adc	r12, r12
    13d6:	dd 1c       	adc	r13, r13
    13d8:	97 fe       	sbrs	r9, 7
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <__mulsf3+0x110>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	a8 2a       	or	r10, r24
    13e6:	b9 2a       	or	r11, r25
    13e8:	ca 2a       	or	r12, r26
    13ea:	db 2a       	or	r13, r27
    13ec:	31 96       	adiw	r30, 0x01	; 1
    13ee:	e0 32       	cpi	r30, 0x20	; 32
    13f0:	f1 05       	cpc	r31, r1
    13f2:	49 f0       	breq	.+18     	; 0x1406 <__mulsf3+0x12a>
    13f4:	66 0c       	add	r6, r6
    13f6:	77 1c       	adc	r7, r7
    13f8:	88 1c       	adc	r8, r8
    13fa:	99 1c       	adc	r9, r9
    13fc:	56 94       	lsr	r5
    13fe:	47 94       	ror	r4
    1400:	37 94       	ror	r3
    1402:	27 94       	ror	r2
    1404:	c3 cf       	rjmp	.-122    	; 0x138c <__mulsf3+0xb0>
    1406:	fa 85       	ldd	r31, Y+10	; 0x0a
    1408:	ea 89       	ldd	r30, Y+18	; 0x12
    140a:	2b 89       	ldd	r18, Y+19	; 0x13
    140c:	3c 89       	ldd	r19, Y+20	; 0x14
    140e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1410:	9c 85       	ldd	r25, Y+12	; 0x0c
    1412:	28 0f       	add	r18, r24
    1414:	39 1f       	adc	r19, r25
    1416:	2e 5f       	subi	r18, 0xFE	; 254
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	17 c0       	rjmp	.+46     	; 0x144a <__mulsf3+0x16e>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	89 2b       	or	r24, r25
    1424:	61 f0       	breq	.+24     	; 0x143e <__mulsf3+0x162>
    1426:	16 95       	lsr	r17
    1428:	07 95       	ror	r16
    142a:	f7 94       	ror	r15
    142c:	e7 94       	ror	r14
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e8       	ldi	r27, 0x80	; 128
    1436:	e8 2a       	or	r14, r24
    1438:	f9 2a       	or	r15, r25
    143a:	0a 2b       	or	r16, r26
    143c:	1b 2b       	or	r17, r27
    143e:	76 95       	lsr	r23
    1440:	67 95       	ror	r22
    1442:	57 95       	ror	r21
    1444:	47 95       	ror	r20
    1446:	2f 5f       	subi	r18, 0xFF	; 255
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	77 fd       	sbrc	r23, 7
    144c:	e7 cf       	rjmp	.-50     	; 0x141c <__mulsf3+0x140>
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <__mulsf3+0x18c>
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	66 1f       	adc	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	17 fd       	sbrc	r17, 7
    145a:	41 60       	ori	r20, 0x01	; 1
    145c:	ee 0c       	add	r14, r14
    145e:	ff 1c       	adc	r15, r15
    1460:	00 1f       	adc	r16, r16
    1462:	11 1f       	adc	r17, r17
    1464:	21 50       	subi	r18, 0x01	; 1
    1466:	30 40       	sbci	r19, 0x00	; 0
    1468:	40 30       	cpi	r20, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	59 07       	cpc	r21, r25
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	69 07       	cpc	r22, r25
    1472:	90 e4       	ldi	r25, 0x40	; 64
    1474:	79 07       	cpc	r23, r25
    1476:	60 f3       	brcs	.-40     	; 0x1450 <__mulsf3+0x174>
    1478:	2b 8f       	std	Y+27, r18	; 0x1b
    147a:	3c 8f       	std	Y+28, r19	; 0x1c
    147c:	db 01       	movw	r26, r22
    147e:	ca 01       	movw	r24, r20
    1480:	8f 77       	andi	r24, 0x7F	; 127
    1482:	90 70       	andi	r25, 0x00	; 0
    1484:	a0 70       	andi	r26, 0x00	; 0
    1486:	b0 70       	andi	r27, 0x00	; 0
    1488:	80 34       	cpi	r24, 0x40	; 64
    148a:	91 05       	cpc	r25, r1
    148c:	a1 05       	cpc	r26, r1
    148e:	b1 05       	cpc	r27, r1
    1490:	61 f4       	brne	.+24     	; 0x14aa <__mulsf3+0x1ce>
    1492:	47 fd       	sbrc	r20, 7
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <__mulsf3+0x1ce>
    1496:	e1 14       	cp	r14, r1
    1498:	f1 04       	cpc	r15, r1
    149a:	01 05       	cpc	r16, r1
    149c:	11 05       	cpc	r17, r1
    149e:	29 f0       	breq	.+10     	; 0x14aa <__mulsf3+0x1ce>
    14a0:	40 5c       	subi	r20, 0xC0	; 192
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	6f 4f       	sbci	r22, 0xFF	; 255
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	40 78       	andi	r20, 0x80	; 128
    14aa:	1a 8e       	std	Y+26, r1	; 0x1a
    14ac:	fe 17       	cp	r31, r30
    14ae:	11 f0       	breq	.+4      	; 0x14b4 <__mulsf3+0x1d8>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	8a 8f       	std	Y+26, r24	; 0x1a
    14b4:	4d 8f       	std	Y+29, r20	; 0x1d
    14b6:	5e 8f       	std	Y+30, r21	; 0x1e
    14b8:	6f 8f       	std	Y+31, r22	; 0x1f
    14ba:	78 a3       	std	Y+32, r23	; 0x20
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	89 8f       	std	Y+25, r24	; 0x19
    14c0:	ce 01       	movw	r24, r28
    14c2:	49 96       	adiw	r24, 0x19	; 25
    14c4:	0e 94 30 0c 	call	0x1860	; 0x1860 <__pack_f>
    14c8:	a0 96       	adiw	r28, 0x20	; 32
    14ca:	e2 e1       	ldi	r30, 0x12	; 18
    14cc:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__epilogue_restores__>

000014d0 <__divsf3>:
    14d0:	a8 e1       	ldi	r26, 0x18	; 24
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e6       	ldi	r30, 0x6E	; 110
    14d6:	fa e0       	ldi	r31, 0x0A	; 10
    14d8:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__prologue_saves__+0x10>
    14dc:	69 83       	std	Y+1, r22	; 0x01
    14de:	7a 83       	std	Y+2, r23	; 0x02
    14e0:	8b 83       	std	Y+3, r24	; 0x03
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	2d 83       	std	Y+5, r18	; 0x05
    14e6:	3e 83       	std	Y+6, r19	; 0x06
    14e8:	4f 83       	std	Y+7, r20	; 0x07
    14ea:	58 87       	std	Y+8, r21	; 0x08
    14ec:	b9 e0       	ldi	r27, 0x09	; 9
    14ee:	eb 2e       	mov	r14, r27
    14f0:	f1 2c       	mov	r15, r1
    14f2:	ec 0e       	add	r14, r28
    14f4:	fd 1e       	adc	r15, r29
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	b7 01       	movw	r22, r14
    14fc:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__unpack_f>
    1500:	8e 01       	movw	r16, r28
    1502:	0f 5e       	subi	r16, 0xEF	; 239
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	ce 01       	movw	r24, r28
    1508:	05 96       	adiw	r24, 0x05	; 5
    150a:	b8 01       	movw	r22, r16
    150c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__unpack_f>
    1510:	29 85       	ldd	r18, Y+9	; 0x09
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	08 f4       	brcc	.+2      	; 0x1518 <__divsf3+0x48>
    1516:	7e c0       	rjmp	.+252    	; 0x1614 <__divsf3+0x144>
    1518:	39 89       	ldd	r19, Y+17	; 0x11
    151a:	32 30       	cpi	r19, 0x02	; 2
    151c:	10 f4       	brcc	.+4      	; 0x1522 <__divsf3+0x52>
    151e:	b8 01       	movw	r22, r16
    1520:	7c c0       	rjmp	.+248    	; 0x161a <__divsf3+0x14a>
    1522:	8a 85       	ldd	r24, Y+10	; 0x0a
    1524:	9a 89       	ldd	r25, Y+18	; 0x12
    1526:	89 27       	eor	r24, r25
    1528:	8a 87       	std	Y+10, r24	; 0x0a
    152a:	24 30       	cpi	r18, 0x04	; 4
    152c:	11 f0       	breq	.+4      	; 0x1532 <__divsf3+0x62>
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 f4       	brne	.+12     	; 0x153e <__divsf3+0x6e>
    1532:	23 17       	cp	r18, r19
    1534:	09 f0       	breq	.+2      	; 0x1538 <__divsf3+0x68>
    1536:	6e c0       	rjmp	.+220    	; 0x1614 <__divsf3+0x144>
    1538:	68 e2       	ldi	r22, 0x28	; 40
    153a:	71 e0       	ldi	r23, 0x01	; 1
    153c:	6e c0       	rjmp	.+220    	; 0x161a <__divsf3+0x14a>
    153e:	34 30       	cpi	r19, 0x04	; 4
    1540:	39 f4       	brne	.+14     	; 0x1550 <__divsf3+0x80>
    1542:	1d 86       	std	Y+13, r1	; 0x0d
    1544:	1e 86       	std	Y+14, r1	; 0x0e
    1546:	1f 86       	std	Y+15, r1	; 0x0f
    1548:	18 8a       	std	Y+16, r1	; 0x10
    154a:	1c 86       	std	Y+12, r1	; 0x0c
    154c:	1b 86       	std	Y+11, r1	; 0x0b
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__divsf3+0x88>
    1550:	32 30       	cpi	r19, 0x02	; 2
    1552:	21 f4       	brne	.+8      	; 0x155c <__divsf3+0x8c>
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	89 87       	std	Y+9, r24	; 0x09
    1558:	b7 01       	movw	r22, r14
    155a:	5f c0       	rjmp	.+190    	; 0x161a <__divsf3+0x14a>
    155c:	2b 85       	ldd	r18, Y+11	; 0x0b
    155e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	28 1b       	sub	r18, r24
    1566:	39 0b       	sbc	r19, r25
    1568:	3c 87       	std	Y+12, r19	; 0x0c
    156a:	2b 87       	std	Y+11, r18	; 0x0b
    156c:	ed 84       	ldd	r14, Y+13	; 0x0d
    156e:	fe 84       	ldd	r15, Y+14	; 0x0e
    1570:	0f 85       	ldd	r16, Y+15	; 0x0f
    1572:	18 89       	ldd	r17, Y+16	; 0x10
    1574:	ad 88       	ldd	r10, Y+21	; 0x15
    1576:	be 88       	ldd	r11, Y+22	; 0x16
    1578:	cf 88       	ldd	r12, Y+23	; 0x17
    157a:	d8 8c       	ldd	r13, Y+24	; 0x18
    157c:	ea 14       	cp	r14, r10
    157e:	fb 04       	cpc	r15, r11
    1580:	0c 05       	cpc	r16, r12
    1582:	1d 05       	cpc	r17, r13
    1584:	40 f4       	brcc	.+16     	; 0x1596 <__divsf3+0xc6>
    1586:	ee 0c       	add	r14, r14
    1588:	ff 1c       	adc	r15, r15
    158a:	00 1f       	adc	r16, r16
    158c:	11 1f       	adc	r17, r17
    158e:	21 50       	subi	r18, 0x01	; 1
    1590:	30 40       	sbci	r19, 0x00	; 0
    1592:	3c 87       	std	Y+12, r19	; 0x0c
    1594:	2b 87       	std	Y+11, r18	; 0x0b
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e4       	ldi	r27, 0x40	; 64
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	ea 14       	cp	r14, r10
    15ac:	fb 04       	cpc	r15, r11
    15ae:	0c 05       	cpc	r16, r12
    15b0:	1d 05       	cpc	r17, r13
    15b2:	40 f0       	brcs	.+16     	; 0x15c4 <__divsf3+0xf4>
    15b4:	28 2b       	or	r18, r24
    15b6:	39 2b       	or	r19, r25
    15b8:	4a 2b       	or	r20, r26
    15ba:	5b 2b       	or	r21, r27
    15bc:	ea 18       	sub	r14, r10
    15be:	fb 08       	sbc	r15, r11
    15c0:	0c 09       	sbc	r16, r12
    15c2:	1d 09       	sbc	r17, r13
    15c4:	b6 95       	lsr	r27
    15c6:	a7 95       	ror	r26
    15c8:	97 95       	ror	r25
    15ca:	87 95       	ror	r24
    15cc:	ee 0c       	add	r14, r14
    15ce:	ff 1c       	adc	r15, r15
    15d0:	00 1f       	adc	r16, r16
    15d2:	11 1f       	adc	r17, r17
    15d4:	6f 5f       	subi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	6f 31       	cpi	r22, 0x1F	; 31
    15da:	71 05       	cpc	r23, r1
    15dc:	31 f7       	brne	.-52     	; 0x15aa <__divsf3+0xda>
    15de:	da 01       	movw	r26, r20
    15e0:	c9 01       	movw	r24, r18
    15e2:	8f 77       	andi	r24, 0x7F	; 127
    15e4:	90 70       	andi	r25, 0x00	; 0
    15e6:	a0 70       	andi	r26, 0x00	; 0
    15e8:	b0 70       	andi	r27, 0x00	; 0
    15ea:	80 34       	cpi	r24, 0x40	; 64
    15ec:	91 05       	cpc	r25, r1
    15ee:	a1 05       	cpc	r26, r1
    15f0:	b1 05       	cpc	r27, r1
    15f2:	61 f4       	brne	.+24     	; 0x160c <__divsf3+0x13c>
    15f4:	27 fd       	sbrc	r18, 7
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <__divsf3+0x13c>
    15f8:	e1 14       	cp	r14, r1
    15fa:	f1 04       	cpc	r15, r1
    15fc:	01 05       	cpc	r16, r1
    15fe:	11 05       	cpc	r17, r1
    1600:	29 f0       	breq	.+10     	; 0x160c <__divsf3+0x13c>
    1602:	20 5c       	subi	r18, 0xC0	; 192
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	4f 4f       	sbci	r20, 0xFF	; 255
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	20 78       	andi	r18, 0x80	; 128
    160c:	2d 87       	std	Y+13, r18	; 0x0d
    160e:	3e 87       	std	Y+14, r19	; 0x0e
    1610:	4f 87       	std	Y+15, r20	; 0x0f
    1612:	58 8b       	std	Y+16, r21	; 0x10
    1614:	be 01       	movw	r22, r28
    1616:	67 5f       	subi	r22, 0xF7	; 247
    1618:	7f 4f       	sbci	r23, 0xFF	; 255
    161a:	cb 01       	movw	r24, r22
    161c:	0e 94 30 0c 	call	0x1860	; 0x1860 <__pack_f>
    1620:	68 96       	adiw	r28, 0x18	; 24
    1622:	ea e0       	ldi	r30, 0x0A	; 10
    1624:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__epilogue_restores__+0x10>

00001628 <__fixsfsi>:
    1628:	ac e0       	ldi	r26, 0x0C	; 12
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ea e1       	ldi	r30, 0x1A	; 26
    162e:	fb e0       	ldi	r31, 0x0B	; 11
    1630:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__prologue_saves__+0x20>
    1634:	69 83       	std	Y+1, r22	; 0x01
    1636:	7a 83       	std	Y+2, r23	; 0x02
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	be 01       	movw	r22, r28
    1642:	6b 5f       	subi	r22, 0xFB	; 251
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__unpack_f>
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	61 f1       	breq	.+88     	; 0x16a8 <__fixsfsi+0x80>
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	50 f1       	brcs	.+84     	; 0x16a8 <__fixsfsi+0x80>
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	21 f4       	brne	.+8      	; 0x1660 <__fixsfsi+0x38>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	88 23       	and	r24, r24
    165c:	51 f1       	breq	.+84     	; 0x16b2 <__fixsfsi+0x8a>
    165e:	2e c0       	rjmp	.+92     	; 0x16bc <__fixsfsi+0x94>
    1660:	2f 81       	ldd	r18, Y+7	; 0x07
    1662:	38 85       	ldd	r19, Y+8	; 0x08
    1664:	37 fd       	sbrc	r19, 7
    1666:	20 c0       	rjmp	.+64     	; 0x16a8 <__fixsfsi+0x80>
    1668:	6e 81       	ldd	r22, Y+6	; 0x06
    166a:	2f 31       	cpi	r18, 0x1F	; 31
    166c:	31 05       	cpc	r19, r1
    166e:	1c f0       	brlt	.+6      	; 0x1676 <__fixsfsi+0x4e>
    1670:	66 23       	and	r22, r22
    1672:	f9 f0       	breq	.+62     	; 0x16b2 <__fixsfsi+0x8a>
    1674:	23 c0       	rjmp	.+70     	; 0x16bc <__fixsfsi+0x94>
    1676:	8e e1       	ldi	r24, 0x1E	; 30
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	82 1b       	sub	r24, r18
    167c:	93 0b       	sbc	r25, r19
    167e:	29 85       	ldd	r18, Y+9	; 0x09
    1680:	3a 85       	ldd	r19, Y+10	; 0x0a
    1682:	4b 85       	ldd	r20, Y+11	; 0x0b
    1684:	5c 85       	ldd	r21, Y+12	; 0x0c
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <__fixsfsi+0x68>
    1688:	56 95       	lsr	r21
    168a:	47 95       	ror	r20
    168c:	37 95       	ror	r19
    168e:	27 95       	ror	r18
    1690:	8a 95       	dec	r24
    1692:	d2 f7       	brpl	.-12     	; 0x1688 <__fixsfsi+0x60>
    1694:	66 23       	and	r22, r22
    1696:	b1 f0       	breq	.+44     	; 0x16c4 <__fixsfsi+0x9c>
    1698:	50 95       	com	r21
    169a:	40 95       	com	r20
    169c:	30 95       	com	r19
    169e:	21 95       	neg	r18
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	4f 4f       	sbci	r20, 0xFF	; 255
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	0e c0       	rjmp	.+28     	; 0x16c4 <__fixsfsi+0x9c>
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <__fixsfsi+0x9c>
    16b2:	2f ef       	ldi	r18, 0xFF	; 255
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f ef       	ldi	r20, 0xFF	; 255
    16b8:	5f e7       	ldi	r21, 0x7F	; 127
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__fixsfsi+0x9c>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	50 e8       	ldi	r21, 0x80	; 128
    16c4:	b9 01       	movw	r22, r18
    16c6:	ca 01       	movw	r24, r20
    16c8:	2c 96       	adiw	r28, 0x0c	; 12
    16ca:	e2 e0       	ldi	r30, 0x02	; 2
    16cc:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__epilogue_restores__+0x20>

000016d0 <__floatunsisf>:
    16d0:	a8 e0       	ldi	r26, 0x08	; 8
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ee e6       	ldi	r30, 0x6E	; 110
    16d6:	fb e0       	ldi	r31, 0x0B	; 11
    16d8:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__prologue_saves__+0x10>
    16dc:	7b 01       	movw	r14, r22
    16de:	8c 01       	movw	r16, r24
    16e0:	61 15       	cp	r22, r1
    16e2:	71 05       	cpc	r23, r1
    16e4:	81 05       	cpc	r24, r1
    16e6:	91 05       	cpc	r25, r1
    16e8:	19 f4       	brne	.+6      	; 0x16f0 <__floatunsisf+0x20>
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	60 c0       	rjmp	.+192    	; 0x17b0 <__floatunsisf+0xe0>
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	8e e1       	ldi	r24, 0x1E	; 30
    16f6:	c8 2e       	mov	r12, r24
    16f8:	d1 2c       	mov	r13, r1
    16fa:	dc 82       	std	Y+4, r13	; 0x04
    16fc:	cb 82       	std	Y+3, r12	; 0x03
    16fe:	ed 82       	std	Y+5, r14	; 0x05
    1700:	fe 82       	std	Y+6, r15	; 0x06
    1702:	0f 83       	std	Y+7, r16	; 0x07
    1704:	18 87       	std	Y+8, r17	; 0x08
    1706:	c8 01       	movw	r24, r16
    1708:	b7 01       	movw	r22, r14
    170a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__clzsi2>
    170e:	fc 01       	movw	r30, r24
    1710:	31 97       	sbiw	r30, 0x01	; 1
    1712:	f7 ff       	sbrs	r31, 7
    1714:	3b c0       	rjmp	.+118    	; 0x178c <__floatunsisf+0xbc>
    1716:	22 27       	eor	r18, r18
    1718:	33 27       	eor	r19, r19
    171a:	2e 1b       	sub	r18, r30
    171c:	3f 0b       	sbc	r19, r31
    171e:	57 01       	movw	r10, r14
    1720:	68 01       	movw	r12, r16
    1722:	02 2e       	mov	r0, r18
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__floatunsisf+0x5e>
    1726:	d6 94       	lsr	r13
    1728:	c7 94       	ror	r12
    172a:	b7 94       	ror	r11
    172c:	a7 94       	ror	r10
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__floatunsisf+0x56>
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__floatunsisf+0x7c>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	aa 1f       	adc	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	2a 95       	dec	r18
    174e:	d2 f7       	brpl	.-12     	; 0x1744 <__floatunsisf+0x74>
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	a1 09       	sbc	r26, r1
    1754:	b1 09       	sbc	r27, r1
    1756:	8e 21       	and	r24, r14
    1758:	9f 21       	and	r25, r15
    175a:	a0 23       	and	r26, r16
    175c:	b1 23       	and	r27, r17
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	a1 05       	cpc	r26, r1
    1762:	b1 05       	cpc	r27, r1
    1764:	21 f0       	breq	.+8      	; 0x176e <__floatunsisf+0x9e>
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	4a 29       	or	r20, r10
    1770:	5b 29       	or	r21, r11
    1772:	6c 29       	or	r22, r12
    1774:	7d 29       	or	r23, r13
    1776:	4d 83       	std	Y+5, r20	; 0x05
    1778:	5e 83       	std	Y+6, r21	; 0x06
    177a:	6f 83       	std	Y+7, r22	; 0x07
    177c:	78 87       	std	Y+8, r23	; 0x08
    177e:	8e e1       	ldi	r24, 0x1E	; 30
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	8e 1b       	sub	r24, r30
    1784:	9f 0b       	sbc	r25, r31
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	8b 83       	std	Y+3, r24	; 0x03
    178a:	12 c0       	rjmp	.+36     	; 0x17b0 <__floatunsisf+0xe0>
    178c:	30 97       	sbiw	r30, 0x00	; 0
    178e:	81 f0       	breq	.+32     	; 0x17b0 <__floatunsisf+0xe0>
    1790:	0e 2e       	mov	r0, r30
    1792:	04 c0       	rjmp	.+8      	; 0x179c <__floatunsisf+0xcc>
    1794:	ee 0c       	add	r14, r14
    1796:	ff 1c       	adc	r15, r15
    1798:	00 1f       	adc	r16, r16
    179a:	11 1f       	adc	r17, r17
    179c:	0a 94       	dec	r0
    179e:	d2 f7       	brpl	.-12     	; 0x1794 <__floatunsisf+0xc4>
    17a0:	ed 82       	std	Y+5, r14	; 0x05
    17a2:	fe 82       	std	Y+6, r15	; 0x06
    17a4:	0f 83       	std	Y+7, r16	; 0x07
    17a6:	18 87       	std	Y+8, r17	; 0x08
    17a8:	ce 1a       	sub	r12, r30
    17aa:	df 0a       	sbc	r13, r31
    17ac:	dc 82       	std	Y+4, r13	; 0x04
    17ae:	cb 82       	std	Y+3, r12	; 0x03
    17b0:	1a 82       	std	Y+2, r1	; 0x02
    17b2:	ce 01       	movw	r24, r28
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	0e 94 30 0c 	call	0x1860	; 0x1860 <__pack_f>
    17ba:	28 96       	adiw	r28, 0x08	; 8
    17bc:	ea e0       	ldi	r30, 0x0A	; 10
    17be:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__epilogue_restores__+0x10>

000017c2 <__clzsi2>:
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	7b 01       	movw	r14, r22
    17cc:	8c 01       	movw	r16, r24
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	e8 16       	cp	r14, r24
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	f8 06       	cpc	r15, r24
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	08 07       	cpc	r16, r24
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	18 07       	cpc	r17, r24
    17de:	88 f4       	brcc	.+34     	; 0x1802 <__clzsi2+0x40>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	e8 16       	cp	r14, r24
    17e4:	f1 04       	cpc	r15, r1
    17e6:	01 05       	cpc	r16, r1
    17e8:	11 05       	cpc	r17, r1
    17ea:	31 f0       	breq	.+12     	; 0x17f8 <__clzsi2+0x36>
    17ec:	28 f0       	brcs	.+10     	; 0x17f8 <__clzsi2+0x36>
    17ee:	88 e0       	ldi	r24, 0x08	; 8
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	17 c0       	rjmp	.+46     	; 0x1826 <__clzsi2+0x64>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e0       	ldi	r26, 0x00	; 0
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	12 c0       	rjmp	.+36     	; 0x1826 <__clzsi2+0x64>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	e8 16       	cp	r14, r24
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	f8 06       	cpc	r15, r24
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	08 07       	cpc	r16, r24
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	18 07       	cpc	r17, r24
    1812:	28 f0       	brcs	.+10     	; 0x181e <__clzsi2+0x5c>
    1814:	88 e1       	ldi	r24, 0x18	; 24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e0       	ldi	r26, 0x00	; 0
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <__clzsi2+0x64>
    181e:	80 e1       	ldi	r24, 0x10	; 16
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	20 e2       	ldi	r18, 0x20	; 32
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	28 1b       	sub	r18, r24
    1830:	39 0b       	sbc	r19, r25
    1832:	4a 0b       	sbc	r20, r26
    1834:	5b 0b       	sbc	r21, r27
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <__clzsi2+0x7e>
    1838:	16 95       	lsr	r17
    183a:	07 95       	ror	r16
    183c:	f7 94       	ror	r15
    183e:	e7 94       	ror	r14
    1840:	8a 95       	dec	r24
    1842:	d2 f7       	brpl	.-12     	; 0x1838 <__clzsi2+0x76>
    1844:	f7 01       	movw	r30, r14
    1846:	e0 5d       	subi	r30, 0xD0	; 208
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	80 81       	ld	r24, Z
    184c:	28 1b       	sub	r18, r24
    184e:	31 09       	sbc	r19, r1
    1850:	41 09       	sbc	r20, r1
    1852:	51 09       	sbc	r21, r1
    1854:	c9 01       	movw	r24, r18
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	08 95       	ret

00001860 <__pack_f>:
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	fc 01       	movw	r30, r24
    186c:	e4 80       	ldd	r14, Z+4	; 0x04
    186e:	f5 80       	ldd	r15, Z+5	; 0x05
    1870:	06 81       	ldd	r16, Z+6	; 0x06
    1872:	17 81       	ldd	r17, Z+7	; 0x07
    1874:	d1 80       	ldd	r13, Z+1	; 0x01
    1876:	80 81       	ld	r24, Z
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	48 f4       	brcc	.+18     	; 0x188e <__pack_f+0x2e>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a0 e1       	ldi	r26, 0x10	; 16
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e8 2a       	or	r14, r24
    1886:	f9 2a       	or	r15, r25
    1888:	0a 2b       	or	r16, r26
    188a:	1b 2b       	or	r17, r27
    188c:	a5 c0       	rjmp	.+330    	; 0x19d8 <__pack_f+0x178>
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	09 f4       	brne	.+2      	; 0x1894 <__pack_f+0x34>
    1892:	9f c0       	rjmp	.+318    	; 0x19d2 <__pack_f+0x172>
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	21 f4       	brne	.+8      	; 0x18a0 <__pack_f+0x40>
    1898:	ee 24       	eor	r14, r14
    189a:	ff 24       	eor	r15, r15
    189c:	87 01       	movw	r16, r14
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <__pack_f+0x4a>
    18a0:	e1 14       	cp	r14, r1
    18a2:	f1 04       	cpc	r15, r1
    18a4:	01 05       	cpc	r16, r1
    18a6:	11 05       	cpc	r17, r1
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <__pack_f+0x50>
    18aa:	e0 e0       	ldi	r30, 0x00	; 0
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	96 c0       	rjmp	.+300    	; 0x19dc <__pack_f+0x17c>
    18b0:	62 81       	ldd	r22, Z+2	; 0x02
    18b2:	73 81       	ldd	r23, Z+3	; 0x03
    18b4:	9f ef       	ldi	r25, 0xFF	; 255
    18b6:	62 38       	cpi	r22, 0x82	; 130
    18b8:	79 07       	cpc	r23, r25
    18ba:	0c f0       	brlt	.+2      	; 0x18be <__pack_f+0x5e>
    18bc:	5b c0       	rjmp	.+182    	; 0x1974 <__pack_f+0x114>
    18be:	22 e8       	ldi	r18, 0x82	; 130
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	26 1b       	sub	r18, r22
    18c4:	37 0b       	sbc	r19, r23
    18c6:	2a 31       	cpi	r18, 0x1A	; 26
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f0       	brlt	.+10     	; 0x18d6 <__pack_f+0x76>
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	2a c0       	rjmp	.+84     	; 0x192a <__pack_f+0xca>
    18d6:	b8 01       	movw	r22, r16
    18d8:	a7 01       	movw	r20, r14
    18da:	02 2e       	mov	r0, r18
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <__pack_f+0x86>
    18de:	76 95       	lsr	r23
    18e0:	67 95       	ror	r22
    18e2:	57 95       	ror	r21
    18e4:	47 95       	ror	r20
    18e6:	0a 94       	dec	r0
    18e8:	d2 f7       	brpl	.-12     	; 0x18de <__pack_f+0x7e>
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e0       	ldi	r26, 0x00	; 0
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <__pack_f+0x9c>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	aa 1f       	adc	r26, r26
    18fa:	bb 1f       	adc	r27, r27
    18fc:	2a 95       	dec	r18
    18fe:	d2 f7       	brpl	.-12     	; 0x18f4 <__pack_f+0x94>
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	a1 09       	sbc	r26, r1
    1904:	b1 09       	sbc	r27, r1
    1906:	8e 21       	and	r24, r14
    1908:	9f 21       	and	r25, r15
    190a:	a0 23       	and	r26, r16
    190c:	b1 23       	and	r27, r17
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	a1 05       	cpc	r26, r1
    1912:	b1 05       	cpc	r27, r1
    1914:	21 f0       	breq	.+8      	; 0x191e <__pack_f+0xbe>
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 e0       	ldi	r26, 0x00	; 0
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	9a 01       	movw	r18, r20
    1920:	ab 01       	movw	r20, r22
    1922:	28 2b       	or	r18, r24
    1924:	39 2b       	or	r19, r25
    1926:	4a 2b       	or	r20, r26
    1928:	5b 2b       	or	r21, r27
    192a:	da 01       	movw	r26, r20
    192c:	c9 01       	movw	r24, r18
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	90 70       	andi	r25, 0x00	; 0
    1932:	a0 70       	andi	r26, 0x00	; 0
    1934:	b0 70       	andi	r27, 0x00	; 0
    1936:	80 34       	cpi	r24, 0x40	; 64
    1938:	91 05       	cpc	r25, r1
    193a:	a1 05       	cpc	r26, r1
    193c:	b1 05       	cpc	r27, r1
    193e:	39 f4       	brne	.+14     	; 0x194e <__pack_f+0xee>
    1940:	27 ff       	sbrs	r18, 7
    1942:	09 c0       	rjmp	.+18     	; 0x1956 <__pack_f+0xf6>
    1944:	20 5c       	subi	r18, 0xC0	; 192
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	4f 4f       	sbci	r20, 0xFF	; 255
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <__pack_f+0xf6>
    194e:	21 5c       	subi	r18, 0xC1	; 193
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	4f 4f       	sbci	r20, 0xFF	; 255
    1954:	5f 4f       	sbci	r21, 0xFF	; 255
    1956:	e0 e0       	ldi	r30, 0x00	; 0
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	20 30       	cpi	r18, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	3a 07       	cpc	r19, r26
    1960:	a0 e0       	ldi	r26, 0x00	; 0
    1962:	4a 07       	cpc	r20, r26
    1964:	a0 e4       	ldi	r26, 0x40	; 64
    1966:	5a 07       	cpc	r21, r26
    1968:	10 f0       	brcs	.+4      	; 0x196e <__pack_f+0x10e>
    196a:	e1 e0       	ldi	r30, 0x01	; 1
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	79 01       	movw	r14, r18
    1970:	8a 01       	movw	r16, r20
    1972:	27 c0       	rjmp	.+78     	; 0x19c2 <__pack_f+0x162>
    1974:	60 38       	cpi	r22, 0x80	; 128
    1976:	71 05       	cpc	r23, r1
    1978:	64 f5       	brge	.+88     	; 0x19d2 <__pack_f+0x172>
    197a:	fb 01       	movw	r30, r22
    197c:	e1 58       	subi	r30, 0x81	; 129
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	d8 01       	movw	r26, r16
    1982:	c7 01       	movw	r24, r14
    1984:	8f 77       	andi	r24, 0x7F	; 127
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	a0 70       	andi	r26, 0x00	; 0
    198a:	b0 70       	andi	r27, 0x00	; 0
    198c:	80 34       	cpi	r24, 0x40	; 64
    198e:	91 05       	cpc	r25, r1
    1990:	a1 05       	cpc	r26, r1
    1992:	b1 05       	cpc	r27, r1
    1994:	39 f4       	brne	.+14     	; 0x19a4 <__pack_f+0x144>
    1996:	e7 fe       	sbrs	r14, 7
    1998:	0d c0       	rjmp	.+26     	; 0x19b4 <__pack_f+0x154>
    199a:	80 e4       	ldi	r24, 0x40	; 64
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a0 e0       	ldi	r26, 0x00	; 0
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <__pack_f+0x14c>
    19a4:	8f e3       	ldi	r24, 0x3F	; 63
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a0 e0       	ldi	r26, 0x00	; 0
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e8 0e       	add	r14, r24
    19ae:	f9 1e       	adc	r15, r25
    19b0:	0a 1f       	adc	r16, r26
    19b2:	1b 1f       	adc	r17, r27
    19b4:	17 ff       	sbrs	r17, 7
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <__pack_f+0x162>
    19b8:	16 95       	lsr	r17
    19ba:	07 95       	ror	r16
    19bc:	f7 94       	ror	r15
    19be:	e7 94       	ror	r14
    19c0:	31 96       	adiw	r30, 0x01	; 1
    19c2:	87 e0       	ldi	r24, 0x07	; 7
    19c4:	16 95       	lsr	r17
    19c6:	07 95       	ror	r16
    19c8:	f7 94       	ror	r15
    19ca:	e7 94       	ror	r14
    19cc:	8a 95       	dec	r24
    19ce:	d1 f7       	brne	.-12     	; 0x19c4 <__pack_f+0x164>
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <__pack_f+0x17c>
    19d2:	ee 24       	eor	r14, r14
    19d4:	ff 24       	eor	r15, r15
    19d6:	87 01       	movw	r16, r14
    19d8:	ef ef       	ldi	r30, 0xFF	; 255
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	6e 2f       	mov	r22, r30
    19de:	67 95       	ror	r22
    19e0:	66 27       	eor	r22, r22
    19e2:	67 95       	ror	r22
    19e4:	90 2f       	mov	r25, r16
    19e6:	9f 77       	andi	r25, 0x7F	; 127
    19e8:	d7 94       	ror	r13
    19ea:	dd 24       	eor	r13, r13
    19ec:	d7 94       	ror	r13
    19ee:	8e 2f       	mov	r24, r30
    19f0:	86 95       	lsr	r24
    19f2:	49 2f       	mov	r20, r25
    19f4:	46 2b       	or	r20, r22
    19f6:	58 2f       	mov	r21, r24
    19f8:	5d 29       	or	r21, r13
    19fa:	b7 01       	movw	r22, r14
    19fc:	ca 01       	movw	r24, r20
    19fe:	1f 91       	pop	r17
    1a00:	0f 91       	pop	r16
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	df 90       	pop	r13
    1a08:	08 95       	ret

00001a0a <__unpack_f>:
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	db 01       	movw	r26, r22
    1a0e:	40 81       	ld	r20, Z
    1a10:	51 81       	ldd	r21, Z+1	; 0x01
    1a12:	22 81       	ldd	r18, Z+2	; 0x02
    1a14:	62 2f       	mov	r22, r18
    1a16:	6f 77       	andi	r22, 0x7F	; 127
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	22 1f       	adc	r18, r18
    1a1c:	22 27       	eor	r18, r18
    1a1e:	22 1f       	adc	r18, r18
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	89 2f       	mov	r24, r25
    1a24:	88 0f       	add	r24, r24
    1a26:	82 2b       	or	r24, r18
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	99 27       	eor	r25, r25
    1a30:	99 1f       	adc	r25, r25
    1a32:	11 96       	adiw	r26, 0x01	; 1
    1a34:	9c 93       	st	X, r25
    1a36:	11 97       	sbiw	r26, 0x01	; 1
    1a38:	21 15       	cp	r18, r1
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	a9 f5       	brne	.+106    	; 0x1aa8 <__unpack_f+0x9e>
    1a3e:	41 15       	cp	r20, r1
    1a40:	51 05       	cpc	r21, r1
    1a42:	61 05       	cpc	r22, r1
    1a44:	71 05       	cpc	r23, r1
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <__unpack_f+0x42>
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	37 c0       	rjmp	.+110    	; 0x1aba <__unpack_f+0xb0>
    1a4c:	82 e8       	ldi	r24, 0x82	; 130
    1a4e:	9f ef       	ldi	r25, 0xFF	; 255
    1a50:	13 96       	adiw	r26, 0x03	; 3
    1a52:	9c 93       	st	X, r25
    1a54:	8e 93       	st	-X, r24
    1a56:	12 97       	sbiw	r26, 0x02	; 2
    1a58:	9a 01       	movw	r18, r20
    1a5a:	ab 01       	movw	r20, r22
    1a5c:	67 e0       	ldi	r22, 0x07	; 7
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	44 1f       	adc	r20, r20
    1a64:	55 1f       	adc	r21, r21
    1a66:	6a 95       	dec	r22
    1a68:	d1 f7       	brne	.-12     	; 0x1a5e <__unpack_f+0x54>
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	8c 93       	st	X, r24
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <__unpack_f+0x80>
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	44 1f       	adc	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	12 96       	adiw	r26, 0x02	; 2
    1a7a:	8d 91       	ld	r24, X+
    1a7c:	9c 91       	ld	r25, X
    1a7e:	13 97       	sbiw	r26, 0x03	; 3
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	13 96       	adiw	r26, 0x03	; 3
    1a84:	9c 93       	st	X, r25
    1a86:	8e 93       	st	-X, r24
    1a88:	12 97       	sbiw	r26, 0x02	; 2
    1a8a:	20 30       	cpi	r18, 0x00	; 0
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	38 07       	cpc	r19, r24
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	48 07       	cpc	r20, r24
    1a94:	80 e4       	ldi	r24, 0x40	; 64
    1a96:	58 07       	cpc	r21, r24
    1a98:	58 f3       	brcs	.-42     	; 0x1a70 <__unpack_f+0x66>
    1a9a:	14 96       	adiw	r26, 0x04	; 4
    1a9c:	2d 93       	st	X+, r18
    1a9e:	3d 93       	st	X+, r19
    1aa0:	4d 93       	st	X+, r20
    1aa2:	5c 93       	st	X, r21
    1aa4:	17 97       	sbiw	r26, 0x07	; 7
    1aa6:	08 95       	ret
    1aa8:	2f 3f       	cpi	r18, 0xFF	; 255
    1aaa:	31 05       	cpc	r19, r1
    1aac:	79 f4       	brne	.+30     	; 0x1acc <__unpack_f+0xc2>
    1aae:	41 15       	cp	r20, r1
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	61 05       	cpc	r22, r1
    1ab4:	71 05       	cpc	r23, r1
    1ab6:	19 f4       	brne	.+6      	; 0x1abe <__unpack_f+0xb4>
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	8c 93       	st	X, r24
    1abc:	08 95       	ret
    1abe:	64 ff       	sbrs	r22, 4
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <__unpack_f+0xbe>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	8c 93       	st	X, r24
    1ac6:	12 c0       	rjmp	.+36     	; 0x1aec <__unpack_f+0xe2>
    1ac8:	1c 92       	st	X, r1
    1aca:	10 c0       	rjmp	.+32     	; 0x1aec <__unpack_f+0xe2>
    1acc:	2f 57       	subi	r18, 0x7F	; 127
    1ace:	30 40       	sbci	r19, 0x00	; 0
    1ad0:	13 96       	adiw	r26, 0x03	; 3
    1ad2:	3c 93       	st	X, r19
    1ad4:	2e 93       	st	-X, r18
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	8c 93       	st	X, r24
    1adc:	87 e0       	ldi	r24, 0x07	; 7
    1ade:	44 0f       	add	r20, r20
    1ae0:	55 1f       	adc	r21, r21
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	8a 95       	dec	r24
    1ae8:	d1 f7       	brne	.-12     	; 0x1ade <__unpack_f+0xd4>
    1aea:	70 64       	ori	r23, 0x40	; 64
    1aec:	14 96       	adiw	r26, 0x04	; 4
    1aee:	4d 93       	st	X+, r20
    1af0:	5d 93       	st	X+, r21
    1af2:	6d 93       	st	X+, r22
    1af4:	7c 93       	st	X, r23
    1af6:	17 97       	sbiw	r26, 0x07	; 7
    1af8:	08 95       	ret

00001afa <__udivmodhi4>:
    1afa:	aa 1b       	sub	r26, r26
    1afc:	bb 1b       	sub	r27, r27
    1afe:	51 e1       	ldi	r21, 0x11	; 17
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <__udivmodhi4_ep>

00001b02 <__udivmodhi4_loop>:
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	a6 17       	cp	r26, r22
    1b08:	b7 07       	cpc	r27, r23
    1b0a:	10 f0       	brcs	.+4      	; 0x1b10 <__udivmodhi4_ep>
    1b0c:	a6 1b       	sub	r26, r22
    1b0e:	b7 0b       	sbc	r27, r23

00001b10 <__udivmodhi4_ep>:
    1b10:	88 1f       	adc	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	5a 95       	dec	r21
    1b16:	a9 f7       	brne	.-22     	; 0x1b02 <__udivmodhi4_loop>
    1b18:	80 95       	com	r24
    1b1a:	90 95       	com	r25
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	08 95       	ret

00001b22 <__divmodhi4>:
    1b22:	97 fb       	bst	r25, 7
    1b24:	09 2e       	mov	r0, r25
    1b26:	07 26       	eor	r0, r23
    1b28:	0a d0       	rcall	.+20     	; 0x1b3e <__divmodhi4_neg1>
    1b2a:	77 fd       	sbrc	r23, 7
    1b2c:	04 d0       	rcall	.+8      	; 0x1b36 <__divmodhi4_neg2>
    1b2e:	e5 df       	rcall	.-54     	; 0x1afa <__udivmodhi4>
    1b30:	06 d0       	rcall	.+12     	; 0x1b3e <__divmodhi4_neg1>
    1b32:	00 20       	and	r0, r0
    1b34:	1a f4       	brpl	.+6      	; 0x1b3c <__divmodhi4_exit>

00001b36 <__divmodhi4_neg2>:
    1b36:	70 95       	com	r23
    1b38:	61 95       	neg	r22
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255

00001b3c <__divmodhi4_exit>:
    1b3c:	08 95       	ret

00001b3e <__divmodhi4_neg1>:
    1b3e:	f6 f7       	brtc	.-4      	; 0x1b3c <__divmodhi4_exit>
    1b40:	90 95       	com	r25
    1b42:	81 95       	neg	r24
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	08 95       	ret

00001b48 <__prologue_saves__>:
    1b48:	2f 92       	push	r2
    1b4a:	3f 92       	push	r3
    1b4c:	4f 92       	push	r4
    1b4e:	5f 92       	push	r5
    1b50:	6f 92       	push	r6
    1b52:	7f 92       	push	r7
    1b54:	8f 92       	push	r8
    1b56:	9f 92       	push	r9
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	ca 1b       	sub	r28, r26
    1b72:	db 0b       	sbc	r29, r27
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	09 94       	ijmp

00001b80 <__epilogue_restores__>:
    1b80:	2a 88       	ldd	r2, Y+18	; 0x12
    1b82:	39 88       	ldd	r3, Y+17	; 0x11
    1b84:	48 88       	ldd	r4, Y+16	; 0x10
    1b86:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b88:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b90:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b92:	b9 84       	ldd	r11, Y+9	; 0x09
    1b94:	c8 84       	ldd	r12, Y+8	; 0x08
    1b96:	df 80       	ldd	r13, Y+7	; 0x07
    1b98:	ee 80       	ldd	r14, Y+6	; 0x06
    1b9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9e:	1b 81       	ldd	r17, Y+3	; 0x03
    1ba0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ba2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba4:	ce 0f       	add	r28, r30
    1ba6:	d1 1d       	adc	r29, r1
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	ed 01       	movw	r28, r26
    1bb4:	08 95       	ret

00001bb6 <fputc>:
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	8c 01       	movw	r16, r24
    1bc0:	eb 01       	movw	r28, r22
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	81 ff       	sbrs	r24, 1
    1bc6:	1b c0       	rjmp	.+54     	; 0x1bfe <fputc+0x48>
    1bc8:	82 ff       	sbrs	r24, 2
    1bca:	0d c0       	rjmp	.+26     	; 0x1be6 <fputc+0x30>
    1bcc:	2e 81       	ldd	r18, Y+6	; 0x06
    1bce:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd4:	28 17       	cp	r18, r24
    1bd6:	39 07       	cpc	r19, r25
    1bd8:	64 f4       	brge	.+24     	; 0x1bf2 <fputc+0x3c>
    1bda:	e8 81       	ld	r30, Y
    1bdc:	f9 81       	ldd	r31, Y+1	; 0x01
    1bde:	01 93       	st	Z+, r16
    1be0:	f9 83       	std	Y+1, r31	; 0x01
    1be2:	e8 83       	st	Y, r30
    1be4:	06 c0       	rjmp	.+12     	; 0x1bf2 <fputc+0x3c>
    1be6:	e8 85       	ldd	r30, Y+8	; 0x08
    1be8:	f9 85       	ldd	r31, Y+9	; 0x09
    1bea:	80 2f       	mov	r24, r16
    1bec:	09 95       	icall
    1bee:	89 2b       	or	r24, r25
    1bf0:	31 f4       	brne	.+12     	; 0x1bfe <fputc+0x48>
    1bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	9f 83       	std	Y+7, r25	; 0x07
    1bfa:	8e 83       	std	Y+6, r24	; 0x06
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <fputc+0x4c>
    1bfe:	0f ef       	ldi	r16, 0xFF	; 255
    1c00:	1f ef       	ldi	r17, 0xFF	; 255
    1c02:	c8 01       	movw	r24, r16
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <fputs>:
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	7c 01       	movw	r14, r24
    1c1c:	8b 01       	movw	r16, r22
    1c1e:	db 01       	movw	r26, r22
    1c20:	13 96       	adiw	r26, 0x03	; 3
    1c22:	8c 91       	ld	r24, X
    1c24:	81 fd       	sbrc	r24, 1
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <fputs+0x20>
    1c28:	cf ef       	ldi	r28, 0xFF	; 255
    1c2a:	df ef       	ldi	r29, 0xFF	; 255
    1c2c:	13 c0       	rjmp	.+38     	; 0x1c54 <fputs+0x46>
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <fputs+0x3c>
    1c34:	d8 01       	movw	r26, r16
    1c36:	18 96       	adiw	r26, 0x08	; 8
    1c38:	ed 91       	ld	r30, X+
    1c3a:	fc 91       	ld	r31, X
    1c3c:	19 97       	sbiw	r26, 0x09	; 9
    1c3e:	b8 01       	movw	r22, r16
    1c40:	09 95       	icall
    1c42:	89 2b       	or	r24, r25
    1c44:	11 f0       	breq	.+4      	; 0x1c4a <fputs+0x3c>
    1c46:	cf ef       	ldi	r28, 0xFF	; 255
    1c48:	df ef       	ldi	r29, 0xFF	; 255
    1c4a:	f7 01       	movw	r30, r14
    1c4c:	81 91       	ld	r24, Z+
    1c4e:	7f 01       	movw	r14, r30
    1c50:	88 23       	and	r24, r24
    1c52:	81 f7       	brne	.-32     	; 0x1c34 <fputs+0x26>
    1c54:	ce 01       	movw	r24, r28
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	08 95       	ret

00001c64 <fscanf>:
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	9e 01       	movw	r18, r28
    1c6e:	27 5f       	subi	r18, 0xF7	; 247
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	a9 01       	movw	r20, r18
    1c7c:	0e 94 29 12 	call	0x2452	; 0x2452 <vfscanf>
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <sprintf>:
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	2e 97       	sbiw	r28, 0x0e	; 14
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	0d 89       	ldd	r16, Y+21	; 0x15
    1ca0:	1e 89       	ldd	r17, Y+22	; 0x16
    1ca2:	86 e0       	ldi	r24, 0x06	; 6
    1ca4:	8c 83       	std	Y+4, r24	; 0x04
    1ca6:	1a 83       	std	Y+2, r17	; 0x02
    1ca8:	09 83       	std	Y+1, r16	; 0x01
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	9f e7       	ldi	r25, 0x7F	; 127
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	27 5e       	subi	r18, 0xE7	; 231
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	ce 01       	movw	r24, r28
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	6f 89       	ldd	r22, Y+23	; 0x17
    1cbe:	78 8d       	ldd	r23, Y+24	; 0x18
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <vfprintf>
    1cc6:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc8:	38 85       	ldd	r19, Y+8	; 0x08
    1cca:	02 0f       	add	r16, r18
    1ccc:	13 1f       	adc	r17, r19
    1cce:	f8 01       	movw	r30, r16
    1cd0:	10 82       	st	Z, r1
    1cd2:	2e 96       	adiw	r28, 0x0e	; 14
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	08 95       	ret

00001ce8 <vfprintf>:
    1ce8:	2f 92       	push	r2
    1cea:	3f 92       	push	r3
    1cec:	4f 92       	push	r4
    1cee:	5f 92       	push	r5
    1cf0:	6f 92       	push	r6
    1cf2:	7f 92       	push	r7
    1cf4:	8f 92       	push	r8
    1cf6:	9f 92       	push	r9
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	2b 97       	sbiw	r28, 0x0b	; 11
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	3c 01       	movw	r6, r24
    1d1e:	2b 01       	movw	r4, r22
    1d20:	5a 01       	movw	r10, r20
    1d22:	fc 01       	movw	r30, r24
    1d24:	17 82       	std	Z+7, r1	; 0x07
    1d26:	16 82       	std	Z+6, r1	; 0x06
    1d28:	83 81       	ldd	r24, Z+3	; 0x03
    1d2a:	81 fd       	sbrc	r24, 1
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <vfprintf+0x4c>
    1d2e:	6f ef       	ldi	r22, 0xFF	; 255
    1d30:	7f ef       	ldi	r23, 0xFF	; 255
    1d32:	c6 c1       	rjmp	.+908    	; 0x20c0 <vfprintf+0x3d8>
    1d34:	9a e0       	ldi	r25, 0x0A	; 10
    1d36:	89 2e       	mov	r8, r25
    1d38:	1e 01       	movw	r2, r28
    1d3a:	08 94       	sec
    1d3c:	21 1c       	adc	r2, r1
    1d3e:	31 1c       	adc	r3, r1
    1d40:	f3 01       	movw	r30, r6
    1d42:	23 81       	ldd	r18, Z+3	; 0x03
    1d44:	f2 01       	movw	r30, r4
    1d46:	23 fd       	sbrc	r18, 3
    1d48:	85 91       	lpm	r24, Z+
    1d4a:	23 ff       	sbrs	r18, 3
    1d4c:	81 91       	ld	r24, Z+
    1d4e:	2f 01       	movw	r4, r30
    1d50:	88 23       	and	r24, r24
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <vfprintf+0x6e>
    1d54:	b2 c1       	rjmp	.+868    	; 0x20ba <vfprintf+0x3d2>
    1d56:	85 32       	cpi	r24, 0x25	; 37
    1d58:	39 f4       	brne	.+14     	; 0x1d68 <vfprintf+0x80>
    1d5a:	23 fd       	sbrc	r18, 3
    1d5c:	85 91       	lpm	r24, Z+
    1d5e:	23 ff       	sbrs	r18, 3
    1d60:	81 91       	ld	r24, Z+
    1d62:	2f 01       	movw	r4, r30
    1d64:	85 32       	cpi	r24, 0x25	; 37
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <vfprintf+0x8a>
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	b3 01       	movw	r22, r6
    1d6c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    1d70:	e7 cf       	rjmp	.-50     	; 0x1d40 <vfprintf+0x58>
    1d72:	98 2f       	mov	r25, r24
    1d74:	ff 24       	eor	r15, r15
    1d76:	ee 24       	eor	r14, r14
    1d78:	99 24       	eor	r9, r9
    1d7a:	ff e1       	ldi	r31, 0x1F	; 31
    1d7c:	ff 15       	cp	r31, r15
    1d7e:	d0 f0       	brcs	.+52     	; 0x1db4 <vfprintf+0xcc>
    1d80:	9b 32       	cpi	r25, 0x2B	; 43
    1d82:	69 f0       	breq	.+26     	; 0x1d9e <vfprintf+0xb6>
    1d84:	9c 32       	cpi	r25, 0x2C	; 44
    1d86:	28 f4       	brcc	.+10     	; 0x1d92 <vfprintf+0xaa>
    1d88:	90 32       	cpi	r25, 0x20	; 32
    1d8a:	59 f0       	breq	.+22     	; 0x1da2 <vfprintf+0xba>
    1d8c:	93 32       	cpi	r25, 0x23	; 35
    1d8e:	91 f4       	brne	.+36     	; 0x1db4 <vfprintf+0xcc>
    1d90:	0e c0       	rjmp	.+28     	; 0x1dae <vfprintf+0xc6>
    1d92:	9d 32       	cpi	r25, 0x2D	; 45
    1d94:	49 f0       	breq	.+18     	; 0x1da8 <vfprintf+0xc0>
    1d96:	90 33       	cpi	r25, 0x30	; 48
    1d98:	69 f4       	brne	.+26     	; 0x1db4 <vfprintf+0xcc>
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	24 c0       	rjmp	.+72     	; 0x1de6 <vfprintf+0xfe>
    1d9e:	52 e0       	ldi	r21, 0x02	; 2
    1da0:	f5 2a       	or	r15, r21
    1da2:	84 e0       	ldi	r24, 0x04	; 4
    1da4:	f8 2a       	or	r15, r24
    1da6:	28 c0       	rjmp	.+80     	; 0x1df8 <vfprintf+0x110>
    1da8:	98 e0       	ldi	r25, 0x08	; 8
    1daa:	f9 2a       	or	r15, r25
    1dac:	25 c0       	rjmp	.+74     	; 0x1df8 <vfprintf+0x110>
    1dae:	e0 e1       	ldi	r30, 0x10	; 16
    1db0:	fe 2a       	or	r15, r30
    1db2:	22 c0       	rjmp	.+68     	; 0x1df8 <vfprintf+0x110>
    1db4:	f7 fc       	sbrc	r15, 7
    1db6:	29 c0       	rjmp	.+82     	; 0x1e0a <vfprintf+0x122>
    1db8:	89 2f       	mov	r24, r25
    1dba:	80 53       	subi	r24, 0x30	; 48
    1dbc:	8a 30       	cpi	r24, 0x0A	; 10
    1dbe:	70 f4       	brcc	.+28     	; 0x1ddc <vfprintf+0xf4>
    1dc0:	f6 fe       	sbrs	r15, 6
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <vfprintf+0xe6>
    1dc4:	98 9c       	mul	r9, r8
    1dc6:	90 2c       	mov	r9, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	98 0e       	add	r9, r24
    1dcc:	15 c0       	rjmp	.+42     	; 0x1df8 <vfprintf+0x110>
    1dce:	e8 9c       	mul	r14, r8
    1dd0:	e0 2c       	mov	r14, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	e8 0e       	add	r14, r24
    1dd6:	f0 e2       	ldi	r31, 0x20	; 32
    1dd8:	ff 2a       	or	r15, r31
    1dda:	0e c0       	rjmp	.+28     	; 0x1df8 <vfprintf+0x110>
    1ddc:	9e 32       	cpi	r25, 0x2E	; 46
    1dde:	29 f4       	brne	.+10     	; 0x1dea <vfprintf+0x102>
    1de0:	f6 fc       	sbrc	r15, 6
    1de2:	6b c1       	rjmp	.+726    	; 0x20ba <vfprintf+0x3d2>
    1de4:	40 e4       	ldi	r20, 0x40	; 64
    1de6:	f4 2a       	or	r15, r20
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <vfprintf+0x110>
    1dea:	9c 36       	cpi	r25, 0x6C	; 108
    1dec:	19 f4       	brne	.+6      	; 0x1df4 <vfprintf+0x10c>
    1dee:	50 e8       	ldi	r21, 0x80	; 128
    1df0:	f5 2a       	or	r15, r21
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <vfprintf+0x110>
    1df4:	98 36       	cpi	r25, 0x68	; 104
    1df6:	49 f4       	brne	.+18     	; 0x1e0a <vfprintf+0x122>
    1df8:	f2 01       	movw	r30, r4
    1dfa:	23 fd       	sbrc	r18, 3
    1dfc:	95 91       	lpm	r25, Z+
    1dfe:	23 ff       	sbrs	r18, 3
    1e00:	91 91       	ld	r25, Z+
    1e02:	2f 01       	movw	r4, r30
    1e04:	99 23       	and	r25, r25
    1e06:	09 f0       	breq	.+2      	; 0x1e0a <vfprintf+0x122>
    1e08:	b8 cf       	rjmp	.-144    	; 0x1d7a <vfprintf+0x92>
    1e0a:	89 2f       	mov	r24, r25
    1e0c:	85 54       	subi	r24, 0x45	; 69
    1e0e:	83 30       	cpi	r24, 0x03	; 3
    1e10:	18 f0       	brcs	.+6      	; 0x1e18 <vfprintf+0x130>
    1e12:	80 52       	subi	r24, 0x20	; 32
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	38 f4       	brcc	.+14     	; 0x1e26 <vfprintf+0x13e>
    1e18:	44 e0       	ldi	r20, 0x04	; 4
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	a4 0e       	add	r10, r20
    1e1e:	b5 1e       	adc	r11, r21
    1e20:	5f e3       	ldi	r21, 0x3F	; 63
    1e22:	59 83       	std	Y+1, r21	; 0x01
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <vfprintf+0x15c>
    1e26:	93 36       	cpi	r25, 0x63	; 99
    1e28:	31 f0       	breq	.+12     	; 0x1e36 <vfprintf+0x14e>
    1e2a:	93 37       	cpi	r25, 0x73	; 115
    1e2c:	79 f0       	breq	.+30     	; 0x1e4c <vfprintf+0x164>
    1e2e:	93 35       	cpi	r25, 0x53	; 83
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <vfprintf+0x14c>
    1e32:	56 c0       	rjmp	.+172    	; 0x1ee0 <vfprintf+0x1f8>
    1e34:	20 c0       	rjmp	.+64     	; 0x1e76 <vfprintf+0x18e>
    1e36:	f5 01       	movw	r30, r10
    1e38:	80 81       	ld	r24, Z
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	42 e0       	ldi	r20, 0x02	; 2
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	a4 0e       	add	r10, r20
    1e42:	b5 1e       	adc	r11, r21
    1e44:	61 01       	movw	r12, r2
    1e46:	01 e0       	ldi	r16, 0x01	; 1
    1e48:	10 e0       	ldi	r17, 0x00	; 0
    1e4a:	12 c0       	rjmp	.+36     	; 0x1e70 <vfprintf+0x188>
    1e4c:	f5 01       	movw	r30, r10
    1e4e:	c0 80       	ld	r12, Z
    1e50:	d1 80       	ldd	r13, Z+1	; 0x01
    1e52:	f6 fc       	sbrc	r15, 6
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <vfprintf+0x174>
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	7f ef       	ldi	r23, 0xFF	; 255
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <vfprintf+0x178>
    1e5c:	69 2d       	mov	r22, r9
    1e5e:	70 e0       	ldi	r23, 0x00	; 0
    1e60:	42 e0       	ldi	r20, 0x02	; 2
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	a4 0e       	add	r10, r20
    1e66:	b5 1e       	adc	r11, r21
    1e68:	c6 01       	movw	r24, r12
    1e6a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <strnlen>
    1e6e:	8c 01       	movw	r16, r24
    1e70:	5f e7       	ldi	r21, 0x7F	; 127
    1e72:	f5 22       	and	r15, r21
    1e74:	14 c0       	rjmp	.+40     	; 0x1e9e <vfprintf+0x1b6>
    1e76:	f5 01       	movw	r30, r10
    1e78:	c0 80       	ld	r12, Z
    1e7a:	d1 80       	ldd	r13, Z+1	; 0x01
    1e7c:	f6 fc       	sbrc	r15, 6
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <vfprintf+0x19e>
    1e80:	6f ef       	ldi	r22, 0xFF	; 255
    1e82:	7f ef       	ldi	r23, 0xFF	; 255
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0x1a2>
    1e86:	69 2d       	mov	r22, r9
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	42 e0       	ldi	r20, 0x02	; 2
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	a4 0e       	add	r10, r20
    1e90:	b5 1e       	adc	r11, r21
    1e92:	c6 01       	movw	r24, r12
    1e94:	0e 94 5f 13 	call	0x26be	; 0x26be <strnlen_P>
    1e98:	8c 01       	movw	r16, r24
    1e9a:	50 e8       	ldi	r21, 0x80	; 128
    1e9c:	f5 2a       	or	r15, r21
    1e9e:	f3 fe       	sbrs	r15, 3
    1ea0:	07 c0       	rjmp	.+14     	; 0x1eb0 <vfprintf+0x1c8>
    1ea2:	1a c0       	rjmp	.+52     	; 0x1ed8 <vfprintf+0x1f0>
    1ea4:	80 e2       	ldi	r24, 0x20	; 32
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	b3 01       	movw	r22, r6
    1eaa:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    1eae:	ea 94       	dec	r14
    1eb0:	8e 2d       	mov	r24, r14
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	08 17       	cp	r16, r24
    1eb6:	19 07       	cpc	r17, r25
    1eb8:	a8 f3       	brcs	.-22     	; 0x1ea4 <vfprintf+0x1bc>
    1eba:	0e c0       	rjmp	.+28     	; 0x1ed8 <vfprintf+0x1f0>
    1ebc:	f6 01       	movw	r30, r12
    1ebe:	f7 fc       	sbrc	r15, 7
    1ec0:	85 91       	lpm	r24, Z+
    1ec2:	f7 fe       	sbrs	r15, 7
    1ec4:	81 91       	ld	r24, Z+
    1ec6:	6f 01       	movw	r12, r30
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b3 01       	movw	r22, r6
    1ecc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    1ed0:	e1 10       	cpse	r14, r1
    1ed2:	ea 94       	dec	r14
    1ed4:	01 50       	subi	r16, 0x01	; 1
    1ed6:	10 40       	sbci	r17, 0x00	; 0
    1ed8:	01 15       	cp	r16, r1
    1eda:	11 05       	cpc	r17, r1
    1edc:	79 f7       	brne	.-34     	; 0x1ebc <vfprintf+0x1d4>
    1ede:	ea c0       	rjmp	.+468    	; 0x20b4 <vfprintf+0x3cc>
    1ee0:	94 36       	cpi	r25, 0x64	; 100
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <vfprintf+0x200>
    1ee4:	99 36       	cpi	r25, 0x69	; 105
    1ee6:	69 f5       	brne	.+90     	; 0x1f42 <vfprintf+0x25a>
    1ee8:	f7 fe       	sbrs	r15, 7
    1eea:	08 c0       	rjmp	.+16     	; 0x1efc <vfprintf+0x214>
    1eec:	f5 01       	movw	r30, r10
    1eee:	20 81       	ld	r18, Z
    1ef0:	31 81       	ldd	r19, Z+1	; 0x01
    1ef2:	42 81       	ldd	r20, Z+2	; 0x02
    1ef4:	53 81       	ldd	r21, Z+3	; 0x03
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <vfprintf+0x228>
    1efc:	f5 01       	movw	r30, r10
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	9c 01       	movw	r18, r24
    1f04:	44 27       	eor	r20, r20
    1f06:	37 fd       	sbrc	r19, 7
    1f08:	40 95       	com	r20
    1f0a:	54 2f       	mov	r21, r20
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a8 0e       	add	r10, r24
    1f12:	b9 1e       	adc	r11, r25
    1f14:	9f e6       	ldi	r25, 0x6F	; 111
    1f16:	f9 22       	and	r15, r25
    1f18:	57 ff       	sbrs	r21, 7
    1f1a:	09 c0       	rjmp	.+18     	; 0x1f2e <vfprintf+0x246>
    1f1c:	50 95       	com	r21
    1f1e:	40 95       	com	r20
    1f20:	30 95       	com	r19
    1f22:	21 95       	neg	r18
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	4f 4f       	sbci	r20, 0xFF	; 255
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	e0 e8       	ldi	r30, 0x80	; 128
    1f2c:	fe 2a       	or	r15, r30
    1f2e:	ca 01       	movw	r24, r20
    1f30:	b9 01       	movw	r22, r18
    1f32:	a1 01       	movw	r20, r2
    1f34:	2a e0       	ldi	r18, 0x0A	; 10
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__ultoa_invert>
    1f3c:	d8 2e       	mov	r13, r24
    1f3e:	d2 18       	sub	r13, r2
    1f40:	40 c0       	rjmp	.+128    	; 0x1fc2 <vfprintf+0x2da>
    1f42:	95 37       	cpi	r25, 0x75	; 117
    1f44:	29 f4       	brne	.+10     	; 0x1f50 <vfprintf+0x268>
    1f46:	1f 2d       	mov	r17, r15
    1f48:	1f 7e       	andi	r17, 0xEF	; 239
    1f4a:	2a e0       	ldi	r18, 0x0A	; 10
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	1d c0       	rjmp	.+58     	; 0x1f8a <vfprintf+0x2a2>
    1f50:	1f 2d       	mov	r17, r15
    1f52:	19 7f       	andi	r17, 0xF9	; 249
    1f54:	9f 36       	cpi	r25, 0x6F	; 111
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <vfprintf+0x288>
    1f58:	90 37       	cpi	r25, 0x70	; 112
    1f5a:	20 f4       	brcc	.+8      	; 0x1f64 <vfprintf+0x27c>
    1f5c:	98 35       	cpi	r25, 0x58	; 88
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <vfprintf+0x27a>
    1f60:	ac c0       	rjmp	.+344    	; 0x20ba <vfprintf+0x3d2>
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <vfprintf+0x29a>
    1f64:	90 37       	cpi	r25, 0x70	; 112
    1f66:	39 f0       	breq	.+14     	; 0x1f76 <vfprintf+0x28e>
    1f68:	98 37       	cpi	r25, 0x78	; 120
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <vfprintf+0x286>
    1f6c:	a6 c0       	rjmp	.+332    	; 0x20ba <vfprintf+0x3d2>
    1f6e:	04 c0       	rjmp	.+8      	; 0x1f78 <vfprintf+0x290>
    1f70:	28 e0       	ldi	r18, 0x08	; 8
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	0a c0       	rjmp	.+20     	; 0x1f8a <vfprintf+0x2a2>
    1f76:	10 61       	ori	r17, 0x10	; 16
    1f78:	14 fd       	sbrc	r17, 4
    1f7a:	14 60       	ori	r17, 0x04	; 4
    1f7c:	20 e1       	ldi	r18, 0x10	; 16
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <vfprintf+0x2a2>
    1f82:	14 fd       	sbrc	r17, 4
    1f84:	16 60       	ori	r17, 0x06	; 6
    1f86:	20 e1       	ldi	r18, 0x10	; 16
    1f88:	32 e0       	ldi	r19, 0x02	; 2
    1f8a:	17 ff       	sbrs	r17, 7
    1f8c:	08 c0       	rjmp	.+16     	; 0x1f9e <vfprintf+0x2b6>
    1f8e:	f5 01       	movw	r30, r10
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	44 e0       	ldi	r20, 0x04	; 4
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <vfprintf+0x2c6>
    1f9e:	f5 01       	movw	r30, r10
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	42 e0       	ldi	r20, 0x02	; 2
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	a4 0e       	add	r10, r20
    1fb0:	b5 1e       	adc	r11, r21
    1fb2:	a1 01       	movw	r20, r2
    1fb4:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <__ultoa_invert>
    1fb8:	d8 2e       	mov	r13, r24
    1fba:	d2 18       	sub	r13, r2
    1fbc:	8f e7       	ldi	r24, 0x7F	; 127
    1fbe:	f8 2e       	mov	r15, r24
    1fc0:	f1 22       	and	r15, r17
    1fc2:	f6 fe       	sbrs	r15, 6
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <vfprintf+0x2f4>
    1fc6:	5e ef       	ldi	r21, 0xFE	; 254
    1fc8:	f5 22       	and	r15, r21
    1fca:	d9 14       	cp	r13, r9
    1fcc:	38 f4       	brcc	.+14     	; 0x1fdc <vfprintf+0x2f4>
    1fce:	f4 fe       	sbrs	r15, 4
    1fd0:	07 c0       	rjmp	.+14     	; 0x1fe0 <vfprintf+0x2f8>
    1fd2:	f2 fc       	sbrc	r15, 2
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <vfprintf+0x2f8>
    1fd6:	8f ee       	ldi	r24, 0xEF	; 239
    1fd8:	f8 22       	and	r15, r24
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0x2f8>
    1fdc:	1d 2d       	mov	r17, r13
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <vfprintf+0x2fa>
    1fe0:	19 2d       	mov	r17, r9
    1fe2:	f4 fe       	sbrs	r15, 4
    1fe4:	0d c0       	rjmp	.+26     	; 0x2000 <vfprintf+0x318>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ed 0d       	add	r30, r13
    1fea:	f1 1d       	adc	r31, r1
    1fec:	80 81       	ld	r24, Z
    1fee:	80 33       	cpi	r24, 0x30	; 48
    1ff0:	19 f4       	brne	.+6      	; 0x1ff8 <vfprintf+0x310>
    1ff2:	99 ee       	ldi	r25, 0xE9	; 233
    1ff4:	f9 22       	and	r15, r25
    1ff6:	08 c0       	rjmp	.+16     	; 0x2008 <vfprintf+0x320>
    1ff8:	1f 5f       	subi	r17, 0xFF	; 255
    1ffa:	f2 fe       	sbrs	r15, 2
    1ffc:	05 c0       	rjmp	.+10     	; 0x2008 <vfprintf+0x320>
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <vfprintf+0x31e>
    2000:	8f 2d       	mov	r24, r15
    2002:	86 78       	andi	r24, 0x86	; 134
    2004:	09 f0       	breq	.+2      	; 0x2008 <vfprintf+0x320>
    2006:	1f 5f       	subi	r17, 0xFF	; 255
    2008:	0f 2d       	mov	r16, r15
    200a:	f3 fc       	sbrc	r15, 3
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <vfprintf+0x34e>
    200e:	f0 fe       	sbrs	r15, 0
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <vfprintf+0x348>
    2012:	1e 15       	cp	r17, r14
    2014:	10 f0       	brcs	.+4      	; 0x201a <vfprintf+0x332>
    2016:	9d 2c       	mov	r9, r13
    2018:	0b c0       	rjmp	.+22     	; 0x2030 <vfprintf+0x348>
    201a:	9d 2c       	mov	r9, r13
    201c:	9e 0c       	add	r9, r14
    201e:	91 1a       	sub	r9, r17
    2020:	1e 2d       	mov	r17, r14
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <vfprintf+0x348>
    2024:	80 e2       	ldi	r24, 0x20	; 32
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	b3 01       	movw	r22, r6
    202a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    202e:	1f 5f       	subi	r17, 0xFF	; 255
    2030:	1e 15       	cp	r17, r14
    2032:	c0 f3       	brcs	.-16     	; 0x2024 <vfprintf+0x33c>
    2034:	04 c0       	rjmp	.+8      	; 0x203e <vfprintf+0x356>
    2036:	1e 15       	cp	r17, r14
    2038:	10 f4       	brcc	.+4      	; 0x203e <vfprintf+0x356>
    203a:	e1 1a       	sub	r14, r17
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <vfprintf+0x358>
    203e:	ee 24       	eor	r14, r14
    2040:	04 ff       	sbrs	r16, 4
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <vfprintf+0x37a>
    2044:	80 e3       	ldi	r24, 0x30	; 48
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	b3 01       	movw	r22, r6
    204a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    204e:	02 ff       	sbrs	r16, 2
    2050:	1d c0       	rjmp	.+58     	; 0x208c <vfprintf+0x3a4>
    2052:	01 fd       	sbrc	r16, 1
    2054:	03 c0       	rjmp	.+6      	; 0x205c <vfprintf+0x374>
    2056:	88 e7       	ldi	r24, 0x78	; 120
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <vfprintf+0x390>
    205c:	88 e5       	ldi	r24, 0x58	; 88
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0b c0       	rjmp	.+22     	; 0x2078 <vfprintf+0x390>
    2062:	80 2f       	mov	r24, r16
    2064:	86 78       	andi	r24, 0x86	; 134
    2066:	91 f0       	breq	.+36     	; 0x208c <vfprintf+0x3a4>
    2068:	01 ff       	sbrs	r16, 1
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <vfprintf+0x388>
    206c:	8b e2       	ldi	r24, 0x2B	; 43
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <vfprintf+0x38a>
    2070:	80 e2       	ldi	r24, 0x20	; 32
    2072:	f7 fc       	sbrc	r15, 7
    2074:	8d e2       	ldi	r24, 0x2D	; 45
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	b3 01       	movw	r22, r6
    207a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    207e:	06 c0       	rjmp	.+12     	; 0x208c <vfprintf+0x3a4>
    2080:	80 e3       	ldi	r24, 0x30	; 48
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	b3 01       	movw	r22, r6
    2086:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    208a:	9a 94       	dec	r9
    208c:	d9 14       	cp	r13, r9
    208e:	c0 f3       	brcs	.-16     	; 0x2080 <vfprintf+0x398>
    2090:	da 94       	dec	r13
    2092:	f1 01       	movw	r30, r2
    2094:	ed 0d       	add	r30, r13
    2096:	f1 1d       	adc	r31, r1
    2098:	80 81       	ld	r24, Z
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	b3 01       	movw	r22, r6
    209e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    20a2:	dd 20       	and	r13, r13
    20a4:	a9 f7       	brne	.-22     	; 0x2090 <vfprintf+0x3a8>
    20a6:	06 c0       	rjmp	.+12     	; 0x20b4 <vfprintf+0x3cc>
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	b3 01       	movw	r22, r6
    20ae:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <fputc>
    20b2:	ea 94       	dec	r14
    20b4:	ee 20       	and	r14, r14
    20b6:	c1 f7       	brne	.-16     	; 0x20a8 <vfprintf+0x3c0>
    20b8:	43 ce       	rjmp	.-890    	; 0x1d40 <vfprintf+0x58>
    20ba:	f3 01       	movw	r30, r6
    20bc:	66 81       	ldd	r22, Z+6	; 0x06
    20be:	77 81       	ldd	r23, Z+7	; 0x07
    20c0:	cb 01       	movw	r24, r22
    20c2:	2b 96       	adiw	r28, 0x0b	; 11
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	df 90       	pop	r13
    20dc:	cf 90       	pop	r12
    20de:	bf 90       	pop	r11
    20e0:	af 90       	pop	r10
    20e2:	9f 90       	pop	r9
    20e4:	8f 90       	pop	r8
    20e6:	7f 90       	pop	r7
    20e8:	6f 90       	pop	r6
    20ea:	5f 90       	pop	r5
    20ec:	4f 90       	pop	r4
    20ee:	3f 90       	pop	r3
    20f0:	2f 90       	pop	r2
    20f2:	08 95       	ret

000020f4 <putval>:
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 fd       	sbrc	r18, 0
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <putval+0x16>
    20fa:	23 fd       	sbrc	r18, 3
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <putval+0x14>
    20fe:	22 ff       	sbrs	r18, 2
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <putval+0x12>
    2102:	73 83       	std	Z+3, r23	; 0x03
    2104:	62 83       	std	Z+2, r22	; 0x02
    2106:	51 83       	std	Z+1, r21	; 0x01
    2108:	40 83       	st	Z, r20
    210a:	08 95       	ret

0000210c <mulacc>:
    210c:	ef 92       	push	r14
    210e:	ff 92       	push	r15
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	44 ff       	sbrs	r20, 4
    2116:	02 c0       	rjmp	.+4      	; 0x211c <mulacc+0x10>
    2118:	33 e0       	ldi	r19, 0x03	; 3
    211a:	11 c0       	rjmp	.+34     	; 0x213e <mulacc+0x32>
    211c:	46 ff       	sbrs	r20, 6
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <mulacc+0x18>
    2120:	34 e0       	ldi	r19, 0x04	; 4
    2122:	0d c0       	rjmp	.+26     	; 0x213e <mulacc+0x32>
    2124:	db 01       	movw	r26, r22
    2126:	fc 01       	movw	r30, r24
    2128:	aa 0f       	add	r26, r26
    212a:	bb 1f       	adc	r27, r27
    212c:	ee 1f       	adc	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	10 94       	com	r1
    2132:	d1 f7       	brne	.-12     	; 0x2128 <mulacc+0x1c>
    2134:	6a 0f       	add	r22, r26
    2136:	7b 1f       	adc	r23, r27
    2138:	8e 1f       	adc	r24, r30
    213a:	9f 1f       	adc	r25, r31
    213c:	31 e0       	ldi	r19, 0x01	; 1
    213e:	66 0f       	add	r22, r22
    2140:	77 1f       	adc	r23, r23
    2142:	88 1f       	adc	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	31 50       	subi	r19, 0x01	; 1
    2148:	d1 f7       	brne	.-12     	; 0x213e <mulacc+0x32>
    214a:	7b 01       	movw	r14, r22
    214c:	8c 01       	movw	r16, r24
    214e:	e2 0e       	add	r14, r18
    2150:	f1 1c       	adc	r15, r1
    2152:	01 1d       	adc	r16, r1
    2154:	11 1d       	adc	r17, r1
    2156:	a8 01       	movw	r20, r16
    2158:	97 01       	movw	r18, r14
    215a:	b7 01       	movw	r22, r14
    215c:	ca 01       	movw	r24, r20
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	08 95       	ret

00002168 <skip_spaces>:
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	8c 01       	movw	r16, r24
    2172:	c8 01       	movw	r24, r16
    2174:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    2178:	ec 01       	movw	r28, r24
    217a:	97 fd       	sbrc	r25, 7
    217c:	08 c0       	rjmp	.+16     	; 0x218e <skip_spaces+0x26>
    217e:	0e 94 4c 13 	call	0x2698	; 0x2698 <isspace>
    2182:	89 2b       	or	r24, r25
    2184:	b1 f7       	brne	.-20     	; 0x2172 <skip_spaces+0xa>
    2186:	ce 01       	movw	r24, r28
    2188:	b8 01       	movw	r22, r16
    218a:	0e 94 b7 13 	call	0x276e	; 0x276e <ungetc>
    218e:	ce 01       	movw	r24, r28
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	0f 91       	pop	r16
    2198:	08 95       	ret

0000219a <conv_int>:
    219a:	af 92       	push	r10
    219c:	bf 92       	push	r11
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	ec 01       	movw	r28, r24
    21b0:	c6 2e       	mov	r12, r22
    21b2:	5a 01       	movw	r10, r20
    21b4:	12 2f       	mov	r17, r18
    21b6:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    21ba:	ac 01       	movw	r20, r24
    21bc:	8b 32       	cpi	r24, 0x2B	; 43
    21be:	19 f0       	breq	.+6      	; 0x21c6 <conv_int+0x2c>
    21c0:	8d 32       	cpi	r24, 0x2D	; 45
    21c2:	51 f4       	brne	.+20     	; 0x21d8 <conv_int+0x3e>
    21c4:	10 68       	ori	r17, 0x80	; 128
    21c6:	ca 94       	dec	r12
    21c8:	09 f4       	brne	.+2      	; 0x21cc <conv_int+0x32>
    21ca:	6d c0       	rjmp	.+218    	; 0x22a6 <conv_int+0x10c>
    21cc:	ce 01       	movw	r24, r28
    21ce:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    21d2:	ac 01       	movw	r20, r24
    21d4:	97 fd       	sbrc	r25, 7
    21d6:	67 c0       	rjmp	.+206    	; 0x22a6 <conv_int+0x10c>
    21d8:	6d ef       	ldi	r22, 0xFD	; 253
    21da:	d6 2e       	mov	r13, r22
    21dc:	d1 22       	and	r13, r17
    21de:	8d 2d       	mov	r24, r13
    21e0:	80 73       	andi	r24, 0x30	; 48
    21e2:	01 f5       	brne	.+64     	; 0x2224 <conv_int+0x8a>
    21e4:	40 33       	cpi	r20, 0x30	; 48
    21e6:	f1 f4       	brne	.+60     	; 0x2224 <conv_int+0x8a>
    21e8:	ca 94       	dec	r12
    21ea:	09 f4       	brne	.+2      	; 0x21ee <conv_int+0x54>
    21ec:	47 c0       	rjmp	.+142    	; 0x227c <conv_int+0xe2>
    21ee:	ce 01       	movw	r24, r28
    21f0:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    21f4:	ac 01       	movw	r20, r24
    21f6:	97 fd       	sbrc	r25, 7
    21f8:	41 c0       	rjmp	.+130    	; 0x227c <conv_int+0xe2>
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	d8 2a       	or	r13, r24
    21fe:	48 37       	cpi	r20, 0x78	; 120
    2200:	11 f0       	breq	.+4      	; 0x2206 <conv_int+0x6c>
    2202:	48 35       	cpi	r20, 0x58	; 88
    2204:	59 f4       	brne	.+22     	; 0x221c <conv_int+0x82>
    2206:	80 e4       	ldi	r24, 0x40	; 64
    2208:	d8 2a       	or	r13, r24
    220a:	ca 94       	dec	r12
    220c:	b9 f1       	breq	.+110    	; 0x227c <conv_int+0xe2>
    220e:	ce 01       	movw	r24, r28
    2210:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    2214:	ac 01       	movw	r20, r24
    2216:	99 23       	and	r25, r25
    2218:	2c f4       	brge	.+10     	; 0x2224 <conv_int+0x8a>
    221a:	30 c0       	rjmp	.+96     	; 0x227c <conv_int+0xe2>
    221c:	d6 fc       	sbrc	r13, 6
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <conv_int+0x8a>
    2220:	80 e1       	ldi	r24, 0x10	; 16
    2222:	d8 2a       	or	r13, r24
    2224:	ee 24       	eor	r14, r14
    2226:	ff 24       	eor	r15, r15
    2228:	87 01       	movw	r16, r14
    222a:	24 2f       	mov	r18, r20
    222c:	20 53       	subi	r18, 0x30	; 48
    222e:	28 30       	cpi	r18, 0x08	; 8
    2230:	88 f0       	brcs	.+34     	; 0x2254 <conv_int+0xba>
    2232:	d4 fc       	sbrc	r13, 4
    2234:	09 c0       	rjmp	.+18     	; 0x2248 <conv_int+0xae>
    2236:	2a 30       	cpi	r18, 0x0A	; 10
    2238:	68 f0       	brcs	.+26     	; 0x2254 <conv_int+0xba>
    223a:	d6 fe       	sbrs	r13, 6
    223c:	05 c0       	rjmp	.+10     	; 0x2248 <conv_int+0xae>
    223e:	2f 7d       	andi	r18, 0xDF	; 223
    2240:	82 2f       	mov	r24, r18
    2242:	81 51       	subi	r24, 0x11	; 17
    2244:	86 30       	cpi	r24, 0x06	; 6
    2246:	28 f0       	brcs	.+10     	; 0x2252 <conv_int+0xb8>
    2248:	ca 01       	movw	r24, r20
    224a:	be 01       	movw	r22, r28
    224c:	0e 94 b7 13 	call	0x276e	; 0x276e <ungetc>
    2250:	12 c0       	rjmp	.+36     	; 0x2276 <conv_int+0xdc>
    2252:	27 50       	subi	r18, 0x07	; 7
    2254:	c8 01       	movw	r24, r16
    2256:	b7 01       	movw	r22, r14
    2258:	4d 2d       	mov	r20, r13
    225a:	0e 94 86 10 	call	0x210c	; 0x210c <mulacc>
    225e:	7b 01       	movw	r14, r22
    2260:	8c 01       	movw	r16, r24
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	d8 2a       	or	r13, r24
    2266:	ca 94       	dec	r12
    2268:	61 f0       	breq	.+24     	; 0x2282 <conv_int+0xe8>
    226a:	ce 01       	movw	r24, r28
    226c:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    2270:	ac 01       	movw	r20, r24
    2272:	97 ff       	sbrs	r25, 7
    2274:	da cf       	rjmp	.-76     	; 0x222a <conv_int+0x90>
    2276:	d1 fc       	sbrc	r13, 1
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <conv_int+0xe8>
    227a:	15 c0       	rjmp	.+42     	; 0x22a6 <conv_int+0x10c>
    227c:	ee 24       	eor	r14, r14
    227e:	ff 24       	eor	r15, r15
    2280:	87 01       	movw	r16, r14
    2282:	d7 fe       	sbrs	r13, 7
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <conv_int+0xfc>
    2286:	10 95       	com	r17
    2288:	00 95       	com	r16
    228a:	f0 94       	com	r15
    228c:	e0 94       	com	r14
    228e:	e1 1c       	adc	r14, r1
    2290:	f1 1c       	adc	r15, r1
    2292:	01 1d       	adc	r16, r1
    2294:	11 1d       	adc	r17, r1
    2296:	c5 01       	movw	r24, r10
    2298:	b8 01       	movw	r22, r16
    229a:	a7 01       	movw	r20, r14
    229c:	2d 2d       	mov	r18, r13
    229e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <putval>
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <conv_int+0x10e>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
    22b8:	bf 90       	pop	r11
    22ba:	af 90       	pop	r10
    22bc:	08 95       	ret

000022be <conv_brk>:
    22be:	6f 92       	push	r6
    22c0:	7f 92       	push	r7
    22c2:	8f 92       	push	r8
    22c4:	9f 92       	push	r9
    22c6:	af 92       	push	r10
    22c8:	bf 92       	push	r11
    22ca:	cf 92       	push	r12
    22cc:	df 92       	push	r13
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	a0 97       	sbiw	r28, 0x20	; 32
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	6c 01       	movw	r12, r24
    22ec:	a6 2e       	mov	r10, r22
    22ee:	8a 01       	movw	r16, r20
    22f0:	79 01       	movw	r14, r18
    22f2:	fe 01       	movw	r30, r28
    22f4:	31 96       	adiw	r30, 0x01	; 1
    22f6:	80 e2       	ldi	r24, 0x20	; 32
    22f8:	df 01       	movw	r26, r30
    22fa:	1d 92       	st	X+, r1
    22fc:	8a 95       	dec	r24
    22fe:	e9 f7       	brne	.-6      	; 0x22fa <conv_brk+0x3c>
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	4f 01       	movw	r8, r30
    230c:	a1 e0       	ldi	r26, 0x01	; 1
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	f6 01       	movw	r30, r12
    2312:	83 81       	ldd	r24, Z+3	; 0x03
    2314:	f7 01       	movw	r30, r14
    2316:	83 fd       	sbrc	r24, 3
    2318:	25 91       	lpm	r18, Z+
    231a:	83 ff       	sbrs	r24, 3
    231c:	21 91       	ld	r18, Z+
    231e:	7f 01       	movw	r14, r30
    2320:	22 23       	and	r18, r18
    2322:	09 f4       	brne	.+2      	; 0x2326 <conv_brk+0x68>
    2324:	7e c0       	rjmp	.+252    	; 0x2422 <conv_brk+0x164>
    2326:	2e 35       	cpi	r18, 0x5E	; 94
    2328:	19 f4       	brne	.+6      	; 0x2330 <conv_brk+0x72>
    232a:	41 15       	cp	r20, r1
    232c:	51 05       	cpc	r21, r1
    232e:	69 f1       	breq	.+90     	; 0x238a <conv_brk+0xcc>
    2330:	87 2f       	mov	r24, r23
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	84 17       	cp	r24, r20
    2336:	95 07       	cpc	r25, r21
    2338:	44 f4       	brge	.+16     	; 0x234a <conv_brk+0x8c>
    233a:	2d 35       	cpi	r18, 0x5D	; 93
    233c:	51 f1       	breq	.+84     	; 0x2392 <conv_brk+0xd4>
    233e:	2d 32       	cpi	r18, 0x2D	; 45
    2340:	21 f4       	brne	.+8      	; 0x234a <conv_brk+0x8c>
    2342:	33 23       	and	r19, r19
    2344:	29 f4       	brne	.+10     	; 0x2350 <conv_brk+0x92>
    2346:	31 e0       	ldi	r19, 0x01	; 1
    2348:	21 c0       	rjmp	.+66     	; 0x238c <conv_brk+0xce>
    234a:	33 23       	and	r19, r19
    234c:	09 f4       	brne	.+2      	; 0x2350 <conv_brk+0x92>
    234e:	62 2f       	mov	r22, r18
    2350:	32 2f       	mov	r19, r18
    2352:	83 2f       	mov	r24, r19
    2354:	86 95       	lsr	r24
    2356:	86 95       	lsr	r24
    2358:	86 95       	lsr	r24
    235a:	f4 01       	movw	r30, r8
    235c:	e8 0f       	add	r30, r24
    235e:	f1 1d       	adc	r31, r1
    2360:	83 2f       	mov	r24, r19
    2362:	87 70       	andi	r24, 0x07	; 7
    2364:	3d 01       	movw	r6, r26
    2366:	02 c0       	rjmp	.+4      	; 0x236c <conv_brk+0xae>
    2368:	66 0c       	add	r6, r6
    236a:	77 1c       	adc	r7, r7
    236c:	8a 95       	dec	r24
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <conv_brk+0xaa>
    2370:	20 81       	ld	r18, Z
    2372:	26 29       	or	r18, r6
    2374:	20 83       	st	Z, r18
    2376:	36 17       	cp	r19, r22
    2378:	11 f4       	brne	.+4      	; 0x237e <conv_brk+0xc0>
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	07 c0       	rjmp	.+14     	; 0x238c <conv_brk+0xce>
    237e:	36 17       	cp	r19, r22
    2380:	10 f4       	brcc	.+4      	; 0x2386 <conv_brk+0xc8>
    2382:	3f 5f       	subi	r19, 0xFF	; 255
    2384:	e6 cf       	rjmp	.-52     	; 0x2352 <conv_brk+0x94>
    2386:	31 50       	subi	r19, 0x01	; 1
    2388:	e4 cf       	rjmp	.-56     	; 0x2352 <conv_brk+0x94>
    238a:	71 e0       	ldi	r23, 0x01	; 1
    238c:	4f 5f       	subi	r20, 0xFF	; 255
    238e:	5f 4f       	sbci	r21, 0xFF	; 255
    2390:	bf cf       	rjmp	.-130    	; 0x2310 <conv_brk+0x52>
    2392:	33 23       	and	r19, r19
    2394:	19 f0       	breq	.+6      	; 0x239c <conv_brk+0xde>
    2396:	8e 81       	ldd	r24, Y+6	; 0x06
    2398:	80 62       	ori	r24, 0x20	; 32
    239a:	8e 83       	std	Y+6, r24	; 0x06
    239c:	77 23       	and	r23, r23
    239e:	59 f0       	breq	.+22     	; 0x23b6 <conv_brk+0xf8>
    23a0:	fe 01       	movw	r30, r28
    23a2:	31 96       	adiw	r30, 0x01	; 1
    23a4:	9e 01       	movw	r18, r28
    23a6:	2f 5d       	subi	r18, 0xDF	; 223
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	80 95       	com	r24
    23ae:	81 93       	st	Z+, r24
    23b0:	e2 17       	cp	r30, r18
    23b2:	f3 07       	cpc	r31, r19
    23b4:	d1 f7       	brne	.-12     	; 0x23aa <conv_brk+0xec>
    23b6:	bb 24       	eor	r11, r11
    23b8:	b3 94       	inc	r11
    23ba:	4e 01       	movw	r8, r28
    23bc:	08 94       	sec
    23be:	81 1c       	adc	r8, r1
    23c0:	91 1c       	adc	r9, r1
    23c2:	c6 01       	movw	r24, r12
    23c4:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    23c8:	ac 01       	movw	r20, r24
    23ca:	97 fd       	sbrc	r25, 7
    23cc:	22 c0       	rjmp	.+68     	; 0x2412 <conv_brk+0x154>
    23ce:	86 95       	lsr	r24
    23d0:	86 95       	lsr	r24
    23d2:	86 95       	lsr	r24
    23d4:	f4 01       	movw	r30, r8
    23d6:	e8 0f       	add	r30, r24
    23d8:	f1 1d       	adc	r31, r1
    23da:	80 81       	ld	r24, Z
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9a 01       	movw	r18, r20
    23e0:	27 70       	andi	r18, 0x07	; 7
    23e2:	30 70       	andi	r19, 0x00	; 0
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <conv_brk+0x12c>
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	2a 95       	dec	r18
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <conv_brk+0x128>
    23ee:	80 fd       	sbrc	r24, 0
    23f0:	05 c0       	rjmp	.+10     	; 0x23fc <conv_brk+0x13e>
    23f2:	ca 01       	movw	r24, r20
    23f4:	b6 01       	movw	r22, r12
    23f6:	0e 94 b7 13 	call	0x276e	; 0x276e <ungetc>
    23fa:	0b c0       	rjmp	.+22     	; 0x2412 <conv_brk+0x154>
    23fc:	01 15       	cp	r16, r1
    23fe:	11 05       	cpc	r17, r1
    2400:	19 f0       	breq	.+6      	; 0x2408 <conv_brk+0x14a>
    2402:	d8 01       	movw	r26, r16
    2404:	4d 93       	st	X+, r20
    2406:	8d 01       	movw	r16, r26
    2408:	aa 94       	dec	r10
    240a:	bb 24       	eor	r11, r11
    240c:	aa 20       	and	r10, r10
    240e:	c9 f6       	brne	.-78     	; 0x23c2 <conv_brk+0x104>
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <conv_brk+0x158>
    2412:	bb 20       	and	r11, r11
    2414:	31 f4       	brne	.+12     	; 0x2422 <conv_brk+0x164>
    2416:	01 15       	cp	r16, r1
    2418:	11 05       	cpc	r17, r1
    241a:	29 f0       	breq	.+10     	; 0x2426 <conv_brk+0x168>
    241c:	f8 01       	movw	r30, r16
    241e:	10 82       	st	Z, r1
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <conv_brk+0x168>
    2422:	ee 24       	eor	r14, r14
    2424:	ff 24       	eor	r15, r15
    2426:	c7 01       	movw	r24, r14
    2428:	a0 96       	adiw	r28, 0x20	; 32
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	8f 90       	pop	r8
    244c:	7f 90       	pop	r7
    244e:	6f 90       	pop	r6
    2450:	08 95       	ret

00002452 <vfscanf>:
    2452:	6f 92       	push	r6
    2454:	7f 92       	push	r7
    2456:	8f 92       	push	r8
    2458:	9f 92       	push	r9
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	5c 01       	movw	r10, r24
    2470:	6b 01       	movw	r12, r22
    2472:	3a 01       	movw	r6, r20
    2474:	fc 01       	movw	r30, r24
    2476:	17 82       	std	Z+7, r1	; 0x07
    2478:	16 82       	std	Z+6, r1	; 0x06
    247a:	88 24       	eor	r8, r8
    247c:	ea c0       	rjmp	.+468    	; 0x2652 <vfscanf+0x200>
    247e:	81 2f       	mov	r24, r17
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 4c 13 	call	0x2698	; 0x2698 <isspace>
    2486:	89 2b       	or	r24, r25
    2488:	21 f0       	breq	.+8      	; 0x2492 <vfscanf+0x40>
    248a:	c5 01       	movw	r24, r10
    248c:	0e 94 b4 10 	call	0x2168	; 0x2168 <skip_spaces>
    2490:	e0 c0       	rjmp	.+448    	; 0x2652 <vfscanf+0x200>
    2492:	15 32       	cpi	r17, 0x25	; 37
    2494:	49 f4       	brne	.+18     	; 0x24a8 <vfscanf+0x56>
    2496:	f6 01       	movw	r30, r12
    2498:	f3 fc       	sbrc	r15, 3
    249a:	65 91       	lpm	r22, Z+
    249c:	f3 fe       	sbrs	r15, 3
    249e:	61 91       	ld	r22, Z+
    24a0:	6f 01       	movw	r12, r30
    24a2:	65 32       	cpi	r22, 0x25	; 37
    24a4:	69 f4       	brne	.+26     	; 0x24c0 <vfscanf+0x6e>
    24a6:	15 e2       	ldi	r17, 0x25	; 37
    24a8:	c5 01       	movw	r24, r10
    24aa:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    24ae:	97 fd       	sbrc	r25, 7
    24b0:	dc c0       	rjmp	.+440    	; 0x266a <vfscanf+0x218>
    24b2:	18 17       	cp	r17, r24
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <vfscanf+0x66>
    24b6:	cd c0       	rjmp	.+410    	; 0x2652 <vfscanf+0x200>
    24b8:	b5 01       	movw	r22, r10
    24ba:	0e 94 b7 13 	call	0x276e	; 0x276e <ungetc>
    24be:	da c0       	rjmp	.+436    	; 0x2674 <vfscanf+0x222>
    24c0:	6a 32       	cpi	r22, 0x2A	; 42
    24c2:	19 f0       	breq	.+6      	; 0x24ca <vfscanf+0x78>
    24c4:	16 2f       	mov	r17, r22
    24c6:	00 e0       	ldi	r16, 0x00	; 0
    24c8:	06 c0       	rjmp	.+12     	; 0x24d6 <vfscanf+0x84>
    24ca:	f3 fc       	sbrc	r15, 3
    24cc:	15 91       	lpm	r17, Z+
    24ce:	f3 fe       	sbrs	r15, 3
    24d0:	11 91       	ld	r17, Z+
    24d2:	6f 01       	movw	r12, r30
    24d4:	01 e0       	ldi	r16, 0x01	; 1
    24d6:	99 24       	eor	r9, r9
    24d8:	0f c0       	rjmp	.+30     	; 0x24f8 <vfscanf+0xa6>
    24da:	02 60       	ori	r16, 0x02	; 2
    24dc:	69 2d       	mov	r22, r9
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	0e 94 86 10 	call	0x210c	; 0x210c <mulacc>
    24ea:	96 2e       	mov	r9, r22
    24ec:	f6 01       	movw	r30, r12
    24ee:	f3 fc       	sbrc	r15, 3
    24f0:	15 91       	lpm	r17, Z+
    24f2:	f3 fe       	sbrs	r15, 3
    24f4:	11 91       	ld	r17, Z+
    24f6:	6f 01       	movw	r12, r30
    24f8:	21 2f       	mov	r18, r17
    24fa:	20 53       	subi	r18, 0x30	; 48
    24fc:	2a 30       	cpi	r18, 0x0A	; 10
    24fe:	68 f3       	brcs	.-38     	; 0x24da <vfscanf+0x88>
    2500:	01 fd       	sbrc	r16, 1
    2502:	03 c0       	rjmp	.+6      	; 0x250a <vfscanf+0xb8>
    2504:	99 24       	eor	r9, r9
    2506:	9a 94       	dec	r9
    2508:	03 c0       	rjmp	.+6      	; 0x2510 <vfscanf+0xbe>
    250a:	99 20       	and	r9, r9
    250c:	09 f4       	brne	.+2      	; 0x2510 <vfscanf+0xbe>
    250e:	b2 c0       	rjmp	.+356    	; 0x2674 <vfscanf+0x222>
    2510:	18 36       	cpi	r17, 0x68	; 104
    2512:	21 f0       	breq	.+8      	; 0x251c <vfscanf+0xca>
    2514:	1c 36       	cpi	r17, 0x6C	; 108
    2516:	99 f4       	brne	.+38     	; 0x253e <vfscanf+0xec>
    2518:	f6 01       	movw	r30, r12
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <vfscanf+0xe0>
    251c:	f6 01       	movw	r30, r12
    251e:	f3 fc       	sbrc	r15, 3
    2520:	65 91       	lpm	r22, Z+
    2522:	f3 fe       	sbrs	r15, 3
    2524:	61 91       	ld	r22, Z+
    2526:	68 36       	cpi	r22, 0x68	; 104
    2528:	19 f0       	breq	.+6      	; 0x2530 <vfscanf+0xde>
    252a:	6f 01       	movw	r12, r30
    252c:	16 2f       	mov	r17, r22
    252e:	07 c0       	rjmp	.+14     	; 0x253e <vfscanf+0xec>
    2530:	08 60       	ori	r16, 0x08	; 8
    2532:	04 60       	ori	r16, 0x04	; 4
    2534:	f3 fc       	sbrc	r15, 3
    2536:	15 91       	lpm	r17, Z+
    2538:	f3 fe       	sbrs	r15, 3
    253a:	11 91       	ld	r17, Z+
    253c:	6f 01       	movw	r12, r30
    253e:	11 23       	and	r17, r17
    2540:	09 f4       	brne	.+2      	; 0x2544 <vfscanf+0xf2>
    2542:	98 c0       	rjmp	.+304    	; 0x2674 <vfscanf+0x222>
    2544:	86 e4       	ldi	r24, 0x46	; 70
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	61 2f       	mov	r22, r17
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <strchr_P>
    2550:	89 2b       	or	r24, r25
    2552:	09 f4       	brne	.+2      	; 0x2556 <vfscanf+0x104>
    2554:	8f c0       	rjmp	.+286    	; 0x2674 <vfscanf+0x222>
    2556:	80 2f       	mov	r24, r16
    2558:	00 ff       	sbrs	r16, 0
    255a:	03 c0       	rjmp	.+6      	; 0x2562 <vfscanf+0x110>
    255c:	ee 24       	eor	r14, r14
    255e:	ff 24       	eor	r15, r15
    2560:	07 c0       	rjmp	.+14     	; 0x2570 <vfscanf+0x11e>
    2562:	f3 01       	movw	r30, r6
    2564:	e0 80       	ld	r14, Z
    2566:	f1 80       	ldd	r15, Z+1	; 0x01
    2568:	22 e0       	ldi	r18, 0x02	; 2
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	62 0e       	add	r6, r18
    256e:	73 1e       	adc	r7, r19
    2570:	1e 36       	cpi	r17, 0x6E	; 110
    2572:	51 f4       	brne	.+20     	; 0x2588 <vfscanf+0x136>
    2574:	f5 01       	movw	r30, r10
    2576:	46 81       	ldd	r20, Z+6	; 0x06
    2578:	57 81       	ldd	r21, Z+7	; 0x07
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	70 e0       	ldi	r23, 0x00	; 0
    257e:	c7 01       	movw	r24, r14
    2580:	20 2f       	mov	r18, r16
    2582:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <putval>
    2586:	65 c0       	rjmp	.+202    	; 0x2652 <vfscanf+0x200>
    2588:	13 36       	cpi	r17, 0x63	; 99
    258a:	91 f4       	brne	.+36     	; 0x25b0 <vfscanf+0x15e>
    258c:	81 fd       	sbrc	r24, 1
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <vfscanf+0x142>
    2590:	99 24       	eor	r9, r9
    2592:	93 94       	inc	r9
    2594:	c5 01       	movw	r24, r10
    2596:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    259a:	97 fd       	sbrc	r25, 7
    259c:	66 c0       	rjmp	.+204    	; 0x266a <vfscanf+0x218>
    259e:	e1 14       	cp	r14, r1
    25a0:	f1 04       	cpc	r15, r1
    25a2:	19 f0       	breq	.+6      	; 0x25aa <vfscanf+0x158>
    25a4:	f7 01       	movw	r30, r14
    25a6:	81 93       	st	Z+, r24
    25a8:	7f 01       	movw	r14, r30
    25aa:	9a 94       	dec	r9
    25ac:	99 f7       	brne	.-26     	; 0x2594 <vfscanf+0x142>
    25ae:	4f c0       	rjmp	.+158    	; 0x264e <vfscanf+0x1fc>
    25b0:	1b 35       	cpi	r17, 0x5B	; 91
    25b2:	59 f4       	brne	.+22     	; 0x25ca <vfscanf+0x178>
    25b4:	c5 01       	movw	r24, r10
    25b6:	69 2d       	mov	r22, r9
    25b8:	a7 01       	movw	r20, r14
    25ba:	96 01       	movw	r18, r12
    25bc:	0e 94 5f 11 	call	0x22be	; 0x22be <conv_brk>
    25c0:	6c 01       	movw	r12, r24
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <vfscanf+0x176>
    25c6:	43 c0       	rjmp	.+134    	; 0x264e <vfscanf+0x1fc>
    25c8:	3d c0       	rjmp	.+122    	; 0x2644 <vfscanf+0x1f2>
    25ca:	c5 01       	movw	r24, r10
    25cc:	0e 94 b4 10 	call	0x2168	; 0x2168 <skip_spaces>
    25d0:	97 fd       	sbrc	r25, 7
    25d2:	4b c0       	rjmp	.+150    	; 0x266a <vfscanf+0x218>
    25d4:	1f 36       	cpi	r17, 0x6F	; 111
    25d6:	59 f1       	breq	.+86     	; 0x262e <vfscanf+0x1dc>
    25d8:	10 37       	cpi	r17, 0x70	; 112
    25da:	28 f4       	brcc	.+10     	; 0x25e6 <vfscanf+0x194>
    25dc:	14 36       	cpi	r17, 0x64	; 100
    25de:	29 f1       	breq	.+74     	; 0x262a <vfscanf+0x1d8>
    25e0:	19 36       	cpi	r17, 0x69	; 105
    25e2:	39 f5       	brne	.+78     	; 0x2632 <vfscanf+0x1e0>
    25e4:	27 c0       	rjmp	.+78     	; 0x2634 <vfscanf+0x1e2>
    25e6:	13 37       	cpi	r17, 0x73	; 115
    25e8:	19 f0       	breq	.+6      	; 0x25f0 <vfscanf+0x19e>
    25ea:	15 37       	cpi	r17, 0x75	; 117
    25ec:	11 f5       	brne	.+68     	; 0x2632 <vfscanf+0x1e0>
    25ee:	1d c0       	rjmp	.+58     	; 0x262a <vfscanf+0x1d8>
    25f0:	c5 01       	movw	r24, r10
    25f2:	0e 94 75 13 	call	0x26ea	; 0x26ea <fgetc>
    25f6:	ec 01       	movw	r28, r24
    25f8:	97 fd       	sbrc	r25, 7
    25fa:	11 c0       	rjmp	.+34     	; 0x261e <vfscanf+0x1cc>
    25fc:	0e 94 4c 13 	call	0x2698	; 0x2698 <isspace>
    2600:	89 2b       	or	r24, r25
    2602:	29 f0       	breq	.+10     	; 0x260e <vfscanf+0x1bc>
    2604:	ce 01       	movw	r24, r28
    2606:	b5 01       	movw	r22, r10
    2608:	0e 94 b7 13 	call	0x276e	; 0x276e <ungetc>
    260c:	08 c0       	rjmp	.+16     	; 0x261e <vfscanf+0x1cc>
    260e:	e1 14       	cp	r14, r1
    2610:	f1 04       	cpc	r15, r1
    2612:	19 f0       	breq	.+6      	; 0x261a <vfscanf+0x1c8>
    2614:	f7 01       	movw	r30, r14
    2616:	c1 93       	st	Z+, r28
    2618:	7f 01       	movw	r14, r30
    261a:	9a 94       	dec	r9
    261c:	49 f7       	brne	.-46     	; 0x25f0 <vfscanf+0x19e>
    261e:	e1 14       	cp	r14, r1
    2620:	f1 04       	cpc	r15, r1
    2622:	a9 f0       	breq	.+42     	; 0x264e <vfscanf+0x1fc>
    2624:	f7 01       	movw	r30, r14
    2626:	10 82       	st	Z, r1
    2628:	12 c0       	rjmp	.+36     	; 0x264e <vfscanf+0x1fc>
    262a:	00 62       	ori	r16, 0x20	; 32
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <vfscanf+0x1e2>
    262e:	00 61       	ori	r16, 0x10	; 16
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <vfscanf+0x1e2>
    2632:	00 64       	ori	r16, 0x40	; 64
    2634:	c5 01       	movw	r24, r10
    2636:	69 2d       	mov	r22, r9
    2638:	a7 01       	movw	r20, r14
    263a:	20 2f       	mov	r18, r16
    263c:	0e 94 cd 10 	call	0x219a	; 0x219a <conv_int>
    2640:	88 23       	and	r24, r24
    2642:	29 f4       	brne	.+10     	; 0x264e <vfscanf+0x1fc>
    2644:	f5 01       	movw	r30, r10
    2646:	83 81       	ldd	r24, Z+3	; 0x03
    2648:	80 73       	andi	r24, 0x30	; 48
    264a:	79 f4       	brne	.+30     	; 0x266a <vfscanf+0x218>
    264c:	13 c0       	rjmp	.+38     	; 0x2674 <vfscanf+0x222>
    264e:	00 ff       	sbrs	r16, 0
    2650:	83 94       	inc	r8
    2652:	f5 01       	movw	r30, r10
    2654:	f3 80       	ldd	r15, Z+3	; 0x03
    2656:	f6 01       	movw	r30, r12
    2658:	f3 fc       	sbrc	r15, 3
    265a:	15 91       	lpm	r17, Z+
    265c:	f3 fe       	sbrs	r15, 3
    265e:	11 91       	ld	r17, Z+
    2660:	6f 01       	movw	r12, r30
    2662:	11 23       	and	r17, r17
    2664:	09 f0       	breq	.+2      	; 0x2668 <vfscanf+0x216>
    2666:	0b cf       	rjmp	.-490    	; 0x247e <vfscanf+0x2c>
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <vfscanf+0x222>
    266a:	88 20       	and	r8, r8
    266c:	19 f4       	brne	.+6      	; 0x2674 <vfscanf+0x222>
    266e:	2f ef       	ldi	r18, 0xFF	; 255
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <vfscanf+0x226>
    2674:	28 2d       	mov	r18, r8
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	c9 01       	movw	r24, r18
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	ff 90       	pop	r15
    2684:	ef 90       	pop	r14
    2686:	df 90       	pop	r13
    2688:	cf 90       	pop	r12
    268a:	bf 90       	pop	r11
    268c:	af 90       	pop	r10
    268e:	9f 90       	pop	r9
    2690:	8f 90       	pop	r8
    2692:	7f 90       	pop	r7
    2694:	6f 90       	pop	r6
    2696:	08 95       	ret

00002698 <isspace>:
    2698:	91 11       	cpse	r25, r1
    269a:	e1 c0       	rjmp	.+450    	; 0x285e <__ctype_isfalse>
    269c:	80 32       	cpi	r24, 0x20	; 32
    269e:	19 f0       	breq	.+6      	; 0x26a6 <isspace+0xe>
    26a0:	89 50       	subi	r24, 0x09	; 9
    26a2:	85 50       	subi	r24, 0x05	; 5
    26a4:	d0 f7       	brcc	.-12     	; 0x269a <isspace+0x2>
    26a6:	08 95       	ret

000026a8 <strchr_P>:
    26a8:	fc 01       	movw	r30, r24
    26aa:	05 90       	lpm	r0, Z+
    26ac:	06 16       	cp	r0, r22
    26ae:	21 f0       	breq	.+8      	; 0x26b8 <strchr_P+0x10>
    26b0:	00 20       	and	r0, r0
    26b2:	d9 f7       	brne	.-10     	; 0x26aa <strchr_P+0x2>
    26b4:	c0 01       	movw	r24, r0
    26b6:	08 95       	ret
    26b8:	31 97       	sbiw	r30, 0x01	; 1
    26ba:	cf 01       	movw	r24, r30
    26bc:	08 95       	ret

000026be <strnlen_P>:
    26be:	fc 01       	movw	r30, r24
    26c0:	05 90       	lpm	r0, Z+
    26c2:	61 50       	subi	r22, 0x01	; 1
    26c4:	70 40       	sbci	r23, 0x00	; 0
    26c6:	01 10       	cpse	r0, r1
    26c8:	d8 f7       	brcc	.-10     	; 0x26c0 <strnlen_P+0x2>
    26ca:	80 95       	com	r24
    26cc:	90 95       	com	r25
    26ce:	8e 0f       	add	r24, r30
    26d0:	9f 1f       	adc	r25, r31
    26d2:	08 95       	ret

000026d4 <strnlen>:
    26d4:	fc 01       	movw	r30, r24
    26d6:	61 50       	subi	r22, 0x01	; 1
    26d8:	70 40       	sbci	r23, 0x00	; 0
    26da:	01 90       	ld	r0, Z+
    26dc:	01 10       	cpse	r0, r1
    26de:	d8 f7       	brcc	.-10     	; 0x26d6 <strnlen+0x2>
    26e0:	80 95       	com	r24
    26e2:	90 95       	com	r25
    26e4:	8e 0f       	add	r24, r30
    26e6:	9f 1f       	adc	r25, r31
    26e8:	08 95       	ret

000026ea <fgetc>:
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	ec 01       	movw	r28, r24
    26f0:	4b 81       	ldd	r20, Y+3	; 0x03
    26f2:	40 ff       	sbrs	r20, 0
    26f4:	1a c0       	rjmp	.+52     	; 0x272a <fgetc+0x40>
    26f6:	46 ff       	sbrs	r20, 6
    26f8:	0a c0       	rjmp	.+20     	; 0x270e <fgetc+0x24>
    26fa:	4f 7b       	andi	r20, 0xBF	; 191
    26fc:	4b 83       	std	Y+3, r20	; 0x03
    26fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2700:	9f 81       	ldd	r25, Y+7	; 0x07
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	9f 83       	std	Y+7, r25	; 0x07
    2706:	8e 83       	std	Y+6, r24	; 0x06
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	28 2f       	mov	r18, r24
    270c:	2b c0       	rjmp	.+86     	; 0x2764 <fgetc+0x7a>
    270e:	42 ff       	sbrs	r20, 2
    2710:	13 c0       	rjmp	.+38     	; 0x2738 <fgetc+0x4e>
    2712:	e8 81       	ld	r30, Y
    2714:	f9 81       	ldd	r31, Y+1	; 0x01
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	33 27       	eor	r19, r19
    271c:	27 fd       	sbrc	r18, 7
    271e:	30 95       	com	r19
    2720:	21 15       	cp	r18, r1
    2722:	31 05       	cpc	r19, r1
    2724:	29 f4       	brne	.+10     	; 0x2730 <fgetc+0x46>
    2726:	40 62       	ori	r20, 0x20	; 32
    2728:	4b 83       	std	Y+3, r20	; 0x03
    272a:	2f ef       	ldi	r18, 0xFF	; 255
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	1b c0       	rjmp	.+54     	; 0x2766 <fgetc+0x7c>
    2730:	31 96       	adiw	r30, 0x01	; 1
    2732:	f9 83       	std	Y+1, r31	; 0x01
    2734:	e8 83       	st	Y, r30
    2736:	11 c0       	rjmp	.+34     	; 0x275a <fgetc+0x70>
    2738:	ea 85       	ldd	r30, Y+10	; 0x0a
    273a:	fb 85       	ldd	r31, Y+11	; 0x0b
    273c:	ce 01       	movw	r24, r28
    273e:	09 95       	icall
    2740:	9c 01       	movw	r18, r24
    2742:	97 ff       	sbrs	r25, 7
    2744:	0a c0       	rjmp	.+20     	; 0x275a <fgetc+0x70>
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	2f 5f       	subi	r18, 0xFF	; 255
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	11 f0       	breq	.+4      	; 0x2752 <fgetc+0x68>
    274e:	80 e2       	ldi	r24, 0x20	; 32
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <fgetc+0x6a>
    2752:	80 e1       	ldi	r24, 0x10	; 16
    2754:	89 2b       	or	r24, r25
    2756:	8b 83       	std	Y+3, r24	; 0x03
    2758:	e8 cf       	rjmp	.-48     	; 0x272a <fgetc+0x40>
    275a:	8e 81       	ldd	r24, Y+6	; 0x06
    275c:	9f 81       	ldd	r25, Y+7	; 0x07
    275e:	01 96       	adiw	r24, 0x01	; 1
    2760:	9f 83       	std	Y+7, r25	; 0x07
    2762:	8e 83       	std	Y+6, r24	; 0x06
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	c9 01       	movw	r24, r18
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <ungetc>:
    276e:	9c 01       	movw	r18, r24
    2770:	fb 01       	movw	r30, r22
    2772:	83 81       	ldd	r24, Z+3	; 0x03
    2774:	80 ff       	sbrs	r24, 0
    2776:	11 c0       	rjmp	.+34     	; 0x279a <ungetc+0x2c>
    2778:	86 fd       	sbrc	r24, 6
    277a:	0f c0       	rjmp	.+30     	; 0x279a <ungetc+0x2c>
    277c:	9f ef       	ldi	r25, 0xFF	; 255
    277e:	2f 3f       	cpi	r18, 0xFF	; 255
    2780:	39 07       	cpc	r19, r25
    2782:	59 f0       	breq	.+22     	; 0x279a <ungetc+0x2c>
    2784:	22 83       	std	Z+2, r18	; 0x02
    2786:	80 64       	ori	r24, 0x40	; 64
    2788:	8f 7d       	andi	r24, 0xDF	; 223
    278a:	83 83       	std	Z+3, r24	; 0x03
    278c:	86 81       	ldd	r24, Z+6	; 0x06
    278e:	97 81       	ldd	r25, Z+7	; 0x07
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	97 83       	std	Z+7, r25	; 0x07
    2794:	86 83       	std	Z+6, r24	; 0x06
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	02 c0       	rjmp	.+4      	; 0x279e <ungetc+0x30>
    279a:	2f ef       	ldi	r18, 0xFF	; 255
    279c:	3f ef       	ldi	r19, 0xFF	; 255
    279e:	c9 01       	movw	r24, r18
    27a0:	08 95       	ret

000027a2 <__ultoa_invert>:
    27a2:	fa 01       	movw	r30, r20
    27a4:	aa 27       	eor	r26, r26
    27a6:	28 30       	cpi	r18, 0x08	; 8
    27a8:	51 f1       	breq	.+84     	; 0x27fe <__ultoa_invert+0x5c>
    27aa:	20 31       	cpi	r18, 0x10	; 16
    27ac:	81 f1       	breq	.+96     	; 0x280e <__ultoa_invert+0x6c>
    27ae:	e8 94       	clt
    27b0:	6f 93       	push	r22
    27b2:	6e 7f       	andi	r22, 0xFE	; 254
    27b4:	6e 5f       	subi	r22, 0xFE	; 254
    27b6:	7f 4f       	sbci	r23, 0xFF	; 255
    27b8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	af 4f       	sbci	r26, 0xFF	; 255
    27be:	b1 e0       	ldi	r27, 0x01	; 1
    27c0:	3e d0       	rcall	.+124    	; 0x283e <__ultoa_invert+0x9c>
    27c2:	b4 e0       	ldi	r27, 0x04	; 4
    27c4:	3c d0       	rcall	.+120    	; 0x283e <__ultoa_invert+0x9c>
    27c6:	67 0f       	add	r22, r23
    27c8:	78 1f       	adc	r23, r24
    27ca:	89 1f       	adc	r24, r25
    27cc:	9a 1f       	adc	r25, r26
    27ce:	a1 1d       	adc	r26, r1
    27d0:	68 0f       	add	r22, r24
    27d2:	79 1f       	adc	r23, r25
    27d4:	8a 1f       	adc	r24, r26
    27d6:	91 1d       	adc	r25, r1
    27d8:	a1 1d       	adc	r26, r1
    27da:	6a 0f       	add	r22, r26
    27dc:	71 1d       	adc	r23, r1
    27de:	81 1d       	adc	r24, r1
    27e0:	91 1d       	adc	r25, r1
    27e2:	a1 1d       	adc	r26, r1
    27e4:	20 d0       	rcall	.+64     	; 0x2826 <__ultoa_invert+0x84>
    27e6:	09 f4       	brne	.+2      	; 0x27ea <__ultoa_invert+0x48>
    27e8:	68 94       	set
    27ea:	3f 91       	pop	r19
    27ec:	2a e0       	ldi	r18, 0x0A	; 10
    27ee:	26 9f       	mul	r18, r22
    27f0:	11 24       	eor	r1, r1
    27f2:	30 19       	sub	r19, r0
    27f4:	30 5d       	subi	r19, 0xD0	; 208
    27f6:	31 93       	st	Z+, r19
    27f8:	de f6       	brtc	.-74     	; 0x27b0 <__ultoa_invert+0xe>
    27fa:	cf 01       	movw	r24, r30
    27fc:	08 95       	ret
    27fe:	46 2f       	mov	r20, r22
    2800:	47 70       	andi	r20, 0x07	; 7
    2802:	40 5d       	subi	r20, 0xD0	; 208
    2804:	41 93       	st	Z+, r20
    2806:	b3 e0       	ldi	r27, 0x03	; 3
    2808:	0f d0       	rcall	.+30     	; 0x2828 <__ultoa_invert+0x86>
    280a:	c9 f7       	brne	.-14     	; 0x27fe <__ultoa_invert+0x5c>
    280c:	f6 cf       	rjmp	.-20     	; 0x27fa <__ultoa_invert+0x58>
    280e:	46 2f       	mov	r20, r22
    2810:	4f 70       	andi	r20, 0x0F	; 15
    2812:	40 5d       	subi	r20, 0xD0	; 208
    2814:	4a 33       	cpi	r20, 0x3A	; 58
    2816:	18 f0       	brcs	.+6      	; 0x281e <__ultoa_invert+0x7c>
    2818:	49 5d       	subi	r20, 0xD9	; 217
    281a:	31 fd       	sbrc	r19, 1
    281c:	40 52       	subi	r20, 0x20	; 32
    281e:	41 93       	st	Z+, r20
    2820:	02 d0       	rcall	.+4      	; 0x2826 <__ultoa_invert+0x84>
    2822:	a9 f7       	brne	.-22     	; 0x280e <__ultoa_invert+0x6c>
    2824:	ea cf       	rjmp	.-44     	; 0x27fa <__ultoa_invert+0x58>
    2826:	b4 e0       	ldi	r27, 0x04	; 4
    2828:	a6 95       	lsr	r26
    282a:	97 95       	ror	r25
    282c:	87 95       	ror	r24
    282e:	77 95       	ror	r23
    2830:	67 95       	ror	r22
    2832:	ba 95       	dec	r27
    2834:	c9 f7       	brne	.-14     	; 0x2828 <__ultoa_invert+0x86>
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	61 05       	cpc	r22, r1
    283a:	71 05       	cpc	r23, r1
    283c:	08 95       	ret
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	0a 2e       	mov	r0, r26
    2844:	06 94       	lsr	r0
    2846:	57 95       	ror	r21
    2848:	47 95       	ror	r20
    284a:	37 95       	ror	r19
    284c:	27 95       	ror	r18
    284e:	ba 95       	dec	r27
    2850:	c9 f7       	brne	.-14     	; 0x2844 <__ultoa_invert+0xa2>
    2852:	62 0f       	add	r22, r18
    2854:	73 1f       	adc	r23, r19
    2856:	84 1f       	adc	r24, r20
    2858:	95 1f       	adc	r25, r21
    285a:	a0 1d       	adc	r26, r0
    285c:	08 95       	ret

0000285e <__ctype_isfalse>:
    285e:	99 27       	eor	r25, r25
    2860:	88 27       	eor	r24, r24

00002862 <__ctype_istrue>:
    2862:	08 95       	ret

00002864 <_exit>:
    2864:	f8 94       	cli

00002866 <__stop_program>:
    2866:	ff cf       	rjmp	.-2      	; 0x2866 <__stop_program>
