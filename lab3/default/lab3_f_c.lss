
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000019ce  00001a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b0  00800128  00800128  00001a8a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003df  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000128d  00000000  00000000  00001ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045b  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e12  00000000  00000000  000035b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a59  00000000  00000000  00004af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000554f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	ee ec       	ldi	r30, 0xCE	; 206
     4ec:	f9 e1       	ldi	r31, 0x19	; 25
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	a8 32       	cpi	r26, 0x28	; 40
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	15 e0       	ldi	r17, 0x05	; 5
     500:	a8 e2       	ldi	r26, 0x28	; 40
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a8 3d       	cpi	r26, 0xD8	; 216
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <main>
     512:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
volatile char is_on_screen[Max_num_balls];

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 b8 05 	lds	r24, 0x05B8
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 7a 05 	lds	r24, 0x057A
     544:	90 91 7b 05 	lds	r25, 0x057B
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 7b 05 	sts	0x057B, r25
     54e:	80 93 7a 05 	sts	0x057A, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 7a 05 	lds	r24, 0x057A
     556:	90 91 7b 05 	lds	r25, 0x057B
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 b8 05 	sts	0x05B8, r24
    	syncOFF = 0;
     566:	10 92 d7 05 	sts	0x05D7, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 7a 05 	lds	r24, 0x057A
     56e:	90 91 7b 05 	lds	r25, 0x057B
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 b8 05 	sts	0x05B8, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 d7 05 	sts	0x05D7, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 7a 05 	lds	r24, 0x057A
     586:	90 91 7b 05 	lds	r25, 0x057B
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 7b 05 	sts	0x057B, r25
     598:	80 93 7a 05 	sts	0x057A, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 d7 05 	lds	r24, 0x05D7
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 7a 05 	lds	r24, 0x057A
     5ac:	90 91 7b 05 	lds	r25, 0x057B
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 7a 05 	lds	r24, 0x057A
     5ba:	90 91 7b 05 	lds	r25, 0x057B
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 7a 05 	lds	r24, 0x057A
     5c6:	90 91 7b 05 	lds	r25, 0x057B
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(8);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	e7 5c       	subi	r30, 0xC7	; 199
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	e5 5c       	subi	r30, 0xC5	; 197
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     6a2:	80 5a       	subi	r24, 0xA0	; 160
     6a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	80 83       	st	Z, r24
end
     6b0:	08 95       	ret

000006b2 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     6b6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     6ba:	10 92 7a 00 	sts	0x007A, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     6c4:	87 e8       	ldi	r24, 0x87	; 135
     6c6:	80 93 7a 00 	sts	0x007A, r24
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     6ca:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     6cc:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     6d8:	80 ec       	ldi	r24, 0xC0	; 192
     6da:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	10 93 c5 00 	sts	0x00C5, r17
     6e6:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	//LCD_init();
	port_init();
	USART_init();
	timer1_init();
     6ea:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     6ee:	10 93 7b 05 	sts	0x057B, r17
     6f2:	00 93 7a 05 	sts	0x057A, r16

	syncON = 0b00000000;
     6f6:	10 92 b8 05 	sts	0x05B8, r1
	syncOFF = 0b00000001;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 d7 05 	sts	0x05D7, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++) is_on_screen[n] = 0;
     704:	fc 01       	movw	r30, r24
     706:	e6 5d       	subi	r30, 0xD6	; 214
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	10 82       	st	Z, r1
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	8f 30       	cpi	r24, 0x0F	; 15
     710:	91 05       	cpc	r25, r1
     712:	c1 f7       	brne	.-16     	; 0x704 <initialize+0x52>
     714:	e9 e3       	ldi	r30, 0x39	; 57
     716:	f1 e0       	ldi	r31, 0x01	; 1
	for(int y=0; y<screen_array_size;y++) screen[y] = 0;
     718:	11 92       	st	Z+, r1
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	e9 33       	cpi	r30, 0x39	; 57
     71e:	f8 07       	cpc	r31, r24
     720:	d9 f7       	brne	.-10     	; 0x718 <initialize+0x66>

	// Set up single video line timing
	sei();
     722:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     724:	83 b7       	in	r24, 0x33	; 51
     726:	81 7f       	andi	r24, 0xF1	; 241
     728:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     72a:	83 b7       	in	r24, 0x33	; 51
     72c:	81 60       	ori	r24, 0x01	; 1
     72e:	83 bf       	out	0x33, r24	; 51

end
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     736:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	34 e0       	ldi	r19, 0x04	; 4
     73c:	66 0f       	add	r22, r22
     73e:	77 1f       	adc	r23, r23
     740:	3a 95       	dec	r19
     742:	e1 f7       	brne	.-8      	; 0x73c <video_pt+0x6>
     744:	86 95       	lsr	r24
     746:	86 95       	lsr	r24
     748:	86 95       	lsr	r24
     74a:	68 0f       	add	r22, r24
     74c:	71 1d       	adc	r23, r1

	if (c==1)
     74e:	41 30       	cpi	r20, 0x01	; 1
     750:	69 f4       	brne	.+26     	; 0x76c <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     752:	db 01       	movw	r26, r22
     754:	a7 5c       	subi	r26, 0xC7	; 199
     756:	be 4f       	sbci	r27, 0xFE	; 254
     758:	e9 2f       	mov	r30, r25
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e7 70       	andi	r30, 0x07	; 7
     75e:	f0 70       	andi	r31, 0x00	; 0
     760:	e1 5e       	subi	r30, 0xE1	; 225
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	8c 91       	ld	r24, X
     766:	90 81       	ld	r25, Z
     768:	89 2b       	or	r24, r25
     76a:	17 c0       	rjmp	.+46     	; 0x79a <video_pt+0x64>
     76c:	db 01       	movw	r26, r22
     76e:	a7 5c       	subi	r26, 0xC7	; 199
     770:	be 4f       	sbci	r27, 0xFE	; 254
     772:	e9 2f       	mov	r30, r25
     774:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     776:	44 23       	and	r20, r20
     778:	49 f4       	brne	.+18     	; 0x78c <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     77a:	e7 70       	andi	r30, 0x07	; 7
     77c:	f0 70       	andi	r31, 0x00	; 0
     77e:	e1 5e       	subi	r30, 0xE1	; 225
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	90 81       	ld	r25, Z
     784:	90 95       	com	r25
     786:	8c 91       	ld	r24, X
     788:	89 23       	and	r24, r25
     78a:	07 c0       	rjmp	.+14     	; 0x79a <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     78c:	e7 70       	andi	r30, 0x07	; 7
     78e:	f0 70       	andi	r31, 0x00	; 0
     790:	e1 5e       	subi	r30, 0xE1	; 225
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	8c 91       	ld	r24, X
     796:	90 81       	ld	r25, Z
     798:	89 27       	eor	r24, r25
     79a:	8c 93       	st	X, r24
     79c:	08 95       	ret

0000079e <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     79e:	2f 92       	push	r2
     7a0:	3f 92       	push	r3
     7a2:	4f 92       	push	r4
     7a4:	5f 92       	push	r5
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <video_line+0x26>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <video_line+0x28>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     7cc:	c8 2e       	mov	r12, r24
     7ce:	dd 24       	eor	r13, r13
	y = y1;
     7d0:	e6 2e       	mov	r14, r22
     7d2:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     7d4:	48 17       	cp	r20, r24
     7d6:	38 f4       	brcc	.+14     	; 0x7e6 <video_line+0x48>
		dx = x1 - x2;
     7d8:	c6 01       	movw	r24, r12
     7da:	84 1b       	sub	r24, r20
     7dc:	91 09       	sbc	r25, r1
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	7f ef       	ldi	r23, 0xFF	; 255
     7e4:	0d c0       	rjmp	.+26     	; 0x800 <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     7e6:	48 17       	cp	r20, r24
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <video_line+0x54>
     7ea:	1c 82       	std	Y+4, r1	; 0x04
     7ec:	1b 82       	std	Y+3, r1	; 0x03
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     7f2:	e4 2f       	mov	r30, r20
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	ec 19       	sub	r30, r12
     7f8:	fd 09       	sbc	r31, r13
     7fa:	fc 83       	std	Y+4, r31	; 0x04
     7fc:	eb 83       	std	Y+3, r30	; 0x03
     7fe:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     800:	26 17       	cp	r18, r22
     802:	28 f4       	brcc	.+10     	; 0x80e <video_line+0x70>
		dy = y1 - y2;
     804:	a7 01       	movw	r20, r14
     806:	42 1b       	sub	r20, r18
     808:	51 09       	sbc	r21, r1
     80a:	6f ef       	ldi	r22, 0xFF	; 255
     80c:	0b c0       	rjmp	.+22     	; 0x824 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     80e:	26 17       	cp	r18, r22
     810:	21 f4       	brne	.+8      	; 0x81a <video_line+0x7c>
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     81a:	42 2f       	mov	r20, r18
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	4e 19       	sub	r20, r14
     820:	5f 09       	sbc	r21, r15
     822:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	84 17       	cp	r24, r20
     82a:	95 07       	cpc	r25, r21
     82c:	44 f4       	brge	.+16     	; 0x83e <video_line+0xa0>
     82e:	ca 01       	movw	r24, r20
     830:	4b 81       	ldd	r20, Y+3	; 0x03
     832:	5c 81       	ldd	r21, Y+4	; 0x04
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	99 83       	std	Y+1, r25	; 0x01
     83c:	01 c0       	rjmp	.+2      	; 0x840 <video_line+0xa2>
     83e:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     840:	2a 01       	movw	r4, r20
     842:	44 0c       	add	r4, r4
     844:	55 1c       	adc	r5, r5
     846:	82 01       	movw	r16, r4
     848:	eb 81       	ldd	r30, Y+3	; 0x03
     84a:	fc 81       	ldd	r31, Y+4	; 0x04
     84c:	0e 1b       	sub	r16, r30
     84e:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     850:	1f 01       	movw	r2, r30
     852:	22 0c       	add	r2, r2
     854:	33 1c       	adc	r3, r3
     856:	aa 24       	eor	r10, r10
     858:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     85a:	66 2e       	mov	r6, r22
     85c:	77 24       	eor	r7, r7
     85e:	67 fc       	sbrc	r6, 7
     860:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     862:	87 2e       	mov	r8, r23
     864:	99 24       	eor	r9, r9
     866:	87 fc       	sbrc	r8, 7
     868:	90 94       	com	r9
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     86c:	8c 2d       	mov	r24, r12
     86e:	6e 2d       	mov	r22, r14
     870:	4a 81       	ldd	r20, Y+2	; 0x02
     872:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
		 
		if (e>=0) {
     876:	17 fd       	sbrc	r17, 7
     878:	0a c0       	rjmp	.+20     	; 0x88e <video_line+0xf0>
			if (xchange==1) x = x + s1;
     87a:	f9 81       	ldd	r31, Y+1	; 0x01
     87c:	f1 30       	cpi	r31, 0x01	; 1
     87e:	19 f4       	brne	.+6      	; 0x886 <video_line+0xe8>
     880:	c8 0c       	add	r12, r8
     882:	d9 1c       	adc	r13, r9
     884:	02 c0       	rjmp	.+4      	; 0x88a <video_line+0xec>
			else y = y + s2;
     886:	e6 0c       	add	r14, r6
     888:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     88a:	02 19       	sub	r16, r2
     88c:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	19 f4       	brne	.+6      	; 0x89a <video_line+0xfc>
     894:	e6 0c       	add	r14, r6
     896:	f7 1c       	adc	r15, r7
     898:	02 c0       	rjmp	.+4      	; 0x89e <video_line+0x100>
		else x = x + s1;
     89a:	c8 0c       	add	r12, r8
     89c:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     89e:	04 0d       	add	r16, r4
     8a0:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     8a2:	08 94       	sec
     8a4:	a1 1c       	adc	r10, r1
     8a6:	b1 1c       	adc	r11, r1
     8a8:	eb 81       	ldd	r30, Y+3	; 0x03
     8aa:	fc 81       	ldd	r31, Y+4	; 0x04
     8ac:	ea 15       	cp	r30, r10
     8ae:	fb 05       	cpc	r31, r11
     8b0:	ec f6       	brge	.-70     	; 0x86c <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	bf 90       	pop	r11
     8cc:	af 90       	pop	r10
     8ce:	9f 90       	pop	r9
     8d0:	8f 90       	pop	r8
     8d2:	7f 90       	pop	r7
     8d4:	6f 90       	pop	r6
     8d6:	5f 90       	pop	r5
     8d8:	4f 90       	pop	r4
     8da:	3f 90       	pop	r3
     8dc:	2f 90       	pop	r2
     8de:	08 95       	ret

000008e0 <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	e8 2e       	mov	r14, r24
     8fa:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	48 9f       	mul	r20, r24
     900:	a0 01       	movw	r20, r0
     902:	11 24       	eor	r1, r1
     904:	ea 01       	movw	r28, r20
     906:	c8 5e       	subi	r28, 0xE8	; 232
     908:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     90a:	8e 2c       	mov	r8, r14
     90c:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     90e:	02 e0       	ldi	r16, 0x02	; 2
     910:	90 2e       	mov	r9, r16
     912:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     914:	13 e0       	ldi	r17, 0x03	; 3
     916:	a1 2e       	mov	r10, r17
     918:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     91a:	b4 e0       	ldi	r27, 0x04	; 4
     91c:	bb 2e       	mov	r11, r27
     91e:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     920:	af e1       	ldi	r26, 0x1F	; 31
     922:	ca 2e       	mov	r12, r26
     924:	a1 e0       	ldi	r26, 0x01	; 1
     926:	da 2e       	mov	r13, r26
     928:	c4 0e       	add	r12, r20
     92a:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     92c:	fe 01       	movw	r30, r28
     92e:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     930:	40 2f       	mov	r20, r16
     932:	44 1f       	adc	r20, r20
     934:	44 27       	eor	r20, r20
     936:	44 1f       	adc	r20, r20
     938:	8e 2d       	mov	r24, r14
     93a:	6f 2d       	mov	r22, r15
     93c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	a8 01       	movw	r20, r16
     944:	f6 e0       	ldi	r31, 0x06	; 6
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	fa 95       	dec	r31
     94c:	e1 f7       	brne	.-8      	; 0x946 <video_putchar+0x66>
     94e:	41 70       	andi	r20, 0x01	; 1
     950:	88 2d       	mov	r24, r8
     952:	6f 2d       	mov	r22, r15
     954:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     958:	a8 01       	movw	r20, r16
     95a:	e5 e0       	ldi	r30, 0x05	; 5
     95c:	56 95       	lsr	r21
     95e:	47 95       	ror	r20
     960:	ea 95       	dec	r30
     962:	e1 f7       	brne	.-8      	; 0x95c <video_putchar+0x7c>
     964:	41 70       	andi	r20, 0x01	; 1
     966:	89 2d       	mov	r24, r9
     968:	6f 2d       	mov	r22, r15
     96a:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     96e:	a8 01       	movw	r20, r16
     970:	74 e0       	ldi	r23, 0x04	; 4
     972:	56 95       	lsr	r21
     974:	47 95       	ror	r20
     976:	7a 95       	dec	r23
     978:	e1 f7       	brne	.-8      	; 0x972 <video_putchar+0x92>
     97a:	41 70       	andi	r20, 0x01	; 1
     97c:	8a 2d       	mov	r24, r10
     97e:	6f 2d       	mov	r22, r15
     980:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     984:	63 e0       	ldi	r22, 0x03	; 3
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	6a 95       	dec	r22
     98c:	e1 f7       	brne	.-8      	; 0x986 <video_putchar+0xa6>
     98e:	01 70       	andi	r16, 0x01	; 1
     990:	8b 2d       	mov	r24, r11
     992:	6f 2d       	mov	r22, r15
     994:	40 2f       	mov	r20, r16
     996:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     99e:	cc 15       	cp	r28, r12
     9a0:	dd 05       	cpc	r29, r13
     9a2:	21 f6       	brne	.-120    	; 0x92c <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	08 95       	ret

000009be <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	08 2f       	mov	r16, r24
     9ca:	f6 2e       	mov	r15, r22
     9cc:	ea 01       	movw	r28, r20
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     9d2:	80 2f       	mov	r24, r16
     9d4:	6f 2d       	mov	r22, r15
     9d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <video_putchar>
		x = x+6;	
     9da:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     9dc:	1f 5f       	subi	r17, 0xFF	; 255
     9de:	fe 01       	movw	r30, r28
     9e0:	e1 0f       	add	r30, r17
     9e2:	f1 1d       	adc	r31, r1
     9e4:	40 81       	ld	r20, Z
     9e6:	44 23       	and	r20, r20
     9e8:	a1 f7       	brne	.-24     	; 0x9d2 <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	08 95       	ret

000009f6 <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     9f6:	e6 2f       	mov	r30, r22
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	28 2f       	mov	r18, r24
     9fc:	26 95       	lsr	r18
     9fe:	26 95       	lsr	r18
     a00:	26 95       	lsr	r18
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	9a 95       	dec	r25
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <video_set+0xe>
     a0c:	e2 0f       	add	r30, r18
     a0e:	f1 1d       	adc	r31, r1
     a10:	e7 5c       	subi	r30, 0xC7	; 199
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 95       	com	r24
     a18:	90 95       	com	r25
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	90 70       	andi	r25, 0x00	; 0
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <video_set+0x32>
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	8a 95       	dec	r24
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <video_set+0x2e>
     a2c:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     a2e:	82 23       	and	r24, r18
     a30:	08 95       	ret

00000a32 <remove_ball>:


//////////////////////////////////////////////////////////////////////////////

void remove_ball(int i)
begin
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
	video_pt(x_pos[i]+1,y_pos[i],0);
     a3a:	8c 01       	movw	r16, r24
     a3c:	00 0f       	add	r16, r16
     a3e:	11 1f       	adc	r17, r17
     a40:	2b e4       	ldi	r18, 0x4B	; 75
     a42:	e2 2e       	mov	r14, r18
     a44:	25 e0       	ldi	r18, 0x05	; 5
     a46:	f2 2e       	mov	r15, r18
     a48:	e0 0e       	add	r14, r16
     a4a:	f1 1e       	adc	r15, r17
     a4c:	f7 01       	movw	r30, r14
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	07 54       	subi	r16, 0x47	; 71
     a54:	1a 4f       	sbci	r17, 0xFA	; 250
     a56:	f8 01       	movw	r30, r16
     a58:	60 81       	ld	r22, Z
     a5a:	71 81       	ldd	r23, Z+1	; 0x01
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i],0);
     a64:	f7 01       	movw	r30, r14
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	f8 01       	movw	r30, r16
     a6c:	60 81       	ld	r22, Z
     a6e:	71 81       	ldd	r23, Z+1	; 0x01
     a70:	8e 5f       	subi	r24, 0xFE	; 254
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+1,0);
     a78:	f7 01       	movw	r30, r14
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	f8 01       	movw	r30, r16
     a80:	60 81       	ld	r22, Z
     a82:	71 81       	ldd	r23, Z+1	; 0x01
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+2,0);
     a8c:	f7 01       	movw	r30, r14
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	f8 01       	movw	r30, r16
     a94:	60 81       	ld	r22, Z
     a96:	71 81       	ldd	r23, Z+1	; 0x01
     a98:	6e 5f       	subi	r22, 0xFE	; 254
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+1,0);
     aa0:	f7 01       	movw	r30, r14
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	f8 01       	movw	r30, r16
     aa8:	60 81       	ld	r22, Z
     aaa:	71 81       	ldd	r23, Z+1	; 0x01
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	8d 5f       	subi	r24, 0xFD	; 253
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+2,0);
     ab6:	f7 01       	movw	r30, r14
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	f8 01       	movw	r30, r16
     abe:	60 81       	ld	r22, Z
     ac0:	71 81       	ldd	r23, Z+1	; 0x01
     ac2:	6e 5f       	subi	r22, 0xFE	; 254
     ac4:	8d 5f       	subi	r24, 0xFD	; 253
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+1,y_pos[i]+3,0);
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	f8 01       	movw	r30, r16
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	6d 5f       	subi	r22, 0xFD	; 253
     ada:	8f 5f       	subi	r24, 0xFF	; 255
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i]+3,0);
     ae2:	f7 01       	movw	r30, r14
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	f8 01       	movw	r30, r16
     aea:	60 81       	ld	r22, Z
     aec:	71 81       	ldd	r23, Z+1	; 0x01
     aee:	6d 5f       	subi	r22, 0xFD	; 253
     af0:	8e 5f       	subi	r24, 0xFE	; 254
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
end
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	08 95       	ret

00000b02 <place_ball>:

void place_ball(int i)
begin
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
	video_pt(x_pos[i]+1,y_pos[i],1);
     b0a:	8c 01       	movw	r16, r24
     b0c:	00 0f       	add	r16, r16
     b0e:	11 1f       	adc	r17, r17
     b10:	4b e4       	ldi	r20, 0x4B	; 75
     b12:	e4 2e       	mov	r14, r20
     b14:	45 e0       	ldi	r20, 0x05	; 5
     b16:	f4 2e       	mov	r15, r20
     b18:	e0 0e       	add	r14, r16
     b1a:	f1 1e       	adc	r15, r17
     b1c:	f7 01       	movw	r30, r14
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	07 54       	subi	r16, 0x47	; 71
     b24:	1a 4f       	sbci	r17, 0xFA	; 250
     b26:	f8 01       	movw	r30, r16
     b28:	60 81       	ld	r22, Z
     b2a:	71 81       	ldd	r23, Z+1	; 0x01
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i],1);
     b34:	f7 01       	movw	r30, r14
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	f8 01       	movw	r30, r16
     b3c:	60 81       	ld	r22, Z
     b3e:	71 81       	ldd	r23, Z+1	; 0x01
     b40:	8e 5f       	subi	r24, 0xFE	; 254
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+1,1);
     b48:	f7 01       	movw	r30, r14
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	f8 01       	movw	r30, r16
     b50:	60 81       	ld	r22, Z
     b52:	71 81       	ldd	r23, Z+1	; 0x01
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+2,1);
     b5c:	f7 01       	movw	r30, r14
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	f8 01       	movw	r30, r16
     b64:	60 81       	ld	r22, Z
     b66:	71 81       	ldd	r23, Z+1	; 0x01
     b68:	6e 5f       	subi	r22, 0xFE	; 254
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+1,1);
     b70:	f7 01       	movw	r30, r14
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	f8 01       	movw	r30, r16
     b78:	60 81       	ld	r22, Z
     b7a:	71 81       	ldd	r23, Z+1	; 0x01
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	8d 5f       	subi	r24, 0xFD	; 253
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+2,1);
     b86:	f7 01       	movw	r30, r14
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	f8 01       	movw	r30, r16
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	6e 5f       	subi	r22, 0xFE	; 254
     b94:	8d 5f       	subi	r24, 0xFD	; 253
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+1,y_pos[i]+3,1);
     b9c:	f7 01       	movw	r30, r14
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	f8 01       	movw	r30, r16
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	6d 5f       	subi	r22, 0xFD	; 253
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i]+3,1);
     bb2:	f7 01       	movw	r30, r14
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	f8 01       	movw	r30, r16
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	6d 5f       	subi	r22, 0xFD	; 253
     bc0:	8e 5f       	subi	r24, 0xFE	; 254
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
end
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	08 95       	ret

00000bd2 <add_ball>:

// adds a ball to the screen
void add_ball(void)
begin
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <add_ball+0xa>
	int i = 0;
	while(is_on_screen[i]) i++;
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	f9 01       	movw	r30, r18
     bde:	e6 5d       	subi	r30, 0xD6	; 214
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	c1 f7       	brne	.-16     	; 0xbd8 <add_ball+0x6>
	i--;
     be8:	c9 01       	movw	r24, r18
     bea:	01 97       	sbiw	r24, 0x01	; 1
	is_on_screen[i] = 1;
     bec:	fc 01       	movw	r30, r24
     bee:	e6 5d       	subi	r30, 0xD6	; 214
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	20 83       	st	Z, r18
	x_pos[i] = 123;
     bf6:	fc 01       	movw	r30, r24
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	df 01       	movw	r26, r30
     bfe:	a5 5b       	subi	r26, 0xB5	; 181
     c00:	ba 4f       	sbci	r27, 0xFA	; 250
     c02:	2b e7       	ldi	r18, 0x7B	; 123
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	3c 93       	st	X, r19
     c0a:	2e 93       	st	-X, r18
	y_pos[i] = 14;
     c0c:	df 01       	movw	r26, r30
     c0e:	a7 54       	subi	r26, 0x47	; 71
     c10:	ba 4f       	sbci	r27, 0xFA	; 250
     c12:	2e e0       	ldi	r18, 0x0E	; 14
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	11 96       	adiw	r26, 0x01	; 1
     c18:	3c 93       	st	X, r19
     c1a:	2e 93       	st	-X, r18
	x_velocity[i] = 0xe200; 
     c1c:	df 01       	movw	r26, r30
     c1e:	a4 58       	subi	r26, 0x84	; 132
     c20:	ba 4f       	sbci	r27, 0xFA	; 250
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	32 ee       	ldi	r19, 0xE2	; 226
     c26:	11 96       	adiw	r26, 0x01	; 1
     c28:	3c 93       	st	X, r19
     c2a:	2e 93       	st	-X, r18
	y_velocity[i] = 0x0300;
     c2c:	e6 56       	subi	r30, 0x66	; 102
     c2e:	fa 4f       	sbci	r31, 0xFA	; 250
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	33 e0       	ldi	r19, 0x03	; 3
     c34:	31 83       	std	Z+1, r19	; 0x01
     c36:	20 83       	st	Z, r18
	place_ball(i);
     c38:	0e 94 81 05 	call	0xb02	; 0xb02 <place_ball>
end
     c3c:	08 95       	ret

00000c3e <main>:

int main(void)
begin
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	29 97       	sbiw	r28, 0x09	; 9
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61

	unsigned char time_str[3];
	unsigned char score_str[3];


	initialize();
     c72:	0e 94 59 03 	call	0x6b2	; 0x6b2 <initialize>
	
	video_line(width,0,width,height,1);
     c76:	8f e7       	ldi	r24, 0x7F	; 127
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	4f e7       	ldi	r20, 0x7F	; 127
     c7c:	2f e3       	ldi	r18, 0x3F	; 63
     c7e:	01 e0       	ldi	r16, 0x01	; 1
     c80:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_line(0,0,width,0,1);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	4f e7       	ldi	r20, 0x7F	; 127
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_line(0,height,width-17,height,1);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	6f e3       	ldi	r22, 0x3F	; 63
     c94:	4e e6       	ldi	r20, 0x6E	; 110
     c96:	2f e3       	ldi	r18, 0x3F	; 63
     c98:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_pt(40,1,1);
     c9c:	88 e2       	ldi	r24, 0x28	; 40
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(80,1,1);
     ca6:	80 e5       	ldi	r24, 0x50	; 80
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(40,height-1,1);
     cb0:	88 e2       	ldi	r24, 0x28	; 40
     cb2:	6e e3       	ldi	r22, 0x3E	; 62
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(80,height-1,1);
     cba:	80 e5       	ldi	r24, 0x50	; 80
     cbc:	6e e3       	ldi	r22, 0x3E	; 62
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
     cc4:	33 24       	eor	r3, r3
     cc6:	19 86       	std	Y+9, r1	; 0x09
     cc8:	22 e0       	ldi	r18, 0x02	; 2
     cca:	e2 2e       	mov	r14, r18
     ccc:	44 24       	eor	r4, r4
     cce:	55 24       	eor	r5, r5
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <main+0x98>
     cd2:	2e 2c       	mov	r2, r14
     cd4:	e2 2c       	mov	r14, r2

	// guide for the real code
	while(time_elapsed_HS<=200)
	begin
		if (LineCount == ScreenBot)
     cd6:	80 91 7a 05 	lds	r24, 0x057A
     cda:	90 91 7b 05 	lds	r25, 0x057B
     cde:	8d 36       	cpi	r24, 0x6D	; 109
     ce0:	91 05       	cpc	r25, r1
     ce2:	b9 f7       	brne	.-18     	; 0xcd2 <main+0x94>
		begin

			// 1. Timing and ball addition
			frame_count++;
     ce4:	08 94       	sec
     ce6:	41 1c       	adc	r4, r1
     ce8:	51 1c       	adc	r5, r1
			if (frame_count >= 30)
     cea:	2e e1       	ldi	r18, 0x1E	; 30
     cec:	42 16       	cp	r4, r18
     cee:	51 04       	cpc	r5, r1
     cf0:	84 f1       	brlt	.+96     	; 0xd52 <main+0x114>
			begin
				add_ball();
     cf2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <add_ball>

				frame_count = 0;
				time_elapsed_HS++; 
     cf6:	39 85       	ldd	r19, Y+9	; 0x09
     cf8:	3f 5f       	subi	r19, 0xFF	; 255
     cfa:	39 87       	std	Y+9, r19	; 0x09
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <main+0xc0>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <main+0xc2>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <main+0xc4>
     d02:	ed b7       	in	r30, 0x3d	; 61
     d04:	fe b7       	in	r31, 0x3e	; 62
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	21 e0       	ldi	r18, 0x01	; 1
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	2c 0f       	add	r18, r28
     d0e:	3d 1f       	adc	r19, r29
     d10:	ad b7       	in	r26, 0x3d	; 61
     d12:	be b7       	in	r27, 0x3e	; 62
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	3c 93       	st	X, r19
     d18:	2e 93       	st	-X, r18
     d1a:	11 97       	sbiw	r26, 0x01	; 1
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	93 83       	std	Z+3, r25	; 0x03
     d22:	82 83       	std	Z+2, r24	; 0x02
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	86 95       	lsr	r24
     d28:	84 83       	std	Z+4, r24	; 0x04
     d2a:	15 82       	std	Z+5, r1	; 0x05
     d2c:	0e 94 0e 0a 	call	0x141c	; 0x141c <sprintf>
				video_puts(110,57,time_str);
     d30:	ad b7       	in	r26, 0x3d	; 61
     d32:	be b7       	in	r27, 0x3e	; 62
     d34:	16 96       	adiw	r26, 0x06	; 6
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	be bf       	out	0x3e, r27	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	ad bf       	out	0x3d, r26	; 61
     d40:	8e e6       	ldi	r24, 0x6E	; 110
     d42:	69 e3       	ldi	r22, 0x39	; 57
     d44:	ae 01       	movw	r20, r28
     d46:	4f 5f       	subi	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
     d4e:	44 24       	eor	r4, r4
     d50:	55 24       	eor	r5, r5
			end

			// 2. update positions for the paddle
				video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     d52:	1e 2d       	mov	r17, r14
     d54:	18 5f       	subi	r17, 0xF8	; 248
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	6e 2d       	mov	r22, r14
     d5a:	42 e0       	ldi	r20, 0x02	; 2
     d5c:	21 2f       	mov	r18, r17
     d5e:	00 e0       	ldi	r16, 0x00	; 0
     d60:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	6e 2d       	mov	r22, r14
     d68:	43 e0       	ldi	r20, 0x03	; 3
     d6a:	21 2f       	mov	r18, r17
     d6c:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				prev_top = top_of_paddle;
				top_of_paddle =(ADCH*53/255)+1;
     d70:	80 91 79 00 	lds	r24, 0x0079
     d74:	b5 e3       	ldi	r27, 0x35	; 53
     d76:	8b 9f       	mul	r24, r27
     d78:	c0 01       	movw	r24, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	6f ef       	ldi	r22, 0xFF	; 255
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__divmodhi4>
     d84:	16 2f       	mov	r17, r22
     d86:	26 2e       	mov	r2, r22
     d88:	23 94       	inc	r2
				v_paddle_y = top_of_paddle-prev_top;
     d8a:	62 2c       	mov	r6, r2
     d8c:	77 24       	eor	r7, r7
     d8e:	f3 01       	movw	r30, r6
     d90:	ee 19       	sub	r30, r14
     d92:	f1 09       	sbc	r31, r1
     d94:	f8 87       	std	Y+8, r31	; 0x08
     d96:	ef 83       	std	Y+7, r30	; 0x07
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     d98:	17 5f       	subi	r17, 0xF7	; 247
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	62 2d       	mov	r22, r2
     d9e:	42 e0       	ldi	r20, 0x02	; 2
     da0:	21 2f       	mov	r18, r17
     da2:	01 e0       	ldi	r16, 0x01	; 1
     da4:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	62 2d       	mov	r22, r2
     dac:	43 e0       	ldi	r20, 0x03	; 3
     dae:	21 2f       	mov	r18, r17
     db0:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     db4:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     db8:	f0 e6       	ldi	r31, 0x60	; 96
     dba:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     dbe:	80 91 7a 00 	lds	r24, 0x007A
     dc2:	80 64       	ori	r24, 0x40	; 64
     dc4:	80 93 7a 00 	sts	0x007A, r24
     dc8:	88 24       	eor	r8, r8
     dca:	99 24       	eor	r9, r9
				ADC_start_measure(0);

			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
     dcc:	f4 01       	movw	r30, r8
     dce:	e6 5d       	subi	r30, 0xD6	; 214
     dd0:	fe 4f       	sbci	r31, 0xFE	; 254
     dd2:	80 81       	ld	r24, Z
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <main+0x19c>
     dd8:	cc c0       	rjmp	.+408    	; 0xf72 <main+0x334>
     dda:	c4 01       	movw	r24, r8
     ddc:	01 96       	adiw	r24, 0x01	; 1
				begin
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						if(is_on_screen[j])
     dde:	fc 01       	movw	r30, r24
     de0:	e6 5d       	subi	r30, 0xD6	; 214
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	e0 81       	ld	r30, Z
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
				begin
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	8f 30       	cpi	r24, 0x0F	; 15
     dea:	91 05       	cpc	r25, r1
     dec:	c4 f3       	brlt	.-16     	; 0xdde <main+0x1a0>
								//collision code here

							end // rij check
						end // is on screen j
					end // for j
					delta_x_velocity = multfix(x_velocity[i],0x0001);
     dee:	84 01       	movw	r16, r8
     df0:	00 0f       	add	r16, r16
     df2:	11 1f       	adc	r17, r17
     df4:	8c e7       	ldi	r24, 0x7C	; 124
     df6:	c8 2e       	mov	r12, r24
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	d8 2e       	mov	r13, r24
     dfc:	c0 0e       	add	r12, r16
     dfe:	d1 1e       	adc	r13, r17
     e00:	d6 01       	movw	r26, r12
     e02:	8d 91       	ld	r24, X+
     e04:	9c 91       	ld	r25, X
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <multfix>
     e0e:	5c 01       	movw	r10, r24
					delta_y_velocity = multfix(y_velocity[i],0x0001);
     e10:	ba e9       	ldi	r27, 0x9A	; 154
     e12:	eb 2e       	mov	r14, r27
     e14:	b5 e0       	ldi	r27, 0x05	; 5
     e16:	fb 2e       	mov	r15, r27
     e18:	e0 0e       	add	r14, r16
     e1a:	f1 1e       	adc	r15, r17
     e1c:	f7 01       	movw	r30, r14
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <multfix>
					x_velocity[i] -= delta_x_velocity;
     e2a:	d6 01       	movw	r26, r12
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	11 97       	sbiw	r26, 0x01	; 1
     e32:	2a 19       	sub	r18, r10
     e34:	3b 09       	sbc	r19, r11
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	3c 93       	st	X, r19
     e3a:	2e 93       	st	-X, r18
					y_velocity[i] -= delta_y_velocity;
     e3c:	f7 01       	movw	r30, r14
     e3e:	20 81       	ld	r18, Z
     e40:	31 81       	ldd	r19, Z+1	; 0x01
     e42:	28 1b       	sub	r18, r24
     e44:	39 0b       	sbc	r19, r25
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18


					if((x_pos[i] <= 4) & ((y_pos[i]-top_of_paddle)>0) & ((y_pos[i]-top_of_paddle)<7))
     e4a:	f8 01       	movw	r30, r16
     e4c:	e5 5b       	subi	r30, 0xB5	; 181
     e4e:	fa 4f       	sbci	r31, 0xFA	; 250
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	07 54       	subi	r16, 0x47	; 71
     e56:	1a 4f       	sbci	r17, 0xFA	; 250
     e58:	d8 01       	movw	r26, r16
     e5a:	2d 91       	ld	r18, X+
     e5c:	3c 91       	ld	r19, X
     e5e:	11 97       	sbiw	r26, 0x01	; 1
     e60:	0d 91       	ld	r16, X+
     e62:	1c 91       	ld	r17, X
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	05 97       	sbiw	r24, 0x05	; 5
     e68:	0c f4       	brge	.+2      	; 0xe6c <main+0x22e>
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	26 19       	sub	r18, r6
     e70:	37 09       	sbc	r19, r7
     e72:	12 16       	cp	r1, r18
     e74:	13 06       	cpc	r1, r19
     e76:	0c f4       	brge	.+2      	; 0xe7a <main+0x23c>
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	48 23       	and	r20, r24
     e7c:	84 2f       	mov	r24, r20
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	06 19       	sub	r16, r6
     e86:	17 09       	sbc	r17, r7
     e88:	07 30       	cpi	r16, 0x07	; 7
     e8a:	11 05       	cpc	r17, r1
     e8c:	14 f4       	brge	.+4      	; 0xe92 <main+0x254>
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	82 23       	and	r24, r18
     e94:	93 23       	and	r25, r19
     e96:	89 2b       	or	r24, r25
     e98:	b9 f0       	breq	.+46     	; 0xec8 <main+0x28a>
					begin
						x_velocity[i] |= 0x8000;
     e9a:	f4 01       	movw	r30, r8
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	df 01       	movw	r26, r30
     ea2:	a4 58       	subi	r26, 0x84	; 132
     ea4:	ba 4f       	sbci	r27, 0xFA	; 250
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	90 68       	ori	r25, 0x80	; 128
     eae:	11 96       	adiw	r26, 0x01	; 1
     eb0:	9c 93       	st	X, r25
     eb2:	8e 93       	st	-X, r24
						y_velocity[i] += v_paddle_y;
     eb4:	e6 56       	subi	r30, 0x66	; 102
     eb6:	fa 4f       	sbci	r31, 0xFA	; 250
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	2f 81       	ldd	r18, Y+7	; 0x07
     ebe:	38 85       	ldd	r19, Y+8	; 0x08
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24
					end

			// 3.2. Update position of balls

					remove_ball(i);
     ec8:	c4 01       	movw	r24, r8
     eca:	0e 94 19 05 	call	0xa32	; 0xa32 <remove_ball>


					x_pos[i] += x_velocity[i];
     ece:	d4 01       	movw	r26, r8
     ed0:	aa 0f       	add	r26, r26
     ed2:	bb 1f       	adc	r27, r27
     ed4:	8d 01       	movw	r16, r26
     ed6:	05 5b       	subi	r16, 0xB5	; 181
     ed8:	1a 4f       	sbci	r17, 0xFA	; 250
     eda:	f8 01       	movw	r30, r16
     edc:	20 81       	ld	r18, Z
     ede:	31 81       	ldd	r19, Z+1	; 0x01
     ee0:	fd 01       	movw	r30, r26
     ee2:	e4 58       	subi	r30, 0x84	; 132
     ee4:	fa 4f       	sbci	r31, 0xFA	; 250
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	f8 01       	movw	r30, r16
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
					y_pos[i] += y_velocity[i];
     ef4:	fd 01       	movw	r30, r26
     ef6:	e7 54       	subi	r30, 0x47	; 71
     ef8:	fa 4f       	sbci	r31, 0xFA	; 250
     efa:	20 81       	ld	r18, Z
     efc:	31 81       	ldd	r19, Z+1	; 0x01
     efe:	a6 56       	subi	r26, 0x66	; 102
     f00:	ba 4f       	sbci	r27, 0xFA	; 250
     f02:	8d 91       	ld	r24, X+
     f04:	9c 91       	ld	r25, X
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24

					place_ball(i);
     f0e:	c4 01       	movw	r24, r8
     f10:	0e 94 81 05 	call	0xb02	; 0xb02 <place_ball>

			// 3.3 remove balls that hit the left side of the screen or bins
					if(x_pos[i] <= 1) // hit left wall
     f14:	d8 01       	movw	r26, r16
     f16:	8d 91       	ld	r24, X+
     f18:	9c 91       	ld	r25, X
     f1a:	02 97       	sbiw	r24, 0x02	; 2
     f1c:	34 f4       	brge	.+12     	; 0xf2a <main+0x2ec>
					begin
						is_on_screen[i] = 0;
     f1e:	f4 01       	movw	r30, r8
     f20:	e6 5d       	subi	r30, 0xD6	; 214
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	10 82       	st	Z, r1
						if(score) score--;
     f26:	31 10       	cpse	r3, r1
     f28:	3a 94       	dec	r3
						// remove_ball(x_pos[q],y_pos[q]);
					end // hit left wall
					if(x_pos[i]<100 & x_pos[i]>60)
     f2a:	94 01       	movw	r18, r8
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	f9 01       	movw	r30, r18
     f32:	e5 5b       	subi	r30, 0xB5	; 181
     f34:	fa 4f       	sbci	r31, 0xFA	; 250
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	84 36       	cpi	r24, 0x64	; 100
     f42:	91 05       	cpc	r25, r1
     f44:	b4 f4       	brge	.+44     	; 0xf72 <main+0x334>
     f46:	fd 97       	sbiw	r30, 0x3d	; 61
     f48:	a4 f0       	brlt	.+40     	; 0xf72 <main+0x334>
					begin
						if(y_pos[i]<=1 | y_pos[i]>=(height-2))
     f4a:	f9 01       	movw	r30, r18
     f4c:	e7 54       	subi	r30, 0x47	; 71
     f4e:	fa 4f       	sbci	r31, 0xFA	; 250
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 90       	ld	r0, Z+
     f56:	f0 81       	ld	r31, Z
     f58:	e0 2d       	mov	r30, r0
     f5a:	02 97       	sbiw	r24, 0x02	; 2
     f5c:	14 f0       	brlt	.+4      	; 0xf62 <main+0x324>
     f5e:	fd 97       	sbiw	r30, 0x3d	; 61
     f60:	44 f0       	brlt	.+16     	; 0xf72 <main+0x334>
						begin
							is_on_screen[i] = 0;
     f62:	f4 01       	movw	r30, r8
     f64:	e6 5d       	subi	r30, 0xD6	; 214
     f66:	fe 4f       	sbci	r31, 0xFE	; 254
     f68:	10 82       	st	Z, r1
							score++;
     f6a:	33 94       	inc	r3
							remove_ball(i);
     f6c:	c4 01       	movw	r24, r8
     f6e:	0e 94 19 05 	call	0xa32	; 0xa32 <remove_ball>
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
				ADC_start_measure(0);

			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
     f72:	08 94       	sec
     f74:	81 1c       	adc	r8, r1
     f76:	91 1c       	adc	r9, r1
     f78:	be e0       	ldi	r27, 0x0E	; 14
     f7a:	8b 16       	cp	r8, r27
     f7c:	91 04       	cpc	r9, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <main+0x344>
     f80:	25 cf       	rjmp	.-438    	; 0xdcc <main+0x18e>
					end // x check bins
				end // is on screen i
			end // for i

			// 5. update text (score, time...)
			sprintf(score_str, "%3d",score);
     f82:	00 d0       	rcall	.+0      	; 0xf84 <main+0x346>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <main+0x348>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <main+0x34a>
     f88:	ed b7       	in	r30, 0x3d	; 61
     f8a:	fe b7       	in	r31, 0x3e	; 62
     f8c:	31 96       	adiw	r30, 0x01	; 1
     f8e:	24 e0       	ldi	r18, 0x04	; 4
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	2c 0f       	add	r18, r28
     f94:	3d 1f       	adc	r19, r29
     f96:	ad b7       	in	r26, 0x3d	; 61
     f98:	be b7       	in	r27, 0x3e	; 62
     f9a:	12 96       	adiw	r26, 0x02	; 2
     f9c:	3c 93       	st	X, r19
     f9e:	2e 93       	st	-X, r18
     fa0:	11 97       	sbiw	r26, 0x01	; 1
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	93 83       	std	Z+3, r25	; 0x03
     fa8:	82 83       	std	Z+2, r24	; 0x02
     faa:	34 82       	std	Z+4, r3	; 0x04
     fac:	15 82       	std	Z+5, r1	; 0x05
     fae:	0e 94 0e 0a 	call	0x141c	; 0x141c <sprintf>
			video_puts(110,1,score_str);
     fb2:	ad b7       	in	r26, 0x3d	; 61
     fb4:	be b7       	in	r27, 0x3e	; 62
     fb6:	16 96       	adiw	r26, 0x06	; 6
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	be bf       	out	0x3e, r27	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	ad bf       	out	0x3d, r26	; 61
     fc2:	8e e6       	ldi	r24, 0x6E	; 110
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	ae 01       	movw	r20, r28
     fc8:	4c 5f       	subi	r20, 0xFC	; 252
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
	video_pt(80,1,1);
	video_pt(40,height-1,1);
	video_pt(80,height-1,1);

	// guide for the real code
	while(time_elapsed_HS<=200)
     fd0:	b9 85       	ldd	r27, Y+9	; 0x09
     fd2:	b9 3c       	cpi	r27, 0xC9	; 201
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <main+0x39a>
     fd6:	7e ce       	rjmp	.-772    	; 0xcd4 <main+0x96>
		end // linecount == screenBot
	end // while time < 200

	while(1)
	begin
		sprintf(score_str, "%i",score);
     fd8:	8e 01       	movw	r16, r28
     fda:	0c 5f       	subi	r16, 0xFC	; 252
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	74 e0       	ldi	r23, 0x04	; 4
     fe0:	87 2e       	mov	r8, r23
     fe2:	71 e0       	ldi	r23, 0x01	; 1
     fe4:	97 2e       	mov	r9, r23
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <main+0x3aa>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <main+0x3ac>
     fea:	00 d0       	rcall	.+0      	; 0xfec <main+0x3ae>
     fec:	ed b7       	in	r30, 0x3d	; 61
     fee:	fe b7       	in	r31, 0x3e	; 62
     ff0:	31 96       	adiw	r30, 0x01	; 1
     ff2:	ad b7       	in	r26, 0x3d	; 61
     ff4:	be b7       	in	r27, 0x3e	; 62
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	1c 93       	st	X, r17
     ffa:	0e 93       	st	-X, r16
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	93 82       	std	Z+3, r9	; 0x03
    1000:	82 82       	std	Z+2, r8	; 0x02
    1002:	34 82       	std	Z+4, r3	; 0x04
    1004:	15 82       	std	Z+5, r1	; 0x05
    1006:	0e 94 0e 0a 	call	0x141c	; 0x141c <sprintf>
		video_puts(30,30,"Time Is Up!");
    100a:	ed b7       	in	r30, 0x3d	; 61
    100c:	fe b7       	in	r31, 0x3e	; 62
    100e:	36 96       	adiw	r30, 0x06	; 6
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	fe bf       	out	0x3e, r31	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	ed bf       	out	0x3d, r30	; 61
    101a:	8e e1       	ldi	r24, 0x1E	; 30
    101c:	6e e1       	ldi	r22, 0x1E	; 30
    101e:	47 e0       	ldi	r20, 0x07	; 7
    1020:	51 e0       	ldi	r21, 0x01	; 1
    1022:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
		video_puts(30,42,"Your score:");
    1026:	8e e1       	ldi	r24, 0x1E	; 30
    1028:	6a e2       	ldi	r22, 0x2A	; 42
    102a:	43 e1       	ldi	r20, 0x13	; 19
    102c:	51 e0       	ldi	r21, 0x01	; 1
    102e:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
		video_puts(100,42,score_str);
    1032:	84 e6       	ldi	r24, 0x64	; 100
    1034:	6a e2       	ldi	r22, 0x2A	; 42
    1036:	a8 01       	movw	r20, r16
    1038:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
    103c:	d4 cf       	rjmp	.-88     	; 0xfe6 <main+0x3a8>

0000103e <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
    1042:	00 d0       	rcall	.+0      	; 0x1044 <write_LCD+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <write_LCD+0x8>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <write_LCD+0xa>
    1048:	ed b7       	in	r30, 0x3d	; 61
    104a:	fe b7       	in	r31, 0x3e	; 62
    104c:	31 96       	adiw	r30, 0x01	; 1
    104e:	09 e3       	ldi	r16, 0x39	; 57
    1050:	15 e0       	ldi	r17, 0x05	; 5
    1052:	ad b7       	in	r26, 0x3d	; 61
    1054:	be b7       	in	r27, 0x3e	; 62
    1056:	12 96       	adiw	r26, 0x02	; 2
    1058:	1c 93       	st	X, r17
    105a:	0e 93       	st	-X, r16
    105c:	11 97       	sbiw	r26, 0x01	; 1
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	31 e0       	ldi	r19, 0x01	; 1
    1062:	33 83       	std	Z+3, r19	; 0x03
    1064:	22 83       	std	Z+2, r18	; 0x02
    1066:	84 83       	std	Z+4, r24	; 0x04
    1068:	15 82       	std	Z+5, r1	; 0x05
    106a:	0e 94 0e 0a 	call	0x141c	; 0x141c <sprintf>
	LCDGotoXY(0, 1);
    106e:	8d b7       	in	r24, 0x3d	; 61
    1070:	9e b7       	in	r25, 0x3e	; 62
    1072:	06 96       	adiw	r24, 0x06	; 6
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	9e bf       	out	0x3e, r25	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	8d bf       	out	0x3d, r24	; 61
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
    1086:	f8 01       	movw	r30, r16
    1088:	01 90       	ld	r0, Z+
    108a:	00 20       	and	r0, r0
    108c:	e9 f7       	brne	.-6      	; 0x1088 <write_LCD+0x4a>
    108e:	31 97       	sbiw	r30, 0x01	; 1
    1090:	e0 1b       	sub	r30, r16
    1092:	f1 0b       	sbc	r31, r17
    1094:	c8 01       	movw	r24, r16
    1096:	6e 2f       	mov	r22, r30
    1098:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCDstring>
end
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
    10a2:	0e 94 09 09 	call	0x1212	; 0x1212 <LCDinit>
	LCDcursorOFF();
    10a6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <LCDcursorOFF>
	LCDclr();				//clear the display
    10aa:	0e 94 a2 08 	call	0x1144	; 0x1144 <LCDclr>
	LCDGotoXY(0,0);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    10b6:	8c e8       	ldi	r24, 0x8C	; 140
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	0e 94 ce 08 	call	0x119c	; 0x119c <CopyStringtoLCD>
	LCD_char_count = 0;
    10c2:	10 92 4a 05 	sts	0x054A, r1
end
    10c6:	08 95       	ret

000010c8 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    10c8:	28 2f       	mov	r18, r24
    10ca:	20 7f       	andi	r18, 0xF0	; 240
    10cc:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    10ce:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    10d0:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10d2:	20 e4       	ldi	r18, 0x40	; 64
    10d4:	3f e1       	ldi	r19, 0x1F	; 31
    10d6:	f9 01       	movw	r30, r18
    10d8:	31 97       	sbiw	r30, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    10dc:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    10de:	40 98       	cbi	0x08, 0	; 8
    10e0:	f9 01       	movw	r30, r18
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	44 e0       	ldi	r20, 0x04	; 4
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	4a 95       	dec	r20
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <LCDsendChar+0x22>
    10f2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    10f4:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    10f6:	42 9a       	sbi	0x08, 2	; 8
    10f8:	c9 01       	movw	r24, r18
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    10fe:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1100:	40 98       	cbi	0x08, 0	; 8
    1102:	c9 01       	movw	r24, r18
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1108:	08 95       	ret

0000110a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    110a:	28 2f       	mov	r18, r24
    110c:	20 7f       	andi	r18, 0xF0	; 240
    110e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    1110:	42 9a       	sbi	0x08, 2	; 8
    1112:	20 e4       	ldi	r18, 0x40	; 64
    1114:	3f e1       	ldi	r19, 0x1F	; 31
    1116:	f9 01       	movw	r30, r18
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    111c:	42 98       	cbi	0x08, 2	; 8
    111e:	f9 01       	movw	r30, r18
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	54 e0       	ldi	r21, 0x04	; 4
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	5a 95       	dec	r21
    112e:	e1 f7       	brne	.-8      	; 0x1128 <LCDsendCommand+0x1e>
    1130:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1132:	42 9a       	sbi	0x08, 2	; 8
    1134:	c9 01       	movw	r24, r18
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    113a:	42 98       	cbi	0x08, 2	; 8
    113c:	c9 01       	movw	r24, r18
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    1142:	08 95       	ret

00001144 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    114a:	08 95       	ret

0000114c <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    1152:	08 95       	ret

00001154 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	49 f0       	breq	.+18     	; 0x1174 <LCDstring+0x20>
    1162:	ec 01       	movw	r28, r24
    1164:	10 e0       	ldi	r17, 0x00	; 0
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1168:	89 91       	ld	r24, Y+
    116a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    116e:	1f 5f       	subi	r17, 0xFF	; 255
    1170:	10 17       	cp	r17, r16
    1172:	d0 f3       	brcs	.-12     	; 0x1168 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    117e:	62 30       	cpi	r22, 0x02	; 2
    1180:	31 f0       	breq	.+12     	; 0x118e <LCDGotoXY+0x10>
    1182:	63 30       	cpi	r22, 0x03	; 3
    1184:	31 f0       	breq	.+12     	; 0x1192 <LCDGotoXY+0x14>
    1186:	61 30       	cpi	r22, 0x01	; 1
    1188:	29 f4       	brne	.+10     	; 0x1194 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    118a:	80 5c       	subi	r24, 0xC0	; 192
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    118e:	8c 5e       	subi	r24, 0xEC	; 236
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1192:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1194:	80 68       	ori	r24, 0x80	; 128
    1196:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
	
}
    119a:	08 95       	ret

0000119c <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
    11a4:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    11a6:	64 2f       	mov	r22, r20
    11a8:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDGotoXY>
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    11b0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    11b4:	1f 5f       	subi	r17, 0xFF	; 255
    11b6:	fe 01       	movw	r30, r28
    11b8:	e1 0f       	add	r30, r17
    11ba:	f1 1d       	adc	r31, r1
    11bc:	84 91       	lpm	r24, Z+
    11be:	88 23       	and	r24, r24
    11c0:	b9 f7       	brne	.-18     	; 0x11b0 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	08 95       	ret

000011ca <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	7c 01       	movw	r14, r24
    11d8:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    11da:	11 0f       	add	r17, r17
    11dc:	11 0f       	add	r17, r17
    11de:	11 0f       	add	r17, r17
    11e0:	10 64       	ori	r17, 0x40	; 64
    11e2:	c0 e0       	ldi	r28, 0x00	; 0
    11e4:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    11e6:	f7 01       	movw	r30, r14
    11e8:	ec 0f       	add	r30, r28
    11ea:	fd 1f       	adc	r31, r29
    11ec:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    11ee:	81 2f       	mov	r24, r17
    11f0:	8c 0f       	add	r24, r28
    11f2:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
		LCDsendChar(pcc);
    11f6:	80 2f       	mov	r24, r16
    11f8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    11fc:	21 96       	adiw	r28, 0x01	; 1
    11fe:	c8 30       	cpi	r28, 0x08	; 8
    1200:	d1 05       	cpc	r29, r1
    1202:	89 f7       	brne	.-30     	; 0x11e6 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	08 95       	ret

00001212 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	80 e6       	ldi	r24, 0x60	; 96
    121a:	9a ee       	ldi	r25, 0xEA	; 234
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1220:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1222:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1224:	87 b1       	in	r24, 0x07	; 7
    1226:	80 6f       	ori	r24, 0xF0	; 240
    1228:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    122a:	87 b1       	in	r24, 0x07	; 7
    122c:	87 60       	ori	r24, 0x07	; 7
    122e:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1234:	42 9a       	sbi	0x08, 2	; 8
    1236:	20 e4       	ldi	r18, 0x40	; 64
    1238:	3f e1       	ldi	r19, 0x1F	; 31
    123a:	f9 01       	movw	r30, r18
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1240:	42 98       	cbi	0x08, 2	; 8
    1242:	f9 01       	movw	r30, r18
    1244:	31 97       	sbiw	r30, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1248:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    124a:	42 9a       	sbi	0x08, 2	; 8
    124c:	c9 01       	movw	r24, r18
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1252:	42 98       	cbi	0x08, 2	; 8
    1254:	c9 01       	movw	r24, r18
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    125e:	42 9a       	sbi	0x08, 2	; 8
    1260:	c9 01       	movw	r24, r18
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1266:	42 98       	cbi	0x08, 2	; 8
    1268:	c9 01       	movw	r24, r18
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    126e:	88 e2       	ldi	r24, 0x28	; 40
    1270:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1274:	8c e0       	ldi	r24, 0x0C	; 12
    1276:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
    127a:	c8 e9       	ldi	r28, 0x98	; 152
    127c:	d4 e0       	ldi	r29, 0x04	; 4
    127e:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1280:	16 2f       	mov	r17, r22
    1282:	1f 5f       	subi	r17, 0xFF	; 255
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCDdefinechar>
    128a:	28 96       	adiw	r28, 0x08	; 8
    128c:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    128e:	18 30       	cpi	r17, 0x08	; 8
    1290:	b9 f7       	brne	.-18     	; 0x1280 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	08 95       	ret

0000129a <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	08 2f       	mov	r16, r24
    12a0:	10 e0       	ldi	r17, 0x00	; 0
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    12a4:	8e e1       	ldi	r24, 0x1E	; 30
    12a6:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    12aa:	1f 5f       	subi	r17, 0xFF	; 255
    12ac:	10 17       	cp	r17, r16
    12ae:	d0 f3       	brcs	.-12     	; 0x12a4 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	08 2f       	mov	r16, r24
    12bc:	10 e0       	ldi	r17, 0x00	; 0
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    12c0:	88 e1       	ldi	r24, 0x18	; 24
    12c2:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    12c6:	1f 5f       	subi	r17, 0xFF	; 255
    12c8:	10 17       	cp	r17, r16
    12ca:	d0 f3       	brcs	.-12     	; 0x12c0 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    12d2:	8e e0       	ldi	r24, 0x0E	; 14
    12d4:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    12d8:	08 95       	ret

000012da <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    12da:	8f e0       	ldi	r24, 0x0F	; 15
    12dc:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    12e0:	08 95       	ret

000012e2 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    12e2:	8c e0       	ldi	r24, 0x0C	; 12
    12e4:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    12e8:	08 95       	ret

000012ea <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    12ea:	88 e0       	ldi	r24, 0x08	; 8
    12ec:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    12f0:	08 95       	ret

000012f2 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    12f2:	8c e0       	ldi	r24, 0x0C	; 12
    12f4:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
}
    12f8:	08 95       	ret

000012fa <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	08 2f       	mov	r16, r24
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	04 c0       	rjmp	.+8      	; 0x130c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1304:	80 e1       	ldi	r24, 0x10	; 16
    1306:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    130a:	1f 5f       	subi	r17, 0xFF	; 255
    130c:	10 17       	cp	r17, r16
    130e:	d0 f3       	brcs	.-12     	; 0x1304 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	08 95       	ret

00001316 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	08 2f       	mov	r16, r24
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1320:	84 e1       	ldi	r24, 0x14	; 20
    1322:	0e 94 85 08 	call	0x110a	; 0x110a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1326:	1f 5f       	subi	r17, 0xFF	; 255
    1328:	10 17       	cp	r17, r16
    132a:	d0 f3       	brcs	.-12     	; 0x1320 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1332:	df 92       	push	r13
    1334:	ef 92       	push	r14
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1342:	96 e0       	ldi	r25, 0x06	; 6
    1344:	89 9f       	mul	r24, r25
    1346:	c0 01       	movw	r24, r0
    1348:	11 24       	eor	r1, r1
    134a:	24 2f       	mov	r18, r20
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	ac 01       	movw	r20, r24
    1350:	42 9f       	mul	r20, r18
    1352:	c0 01       	movw	r24, r0
    1354:	43 9f       	mul	r20, r19
    1356:	90 0d       	add	r25, r0
    1358:	52 9f       	mul	r21, r18
    135a:	90 0d       	add	r25, r0
    135c:	11 24       	eor	r1, r1
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__divmodhi4>
    1364:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1366:	cb 01       	movw	r24, r22
    1368:	66 e0       	ldi	r22, 0x06	; 6
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__udivmodhi4>
    1370:	e8 2e       	mov	r14, r24
    1372:	ff 24       	eor	r15, r15
    1374:	00 e0       	ldi	r16, 0x00	; 0
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	12 c0       	rjmp	.+36     	; 0x139e <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    137a:	c8 01       	movw	r24, r16
    137c:	05 96       	adiw	r24, 0x05	; 5
    137e:	c8 17       	cp	r28, r24
    1380:	d9 07       	cpc	r29, r25
    1382:	10 f0       	brcs	.+4      	; 0x1388 <LCDprogressBar+0x56>
    1384:	85 e0       	ldi	r24, 0x05	; 5
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1388:	c0 17       	cp	r28, r16
    138a:	d1 07       	cpc	r29, r17
    138c:	10 f0       	brcs	.+4      	; 0x1392 <LCDprogressBar+0x60>
    138e:	8e 2d       	mov	r24, r14
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <LCDprogressBar+0x62>
    1392:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1394:	0e 94 64 08 	call	0x10c8	; 0x10c8 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1398:	f3 94       	inc	r15
    139a:	0a 5f       	subi	r16, 0xFA	; 250
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	fd 14       	cp	r15, r13
    13a0:	60 f3       	brcs	.-40     	; 0x137a <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	08 95       	ret

000013b2 <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
    13b2:	48 2f       	mov	r20, r24
	mov  r21,r25											
    13b4:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
    13b6:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
    13b8:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
    13ba:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
    13bc:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
    13be:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
    13c0:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
    13c2:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
    13c4:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
    13c6:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
    13c8:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
    13ca:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
    13cc:	08 95       	ret

000013ce <__udivmodhi4>:
    13ce:	aa 1b       	sub	r26, r26
    13d0:	bb 1b       	sub	r27, r27
    13d2:	51 e1       	ldi	r21, 0x11	; 17
    13d4:	07 c0       	rjmp	.+14     	; 0x13e4 <__udivmodhi4_ep>

000013d6 <__udivmodhi4_loop>:
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	a6 17       	cp	r26, r22
    13dc:	b7 07       	cpc	r27, r23
    13de:	10 f0       	brcs	.+4      	; 0x13e4 <__udivmodhi4_ep>
    13e0:	a6 1b       	sub	r26, r22
    13e2:	b7 0b       	sbc	r27, r23

000013e4 <__udivmodhi4_ep>:
    13e4:	88 1f       	adc	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	5a 95       	dec	r21
    13ea:	a9 f7       	brne	.-22     	; 0x13d6 <__udivmodhi4_loop>
    13ec:	80 95       	com	r24
    13ee:	90 95       	com	r25
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	08 95       	ret

000013f6 <__divmodhi4>:
    13f6:	97 fb       	bst	r25, 7
    13f8:	09 2e       	mov	r0, r25
    13fa:	07 26       	eor	r0, r23
    13fc:	0a d0       	rcall	.+20     	; 0x1412 <__divmodhi4_neg1>
    13fe:	77 fd       	sbrc	r23, 7
    1400:	04 d0       	rcall	.+8      	; 0x140a <__divmodhi4_neg2>
    1402:	e5 df       	rcall	.-54     	; 0x13ce <__udivmodhi4>
    1404:	06 d0       	rcall	.+12     	; 0x1412 <__divmodhi4_neg1>
    1406:	00 20       	and	r0, r0
    1408:	1a f4       	brpl	.+6      	; 0x1410 <__divmodhi4_exit>

0000140a <__divmodhi4_neg2>:
    140a:	70 95       	com	r23
    140c:	61 95       	neg	r22
    140e:	7f 4f       	sbci	r23, 0xFF	; 255

00001410 <__divmodhi4_exit>:
    1410:	08 95       	ret

00001412 <__divmodhi4_neg1>:
    1412:	f6 f7       	brtc	.-4      	; 0x1410 <__divmodhi4_exit>
    1414:	90 95       	com	r25
    1416:	81 95       	neg	r24
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	08 95       	ret

0000141c <sprintf>:
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	2e 97       	sbiw	r28, 0x0e	; 14
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	0d 89       	ldd	r16, Y+21	; 0x15
    1436:	1e 89       	ldd	r17, Y+22	; 0x16
    1438:	86 e0       	ldi	r24, 0x06	; 6
    143a:	8c 83       	std	Y+4, r24	; 0x04
    143c:	1a 83       	std	Y+2, r17	; 0x02
    143e:	09 83       	std	Y+1, r16	; 0x01
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	9f e7       	ldi	r25, 0x7F	; 127
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	9e 01       	movw	r18, r28
    144a:	27 5e       	subi	r18, 0xE7	; 231
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	6f 89       	ldd	r22, Y+23	; 0x17
    1454:	78 8d       	ldd	r23, Y+24	; 0x18
    1456:	a9 01       	movw	r20, r18
    1458:	0e 94 3f 0a 	call	0x147e	; 0x147e <vfprintf>
    145c:	2f 81       	ldd	r18, Y+7	; 0x07
    145e:	38 85       	ldd	r19, Y+8	; 0x08
    1460:	02 0f       	add	r16, r18
    1462:	13 1f       	adc	r17, r19
    1464:	f8 01       	movw	r30, r16
    1466:	10 82       	st	Z, r1
    1468:	2e 96       	adiw	r28, 0x0e	; 14
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <vfprintf>:
    147e:	2f 92       	push	r2
    1480:	3f 92       	push	r3
    1482:	4f 92       	push	r4
    1484:	5f 92       	push	r5
    1486:	6f 92       	push	r6
    1488:	7f 92       	push	r7
    148a:	8f 92       	push	r8
    148c:	9f 92       	push	r9
    148e:	af 92       	push	r10
    1490:	bf 92       	push	r11
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	2b 97       	sbiw	r28, 0x0b	; 11
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	3c 01       	movw	r6, r24
    14b4:	2b 01       	movw	r4, r22
    14b6:	5a 01       	movw	r10, r20
    14b8:	fc 01       	movw	r30, r24
    14ba:	17 82       	std	Z+7, r1	; 0x07
    14bc:	16 82       	std	Z+6, r1	; 0x06
    14be:	83 81       	ldd	r24, Z+3	; 0x03
    14c0:	81 fd       	sbrc	r24, 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <vfprintf+0x4c>
    14c4:	6f ef       	ldi	r22, 0xFF	; 255
    14c6:	7f ef       	ldi	r23, 0xFF	; 255
    14c8:	c6 c1       	rjmp	.+908    	; 0x1856 <vfprintf+0x3d8>
    14ca:	9a e0       	ldi	r25, 0x0A	; 10
    14cc:	89 2e       	mov	r8, r25
    14ce:	1e 01       	movw	r2, r28
    14d0:	08 94       	sec
    14d2:	21 1c       	adc	r2, r1
    14d4:	31 1c       	adc	r3, r1
    14d6:	f3 01       	movw	r30, r6
    14d8:	23 81       	ldd	r18, Z+3	; 0x03
    14da:	f2 01       	movw	r30, r4
    14dc:	23 fd       	sbrc	r18, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	23 ff       	sbrs	r18, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	2f 01       	movw	r4, r30
    14e6:	88 23       	and	r24, r24
    14e8:	09 f4       	brne	.+2      	; 0x14ec <vfprintf+0x6e>
    14ea:	b2 c1       	rjmp	.+868    	; 0x1850 <vfprintf+0x3d2>
    14ec:	85 32       	cpi	r24, 0x25	; 37
    14ee:	39 f4       	brne	.+14     	; 0x14fe <vfprintf+0x80>
    14f0:	23 fd       	sbrc	r18, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	23 ff       	sbrs	r18, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	2f 01       	movw	r4, r30
    14fa:	85 32       	cpi	r24, 0x25	; 37
    14fc:	29 f4       	brne	.+10     	; 0x1508 <vfprintf+0x8a>
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	b3 01       	movw	r22, r6
    1502:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1506:	e7 cf       	rjmp	.-50     	; 0x14d6 <vfprintf+0x58>
    1508:	98 2f       	mov	r25, r24
    150a:	ff 24       	eor	r15, r15
    150c:	ee 24       	eor	r14, r14
    150e:	99 24       	eor	r9, r9
    1510:	ff e1       	ldi	r31, 0x1F	; 31
    1512:	ff 15       	cp	r31, r15
    1514:	d0 f0       	brcs	.+52     	; 0x154a <vfprintf+0xcc>
    1516:	9b 32       	cpi	r25, 0x2B	; 43
    1518:	69 f0       	breq	.+26     	; 0x1534 <vfprintf+0xb6>
    151a:	9c 32       	cpi	r25, 0x2C	; 44
    151c:	28 f4       	brcc	.+10     	; 0x1528 <vfprintf+0xaa>
    151e:	90 32       	cpi	r25, 0x20	; 32
    1520:	59 f0       	breq	.+22     	; 0x1538 <vfprintf+0xba>
    1522:	93 32       	cpi	r25, 0x23	; 35
    1524:	91 f4       	brne	.+36     	; 0x154a <vfprintf+0xcc>
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <vfprintf+0xc6>
    1528:	9d 32       	cpi	r25, 0x2D	; 45
    152a:	49 f0       	breq	.+18     	; 0x153e <vfprintf+0xc0>
    152c:	90 33       	cpi	r25, 0x30	; 48
    152e:	69 f4       	brne	.+26     	; 0x154a <vfprintf+0xcc>
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	24 c0       	rjmp	.+72     	; 0x157c <vfprintf+0xfe>
    1534:	52 e0       	ldi	r21, 0x02	; 2
    1536:	f5 2a       	or	r15, r21
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	f8 2a       	or	r15, r24
    153c:	28 c0       	rjmp	.+80     	; 0x158e <vfprintf+0x110>
    153e:	98 e0       	ldi	r25, 0x08	; 8
    1540:	f9 2a       	or	r15, r25
    1542:	25 c0       	rjmp	.+74     	; 0x158e <vfprintf+0x110>
    1544:	e0 e1       	ldi	r30, 0x10	; 16
    1546:	fe 2a       	or	r15, r30
    1548:	22 c0       	rjmp	.+68     	; 0x158e <vfprintf+0x110>
    154a:	f7 fc       	sbrc	r15, 7
    154c:	29 c0       	rjmp	.+82     	; 0x15a0 <vfprintf+0x122>
    154e:	89 2f       	mov	r24, r25
    1550:	80 53       	subi	r24, 0x30	; 48
    1552:	8a 30       	cpi	r24, 0x0A	; 10
    1554:	70 f4       	brcc	.+28     	; 0x1572 <vfprintf+0xf4>
    1556:	f6 fe       	sbrs	r15, 6
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <vfprintf+0xe6>
    155a:	98 9c       	mul	r9, r8
    155c:	90 2c       	mov	r9, r0
    155e:	11 24       	eor	r1, r1
    1560:	98 0e       	add	r9, r24
    1562:	15 c0       	rjmp	.+42     	; 0x158e <vfprintf+0x110>
    1564:	e8 9c       	mul	r14, r8
    1566:	e0 2c       	mov	r14, r0
    1568:	11 24       	eor	r1, r1
    156a:	e8 0e       	add	r14, r24
    156c:	f0 e2       	ldi	r31, 0x20	; 32
    156e:	ff 2a       	or	r15, r31
    1570:	0e c0       	rjmp	.+28     	; 0x158e <vfprintf+0x110>
    1572:	9e 32       	cpi	r25, 0x2E	; 46
    1574:	29 f4       	brne	.+10     	; 0x1580 <vfprintf+0x102>
    1576:	f6 fc       	sbrc	r15, 6
    1578:	6b c1       	rjmp	.+726    	; 0x1850 <vfprintf+0x3d2>
    157a:	40 e4       	ldi	r20, 0x40	; 64
    157c:	f4 2a       	or	r15, r20
    157e:	07 c0       	rjmp	.+14     	; 0x158e <vfprintf+0x110>
    1580:	9c 36       	cpi	r25, 0x6C	; 108
    1582:	19 f4       	brne	.+6      	; 0x158a <vfprintf+0x10c>
    1584:	50 e8       	ldi	r21, 0x80	; 128
    1586:	f5 2a       	or	r15, r21
    1588:	02 c0       	rjmp	.+4      	; 0x158e <vfprintf+0x110>
    158a:	98 36       	cpi	r25, 0x68	; 104
    158c:	49 f4       	brne	.+18     	; 0x15a0 <vfprintf+0x122>
    158e:	f2 01       	movw	r30, r4
    1590:	23 fd       	sbrc	r18, 3
    1592:	95 91       	lpm	r25, Z+
    1594:	23 ff       	sbrs	r18, 3
    1596:	91 91       	ld	r25, Z+
    1598:	2f 01       	movw	r4, r30
    159a:	99 23       	and	r25, r25
    159c:	09 f0       	breq	.+2      	; 0x15a0 <vfprintf+0x122>
    159e:	b8 cf       	rjmp	.-144    	; 0x1510 <vfprintf+0x92>
    15a0:	89 2f       	mov	r24, r25
    15a2:	85 54       	subi	r24, 0x45	; 69
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	18 f0       	brcs	.+6      	; 0x15ae <vfprintf+0x130>
    15a8:	80 52       	subi	r24, 0x20	; 32
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	38 f4       	brcc	.+14     	; 0x15bc <vfprintf+0x13e>
    15ae:	44 e0       	ldi	r20, 0x04	; 4
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	a4 0e       	add	r10, r20
    15b4:	b5 1e       	adc	r11, r21
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	59 83       	std	Y+1, r21	; 0x01
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <vfprintf+0x15c>
    15bc:	93 36       	cpi	r25, 0x63	; 99
    15be:	31 f0       	breq	.+12     	; 0x15cc <vfprintf+0x14e>
    15c0:	93 37       	cpi	r25, 0x73	; 115
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <vfprintf+0x164>
    15c4:	93 35       	cpi	r25, 0x53	; 83
    15c6:	09 f0       	breq	.+2      	; 0x15ca <vfprintf+0x14c>
    15c8:	56 c0       	rjmp	.+172    	; 0x1676 <vfprintf+0x1f8>
    15ca:	20 c0       	rjmp	.+64     	; 0x160c <vfprintf+0x18e>
    15cc:	f5 01       	movw	r30, r10
    15ce:	80 81       	ld	r24, Z
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	a4 0e       	add	r10, r20
    15d8:	b5 1e       	adc	r11, r21
    15da:	61 01       	movw	r12, r2
    15dc:	01 e0       	ldi	r16, 0x01	; 1
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	12 c0       	rjmp	.+36     	; 0x1606 <vfprintf+0x188>
    15e2:	f5 01       	movw	r30, r10
    15e4:	c0 80       	ld	r12, Z
    15e6:	d1 80       	ldd	r13, Z+1	; 0x01
    15e8:	f6 fc       	sbrc	r15, 6
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <vfprintf+0x174>
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	7f ef       	ldi	r23, 0xFF	; 255
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <vfprintf+0x178>
    15f2:	69 2d       	mov	r22, r9
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	42 e0       	ldi	r20, 0x02	; 2
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	a4 0e       	add	r10, r20
    15fc:	b5 1e       	adc	r11, r21
    15fe:	c6 01       	movw	r24, r12
    1600:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <strnlen>
    1604:	8c 01       	movw	r16, r24
    1606:	5f e7       	ldi	r21, 0x7F	; 127
    1608:	f5 22       	and	r15, r21
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <vfprintf+0x1b6>
    160c:	f5 01       	movw	r30, r10
    160e:	c0 80       	ld	r12, Z
    1610:	d1 80       	ldd	r13, Z+1	; 0x01
    1612:	f6 fc       	sbrc	r15, 6
    1614:	03 c0       	rjmp	.+6      	; 0x161c <vfprintf+0x19e>
    1616:	6f ef       	ldi	r22, 0xFF	; 255
    1618:	7f ef       	ldi	r23, 0xFF	; 255
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0x1a2>
    161c:	69 2d       	mov	r22, r9
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	42 e0       	ldi	r20, 0x02	; 2
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	a4 0e       	add	r10, r20
    1626:	b5 1e       	adc	r11, r21
    1628:	c6 01       	movw	r24, r12
    162a:	0e 94 45 0c 	call	0x188a	; 0x188a <strnlen_P>
    162e:	8c 01       	movw	r16, r24
    1630:	50 e8       	ldi	r21, 0x80	; 128
    1632:	f5 2a       	or	r15, r21
    1634:	f3 fe       	sbrs	r15, 3
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <vfprintf+0x1c8>
    1638:	1a c0       	rjmp	.+52     	; 0x166e <vfprintf+0x1f0>
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b3 01       	movw	r22, r6
    1640:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1644:	ea 94       	dec	r14
    1646:	8e 2d       	mov	r24, r14
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	08 17       	cp	r16, r24
    164c:	19 07       	cpc	r17, r25
    164e:	a8 f3       	brcs	.-22     	; 0x163a <vfprintf+0x1bc>
    1650:	0e c0       	rjmp	.+28     	; 0x166e <vfprintf+0x1f0>
    1652:	f6 01       	movw	r30, r12
    1654:	f7 fc       	sbrc	r15, 7
    1656:	85 91       	lpm	r24, Z+
    1658:	f7 fe       	sbrs	r15, 7
    165a:	81 91       	ld	r24, Z+
    165c:	6f 01       	movw	r12, r30
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	b3 01       	movw	r22, r6
    1662:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1666:	e1 10       	cpse	r14, r1
    1668:	ea 94       	dec	r14
    166a:	01 50       	subi	r16, 0x01	; 1
    166c:	10 40       	sbci	r17, 0x00	; 0
    166e:	01 15       	cp	r16, r1
    1670:	11 05       	cpc	r17, r1
    1672:	79 f7       	brne	.-34     	; 0x1652 <vfprintf+0x1d4>
    1674:	ea c0       	rjmp	.+468    	; 0x184a <vfprintf+0x3cc>
    1676:	94 36       	cpi	r25, 0x64	; 100
    1678:	11 f0       	breq	.+4      	; 0x167e <vfprintf+0x200>
    167a:	99 36       	cpi	r25, 0x69	; 105
    167c:	69 f5       	brne	.+90     	; 0x16d8 <vfprintf+0x25a>
    167e:	f7 fe       	sbrs	r15, 7
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0x214>
    1682:	f5 01       	movw	r30, r10
    1684:	20 81       	ld	r18, Z
    1686:	31 81       	ldd	r19, Z+1	; 0x01
    1688:	42 81       	ldd	r20, Z+2	; 0x02
    168a:	53 81       	ldd	r21, Z+3	; 0x03
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0a c0       	rjmp	.+20     	; 0x16a6 <vfprintf+0x228>
    1692:	f5 01       	movw	r30, r10
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	9c 01       	movw	r18, r24
    169a:	44 27       	eor	r20, r20
    169c:	37 fd       	sbrc	r19, 7
    169e:	40 95       	com	r20
    16a0:	54 2f       	mov	r21, r20
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a8 0e       	add	r10, r24
    16a8:	b9 1e       	adc	r11, r25
    16aa:	9f e6       	ldi	r25, 0x6F	; 111
    16ac:	f9 22       	and	r15, r25
    16ae:	57 ff       	sbrs	r21, 7
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <vfprintf+0x246>
    16b2:	50 95       	com	r21
    16b4:	40 95       	com	r20
    16b6:	30 95       	com	r19
    16b8:	21 95       	neg	r18
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	4f 4f       	sbci	r20, 0xFF	; 255
    16be:	5f 4f       	sbci	r21, 0xFF	; 255
    16c0:	e0 e8       	ldi	r30, 0x80	; 128
    16c2:	fe 2a       	or	r15, r30
    16c4:	ca 01       	movw	r24, r20
    16c6:	b9 01       	movw	r22, r18
    16c8:	a1 01       	movw	r20, r2
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	0e 94 87 0c 	call	0x190e	; 0x190e <__ultoa_invert>
    16d2:	d8 2e       	mov	r13, r24
    16d4:	d2 18       	sub	r13, r2
    16d6:	40 c0       	rjmp	.+128    	; 0x1758 <vfprintf+0x2da>
    16d8:	95 37       	cpi	r25, 0x75	; 117
    16da:	29 f4       	brne	.+10     	; 0x16e6 <vfprintf+0x268>
    16dc:	1f 2d       	mov	r17, r15
    16de:	1f 7e       	andi	r17, 0xEF	; 239
    16e0:	2a e0       	ldi	r18, 0x0A	; 10
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	1d c0       	rjmp	.+58     	; 0x1720 <vfprintf+0x2a2>
    16e6:	1f 2d       	mov	r17, r15
    16e8:	19 7f       	andi	r17, 0xF9	; 249
    16ea:	9f 36       	cpi	r25, 0x6F	; 111
    16ec:	61 f0       	breq	.+24     	; 0x1706 <vfprintf+0x288>
    16ee:	90 37       	cpi	r25, 0x70	; 112
    16f0:	20 f4       	brcc	.+8      	; 0x16fa <vfprintf+0x27c>
    16f2:	98 35       	cpi	r25, 0x58	; 88
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <vfprintf+0x27a>
    16f6:	ac c0       	rjmp	.+344    	; 0x1850 <vfprintf+0x3d2>
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <vfprintf+0x29a>
    16fa:	90 37       	cpi	r25, 0x70	; 112
    16fc:	39 f0       	breq	.+14     	; 0x170c <vfprintf+0x28e>
    16fe:	98 37       	cpi	r25, 0x78	; 120
    1700:	09 f0       	breq	.+2      	; 0x1704 <vfprintf+0x286>
    1702:	a6 c0       	rjmp	.+332    	; 0x1850 <vfprintf+0x3d2>
    1704:	04 c0       	rjmp	.+8      	; 0x170e <vfprintf+0x290>
    1706:	28 e0       	ldi	r18, 0x08	; 8
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	0a c0       	rjmp	.+20     	; 0x1720 <vfprintf+0x2a2>
    170c:	10 61       	ori	r17, 0x10	; 16
    170e:	14 fd       	sbrc	r17, 4
    1710:	14 60       	ori	r17, 0x04	; 4
    1712:	20 e1       	ldi	r18, 0x10	; 16
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <vfprintf+0x2a2>
    1718:	14 fd       	sbrc	r17, 4
    171a:	16 60       	ori	r17, 0x06	; 6
    171c:	20 e1       	ldi	r18, 0x10	; 16
    171e:	32 e0       	ldi	r19, 0x02	; 2
    1720:	17 ff       	sbrs	r17, 7
    1722:	08 c0       	rjmp	.+16     	; 0x1734 <vfprintf+0x2b6>
    1724:	f5 01       	movw	r30, r10
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	44 e0       	ldi	r20, 0x04	; 4
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	08 c0       	rjmp	.+16     	; 0x1744 <vfprintf+0x2c6>
    1734:	f5 01       	movw	r30, r10
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	bc 01       	movw	r22, r24
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	42 e0       	ldi	r20, 0x02	; 2
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	a4 0e       	add	r10, r20
    1746:	b5 1e       	adc	r11, r21
    1748:	a1 01       	movw	r20, r2
    174a:	0e 94 87 0c 	call	0x190e	; 0x190e <__ultoa_invert>
    174e:	d8 2e       	mov	r13, r24
    1750:	d2 18       	sub	r13, r2
    1752:	8f e7       	ldi	r24, 0x7F	; 127
    1754:	f8 2e       	mov	r15, r24
    1756:	f1 22       	and	r15, r17
    1758:	f6 fe       	sbrs	r15, 6
    175a:	0b c0       	rjmp	.+22     	; 0x1772 <vfprintf+0x2f4>
    175c:	5e ef       	ldi	r21, 0xFE	; 254
    175e:	f5 22       	and	r15, r21
    1760:	d9 14       	cp	r13, r9
    1762:	38 f4       	brcc	.+14     	; 0x1772 <vfprintf+0x2f4>
    1764:	f4 fe       	sbrs	r15, 4
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <vfprintf+0x2f8>
    1768:	f2 fc       	sbrc	r15, 2
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <vfprintf+0x2f8>
    176c:	8f ee       	ldi	r24, 0xEF	; 239
    176e:	f8 22       	and	r15, r24
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <vfprintf+0x2f8>
    1772:	1d 2d       	mov	r17, r13
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <vfprintf+0x2fa>
    1776:	19 2d       	mov	r17, r9
    1778:	f4 fe       	sbrs	r15, 4
    177a:	0d c0       	rjmp	.+26     	; 0x1796 <vfprintf+0x318>
    177c:	fe 01       	movw	r30, r28
    177e:	ed 0d       	add	r30, r13
    1780:	f1 1d       	adc	r31, r1
    1782:	80 81       	ld	r24, Z
    1784:	80 33       	cpi	r24, 0x30	; 48
    1786:	19 f4       	brne	.+6      	; 0x178e <vfprintf+0x310>
    1788:	99 ee       	ldi	r25, 0xE9	; 233
    178a:	f9 22       	and	r15, r25
    178c:	08 c0       	rjmp	.+16     	; 0x179e <vfprintf+0x320>
    178e:	1f 5f       	subi	r17, 0xFF	; 255
    1790:	f2 fe       	sbrs	r15, 2
    1792:	05 c0       	rjmp	.+10     	; 0x179e <vfprintf+0x320>
    1794:	03 c0       	rjmp	.+6      	; 0x179c <vfprintf+0x31e>
    1796:	8f 2d       	mov	r24, r15
    1798:	86 78       	andi	r24, 0x86	; 134
    179a:	09 f0       	breq	.+2      	; 0x179e <vfprintf+0x320>
    179c:	1f 5f       	subi	r17, 0xFF	; 255
    179e:	0f 2d       	mov	r16, r15
    17a0:	f3 fc       	sbrc	r15, 3
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <vfprintf+0x34e>
    17a4:	f0 fe       	sbrs	r15, 0
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <vfprintf+0x348>
    17a8:	1e 15       	cp	r17, r14
    17aa:	10 f0       	brcs	.+4      	; 0x17b0 <vfprintf+0x332>
    17ac:	9d 2c       	mov	r9, r13
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <vfprintf+0x348>
    17b0:	9d 2c       	mov	r9, r13
    17b2:	9e 0c       	add	r9, r14
    17b4:	91 1a       	sub	r9, r17
    17b6:	1e 2d       	mov	r17, r14
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <vfprintf+0x348>
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	b3 01       	movw	r22, r6
    17c0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    17c4:	1f 5f       	subi	r17, 0xFF	; 255
    17c6:	1e 15       	cp	r17, r14
    17c8:	c0 f3       	brcs	.-16     	; 0x17ba <vfprintf+0x33c>
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <vfprintf+0x356>
    17cc:	1e 15       	cp	r17, r14
    17ce:	10 f4       	brcc	.+4      	; 0x17d4 <vfprintf+0x356>
    17d0:	e1 1a       	sub	r14, r17
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <vfprintf+0x358>
    17d4:	ee 24       	eor	r14, r14
    17d6:	04 ff       	sbrs	r16, 4
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <vfprintf+0x37a>
    17da:	80 e3       	ldi	r24, 0x30	; 48
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	b3 01       	movw	r22, r6
    17e0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    17e4:	02 ff       	sbrs	r16, 2
    17e6:	1d c0       	rjmp	.+58     	; 0x1822 <vfprintf+0x3a4>
    17e8:	01 fd       	sbrc	r16, 1
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <vfprintf+0x374>
    17ec:	88 e7       	ldi	r24, 0x78	; 120
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e c0       	rjmp	.+28     	; 0x180e <vfprintf+0x390>
    17f2:	88 e5       	ldi	r24, 0x58	; 88
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0b c0       	rjmp	.+22     	; 0x180e <vfprintf+0x390>
    17f8:	80 2f       	mov	r24, r16
    17fa:	86 78       	andi	r24, 0x86	; 134
    17fc:	91 f0       	breq	.+36     	; 0x1822 <vfprintf+0x3a4>
    17fe:	01 ff       	sbrs	r16, 1
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x388>
    1802:	8b e2       	ldi	r24, 0x2B	; 43
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <vfprintf+0x38a>
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	f7 fc       	sbrc	r15, 7
    180a:	8d e2       	ldi	r24, 0x2D	; 45
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b3 01       	movw	r22, r6
    1810:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0x3a4>
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	b3 01       	movw	r22, r6
    181c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1820:	9a 94       	dec	r9
    1822:	d9 14       	cp	r13, r9
    1824:	c0 f3       	brcs	.-16     	; 0x1816 <vfprintf+0x398>
    1826:	da 94       	dec	r13
    1828:	f1 01       	movw	r30, r2
    182a:	ed 0d       	add	r30, r13
    182c:	f1 1d       	adc	r31, r1
    182e:	80 81       	ld	r24, Z
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	b3 01       	movw	r22, r6
    1834:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1838:	dd 20       	and	r13, r13
    183a:	a9 f7       	brne	.-22     	; 0x1826 <vfprintf+0x3a8>
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x3cc>
    183e:	80 e2       	ldi	r24, 0x20	; 32
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	b3 01       	movw	r22, r6
    1844:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <fputc>
    1848:	ea 94       	dec	r14
    184a:	ee 20       	and	r14, r14
    184c:	c1 f7       	brne	.-16     	; 0x183e <vfprintf+0x3c0>
    184e:	43 ce       	rjmp	.-890    	; 0x14d6 <vfprintf+0x58>
    1850:	f3 01       	movw	r30, r6
    1852:	66 81       	ldd	r22, Z+6	; 0x06
    1854:	77 81       	ldd	r23, Z+7	; 0x07
    1856:	cb 01       	movw	r24, r22
    1858:	2b 96       	adiw	r28, 0x0b	; 11
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	6f 90       	pop	r6
    1880:	5f 90       	pop	r5
    1882:	4f 90       	pop	r4
    1884:	3f 90       	pop	r3
    1886:	2f 90       	pop	r2
    1888:	08 95       	ret

0000188a <strnlen_P>:
    188a:	fc 01       	movw	r30, r24
    188c:	05 90       	lpm	r0, Z+
    188e:	61 50       	subi	r22, 0x01	; 1
    1890:	70 40       	sbci	r23, 0x00	; 0
    1892:	01 10       	cpse	r0, r1
    1894:	d8 f7       	brcc	.-10     	; 0x188c <strnlen_P+0x2>
    1896:	80 95       	com	r24
    1898:	90 95       	com	r25
    189a:	8e 0f       	add	r24, r30
    189c:	9f 1f       	adc	r25, r31
    189e:	08 95       	ret

000018a0 <strnlen>:
    18a0:	fc 01       	movw	r30, r24
    18a2:	61 50       	subi	r22, 0x01	; 1
    18a4:	70 40       	sbci	r23, 0x00	; 0
    18a6:	01 90       	ld	r0, Z+
    18a8:	01 10       	cpse	r0, r1
    18aa:	d8 f7       	brcc	.-10     	; 0x18a2 <strnlen+0x2>
    18ac:	80 95       	com	r24
    18ae:	90 95       	com	r25
    18b0:	8e 0f       	add	r24, r30
    18b2:	9f 1f       	adc	r25, r31
    18b4:	08 95       	ret

000018b6 <fputc>:
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	8c 01       	movw	r16, r24
    18c0:	eb 01       	movw	r28, r22
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 ff       	sbrs	r24, 1
    18c6:	1b c0       	rjmp	.+54     	; 0x18fe <fputc+0x48>
    18c8:	82 ff       	sbrs	r24, 2
    18ca:	0d c0       	rjmp	.+26     	; 0x18e6 <fputc+0x30>
    18cc:	2e 81       	ldd	r18, Y+6	; 0x06
    18ce:	3f 81       	ldd	r19, Y+7	; 0x07
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	28 17       	cp	r18, r24
    18d6:	39 07       	cpc	r19, r25
    18d8:	64 f4       	brge	.+24     	; 0x18f2 <fputc+0x3c>
    18da:	e8 81       	ld	r30, Y
    18dc:	f9 81       	ldd	r31, Y+1	; 0x01
    18de:	01 93       	st	Z+, r16
    18e0:	f9 83       	std	Y+1, r31	; 0x01
    18e2:	e8 83       	st	Y, r30
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <fputc+0x3c>
    18e6:	e8 85       	ldd	r30, Y+8	; 0x08
    18e8:	f9 85       	ldd	r31, Y+9	; 0x09
    18ea:	80 2f       	mov	r24, r16
    18ec:	09 95       	icall
    18ee:	89 2b       	or	r24, r25
    18f0:	31 f4       	brne	.+12     	; 0x18fe <fputc+0x48>
    18f2:	8e 81       	ldd	r24, Y+6	; 0x06
    18f4:	9f 81       	ldd	r25, Y+7	; 0x07
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	9f 83       	std	Y+7, r25	; 0x07
    18fa:	8e 83       	std	Y+6, r24	; 0x06
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <fputc+0x4c>
    18fe:	0f ef       	ldi	r16, 0xFF	; 255
    1900:	1f ef       	ldi	r17, 0xFF	; 255
    1902:	c8 01       	movw	r24, r16
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <__ultoa_invert>:
    190e:	fa 01       	movw	r30, r20
    1910:	aa 27       	eor	r26, r26
    1912:	28 30       	cpi	r18, 0x08	; 8
    1914:	51 f1       	breq	.+84     	; 0x196a <__ultoa_invert+0x5c>
    1916:	20 31       	cpi	r18, 0x10	; 16
    1918:	81 f1       	breq	.+96     	; 0x197a <__ultoa_invert+0x6c>
    191a:	e8 94       	clt
    191c:	6f 93       	push	r22
    191e:	6e 7f       	andi	r22, 0xFE	; 254
    1920:	6e 5f       	subi	r22, 0xFE	; 254
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	af 4f       	sbci	r26, 0xFF	; 255
    192a:	b1 e0       	ldi	r27, 0x01	; 1
    192c:	3e d0       	rcall	.+124    	; 0x19aa <__ultoa_invert+0x9c>
    192e:	b4 e0       	ldi	r27, 0x04	; 4
    1930:	3c d0       	rcall	.+120    	; 0x19aa <__ultoa_invert+0x9c>
    1932:	67 0f       	add	r22, r23
    1934:	78 1f       	adc	r23, r24
    1936:	89 1f       	adc	r24, r25
    1938:	9a 1f       	adc	r25, r26
    193a:	a1 1d       	adc	r26, r1
    193c:	68 0f       	add	r22, r24
    193e:	79 1f       	adc	r23, r25
    1940:	8a 1f       	adc	r24, r26
    1942:	91 1d       	adc	r25, r1
    1944:	a1 1d       	adc	r26, r1
    1946:	6a 0f       	add	r22, r26
    1948:	71 1d       	adc	r23, r1
    194a:	81 1d       	adc	r24, r1
    194c:	91 1d       	adc	r25, r1
    194e:	a1 1d       	adc	r26, r1
    1950:	20 d0       	rcall	.+64     	; 0x1992 <__ultoa_invert+0x84>
    1952:	09 f4       	brne	.+2      	; 0x1956 <__ultoa_invert+0x48>
    1954:	68 94       	set
    1956:	3f 91       	pop	r19
    1958:	2a e0       	ldi	r18, 0x0A	; 10
    195a:	26 9f       	mul	r18, r22
    195c:	11 24       	eor	r1, r1
    195e:	30 19       	sub	r19, r0
    1960:	30 5d       	subi	r19, 0xD0	; 208
    1962:	31 93       	st	Z+, r19
    1964:	de f6       	brtc	.-74     	; 0x191c <__ultoa_invert+0xe>
    1966:	cf 01       	movw	r24, r30
    1968:	08 95       	ret
    196a:	46 2f       	mov	r20, r22
    196c:	47 70       	andi	r20, 0x07	; 7
    196e:	40 5d       	subi	r20, 0xD0	; 208
    1970:	41 93       	st	Z+, r20
    1972:	b3 e0       	ldi	r27, 0x03	; 3
    1974:	0f d0       	rcall	.+30     	; 0x1994 <__ultoa_invert+0x86>
    1976:	c9 f7       	brne	.-14     	; 0x196a <__ultoa_invert+0x5c>
    1978:	f6 cf       	rjmp	.-20     	; 0x1966 <__ultoa_invert+0x58>
    197a:	46 2f       	mov	r20, r22
    197c:	4f 70       	andi	r20, 0x0F	; 15
    197e:	40 5d       	subi	r20, 0xD0	; 208
    1980:	4a 33       	cpi	r20, 0x3A	; 58
    1982:	18 f0       	brcs	.+6      	; 0x198a <__ultoa_invert+0x7c>
    1984:	49 5d       	subi	r20, 0xD9	; 217
    1986:	31 fd       	sbrc	r19, 1
    1988:	40 52       	subi	r20, 0x20	; 32
    198a:	41 93       	st	Z+, r20
    198c:	02 d0       	rcall	.+4      	; 0x1992 <__ultoa_invert+0x84>
    198e:	a9 f7       	brne	.-22     	; 0x197a <__ultoa_invert+0x6c>
    1990:	ea cf       	rjmp	.-44     	; 0x1966 <__ultoa_invert+0x58>
    1992:	b4 e0       	ldi	r27, 0x04	; 4
    1994:	a6 95       	lsr	r26
    1996:	97 95       	ror	r25
    1998:	87 95       	ror	r24
    199a:	77 95       	ror	r23
    199c:	67 95       	ror	r22
    199e:	ba 95       	dec	r27
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__ultoa_invert+0x86>
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	61 05       	cpc	r22, r1
    19a6:	71 05       	cpc	r23, r1
    19a8:	08 95       	ret
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
    19ae:	0a 2e       	mov	r0, r26
    19b0:	06 94       	lsr	r0
    19b2:	57 95       	ror	r21
    19b4:	47 95       	ror	r20
    19b6:	37 95       	ror	r19
    19b8:	27 95       	ror	r18
    19ba:	ba 95       	dec	r27
    19bc:	c9 f7       	brne	.-14     	; 0x19b0 <__ultoa_invert+0xa2>
    19be:	62 0f       	add	r22, r18
    19c0:	73 1f       	adc	r23, r19
    19c2:	84 1f       	adc	r24, r20
    19c4:	95 1f       	adc	r25, r21
    19c6:	a0 1d       	adc	r26, r0
    19c8:	08 95       	ret

000019ca <_exit>:
    19ca:	f8 94       	cli

000019cc <__stop_program>:
    19cc:	ff cf       	rjmp	.-2      	; 0x19cc <__stop_program>
