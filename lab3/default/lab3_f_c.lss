
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000019e6  00001a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b0  00800128  00800128  00001aa2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003df  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000128d  00000000  00000000  00001ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045b  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e22  00000000  00000000  000035cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  000043f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a59  00000000  00000000  00004b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00005577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	e6 ee       	ldi	r30, 0xE6	; 230
     4ec:	f9 e1       	ldi	r31, 0x19	; 25
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	a8 32       	cpi	r26, 0x28	; 40
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	15 e0       	ldi	r17, 0x05	; 5
     500:	a8 e2       	ldi	r26, 0x28	; 40
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a8 3d       	cpi	r26, 0xD8	; 216
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <main>
     512:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
volatile char is_on_screen[Max_num_balls];

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 b8 05 	lds	r24, 0x05B8
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 7a 05 	lds	r24, 0x057A
     544:	90 91 7b 05 	lds	r25, 0x057B
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 7b 05 	sts	0x057B, r25
     54e:	80 93 7a 05 	sts	0x057A, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 7a 05 	lds	r24, 0x057A
     556:	90 91 7b 05 	lds	r25, 0x057B
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 b8 05 	sts	0x05B8, r24
    	syncOFF = 0;
     566:	10 92 d7 05 	sts	0x05D7, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 7a 05 	lds	r24, 0x057A
     56e:	90 91 7b 05 	lds	r25, 0x057B
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 b8 05 	sts	0x05B8, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 d7 05 	sts	0x05D7, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 7a 05 	lds	r24, 0x057A
     586:	90 91 7b 05 	lds	r25, 0x057B
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 7b 05 	sts	0x057B, r25
     598:	80 93 7a 05 	sts	0x057A, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 d7 05 	lds	r24, 0x05D7
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 7a 05 	lds	r24, 0x057A
     5ac:	90 91 7b 05 	lds	r25, 0x057B
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 7a 05 	lds	r24, 0x057A
     5ba:	90 91 7b 05 	lds	r25, 0x057B
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 7a 05 	lds	r24, 0x057A
     5c6:	90 91 7b 05 	lds	r25, 0x057B
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(8);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	e7 5c       	subi	r30, 0xC7	; 199
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	e5 5c       	subi	r30, 0xC5	; 197
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     6a2:	80 5a       	subi	r24, 0xA0	; 160
     6a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	80 83       	st	Z, r24
end
     6b0:	08 95       	ret

000006b2 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     6b6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     6ba:	10 92 7a 00 	sts	0x007A, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     6c4:	87 e8       	ldi	r24, 0x87	; 135
     6c6:	80 93 7a 00 	sts	0x007A, r24
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     6ca:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     6cc:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     6d8:	80 ec       	ldi	r24, 0xC0	; 192
     6da:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	10 93 c5 00 	sts	0x00C5, r17
     6e6:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	//LCD_init();
	port_init();
	USART_init();
	timer1_init();
     6ea:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     6ee:	10 93 7b 05 	sts	0x057B, r17
     6f2:	00 93 7a 05 	sts	0x057A, r16

	syncON = 0b00000000;
     6f6:	10 92 b8 05 	sts	0x05B8, r1
	syncOFF = 0b00000001;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 d7 05 	sts	0x05D7, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++) is_on_screen[n] = 0;
     704:	fc 01       	movw	r30, r24
     706:	e6 5d       	subi	r30, 0xD6	; 214
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	10 82       	st	Z, r1
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	8f 30       	cpi	r24, 0x0F	; 15
     710:	91 05       	cpc	r25, r1
     712:	c1 f7       	brne	.-16     	; 0x704 <initialize+0x52>
     714:	e9 e3       	ldi	r30, 0x39	; 57
     716:	f1 e0       	ldi	r31, 0x01	; 1
	for(int y=0; y<screen_array_size;y++) screen[y] = 0;
     718:	11 92       	st	Z+, r1
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	e9 33       	cpi	r30, 0x39	; 57
     71e:	f8 07       	cpc	r31, r24
     720:	d9 f7       	brne	.-10     	; 0x718 <initialize+0x66>

	// Set up single video line timing
	sei();
     722:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     724:	83 b7       	in	r24, 0x33	; 51
     726:	81 7f       	andi	r24, 0xF1	; 241
     728:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     72a:	83 b7       	in	r24, 0x33	; 51
     72c:	81 60       	ori	r24, 0x01	; 1
     72e:	83 bf       	out	0x33, r24	; 51

end
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     736:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	34 e0       	ldi	r19, 0x04	; 4
     73c:	66 0f       	add	r22, r22
     73e:	77 1f       	adc	r23, r23
     740:	3a 95       	dec	r19
     742:	e1 f7       	brne	.-8      	; 0x73c <video_pt+0x6>
     744:	86 95       	lsr	r24
     746:	86 95       	lsr	r24
     748:	86 95       	lsr	r24
     74a:	68 0f       	add	r22, r24
     74c:	71 1d       	adc	r23, r1

	if (c==1)
     74e:	41 30       	cpi	r20, 0x01	; 1
     750:	69 f4       	brne	.+26     	; 0x76c <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     752:	db 01       	movw	r26, r22
     754:	a7 5c       	subi	r26, 0xC7	; 199
     756:	be 4f       	sbci	r27, 0xFE	; 254
     758:	e9 2f       	mov	r30, r25
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e7 70       	andi	r30, 0x07	; 7
     75e:	f0 70       	andi	r31, 0x00	; 0
     760:	e1 5e       	subi	r30, 0xE1	; 225
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	8c 91       	ld	r24, X
     766:	90 81       	ld	r25, Z
     768:	89 2b       	or	r24, r25
     76a:	17 c0       	rjmp	.+46     	; 0x79a <video_pt+0x64>
     76c:	db 01       	movw	r26, r22
     76e:	a7 5c       	subi	r26, 0xC7	; 199
     770:	be 4f       	sbci	r27, 0xFE	; 254
     772:	e9 2f       	mov	r30, r25
     774:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     776:	44 23       	and	r20, r20
     778:	49 f4       	brne	.+18     	; 0x78c <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     77a:	e7 70       	andi	r30, 0x07	; 7
     77c:	f0 70       	andi	r31, 0x00	; 0
     77e:	e1 5e       	subi	r30, 0xE1	; 225
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	90 81       	ld	r25, Z
     784:	90 95       	com	r25
     786:	8c 91       	ld	r24, X
     788:	89 23       	and	r24, r25
     78a:	07 c0       	rjmp	.+14     	; 0x79a <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     78c:	e7 70       	andi	r30, 0x07	; 7
     78e:	f0 70       	andi	r31, 0x00	; 0
     790:	e1 5e       	subi	r30, 0xE1	; 225
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	8c 91       	ld	r24, X
     796:	90 81       	ld	r25, Z
     798:	89 27       	eor	r24, r25
     79a:	8c 93       	st	X, r24
     79c:	08 95       	ret

0000079e <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     79e:	2f 92       	push	r2
     7a0:	3f 92       	push	r3
     7a2:	4f 92       	push	r4
     7a4:	5f 92       	push	r5
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <video_line+0x26>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <video_line+0x28>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     7cc:	c8 2e       	mov	r12, r24
     7ce:	dd 24       	eor	r13, r13
	y = y1;
     7d0:	e6 2e       	mov	r14, r22
     7d2:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     7d4:	48 17       	cp	r20, r24
     7d6:	38 f4       	brcc	.+14     	; 0x7e6 <video_line+0x48>
		dx = x1 - x2;
     7d8:	c6 01       	movw	r24, r12
     7da:	84 1b       	sub	r24, r20
     7dc:	91 09       	sbc	r25, r1
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	7f ef       	ldi	r23, 0xFF	; 255
     7e4:	0d c0       	rjmp	.+26     	; 0x800 <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     7e6:	48 17       	cp	r20, r24
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <video_line+0x54>
     7ea:	1c 82       	std	Y+4, r1	; 0x04
     7ec:	1b 82       	std	Y+3, r1	; 0x03
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     7f2:	e4 2f       	mov	r30, r20
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	ec 19       	sub	r30, r12
     7f8:	fd 09       	sbc	r31, r13
     7fa:	fc 83       	std	Y+4, r31	; 0x04
     7fc:	eb 83       	std	Y+3, r30	; 0x03
     7fe:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     800:	26 17       	cp	r18, r22
     802:	28 f4       	brcc	.+10     	; 0x80e <video_line+0x70>
		dy = y1 - y2;
     804:	a7 01       	movw	r20, r14
     806:	42 1b       	sub	r20, r18
     808:	51 09       	sbc	r21, r1
     80a:	6f ef       	ldi	r22, 0xFF	; 255
     80c:	0b c0       	rjmp	.+22     	; 0x824 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     80e:	26 17       	cp	r18, r22
     810:	21 f4       	brne	.+8      	; 0x81a <video_line+0x7c>
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     81a:	42 2f       	mov	r20, r18
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	4e 19       	sub	r20, r14
     820:	5f 09       	sbc	r21, r15
     822:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	84 17       	cp	r24, r20
     82a:	95 07       	cpc	r25, r21
     82c:	44 f4       	brge	.+16     	; 0x83e <video_line+0xa0>
     82e:	ca 01       	movw	r24, r20
     830:	4b 81       	ldd	r20, Y+3	; 0x03
     832:	5c 81       	ldd	r21, Y+4	; 0x04
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	99 83       	std	Y+1, r25	; 0x01
     83c:	01 c0       	rjmp	.+2      	; 0x840 <video_line+0xa2>
     83e:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     840:	2a 01       	movw	r4, r20
     842:	44 0c       	add	r4, r4
     844:	55 1c       	adc	r5, r5
     846:	82 01       	movw	r16, r4
     848:	eb 81       	ldd	r30, Y+3	; 0x03
     84a:	fc 81       	ldd	r31, Y+4	; 0x04
     84c:	0e 1b       	sub	r16, r30
     84e:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     850:	1f 01       	movw	r2, r30
     852:	22 0c       	add	r2, r2
     854:	33 1c       	adc	r3, r3
     856:	aa 24       	eor	r10, r10
     858:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     85a:	66 2e       	mov	r6, r22
     85c:	77 24       	eor	r7, r7
     85e:	67 fc       	sbrc	r6, 7
     860:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     862:	87 2e       	mov	r8, r23
     864:	99 24       	eor	r9, r9
     866:	87 fc       	sbrc	r8, 7
     868:	90 94       	com	r9
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     86c:	8c 2d       	mov	r24, r12
     86e:	6e 2d       	mov	r22, r14
     870:	4a 81       	ldd	r20, Y+2	; 0x02
     872:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
		 
		if (e>=0) {
     876:	17 fd       	sbrc	r17, 7
     878:	0a c0       	rjmp	.+20     	; 0x88e <video_line+0xf0>
			if (xchange==1) x = x + s1;
     87a:	f9 81       	ldd	r31, Y+1	; 0x01
     87c:	f1 30       	cpi	r31, 0x01	; 1
     87e:	19 f4       	brne	.+6      	; 0x886 <video_line+0xe8>
     880:	c8 0c       	add	r12, r8
     882:	d9 1c       	adc	r13, r9
     884:	02 c0       	rjmp	.+4      	; 0x88a <video_line+0xec>
			else y = y + s2;
     886:	e6 0c       	add	r14, r6
     888:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     88a:	02 19       	sub	r16, r2
     88c:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	19 f4       	brne	.+6      	; 0x89a <video_line+0xfc>
     894:	e6 0c       	add	r14, r6
     896:	f7 1c       	adc	r15, r7
     898:	02 c0       	rjmp	.+4      	; 0x89e <video_line+0x100>
		else x = x + s1;
     89a:	c8 0c       	add	r12, r8
     89c:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     89e:	04 0d       	add	r16, r4
     8a0:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     8a2:	08 94       	sec
     8a4:	a1 1c       	adc	r10, r1
     8a6:	b1 1c       	adc	r11, r1
     8a8:	eb 81       	ldd	r30, Y+3	; 0x03
     8aa:	fc 81       	ldd	r31, Y+4	; 0x04
     8ac:	ea 15       	cp	r30, r10
     8ae:	fb 05       	cpc	r31, r11
     8b0:	ec f6       	brge	.-70     	; 0x86c <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	bf 90       	pop	r11
     8cc:	af 90       	pop	r10
     8ce:	9f 90       	pop	r9
     8d0:	8f 90       	pop	r8
     8d2:	7f 90       	pop	r7
     8d4:	6f 90       	pop	r6
     8d6:	5f 90       	pop	r5
     8d8:	4f 90       	pop	r4
     8da:	3f 90       	pop	r3
     8dc:	2f 90       	pop	r2
     8de:	08 95       	ret

000008e0 <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	e8 2e       	mov	r14, r24
     8fa:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	48 9f       	mul	r20, r24
     900:	a0 01       	movw	r20, r0
     902:	11 24       	eor	r1, r1
     904:	ea 01       	movw	r28, r20
     906:	c8 5e       	subi	r28, 0xE8	; 232
     908:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     90a:	8e 2c       	mov	r8, r14
     90c:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     90e:	02 e0       	ldi	r16, 0x02	; 2
     910:	90 2e       	mov	r9, r16
     912:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     914:	13 e0       	ldi	r17, 0x03	; 3
     916:	a1 2e       	mov	r10, r17
     918:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     91a:	b4 e0       	ldi	r27, 0x04	; 4
     91c:	bb 2e       	mov	r11, r27
     91e:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     920:	af e1       	ldi	r26, 0x1F	; 31
     922:	ca 2e       	mov	r12, r26
     924:	a1 e0       	ldi	r26, 0x01	; 1
     926:	da 2e       	mov	r13, r26
     928:	c4 0e       	add	r12, r20
     92a:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     92c:	fe 01       	movw	r30, r28
     92e:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     930:	40 2f       	mov	r20, r16
     932:	44 1f       	adc	r20, r20
     934:	44 27       	eor	r20, r20
     936:	44 1f       	adc	r20, r20
     938:	8e 2d       	mov	r24, r14
     93a:	6f 2d       	mov	r22, r15
     93c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	a8 01       	movw	r20, r16
     944:	f6 e0       	ldi	r31, 0x06	; 6
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	fa 95       	dec	r31
     94c:	e1 f7       	brne	.-8      	; 0x946 <video_putchar+0x66>
     94e:	41 70       	andi	r20, 0x01	; 1
     950:	88 2d       	mov	r24, r8
     952:	6f 2d       	mov	r22, r15
     954:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     958:	a8 01       	movw	r20, r16
     95a:	e5 e0       	ldi	r30, 0x05	; 5
     95c:	56 95       	lsr	r21
     95e:	47 95       	ror	r20
     960:	ea 95       	dec	r30
     962:	e1 f7       	brne	.-8      	; 0x95c <video_putchar+0x7c>
     964:	41 70       	andi	r20, 0x01	; 1
     966:	89 2d       	mov	r24, r9
     968:	6f 2d       	mov	r22, r15
     96a:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     96e:	a8 01       	movw	r20, r16
     970:	74 e0       	ldi	r23, 0x04	; 4
     972:	56 95       	lsr	r21
     974:	47 95       	ror	r20
     976:	7a 95       	dec	r23
     978:	e1 f7       	brne	.-8      	; 0x972 <video_putchar+0x92>
     97a:	41 70       	andi	r20, 0x01	; 1
     97c:	8a 2d       	mov	r24, r10
     97e:	6f 2d       	mov	r22, r15
     980:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     984:	63 e0       	ldi	r22, 0x03	; 3
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	6a 95       	dec	r22
     98c:	e1 f7       	brne	.-8      	; 0x986 <video_putchar+0xa6>
     98e:	01 70       	andi	r16, 0x01	; 1
     990:	8b 2d       	mov	r24, r11
     992:	6f 2d       	mov	r22, r15
     994:	40 2f       	mov	r20, r16
     996:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     99e:	cc 15       	cp	r28, r12
     9a0:	dd 05       	cpc	r29, r13
     9a2:	21 f6       	brne	.-120    	; 0x92c <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	08 95       	ret

000009be <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	08 2f       	mov	r16, r24
     9ca:	f6 2e       	mov	r15, r22
     9cc:	ea 01       	movw	r28, r20
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     9d2:	80 2f       	mov	r24, r16
     9d4:	6f 2d       	mov	r22, r15
     9d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <video_putchar>
		x = x+6;	
     9da:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     9dc:	1f 5f       	subi	r17, 0xFF	; 255
     9de:	fe 01       	movw	r30, r28
     9e0:	e1 0f       	add	r30, r17
     9e2:	f1 1d       	adc	r31, r1
     9e4:	40 81       	ld	r20, Z
     9e6:	44 23       	and	r20, r20
     9e8:	a1 f7       	brne	.-24     	; 0x9d2 <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	08 95       	ret

000009f6 <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     9f6:	e6 2f       	mov	r30, r22
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	28 2f       	mov	r18, r24
     9fc:	26 95       	lsr	r18
     9fe:	26 95       	lsr	r18
     a00:	26 95       	lsr	r18
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	9a 95       	dec	r25
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <video_set+0xe>
     a0c:	e2 0f       	add	r30, r18
     a0e:	f1 1d       	adc	r31, r1
     a10:	e7 5c       	subi	r30, 0xC7	; 199
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 95       	com	r24
     a18:	90 95       	com	r25
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	90 70       	andi	r25, 0x00	; 0
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <video_set+0x32>
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	8a 95       	dec	r24
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <video_set+0x2e>
     a2c:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     a2e:	82 23       	and	r24, r18
     a30:	08 95       	ret

00000a32 <remove_ball>:


//////////////////////////////////////////////////////////////////////////////

void remove_ball(int i)
begin
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
	video_pt(x_pos[i]+1,y_pos[i],0);
     a3a:	8c 01       	movw	r16, r24
     a3c:	00 0f       	add	r16, r16
     a3e:	11 1f       	adc	r17, r17
     a40:	2b e4       	ldi	r18, 0x4B	; 75
     a42:	e2 2e       	mov	r14, r18
     a44:	25 e0       	ldi	r18, 0x05	; 5
     a46:	f2 2e       	mov	r15, r18
     a48:	e0 0e       	add	r14, r16
     a4a:	f1 1e       	adc	r15, r17
     a4c:	f7 01       	movw	r30, r14
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	07 54       	subi	r16, 0x47	; 71
     a54:	1a 4f       	sbci	r17, 0xFA	; 250
     a56:	f8 01       	movw	r30, r16
     a58:	60 81       	ld	r22, Z
     a5a:	71 81       	ldd	r23, Z+1	; 0x01
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i],0);
     a64:	f7 01       	movw	r30, r14
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	f8 01       	movw	r30, r16
     a6c:	60 81       	ld	r22, Z
     a6e:	71 81       	ldd	r23, Z+1	; 0x01
     a70:	8e 5f       	subi	r24, 0xFE	; 254
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+1,0);
     a78:	f7 01       	movw	r30, r14
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	f8 01       	movw	r30, r16
     a80:	60 81       	ld	r22, Z
     a82:	71 81       	ldd	r23, Z+1	; 0x01
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+2,0);
     a8c:	f7 01       	movw	r30, r14
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	f8 01       	movw	r30, r16
     a94:	60 81       	ld	r22, Z
     a96:	71 81       	ldd	r23, Z+1	; 0x01
     a98:	6e 5f       	subi	r22, 0xFE	; 254
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+1,0);
     aa0:	f7 01       	movw	r30, r14
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	f8 01       	movw	r30, r16
     aa8:	60 81       	ld	r22, Z
     aaa:	71 81       	ldd	r23, Z+1	; 0x01
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	8d 5f       	subi	r24, 0xFD	; 253
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+2,0);
     ab6:	f7 01       	movw	r30, r14
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	f8 01       	movw	r30, r16
     abe:	60 81       	ld	r22, Z
     ac0:	71 81       	ldd	r23, Z+1	; 0x01
     ac2:	6e 5f       	subi	r22, 0xFE	; 254
     ac4:	8d 5f       	subi	r24, 0xFD	; 253
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+1,y_pos[i]+3,0);
     acc:	f7 01       	movw	r30, r14
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	f8 01       	movw	r30, r16
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	6d 5f       	subi	r22, 0xFD	; 253
     ada:	8f 5f       	subi	r24, 0xFF	; 255
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i]+3,0);
     ae2:	f7 01       	movw	r30, r14
     ae4:	80 81       	ld	r24, Z
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	f8 01       	movw	r30, r16
     aea:	60 81       	ld	r22, Z
     aec:	71 81       	ldd	r23, Z+1	; 0x01
     aee:	6d 5f       	subi	r22, 0xFD	; 253
     af0:	8e 5f       	subi	r24, 0xFE	; 254
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
end
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	08 95       	ret

00000b02 <place_ball>:

void place_ball(int i)
begin
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
	video_pt(x_pos[i]+1,y_pos[i],1);
     b0a:	8c 01       	movw	r16, r24
     b0c:	00 0f       	add	r16, r16
     b0e:	11 1f       	adc	r17, r17
     b10:	4b e4       	ldi	r20, 0x4B	; 75
     b12:	e4 2e       	mov	r14, r20
     b14:	45 e0       	ldi	r20, 0x05	; 5
     b16:	f4 2e       	mov	r15, r20
     b18:	e0 0e       	add	r14, r16
     b1a:	f1 1e       	adc	r15, r17
     b1c:	f7 01       	movw	r30, r14
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	07 54       	subi	r16, 0x47	; 71
     b24:	1a 4f       	sbci	r17, 0xFA	; 250
     b26:	f8 01       	movw	r30, r16
     b28:	60 81       	ld	r22, Z
     b2a:	71 81       	ldd	r23, Z+1	; 0x01
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	41 e0       	ldi	r20, 0x01	; 1
     b30:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i],1);
     b34:	f7 01       	movw	r30, r14
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	f8 01       	movw	r30, r16
     b3c:	60 81       	ld	r22, Z
     b3e:	71 81       	ldd	r23, Z+1	; 0x01
     b40:	8e 5f       	subi	r24, 0xFE	; 254
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+1,1);
     b48:	f7 01       	movw	r30, r14
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	f8 01       	movw	r30, r16
     b50:	60 81       	ld	r22, Z
     b52:	71 81       	ldd	r23, Z+1	; 0x01
     b54:	6f 5f       	subi	r22, 0xFF	; 255
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i],y_pos[i]+2,1);
     b5c:	f7 01       	movw	r30, r14
     b5e:	80 81       	ld	r24, Z
     b60:	91 81       	ldd	r25, Z+1	; 0x01
     b62:	f8 01       	movw	r30, r16
     b64:	60 81       	ld	r22, Z
     b66:	71 81       	ldd	r23, Z+1	; 0x01
     b68:	6e 5f       	subi	r22, 0xFE	; 254
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+1,1);
     b70:	f7 01       	movw	r30, r14
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	f8 01       	movw	r30, r16
     b78:	60 81       	ld	r22, Z
     b7a:	71 81       	ldd	r23, Z+1	; 0x01
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	8d 5f       	subi	r24, 0xFD	; 253
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+3,y_pos[i]+2,1);
     b86:	f7 01       	movw	r30, r14
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	f8 01       	movw	r30, r16
     b8e:	60 81       	ld	r22, Z
     b90:	71 81       	ldd	r23, Z+1	; 0x01
     b92:	6e 5f       	subi	r22, 0xFE	; 254
     b94:	8d 5f       	subi	r24, 0xFD	; 253
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+1,y_pos[i]+3,1);
     b9c:	f7 01       	movw	r30, r14
     b9e:	80 81       	ld	r24, Z
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	f8 01       	movw	r30, r16
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	6d 5f       	subi	r22, 0xFD	; 253
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	41 e0       	ldi	r20, 0x01	; 1
     bae:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[i]+2,y_pos[i]+3,1);
     bb2:	f7 01       	movw	r30, r14
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	f8 01       	movw	r30, r16
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	6d 5f       	subi	r22, 0xFD	; 253
     bc0:	8e 5f       	subi	r24, 0xFE	; 254
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
end
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	08 95       	ret

00000bd2 <add_ball>:

// adds a ball to the screen
void add_ball(void)
begin
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <add_ball+0xa>
	int i = 0;
	while(is_on_screen[i]) i++;
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	f9 01       	movw	r30, r18
     bde:	e6 5d       	subi	r30, 0xD6	; 214
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	c1 f7       	brne	.-16     	; 0xbd8 <add_ball+0x6>
	i--;
     be8:	c9 01       	movw	r24, r18
     bea:	01 97       	sbiw	r24, 0x01	; 1
	is_on_screen[i] = 1;
     bec:	fc 01       	movw	r30, r24
     bee:	e6 5d       	subi	r30, 0xD6	; 214
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	20 83       	st	Z, r18
	x_pos[i] = 123;
     bf6:	fc 01       	movw	r30, r24
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	df 01       	movw	r26, r30
     bfe:	a5 5b       	subi	r26, 0xB5	; 181
     c00:	ba 4f       	sbci	r27, 0xFA	; 250
     c02:	2b e7       	ldi	r18, 0x7B	; 123
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	3c 93       	st	X, r19
     c0a:	2e 93       	st	-X, r18
	y_pos[i] = 14;
     c0c:	df 01       	movw	r26, r30
     c0e:	a7 54       	subi	r26, 0x47	; 71
     c10:	ba 4f       	sbci	r27, 0xFA	; 250
     c12:	2e e0       	ldi	r18, 0x0E	; 14
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	11 96       	adiw	r26, 0x01	; 1
     c18:	3c 93       	st	X, r19
     c1a:	2e 93       	st	-X, r18
	x_velocity[i] = 0xe200; 
     c1c:	df 01       	movw	r26, r30
     c1e:	a4 58       	subi	r26, 0x84	; 132
     c20:	ba 4f       	sbci	r27, 0xFA	; 250
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	32 ee       	ldi	r19, 0xE2	; 226
     c26:	11 96       	adiw	r26, 0x01	; 1
     c28:	3c 93       	st	X, r19
     c2a:	2e 93       	st	-X, r18
	y_velocity[i] = 0x0300;
     c2c:	e6 56       	subi	r30, 0x66	; 102
     c2e:	fa 4f       	sbci	r31, 0xFA	; 250
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	33 e0       	ldi	r19, 0x03	; 3
     c34:	31 83       	std	Z+1, r19	; 0x01
     c36:	20 83       	st	Z, r18
	place_ball(i);
     c38:	0e 94 81 05 	call	0xb02	; 0xb02 <place_ball>
end
     c3c:	08 95       	ret

00000c3e <main>:

int main(void)
begin
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	29 97       	sbiw	r28, 0x09	; 9
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61

	unsigned char time_str[3];
	unsigned char score_str[3];


	initialize();
     c72:	0e 94 59 03 	call	0x6b2	; 0x6b2 <initialize>
	x_pos[0] = 40;
     c76:	88 e2       	ldi	r24, 0x28	; 40
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 4c 05 	sts	0x054C, r25
     c7e:	80 93 4b 05 	sts	0x054B, r24
	y_pos[0] = 30;
     c82:	8e e1       	ldi	r24, 0x1E	; 30
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 ba 05 	sts	0x05BA, r25
     c8a:	80 93 b9 05 	sts	0x05B9, r24
	video_line(width,0,width,height,1);
     c8e:	8f e7       	ldi	r24, 0x7F	; 127
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	4f e7       	ldi	r20, 0x7F	; 127
     c94:	2f e3       	ldi	r18, 0x3F	; 63
     c96:	01 e0       	ldi	r16, 0x01	; 1
     c98:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_line(0,0,width,0,1);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	4f e7       	ldi	r20, 0x7F	; 127
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_line(0,height,width-17,height,1);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	6f e3       	ldi	r22, 0x3F	; 63
     cac:	4e e6       	ldi	r20, 0x6E	; 110
     cae:	2f e3       	ldi	r18, 0x3F	; 63
     cb0:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_pt(40,1,1);
     cb4:	88 e2       	ldi	r24, 0x28	; 40
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(80,1,1);
     cbe:	80 e5       	ldi	r24, 0x50	; 80
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(40,height-1,1);
     cc8:	88 e2       	ldi	r24, 0x28	; 40
     cca:	6e e3       	ldi	r22, 0x3E	; 62
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(80,height-1,1);
     cd2:	80 e5       	ldi	r24, 0x50	; 80
     cd4:	6e e3       	ldi	r22, 0x3E	; 62
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
     cdc:	33 24       	eor	r3, r3
     cde:	19 86       	std	Y+9, r1	; 0x09
     ce0:	22 e0       	ldi	r18, 0x02	; 2
     ce2:	e2 2e       	mov	r14, r18
     ce4:	44 24       	eor	r4, r4
     ce6:	55 24       	eor	r5, r5
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <main+0xb0>
     cea:	2e 2c       	mov	r2, r14
     cec:	e2 2c       	mov	r14, r2

	// guide for the real code
	while(time_elapsed_HS<=200)
	begin
		if (LineCount == ScreenBot)
     cee:	80 91 7a 05 	lds	r24, 0x057A
     cf2:	90 91 7b 05 	lds	r25, 0x057B
     cf6:	8d 36       	cpi	r24, 0x6D	; 109
     cf8:	91 05       	cpc	r25, r1
     cfa:	b9 f7       	brne	.-18     	; 0xcea <main+0xac>
		begin

			// 1. Timing and ball addition
			frame_count++;
     cfc:	08 94       	sec
     cfe:	41 1c       	adc	r4, r1
     d00:	51 1c       	adc	r5, r1
			if (frame_count >= 30)
     d02:	2e e1       	ldi	r18, 0x1E	; 30
     d04:	42 16       	cp	r4, r18
     d06:	51 04       	cpc	r5, r1
     d08:	84 f1       	brlt	.+96     	; 0xd6a <main+0x12c>
			begin
				add_ball();
     d0a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <add_ball>
				//place_ball(0);
				frame_count = 0;
				time_elapsed_HS++; 
     d0e:	39 85       	ldd	r19, Y+9	; 0x09
     d10:	3f 5f       	subi	r19, 0xFF	; 255
     d12:	39 87       	std	Y+9, r19	; 0x09
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     d14:	00 d0       	rcall	.+0      	; 0xd16 <main+0xd8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <main+0xda>
     d18:	00 d0       	rcall	.+0      	; 0xd1a <main+0xdc>
     d1a:	ed b7       	in	r30, 0x3d	; 61
     d1c:	fe b7       	in	r31, 0x3e	; 62
     d1e:	31 96       	adiw	r30, 0x01	; 1
     d20:	21 e0       	ldi	r18, 0x01	; 1
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	2c 0f       	add	r18, r28
     d26:	3d 1f       	adc	r19, r29
     d28:	ad b7       	in	r26, 0x3d	; 61
     d2a:	be b7       	in	r27, 0x3e	; 62
     d2c:	12 96       	adiw	r26, 0x02	; 2
     d2e:	3c 93       	st	X, r19
     d30:	2e 93       	st	-X, r18
     d32:	11 97       	sbiw	r26, 0x01	; 1
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	93 83       	std	Z+3, r25	; 0x03
     d3a:	82 83       	std	Z+2, r24	; 0x02
     d3c:	89 85       	ldd	r24, Y+9	; 0x09
     d3e:	86 95       	lsr	r24
     d40:	84 83       	std	Z+4, r24	; 0x04
     d42:	15 82       	std	Z+5, r1	; 0x05
     d44:	0e 94 1a 0a 	call	0x1434	; 0x1434 <sprintf>
				video_puts(110,57,time_str);
     d48:	ad b7       	in	r26, 0x3d	; 61
     d4a:	be b7       	in	r27, 0x3e	; 62
     d4c:	16 96       	adiw	r26, 0x06	; 6
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	be bf       	out	0x3e, r27	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	ad bf       	out	0x3d, r26	; 61
     d58:	8e e6       	ldi	r24, 0x6E	; 110
     d5a:	69 e3       	ldi	r22, 0x39	; 57
     d5c:	ae 01       	movw	r20, r28
     d5e:	4f 5f       	subi	r20, 0xFF	; 255
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
     d66:	44 24       	eor	r4, r4
     d68:	55 24       	eor	r5, r5
			end

			// 2. update positions for the paddle
				video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     d6a:	1e 2d       	mov	r17, r14
     d6c:	18 5f       	subi	r17, 0xF8	; 248
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	6e 2d       	mov	r22, r14
     d72:	42 e0       	ldi	r20, 0x02	; 2
     d74:	21 2f       	mov	r18, r17
     d76:	00 e0       	ldi	r16, 0x00	; 0
     d78:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	6e 2d       	mov	r22, r14
     d80:	43 e0       	ldi	r20, 0x03	; 3
     d82:	21 2f       	mov	r18, r17
     d84:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				prev_top = top_of_paddle;
				top_of_paddle =(ADCH*53/255)+1;
     d88:	80 91 79 00 	lds	r24, 0x0079
     d8c:	b5 e3       	ldi	r27, 0x35	; 53
     d8e:	8b 9f       	mul	r24, r27
     d90:	c0 01       	movw	r24, r0
     d92:	11 24       	eor	r1, r1
     d94:	6f ef       	ldi	r22, 0xFF	; 255
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     d9c:	16 2f       	mov	r17, r22
     d9e:	26 2e       	mov	r2, r22
     da0:	23 94       	inc	r2
				v_paddle_y = top_of_paddle-prev_top;
     da2:	62 2c       	mov	r6, r2
     da4:	77 24       	eor	r7, r7
     da6:	f3 01       	movw	r30, r6
     da8:	ee 19       	sub	r30, r14
     daa:	f1 09       	sbc	r31, r1
     dac:	f8 87       	std	Y+8, r31	; 0x08
     dae:	ef 83       	std	Y+7, r30	; 0x07
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     db0:	17 5f       	subi	r17, 0xF7	; 247
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	62 2d       	mov	r22, r2
     db6:	42 e0       	ldi	r20, 0x02	; 2
     db8:	21 2f       	mov	r18, r17
     dba:	01 e0       	ldi	r16, 0x01	; 1
     dbc:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	62 2d       	mov	r22, r2
     dc4:	43 e0       	ldi	r20, 0x03	; 3
     dc6:	21 2f       	mov	r18, r17
     dc8:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     dcc:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     dd0:	f0 e6       	ldi	r31, 0x60	; 96
     dd2:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     dd6:	80 91 7a 00 	lds	r24, 0x007A
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	80 93 7a 00 	sts	0x007A, r24
     de0:	88 24       	eor	r8, r8
     de2:	99 24       	eor	r9, r9
				ADC_start_measure(0);

			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
     de4:	f4 01       	movw	r30, r8
     de6:	e6 5d       	subi	r30, 0xD6	; 214
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	80 81       	ld	r24, Z
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <main+0x1b4>
     df0:	cc c0       	rjmp	.+408    	; 0xf8a <main+0x34c>
     df2:	c4 01       	movw	r24, r8
     df4:	01 96       	adiw	r24, 0x01	; 1
				begin
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						if(is_on_screen[j])
     df6:	fc 01       	movw	r30, r24
     df8:	e6 5d       	subi	r30, 0xD6	; 214
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	e0 81       	ld	r30, Z
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
				begin
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	8f 30       	cpi	r24, 0x0F	; 15
     e02:	91 05       	cpc	r25, r1
     e04:	c4 f3       	brlt	.-16     	; 0xdf6 <main+0x1b8>
								//collision code here

							end // rij check
						end // is on screen j
					end // for j
					delta_x_velocity = multfix(x_velocity[i],0x0001);
     e06:	84 01       	movw	r16, r8
     e08:	00 0f       	add	r16, r16
     e0a:	11 1f       	adc	r17, r17
     e0c:	8c e7       	ldi	r24, 0x7C	; 124
     e0e:	c8 2e       	mov	r12, r24
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	d8 2e       	mov	r13, r24
     e14:	c0 0e       	add	r12, r16
     e16:	d1 1e       	adc	r13, r17
     e18:	d6 01       	movw	r26, r12
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	0e 94 e5 09 	call	0x13ca	; 0x13ca <multfix>
     e26:	5c 01       	movw	r10, r24
					delta_y_velocity = multfix(y_velocity[i],0x0001);
     e28:	ba e9       	ldi	r27, 0x9A	; 154
     e2a:	eb 2e       	mov	r14, r27
     e2c:	b5 e0       	ldi	r27, 0x05	; 5
     e2e:	fb 2e       	mov	r15, r27
     e30:	e0 0e       	add	r14, r16
     e32:	f1 1e       	adc	r15, r17
     e34:	f7 01       	movw	r30, r14
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <multfix>
					x_velocity[i] -= delta_x_velocity;
     e42:	d6 01       	movw	r26, r12
     e44:	2d 91       	ld	r18, X+
     e46:	3c 91       	ld	r19, X
     e48:	11 97       	sbiw	r26, 0x01	; 1
     e4a:	2a 19       	sub	r18, r10
     e4c:	3b 09       	sbc	r19, r11
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	3c 93       	st	X, r19
     e52:	2e 93       	st	-X, r18
					y_velocity[i] -= delta_y_velocity;
     e54:	f7 01       	movw	r30, r14
     e56:	20 81       	ld	r18, Z
     e58:	31 81       	ldd	r19, Z+1	; 0x01
     e5a:	28 1b       	sub	r18, r24
     e5c:	39 0b       	sbc	r19, r25
     e5e:	31 83       	std	Z+1, r19	; 0x01
     e60:	20 83       	st	Z, r18


					if((x_pos[i] <= 4) & ((y_pos[i]-top_of_paddle)>0) & ((y_pos[i]-top_of_paddle)<7))
     e62:	f8 01       	movw	r30, r16
     e64:	e5 5b       	subi	r30, 0xB5	; 181
     e66:	fa 4f       	sbci	r31, 0xFA	; 250
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	07 54       	subi	r16, 0x47	; 71
     e6e:	1a 4f       	sbci	r17, 0xFA	; 250
     e70:	d8 01       	movw	r26, r16
     e72:	2d 91       	ld	r18, X+
     e74:	3c 91       	ld	r19, X
     e76:	11 97       	sbiw	r26, 0x01	; 1
     e78:	0d 91       	ld	r16, X+
     e7a:	1c 91       	ld	r17, X
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	05 97       	sbiw	r24, 0x05	; 5
     e80:	0c f4       	brge	.+2      	; 0xe84 <main+0x246>
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	26 19       	sub	r18, r6
     e88:	37 09       	sbc	r19, r7
     e8a:	12 16       	cp	r1, r18
     e8c:	13 06       	cpc	r1, r19
     e8e:	0c f4       	brge	.+2      	; 0xe92 <main+0x254>
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	48 23       	and	r20, r24
     e94:	84 2f       	mov	r24, r20
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	06 19       	sub	r16, r6
     e9e:	17 09       	sbc	r17, r7
     ea0:	07 30       	cpi	r16, 0x07	; 7
     ea2:	11 05       	cpc	r17, r1
     ea4:	14 f4       	brge	.+4      	; 0xeaa <main+0x26c>
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	82 23       	and	r24, r18
     eac:	93 23       	and	r25, r19
     eae:	89 2b       	or	r24, r25
     eb0:	b9 f0       	breq	.+46     	; 0xee0 <main+0x2a2>
					begin
						x_velocity[i] |= 0x8000;
     eb2:	f4 01       	movw	r30, r8
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	df 01       	movw	r26, r30
     eba:	a4 58       	subi	r26, 0x84	; 132
     ebc:	ba 4f       	sbci	r27, 0xFA	; 250
     ebe:	8d 91       	ld	r24, X+
     ec0:	9c 91       	ld	r25, X
     ec2:	11 97       	sbiw	r26, 0x01	; 1
     ec4:	90 68       	ori	r25, 0x80	; 128
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	9c 93       	st	X, r25
     eca:	8e 93       	st	-X, r24
						y_velocity[i] += v_paddle_y;
     ecc:	e6 56       	subi	r30, 0x66	; 102
     ece:	fa 4f       	sbci	r31, 0xFA	; 250
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	2f 81       	ldd	r18, Y+7	; 0x07
     ed6:	38 85       	ldd	r19, Y+8	; 0x08
     ed8:	82 0f       	add	r24, r18
     eda:	93 1f       	adc	r25, r19
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
					end

			// 3.2. Update position of balls

					remove_ball(i);
     ee0:	c4 01       	movw	r24, r8
     ee2:	0e 94 19 05 	call	0xa32	; 0xa32 <remove_ball>


					x_pos[i] += x_velocity[i];
     ee6:	d4 01       	movw	r26, r8
     ee8:	aa 0f       	add	r26, r26
     eea:	bb 1f       	adc	r27, r27
     eec:	8d 01       	movw	r16, r26
     eee:	05 5b       	subi	r16, 0xB5	; 181
     ef0:	1a 4f       	sbci	r17, 0xFA	; 250
     ef2:	f8 01       	movw	r30, r16
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	fd 01       	movw	r30, r26
     efa:	e4 58       	subi	r30, 0x84	; 132
     efc:	fa 4f       	sbci	r31, 0xFA	; 250
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	82 0f       	add	r24, r18
     f04:	93 1f       	adc	r25, r19
     f06:	f8 01       	movw	r30, r16
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
					y_pos[i] += y_velocity[i];
     f0c:	fd 01       	movw	r30, r26
     f0e:	e7 54       	subi	r30, 0x47	; 71
     f10:	fa 4f       	sbci	r31, 0xFA	; 250
     f12:	20 81       	ld	r18, Z
     f14:	31 81       	ldd	r19, Z+1	; 0x01
     f16:	a6 56       	subi	r26, 0x66	; 102
     f18:	ba 4f       	sbci	r27, 0xFA	; 250
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	82 0f       	add	r24, r18
     f20:	93 1f       	adc	r25, r19
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24

					place_ball(i);
     f26:	c4 01       	movw	r24, r8
     f28:	0e 94 81 05 	call	0xb02	; 0xb02 <place_ball>

			// 3.3 remove balls that hit the left side of the screen or bins
					if(x_pos[i] <= 1) // hit left wall
     f2c:	d8 01       	movw	r26, r16
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	02 97       	sbiw	r24, 0x02	; 2
     f34:	34 f4       	brge	.+12     	; 0xf42 <main+0x304>
					begin
						is_on_screen[i] = 0;
     f36:	f4 01       	movw	r30, r8
     f38:	e6 5d       	subi	r30, 0xD6	; 214
     f3a:	fe 4f       	sbci	r31, 0xFE	; 254
     f3c:	10 82       	st	Z, r1
						if(score) score--;
     f3e:	31 10       	cpse	r3, r1
     f40:	3a 94       	dec	r3
						// remove_ball(x_pos[q],y_pos[q]);
					end // hit left wall
					if(x_pos[i]<100 & x_pos[i]>60)
     f42:	94 01       	movw	r18, r8
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	f9 01       	movw	r30, r18
     f4a:	e5 5b       	subi	r30, 0xB5	; 181
     f4c:	fa 4f       	sbci	r31, 0xFA	; 250
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	01 90       	ld	r0, Z+
     f54:	f0 81       	ld	r31, Z
     f56:	e0 2d       	mov	r30, r0
     f58:	84 36       	cpi	r24, 0x64	; 100
     f5a:	91 05       	cpc	r25, r1
     f5c:	b4 f4       	brge	.+44     	; 0xf8a <main+0x34c>
     f5e:	fd 97       	sbiw	r30, 0x3d	; 61
     f60:	a4 f0       	brlt	.+40     	; 0xf8a <main+0x34c>
					begin
						if(y_pos[i]<=1 | y_pos[i]>=(height-2))
     f62:	f9 01       	movw	r30, r18
     f64:	e7 54       	subi	r30, 0x47	; 71
     f66:	fa 4f       	sbci	r31, 0xFA	; 250
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	01 90       	ld	r0, Z+
     f6e:	f0 81       	ld	r31, Z
     f70:	e0 2d       	mov	r30, r0
     f72:	02 97       	sbiw	r24, 0x02	; 2
     f74:	14 f0       	brlt	.+4      	; 0xf7a <main+0x33c>
     f76:	fd 97       	sbiw	r30, 0x3d	; 61
     f78:	44 f0       	brlt	.+16     	; 0xf8a <main+0x34c>
						begin
							is_on_screen[i] = 0;
     f7a:	f4 01       	movw	r30, r8
     f7c:	e6 5d       	subi	r30, 0xD6	; 214
     f7e:	fe 4f       	sbci	r31, 0xFE	; 254
     f80:	10 82       	st	Z, r1
							score++;
     f82:	33 94       	inc	r3
							remove_ball(i);
     f84:	c4 01       	movw	r24, r8
     f86:	0e 94 19 05 	call	0xa32	; 0xa32 <remove_ball>
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
				ADC_start_measure(0);

			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
     f8a:	08 94       	sec
     f8c:	81 1c       	adc	r8, r1
     f8e:	91 1c       	adc	r9, r1
     f90:	be e0       	ldi	r27, 0x0E	; 14
     f92:	8b 16       	cp	r8, r27
     f94:	91 04       	cpc	r9, r1
     f96:	09 f0       	breq	.+2      	; 0xf9a <main+0x35c>
     f98:	25 cf       	rjmp	.-438    	; 0xde4 <main+0x1a6>
					end // x check bins
				end // is on screen i
			end // for i

			// 5. update text (score, time...)
			sprintf(score_str, "%3d",score);
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <main+0x35e>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <main+0x360>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <main+0x362>
     fa0:	ed b7       	in	r30, 0x3d	; 61
     fa2:	fe b7       	in	r31, 0x3e	; 62
     fa4:	31 96       	adiw	r30, 0x01	; 1
     fa6:	24 e0       	ldi	r18, 0x04	; 4
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	2c 0f       	add	r18, r28
     fac:	3d 1f       	adc	r19, r29
     fae:	ad b7       	in	r26, 0x3d	; 61
     fb0:	be b7       	in	r27, 0x3e	; 62
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	3c 93       	st	X, r19
     fb6:	2e 93       	st	-X, r18
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	93 83       	std	Z+3, r25	; 0x03
     fc0:	82 83       	std	Z+2, r24	; 0x02
     fc2:	34 82       	std	Z+4, r3	; 0x04
     fc4:	15 82       	std	Z+5, r1	; 0x05
     fc6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <sprintf>
			video_puts(110,1,score_str);
     fca:	ad b7       	in	r26, 0x3d	; 61
     fcc:	be b7       	in	r27, 0x3e	; 62
     fce:	16 96       	adiw	r26, 0x06	; 6
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	be bf       	out	0x3e, r27	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	ad bf       	out	0x3d, r26	; 61
     fda:	8e e6       	ldi	r24, 0x6E	; 110
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	ae 01       	movw	r20, r28
     fe0:	4c 5f       	subi	r20, 0xFC	; 252
     fe2:	5f 4f       	sbci	r21, 0xFF	; 255
     fe4:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
	video_pt(80,1,1);
	video_pt(40,height-1,1);
	video_pt(80,height-1,1);

	// guide for the real code
	while(time_elapsed_HS<=200)
     fe8:	b9 85       	ldd	r27, Y+9	; 0x09
     fea:	b9 3c       	cpi	r27, 0xC9	; 201
     fec:	08 f4       	brcc	.+2      	; 0xff0 <main+0x3b2>
     fee:	7e ce       	rjmp	.-772    	; 0xcec <main+0xae>
		end // linecount == screenBot
	end // while time < 200

	while(1)
	begin
		sprintf(score_str, "%i",score);
     ff0:	8e 01       	movw	r16, r28
     ff2:	0c 5f       	subi	r16, 0xFC	; 252
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	74 e0       	ldi	r23, 0x04	; 4
     ff8:	87 2e       	mov	r8, r23
     ffa:	71 e0       	ldi	r23, 0x01	; 1
     ffc:	97 2e       	mov	r9, r23
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <main+0x3c2>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <main+0x3c4>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <main+0x3c6>
    1004:	ed b7       	in	r30, 0x3d	; 61
    1006:	fe b7       	in	r31, 0x3e	; 62
    1008:	31 96       	adiw	r30, 0x01	; 1
    100a:	ad b7       	in	r26, 0x3d	; 61
    100c:	be b7       	in	r27, 0x3e	; 62
    100e:	12 96       	adiw	r26, 0x02	; 2
    1010:	1c 93       	st	X, r17
    1012:	0e 93       	st	-X, r16
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	93 82       	std	Z+3, r9	; 0x03
    1018:	82 82       	std	Z+2, r8	; 0x02
    101a:	34 82       	std	Z+4, r3	; 0x04
    101c:	15 82       	std	Z+5, r1	; 0x05
    101e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <sprintf>
		video_puts(30,30,"Time Is Up!");
    1022:	ed b7       	in	r30, 0x3d	; 61
    1024:	fe b7       	in	r31, 0x3e	; 62
    1026:	36 96       	adiw	r30, 0x06	; 6
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	fe bf       	out	0x3e, r31	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	ed bf       	out	0x3d, r30	; 61
    1032:	8e e1       	ldi	r24, 0x1E	; 30
    1034:	6e e1       	ldi	r22, 0x1E	; 30
    1036:	47 e0       	ldi	r20, 0x07	; 7
    1038:	51 e0       	ldi	r21, 0x01	; 1
    103a:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
		video_puts(30,42,"Your score:");
    103e:	8e e1       	ldi	r24, 0x1E	; 30
    1040:	6a e2       	ldi	r22, 0x2A	; 42
    1042:	43 e1       	ldi	r20, 0x13	; 19
    1044:	51 e0       	ldi	r21, 0x01	; 1
    1046:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
		video_puts(100,42,score_str);
    104a:	84 e6       	ldi	r24, 0x64	; 100
    104c:	6a e2       	ldi	r22, 0x2A	; 42
    104e:	a8 01       	movw	r20, r16
    1050:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
    1054:	d4 cf       	rjmp	.-88     	; 0xffe <main+0x3c0>

00001056 <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
    105a:	00 d0       	rcall	.+0      	; 0x105c <write_LCD+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <write_LCD+0x8>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <write_LCD+0xa>
    1060:	ed b7       	in	r30, 0x3d	; 61
    1062:	fe b7       	in	r31, 0x3e	; 62
    1064:	31 96       	adiw	r30, 0x01	; 1
    1066:	09 e3       	ldi	r16, 0x39	; 57
    1068:	15 e0       	ldi	r17, 0x05	; 5
    106a:	ad b7       	in	r26, 0x3d	; 61
    106c:	be b7       	in	r27, 0x3e	; 62
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	1c 93       	st	X, r17
    1072:	0e 93       	st	-X, r16
    1074:	11 97       	sbiw	r26, 0x01	; 1
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	31 e0       	ldi	r19, 0x01	; 1
    107a:	33 83       	std	Z+3, r19	; 0x03
    107c:	22 83       	std	Z+2, r18	; 0x02
    107e:	84 83       	std	Z+4, r24	; 0x04
    1080:	15 82       	std	Z+5, r1	; 0x05
    1082:	0e 94 1a 0a 	call	0x1434	; 0x1434 <sprintf>
	LCDGotoXY(0, 1);
    1086:	8d b7       	in	r24, 0x3d	; 61
    1088:	9e b7       	in	r25, 0x3e	; 62
    108a:	06 96       	adiw	r24, 0x06	; 6
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	9e bf       	out	0x3e, r25	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	8d bf       	out	0x3d, r24	; 61
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
    109e:	f8 01       	movw	r30, r16
    10a0:	01 90       	ld	r0, Z+
    10a2:	00 20       	and	r0, r0
    10a4:	e9 f7       	brne	.-6      	; 0x10a0 <write_LCD+0x4a>
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	e0 1b       	sub	r30, r16
    10aa:	f1 0b       	sbc	r31, r17
    10ac:	c8 01       	movw	r24, r16
    10ae:	6e 2f       	mov	r22, r30
    10b0:	0e 94 b6 08 	call	0x116c	; 0x116c <LCDstring>
end
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
    10ba:	0e 94 15 09 	call	0x122a	; 0x122a <LCDinit>
	LCDcursorOFF();
    10be:	0e 94 7d 09 	call	0x12fa	; 0x12fa <LCDcursorOFF>
	LCDclr();				//clear the display
    10c2:	0e 94 ae 08 	call	0x115c	; 0x115c <LCDclr>
	LCDGotoXY(0,0);
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    10ce:	8c e8       	ldi	r24, 0x8C	; 140
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <CopyStringtoLCD>
	LCD_char_count = 0;
    10da:	10 92 4a 05 	sts	0x054A, r1
end
    10de:	08 95       	ret

000010e0 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    10e0:	28 2f       	mov	r18, r24
    10e2:	20 7f       	andi	r18, 0xF0	; 240
    10e4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    10e6:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    10e8:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ea:	20 e4       	ldi	r18, 0x40	; 64
    10ec:	3f e1       	ldi	r19, 0x1F	; 31
    10ee:	f9 01       	movw	r30, r18
    10f0:	31 97       	sbiw	r30, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    10f4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    10f6:	40 98       	cbi	0x08, 0	; 8
    10f8:	f9 01       	movw	r30, r18
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	44 e0       	ldi	r20, 0x04	; 4
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	4a 95       	dec	r20
    1108:	e1 f7       	brne	.-8      	; 0x1102 <LCDsendChar+0x22>
    110a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    110c:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    110e:	42 9a       	sbi	0x08, 2	; 8
    1110:	c9 01       	movw	r24, r18
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1116:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1118:	40 98       	cbi	0x08, 0	; 8
    111a:	c9 01       	movw	r24, r18
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1120:	08 95       	ret

00001122 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1122:	28 2f       	mov	r18, r24
    1124:	20 7f       	andi	r18, 0xF0	; 240
    1126:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    1128:	42 9a       	sbi	0x08, 2	; 8
    112a:	20 e4       	ldi	r18, 0x40	; 64
    112c:	3f e1       	ldi	r19, 0x1F	; 31
    112e:	f9 01       	movw	r30, r18
    1130:	31 97       	sbiw	r30, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1134:	42 98       	cbi	0x08, 2	; 8
    1136:	f9 01       	movw	r30, r18
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	54 e0       	ldi	r21, 0x04	; 4
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	5a 95       	dec	r21
    1146:	e1 f7       	brne	.-8      	; 0x1140 <LCDsendCommand+0x1e>
    1148:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    114a:	42 9a       	sbi	0x08, 2	; 8
    114c:	c9 01       	movw	r24, r18
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1152:	42 98       	cbi	0x08, 2	; 8
    1154:	c9 01       	movw	r24, r18
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    115a:	08 95       	ret

0000115c <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    1162:	08 95       	ret

00001164 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    116a:	08 95       	ret

0000116c <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	49 f0       	breq	.+18     	; 0x118c <LCDstring+0x20>
    117a:	ec 01       	movw	r28, r24
    117c:	10 e0       	ldi	r17, 0x00	; 0
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1180:	89 91       	ld	r24, Y+
    1182:	0e 94 70 08 	call	0x10e0	; 0x10e0 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1186:	1f 5f       	subi	r17, 0xFF	; 255
    1188:	10 17       	cp	r17, r16
    118a:	d0 f3       	brcs	.-12     	; 0x1180 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1196:	62 30       	cpi	r22, 0x02	; 2
    1198:	31 f0       	breq	.+12     	; 0x11a6 <LCDGotoXY+0x10>
    119a:	63 30       	cpi	r22, 0x03	; 3
    119c:	31 f0       	breq	.+12     	; 0x11aa <LCDGotoXY+0x14>
    119e:	61 30       	cpi	r22, 0x01	; 1
    11a0:	29 f4       	brne	.+10     	; 0x11ac <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    11a2:	80 5c       	subi	r24, 0xC0	; 192
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    11a6:	8c 5e       	subi	r24, 0xEC	; 236
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    11aa:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
	
}
    11b2:	08 95       	ret

000011b4 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    11be:	64 2f       	mov	r22, r20
    11c0:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    11c8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    11cc:	1f 5f       	subi	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	e1 0f       	add	r30, r17
    11d2:	f1 1d       	adc	r31, r1
    11d4:	84 91       	lpm	r24, Z+
    11d6:	88 23       	and	r24, r24
    11d8:	b9 f7       	brne	.-18     	; 0x11c8 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	08 95       	ret

000011e2 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	7c 01       	movw	r14, r24
    11f0:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    11f2:	11 0f       	add	r17, r17
    11f4:	11 0f       	add	r17, r17
    11f6:	11 0f       	add	r17, r17
    11f8:	10 64       	ori	r17, 0x40	; 64
    11fa:	c0 e0       	ldi	r28, 0x00	; 0
    11fc:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    11fe:	f7 01       	movw	r30, r14
    1200:	ec 0f       	add	r30, r28
    1202:	fd 1f       	adc	r31, r29
    1204:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1206:	81 2f       	mov	r24, r17
    1208:	8c 0f       	add	r24, r28
    120a:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
		LCDsendChar(pcc);
    120e:	80 2f       	mov	r24, r16
    1210:	0e 94 70 08 	call	0x10e0	; 0x10e0 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    1214:	21 96       	adiw	r28, 0x01	; 1
    1216:	c8 30       	cpi	r28, 0x08	; 8
    1218:	d1 05       	cpc	r29, r1
    121a:	89 f7       	brne	.-30     	; 0x11fe <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	08 95       	ret

0000122a <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	80 e6       	ldi	r24, 0x60	; 96
    1232:	9a ee       	ldi	r25, 0xEA	; 234
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1238:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    123a:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    123c:	87 b1       	in	r24, 0x07	; 7
    123e:	80 6f       	ori	r24, 0xF0	; 240
    1240:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1242:	87 b1       	in	r24, 0x07	; 7
    1244:	87 60       	ori	r24, 0x07	; 7
    1246:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1248:	80 e3       	ldi	r24, 0x30	; 48
    124a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    124c:	42 9a       	sbi	0x08, 2	; 8
    124e:	20 e4       	ldi	r18, 0x40	; 64
    1250:	3f e1       	ldi	r19, 0x1F	; 31
    1252:	f9 01       	movw	r30, r18
    1254:	31 97       	sbiw	r30, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1258:	42 98       	cbi	0x08, 2	; 8
    125a:	f9 01       	movw	r30, r18
    125c:	31 97       	sbiw	r30, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1260:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1262:	42 9a       	sbi	0x08, 2	; 8
    1264:	c9 01       	movw	r24, r18
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    126a:	42 98       	cbi	0x08, 2	; 8
    126c:	c9 01       	movw	r24, r18
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1276:	42 9a       	sbi	0x08, 2	; 8
    1278:	c9 01       	movw	r24, r18
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    127e:	42 98       	cbi	0x08, 2	; 8
    1280:	c9 01       	movw	r24, r18
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1286:	88 e2       	ldi	r24, 0x28	; 40
    1288:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    128c:	8c e0       	ldi	r24, 0x0C	; 12
    128e:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
    1292:	c8 e9       	ldi	r28, 0x98	; 152
    1294:	d4 e0       	ldi	r29, 0x04	; 4
    1296:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1298:	16 2f       	mov	r17, r22
    129a:	1f 5f       	subi	r17, 0xFF	; 255
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCDdefinechar>
    12a2:	28 96       	adiw	r28, 0x08	; 8
    12a4:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    12a6:	18 30       	cpi	r17, 0x08	; 8
    12a8:	b9 f7       	brne	.-18     	; 0x1298 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	08 95       	ret

000012b2 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	08 2f       	mov	r16, r24
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    12bc:	8e e1       	ldi	r24, 0x1E	; 30
    12be:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    12c2:	1f 5f       	subi	r17, 0xFF	; 255
    12c4:	10 17       	cp	r17, r16
    12c6:	d0 f3       	brcs	.-12     	; 0x12bc <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	08 2f       	mov	r16, r24
    12d4:	10 e0       	ldi	r17, 0x00	; 0
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    12d8:	88 e1       	ldi	r24, 0x18	; 24
    12da:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    12de:	1f 5f       	subi	r17, 0xFF	; 255
    12e0:	10 17       	cp	r17, r16
    12e2:	d0 f3       	brcs	.-12     	; 0x12d8 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    12ea:	8e e0       	ldi	r24, 0x0E	; 14
    12ec:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    12f0:	08 95       	ret

000012f2 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    12f2:	8f e0       	ldi	r24, 0x0F	; 15
    12f4:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    12f8:	08 95       	ret

000012fa <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    12fa:	8c e0       	ldi	r24, 0x0C	; 12
    12fc:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    1300:	08 95       	ret

00001302 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    1308:	08 95       	ret

0000130a <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
}
    1310:	08 95       	ret

00001312 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	08 2f       	mov	r16, r24
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    131c:	80 e1       	ldi	r24, 0x10	; 16
    131e:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1322:	1f 5f       	subi	r17, 0xFF	; 255
    1324:	10 17       	cp	r17, r16
    1326:	d0 f3       	brcs	.-12     	; 0x131c <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	08 95       	ret

0000132e <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	08 2f       	mov	r16, r24
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1338:	84 e1       	ldi	r24, 0x14	; 20
    133a:	0e 94 91 08 	call	0x1122	; 0x1122 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    133e:	1f 5f       	subi	r17, 0xFF	; 255
    1340:	10 17       	cp	r17, r16
    1342:	d0 f3       	brcs	.-12     	; 0x1338 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    135a:	96 e0       	ldi	r25, 0x06	; 6
    135c:	89 9f       	mul	r24, r25
    135e:	c0 01       	movw	r24, r0
    1360:	11 24       	eor	r1, r1
    1362:	24 2f       	mov	r18, r20
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	ac 01       	movw	r20, r24
    1368:	42 9f       	mul	r20, r18
    136a:	c0 01       	movw	r24, r0
    136c:	43 9f       	mul	r20, r19
    136e:	90 0d       	add	r25, r0
    1370:	52 9f       	mul	r21, r18
    1372:	90 0d       	add	r25, r0
    1374:	11 24       	eor	r1, r1
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
    137c:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    137e:	cb 01       	movw	r24, r22
    1380:	66 e0       	ldi	r22, 0x06	; 6
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodhi4>
    1388:	e8 2e       	mov	r14, r24
    138a:	ff 24       	eor	r15, r15
    138c:	00 e0       	ldi	r16, 0x00	; 0
    138e:	10 e0       	ldi	r17, 0x00	; 0
    1390:	12 c0       	rjmp	.+36     	; 0x13b6 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1392:	c8 01       	movw	r24, r16
    1394:	05 96       	adiw	r24, 0x05	; 5
    1396:	c8 17       	cp	r28, r24
    1398:	d9 07       	cpc	r29, r25
    139a:	10 f0       	brcs	.+4      	; 0x13a0 <LCDprogressBar+0x56>
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    13a0:	c0 17       	cp	r28, r16
    13a2:	d1 07       	cpc	r29, r17
    13a4:	10 f0       	brcs	.+4      	; 0x13aa <LCDprogressBar+0x60>
    13a6:	8e 2d       	mov	r24, r14
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <LCDprogressBar+0x62>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    13ac:	0e 94 70 08 	call	0x10e0	; 0x10e0 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    13b0:	f3 94       	inc	r15
    13b2:	0a 5f       	subi	r16, 0xFA	; 250
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	fd 14       	cp	r15, r13
    13b8:	60 f3       	brcs	.-40     	; 0x1392 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	08 95       	ret

000013ca <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
    13ca:	48 2f       	mov	r20, r24
	mov  r21,r25											
    13cc:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
    13ce:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
    13d0:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
    13d2:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
    13d4:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
    13d6:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
    13d8:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
    13da:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
    13dc:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
    13de:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
    13e0:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
    13e2:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
    13e4:	08 95       	ret

000013e6 <__udivmodhi4>:
    13e6:	aa 1b       	sub	r26, r26
    13e8:	bb 1b       	sub	r27, r27
    13ea:	51 e1       	ldi	r21, 0x11	; 17
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <__udivmodhi4_ep>

000013ee <__udivmodhi4_loop>:
    13ee:	aa 1f       	adc	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	a6 17       	cp	r26, r22
    13f4:	b7 07       	cpc	r27, r23
    13f6:	10 f0       	brcs	.+4      	; 0x13fc <__udivmodhi4_ep>
    13f8:	a6 1b       	sub	r26, r22
    13fa:	b7 0b       	sbc	r27, r23

000013fc <__udivmodhi4_ep>:
    13fc:	88 1f       	adc	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	5a 95       	dec	r21
    1402:	a9 f7       	brne	.-22     	; 0x13ee <__udivmodhi4_loop>
    1404:	80 95       	com	r24
    1406:	90 95       	com	r25
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	08 95       	ret

0000140e <__divmodhi4>:
    140e:	97 fb       	bst	r25, 7
    1410:	09 2e       	mov	r0, r25
    1412:	07 26       	eor	r0, r23
    1414:	0a d0       	rcall	.+20     	; 0x142a <__divmodhi4_neg1>
    1416:	77 fd       	sbrc	r23, 7
    1418:	04 d0       	rcall	.+8      	; 0x1422 <__divmodhi4_neg2>
    141a:	e5 df       	rcall	.-54     	; 0x13e6 <__udivmodhi4>
    141c:	06 d0       	rcall	.+12     	; 0x142a <__divmodhi4_neg1>
    141e:	00 20       	and	r0, r0
    1420:	1a f4       	brpl	.+6      	; 0x1428 <__divmodhi4_exit>

00001422 <__divmodhi4_neg2>:
    1422:	70 95       	com	r23
    1424:	61 95       	neg	r22
    1426:	7f 4f       	sbci	r23, 0xFF	; 255

00001428 <__divmodhi4_exit>:
    1428:	08 95       	ret

0000142a <__divmodhi4_neg1>:
    142a:	f6 f7       	brtc	.-4      	; 0x1428 <__divmodhi4_exit>
    142c:	90 95       	com	r25
    142e:	81 95       	neg	r24
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	08 95       	ret

00001434 <sprintf>:
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	2e 97       	sbiw	r28, 0x0e	; 14
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	0d 89       	ldd	r16, Y+21	; 0x15
    144e:	1e 89       	ldd	r17, Y+22	; 0x16
    1450:	86 e0       	ldi	r24, 0x06	; 6
    1452:	8c 83       	std	Y+4, r24	; 0x04
    1454:	1a 83       	std	Y+2, r17	; 0x02
    1456:	09 83       	std	Y+1, r16	; 0x01
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	9f e7       	ldi	r25, 0x7F	; 127
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	9e 01       	movw	r18, r28
    1462:	27 5e       	subi	r18, 0xE7	; 231
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	6f 89       	ldd	r22, Y+23	; 0x17
    146c:	78 8d       	ldd	r23, Y+24	; 0x18
    146e:	a9 01       	movw	r20, r18
    1470:	0e 94 4b 0a 	call	0x1496	; 0x1496 <vfprintf>
    1474:	2f 81       	ldd	r18, Y+7	; 0x07
    1476:	38 85       	ldd	r19, Y+8	; 0x08
    1478:	02 0f       	add	r16, r18
    147a:	13 1f       	adc	r17, r19
    147c:	f8 01       	movw	r30, r16
    147e:	10 82       	st	Z, r1
    1480:	2e 96       	adiw	r28, 0x0e	; 14
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <vfprintf>:
    1496:	2f 92       	push	r2
    1498:	3f 92       	push	r3
    149a:	4f 92       	push	r4
    149c:	5f 92       	push	r5
    149e:	6f 92       	push	r6
    14a0:	7f 92       	push	r7
    14a2:	8f 92       	push	r8
    14a4:	9f 92       	push	r9
    14a6:	af 92       	push	r10
    14a8:	bf 92       	push	r11
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	2b 97       	sbiw	r28, 0x0b	; 11
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	3c 01       	movw	r6, r24
    14cc:	2b 01       	movw	r4, r22
    14ce:	5a 01       	movw	r10, r20
    14d0:	fc 01       	movw	r30, r24
    14d2:	17 82       	std	Z+7, r1	; 0x07
    14d4:	16 82       	std	Z+6, r1	; 0x06
    14d6:	83 81       	ldd	r24, Z+3	; 0x03
    14d8:	81 fd       	sbrc	r24, 1
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <vfprintf+0x4c>
    14dc:	6f ef       	ldi	r22, 0xFF	; 255
    14de:	7f ef       	ldi	r23, 0xFF	; 255
    14e0:	c6 c1       	rjmp	.+908    	; 0x186e <vfprintf+0x3d8>
    14e2:	9a e0       	ldi	r25, 0x0A	; 10
    14e4:	89 2e       	mov	r8, r25
    14e6:	1e 01       	movw	r2, r28
    14e8:	08 94       	sec
    14ea:	21 1c       	adc	r2, r1
    14ec:	31 1c       	adc	r3, r1
    14ee:	f3 01       	movw	r30, r6
    14f0:	23 81       	ldd	r18, Z+3	; 0x03
    14f2:	f2 01       	movw	r30, r4
    14f4:	23 fd       	sbrc	r18, 3
    14f6:	85 91       	lpm	r24, Z+
    14f8:	23 ff       	sbrs	r18, 3
    14fa:	81 91       	ld	r24, Z+
    14fc:	2f 01       	movw	r4, r30
    14fe:	88 23       	and	r24, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <vfprintf+0x6e>
    1502:	b2 c1       	rjmp	.+868    	; 0x1868 <vfprintf+0x3d2>
    1504:	85 32       	cpi	r24, 0x25	; 37
    1506:	39 f4       	brne	.+14     	; 0x1516 <vfprintf+0x80>
    1508:	23 fd       	sbrc	r18, 3
    150a:	85 91       	lpm	r24, Z+
    150c:	23 ff       	sbrs	r18, 3
    150e:	81 91       	ld	r24, Z+
    1510:	2f 01       	movw	r4, r30
    1512:	85 32       	cpi	r24, 0x25	; 37
    1514:	29 f4       	brne	.+10     	; 0x1520 <vfprintf+0x8a>
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	b3 01       	movw	r22, r6
    151a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    151e:	e7 cf       	rjmp	.-50     	; 0x14ee <vfprintf+0x58>
    1520:	98 2f       	mov	r25, r24
    1522:	ff 24       	eor	r15, r15
    1524:	ee 24       	eor	r14, r14
    1526:	99 24       	eor	r9, r9
    1528:	ff e1       	ldi	r31, 0x1F	; 31
    152a:	ff 15       	cp	r31, r15
    152c:	d0 f0       	brcs	.+52     	; 0x1562 <vfprintf+0xcc>
    152e:	9b 32       	cpi	r25, 0x2B	; 43
    1530:	69 f0       	breq	.+26     	; 0x154c <vfprintf+0xb6>
    1532:	9c 32       	cpi	r25, 0x2C	; 44
    1534:	28 f4       	brcc	.+10     	; 0x1540 <vfprintf+0xaa>
    1536:	90 32       	cpi	r25, 0x20	; 32
    1538:	59 f0       	breq	.+22     	; 0x1550 <vfprintf+0xba>
    153a:	93 32       	cpi	r25, 0x23	; 35
    153c:	91 f4       	brne	.+36     	; 0x1562 <vfprintf+0xcc>
    153e:	0e c0       	rjmp	.+28     	; 0x155c <vfprintf+0xc6>
    1540:	9d 32       	cpi	r25, 0x2D	; 45
    1542:	49 f0       	breq	.+18     	; 0x1556 <vfprintf+0xc0>
    1544:	90 33       	cpi	r25, 0x30	; 48
    1546:	69 f4       	brne	.+26     	; 0x1562 <vfprintf+0xcc>
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	24 c0       	rjmp	.+72     	; 0x1594 <vfprintf+0xfe>
    154c:	52 e0       	ldi	r21, 0x02	; 2
    154e:	f5 2a       	or	r15, r21
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	f8 2a       	or	r15, r24
    1554:	28 c0       	rjmp	.+80     	; 0x15a6 <vfprintf+0x110>
    1556:	98 e0       	ldi	r25, 0x08	; 8
    1558:	f9 2a       	or	r15, r25
    155a:	25 c0       	rjmp	.+74     	; 0x15a6 <vfprintf+0x110>
    155c:	e0 e1       	ldi	r30, 0x10	; 16
    155e:	fe 2a       	or	r15, r30
    1560:	22 c0       	rjmp	.+68     	; 0x15a6 <vfprintf+0x110>
    1562:	f7 fc       	sbrc	r15, 7
    1564:	29 c0       	rjmp	.+82     	; 0x15b8 <vfprintf+0x122>
    1566:	89 2f       	mov	r24, r25
    1568:	80 53       	subi	r24, 0x30	; 48
    156a:	8a 30       	cpi	r24, 0x0A	; 10
    156c:	70 f4       	brcc	.+28     	; 0x158a <vfprintf+0xf4>
    156e:	f6 fe       	sbrs	r15, 6
    1570:	05 c0       	rjmp	.+10     	; 0x157c <vfprintf+0xe6>
    1572:	98 9c       	mul	r9, r8
    1574:	90 2c       	mov	r9, r0
    1576:	11 24       	eor	r1, r1
    1578:	98 0e       	add	r9, r24
    157a:	15 c0       	rjmp	.+42     	; 0x15a6 <vfprintf+0x110>
    157c:	e8 9c       	mul	r14, r8
    157e:	e0 2c       	mov	r14, r0
    1580:	11 24       	eor	r1, r1
    1582:	e8 0e       	add	r14, r24
    1584:	f0 e2       	ldi	r31, 0x20	; 32
    1586:	ff 2a       	or	r15, r31
    1588:	0e c0       	rjmp	.+28     	; 0x15a6 <vfprintf+0x110>
    158a:	9e 32       	cpi	r25, 0x2E	; 46
    158c:	29 f4       	brne	.+10     	; 0x1598 <vfprintf+0x102>
    158e:	f6 fc       	sbrc	r15, 6
    1590:	6b c1       	rjmp	.+726    	; 0x1868 <vfprintf+0x3d2>
    1592:	40 e4       	ldi	r20, 0x40	; 64
    1594:	f4 2a       	or	r15, r20
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <vfprintf+0x110>
    1598:	9c 36       	cpi	r25, 0x6C	; 108
    159a:	19 f4       	brne	.+6      	; 0x15a2 <vfprintf+0x10c>
    159c:	50 e8       	ldi	r21, 0x80	; 128
    159e:	f5 2a       	or	r15, r21
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <vfprintf+0x110>
    15a2:	98 36       	cpi	r25, 0x68	; 104
    15a4:	49 f4       	brne	.+18     	; 0x15b8 <vfprintf+0x122>
    15a6:	f2 01       	movw	r30, r4
    15a8:	23 fd       	sbrc	r18, 3
    15aa:	95 91       	lpm	r25, Z+
    15ac:	23 ff       	sbrs	r18, 3
    15ae:	91 91       	ld	r25, Z+
    15b0:	2f 01       	movw	r4, r30
    15b2:	99 23       	and	r25, r25
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <vfprintf+0x122>
    15b6:	b8 cf       	rjmp	.-144    	; 0x1528 <vfprintf+0x92>
    15b8:	89 2f       	mov	r24, r25
    15ba:	85 54       	subi	r24, 0x45	; 69
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <vfprintf+0x130>
    15c0:	80 52       	subi	r24, 0x20	; 32
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	38 f4       	brcc	.+14     	; 0x15d4 <vfprintf+0x13e>
    15c6:	44 e0       	ldi	r20, 0x04	; 4
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	a4 0e       	add	r10, r20
    15cc:	b5 1e       	adc	r11, r21
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	59 83       	std	Y+1, r21	; 0x01
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <vfprintf+0x15c>
    15d4:	93 36       	cpi	r25, 0x63	; 99
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <vfprintf+0x14e>
    15d8:	93 37       	cpi	r25, 0x73	; 115
    15da:	79 f0       	breq	.+30     	; 0x15fa <vfprintf+0x164>
    15dc:	93 35       	cpi	r25, 0x53	; 83
    15de:	09 f0       	breq	.+2      	; 0x15e2 <vfprintf+0x14c>
    15e0:	56 c0       	rjmp	.+172    	; 0x168e <vfprintf+0x1f8>
    15e2:	20 c0       	rjmp	.+64     	; 0x1624 <vfprintf+0x18e>
    15e4:	f5 01       	movw	r30, r10
    15e6:	80 81       	ld	r24, Z
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	42 e0       	ldi	r20, 0x02	; 2
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	a4 0e       	add	r10, r20
    15f0:	b5 1e       	adc	r11, r21
    15f2:	61 01       	movw	r12, r2
    15f4:	01 e0       	ldi	r16, 0x01	; 1
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	12 c0       	rjmp	.+36     	; 0x161e <vfprintf+0x188>
    15fa:	f5 01       	movw	r30, r10
    15fc:	c0 80       	ld	r12, Z
    15fe:	d1 80       	ldd	r13, Z+1	; 0x01
    1600:	f6 fc       	sbrc	r15, 6
    1602:	03 c0       	rjmp	.+6      	; 0x160a <vfprintf+0x174>
    1604:	6f ef       	ldi	r22, 0xFF	; 255
    1606:	7f ef       	ldi	r23, 0xFF	; 255
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x178>
    160a:	69 2d       	mov	r22, r9
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	42 e0       	ldi	r20, 0x02	; 2
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	a4 0e       	add	r10, r20
    1614:	b5 1e       	adc	r11, r21
    1616:	c6 01       	movw	r24, r12
    1618:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strnlen>
    161c:	8c 01       	movw	r16, r24
    161e:	5f e7       	ldi	r21, 0x7F	; 127
    1620:	f5 22       	and	r15, r21
    1622:	14 c0       	rjmp	.+40     	; 0x164c <vfprintf+0x1b6>
    1624:	f5 01       	movw	r30, r10
    1626:	c0 80       	ld	r12, Z
    1628:	d1 80       	ldd	r13, Z+1	; 0x01
    162a:	f6 fc       	sbrc	r15, 6
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <vfprintf+0x19e>
    162e:	6f ef       	ldi	r22, 0xFF	; 255
    1630:	7f ef       	ldi	r23, 0xFF	; 255
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x1a2>
    1634:	69 2d       	mov	r22, r9
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	42 e0       	ldi	r20, 0x02	; 2
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	a4 0e       	add	r10, r20
    163e:	b5 1e       	adc	r11, r21
    1640:	c6 01       	movw	r24, r12
    1642:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <strnlen_P>
    1646:	8c 01       	movw	r16, r24
    1648:	50 e8       	ldi	r21, 0x80	; 128
    164a:	f5 2a       	or	r15, r21
    164c:	f3 fe       	sbrs	r15, 3
    164e:	07 c0       	rjmp	.+14     	; 0x165e <vfprintf+0x1c8>
    1650:	1a c0       	rjmp	.+52     	; 0x1686 <vfprintf+0x1f0>
    1652:	80 e2       	ldi	r24, 0x20	; 32
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	b3 01       	movw	r22, r6
    1658:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    165c:	ea 94       	dec	r14
    165e:	8e 2d       	mov	r24, r14
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	08 17       	cp	r16, r24
    1664:	19 07       	cpc	r17, r25
    1666:	a8 f3       	brcs	.-22     	; 0x1652 <vfprintf+0x1bc>
    1668:	0e c0       	rjmp	.+28     	; 0x1686 <vfprintf+0x1f0>
    166a:	f6 01       	movw	r30, r12
    166c:	f7 fc       	sbrc	r15, 7
    166e:	85 91       	lpm	r24, Z+
    1670:	f7 fe       	sbrs	r15, 7
    1672:	81 91       	ld	r24, Z+
    1674:	6f 01       	movw	r12, r30
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	b3 01       	movw	r22, r6
    167a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    167e:	e1 10       	cpse	r14, r1
    1680:	ea 94       	dec	r14
    1682:	01 50       	subi	r16, 0x01	; 1
    1684:	10 40       	sbci	r17, 0x00	; 0
    1686:	01 15       	cp	r16, r1
    1688:	11 05       	cpc	r17, r1
    168a:	79 f7       	brne	.-34     	; 0x166a <vfprintf+0x1d4>
    168c:	ea c0       	rjmp	.+468    	; 0x1862 <vfprintf+0x3cc>
    168e:	94 36       	cpi	r25, 0x64	; 100
    1690:	11 f0       	breq	.+4      	; 0x1696 <vfprintf+0x200>
    1692:	99 36       	cpi	r25, 0x69	; 105
    1694:	69 f5       	brne	.+90     	; 0x16f0 <vfprintf+0x25a>
    1696:	f7 fe       	sbrs	r15, 7
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <vfprintf+0x214>
    169a:	f5 01       	movw	r30, r10
    169c:	20 81       	ld	r18, Z
    169e:	31 81       	ldd	r19, Z+1	; 0x01
    16a0:	42 81       	ldd	r20, Z+2	; 0x02
    16a2:	53 81       	ldd	r21, Z+3	; 0x03
    16a4:	84 e0       	ldi	r24, 0x04	; 4
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0a c0       	rjmp	.+20     	; 0x16be <vfprintf+0x228>
    16aa:	f5 01       	movw	r30, r10
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	9c 01       	movw	r18, r24
    16b2:	44 27       	eor	r20, r20
    16b4:	37 fd       	sbrc	r19, 7
    16b6:	40 95       	com	r20
    16b8:	54 2f       	mov	r21, r20
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a8 0e       	add	r10, r24
    16c0:	b9 1e       	adc	r11, r25
    16c2:	9f e6       	ldi	r25, 0x6F	; 111
    16c4:	f9 22       	and	r15, r25
    16c6:	57 ff       	sbrs	r21, 7
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x246>
    16ca:	50 95       	com	r21
    16cc:	40 95       	com	r20
    16ce:	30 95       	com	r19
    16d0:	21 95       	neg	r18
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	e0 e8       	ldi	r30, 0x80	; 128
    16da:	fe 2a       	or	r15, r30
    16dc:	ca 01       	movw	r24, r20
    16de:	b9 01       	movw	r22, r18
    16e0:	a1 01       	movw	r20, r2
    16e2:	2a e0       	ldi	r18, 0x0A	; 10
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	0e 94 93 0c 	call	0x1926	; 0x1926 <__ultoa_invert>
    16ea:	d8 2e       	mov	r13, r24
    16ec:	d2 18       	sub	r13, r2
    16ee:	40 c0       	rjmp	.+128    	; 0x1770 <vfprintf+0x2da>
    16f0:	95 37       	cpi	r25, 0x75	; 117
    16f2:	29 f4       	brne	.+10     	; 0x16fe <vfprintf+0x268>
    16f4:	1f 2d       	mov	r17, r15
    16f6:	1f 7e       	andi	r17, 0xEF	; 239
    16f8:	2a e0       	ldi	r18, 0x0A	; 10
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	1d c0       	rjmp	.+58     	; 0x1738 <vfprintf+0x2a2>
    16fe:	1f 2d       	mov	r17, r15
    1700:	19 7f       	andi	r17, 0xF9	; 249
    1702:	9f 36       	cpi	r25, 0x6F	; 111
    1704:	61 f0       	breq	.+24     	; 0x171e <vfprintf+0x288>
    1706:	90 37       	cpi	r25, 0x70	; 112
    1708:	20 f4       	brcc	.+8      	; 0x1712 <vfprintf+0x27c>
    170a:	98 35       	cpi	r25, 0x58	; 88
    170c:	09 f0       	breq	.+2      	; 0x1710 <vfprintf+0x27a>
    170e:	ac c0       	rjmp	.+344    	; 0x1868 <vfprintf+0x3d2>
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <vfprintf+0x29a>
    1712:	90 37       	cpi	r25, 0x70	; 112
    1714:	39 f0       	breq	.+14     	; 0x1724 <vfprintf+0x28e>
    1716:	98 37       	cpi	r25, 0x78	; 120
    1718:	09 f0       	breq	.+2      	; 0x171c <vfprintf+0x286>
    171a:	a6 c0       	rjmp	.+332    	; 0x1868 <vfprintf+0x3d2>
    171c:	04 c0       	rjmp	.+8      	; 0x1726 <vfprintf+0x290>
    171e:	28 e0       	ldi	r18, 0x08	; 8
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	0a c0       	rjmp	.+20     	; 0x1738 <vfprintf+0x2a2>
    1724:	10 61       	ori	r17, 0x10	; 16
    1726:	14 fd       	sbrc	r17, 4
    1728:	14 60       	ori	r17, 0x04	; 4
    172a:	20 e1       	ldi	r18, 0x10	; 16
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <vfprintf+0x2a2>
    1730:	14 fd       	sbrc	r17, 4
    1732:	16 60       	ori	r17, 0x06	; 6
    1734:	20 e1       	ldi	r18, 0x10	; 16
    1736:	32 e0       	ldi	r19, 0x02	; 2
    1738:	17 ff       	sbrs	r17, 7
    173a:	08 c0       	rjmp	.+16     	; 0x174c <vfprintf+0x2b6>
    173c:	f5 01       	movw	r30, r10
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	44 e0       	ldi	r20, 0x04	; 4
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	08 c0       	rjmp	.+16     	; 0x175c <vfprintf+0x2c6>
    174c:	f5 01       	movw	r30, r10
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	bc 01       	movw	r22, r24
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	42 e0       	ldi	r20, 0x02	; 2
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	a4 0e       	add	r10, r20
    175e:	b5 1e       	adc	r11, r21
    1760:	a1 01       	movw	r20, r2
    1762:	0e 94 93 0c 	call	0x1926	; 0x1926 <__ultoa_invert>
    1766:	d8 2e       	mov	r13, r24
    1768:	d2 18       	sub	r13, r2
    176a:	8f e7       	ldi	r24, 0x7F	; 127
    176c:	f8 2e       	mov	r15, r24
    176e:	f1 22       	and	r15, r17
    1770:	f6 fe       	sbrs	r15, 6
    1772:	0b c0       	rjmp	.+22     	; 0x178a <vfprintf+0x2f4>
    1774:	5e ef       	ldi	r21, 0xFE	; 254
    1776:	f5 22       	and	r15, r21
    1778:	d9 14       	cp	r13, r9
    177a:	38 f4       	brcc	.+14     	; 0x178a <vfprintf+0x2f4>
    177c:	f4 fe       	sbrs	r15, 4
    177e:	07 c0       	rjmp	.+14     	; 0x178e <vfprintf+0x2f8>
    1780:	f2 fc       	sbrc	r15, 2
    1782:	05 c0       	rjmp	.+10     	; 0x178e <vfprintf+0x2f8>
    1784:	8f ee       	ldi	r24, 0xEF	; 239
    1786:	f8 22       	and	r15, r24
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x2f8>
    178a:	1d 2d       	mov	r17, r13
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfprintf+0x2fa>
    178e:	19 2d       	mov	r17, r9
    1790:	f4 fe       	sbrs	r15, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <vfprintf+0x318>
    1794:	fe 01       	movw	r30, r28
    1796:	ed 0d       	add	r30, r13
    1798:	f1 1d       	adc	r31, r1
    179a:	80 81       	ld	r24, Z
    179c:	80 33       	cpi	r24, 0x30	; 48
    179e:	19 f4       	brne	.+6      	; 0x17a6 <vfprintf+0x310>
    17a0:	99 ee       	ldi	r25, 0xE9	; 233
    17a2:	f9 22       	and	r15, r25
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <vfprintf+0x320>
    17a6:	1f 5f       	subi	r17, 0xFF	; 255
    17a8:	f2 fe       	sbrs	r15, 2
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <vfprintf+0x320>
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <vfprintf+0x31e>
    17ae:	8f 2d       	mov	r24, r15
    17b0:	86 78       	andi	r24, 0x86	; 134
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <vfprintf+0x320>
    17b4:	1f 5f       	subi	r17, 0xFF	; 255
    17b6:	0f 2d       	mov	r16, r15
    17b8:	f3 fc       	sbrc	r15, 3
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <vfprintf+0x34e>
    17bc:	f0 fe       	sbrs	r15, 0
    17be:	0f c0       	rjmp	.+30     	; 0x17de <vfprintf+0x348>
    17c0:	1e 15       	cp	r17, r14
    17c2:	10 f0       	brcs	.+4      	; 0x17c8 <vfprintf+0x332>
    17c4:	9d 2c       	mov	r9, r13
    17c6:	0b c0       	rjmp	.+22     	; 0x17de <vfprintf+0x348>
    17c8:	9d 2c       	mov	r9, r13
    17ca:	9e 0c       	add	r9, r14
    17cc:	91 1a       	sub	r9, r17
    17ce:	1e 2d       	mov	r17, r14
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x348>
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b3 01       	movw	r22, r6
    17d8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    17dc:	1f 5f       	subi	r17, 0xFF	; 255
    17de:	1e 15       	cp	r17, r14
    17e0:	c0 f3       	brcs	.-16     	; 0x17d2 <vfprintf+0x33c>
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <vfprintf+0x356>
    17e4:	1e 15       	cp	r17, r14
    17e6:	10 f4       	brcc	.+4      	; 0x17ec <vfprintf+0x356>
    17e8:	e1 1a       	sub	r14, r17
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <vfprintf+0x358>
    17ec:	ee 24       	eor	r14, r14
    17ee:	04 ff       	sbrs	r16, 4
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <vfprintf+0x37a>
    17f2:	80 e3       	ldi	r24, 0x30	; 48
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b3 01       	movw	r22, r6
    17f8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    17fc:	02 ff       	sbrs	r16, 2
    17fe:	1d c0       	rjmp	.+58     	; 0x183a <vfprintf+0x3a4>
    1800:	01 fd       	sbrc	r16, 1
    1802:	03 c0       	rjmp	.+6      	; 0x180a <vfprintf+0x374>
    1804:	88 e7       	ldi	r24, 0x78	; 120
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <vfprintf+0x390>
    180a:	88 e5       	ldi	r24, 0x58	; 88
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0b c0       	rjmp	.+22     	; 0x1826 <vfprintf+0x390>
    1810:	80 2f       	mov	r24, r16
    1812:	86 78       	andi	r24, 0x86	; 134
    1814:	91 f0       	breq	.+36     	; 0x183a <vfprintf+0x3a4>
    1816:	01 ff       	sbrs	r16, 1
    1818:	02 c0       	rjmp	.+4      	; 0x181e <vfprintf+0x388>
    181a:	8b e2       	ldi	r24, 0x2B	; 43
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <vfprintf+0x38a>
    181e:	80 e2       	ldi	r24, 0x20	; 32
    1820:	f7 fc       	sbrc	r15, 7
    1822:	8d e2       	ldi	r24, 0x2D	; 45
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	b3 01       	movw	r22, r6
    1828:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x3a4>
    182e:	80 e3       	ldi	r24, 0x30	; 48
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	b3 01       	movw	r22, r6
    1834:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    1838:	9a 94       	dec	r9
    183a:	d9 14       	cp	r13, r9
    183c:	c0 f3       	brcs	.-16     	; 0x182e <vfprintf+0x398>
    183e:	da 94       	dec	r13
    1840:	f1 01       	movw	r30, r2
    1842:	ed 0d       	add	r30, r13
    1844:	f1 1d       	adc	r31, r1
    1846:	80 81       	ld	r24, Z
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	b3 01       	movw	r22, r6
    184c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    1850:	dd 20       	and	r13, r13
    1852:	a9 f7       	brne	.-22     	; 0x183e <vfprintf+0x3a8>
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x3cc>
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	b3 01       	movw	r22, r6
    185c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    1860:	ea 94       	dec	r14
    1862:	ee 20       	and	r14, r14
    1864:	c1 f7       	brne	.-16     	; 0x1856 <vfprintf+0x3c0>
    1866:	43 ce       	rjmp	.-890    	; 0x14ee <vfprintf+0x58>
    1868:	f3 01       	movw	r30, r6
    186a:	66 81       	ldd	r22, Z+6	; 0x06
    186c:	77 81       	ldd	r23, Z+7	; 0x07
    186e:	cb 01       	movw	r24, r22
    1870:	2b 96       	adiw	r28, 0x0b	; 11
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
    188c:	bf 90       	pop	r11
    188e:	af 90       	pop	r10
    1890:	9f 90       	pop	r9
    1892:	8f 90       	pop	r8
    1894:	7f 90       	pop	r7
    1896:	6f 90       	pop	r6
    1898:	5f 90       	pop	r5
    189a:	4f 90       	pop	r4
    189c:	3f 90       	pop	r3
    189e:	2f 90       	pop	r2
    18a0:	08 95       	ret

000018a2 <strnlen_P>:
    18a2:	fc 01       	movw	r30, r24
    18a4:	05 90       	lpm	r0, Z+
    18a6:	61 50       	subi	r22, 0x01	; 1
    18a8:	70 40       	sbci	r23, 0x00	; 0
    18aa:	01 10       	cpse	r0, r1
    18ac:	d8 f7       	brcc	.-10     	; 0x18a4 <strnlen_P+0x2>
    18ae:	80 95       	com	r24
    18b0:	90 95       	com	r25
    18b2:	8e 0f       	add	r24, r30
    18b4:	9f 1f       	adc	r25, r31
    18b6:	08 95       	ret

000018b8 <strnlen>:
    18b8:	fc 01       	movw	r30, r24
    18ba:	61 50       	subi	r22, 0x01	; 1
    18bc:	70 40       	sbci	r23, 0x00	; 0
    18be:	01 90       	ld	r0, Z+
    18c0:	01 10       	cpse	r0, r1
    18c2:	d8 f7       	brcc	.-10     	; 0x18ba <strnlen+0x2>
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	8e 0f       	add	r24, r30
    18ca:	9f 1f       	adc	r25, r31
    18cc:	08 95       	ret

000018ce <fputc>:
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	8c 01       	movw	r16, r24
    18d8:	eb 01       	movw	r28, r22
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	81 ff       	sbrs	r24, 1
    18de:	1b c0       	rjmp	.+54     	; 0x1916 <fputc+0x48>
    18e0:	82 ff       	sbrs	r24, 2
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <fputc+0x30>
    18e4:	2e 81       	ldd	r18, Y+6	; 0x06
    18e6:	3f 81       	ldd	r19, Y+7	; 0x07
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	28 17       	cp	r18, r24
    18ee:	39 07       	cpc	r19, r25
    18f0:	64 f4       	brge	.+24     	; 0x190a <fputc+0x3c>
    18f2:	e8 81       	ld	r30, Y
    18f4:	f9 81       	ldd	r31, Y+1	; 0x01
    18f6:	01 93       	st	Z+, r16
    18f8:	f9 83       	std	Y+1, r31	; 0x01
    18fa:	e8 83       	st	Y, r30
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <fputc+0x3c>
    18fe:	e8 85       	ldd	r30, Y+8	; 0x08
    1900:	f9 85       	ldd	r31, Y+9	; 0x09
    1902:	80 2f       	mov	r24, r16
    1904:	09 95       	icall
    1906:	89 2b       	or	r24, r25
    1908:	31 f4       	brne	.+12     	; 0x1916 <fputc+0x48>
    190a:	8e 81       	ldd	r24, Y+6	; 0x06
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	9f 83       	std	Y+7, r25	; 0x07
    1912:	8e 83       	std	Y+6, r24	; 0x06
    1914:	02 c0       	rjmp	.+4      	; 0x191a <fputc+0x4c>
    1916:	0f ef       	ldi	r16, 0xFF	; 255
    1918:	1f ef       	ldi	r17, 0xFF	; 255
    191a:	c8 01       	movw	r24, r16
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <__ultoa_invert>:
    1926:	fa 01       	movw	r30, r20
    1928:	aa 27       	eor	r26, r26
    192a:	28 30       	cpi	r18, 0x08	; 8
    192c:	51 f1       	breq	.+84     	; 0x1982 <__ultoa_invert+0x5c>
    192e:	20 31       	cpi	r18, 0x10	; 16
    1930:	81 f1       	breq	.+96     	; 0x1992 <__ultoa_invert+0x6c>
    1932:	e8 94       	clt
    1934:	6f 93       	push	r22
    1936:	6e 7f       	andi	r22, 0xFE	; 254
    1938:	6e 5f       	subi	r22, 0xFE	; 254
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	8f 4f       	sbci	r24, 0xFF	; 255
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
    1940:	af 4f       	sbci	r26, 0xFF	; 255
    1942:	b1 e0       	ldi	r27, 0x01	; 1
    1944:	3e d0       	rcall	.+124    	; 0x19c2 <__ultoa_invert+0x9c>
    1946:	b4 e0       	ldi	r27, 0x04	; 4
    1948:	3c d0       	rcall	.+120    	; 0x19c2 <__ultoa_invert+0x9c>
    194a:	67 0f       	add	r22, r23
    194c:	78 1f       	adc	r23, r24
    194e:	89 1f       	adc	r24, r25
    1950:	9a 1f       	adc	r25, r26
    1952:	a1 1d       	adc	r26, r1
    1954:	68 0f       	add	r22, r24
    1956:	79 1f       	adc	r23, r25
    1958:	8a 1f       	adc	r24, r26
    195a:	91 1d       	adc	r25, r1
    195c:	a1 1d       	adc	r26, r1
    195e:	6a 0f       	add	r22, r26
    1960:	71 1d       	adc	r23, r1
    1962:	81 1d       	adc	r24, r1
    1964:	91 1d       	adc	r25, r1
    1966:	a1 1d       	adc	r26, r1
    1968:	20 d0       	rcall	.+64     	; 0x19aa <__ultoa_invert+0x84>
    196a:	09 f4       	brne	.+2      	; 0x196e <__ultoa_invert+0x48>
    196c:	68 94       	set
    196e:	3f 91       	pop	r19
    1970:	2a e0       	ldi	r18, 0x0A	; 10
    1972:	26 9f       	mul	r18, r22
    1974:	11 24       	eor	r1, r1
    1976:	30 19       	sub	r19, r0
    1978:	30 5d       	subi	r19, 0xD0	; 208
    197a:	31 93       	st	Z+, r19
    197c:	de f6       	brtc	.-74     	; 0x1934 <__ultoa_invert+0xe>
    197e:	cf 01       	movw	r24, r30
    1980:	08 95       	ret
    1982:	46 2f       	mov	r20, r22
    1984:	47 70       	andi	r20, 0x07	; 7
    1986:	40 5d       	subi	r20, 0xD0	; 208
    1988:	41 93       	st	Z+, r20
    198a:	b3 e0       	ldi	r27, 0x03	; 3
    198c:	0f d0       	rcall	.+30     	; 0x19ac <__ultoa_invert+0x86>
    198e:	c9 f7       	brne	.-14     	; 0x1982 <__ultoa_invert+0x5c>
    1990:	f6 cf       	rjmp	.-20     	; 0x197e <__ultoa_invert+0x58>
    1992:	46 2f       	mov	r20, r22
    1994:	4f 70       	andi	r20, 0x0F	; 15
    1996:	40 5d       	subi	r20, 0xD0	; 208
    1998:	4a 33       	cpi	r20, 0x3A	; 58
    199a:	18 f0       	brcs	.+6      	; 0x19a2 <__ultoa_invert+0x7c>
    199c:	49 5d       	subi	r20, 0xD9	; 217
    199e:	31 fd       	sbrc	r19, 1
    19a0:	40 52       	subi	r20, 0x20	; 32
    19a2:	41 93       	st	Z+, r20
    19a4:	02 d0       	rcall	.+4      	; 0x19aa <__ultoa_invert+0x84>
    19a6:	a9 f7       	brne	.-22     	; 0x1992 <__ultoa_invert+0x6c>
    19a8:	ea cf       	rjmp	.-44     	; 0x197e <__ultoa_invert+0x58>
    19aa:	b4 e0       	ldi	r27, 0x04	; 4
    19ac:	a6 95       	lsr	r26
    19ae:	97 95       	ror	r25
    19b0:	87 95       	ror	r24
    19b2:	77 95       	ror	r23
    19b4:	67 95       	ror	r22
    19b6:	ba 95       	dec	r27
    19b8:	c9 f7       	brne	.-14     	; 0x19ac <__ultoa_invert+0x86>
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	61 05       	cpc	r22, r1
    19be:	71 05       	cpc	r23, r1
    19c0:	08 95       	ret
    19c2:	9b 01       	movw	r18, r22
    19c4:	ac 01       	movw	r20, r24
    19c6:	0a 2e       	mov	r0, r26
    19c8:	06 94       	lsr	r0
    19ca:	57 95       	ror	r21
    19cc:	47 95       	ror	r20
    19ce:	37 95       	ror	r19
    19d0:	27 95       	ror	r18
    19d2:	ba 95       	dec	r27
    19d4:	c9 f7       	brne	.-14     	; 0x19c8 <__ultoa_invert+0xa2>
    19d6:	62 0f       	add	r22, r18
    19d8:	73 1f       	adc	r23, r19
    19da:	84 1f       	adc	r24, r20
    19dc:	95 1f       	adc	r25, r21
    19de:	a0 1d       	adc	r26, r0
    19e0:	08 95       	ret

000019e2 <_exit>:
    19e2:	f8 94       	cli

000019e4 <__stop_program>:
    19e4:	ff cf       	rjmp	.-2      	; 0x19e4 <__stop_program>
