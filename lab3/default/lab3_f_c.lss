
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001a84  00001b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b0  00800124  00800124  00001b3c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001b40  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d0  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001265  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045b  00000000  00000000  000031d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e4a  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  0000447c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049f  00000000  00000000  000046ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a41  00000000  00000000  00004b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	e4 e8       	ldi	r30, 0x84	; 132
     4ec:	fa e1       	ldi	r31, 0x1A	; 26
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	a4 32       	cpi	r26, 0x24	; 36
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	15 e0       	ldi	r17, 0x05	; 5
     500:	a4 e2       	ldi	r26, 0x24	; 36
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a4 3d       	cpi	r26, 0xD4	; 212
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 b4 05 	call	0xb68	; 0xb68 <main>
     512:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
volatile char is_on_screen[Max_num_balls];

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 b4 05 	lds	r24, 0x05B4
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 76 05 	lds	r24, 0x0576
     544:	90 91 77 05 	lds	r25, 0x0577
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 77 05 	sts	0x0577, r25
     54e:	80 93 76 05 	sts	0x0576, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 76 05 	lds	r24, 0x0576
     556:	90 91 77 05 	lds	r25, 0x0577
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 b4 05 	sts	0x05B4, r24
    	syncOFF = 0;
     566:	10 92 d3 05 	sts	0x05D3, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 76 05 	lds	r24, 0x0576
     56e:	90 91 77 05 	lds	r25, 0x0577
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 b4 05 	sts	0x05B4, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 d3 05 	sts	0x05D3, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 76 05 	lds	r24, 0x0576
     586:	90 91 77 05 	lds	r25, 0x0577
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 77 05 	sts	0x0577, r25
     598:	80 93 76 05 	sts	0x0576, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 d3 05 	lds	r24, 0x05D3
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 76 05 	lds	r24, 0x0576
     5ac:	90 91 77 05 	lds	r25, 0x0577
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 76 05 	lds	r24, 0x0576
     5ba:	90 91 77 05 	lds	r25, 0x0577
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 76 05 	lds	r24, 0x0576
     5c6:	90 91 77 05 	lds	r25, 0x0577
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(8);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	eb 5c       	subi	r30, 0xCB	; 203
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	e9 5c       	subi	r30, 0xC9	; 201
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     6a2:	80 5a       	subi	r24, 0xA0	; 160
     6a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	80 83       	st	Z, r24
end
     6b0:	08 95       	ret

000006b2 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     6b6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     6ba:	10 92 7a 00 	sts	0x007A, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     6c4:	87 e8       	ldi	r24, 0x87	; 135
     6c6:	80 93 7a 00 	sts	0x007A, r24
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     6ca:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     6cc:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     6d8:	80 ec       	ldi	r24, 0xC0	; 192
     6da:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	10 93 c5 00 	sts	0x00C5, r17
     6e6:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	//LCD_init();
	port_init();
	USART_init();
	timer1_init();
     6ea:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     6ee:	10 93 77 05 	sts	0x0577, r17
     6f2:	00 93 76 05 	sts	0x0576, r16

	syncON = 0b00000000;
     6f6:	10 92 b4 05 	sts	0x05B4, r1
	syncOFF = 0b00000001;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 d3 05 	sts	0x05D3, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++) is_on_screen[n] = 0;
     704:	fc 01       	movw	r30, r24
     706:	ea 5d       	subi	r30, 0xDA	; 218
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	10 82       	st	Z, r1
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	8f 30       	cpi	r24, 0x0F	; 15
     710:	91 05       	cpc	r25, r1
     712:	c1 f7       	brne	.-16     	; 0x704 <initialize+0x52>
     714:	e5 e3       	ldi	r30, 0x35	; 53
     716:	f1 e0       	ldi	r31, 0x01	; 1
	for(int y=0; y<screen_array_size;y++) screen[y] = 0;
     718:	11 92       	st	Z+, r1
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	e5 33       	cpi	r30, 0x35	; 53
     71e:	f8 07       	cpc	r31, r24
     720:	d9 f7       	brne	.-10     	; 0x718 <initialize+0x66>

	// Set up single video line timing
	sei();
     722:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     724:	83 b7       	in	r24, 0x33	; 51
     726:	81 7f       	andi	r24, 0xF1	; 241
     728:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     72a:	83 b7       	in	r24, 0x33	; 51
     72c:	81 60       	ori	r24, 0x01	; 1
     72e:	83 bf       	out	0x33, r24	; 51

end
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     736:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	34 e0       	ldi	r19, 0x04	; 4
     73c:	66 0f       	add	r22, r22
     73e:	77 1f       	adc	r23, r23
     740:	3a 95       	dec	r19
     742:	e1 f7       	brne	.-8      	; 0x73c <video_pt+0x6>
     744:	86 95       	lsr	r24
     746:	86 95       	lsr	r24
     748:	86 95       	lsr	r24
     74a:	68 0f       	add	r22, r24
     74c:	71 1d       	adc	r23, r1

	if (c==1)
     74e:	41 30       	cpi	r20, 0x01	; 1
     750:	69 f4       	brne	.+26     	; 0x76c <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     752:	db 01       	movw	r26, r22
     754:	ab 5c       	subi	r26, 0xCB	; 203
     756:	be 4f       	sbci	r27, 0xFE	; 254
     758:	e9 2f       	mov	r30, r25
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e7 70       	andi	r30, 0x07	; 7
     75e:	f0 70       	andi	r31, 0x00	; 0
     760:	e4 5e       	subi	r30, 0xE4	; 228
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	8c 91       	ld	r24, X
     766:	90 81       	ld	r25, Z
     768:	89 2b       	or	r24, r25
     76a:	17 c0       	rjmp	.+46     	; 0x79a <video_pt+0x64>
     76c:	db 01       	movw	r26, r22
     76e:	ab 5c       	subi	r26, 0xCB	; 203
     770:	be 4f       	sbci	r27, 0xFE	; 254
     772:	e9 2f       	mov	r30, r25
     774:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     776:	44 23       	and	r20, r20
     778:	49 f4       	brne	.+18     	; 0x78c <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     77a:	e7 70       	andi	r30, 0x07	; 7
     77c:	f0 70       	andi	r31, 0x00	; 0
     77e:	e4 5e       	subi	r30, 0xE4	; 228
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	90 81       	ld	r25, Z
     784:	90 95       	com	r25
     786:	8c 91       	ld	r24, X
     788:	89 23       	and	r24, r25
     78a:	07 c0       	rjmp	.+14     	; 0x79a <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     78c:	e7 70       	andi	r30, 0x07	; 7
     78e:	f0 70       	andi	r31, 0x00	; 0
     790:	e4 5e       	subi	r30, 0xE4	; 228
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	8c 91       	ld	r24, X
     796:	90 81       	ld	r25, Z
     798:	89 27       	eor	r24, r25
     79a:	8c 93       	st	X, r24
     79c:	08 95       	ret

0000079e <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     79e:	2f 92       	push	r2
     7a0:	3f 92       	push	r3
     7a2:	4f 92       	push	r4
     7a4:	5f 92       	push	r5
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <video_line+0x26>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <video_line+0x28>
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     7cc:	c8 2e       	mov	r12, r24
     7ce:	dd 24       	eor	r13, r13
	y = y1;
     7d0:	e6 2e       	mov	r14, r22
     7d2:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     7d4:	48 17       	cp	r20, r24
     7d6:	38 f4       	brcc	.+14     	; 0x7e6 <video_line+0x48>
		dx = x1 - x2;
     7d8:	c6 01       	movw	r24, r12
     7da:	84 1b       	sub	r24, r20
     7dc:	91 09       	sbc	r25, r1
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	7f ef       	ldi	r23, 0xFF	; 255
     7e4:	0d c0       	rjmp	.+26     	; 0x800 <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     7e6:	48 17       	cp	r20, r24
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <video_line+0x54>
     7ea:	1c 82       	std	Y+4, r1	; 0x04
     7ec:	1b 82       	std	Y+3, r1	; 0x03
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	07 c0       	rjmp	.+14     	; 0x800 <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     7f2:	e4 2f       	mov	r30, r20
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	ec 19       	sub	r30, r12
     7f8:	fd 09       	sbc	r31, r13
     7fa:	fc 83       	std	Y+4, r31	; 0x04
     7fc:	eb 83       	std	Y+3, r30	; 0x03
     7fe:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     800:	26 17       	cp	r18, r22
     802:	28 f4       	brcc	.+10     	; 0x80e <video_line+0x70>
		dy = y1 - y2;
     804:	a7 01       	movw	r20, r14
     806:	42 1b       	sub	r20, r18
     808:	51 09       	sbc	r21, r1
     80a:	6f ef       	ldi	r22, 0xFF	; 255
     80c:	0b c0       	rjmp	.+22     	; 0x824 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     80e:	26 17       	cp	r18, r22
     810:	21 f4       	brne	.+8      	; 0x81a <video_line+0x7c>
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     81a:	42 2f       	mov	r20, r18
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	4e 19       	sub	r20, r14
     820:	5f 09       	sbc	r21, r15
     822:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	84 17       	cp	r24, r20
     82a:	95 07       	cpc	r25, r21
     82c:	44 f4       	brge	.+16     	; 0x83e <video_line+0xa0>
     82e:	ca 01       	movw	r24, r20
     830:	4b 81       	ldd	r20, Y+3	; 0x03
     832:	5c 81       	ldd	r21, Y+4	; 0x04
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	99 83       	std	Y+1, r25	; 0x01
     83c:	01 c0       	rjmp	.+2      	; 0x840 <video_line+0xa2>
     83e:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     840:	2a 01       	movw	r4, r20
     842:	44 0c       	add	r4, r4
     844:	55 1c       	adc	r5, r5
     846:	82 01       	movw	r16, r4
     848:	eb 81       	ldd	r30, Y+3	; 0x03
     84a:	fc 81       	ldd	r31, Y+4	; 0x04
     84c:	0e 1b       	sub	r16, r30
     84e:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     850:	1f 01       	movw	r2, r30
     852:	22 0c       	add	r2, r2
     854:	33 1c       	adc	r3, r3
     856:	aa 24       	eor	r10, r10
     858:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     85a:	66 2e       	mov	r6, r22
     85c:	77 24       	eor	r7, r7
     85e:	67 fc       	sbrc	r6, 7
     860:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     862:	87 2e       	mov	r8, r23
     864:	99 24       	eor	r9, r9
     866:	87 fc       	sbrc	r8, 7
     868:	90 94       	com	r9
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     86c:	8c 2d       	mov	r24, r12
     86e:	6e 2d       	mov	r22, r14
     870:	4a 81       	ldd	r20, Y+2	; 0x02
     872:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
		 
		if (e>=0) {
     876:	17 fd       	sbrc	r17, 7
     878:	0a c0       	rjmp	.+20     	; 0x88e <video_line+0xf0>
			if (xchange==1) x = x + s1;
     87a:	f9 81       	ldd	r31, Y+1	; 0x01
     87c:	f1 30       	cpi	r31, 0x01	; 1
     87e:	19 f4       	brne	.+6      	; 0x886 <video_line+0xe8>
     880:	c8 0c       	add	r12, r8
     882:	d9 1c       	adc	r13, r9
     884:	02 c0       	rjmp	.+4      	; 0x88a <video_line+0xec>
			else y = y + s2;
     886:	e6 0c       	add	r14, r6
     888:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     88a:	02 19       	sub	r16, r2
     88c:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	19 f4       	brne	.+6      	; 0x89a <video_line+0xfc>
     894:	e6 0c       	add	r14, r6
     896:	f7 1c       	adc	r15, r7
     898:	02 c0       	rjmp	.+4      	; 0x89e <video_line+0x100>
		else x = x + s1;
     89a:	c8 0c       	add	r12, r8
     89c:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     89e:	04 0d       	add	r16, r4
     8a0:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     8a2:	08 94       	sec
     8a4:	a1 1c       	adc	r10, r1
     8a6:	b1 1c       	adc	r11, r1
     8a8:	eb 81       	ldd	r30, Y+3	; 0x03
     8aa:	fc 81       	ldd	r31, Y+4	; 0x04
     8ac:	ea 15       	cp	r30, r10
     8ae:	fb 05       	cpc	r31, r11
     8b0:	ec f6       	brge	.-70     	; 0x86c <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	bf 90       	pop	r11
     8cc:	af 90       	pop	r10
     8ce:	9f 90       	pop	r9
     8d0:	8f 90       	pop	r8
     8d2:	7f 90       	pop	r7
     8d4:	6f 90       	pop	r6
     8d6:	5f 90       	pop	r5
     8d8:	4f 90       	pop	r4
     8da:	3f 90       	pop	r3
     8dc:	2f 90       	pop	r2
     8de:	08 95       	ret

000008e0 <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	e8 2e       	mov	r14, r24
     8fa:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	48 9f       	mul	r20, r24
     900:	a0 01       	movw	r20, r0
     902:	11 24       	eor	r1, r1
     904:	ea 01       	movw	r28, r20
     906:	c8 5e       	subi	r28, 0xE8	; 232
     908:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     90a:	8e 2c       	mov	r8, r14
     90c:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     90e:	02 e0       	ldi	r16, 0x02	; 2
     910:	90 2e       	mov	r9, r16
     912:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     914:	13 e0       	ldi	r17, 0x03	; 3
     916:	a1 2e       	mov	r10, r17
     918:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     91a:	b4 e0       	ldi	r27, 0x04	; 4
     91c:	bb 2e       	mov	r11, r27
     91e:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     920:	af e1       	ldi	r26, 0x1F	; 31
     922:	ca 2e       	mov	r12, r26
     924:	a1 e0       	ldi	r26, 0x01	; 1
     926:	da 2e       	mov	r13, r26
     928:	c4 0e       	add	r12, r20
     92a:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     92c:	fe 01       	movw	r30, r28
     92e:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     930:	40 2f       	mov	r20, r16
     932:	44 1f       	adc	r20, r20
     934:	44 27       	eor	r20, r20
     936:	44 1f       	adc	r20, r20
     938:	8e 2d       	mov	r24, r14
     93a:	6f 2d       	mov	r22, r15
     93c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	a8 01       	movw	r20, r16
     944:	f6 e0       	ldi	r31, 0x06	; 6
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	fa 95       	dec	r31
     94c:	e1 f7       	brne	.-8      	; 0x946 <video_putchar+0x66>
     94e:	41 70       	andi	r20, 0x01	; 1
     950:	88 2d       	mov	r24, r8
     952:	6f 2d       	mov	r22, r15
     954:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     958:	a8 01       	movw	r20, r16
     95a:	e5 e0       	ldi	r30, 0x05	; 5
     95c:	56 95       	lsr	r21
     95e:	47 95       	ror	r20
     960:	ea 95       	dec	r30
     962:	e1 f7       	brne	.-8      	; 0x95c <video_putchar+0x7c>
     964:	41 70       	andi	r20, 0x01	; 1
     966:	89 2d       	mov	r24, r9
     968:	6f 2d       	mov	r22, r15
     96a:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     96e:	a8 01       	movw	r20, r16
     970:	74 e0       	ldi	r23, 0x04	; 4
     972:	56 95       	lsr	r21
     974:	47 95       	ror	r20
     976:	7a 95       	dec	r23
     978:	e1 f7       	brne	.-8      	; 0x972 <video_putchar+0x92>
     97a:	41 70       	andi	r20, 0x01	; 1
     97c:	8a 2d       	mov	r24, r10
     97e:	6f 2d       	mov	r22, r15
     980:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     984:	63 e0       	ldi	r22, 0x03	; 3
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	6a 95       	dec	r22
     98c:	e1 f7       	brne	.-8      	; 0x986 <video_putchar+0xa6>
     98e:	01 70       	andi	r16, 0x01	; 1
     990:	8b 2d       	mov	r24, r11
     992:	6f 2d       	mov	r22, r15
     994:	40 2f       	mov	r20, r16
     996:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
     99a:	21 96       	adiw	r28, 0x01	; 1
     99c:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     99e:	cc 15       	cp	r28, r12
     9a0:	dd 05       	cpc	r29, r13
     9a2:	21 f6       	brne	.-120    	; 0x92c <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	08 95       	ret

000009be <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	08 2f       	mov	r16, r24
     9ca:	f6 2e       	mov	r15, r22
     9cc:	ea 01       	movw	r28, r20
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	06 c0       	rjmp	.+12     	; 0x9de <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     9d2:	80 2f       	mov	r24, r16
     9d4:	6f 2d       	mov	r22, r15
     9d6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <video_putchar>
		x = x+6;	
     9da:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     9dc:	1f 5f       	subi	r17, 0xFF	; 255
     9de:	fe 01       	movw	r30, r28
     9e0:	e1 0f       	add	r30, r17
     9e2:	f1 1d       	adc	r31, r1
     9e4:	40 81       	ld	r20, Z
     9e6:	44 23       	and	r20, r20
     9e8:	a1 f7       	brne	.-24     	; 0x9d2 <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	08 95       	ret

000009f6 <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     9f6:	e6 2f       	mov	r30, r22
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	28 2f       	mov	r18, r24
     9fc:	26 95       	lsr	r18
     9fe:	26 95       	lsr	r18
     a00:	26 95       	lsr	r18
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	9a 95       	dec	r25
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <video_set+0xe>
     a0c:	e2 0f       	add	r30, r18
     a0e:	f1 1d       	adc	r31, r1
     a10:	eb 5c       	subi	r30, 0xCB	; 203
     a12:	fe 4f       	sbci	r31, 0xFE	; 254
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 95       	com	r24
     a18:	90 95       	com	r25
     a1a:	87 70       	andi	r24, 0x07	; 7
     a1c:	90 70       	andi	r25, 0x00	; 0
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <video_set+0x32>
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	8a 95       	dec	r24
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <video_set+0x2e>
     a2c:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     a2e:	82 23       	and	r24, r18
     a30:	08 95       	ret

00000a32 <add_ball>:

//////////////////////////////////////////////////////////////////////////////

// adds a ball to the screen
void add_ball(void)
begin
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <add_ball+0xe>
	int i = 0;
	while(is_on_screen[i]) i++;
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	f9 01       	movw	r30, r18
     a42:	ea 5d       	subi	r30, 0xDA	; 218
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	80 81       	ld	r24, Z
     a48:	88 23       	and	r24, r24
     a4a:	c1 f7       	brne	.-16     	; 0xa3c <add_ball+0xa>
	i--;
     a4c:	f9 01       	movw	r30, r18
     a4e:	31 97       	sbiw	r30, 0x01	; 1
	is_on_screen[i] = 1;
     a50:	df 01       	movw	r26, r30
     a52:	aa 5d       	subi	r26, 0xDA	; 218
     a54:	be 4f       	sbci	r27, 0xFE	; 254
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	8c 93       	st	X, r24
	x_pos[i] = 125;
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	df 01       	movw	r26, r30
     a60:	a9 5b       	subi	r26, 0xB9	; 185
     a62:	ba 4f       	sbci	r27, 0xFA	; 250
     a64:	8d e7       	ldi	r24, 0x7D	; 125
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	11 96       	adiw	r26, 0x01	; 1
     a6a:	9c 93       	st	X, r25
     a6c:	8e 93       	st	-X, r24
	y_pos[i] = 14;
     a6e:	8f 01       	movw	r16, r30
     a70:	0b 54       	subi	r16, 0x4B	; 75
     a72:	1a 4f       	sbci	r17, 0xFA	; 250
     a74:	8e e0       	ldi	r24, 0x0E	; 14
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	d8 01       	movw	r26, r16
     a7a:	11 96       	adiw	r26, 0x01	; 1
     a7c:	9c 93       	st	X, r25
     a7e:	8e 93       	st	-X, r24
	x_velocity[i] = int2fix(30) | 0x8000;
     a80:	df 01       	movw	r26, r30
     a82:	a8 58       	subi	r26, 0x88	; 136
     a84:	ba 4f       	sbci	r27, 0xFA	; 250
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	9e e9       	ldi	r25, 0x9E	; 158
     a8a:	11 96       	adiw	r26, 0x01	; 1
     a8c:	9c 93       	st	X, r25
     a8e:	8e 93       	st	-X, r24
	y_velocity[i] = int2fix(3);
     a90:	ea 56       	subi	r30, 0x6A	; 106
     a92:	fa 4f       	sbci	r31, 0xFA	; 250
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	80 83       	st	Z, r24

	video_pt(x_pos[1],y_pos[i],1);
     a9c:	80 91 49 05 	lds	r24, 0x0549
     aa0:	90 91 4a 05 	lds	r25, 0x054A
     aa4:	f8 01       	movw	r30, r16
     aa6:	60 81       	ld	r22, Z
     aa8:	71 81       	ldd	r23, Z+1	; 0x01
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[1]+1,y_pos[i],1);
     ab0:	80 91 49 05 	lds	r24, 0x0549
     ab4:	90 91 4a 05 	lds	r25, 0x054A
     ab8:	d8 01       	movw	r26, r16
     aba:	6d 91       	ld	r22, X+
     abc:	7c 91       	ld	r23, X
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	41 e0       	ldi	r20, 0x01	; 1
     ac2:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[1]+1,y_pos[i]+1,1);
     ac6:	80 91 49 05 	lds	r24, 0x0549
     aca:	90 91 4a 05 	lds	r25, 0x054A
     ace:	f8 01       	movw	r30, r16
     ad0:	60 81       	ld	r22, Z
     ad2:	71 81       	ldd	r23, Z+1	; 0x01
     ad4:	6f 5f       	subi	r22, 0xFF	; 255
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[1],y_pos[i]+1,1);
     ade:	80 91 49 05 	lds	r24, 0x0549
     ae2:	90 91 4a 05 	lds	r25, 0x054A
     ae6:	d8 01       	movw	r26, r16
     ae8:	6d 91       	ld	r22, X+
     aea:	7c 91       	ld	r23, X
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
end
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <remove_ball>:

void remove_ball(int i)
begin
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
	video_pt(x_pos[1],y_pos[i],0);
     afe:	20 91 49 05 	lds	r18, 0x0549
     b02:	30 91 4a 05 	lds	r19, 0x054A
     b06:	8c 01       	movw	r16, r24
     b08:	00 0f       	add	r16, r16
     b0a:	11 1f       	adc	r17, r17
     b0c:	0b 54       	subi	r16, 0x4B	; 75
     b0e:	1a 4f       	sbci	r17, 0xFA	; 250
     b10:	f8 01       	movw	r30, r16
     b12:	60 81       	ld	r22, Z
     b14:	71 81       	ldd	r23, Z+1	; 0x01
     b16:	82 2f       	mov	r24, r18
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[1]+1,y_pos[i],0);
     b1e:	80 91 49 05 	lds	r24, 0x0549
     b22:	90 91 4a 05 	lds	r25, 0x054A
     b26:	f8 01       	movw	r30, r16
     b28:	60 81       	ld	r22, Z
     b2a:	71 81       	ldd	r23, Z+1	; 0x01
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[1]+1,y_pos[i]+1,0);
     b34:	80 91 49 05 	lds	r24, 0x0549
     b38:	90 91 4a 05 	lds	r25, 0x054A
     b3c:	f8 01       	movw	r30, r16
     b3e:	60 81       	ld	r22, Z
     b40:	71 81       	ldd	r23, Z+1	; 0x01
     b42:	6f 5f       	subi	r22, 0xFF	; 255
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(x_pos[1],y_pos[i]+1,0);
     b4c:	80 91 49 05 	lds	r24, 0x0549
     b50:	90 91 4a 05 	lds	r25, 0x054A
     b54:	f8 01       	movw	r30, r16
     b56:	60 81       	ld	r22, Z
     b58:	71 81       	ldd	r23, Z+1	; 0x01
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
end
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <main>:




int main(void)
begin
     b68:	2f 92       	push	r2
     b6a:	3f 92       	push	r3
     b6c:	4f 92       	push	r4
     b6e:	5f 92       	push	r5
     b70:	6f 92       	push	r6
     b72:	7f 92       	push	r7
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	29 97       	sbiw	r28, 0x09	; 9
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61

	unsigned char time_str[3];
	unsigned char score_str[3];


	initialize();
     b9c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <initialize>
	
	video_line(width,0,width,height,1);
     ba0:	8f e7       	ldi	r24, 0x7F	; 127
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	4f e7       	ldi	r20, 0x7F	; 127
     ba6:	2f e3       	ldi	r18, 0x3F	; 63
     ba8:	01 e0       	ldi	r16, 0x01	; 1
     baa:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_line(0,0,width,0,1);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	4f e7       	ldi	r20, 0x7F	; 127
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_line(0,height,width-17,height,1);
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	6f e3       	ldi	r22, 0x3F	; 63
     bbe:	4e e6       	ldi	r20, 0x6E	; 110
     bc0:	2f e3       	ldi	r18, 0x3F	; 63
     bc2:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
	video_pt(40,1,1);
     bc6:	88 e2       	ldi	r24, 0x28	; 40
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(80,1,1);
     bd0:	80 e5       	ldi	r24, 0x50	; 80
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(40,height-1,1);
     bda:	88 e2       	ldi	r24, 0x28	; 40
     bdc:	6e e3       	ldi	r22, 0x3E	; 62
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
	video_pt(80,height-1,1);
     be4:	80 e5       	ldi	r24, 0x50	; 80
     be6:	6e e3       	ldi	r22, 0x3E	; 62
     be8:	41 e0       	ldi	r20, 0x01	; 1
     bea:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
     bee:	33 24       	eor	r3, r3
     bf0:	19 86       	std	Y+9, r1	; 0x09
     bf2:	42 e0       	ldi	r20, 0x02	; 2
     bf4:	e4 2e       	mov	r14, r20
     bf6:	44 24       	eor	r4, r4
     bf8:	55 24       	eor	r5, r5
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <main+0x98>
     bfc:	2e 2c       	mov	r2, r14
     bfe:	e2 2c       	mov	r14, r2

	// guide for the real code
	while(time_elapsed_HS<=200)
	begin
		if (LineCount == ScreenBot)
     c00:	80 91 76 05 	lds	r24, 0x0576
     c04:	90 91 77 05 	lds	r25, 0x0577
     c08:	8d 36       	cpi	r24, 0x6D	; 109
     c0a:	91 05       	cpc	r25, r1
     c0c:	b9 f7       	brne	.-18     	; 0xbfc <main+0x94>
		begin

			// 1. Timing and ball addition
			frame_count++;
     c0e:	08 94       	sec
     c10:	41 1c       	adc	r4, r1
     c12:	51 1c       	adc	r5, r1
			if (frame_count >= 30)
     c14:	2e e1       	ldi	r18, 0x1E	; 30
     c16:	42 16       	cp	r4, r18
     c18:	51 04       	cpc	r5, r1
     c1a:	0c f4       	brge	.+2      	; 0xc1e <main+0xb6>
     c1c:	79 c0       	rjmp	.+242    	; 0xd10 <main+0x1a8>
			begin
				is_on_screen[0] = 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 26 01 	sts	0x0126, r24
				x_pos[0] = 125;
     c24:	8d e7       	ldi	r24, 0x7D	; 125
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	90 93 48 05 	sts	0x0548, r25
     c2c:	80 93 47 05 	sts	0x0547, r24
				y_pos[0] = 14;
     c30:	ae e0       	ldi	r26, 0x0E	; 14
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	b0 93 b6 05 	sts	0x05B6, r27
     c38:	a0 93 b5 05 	sts	0x05B5, r26
				x_velocity[0] = 0xe200; 
     c3c:	e0 e0       	ldi	r30, 0x00	; 0
     c3e:	f2 ee       	ldi	r31, 0xE2	; 226
     c40:	f0 93 79 05 	sts	0x0579, r31
     c44:	e0 93 78 05 	sts	0x0578, r30
				y_velocity[0] = 0x0300;
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	33 e0       	ldi	r19, 0x03	; 3
     c4c:	30 93 97 05 	sts	0x0597, r19
     c50:	20 93 96 05 	sts	0x0596, r18

				video_pt(x_pos[0],y_pos[0],1);
     c54:	80 91 47 05 	lds	r24, 0x0547
     c58:	90 91 48 05 	lds	r25, 0x0548
     c5c:	60 91 b5 05 	lds	r22, 0x05B5
     c60:	70 91 b6 05 	lds	r23, 0x05B6
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
				video_pt(x_pos[0]+1,y_pos[0],1);
     c6a:	80 91 47 05 	lds	r24, 0x0547
     c6e:	90 91 48 05 	lds	r25, 0x0548
     c72:	60 91 b5 05 	lds	r22, 0x05B5
     c76:	70 91 b6 05 	lds	r23, 0x05B6
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
				video_pt(x_pos[0]+1,y_pos[0]+1,1);
     c82:	80 91 47 05 	lds	r24, 0x0547
     c86:	90 91 48 05 	lds	r25, 0x0548
     c8a:	60 91 b5 05 	lds	r22, 0x05B5
     c8e:	70 91 b6 05 	lds	r23, 0x05B6
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	8f 5f       	subi	r24, 0xFF	; 255
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
				video_pt(x_pos[0],y_pos[0]+1,1);
     c9c:	80 91 47 05 	lds	r24, 0x0547
     ca0:	90 91 48 05 	lds	r25, 0x0548
     ca4:	60 91 b5 05 	lds	r22, 0x05B5
     ca8:	70 91 b6 05 	lds	r23, 0x05B6
     cac:	6f 5f       	subi	r22, 0xFF	; 255
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>

				frame_count = 0;
				time_elapsed_HS++; 
     cb4:	39 85       	ldd	r19, Y+9	; 0x09
     cb6:	3f 5f       	subi	r19, 0xFF	; 255
     cb8:	39 87       	std	Y+9, r19	; 0x09
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     cba:	00 d0       	rcall	.+0      	; 0xcbc <main+0x154>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <main+0x156>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <main+0x158>
     cc0:	ed b7       	in	r30, 0x3d	; 61
     cc2:	fe b7       	in	r31, 0x3e	; 62
     cc4:	31 96       	adiw	r30, 0x01	; 1
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	2c 0f       	add	r18, r28
     ccc:	3d 1f       	adc	r19, r29
     cce:	ad b7       	in	r26, 0x3d	; 61
     cd0:	be b7       	in	r27, 0x3e	; 62
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	3c 93       	st	X, r19
     cd6:	2e 93       	st	-X, r18
     cd8:	11 97       	sbiw	r26, 0x01	; 1
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	93 83       	std	Z+3, r25	; 0x03
     ce0:	82 83       	std	Z+2, r24	; 0x02
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	86 95       	lsr	r24
     ce6:	84 83       	std	Z+4, r24	; 0x04
     ce8:	15 82       	std	Z+5, r1	; 0x05
     cea:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <sprintf>
				video_puts(110,57,time_str);
     cee:	ad b7       	in	r26, 0x3d	; 61
     cf0:	be b7       	in	r27, 0x3e	; 62
     cf2:	16 96       	adiw	r26, 0x06	; 6
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	be bf       	out	0x3e, r27	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	ad bf       	out	0x3d, r26	; 61
     cfe:	8e e6       	ldi	r24, 0x6E	; 110
     d00:	69 e3       	ldi	r22, 0x39	; 57
     d02:	ae 01       	movw	r20, r28
     d04:	4f 5f       	subi	r20, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
     d0c:	44 24       	eor	r4, r4
     d0e:	55 24       	eor	r5, r5
			end

			// 2. update positions for the paddle
				video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     d10:	1e 2d       	mov	r17, r14
     d12:	18 5f       	subi	r17, 0xF8	; 248
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	6e 2d       	mov	r22, r14
     d18:	42 e0       	ldi	r20, 0x02	; 2
     d1a:	21 2f       	mov	r18, r17
     d1c:	00 e0       	ldi	r16, 0x00	; 0
     d1e:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	6e 2d       	mov	r22, r14
     d26:	43 e0       	ldi	r20, 0x03	; 3
     d28:	21 2f       	mov	r18, r17
     d2a:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				prev_top = top_of_paddle;
				top_of_paddle =(ADCH*53/255)+1;
     d2e:	80 91 79 00 	lds	r24, 0x0079
     d32:	b5 e3       	ldi	r27, 0x35	; 53
     d34:	8b 9f       	mul	r24, r27
     d36:	c0 01       	movw	r24, r0
     d38:	11 24       	eor	r1, r1
     d3a:	6f ef       	ldi	r22, 0xFF	; 255
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__divmodhi4>
     d42:	16 2f       	mov	r17, r22
     d44:	26 2e       	mov	r2, r22
     d46:	23 94       	inc	r2
				v_paddle_y = top_of_paddle-prev_top;
     d48:	62 2c       	mov	r6, r2
     d4a:	77 24       	eor	r7, r7
     d4c:	f3 01       	movw	r30, r6
     d4e:	ee 19       	sub	r30, r14
     d50:	f1 09       	sbc	r31, r1
     d52:	f8 87       	std	Y+8, r31	; 0x08
     d54:	ef 83       	std	Y+7, r30	; 0x07
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     d56:	17 5f       	subi	r17, 0xF7	; 247
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	62 2d       	mov	r22, r2
     d5c:	42 e0       	ldi	r20, 0x02	; 2
     d5e:	21 2f       	mov	r18, r17
     d60:	01 e0       	ldi	r16, 0x01	; 1
     d62:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	62 2d       	mov	r22, r2
     d6a:	43 e0       	ldi	r20, 0x03	; 3
     d6c:	21 2f       	mov	r18, r17
     d6e:	0e 94 cf 03 	call	0x79e	; 0x79e <video_line>


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     d72:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     d76:	f0 e6       	ldi	r31, 0x60	; 96
     d78:	f0 93 7c 00 	sts	0x007C, r31
	ADCSRA |= (1<<ADSC);
     d7c:	80 91 7a 00 	lds	r24, 0x007A
     d80:	80 64       	ori	r24, 0x40	; 64
     d82:	80 93 7a 00 	sts	0x007A, r24
     d86:	88 24       	eor	r8, r8
     d88:	99 24       	eor	r9, r9
				ADC_start_measure(0);

			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
     d8a:	f4 01       	movw	r30, r8
     d8c:	ea 5d       	subi	r30, 0xDA	; 218
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	80 81       	ld	r24, Z
     d92:	88 23       	and	r24, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <main+0x230>
     d96:	48 c1       	rjmp	.+656    	; 0x1028 <main+0x4c0>
     d98:	a4 01       	movw	r20, r8
     d9a:	4f 5f       	subi	r20, 0xFF	; 255
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						if(is_on_screen[j])
						begin
							if((x_pos[i]-x_pos[j])<=4)
     d9e:	c4 01       	movw	r24, r8
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	8c 01       	movw	r16, r24
     da6:	09 5b       	subi	r16, 0xB9	; 185
     da8:	1a 4f       	sbci	r17, 0xFA	; 250
							begin
								if((y_pos[i]-y_pos[j])<=4)
     daa:	bc 01       	movw	r22, r24
     dac:	6b 54       	subi	r22, 0x4B	; 75
     dae:	7a 4f       	sbci	r23, 0xFA	; 250
				if(is_on_screen[i])
				begin
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						if(is_on_screen[j])
     db0:	fa 01       	movw	r30, r20
     db2:	ea 5d       	subi	r30, 0xDA	; 218
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	b1 f0       	breq	.+44     	; 0xde8 <main+0x280>
						begin
							if((x_pos[i]-x_pos[j])<=4)
     dbc:	d8 01       	movw	r26, r16
     dbe:	8d 91       	ld	r24, X+
     dc0:	9c 91       	ld	r25, X
     dc2:	da 01       	movw	r26, r20
     dc4:	aa 0f       	add	r26, r26
     dc6:	bb 1f       	adc	r27, r27
     dc8:	fd 01       	movw	r30, r26
     dca:	e9 5b       	subi	r30, 0xB9	; 185
     dcc:	fa 4f       	sbci	r31, 0xFA	; 250
     dce:	20 81       	ld	r18, Z
     dd0:	31 81       	ldd	r19, Z+1	; 0x01
     dd2:	82 1b       	sub	r24, r18
     dd4:	93 0b       	sbc	r25, r19
     dd6:	05 97       	sbiw	r24, 0x05	; 5
     dd8:	3c f4       	brge	.+14     	; 0xde8 <main+0x280>
							begin
								if((y_pos[i]-y_pos[j])<=4)
     dda:	fb 01       	movw	r30, r22
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	ab 54       	subi	r26, 0x4B	; 75
     de2:	ba 4f       	sbci	r27, 0xFA	; 250
     de4:	ed 91       	ld	r30, X+
     de6:	fc 91       	ld	r31, X
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
				begin
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	4f 30       	cpi	r20, 0x0F	; 15
     dee:	51 05       	cpc	r21, r1
     df0:	fc f2       	brlt	.-66     	; 0xdb0 <main+0x248>
					
								end // y check
							end // x check
						end // is on screen j
					end // for j
					delta_x_velocity = multfix(x_velocity[i],0x0001);
     df2:	84 01       	movw	r16, r8
     df4:	00 0f       	add	r16, r16
     df6:	11 1f       	adc	r17, r17
     df8:	88 e7       	ldi	r24, 0x78	; 120
     dfa:	c8 2e       	mov	r12, r24
     dfc:	85 e0       	ldi	r24, 0x05	; 5
     dfe:	d8 2e       	mov	r13, r24
     e00:	c0 0e       	add	r12, r16
     e02:	d1 1e       	adc	r13, r17
     e04:	d6 01       	movw	r26, r12
     e06:	8d 91       	ld	r24, X+
     e08:	9c 91       	ld	r25, X
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 34 0a 	call	0x1468	; 0x1468 <multfix>
     e12:	5c 01       	movw	r10, r24
					delta_y_velocity = multfix(y_velocity[i],0x0001);
     e14:	b6 e9       	ldi	r27, 0x96	; 150
     e16:	eb 2e       	mov	r14, r27
     e18:	b5 e0       	ldi	r27, 0x05	; 5
     e1a:	fb 2e       	mov	r15, r27
     e1c:	e0 0e       	add	r14, r16
     e1e:	f1 1e       	adc	r15, r17
     e20:	f7 01       	movw	r30, r14
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	0e 94 34 0a 	call	0x1468	; 0x1468 <multfix>
					x_velocity[i] -= delta_x_velocity;
     e2e:	d6 01       	movw	r26, r12
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	2a 19       	sub	r18, r10
     e38:	3b 09       	sbc	r19, r11
     e3a:	11 96       	adiw	r26, 0x01	; 1
     e3c:	3c 93       	st	X, r19
     e3e:	2e 93       	st	-X, r18
					y_velocity[i] -= delta_y_velocity;
     e40:	f7 01       	movw	r30, r14
     e42:	20 81       	ld	r18, Z
     e44:	31 81       	ldd	r19, Z+1	; 0x01
     e46:	28 1b       	sub	r18, r24
     e48:	39 0b       	sbc	r19, r25
     e4a:	31 83       	std	Z+1, r19	; 0x01
     e4c:	20 83       	st	Z, r18


					if((x_pos[i] <= 4) & ((y_pos[i]-top_of_paddle)>0) & ((y_pos[i]-top_of_paddle)<7))
     e4e:	f8 01       	movw	r30, r16
     e50:	e9 5b       	subi	r30, 0xB9	; 185
     e52:	fa 4f       	sbci	r31, 0xFA	; 250
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	0b 54       	subi	r16, 0x4B	; 75
     e5a:	1a 4f       	sbci	r17, 0xFA	; 250
     e5c:	d8 01       	movw	r26, r16
     e5e:	2d 91       	ld	r18, X+
     e60:	3c 91       	ld	r19, X
     e62:	11 97       	sbiw	r26, 0x01	; 1
     e64:	0d 91       	ld	r16, X+
     e66:	1c 91       	ld	r17, X
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	05 97       	sbiw	r24, 0x05	; 5
     e6c:	0c f4       	brge	.+2      	; 0xe70 <main+0x308>
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	26 19       	sub	r18, r6
     e74:	37 09       	sbc	r19, r7
     e76:	12 16       	cp	r1, r18
     e78:	13 06       	cpc	r1, r19
     e7a:	0c f4       	brge	.+2      	; 0xe7e <main+0x316>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	48 23       	and	r20, r24
     e80:	84 2f       	mov	r24, r20
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	06 19       	sub	r16, r6
     e8a:	17 09       	sbc	r17, r7
     e8c:	07 30       	cpi	r16, 0x07	; 7
     e8e:	11 05       	cpc	r17, r1
     e90:	14 f4       	brge	.+4      	; 0xe96 <main+0x32e>
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	82 23       	and	r24, r18
     e98:	93 23       	and	r25, r19
     e9a:	89 2b       	or	r24, r25
     e9c:	b9 f0       	breq	.+46     	; 0xecc <main+0x364>
					begin
						x_velocity[i] |= 0x8000;
     e9e:	f4 01       	movw	r30, r8
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	df 01       	movw	r26, r30
     ea6:	a8 58       	subi	r26, 0x88	; 136
     ea8:	ba 4f       	sbci	r27, 0xFA	; 250
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	11 97       	sbiw	r26, 0x01	; 1
     eb0:	90 68       	ori	r25, 0x80	; 128
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	9c 93       	st	X, r25
     eb6:	8e 93       	st	-X, r24
						y_velocity[i] += v_paddle_y;
     eb8:	ea 56       	subi	r30, 0x6A	; 106
     eba:	fa 4f       	sbci	r31, 0xFA	; 250
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	2f 81       	ldd	r18, Y+7	; 0x07
     ec2:	38 85       	ldd	r19, Y+8	; 0x08
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
					end

			// 3.2. Update position of balls

					video_pt(x_pos[1],y_pos[i],0);
     ecc:	80 91 49 05 	lds	r24, 0x0549
     ed0:	90 91 4a 05 	lds	r25, 0x054A
     ed4:	74 01       	movw	r14, r8
     ed6:	ee 0c       	add	r14, r14
     ed8:	ff 1c       	adc	r15, r15
     eda:	87 01       	movw	r16, r14
     edc:	0b 54       	subi	r16, 0x4B	; 75
     ede:	1a 4f       	sbci	r17, 0xFA	; 250
     ee0:	d8 01       	movw	r26, r16
     ee2:	6d 91       	ld	r22, X+
     ee4:	7c 91       	ld	r23, X
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
					video_pt(x_pos[1]+1,y_pos[i],0);
     eec:	80 91 49 05 	lds	r24, 0x0549
     ef0:	90 91 4a 05 	lds	r25, 0x054A
     ef4:	f8 01       	movw	r30, r16
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
					video_pt(x_pos[1]+1,y_pos[i]+1,0);
     f02:	80 91 49 05 	lds	r24, 0x0549
     f06:	90 91 4a 05 	lds	r25, 0x054A
     f0a:	d8 01       	movw	r26, r16
     f0c:	6d 91       	ld	r22, X+
     f0e:	7c 91       	ld	r23, X
     f10:	6f 5f       	subi	r22, 0xFF	; 255
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
					video_pt(x_pos[1],y_pos[i]+1,0);
     f1a:	80 91 49 05 	lds	r24, 0x0549
     f1e:	90 91 4a 05 	lds	r25, 0x054A
     f22:	f8 01       	movw	r30, r16
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>


					x_pos[i] += x_velocity[i];
     f30:	67 e4       	ldi	r22, 0x47	; 71
     f32:	c6 2e       	mov	r12, r22
     f34:	65 e0       	ldi	r22, 0x05	; 5
     f36:	d6 2e       	mov	r13, r22
     f38:	ce 0c       	add	r12, r14
     f3a:	df 1c       	adc	r13, r15
     f3c:	d6 01       	movw	r26, r12
     f3e:	2d 91       	ld	r18, X+
     f40:	3c 91       	ld	r19, X
     f42:	11 97       	sbiw	r26, 0x01	; 1
     f44:	f7 01       	movw	r30, r14
     f46:	e8 58       	subi	r30, 0x88	; 136
     f48:	fa 4f       	sbci	r31, 0xFA	; 250
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	82 0f       	add	r24, r18
     f50:	93 1f       	adc	r25, r19
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	9c 93       	st	X, r25
     f56:	8e 93       	st	-X, r24
					y_pos[i] += y_velocity[i];
     f58:	f8 01       	movw	r30, r16
     f5a:	20 81       	ld	r18, Z
     f5c:	31 81       	ldd	r19, Z+1	; 0x01
     f5e:	86 e9       	ldi	r24, 0x96	; 150
     f60:	95 e0       	ldi	r25, 0x05	; 5
     f62:	e8 0e       	add	r14, r24
     f64:	f9 1e       	adc	r15, r25
     f66:	d7 01       	movw	r26, r14
     f68:	8d 91       	ld	r24, X+
     f6a:	9c 91       	ld	r25, X
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24

					video_pt(x_pos[1],y_pos[i],1);
     f74:	80 91 49 05 	lds	r24, 0x0549
     f78:	90 91 4a 05 	lds	r25, 0x054A
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
					video_pt(x_pos[1]+1,y_pos[i],1);
     f86:	80 91 49 05 	lds	r24, 0x0549
     f8a:	90 91 4a 05 	lds	r25, 0x054A
     f8e:	f8 01       	movw	r30, r16
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
					video_pt(x_pos[1]+1,y_pos[i]+1,1);
     f9c:	80 91 49 05 	lds	r24, 0x0549
     fa0:	90 91 4a 05 	lds	r25, 0x054A
     fa4:	d8 01       	movw	r26, r16
     fa6:	6d 91       	ld	r22, X+
     fa8:	7c 91       	ld	r23, X
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>
					video_pt(x_pos[1],y_pos[i]+1,1);
     fb4:	80 91 49 05 	lds	r24, 0x0549
     fb8:	90 91 4a 05 	lds	r25, 0x054A
     fbc:	f8 01       	movw	r30, r16
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	0e 94 9b 03 	call	0x736	; 0x736 <video_pt>

			// 3.3 remove balls that hit the left side of the screen or bins
					if(x_pos[i] <= 1) // hit left wall
     fca:	d6 01       	movw	r26, r12
     fcc:	8d 91       	ld	r24, X+
     fce:	9c 91       	ld	r25, X
     fd0:	02 97       	sbiw	r24, 0x02	; 2
     fd2:	34 f4       	brge	.+12     	; 0xfe0 <main+0x478>
					begin
						is_on_screen[i] = 0;
     fd4:	f4 01       	movw	r30, r8
     fd6:	ea 5d       	subi	r30, 0xDA	; 218
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	10 82       	st	Z, r1
						if(score) score--;
     fdc:	31 10       	cpse	r3, r1
     fde:	3a 94       	dec	r3
						// remove_ball(x_pos[q],y_pos[q]);
					end // hit left wall
					if(x_pos[i]<100 & x_pos[i]>60)
     fe0:	94 01       	movw	r18, r8
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	f9 01       	movw	r30, r18
     fe8:	e9 5b       	subi	r30, 0xB9	; 185
     fea:	fa 4f       	sbci	r31, 0xFA	; 250
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	01 90       	ld	r0, Z+
     ff2:	f0 81       	ld	r31, Z
     ff4:	e0 2d       	mov	r30, r0
     ff6:	84 36       	cpi	r24, 0x64	; 100
     ff8:	91 05       	cpc	r25, r1
     ffa:	b4 f4       	brge	.+44     	; 0x1028 <main+0x4c0>
     ffc:	fd 97       	sbiw	r30, 0x3d	; 61
     ffe:	a4 f0       	brlt	.+40     	; 0x1028 <main+0x4c0>
					begin
						if(y_pos[i]<=1 | y_pos[i]>=(height-2))
    1000:	f9 01       	movw	r30, r18
    1002:	eb 54       	subi	r30, 0x4B	; 75
    1004:	fa 4f       	sbci	r31, 0xFA	; 250
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	01 90       	ld	r0, Z+
    100c:	f0 81       	ld	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	02 97       	sbiw	r24, 0x02	; 2
    1012:	14 f0       	brlt	.+4      	; 0x1018 <main+0x4b0>
    1014:	fd 97       	sbiw	r30, 0x3d	; 61
    1016:	44 f0       	brlt	.+16     	; 0x1028 <main+0x4c0>
						begin
							is_on_screen[i] = 0;
    1018:	f4 01       	movw	r30, r8
    101a:	ea 5d       	subi	r30, 0xDA	; 218
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	10 82       	st	Z, r1
							score++;
    1020:	33 94       	inc	r3
							remove_ball(i);
    1022:	c4 01       	movw	r24, r8
    1024:	0e 94 7d 05 	call	0xafa	; 0xafa <remove_ball>
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
				ADC_start_measure(0);

			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
    1028:	08 94       	sec
    102a:	81 1c       	adc	r8, r1
    102c:	91 1c       	adc	r9, r1
    102e:	be e0       	ldi	r27, 0x0E	; 14
    1030:	8b 16       	cp	r8, r27
    1032:	91 04       	cpc	r9, r1
    1034:	09 f0       	breq	.+2      	; 0x1038 <main+0x4d0>
    1036:	a9 ce       	rjmp	.-686    	; 0xd8a <main+0x222>
					end // x check bins
				end // is on screen i
			end // for i

			// 5. update text (score, time...)
			sprintf(score_str, "%3d",score);
    1038:	00 d0       	rcall	.+0      	; 0x103a <main+0x4d2>
    103a:	00 d0       	rcall	.+0      	; 0x103c <main+0x4d4>
    103c:	00 d0       	rcall	.+0      	; 0x103e <main+0x4d6>
    103e:	ed b7       	in	r30, 0x3d	; 61
    1040:	fe b7       	in	r31, 0x3e	; 62
    1042:	31 96       	adiw	r30, 0x01	; 1
    1044:	24 e0       	ldi	r18, 0x04	; 4
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	2c 0f       	add	r18, r28
    104a:	3d 1f       	adc	r19, r29
    104c:	ad b7       	in	r26, 0x3d	; 61
    104e:	be b7       	in	r27, 0x3e	; 62
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	3c 93       	st	X, r19
    1054:	2e 93       	st	-X, r18
    1056:	11 97       	sbiw	r26, 0x01	; 1
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	93 83       	std	Z+3, r25	; 0x03
    105e:	82 83       	std	Z+2, r24	; 0x02
    1060:	34 82       	std	Z+4, r3	; 0x04
    1062:	15 82       	std	Z+5, r1	; 0x05
    1064:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <sprintf>
			video_puts(110,1,score_str);
    1068:	ad b7       	in	r26, 0x3d	; 61
    106a:	be b7       	in	r27, 0x3e	; 62
    106c:	16 96       	adiw	r26, 0x06	; 6
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	be bf       	out	0x3e, r27	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	ad bf       	out	0x3d, r26	; 61
    1078:	8e e6       	ldi	r24, 0x6E	; 110
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	ae 01       	movw	r20, r28
    107e:	4c 5f       	subi	r20, 0xFC	; 252
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
	video_pt(80,1,1);
	video_pt(40,height-1,1);
	video_pt(80,height-1,1);

	// guide for the real code
	while(time_elapsed_HS<=200)
    1086:	b9 85       	ldd	r27, Y+9	; 0x09
    1088:	b9 3c       	cpi	r27, 0xC9	; 201
    108a:	08 f4       	brcc	.+2      	; 0x108e <main+0x526>
    108c:	b8 cd       	rjmp	.-1168   	; 0xbfe <main+0x96>
		end // linecount == screenBot
	end // while time < 200

	while(1)
	begin
		sprintf(score_str, "%i",score);
    108e:	8e 01       	movw	r16, r28
    1090:	0c 5f       	subi	r16, 0xFC	; 252
    1092:	1f 4f       	sbci	r17, 0xFF	; 255
    1094:	44 e0       	ldi	r20, 0x04	; 4
    1096:	84 2e       	mov	r8, r20
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	94 2e       	mov	r9, r20
    109c:	00 d0       	rcall	.+0      	; 0x109e <main+0x536>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <main+0x538>
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <main+0x53a>
    10a2:	ed b7       	in	r30, 0x3d	; 61
    10a4:	fe b7       	in	r31, 0x3e	; 62
    10a6:	31 96       	adiw	r30, 0x01	; 1
    10a8:	ad b7       	in	r26, 0x3d	; 61
    10aa:	be b7       	in	r27, 0x3e	; 62
    10ac:	12 96       	adiw	r26, 0x02	; 2
    10ae:	1c 93       	st	X, r17
    10b0:	0e 93       	st	-X, r16
    10b2:	11 97       	sbiw	r26, 0x01	; 1
    10b4:	93 82       	std	Z+3, r9	; 0x03
    10b6:	82 82       	std	Z+2, r8	; 0x02
    10b8:	34 82       	std	Z+4, r3	; 0x04
    10ba:	15 82       	std	Z+5, r1	; 0x05
    10bc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <sprintf>
		video_puts(30,30,"Time Up!");
    10c0:	ed b7       	in	r30, 0x3d	; 61
    10c2:	fe b7       	in	r31, 0x3e	; 62
    10c4:	36 96       	adiw	r30, 0x06	; 6
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	fe bf       	out	0x3e, r31	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	ed bf       	out	0x3d, r30	; 61
    10d0:	8e e1       	ldi	r24, 0x1E	; 30
    10d2:	6e e1       	ldi	r22, 0x1E	; 30
    10d4:	47 e0       	ldi	r20, 0x07	; 7
    10d6:	51 e0       	ldi	r21, 0x01	; 1
    10d8:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
		video_puts(30,42,"Your score:");
    10dc:	8e e1       	ldi	r24, 0x1E	; 30
    10de:	6a e2       	ldi	r22, 0x2A	; 42
    10e0:	40 e1       	ldi	r20, 0x10	; 16
    10e2:	51 e0       	ldi	r21, 0x01	; 1
    10e4:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
		video_puts(100,42,score_str);
    10e8:	84 e6       	ldi	r24, 0x64	; 100
    10ea:	6a e2       	ldi	r22, 0x2A	; 42
    10ec:	a8 01       	movw	r20, r16
    10ee:	0e 94 df 04 	call	0x9be	; 0x9be <video_puts>
    10f2:	d4 cf       	rjmp	.-88     	; 0x109c <main+0x534>

000010f4 <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <write_LCD+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <write_LCD+0x8>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <write_LCD+0xa>
    10fe:	ed b7       	in	r30, 0x3d	; 61
    1100:	fe b7       	in	r31, 0x3e	; 62
    1102:	31 96       	adiw	r30, 0x01	; 1
    1104:	05 e3       	ldi	r16, 0x35	; 53
    1106:	15 e0       	ldi	r17, 0x05	; 5
    1108:	ad b7       	in	r26, 0x3d	; 61
    110a:	be b7       	in	r27, 0x3e	; 62
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	1c 93       	st	X, r17
    1110:	0e 93       	st	-X, r16
    1112:	11 97       	sbiw	r26, 0x01	; 1
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	31 e0       	ldi	r19, 0x01	; 1
    1118:	33 83       	std	Z+3, r19	; 0x03
    111a:	22 83       	std	Z+2, r18	; 0x02
    111c:	84 83       	std	Z+4, r24	; 0x04
    111e:	15 82       	std	Z+5, r1	; 0x05
    1120:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <sprintf>
	LCDGotoXY(0, 1);
    1124:	8d b7       	in	r24, 0x3d	; 61
    1126:	9e b7       	in	r25, 0x3e	; 62
    1128:	06 96       	adiw	r24, 0x06	; 6
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	9e bf       	out	0x3e, r25	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	8d bf       	out	0x3d, r24	; 61
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
    113c:	f8 01       	movw	r30, r16
    113e:	01 90       	ld	r0, Z+
    1140:	00 20       	and	r0, r0
    1142:	e9 f7       	brne	.-6      	; 0x113e <write_LCD+0x4a>
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	e0 1b       	sub	r30, r16
    1148:	f1 0b       	sbc	r31, r17
    114a:	c8 01       	movw	r24, r16
    114c:	6e 2f       	mov	r22, r30
    114e:	0e 94 05 09 	call	0x120a	; 0x120a <LCDstring>
end
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	08 95       	ret

00001158 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
    1158:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCDinit>
	LCDcursorOFF();
    115c:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCDcursorOFF>
	LCDclr();				//clear the display
    1160:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCDclr>
	LCDGotoXY(0,0);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    116c:	8c e8       	ldi	r24, 0x8C	; 140
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	0e 94 29 09 	call	0x1252	; 0x1252 <CopyStringtoLCD>
	LCD_char_count = 0;
    1178:	10 92 46 05 	sts	0x0546, r1
end
    117c:	08 95       	ret

0000117e <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    117e:	28 2f       	mov	r18, r24
    1180:	20 7f       	andi	r18, 0xF0	; 240
    1182:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1184:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1186:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1188:	20 e4       	ldi	r18, 0x40	; 64
    118a:	3f e1       	ldi	r19, 0x1F	; 31
    118c:	f9 01       	movw	r30, r18
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1192:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1194:	40 98       	cbi	0x08, 0	; 8
    1196:	f9 01       	movw	r30, r18
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	44 e0       	ldi	r20, 0x04	; 4
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	4a 95       	dec	r20
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <LCDsendChar+0x22>
    11a8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    11aa:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    11ac:	42 9a       	sbi	0x08, 2	; 8
    11ae:	c9 01       	movw	r24, r18
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    11b4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    11b6:	40 98       	cbi	0x08, 0	; 8
    11b8:	c9 01       	movw	r24, r18
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    11be:	08 95       	ret

000011c0 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    11c0:	28 2f       	mov	r18, r24
    11c2:	20 7f       	andi	r18, 0xF0	; 240
    11c4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    11c6:	42 9a       	sbi	0x08, 2	; 8
    11c8:	20 e4       	ldi	r18, 0x40	; 64
    11ca:	3f e1       	ldi	r19, 0x1F	; 31
    11cc:	f9 01       	movw	r30, r18
    11ce:	31 97       	sbiw	r30, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    11d2:	42 98       	cbi	0x08, 2	; 8
    11d4:	f9 01       	movw	r30, r18
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	54 e0       	ldi	r21, 0x04	; 4
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	5a 95       	dec	r21
    11e4:	e1 f7       	brne	.-8      	; 0x11de <LCDsendCommand+0x1e>
    11e6:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    11e8:	42 9a       	sbi	0x08, 2	; 8
    11ea:	c9 01       	movw	r24, r18
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    11f0:	42 98       	cbi	0x08, 2	; 8
    11f2:	c9 01       	movw	r24, r18
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    11f8:	08 95       	ret

000011fa <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    1200:	08 95       	ret

00001202 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    1208:	08 95       	ret

0000120a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	49 f0       	breq	.+18     	; 0x122a <LCDstring+0x20>
    1218:	ec 01       	movw	r28, r24
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    121e:	89 91       	ld	r24, Y+
    1220:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1224:	1f 5f       	subi	r17, 0xFF	; 255
    1226:	10 17       	cp	r17, r16
    1228:	d0 f3       	brcs	.-12     	; 0x121e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	08 95       	ret

00001234 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1234:	62 30       	cpi	r22, 0x02	; 2
    1236:	31 f0       	breq	.+12     	; 0x1244 <LCDGotoXY+0x10>
    1238:	63 30       	cpi	r22, 0x03	; 3
    123a:	31 f0       	breq	.+12     	; 0x1248 <LCDGotoXY+0x14>
    123c:	61 30       	cpi	r22, 0x01	; 1
    123e:	29 f4       	brne	.+10     	; 0x124a <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1240:	80 5c       	subi	r24, 0xC0	; 192
    1242:	03 c0       	rjmp	.+6      	; 0x124a <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1244:	8c 5e       	subi	r24, 0xEC	; 236
    1246:	01 c0       	rjmp	.+2      	; 0x124a <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1248:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    124a:	80 68       	ori	r24, 0x80	; 128
    124c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
	
}
    1250:	08 95       	ret

00001252 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	ec 01       	movw	r28, r24
    125a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    125c:	64 2f       	mov	r22, r20
    125e:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCDGotoXY>
    1262:	10 e0       	ldi	r17, 0x00	; 0
    1264:	03 c0       	rjmp	.+6      	; 0x126c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1266:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    126a:	1f 5f       	subi	r17, 0xFF	; 255
    126c:	fe 01       	movw	r30, r28
    126e:	e1 0f       	add	r30, r17
    1270:	f1 1d       	adc	r31, r1
    1272:	84 91       	lpm	r24, Z+
    1274:	88 23       	and	r24, r24
    1276:	b9 f7       	brne	.-18     	; 0x1266 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	7c 01       	movw	r14, r24
    128e:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    1290:	11 0f       	add	r17, r17
    1292:	11 0f       	add	r17, r17
    1294:	11 0f       	add	r17, r17
    1296:	10 64       	ori	r17, 0x40	; 64
    1298:	c0 e0       	ldi	r28, 0x00	; 0
    129a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    129c:	f7 01       	movw	r30, r14
    129e:	ec 0f       	add	r30, r28
    12a0:	fd 1f       	adc	r31, r29
    12a2:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    12a4:	81 2f       	mov	r24, r17
    12a6:	8c 0f       	add	r24, r28
    12a8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
		LCDsendChar(pcc);
    12ac:	80 2f       	mov	r24, r16
    12ae:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    12b2:	21 96       	adiw	r28, 0x01	; 1
    12b4:	c8 30       	cpi	r28, 0x08	; 8
    12b6:	d1 05       	cpc	r29, r1
    12b8:	89 f7       	brne	.-30     	; 0x129c <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	80 e6       	ldi	r24, 0x60	; 96
    12d0:	9a ee       	ldi	r25, 0xEA	; 234
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    12d6:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    12d8:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    12da:	87 b1       	in	r24, 0x07	; 7
    12dc:	80 6f       	ori	r24, 0xF0	; 240
    12de:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    12e0:	87 b1       	in	r24, 0x07	; 7
    12e2:	87 60       	ori	r24, 0x07	; 7
    12e4:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    12e6:	80 e3       	ldi	r24, 0x30	; 48
    12e8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    12ea:	42 9a       	sbi	0x08, 2	; 8
    12ec:	20 e4       	ldi	r18, 0x40	; 64
    12ee:	3f e1       	ldi	r19, 0x1F	; 31
    12f0:	f9 01       	movw	r30, r18
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    12f6:	42 98       	cbi	0x08, 2	; 8
    12f8:	f9 01       	movw	r30, r18
    12fa:	31 97       	sbiw	r30, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    12fe:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1300:	42 9a       	sbi	0x08, 2	; 8
    1302:	c9 01       	movw	r24, r18
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1308:	42 98       	cbi	0x08, 2	; 8
    130a:	c9 01       	movw	r24, r18
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1310:	80 e2       	ldi	r24, 0x20	; 32
    1312:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1314:	42 9a       	sbi	0x08, 2	; 8
    1316:	c9 01       	movw	r24, r18
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    131c:	42 98       	cbi	0x08, 2	; 8
    131e:	c9 01       	movw	r24, r18
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1324:	88 e2       	ldi	r24, 0x28	; 40
    1326:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    132a:	8c e0       	ldi	r24, 0x0C	; 12
    132c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
    1330:	c8 e9       	ldi	r28, 0x98	; 152
    1332:	d4 e0       	ldi	r29, 0x04	; 4
    1334:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1336:	16 2f       	mov	r17, r22
    1338:	1f 5f       	subi	r17, 0xFF	; 255
    133a:	ce 01       	movw	r24, r28
    133c:	0e 94 40 09 	call	0x1280	; 0x1280 <LCDdefinechar>
    1340:	28 96       	adiw	r28, 0x08	; 8
    1342:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1344:	18 30       	cpi	r17, 0x08	; 8
    1346:	b9 f7       	brne	.-18     	; 0x1336 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	08 95       	ret

00001350 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	08 2f       	mov	r16, r24
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    135a:	8e e1       	ldi	r24, 0x1E	; 30
    135c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1360:	1f 5f       	subi	r17, 0xFF	; 255
    1362:	10 17       	cp	r17, r16
    1364:	d0 f3       	brcs	.-12     	; 0x135a <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	08 95       	ret

0000136c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	08 2f       	mov	r16, r24
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	04 c0       	rjmp	.+8      	; 0x137e <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1376:	88 e1       	ldi	r24, 0x18	; 24
    1378:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    137c:	1f 5f       	subi	r17, 0xFF	; 255
    137e:	10 17       	cp	r17, r16
    1380:	d0 f3       	brcs	.-12     	; 0x1376 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1388:	8e e0       	ldi	r24, 0x0E	; 14
    138a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    138e:	08 95       	ret

00001390 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    1390:	8f e0       	ldi	r24, 0x0F	; 15
    1392:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    1396:	08 95       	ret

00001398 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1398:	8c e0       	ldi	r24, 0x0C	; 12
    139a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    139e:	08 95       	ret

000013a0 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    13a6:	08 95       	ret

000013a8 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    13a8:	8c e0       	ldi	r24, 0x0C	; 12
    13aa:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
}
    13ae:	08 95       	ret

000013b0 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	08 2f       	mov	r16, r24
    13b6:	10 e0       	ldi	r17, 0x00	; 0
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    13ba:	80 e1       	ldi	r24, 0x10	; 16
    13bc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    13c0:	1f 5f       	subi	r17, 0xFF	; 255
    13c2:	10 17       	cp	r17, r16
    13c4:	d0 f3       	brcs	.-12     	; 0x13ba <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	08 2f       	mov	r16, r24
    13d2:	10 e0       	ldi	r17, 0x00	; 0
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    13d6:	84 e1       	ldi	r24, 0x14	; 20
    13d8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    13dc:	1f 5f       	subi	r17, 0xFF	; 255
    13de:	10 17       	cp	r17, r16
    13e0:	d0 f3       	brcs	.-12     	; 0x13d6 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    13f8:	96 e0       	ldi	r25, 0x06	; 6
    13fa:	89 9f       	mul	r24, r25
    13fc:	c0 01       	movw	r24, r0
    13fe:	11 24       	eor	r1, r1
    1400:	24 2f       	mov	r18, r20
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	ac 01       	movw	r20, r24
    1406:	42 9f       	mul	r20, r18
    1408:	c0 01       	movw	r24, r0
    140a:	43 9f       	mul	r20, r19
    140c:	90 0d       	add	r25, r0
    140e:	52 9f       	mul	r21, r18
    1410:	90 0d       	add	r25, r0
    1412:	11 24       	eor	r1, r1
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__divmodhi4>
    141a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    141c:	cb 01       	movw	r24, r22
    141e:	66 e0       	ldi	r22, 0x06	; 6
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmodhi4>
    1426:	e8 2e       	mov	r14, r24
    1428:	ff 24       	eor	r15, r15
    142a:	00 e0       	ldi	r16, 0x00	; 0
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	12 c0       	rjmp	.+36     	; 0x1454 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1430:	c8 01       	movw	r24, r16
    1432:	05 96       	adiw	r24, 0x05	; 5
    1434:	c8 17       	cp	r28, r24
    1436:	d9 07       	cpc	r29, r25
    1438:	10 f0       	brcs	.+4      	; 0x143e <LCDprogressBar+0x56>
    143a:	85 e0       	ldi	r24, 0x05	; 5
    143c:	06 c0       	rjmp	.+12     	; 0x144a <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    143e:	c0 17       	cp	r28, r16
    1440:	d1 07       	cpc	r29, r17
    1442:	10 f0       	brcs	.+4      	; 0x1448 <LCDprogressBar+0x60>
    1444:	8e 2d       	mov	r24, r14
    1446:	01 c0       	rjmp	.+2      	; 0x144a <LCDprogressBar+0x62>
    1448:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    144a:	0e 94 bf 08 	call	0x117e	; 0x117e <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    144e:	f3 94       	inc	r15
    1450:	0a 5f       	subi	r16, 0xFA	; 250
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	fd 14       	cp	r15, r13
    1456:	60 f3       	brcs	.-40     	; 0x1430 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	08 95       	ret

00001468 <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
    1468:	48 2f       	mov	r20, r24
	mov  r21,r25											
    146a:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
    146c:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
    146e:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
    1470:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
    1472:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
    1474:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
    1476:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
    1478:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
    147a:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
    147c:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
    147e:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
    1480:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
    1482:	08 95       	ret

00001484 <__udivmodhi4>:
    1484:	aa 1b       	sub	r26, r26
    1486:	bb 1b       	sub	r27, r27
    1488:	51 e1       	ldi	r21, 0x11	; 17
    148a:	07 c0       	rjmp	.+14     	; 0x149a <__udivmodhi4_ep>

0000148c <__udivmodhi4_loop>:
    148c:	aa 1f       	adc	r26, r26
    148e:	bb 1f       	adc	r27, r27
    1490:	a6 17       	cp	r26, r22
    1492:	b7 07       	cpc	r27, r23
    1494:	10 f0       	brcs	.+4      	; 0x149a <__udivmodhi4_ep>
    1496:	a6 1b       	sub	r26, r22
    1498:	b7 0b       	sbc	r27, r23

0000149a <__udivmodhi4_ep>:
    149a:	88 1f       	adc	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	5a 95       	dec	r21
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__udivmodhi4_loop>
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	08 95       	ret

000014ac <__divmodhi4>:
    14ac:	97 fb       	bst	r25, 7
    14ae:	09 2e       	mov	r0, r25
    14b0:	07 26       	eor	r0, r23
    14b2:	0a d0       	rcall	.+20     	; 0x14c8 <__divmodhi4_neg1>
    14b4:	77 fd       	sbrc	r23, 7
    14b6:	04 d0       	rcall	.+8      	; 0x14c0 <__divmodhi4_neg2>
    14b8:	e5 df       	rcall	.-54     	; 0x1484 <__udivmodhi4>
    14ba:	06 d0       	rcall	.+12     	; 0x14c8 <__divmodhi4_neg1>
    14bc:	00 20       	and	r0, r0
    14be:	1a f4       	brpl	.+6      	; 0x14c6 <__divmodhi4_exit>

000014c0 <__divmodhi4_neg2>:
    14c0:	70 95       	com	r23
    14c2:	61 95       	neg	r22
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255

000014c6 <__divmodhi4_exit>:
    14c6:	08 95       	ret

000014c8 <__divmodhi4_neg1>:
    14c8:	f6 f7       	brtc	.-4      	; 0x14c6 <__divmodhi4_exit>
    14ca:	90 95       	com	r25
    14cc:	81 95       	neg	r24
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	08 95       	ret

000014d2 <sprintf>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	2e 97       	sbiw	r28, 0x0e	; 14
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	0d 89       	ldd	r16, Y+21	; 0x15
    14ec:	1e 89       	ldd	r17, Y+22	; 0x16
    14ee:	86 e0       	ldi	r24, 0x06	; 6
    14f0:	8c 83       	std	Y+4, r24	; 0x04
    14f2:	1a 83       	std	Y+2, r17	; 0x02
    14f4:	09 83       	std	Y+1, r16	; 0x01
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	9f e7       	ldi	r25, 0x7F	; 127
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	9e 01       	movw	r18, r28
    1500:	27 5e       	subi	r18, 0xE7	; 231
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	6f 89       	ldd	r22, Y+23	; 0x17
    150a:	78 8d       	ldd	r23, Y+24	; 0x18
    150c:	a9 01       	movw	r20, r18
    150e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vfprintf>
    1512:	2f 81       	ldd	r18, Y+7	; 0x07
    1514:	38 85       	ldd	r19, Y+8	; 0x08
    1516:	02 0f       	add	r16, r18
    1518:	13 1f       	adc	r17, r19
    151a:	f8 01       	movw	r30, r16
    151c:	10 82       	st	Z, r1
    151e:	2e 96       	adiw	r28, 0x0e	; 14
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <vfprintf>:
    1534:	2f 92       	push	r2
    1536:	3f 92       	push	r3
    1538:	4f 92       	push	r4
    153a:	5f 92       	push	r5
    153c:	6f 92       	push	r6
    153e:	7f 92       	push	r7
    1540:	8f 92       	push	r8
    1542:	9f 92       	push	r9
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	2b 97       	sbiw	r28, 0x0b	; 11
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	3c 01       	movw	r6, r24
    156a:	2b 01       	movw	r4, r22
    156c:	5a 01       	movw	r10, r20
    156e:	fc 01       	movw	r30, r24
    1570:	17 82       	std	Z+7, r1	; 0x07
    1572:	16 82       	std	Z+6, r1	; 0x06
    1574:	83 81       	ldd	r24, Z+3	; 0x03
    1576:	81 fd       	sbrc	r24, 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <vfprintf+0x4c>
    157a:	6f ef       	ldi	r22, 0xFF	; 255
    157c:	7f ef       	ldi	r23, 0xFF	; 255
    157e:	c6 c1       	rjmp	.+908    	; 0x190c <vfprintf+0x3d8>
    1580:	9a e0       	ldi	r25, 0x0A	; 10
    1582:	89 2e       	mov	r8, r25
    1584:	1e 01       	movw	r2, r28
    1586:	08 94       	sec
    1588:	21 1c       	adc	r2, r1
    158a:	31 1c       	adc	r3, r1
    158c:	f3 01       	movw	r30, r6
    158e:	23 81       	ldd	r18, Z+3	; 0x03
    1590:	f2 01       	movw	r30, r4
    1592:	23 fd       	sbrc	r18, 3
    1594:	85 91       	lpm	r24, Z+
    1596:	23 ff       	sbrs	r18, 3
    1598:	81 91       	ld	r24, Z+
    159a:	2f 01       	movw	r4, r30
    159c:	88 23       	and	r24, r24
    159e:	09 f4       	brne	.+2      	; 0x15a2 <vfprintf+0x6e>
    15a0:	b2 c1       	rjmp	.+868    	; 0x1906 <vfprintf+0x3d2>
    15a2:	85 32       	cpi	r24, 0x25	; 37
    15a4:	39 f4       	brne	.+14     	; 0x15b4 <vfprintf+0x80>
    15a6:	23 fd       	sbrc	r18, 3
    15a8:	85 91       	lpm	r24, Z+
    15aa:	23 ff       	sbrs	r18, 3
    15ac:	81 91       	ld	r24, Z+
    15ae:	2f 01       	movw	r4, r30
    15b0:	85 32       	cpi	r24, 0x25	; 37
    15b2:	29 f4       	brne	.+10     	; 0x15be <vfprintf+0x8a>
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	b3 01       	movw	r22, r6
    15b8:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    15bc:	e7 cf       	rjmp	.-50     	; 0x158c <vfprintf+0x58>
    15be:	98 2f       	mov	r25, r24
    15c0:	ff 24       	eor	r15, r15
    15c2:	ee 24       	eor	r14, r14
    15c4:	99 24       	eor	r9, r9
    15c6:	ff e1       	ldi	r31, 0x1F	; 31
    15c8:	ff 15       	cp	r31, r15
    15ca:	d0 f0       	brcs	.+52     	; 0x1600 <vfprintf+0xcc>
    15cc:	9b 32       	cpi	r25, 0x2B	; 43
    15ce:	69 f0       	breq	.+26     	; 0x15ea <vfprintf+0xb6>
    15d0:	9c 32       	cpi	r25, 0x2C	; 44
    15d2:	28 f4       	brcc	.+10     	; 0x15de <vfprintf+0xaa>
    15d4:	90 32       	cpi	r25, 0x20	; 32
    15d6:	59 f0       	breq	.+22     	; 0x15ee <vfprintf+0xba>
    15d8:	93 32       	cpi	r25, 0x23	; 35
    15da:	91 f4       	brne	.+36     	; 0x1600 <vfprintf+0xcc>
    15dc:	0e c0       	rjmp	.+28     	; 0x15fa <vfprintf+0xc6>
    15de:	9d 32       	cpi	r25, 0x2D	; 45
    15e0:	49 f0       	breq	.+18     	; 0x15f4 <vfprintf+0xc0>
    15e2:	90 33       	cpi	r25, 0x30	; 48
    15e4:	69 f4       	brne	.+26     	; 0x1600 <vfprintf+0xcc>
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	24 c0       	rjmp	.+72     	; 0x1632 <vfprintf+0xfe>
    15ea:	52 e0       	ldi	r21, 0x02	; 2
    15ec:	f5 2a       	or	r15, r21
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	f8 2a       	or	r15, r24
    15f2:	28 c0       	rjmp	.+80     	; 0x1644 <vfprintf+0x110>
    15f4:	98 e0       	ldi	r25, 0x08	; 8
    15f6:	f9 2a       	or	r15, r25
    15f8:	25 c0       	rjmp	.+74     	; 0x1644 <vfprintf+0x110>
    15fa:	e0 e1       	ldi	r30, 0x10	; 16
    15fc:	fe 2a       	or	r15, r30
    15fe:	22 c0       	rjmp	.+68     	; 0x1644 <vfprintf+0x110>
    1600:	f7 fc       	sbrc	r15, 7
    1602:	29 c0       	rjmp	.+82     	; 0x1656 <vfprintf+0x122>
    1604:	89 2f       	mov	r24, r25
    1606:	80 53       	subi	r24, 0x30	; 48
    1608:	8a 30       	cpi	r24, 0x0A	; 10
    160a:	70 f4       	brcc	.+28     	; 0x1628 <vfprintf+0xf4>
    160c:	f6 fe       	sbrs	r15, 6
    160e:	05 c0       	rjmp	.+10     	; 0x161a <vfprintf+0xe6>
    1610:	98 9c       	mul	r9, r8
    1612:	90 2c       	mov	r9, r0
    1614:	11 24       	eor	r1, r1
    1616:	98 0e       	add	r9, r24
    1618:	15 c0       	rjmp	.+42     	; 0x1644 <vfprintf+0x110>
    161a:	e8 9c       	mul	r14, r8
    161c:	e0 2c       	mov	r14, r0
    161e:	11 24       	eor	r1, r1
    1620:	e8 0e       	add	r14, r24
    1622:	f0 e2       	ldi	r31, 0x20	; 32
    1624:	ff 2a       	or	r15, r31
    1626:	0e c0       	rjmp	.+28     	; 0x1644 <vfprintf+0x110>
    1628:	9e 32       	cpi	r25, 0x2E	; 46
    162a:	29 f4       	brne	.+10     	; 0x1636 <vfprintf+0x102>
    162c:	f6 fc       	sbrc	r15, 6
    162e:	6b c1       	rjmp	.+726    	; 0x1906 <vfprintf+0x3d2>
    1630:	40 e4       	ldi	r20, 0x40	; 64
    1632:	f4 2a       	or	r15, r20
    1634:	07 c0       	rjmp	.+14     	; 0x1644 <vfprintf+0x110>
    1636:	9c 36       	cpi	r25, 0x6C	; 108
    1638:	19 f4       	brne	.+6      	; 0x1640 <vfprintf+0x10c>
    163a:	50 e8       	ldi	r21, 0x80	; 128
    163c:	f5 2a       	or	r15, r21
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <vfprintf+0x110>
    1640:	98 36       	cpi	r25, 0x68	; 104
    1642:	49 f4       	brne	.+18     	; 0x1656 <vfprintf+0x122>
    1644:	f2 01       	movw	r30, r4
    1646:	23 fd       	sbrc	r18, 3
    1648:	95 91       	lpm	r25, Z+
    164a:	23 ff       	sbrs	r18, 3
    164c:	91 91       	ld	r25, Z+
    164e:	2f 01       	movw	r4, r30
    1650:	99 23       	and	r25, r25
    1652:	09 f0       	breq	.+2      	; 0x1656 <vfprintf+0x122>
    1654:	b8 cf       	rjmp	.-144    	; 0x15c6 <vfprintf+0x92>
    1656:	89 2f       	mov	r24, r25
    1658:	85 54       	subi	r24, 0x45	; 69
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	18 f0       	brcs	.+6      	; 0x1664 <vfprintf+0x130>
    165e:	80 52       	subi	r24, 0x20	; 32
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	38 f4       	brcc	.+14     	; 0x1672 <vfprintf+0x13e>
    1664:	44 e0       	ldi	r20, 0x04	; 4
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	a4 0e       	add	r10, r20
    166a:	b5 1e       	adc	r11, r21
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	59 83       	std	Y+1, r21	; 0x01
    1670:	0f c0       	rjmp	.+30     	; 0x1690 <vfprintf+0x15c>
    1672:	93 36       	cpi	r25, 0x63	; 99
    1674:	31 f0       	breq	.+12     	; 0x1682 <vfprintf+0x14e>
    1676:	93 37       	cpi	r25, 0x73	; 115
    1678:	79 f0       	breq	.+30     	; 0x1698 <vfprintf+0x164>
    167a:	93 35       	cpi	r25, 0x53	; 83
    167c:	09 f0       	breq	.+2      	; 0x1680 <vfprintf+0x14c>
    167e:	56 c0       	rjmp	.+172    	; 0x172c <vfprintf+0x1f8>
    1680:	20 c0       	rjmp	.+64     	; 0x16c2 <vfprintf+0x18e>
    1682:	f5 01       	movw	r30, r10
    1684:	80 81       	ld	r24, Z
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	42 e0       	ldi	r20, 0x02	; 2
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	a4 0e       	add	r10, r20
    168e:	b5 1e       	adc	r11, r21
    1690:	61 01       	movw	r12, r2
    1692:	01 e0       	ldi	r16, 0x01	; 1
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	12 c0       	rjmp	.+36     	; 0x16bc <vfprintf+0x188>
    1698:	f5 01       	movw	r30, r10
    169a:	c0 80       	ld	r12, Z
    169c:	d1 80       	ldd	r13, Z+1	; 0x01
    169e:	f6 fc       	sbrc	r15, 6
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x174>
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	7f ef       	ldi	r23, 0xFF	; 255
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x178>
    16a8:	69 2d       	mov	r22, r9
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	42 e0       	ldi	r20, 0x02	; 2
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	a4 0e       	add	r10, r20
    16b2:	b5 1e       	adc	r11, r21
    16b4:	c6 01       	movw	r24, r12
    16b6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <strnlen>
    16ba:	8c 01       	movw	r16, r24
    16bc:	5f e7       	ldi	r21, 0x7F	; 127
    16be:	f5 22       	and	r15, r21
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <vfprintf+0x1b6>
    16c2:	f5 01       	movw	r30, r10
    16c4:	c0 80       	ld	r12, Z
    16c6:	d1 80       	ldd	r13, Z+1	; 0x01
    16c8:	f6 fc       	sbrc	r15, 6
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <vfprintf+0x19e>
    16cc:	6f ef       	ldi	r22, 0xFF	; 255
    16ce:	7f ef       	ldi	r23, 0xFF	; 255
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <vfprintf+0x1a2>
    16d2:	69 2d       	mov	r22, r9
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	a4 0e       	add	r10, r20
    16dc:	b5 1e       	adc	r11, r21
    16de:	c6 01       	movw	r24, r12
    16e0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strnlen_P>
    16e4:	8c 01       	movw	r16, r24
    16e6:	50 e8       	ldi	r21, 0x80	; 128
    16e8:	f5 2a       	or	r15, r21
    16ea:	f3 fe       	sbrs	r15, 3
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <vfprintf+0x1c8>
    16ee:	1a c0       	rjmp	.+52     	; 0x1724 <vfprintf+0x1f0>
    16f0:	80 e2       	ldi	r24, 0x20	; 32
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	b3 01       	movw	r22, r6
    16f6:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    16fa:	ea 94       	dec	r14
    16fc:	8e 2d       	mov	r24, r14
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	08 17       	cp	r16, r24
    1702:	19 07       	cpc	r17, r25
    1704:	a8 f3       	brcs	.-22     	; 0x16f0 <vfprintf+0x1bc>
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <vfprintf+0x1f0>
    1708:	f6 01       	movw	r30, r12
    170a:	f7 fc       	sbrc	r15, 7
    170c:	85 91       	lpm	r24, Z+
    170e:	f7 fe       	sbrs	r15, 7
    1710:	81 91       	ld	r24, Z+
    1712:	6f 01       	movw	r12, r30
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	b3 01       	movw	r22, r6
    1718:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    171c:	e1 10       	cpse	r14, r1
    171e:	ea 94       	dec	r14
    1720:	01 50       	subi	r16, 0x01	; 1
    1722:	10 40       	sbci	r17, 0x00	; 0
    1724:	01 15       	cp	r16, r1
    1726:	11 05       	cpc	r17, r1
    1728:	79 f7       	brne	.-34     	; 0x1708 <vfprintf+0x1d4>
    172a:	ea c0       	rjmp	.+468    	; 0x1900 <vfprintf+0x3cc>
    172c:	94 36       	cpi	r25, 0x64	; 100
    172e:	11 f0       	breq	.+4      	; 0x1734 <vfprintf+0x200>
    1730:	99 36       	cpi	r25, 0x69	; 105
    1732:	69 f5       	brne	.+90     	; 0x178e <vfprintf+0x25a>
    1734:	f7 fe       	sbrs	r15, 7
    1736:	08 c0       	rjmp	.+16     	; 0x1748 <vfprintf+0x214>
    1738:	f5 01       	movw	r30, r10
    173a:	20 81       	ld	r18, Z
    173c:	31 81       	ldd	r19, Z+1	; 0x01
    173e:	42 81       	ldd	r20, Z+2	; 0x02
    1740:	53 81       	ldd	r21, Z+3	; 0x03
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0a c0       	rjmp	.+20     	; 0x175c <vfprintf+0x228>
    1748:	f5 01       	movw	r30, r10
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	9c 01       	movw	r18, r24
    1750:	44 27       	eor	r20, r20
    1752:	37 fd       	sbrc	r19, 7
    1754:	40 95       	com	r20
    1756:	54 2f       	mov	r21, r20
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a8 0e       	add	r10, r24
    175e:	b9 1e       	adc	r11, r25
    1760:	9f e6       	ldi	r25, 0x6F	; 111
    1762:	f9 22       	and	r15, r25
    1764:	57 ff       	sbrs	r21, 7
    1766:	09 c0       	rjmp	.+18     	; 0x177a <vfprintf+0x246>
    1768:	50 95       	com	r21
    176a:	40 95       	com	r20
    176c:	30 95       	com	r19
    176e:	21 95       	neg	r18
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	4f 4f       	sbci	r20, 0xFF	; 255
    1774:	5f 4f       	sbci	r21, 0xFF	; 255
    1776:	e0 e8       	ldi	r30, 0x80	; 128
    1778:	fe 2a       	or	r15, r30
    177a:	ca 01       	movw	r24, r20
    177c:	b9 01       	movw	r22, r18
    177e:	a1 01       	movw	r20, r2
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__ultoa_invert>
    1788:	d8 2e       	mov	r13, r24
    178a:	d2 18       	sub	r13, r2
    178c:	40 c0       	rjmp	.+128    	; 0x180e <vfprintf+0x2da>
    178e:	95 37       	cpi	r25, 0x75	; 117
    1790:	29 f4       	brne	.+10     	; 0x179c <vfprintf+0x268>
    1792:	1f 2d       	mov	r17, r15
    1794:	1f 7e       	andi	r17, 0xEF	; 239
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	1d c0       	rjmp	.+58     	; 0x17d6 <vfprintf+0x2a2>
    179c:	1f 2d       	mov	r17, r15
    179e:	19 7f       	andi	r17, 0xF9	; 249
    17a0:	9f 36       	cpi	r25, 0x6F	; 111
    17a2:	61 f0       	breq	.+24     	; 0x17bc <vfprintf+0x288>
    17a4:	90 37       	cpi	r25, 0x70	; 112
    17a6:	20 f4       	brcc	.+8      	; 0x17b0 <vfprintf+0x27c>
    17a8:	98 35       	cpi	r25, 0x58	; 88
    17aa:	09 f0       	breq	.+2      	; 0x17ae <vfprintf+0x27a>
    17ac:	ac c0       	rjmp	.+344    	; 0x1906 <vfprintf+0x3d2>
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <vfprintf+0x29a>
    17b0:	90 37       	cpi	r25, 0x70	; 112
    17b2:	39 f0       	breq	.+14     	; 0x17c2 <vfprintf+0x28e>
    17b4:	98 37       	cpi	r25, 0x78	; 120
    17b6:	09 f0       	breq	.+2      	; 0x17ba <vfprintf+0x286>
    17b8:	a6 c0       	rjmp	.+332    	; 0x1906 <vfprintf+0x3d2>
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <vfprintf+0x290>
    17bc:	28 e0       	ldi	r18, 0x08	; 8
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	0a c0       	rjmp	.+20     	; 0x17d6 <vfprintf+0x2a2>
    17c2:	10 61       	ori	r17, 0x10	; 16
    17c4:	14 fd       	sbrc	r17, 4
    17c6:	14 60       	ori	r17, 0x04	; 4
    17c8:	20 e1       	ldi	r18, 0x10	; 16
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <vfprintf+0x2a2>
    17ce:	14 fd       	sbrc	r17, 4
    17d0:	16 60       	ori	r17, 0x06	; 6
    17d2:	20 e1       	ldi	r18, 0x10	; 16
    17d4:	32 e0       	ldi	r19, 0x02	; 2
    17d6:	17 ff       	sbrs	r17, 7
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <vfprintf+0x2b6>
    17da:	f5 01       	movw	r30, r10
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	44 e0       	ldi	r20, 0x04	; 4
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <vfprintf+0x2c6>
    17ea:	f5 01       	movw	r30, r10
    17ec:	80 81       	ld	r24, Z
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	bc 01       	movw	r22, r24
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	42 e0       	ldi	r20, 0x02	; 2
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	a4 0e       	add	r10, r20
    17fc:	b5 1e       	adc	r11, r21
    17fe:	a1 01       	movw	r20, r2
    1800:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__ultoa_invert>
    1804:	d8 2e       	mov	r13, r24
    1806:	d2 18       	sub	r13, r2
    1808:	8f e7       	ldi	r24, 0x7F	; 127
    180a:	f8 2e       	mov	r15, r24
    180c:	f1 22       	and	r15, r17
    180e:	f6 fe       	sbrs	r15, 6
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <vfprintf+0x2f4>
    1812:	5e ef       	ldi	r21, 0xFE	; 254
    1814:	f5 22       	and	r15, r21
    1816:	d9 14       	cp	r13, r9
    1818:	38 f4       	brcc	.+14     	; 0x1828 <vfprintf+0x2f4>
    181a:	f4 fe       	sbrs	r15, 4
    181c:	07 c0       	rjmp	.+14     	; 0x182c <vfprintf+0x2f8>
    181e:	f2 fc       	sbrc	r15, 2
    1820:	05 c0       	rjmp	.+10     	; 0x182c <vfprintf+0x2f8>
    1822:	8f ee       	ldi	r24, 0xEF	; 239
    1824:	f8 22       	and	r15, r24
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x2f8>
    1828:	1d 2d       	mov	r17, r13
    182a:	01 c0       	rjmp	.+2      	; 0x182e <vfprintf+0x2fa>
    182c:	19 2d       	mov	r17, r9
    182e:	f4 fe       	sbrs	r15, 4
    1830:	0d c0       	rjmp	.+26     	; 0x184c <vfprintf+0x318>
    1832:	fe 01       	movw	r30, r28
    1834:	ed 0d       	add	r30, r13
    1836:	f1 1d       	adc	r31, r1
    1838:	80 81       	ld	r24, Z
    183a:	80 33       	cpi	r24, 0x30	; 48
    183c:	19 f4       	brne	.+6      	; 0x1844 <vfprintf+0x310>
    183e:	99 ee       	ldi	r25, 0xE9	; 233
    1840:	f9 22       	and	r15, r25
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <vfprintf+0x320>
    1844:	1f 5f       	subi	r17, 0xFF	; 255
    1846:	f2 fe       	sbrs	r15, 2
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <vfprintf+0x320>
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <vfprintf+0x31e>
    184c:	8f 2d       	mov	r24, r15
    184e:	86 78       	andi	r24, 0x86	; 134
    1850:	09 f0       	breq	.+2      	; 0x1854 <vfprintf+0x320>
    1852:	1f 5f       	subi	r17, 0xFF	; 255
    1854:	0f 2d       	mov	r16, r15
    1856:	f3 fc       	sbrc	r15, 3
    1858:	14 c0       	rjmp	.+40     	; 0x1882 <vfprintf+0x34e>
    185a:	f0 fe       	sbrs	r15, 0
    185c:	0f c0       	rjmp	.+30     	; 0x187c <vfprintf+0x348>
    185e:	1e 15       	cp	r17, r14
    1860:	10 f0       	brcs	.+4      	; 0x1866 <vfprintf+0x332>
    1862:	9d 2c       	mov	r9, r13
    1864:	0b c0       	rjmp	.+22     	; 0x187c <vfprintf+0x348>
    1866:	9d 2c       	mov	r9, r13
    1868:	9e 0c       	add	r9, r14
    186a:	91 1a       	sub	r9, r17
    186c:	1e 2d       	mov	r17, r14
    186e:	06 c0       	rjmp	.+12     	; 0x187c <vfprintf+0x348>
    1870:	80 e2       	ldi	r24, 0x20	; 32
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	b3 01       	movw	r22, r6
    1876:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    187a:	1f 5f       	subi	r17, 0xFF	; 255
    187c:	1e 15       	cp	r17, r14
    187e:	c0 f3       	brcs	.-16     	; 0x1870 <vfprintf+0x33c>
    1880:	04 c0       	rjmp	.+8      	; 0x188a <vfprintf+0x356>
    1882:	1e 15       	cp	r17, r14
    1884:	10 f4       	brcc	.+4      	; 0x188a <vfprintf+0x356>
    1886:	e1 1a       	sub	r14, r17
    1888:	01 c0       	rjmp	.+2      	; 0x188c <vfprintf+0x358>
    188a:	ee 24       	eor	r14, r14
    188c:	04 ff       	sbrs	r16, 4
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <vfprintf+0x37a>
    1890:	80 e3       	ldi	r24, 0x30	; 48
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	b3 01       	movw	r22, r6
    1896:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    189a:	02 ff       	sbrs	r16, 2
    189c:	1d c0       	rjmp	.+58     	; 0x18d8 <vfprintf+0x3a4>
    189e:	01 fd       	sbrc	r16, 1
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <vfprintf+0x374>
    18a2:	88 e7       	ldi	r24, 0x78	; 120
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e c0       	rjmp	.+28     	; 0x18c4 <vfprintf+0x390>
    18a8:	88 e5       	ldi	r24, 0x58	; 88
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0b c0       	rjmp	.+22     	; 0x18c4 <vfprintf+0x390>
    18ae:	80 2f       	mov	r24, r16
    18b0:	86 78       	andi	r24, 0x86	; 134
    18b2:	91 f0       	breq	.+36     	; 0x18d8 <vfprintf+0x3a4>
    18b4:	01 ff       	sbrs	r16, 1
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x388>
    18b8:	8b e2       	ldi	r24, 0x2B	; 43
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <vfprintf+0x38a>
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	f7 fc       	sbrc	r15, 7
    18c0:	8d e2       	ldi	r24, 0x2D	; 45
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	b3 01       	movw	r22, r6
    18c6:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <vfprintf+0x3a4>
    18cc:	80 e3       	ldi	r24, 0x30	; 48
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	b3 01       	movw	r22, r6
    18d2:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18d6:	9a 94       	dec	r9
    18d8:	d9 14       	cp	r13, r9
    18da:	c0 f3       	brcs	.-16     	; 0x18cc <vfprintf+0x398>
    18dc:	da 94       	dec	r13
    18de:	f1 01       	movw	r30, r2
    18e0:	ed 0d       	add	r30, r13
    18e2:	f1 1d       	adc	r31, r1
    18e4:	80 81       	ld	r24, Z
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	b3 01       	movw	r22, r6
    18ea:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18ee:	dd 20       	and	r13, r13
    18f0:	a9 f7       	brne	.-22     	; 0x18dc <vfprintf+0x3a8>
    18f2:	06 c0       	rjmp	.+12     	; 0x1900 <vfprintf+0x3cc>
    18f4:	80 e2       	ldi	r24, 0x20	; 32
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	b3 01       	movw	r22, r6
    18fa:	0e 94 b6 0c 	call	0x196c	; 0x196c <fputc>
    18fe:	ea 94       	dec	r14
    1900:	ee 20       	and	r14, r14
    1902:	c1 f7       	brne	.-16     	; 0x18f4 <vfprintf+0x3c0>
    1904:	43 ce       	rjmp	.-890    	; 0x158c <vfprintf+0x58>
    1906:	f3 01       	movw	r30, r6
    1908:	66 81       	ldd	r22, Z+6	; 0x06
    190a:	77 81       	ldd	r23, Z+7	; 0x07
    190c:	cb 01       	movw	r24, r22
    190e:	2b 96       	adiw	r28, 0x0b	; 11
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
    192c:	af 90       	pop	r10
    192e:	9f 90       	pop	r9
    1930:	8f 90       	pop	r8
    1932:	7f 90       	pop	r7
    1934:	6f 90       	pop	r6
    1936:	5f 90       	pop	r5
    1938:	4f 90       	pop	r4
    193a:	3f 90       	pop	r3
    193c:	2f 90       	pop	r2
    193e:	08 95       	ret

00001940 <strnlen_P>:
    1940:	fc 01       	movw	r30, r24
    1942:	05 90       	lpm	r0, Z+
    1944:	61 50       	subi	r22, 0x01	; 1
    1946:	70 40       	sbci	r23, 0x00	; 0
    1948:	01 10       	cpse	r0, r1
    194a:	d8 f7       	brcc	.-10     	; 0x1942 <strnlen_P+0x2>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	8e 0f       	add	r24, r30
    1952:	9f 1f       	adc	r25, r31
    1954:	08 95       	ret

00001956 <strnlen>:
    1956:	fc 01       	movw	r30, r24
    1958:	61 50       	subi	r22, 0x01	; 1
    195a:	70 40       	sbci	r23, 0x00	; 0
    195c:	01 90       	ld	r0, Z+
    195e:	01 10       	cpse	r0, r1
    1960:	d8 f7       	brcc	.-10     	; 0x1958 <strnlen+0x2>
    1962:	80 95       	com	r24
    1964:	90 95       	com	r25
    1966:	8e 0f       	add	r24, r30
    1968:	9f 1f       	adc	r25, r31
    196a:	08 95       	ret

0000196c <fputc>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	8c 01       	movw	r16, r24
    1976:	eb 01       	movw	r28, r22
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 ff       	sbrs	r24, 1
    197c:	1b c0       	rjmp	.+54     	; 0x19b4 <fputc+0x48>
    197e:	82 ff       	sbrs	r24, 2
    1980:	0d c0       	rjmp	.+26     	; 0x199c <fputc+0x30>
    1982:	2e 81       	ldd	r18, Y+6	; 0x06
    1984:	3f 81       	ldd	r19, Y+7	; 0x07
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	28 17       	cp	r18, r24
    198c:	39 07       	cpc	r19, r25
    198e:	64 f4       	brge	.+24     	; 0x19a8 <fputc+0x3c>
    1990:	e8 81       	ld	r30, Y
    1992:	f9 81       	ldd	r31, Y+1	; 0x01
    1994:	01 93       	st	Z+, r16
    1996:	f9 83       	std	Y+1, r31	; 0x01
    1998:	e8 83       	st	Y, r30
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <fputc+0x3c>
    199c:	e8 85       	ldd	r30, Y+8	; 0x08
    199e:	f9 85       	ldd	r31, Y+9	; 0x09
    19a0:	80 2f       	mov	r24, r16
    19a2:	09 95       	icall
    19a4:	89 2b       	or	r24, r25
    19a6:	31 f4       	brne	.+12     	; 0x19b4 <fputc+0x48>
    19a8:	8e 81       	ldd	r24, Y+6	; 0x06
    19aa:	9f 81       	ldd	r25, Y+7	; 0x07
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	9f 83       	std	Y+7, r25	; 0x07
    19b0:	8e 83       	std	Y+6, r24	; 0x06
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <fputc+0x4c>
    19b4:	0f ef       	ldi	r16, 0xFF	; 255
    19b6:	1f ef       	ldi	r17, 0xFF	; 255
    19b8:	c8 01       	movw	r24, r16
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <__ultoa_invert>:
    19c4:	fa 01       	movw	r30, r20
    19c6:	aa 27       	eor	r26, r26
    19c8:	28 30       	cpi	r18, 0x08	; 8
    19ca:	51 f1       	breq	.+84     	; 0x1a20 <__ultoa_invert+0x5c>
    19cc:	20 31       	cpi	r18, 0x10	; 16
    19ce:	81 f1       	breq	.+96     	; 0x1a30 <__ultoa_invert+0x6c>
    19d0:	e8 94       	clt
    19d2:	6f 93       	push	r22
    19d4:	6e 7f       	andi	r22, 0xFE	; 254
    19d6:	6e 5f       	subi	r22, 0xFE	; 254
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f 4f       	sbci	r24, 0xFF	; 255
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	af 4f       	sbci	r26, 0xFF	; 255
    19e0:	b1 e0       	ldi	r27, 0x01	; 1
    19e2:	3e d0       	rcall	.+124    	; 0x1a60 <__ultoa_invert+0x9c>
    19e4:	b4 e0       	ldi	r27, 0x04	; 4
    19e6:	3c d0       	rcall	.+120    	; 0x1a60 <__ultoa_invert+0x9c>
    19e8:	67 0f       	add	r22, r23
    19ea:	78 1f       	adc	r23, r24
    19ec:	89 1f       	adc	r24, r25
    19ee:	9a 1f       	adc	r25, r26
    19f0:	a1 1d       	adc	r26, r1
    19f2:	68 0f       	add	r22, r24
    19f4:	79 1f       	adc	r23, r25
    19f6:	8a 1f       	adc	r24, r26
    19f8:	91 1d       	adc	r25, r1
    19fa:	a1 1d       	adc	r26, r1
    19fc:	6a 0f       	add	r22, r26
    19fe:	71 1d       	adc	r23, r1
    1a00:	81 1d       	adc	r24, r1
    1a02:	91 1d       	adc	r25, r1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	20 d0       	rcall	.+64     	; 0x1a48 <__ultoa_invert+0x84>
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <__ultoa_invert+0x48>
    1a0a:	68 94       	set
    1a0c:	3f 91       	pop	r19
    1a0e:	2a e0       	ldi	r18, 0x0A	; 10
    1a10:	26 9f       	mul	r18, r22
    1a12:	11 24       	eor	r1, r1
    1a14:	30 19       	sub	r19, r0
    1a16:	30 5d       	subi	r19, 0xD0	; 208
    1a18:	31 93       	st	Z+, r19
    1a1a:	de f6       	brtc	.-74     	; 0x19d2 <__ultoa_invert+0xe>
    1a1c:	cf 01       	movw	r24, r30
    1a1e:	08 95       	ret
    1a20:	46 2f       	mov	r20, r22
    1a22:	47 70       	andi	r20, 0x07	; 7
    1a24:	40 5d       	subi	r20, 0xD0	; 208
    1a26:	41 93       	st	Z+, r20
    1a28:	b3 e0       	ldi	r27, 0x03	; 3
    1a2a:	0f d0       	rcall	.+30     	; 0x1a4a <__ultoa_invert+0x86>
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__ultoa_invert+0x5c>
    1a2e:	f6 cf       	rjmp	.-20     	; 0x1a1c <__ultoa_invert+0x58>
    1a30:	46 2f       	mov	r20, r22
    1a32:	4f 70       	andi	r20, 0x0F	; 15
    1a34:	40 5d       	subi	r20, 0xD0	; 208
    1a36:	4a 33       	cpi	r20, 0x3A	; 58
    1a38:	18 f0       	brcs	.+6      	; 0x1a40 <__ultoa_invert+0x7c>
    1a3a:	49 5d       	subi	r20, 0xD9	; 217
    1a3c:	31 fd       	sbrc	r19, 1
    1a3e:	40 52       	subi	r20, 0x20	; 32
    1a40:	41 93       	st	Z+, r20
    1a42:	02 d0       	rcall	.+4      	; 0x1a48 <__ultoa_invert+0x84>
    1a44:	a9 f7       	brne	.-22     	; 0x1a30 <__ultoa_invert+0x6c>
    1a46:	ea cf       	rjmp	.-44     	; 0x1a1c <__ultoa_invert+0x58>
    1a48:	b4 e0       	ldi	r27, 0x04	; 4
    1a4a:	a6 95       	lsr	r26
    1a4c:	97 95       	ror	r25
    1a4e:	87 95       	ror	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	ba 95       	dec	r27
    1a56:	c9 f7       	brne	.-14     	; 0x1a4a <__ultoa_invert+0x86>
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	08 95       	ret
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	0a 2e       	mov	r0, r26
    1a66:	06 94       	lsr	r0
    1a68:	57 95       	ror	r21
    1a6a:	47 95       	ror	r20
    1a6c:	37 95       	ror	r19
    1a6e:	27 95       	ror	r18
    1a70:	ba 95       	dec	r27
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__ultoa_invert+0xa2>
    1a74:	62 0f       	add	r22, r18
    1a76:	73 1f       	adc	r23, r19
    1a78:	84 1f       	adc	r24, r20
    1a7a:	95 1f       	adc	r25, r21
    1a7c:	a0 1d       	adc	r26, r0
    1a7e:	08 95       	ret

00001a80 <_exit>:
    1a80:	f8 94       	cli

00001a82 <__stop_program>:
    1a82:	ff cf       	rjmp	.-2      	; 0x1a82 <__stop_program>
