
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000020f4  00002188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004bb  0080015a  0080015a  000021e2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000021e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000042a  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001407  00000000  00000000  00002672  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046c  00000000  00000000  00003a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000111f  00000000  00000000  00003ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00005004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000516  00000000  00000000  00005294  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ac3  00000000  00000000  000057aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000626d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	e4 ef       	ldi	r30, 0xF4	; 244
     4ec:	f0 e2       	ldi	r31, 0x20	; 32
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	aa 35       	cpi	r26, 0x5A	; 90
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	16 e0       	ldi	r17, 0x06	; 6
     500:	aa e5       	ldi	r26, 0x5A	; 90
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a5 31       	cpi	r26, 0x15	; 21
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <main>
     512:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
volatile unsigned char time_elapsed_HS;

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 fb 05 	lds	r24, 0x05FB
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 c9 05 	lds	r24, 0x05C9
     544:	90 91 ca 05 	lds	r25, 0x05CA
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 ca 05 	sts	0x05CA, r25
     54e:	80 93 c9 05 	sts	0x05C9, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 c9 05 	lds	r24, 0x05C9
     556:	90 91 ca 05 	lds	r25, 0x05CA
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 fb 05 	sts	0x05FB, r24
    	syncOFF = 0;
     566:	10 92 14 06 	sts	0x0614, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 c9 05 	lds	r24, 0x05C9
     56e:	90 91 ca 05 	lds	r25, 0x05CA
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 fb 05 	sts	0x05FB, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 14 06 	sts	0x0614, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 c9 05 	lds	r24, 0x05C9
     586:	90 91 ca 05 	lds	r25, 0x05CA
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 ca 05 	sts	0x05CA, r25
     598:	80 93 c9 05 	sts	0x05C9, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 14 06 	lds	r24, 0x0614
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 c9 05 	lds	r24, 0x05C9
     5ac:	90 91 ca 05 	lds	r25, 0x05CA
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 c9 05 	lds	r24, 0x05C9
     5ba:	90 91 ca 05 	lds	r25, 0x05CA
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 c9 05 	lds	r24, 0x05C9
     5c6:	90 91 ca 05 	lds	r25, 0x05CA
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(8);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	e0 58       	subi	r30, 0x80	; 128
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	ee 57       	subi	r30, 0x7E	; 126
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 6 ; 
     68c:	86 e8       	ldi	r24, 0x86	; 134
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	//ADMUX = 0;
	//ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
	ADCSRA |= (1<<ADSC);
     69c:	ea e7       	ldi	r30, 0x7A	; 122
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	80 83       	st	Z, r24
end
     6a6:	08 95       	ret

000006a8 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     6ac:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     6b0:	10 92 7a 00 	sts	0x007A, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     6b4:	80 e6       	ldi	r24, 0x60	; 96
     6b6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) + 6 ; 
     6ba:	86 e8       	ldi	r24, 0x86	; 134
     6bc:	80 93 7a 00 	sts	0x007A, r24
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     6c0:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     6c2:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     6ce:	80 ec       	ldi	r24, 0xC0	; 192
     6d0:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     6d4:	01 e0       	ldi	r16, 0x01	; 1
     6d6:	10 e0       	ldi	r17, 0x00	; 0
     6d8:	10 93 c5 00 	sts	0x00C5, r17
     6dc:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	//LCD_init();
	port_init();
	USART_init();
	timer1_init();
     6e0:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     6e4:	10 93 ca 05 	sts	0x05CA, r17
     6e8:	00 93 c9 05 	sts	0x05C9, r16

	syncON = 0b00000000;
     6ec:	10 92 fb 05 	sts	0x05FB, r1
	syncOFF = 0b00000001;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 14 06 	sts	0x0614, r24
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++)
	begin
		is_on_screen[n] = 0;
     6fa:	fc 01       	movw	r30, r24
     6fc:	ec 58       	subi	r30, 0x8C	; 140
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	10 82       	st	Z, r1
		age[n] = 0;
     702:	fc 01       	movw	r30, r24
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	e6 5a       	subi	r30, 0xA6	; 166
     70a:	fe 4f       	sbci	r31, 0xFE	; 254
     70c:	11 82       	std	Z+1, r1	; 0x01
     70e:	10 82       	st	Z, r1
		hit_count[n] = 0;
     710:	fc 01       	movw	r30, r24
     712:	ed 56       	subi	r30, 0x6D	; 109
     714:	fa 4f       	sbci	r31, 0xFA	; 250
     716:	10 82       	st	Z, r1

	syncON = 0b00000000;
	syncOFF = 0b00000001;

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++)
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	8c 30       	cpi	r24, 0x0C	; 12
     71c:	91 05       	cpc	r25, r1
     71e:	69 f7       	brne	.-38     	; 0x6fa <initialize+0x52>
     720:	e0 e8       	ldi	r30, 0x80	; 128
     722:	f1 e0       	ldi	r31, 0x01	; 1
		is_on_screen[n] = 0;
		age[n] = 0;
		hit_count[n] = 0;
	end

	for(int y=0; y<screen_array_size;y++) screen[y] = 0;
     724:	11 92       	st	Z+, r1
     726:	85 e0       	ldi	r24, 0x05	; 5
     728:	e0 38       	cpi	r30, 0x80	; 128
     72a:	f8 07       	cpc	r31, r24
     72c:	d9 f7       	brne	.-10     	; 0x724 <initialize+0x7c>
	time_elapsed_HS = 0;
     72e:	10 92 92 05 	sts	0x0592, r1
	score = 0;
     732:	10 92 91 05 	sts	0x0591, r1

	// Set up single video line timing
	sei();
     736:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     738:	83 b7       	in	r24, 0x33	; 51
     73a:	81 7f       	andi	r24, 0xF1	; 241
     73c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     73e:	83 b7       	in	r24, 0x33	; 51
     740:	81 60       	ori	r24, 0x01	; 1
     742:	83 bf       	out	0x33, r24	; 51

end
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	08 95       	ret

0000074a <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     74a:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	54 e0       	ldi	r21, 0x04	; 4
     750:	66 0f       	add	r22, r22
     752:	77 1f       	adc	r23, r23
     754:	5a 95       	dec	r21
     756:	e1 f7       	brne	.-8      	; 0x750 <video_pt+0x6>
     758:	86 95       	lsr	r24
     75a:	86 95       	lsr	r24
     75c:	86 95       	lsr	r24
     75e:	68 0f       	add	r22, r24
     760:	71 1d       	adc	r23, r1

	if (c==1)
     762:	41 30       	cpi	r20, 0x01	; 1
     764:	69 f4       	brne	.+26     	; 0x780 <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     766:	db 01       	movw	r26, r22
     768:	a0 58       	subi	r26, 0x80	; 128
     76a:	be 4f       	sbci	r27, 0xFE	; 254
     76c:	e9 2f       	mov	r30, r25
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	e7 70       	andi	r30, 0x07	; 7
     772:	f0 70       	andi	r31, 0x00	; 0
     774:	ef 5a       	subi	r30, 0xAF	; 175
     776:	fe 4f       	sbci	r31, 0xFE	; 254
     778:	8c 91       	ld	r24, X
     77a:	90 81       	ld	r25, Z
     77c:	89 2b       	or	r24, r25
     77e:	17 c0       	rjmp	.+46     	; 0x7ae <video_pt+0x64>
     780:	db 01       	movw	r26, r22
     782:	a0 58       	subi	r26, 0x80	; 128
     784:	be 4f       	sbci	r27, 0xFE	; 254
     786:	e9 2f       	mov	r30, r25
     788:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     78a:	44 23       	and	r20, r20
     78c:	49 f4       	brne	.+18     	; 0x7a0 <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     78e:	e7 70       	andi	r30, 0x07	; 7
     790:	f0 70       	andi	r31, 0x00	; 0
     792:	ef 5a       	subi	r30, 0xAF	; 175
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	90 81       	ld	r25, Z
     798:	90 95       	com	r25
     79a:	8c 91       	ld	r24, X
     79c:	89 23       	and	r24, r25
     79e:	07 c0       	rjmp	.+14     	; 0x7ae <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     7a0:	e7 70       	andi	r30, 0x07	; 7
     7a2:	f0 70       	andi	r31, 0x00	; 0
     7a4:	ef 5a       	subi	r30, 0xAF	; 175
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	8c 91       	ld	r24, X
     7aa:	90 81       	ld	r25, Z
     7ac:	89 27       	eor	r24, r25
     7ae:	8c 93       	st	X, r24
     7b0:	08 95       	ret

000007b2 <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     7b2:	2f 92       	push	r2
     7b4:	3f 92       	push	r3
     7b6:	4f 92       	push	r4
     7b8:	5f 92       	push	r5
     7ba:	6f 92       	push	r6
     7bc:	7f 92       	push	r7
     7be:	8f 92       	push	r8
     7c0:	9f 92       	push	r9
     7c2:	af 92       	push	r10
     7c4:	bf 92       	push	r11
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <video_line+0x26>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <video_line+0x28>
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     7e0:	c8 2e       	mov	r12, r24
     7e2:	dd 24       	eor	r13, r13
	y = y1;
     7e4:	e6 2e       	mov	r14, r22
     7e6:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     7e8:	48 17       	cp	r20, r24
     7ea:	38 f4       	brcc	.+14     	; 0x7fa <video_line+0x48>
		dx = x1 - x2;
     7ec:	c6 01       	movw	r24, r12
     7ee:	84 1b       	sub	r24, r20
     7f0:	91 09       	sbc	r25, r1
     7f2:	9c 83       	std	Y+4, r25	; 0x04
     7f4:	8b 83       	std	Y+3, r24	; 0x03
     7f6:	7f ef       	ldi	r23, 0xFF	; 255
     7f8:	0d c0       	rjmp	.+26     	; 0x814 <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     7fa:	48 17       	cp	r20, r24
     7fc:	21 f4       	brne	.+8      	; 0x806 <video_line+0x54>
     7fe:	1c 82       	std	Y+4, r1	; 0x04
     800:	1b 82       	std	Y+3, r1	; 0x03
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	07 c0       	rjmp	.+14     	; 0x814 <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     806:	e4 2f       	mov	r30, r20
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	ec 19       	sub	r30, r12
     80c:	fd 09       	sbc	r31, r13
     80e:	fc 83       	std	Y+4, r31	; 0x04
     810:	eb 83       	std	Y+3, r30	; 0x03
     812:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     814:	26 17       	cp	r18, r22
     816:	28 f4       	brcc	.+10     	; 0x822 <video_line+0x70>
		dy = y1 - y2;
     818:	a7 01       	movw	r20, r14
     81a:	42 1b       	sub	r20, r18
     81c:	51 09       	sbc	r21, r1
     81e:	6f ef       	ldi	r22, 0xFF	; 255
     820:	0b c0       	rjmp	.+22     	; 0x838 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     822:	26 17       	cp	r18, r22
     824:	21 f4       	brne	.+8      	; 0x82e <video_line+0x7c>
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	05 c0       	rjmp	.+10     	; 0x838 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     82e:	42 2f       	mov	r20, r18
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	4e 19       	sub	r20, r14
     834:	5f 09       	sbc	r21, r15
     836:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     838:	8b 81       	ldd	r24, Y+3	; 0x03
     83a:	9c 81       	ldd	r25, Y+4	; 0x04
     83c:	84 17       	cp	r24, r20
     83e:	95 07       	cpc	r25, r21
     840:	44 f4       	brge	.+16     	; 0x852 <video_line+0xa0>
     842:	ca 01       	movw	r24, r20
     844:	4b 81       	ldd	r20, Y+3	; 0x03
     846:	5c 81       	ldd	r21, Y+4	; 0x04
     848:	9c 83       	std	Y+4, r25	; 0x04
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	99 83       	std	Y+1, r25	; 0x01
     850:	01 c0       	rjmp	.+2      	; 0x854 <video_line+0xa2>
     852:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     854:	2a 01       	movw	r4, r20
     856:	44 0c       	add	r4, r4
     858:	55 1c       	adc	r5, r5
     85a:	82 01       	movw	r16, r4
     85c:	eb 81       	ldd	r30, Y+3	; 0x03
     85e:	fc 81       	ldd	r31, Y+4	; 0x04
     860:	0e 1b       	sub	r16, r30
     862:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     864:	1f 01       	movw	r2, r30
     866:	22 0c       	add	r2, r2
     868:	33 1c       	adc	r3, r3
     86a:	aa 24       	eor	r10, r10
     86c:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     86e:	66 2e       	mov	r6, r22
     870:	77 24       	eor	r7, r7
     872:	67 fc       	sbrc	r6, 7
     874:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     876:	87 2e       	mov	r8, r23
     878:	99 24       	eor	r9, r9
     87a:	87 fc       	sbrc	r8, 7
     87c:	90 94       	com	r9
     87e:	1e c0       	rjmp	.+60     	; 0x8bc <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     880:	8c 2d       	mov	r24, r12
     882:	6e 2d       	mov	r22, r14
     884:	4a 81       	ldd	r20, Y+2	; 0x02
     886:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
		 
		if (e>=0) {
     88a:	17 fd       	sbrc	r17, 7
     88c:	0a c0       	rjmp	.+20     	; 0x8a2 <video_line+0xf0>
			if (xchange==1) x = x + s1;
     88e:	f9 81       	ldd	r31, Y+1	; 0x01
     890:	f1 30       	cpi	r31, 0x01	; 1
     892:	19 f4       	brne	.+6      	; 0x89a <video_line+0xe8>
     894:	c8 0c       	add	r12, r8
     896:	d9 1c       	adc	r13, r9
     898:	02 c0       	rjmp	.+4      	; 0x89e <video_line+0xec>
			else y = y + s2;
     89a:	e6 0c       	add	r14, r6
     89c:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     89e:	02 19       	sub	r16, r2
     8a0:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	19 f4       	brne	.+6      	; 0x8ae <video_line+0xfc>
     8a8:	e6 0c       	add	r14, r6
     8aa:	f7 1c       	adc	r15, r7
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <video_line+0x100>
		else x = x + s1;
     8ae:	c8 0c       	add	r12, r8
     8b0:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     8b2:	04 0d       	add	r16, r4
     8b4:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     8b6:	08 94       	sec
     8b8:	a1 1c       	adc	r10, r1
     8ba:	b1 1c       	adc	r11, r1
     8bc:	eb 81       	ldd	r30, Y+3	; 0x03
     8be:	fc 81       	ldd	r31, Y+4	; 0x04
     8c0:	ea 15       	cp	r30, r10
     8c2:	fb 05       	cpc	r31, r11
     8c4:	ec f6       	brge	.-70     	; 0x880 <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	3f 90       	pop	r3
     8f0:	2f 90       	pop	r2
     8f2:	08 95       	ret

000008f4 <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     8f4:	8f 92       	push	r8
     8f6:	9f 92       	push	r9
     8f8:	af 92       	push	r10
     8fa:	bf 92       	push	r11
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	e8 2e       	mov	r14, r24
     90e:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	48 9f       	mul	r20, r24
     914:	a0 01       	movw	r20, r0
     916:	11 24       	eor	r1, r1
     918:	ea 01       	movw	r28, r20
     91a:	c8 5e       	subi	r28, 0xE8	; 232
     91c:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     91e:	8e 2c       	mov	r8, r14
     920:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	97 2e       	mov	r9, r23
     926:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     928:	63 e0       	ldi	r22, 0x03	; 3
     92a:	a6 2e       	mov	r10, r22
     92c:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     92e:	34 e0       	ldi	r19, 0x04	; 4
     930:	b3 2e       	mov	r11, r19
     932:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     934:	2f e1       	ldi	r18, 0x1F	; 31
     936:	c2 2e       	mov	r12, r18
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	d2 2e       	mov	r13, r18
     93c:	c4 0e       	add	r12, r20
     93e:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     940:	fe 01       	movw	r30, r28
     942:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     944:	40 2f       	mov	r20, r16
     946:	44 1f       	adc	r20, r20
     948:	44 27       	eor	r20, r20
     94a:	44 1f       	adc	r20, r20
     94c:	8e 2d       	mov	r24, r14
     94e:	6f 2d       	mov	r22, r15
     950:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	a8 01       	movw	r20, r16
     958:	96 e0       	ldi	r25, 0x06	; 6
     95a:	56 95       	lsr	r21
     95c:	47 95       	ror	r20
     95e:	9a 95       	dec	r25
     960:	e1 f7       	brne	.-8      	; 0x95a <video_putchar+0x66>
     962:	41 70       	andi	r20, 0x01	; 1
     964:	88 2d       	mov	r24, r8
     966:	6f 2d       	mov	r22, r15
     968:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     96c:	a8 01       	movw	r20, r16
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	56 95       	lsr	r21
     972:	47 95       	ror	r20
     974:	8a 95       	dec	r24
     976:	e1 f7       	brne	.-8      	; 0x970 <video_putchar+0x7c>
     978:	41 70       	andi	r20, 0x01	; 1
     97a:	89 2d       	mov	r24, r9
     97c:	6f 2d       	mov	r22, r15
     97e:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     982:	a8 01       	movw	r20, r16
     984:	b4 e0       	ldi	r27, 0x04	; 4
     986:	56 95       	lsr	r21
     988:	47 95       	ror	r20
     98a:	ba 95       	dec	r27
     98c:	e1 f7       	brne	.-8      	; 0x986 <video_putchar+0x92>
     98e:	41 70       	andi	r20, 0x01	; 1
     990:	8a 2d       	mov	r24, r10
     992:	6f 2d       	mov	r22, r15
     994:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     998:	a3 e0       	ldi	r26, 0x03	; 3
     99a:	16 95       	lsr	r17
     99c:	07 95       	ror	r16
     99e:	aa 95       	dec	r26
     9a0:	e1 f7       	brne	.-8      	; 0x99a <video_putchar+0xa6>
     9a2:	01 70       	andi	r16, 0x01	; 1
     9a4:	8b 2d       	mov	r24, r11
     9a6:	6f 2d       	mov	r22, r15
     9a8:	40 2f       	mov	r20, r16
     9aa:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
     9ae:	21 96       	adiw	r28, 0x01	; 1
     9b0:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     9b2:	cc 15       	cp	r28, r12
     9b4:	dd 05       	cpc	r29, r13
     9b6:	21 f6       	brne	.-120    	; 0x940 <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	08 95       	ret

000009d2 <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	08 2f       	mov	r16, r24
     9de:	f6 2e       	mov	r15, r22
     9e0:	ea 01       	movw	r28, r20
     9e2:	10 e0       	ldi	r17, 0x00	; 0
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     9e6:	80 2f       	mov	r24, r16
     9e8:	6f 2d       	mov	r22, r15
     9ea:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <video_putchar>
		x = x+6;	
     9ee:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     9f0:	1f 5f       	subi	r17, 0xFF	; 255
     9f2:	fe 01       	movw	r30, r28
     9f4:	e1 0f       	add	r30, r17
     9f6:	f1 1d       	adc	r31, r1
     9f8:	40 81       	ld	r20, Z
     9fa:	44 23       	and	r20, r20
     9fc:	a1 f7       	brne	.-24     	; 0x9e6 <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	08 95       	ret

00000a0a <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     a0a:	e6 2f       	mov	r30, r22
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	28 2f       	mov	r18, r24
     a10:	26 95       	lsr	r18
     a12:	26 95       	lsr	r18
     a14:	26 95       	lsr	r18
     a16:	a4 e0       	ldi	r26, 0x04	; 4
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	aa 95       	dec	r26
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <video_set+0xe>
     a20:	e2 0f       	add	r30, r18
     a22:	f1 1d       	adc	r31, r1
     a24:	e0 58       	subi	r30, 0x80	; 128
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	80 95       	com	r24
     a2c:	90 95       	com	r25
     a2e:	87 70       	andi	r24, 0x07	; 7
     a30:	90 70       	andi	r25, 0x00	; 0
     a32:	21 e0       	ldi	r18, 0x01	; 1
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <video_set+0x32>
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	8a 95       	dec	r24
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <video_set+0x2e>
     a40:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     a42:	82 23       	and	r24, r18
     a44:	08 95       	ret

00000a46 <remove_ball>:


//////////////////////////////////////////////////////////////////////////////

void remove_ball(int i)
begin
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i]),0);
     a4e:	8c 01       	movw	r16, r24
     a50:	00 0f       	add	r16, r16
     a52:	11 1f       	adc	r17, r17
     a54:	f0 ea       	ldi	r31, 0xA0	; 160
     a56:	ef 2e       	mov	r14, r31
     a58:	f5 e0       	ldi	r31, 0x05	; 5
     a5a:	ff 2e       	mov	r15, r31
     a5c:	e0 0e       	add	r14, r16
     a5e:	f1 1e       	adc	r15, r17
     a60:	f7 01       	movw	r30, r14
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	04 50       	subi	r16, 0x04	; 4
     a68:	1a 4f       	sbci	r17, 0xFA	; 250
     a6a:	f8 01       	movw	r30, r16
     a6c:	60 81       	ld	r22, Z
     a6e:	71 81       	ldd	r23, Z+1	; 0x01
     a70:	89 2f       	mov	r24, r25
     a72:	99 0f       	add	r25, r25
     a74:	99 0b       	sbc	r25, r25
     a76:	67 2f       	mov	r22, r23
     a78:	77 0f       	add	r23, r23
     a7a:	77 0b       	sbc	r23, r23
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i]),0);
     a84:	f7 01       	movw	r30, r14
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	f8 01       	movw	r30, r16
     a8c:	60 81       	ld	r22, Z
     a8e:	71 81       	ldd	r23, Z+1	; 0x01
     a90:	89 2f       	mov	r24, r25
     a92:	99 0f       	add	r25, r25
     a94:	99 0b       	sbc	r25, r25
     a96:	67 2f       	mov	r22, r23
     a98:	77 0f       	add	r23, r23
     a9a:	77 0b       	sbc	r23, r23
     a9c:	8e 5f       	subi	r24, 0xFE	; 254
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+1,0);
     aa4:	f7 01       	movw	r30, r14
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	f8 01       	movw	r30, r16
     aac:	60 81       	ld	r22, Z
     aae:	71 81       	ldd	r23, Z+1	; 0x01
     ab0:	89 2f       	mov	r24, r25
     ab2:	99 0f       	add	r25, r25
     ab4:	99 0b       	sbc	r25, r25
     ab6:	67 2f       	mov	r22, r23
     ab8:	77 0f       	add	r23, r23
     aba:	77 0b       	sbc	r23, r23
     abc:	6f 5f       	subi	r22, 0xFF	; 255
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+2,0);
     ac4:	f7 01       	movw	r30, r14
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	f8 01       	movw	r30, r16
     acc:	60 81       	ld	r22, Z
     ace:	71 81       	ldd	r23, Z+1	; 0x01
     ad0:	89 2f       	mov	r24, r25
     ad2:	99 0f       	add	r25, r25
     ad4:	99 0b       	sbc	r25, r25
     ad6:	67 2f       	mov	r22, r23
     ad8:	77 0f       	add	r23, r23
     ada:	77 0b       	sbc	r23, r23
     adc:	6e 5f       	subi	r22, 0xFE	; 254
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+1,0);
     ae4:	f7 01       	movw	r30, r14
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	f8 01       	movw	r30, r16
     aec:	60 81       	ld	r22, Z
     aee:	71 81       	ldd	r23, Z+1	; 0x01
     af0:	89 2f       	mov	r24, r25
     af2:	99 0f       	add	r25, r25
     af4:	99 0b       	sbc	r25, r25
     af6:	67 2f       	mov	r22, r23
     af8:	77 0f       	add	r23, r23
     afa:	77 0b       	sbc	r23, r23
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	8d 5f       	subi	r24, 0xFD	; 253
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+2,0);
     b06:	f7 01       	movw	r30, r14
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	f8 01       	movw	r30, r16
     b0e:	60 81       	ld	r22, Z
     b10:	71 81       	ldd	r23, Z+1	; 0x01
     b12:	89 2f       	mov	r24, r25
     b14:	99 0f       	add	r25, r25
     b16:	99 0b       	sbc	r25, r25
     b18:	67 2f       	mov	r22, r23
     b1a:	77 0f       	add	r23, r23
     b1c:	77 0b       	sbc	r23, r23
     b1e:	6e 5f       	subi	r22, 0xFE	; 254
     b20:	8d 5f       	subi	r24, 0xFD	; 253
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i])+3,0);
     b28:	f7 01       	movw	r30, r14
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	f8 01       	movw	r30, r16
     b30:	60 81       	ld	r22, Z
     b32:	71 81       	ldd	r23, Z+1	; 0x01
     b34:	89 2f       	mov	r24, r25
     b36:	99 0f       	add	r25, r25
     b38:	99 0b       	sbc	r25, r25
     b3a:	67 2f       	mov	r22, r23
     b3c:	77 0f       	add	r23, r23
     b3e:	77 0b       	sbc	r23, r23
     b40:	6d 5f       	subi	r22, 0xFD	; 253
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i])+3,0);
     b4a:	f7 01       	movw	r30, r14
     b4c:	80 81       	ld	r24, Z
     b4e:	91 81       	ldd	r25, Z+1	; 0x01
     b50:	f8 01       	movw	r30, r16
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
     b56:	89 2f       	mov	r24, r25
     b58:	99 0f       	add	r25, r25
     b5a:	99 0b       	sbc	r25, r25
     b5c:	67 2f       	mov	r22, r23
     b5e:	77 0f       	add	r23, r23
     b60:	77 0b       	sbc	r23, r23
     b62:	6d 5f       	subi	r22, 0xFD	; 253
     b64:	8e 5f       	subi	r24, 0xFE	; 254
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
end
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <place_ball>:

void place_ball(int i)
begin
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i]),1);
     b7e:	8c 01       	movw	r16, r24
     b80:	00 0f       	add	r16, r16
     b82:	11 1f       	adc	r17, r17
     b84:	f0 ea       	ldi	r31, 0xA0	; 160
     b86:	ef 2e       	mov	r14, r31
     b88:	f5 e0       	ldi	r31, 0x05	; 5
     b8a:	ff 2e       	mov	r15, r31
     b8c:	e0 0e       	add	r14, r16
     b8e:	f1 1e       	adc	r15, r17
     b90:	f7 01       	movw	r30, r14
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	04 50       	subi	r16, 0x04	; 4
     b98:	1a 4f       	sbci	r17, 0xFA	; 250
     b9a:	f8 01       	movw	r30, r16
     b9c:	60 81       	ld	r22, Z
     b9e:	71 81       	ldd	r23, Z+1	; 0x01
     ba0:	89 2f       	mov	r24, r25
     ba2:	99 0f       	add	r25, r25
     ba4:	99 0b       	sbc	r25, r25
     ba6:	67 2f       	mov	r22, r23
     ba8:	77 0f       	add	r23, r23
     baa:	77 0b       	sbc	r23, r23
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i]),1);
     bb4:	f7 01       	movw	r30, r14
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	f8 01       	movw	r30, r16
     bbc:	60 81       	ld	r22, Z
     bbe:	71 81       	ldd	r23, Z+1	; 0x01
     bc0:	89 2f       	mov	r24, r25
     bc2:	99 0f       	add	r25, r25
     bc4:	99 0b       	sbc	r25, r25
     bc6:	67 2f       	mov	r22, r23
     bc8:	77 0f       	add	r23, r23
     bca:	77 0b       	sbc	r23, r23
     bcc:	8e 5f       	subi	r24, 0xFE	; 254
     bce:	41 e0       	ldi	r20, 0x01	; 1
     bd0:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+1,1);
     bd4:	f7 01       	movw	r30, r14
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	f8 01       	movw	r30, r16
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	89 2f       	mov	r24, r25
     be2:	99 0f       	add	r25, r25
     be4:	99 0b       	sbc	r25, r25
     be6:	67 2f       	mov	r22, r23
     be8:	77 0f       	add	r23, r23
     bea:	77 0b       	sbc	r23, r23
     bec:	6f 5f       	subi	r22, 0xFF	; 255
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+2,1);
     bf4:	f7 01       	movw	r30, r14
     bf6:	80 81       	ld	r24, Z
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	f8 01       	movw	r30, r16
     bfc:	60 81       	ld	r22, Z
     bfe:	71 81       	ldd	r23, Z+1	; 0x01
     c00:	89 2f       	mov	r24, r25
     c02:	99 0f       	add	r25, r25
     c04:	99 0b       	sbc	r25, r25
     c06:	67 2f       	mov	r22, r23
     c08:	77 0f       	add	r23, r23
     c0a:	77 0b       	sbc	r23, r23
     c0c:	6e 5f       	subi	r22, 0xFE	; 254
     c0e:	41 e0       	ldi	r20, 0x01	; 1
     c10:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+1,1);
     c14:	f7 01       	movw	r30, r14
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	f8 01       	movw	r30, r16
     c1c:	60 81       	ld	r22, Z
     c1e:	71 81       	ldd	r23, Z+1	; 0x01
     c20:	89 2f       	mov	r24, r25
     c22:	99 0f       	add	r25, r25
     c24:	99 0b       	sbc	r25, r25
     c26:	67 2f       	mov	r22, r23
     c28:	77 0f       	add	r23, r23
     c2a:	77 0b       	sbc	r23, r23
     c2c:	6f 5f       	subi	r22, 0xFF	; 255
     c2e:	8d 5f       	subi	r24, 0xFD	; 253
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+2,1);
     c36:	f7 01       	movw	r30, r14
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	f8 01       	movw	r30, r16
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	89 2f       	mov	r24, r25
     c44:	99 0f       	add	r25, r25
     c46:	99 0b       	sbc	r25, r25
     c48:	67 2f       	mov	r22, r23
     c4a:	77 0f       	add	r23, r23
     c4c:	77 0b       	sbc	r23, r23
     c4e:	6e 5f       	subi	r22, 0xFE	; 254
     c50:	8d 5f       	subi	r24, 0xFD	; 253
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i])+3,1);
     c58:	f7 01       	movw	r30, r14
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	f8 01       	movw	r30, r16
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	89 2f       	mov	r24, r25
     c66:	99 0f       	add	r25, r25
     c68:	99 0b       	sbc	r25, r25
     c6a:	67 2f       	mov	r22, r23
     c6c:	77 0f       	add	r23, r23
     c6e:	77 0b       	sbc	r23, r23
     c70:	6d 5f       	subi	r22, 0xFD	; 253
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i])+3,1);
     c7a:	f7 01       	movw	r30, r14
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	f8 01       	movw	r30, r16
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	89 2f       	mov	r24, r25
     c88:	99 0f       	add	r25, r25
     c8a:	99 0b       	sbc	r25, r25
     c8c:	67 2f       	mov	r22, r23
     c8e:	77 0f       	add	r23, r23
     c90:	77 0b       	sbc	r23, r23
     c92:	6d 5f       	subi	r22, 0xFD	; 253
     c94:	8e 5f       	subi	r24, 0xFE	; 254
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
end
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <remove_oldest_ball>:

char remove_oldest_ball(void)
begin
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	ff 24       	eor	r15, r15
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char i = 0;
	unsigned char j = 0;
	unsigned int max = 0;
	for (i=0;i<Max_num_balls;i++)
	begin
		if(age[i]> max)
     cb6:	f9 01       	movw	r30, r18
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e6 5a       	subi	r30, 0xA6	; 166
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	48 17       	cp	r20, r24
     cc6:	59 07       	cpc	r21, r25
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <remove_oldest_ball+0x2a>
		begin
			j = i;
			max = age[i];
     cca:	40 81       	ld	r20, Z
     ccc:	51 81       	ldd	r21, Z+1	; 0x01
     cce:	f2 2e       	mov	r15, r18
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
char remove_oldest_ball(void)
begin
	unsigned char i = 0;
	unsigned char j = 0;
	unsigned int max = 0;
	for (i=0;i<Max_num_balls;i++)
     cd4:	2c 30       	cpi	r18, 0x0C	; 12
     cd6:	31 05       	cpc	r19, r1
     cd8:	71 f7       	brne	.-36     	; 0xcb6 <remove_oldest_ball+0x10>
		begin
			j = i;
			max = age[i];
		end	
	end	
	remove_ball(j);
     cda:	0f 2d       	mov	r16, r15
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	c8 01       	movw	r24, r16
     ce0:	0e 94 23 05 	call	0xa46	; 0xa46 <remove_ball>
	is_on_screen[j] = 0;
     ce4:	0c 58       	subi	r16, 0x8C	; 140
     ce6:	1e 4f       	sbci	r17, 0xFE	; 254
     ce8:	f8 01       	movw	r30, r16
     cea:	10 82       	st	Z, r1
	score++;
     cec:	80 91 91 05 	lds	r24, 0x0591
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	80 93 91 05 	sts	0x0591, r24
	return j;
end
     cf6:	8f 2d       	mov	r24, r15
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	08 95       	ret

00000d00 <add_ball>:
// adds a ball to the screen
void add_ball(void)
begin
	int temp = 0;
	unsigned char i = 0;
	if(is_on_screen[i])
     d00:	80 91 74 01 	lds	r24, 0x0174
     d04:	88 23       	and	r24, r24
     d06:	11 f4       	brne	.+4      	; 0xd0c <add_ball+0xc>
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	19 c0       	rjmp	.+50     	; 0xd3e <add_ball+0x3e>
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <add_ball+0x12>
	begin
		i++;
		while(is_on_screen[i] & i<(Max_num_balls-1)) i++;
     d10:	9f 5f       	subi	r25, 0xFF	; 255
     d12:	e9 2f       	mov	r30, r25
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ec 58       	subi	r30, 0x8C	; 140
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	80 81       	ld	r24, Z
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	9b 30       	cpi	r25, 0x0B	; 11
     d26:	10 f4       	brcc	.+4      	; 0xd2c <add_ball+0x2c>
     d28:	41 e0       	ldi	r20, 0x01	; 1
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	24 23       	and	r18, r20
     d2e:	35 23       	and	r19, r21
     d30:	23 2b       	or	r18, r19
     d32:	71 f7       	brne	.-36     	; 0xd10 <add_ball+0x10>
		if(i==(Max_num_balls-1))  i = remove_oldest_ball(); 
     d34:	9b 30       	cpi	r25, 0x0B	; 11
     d36:	19 f4       	brne	.+6      	; 0xd3e <add_ball+0x3e>
     d38:	0e 94 53 06 	call	0xca6	; 0xca6 <remove_oldest_ball>
     d3c:	98 2f       	mov	r25, r24
	end

	age[i] = 0;
     d3e:	89 2f       	mov	r24, r25
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	dc 01       	movw	r26, r24
     d44:	aa 0f       	add	r26, r26
     d46:	bb 1f       	adc	r27, r27
     d48:	fd 01       	movw	r30, r26
     d4a:	e6 5a       	subi	r30, 0xA6	; 166
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	11 82       	std	Z+1, r1	; 0x01
     d50:	10 82       	st	Z, r1
	is_on_screen[i] = 1;
     d52:	fc 01       	movw	r30, r24
     d54:	ec 58       	subi	r30, 0x8C	; 140
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	20 83       	st	Z, r18
	x_pos[i] = int2fix(120);
     d5c:	fd 01       	movw	r30, r26
     d5e:	e0 56       	subi	r30, 0x60	; 96
     d60:	fa 4f       	sbci	r31, 0xFA	; 250
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	38 e7       	ldi	r19, 0x78	; 120
     d66:	31 83       	std	Z+1, r19	; 0x01
     d68:	20 83       	st	Z, r18
	y_pos[i] = int2fix(14);
     d6a:	fd 01       	movw	r30, r26
     d6c:	e4 50       	subi	r30, 0x04	; 4
     d6e:	fa 4f       	sbci	r31, 0xFA	; 250
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	3e e0       	ldi	r19, 0x0E	; 14
     d74:	31 83       	std	Z+1, r19	; 0x01
     d76:	20 83       	st	Z, r18
	x_velocity[i] = int2fix(-1); //xe200;
     d78:	fd 01       	movw	r30, r26
     d7a:	e5 53       	subi	r30, 0x35	; 53
     d7c:	fa 4f       	sbci	r31, 0xFA	; 250
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	31 83       	std	Z+1, r19	; 0x01
     d84:	20 83       	st	Z, r18
	temp = time_elapsed_HS % 8; 
     d86:	20 91 92 05 	lds	r18, 0x0592
	y_velocity[i] = int2fix(temp)>>2;//((signed int)time_elapsed_HS)<<2;
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	27 70       	andi	r18, 0x07	; 7
     d8e:	30 70       	andi	r19, 0x00	; 0
     d90:	46 e0       	ldi	r20, 0x06	; 6
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	4a 95       	dec	r20
     d98:	e1 f7       	brne	.-8      	; 0xd92 <add_ball+0x92>
     d9a:	ad 51       	subi	r26, 0x1D	; 29
     d9c:	ba 4f       	sbci	r27, 0xFA	; 250
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	3c 93       	st	X, r19
     da2:	2e 93       	st	-X, r18
	place_ball(i);
     da4:	0e 94 bb 05 	call	0xb76	; 0xb76 <place_ball>
end
     da8:	08 95       	ret

00000daa <main>:

int main(void)
begin
     daa:	2f 92       	push	r2
     dac:	3f 92       	push	r3
     dae:	4f 92       	push	r4
     db0:	5f 92       	push	r5
     db2:	6f 92       	push	r6
     db4:	7f 92       	push	r7
     db6:	8f 92       	push	r8
     db8:	9f 92       	push	r9
     dba:	af 92       	push	r10
     dbc:	bf 92       	push	r11
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	a9 97       	sbiw	r28, 0x29	; 41
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
	//unsigned char end_calc;

	int test = 0;

	
	initialize();
     dde:	0e 94 54 03 	call	0x6a8	; 0x6a8 <initialize>
	
	video_line(width,0,width,height,1);
     de2:	8f e7       	ldi	r24, 0x7F	; 127
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	4f e7       	ldi	r20, 0x7F	; 127
     de8:	2f e3       	ldi	r18, 0x3F	; 63
     dea:	01 e0       	ldi	r16, 0x01	; 1
     dec:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(0,0,width,0,1);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	4f e7       	ldi	r20, 0x7F	; 127
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(0,height,width-17,height,1);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	6f e3       	ldi	r22, 0x3F	; 63
     e00:	4e e6       	ldi	r20, 0x6E	; 110
     e02:	2f e3       	ldi	r18, 0x3F	; 63
     e04:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_pt(60,1,1);
     e08:	8c e3       	ldi	r24, 0x3C	; 60
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	41 e0       	ldi	r20, 0x01	; 1
     e0e:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(75,1,1);
     e12:	8b e4       	ldi	r24, 0x4B	; 75
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(60,height-1,1);
     e1c:	8c e3       	ldi	r24, 0x3C	; 60
     e1e:	6e e3       	ldi	r22, 0x3E	; 62
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(75,height-1,1);
     e26:	8b e4       	ldi	r24, 0x4B	; 75
     e28:	6e e3       	ldi	r22, 0x3E	; 62
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
		video_pt(6,(200*53/255)+2,1);
		video_pt(6,(200*53/255),1);
		video_line(2,top_of_paddle,2,top_of_paddle+8,0);
		video_line(3,top_of_paddle,3,top_of_paddle+8,0);
		prev_top = top_of_paddle;
		top_of_paddle =(ADCH*53/255)+2;
     e30:	85 e3       	ldi	r24, 0x35	; 53
     e32:	f8 2e       	mov	r15, r24
     e34:	4a c0       	rjmp	.+148    	; 0xeca <main+0x120>
	video_pt(60,height-1,1);
	video_pt(75,height-1,1);

	while(ADCH<200)
	begin
		video_puts(30,30,"Ready?");
     e36:	8e e1       	ldi	r24, 0x1E	; 30
     e38:	6e e1       	ldi	r22, 0x1E	; 30
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	51 e0       	ldi	r21, 0x01	; 1
     e3e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
		video_puts(27,(200*53/255)+1,"paddle here");
     e42:	8b e1       	ldi	r24, 0x1B	; 27
     e44:	6a e2       	ldi	r22, 0x2A	; 42
     e46:	47 e0       	ldi	r20, 0x07	; 7
     e48:	51 e0       	ldi	r21, 0x01	; 1
     e4a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
		// 2. update positions for the paddle
		video_line(5,(200*53/255)+1,20,(200*53/255)+1,1);
     e4e:	85 e0       	ldi	r24, 0x05	; 5
     e50:	6a e2       	ldi	r22, 0x2A	; 42
     e52:	44 e1       	ldi	r20, 0x14	; 20
     e54:	2a e2       	ldi	r18, 0x2A	; 42
     e56:	01 e0       	ldi	r16, 0x01	; 1
     e58:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
		video_pt(6,(200*53/255)+2,1);
     e5c:	86 e0       	ldi	r24, 0x06	; 6
     e5e:	6b e2       	ldi	r22, 0x2B	; 43
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
		video_pt(6,(200*53/255),1);
     e66:	86 e0       	ldi	r24, 0x06	; 6
     e68:	69 e2       	ldi	r22, 0x29	; 41
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
		video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	6d 2d       	mov	r22, r13
     e74:	42 e0       	ldi	r20, 0x02	; 2
     e76:	21 2f       	mov	r18, r17
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
		video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	6d 2d       	mov	r22, r13
     e82:	43 e0       	ldi	r20, 0x03	; 3
     e84:	21 2f       	mov	r18, r17
     e86:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
		prev_top = top_of_paddle;
		top_of_paddle =(ADCH*53/255)+2;
     e8a:	80 91 79 00 	lds	r24, 0x0079
     e8e:	8f 9d       	mul	r24, r15
     e90:	c0 01       	movw	r24, r0
     e92:	11 24       	eor	r1, r1
     e94:	6f ef       	ldi	r22, 0xFF	; 255
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
     e9c:	16 2f       	mov	r17, r22
     e9e:	02 e0       	ldi	r16, 0x02	; 2
     ea0:	d0 2e       	mov	r13, r16
     ea2:	d6 0e       	add	r13, r22
		v_paddle_y = top_of_paddle-prev_top;
		video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     ea4:	16 5f       	subi	r17, 0xF6	; 246
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	6d 2d       	mov	r22, r13
     eaa:	42 e0       	ldi	r20, 0x02	; 2
     eac:	21 2f       	mov	r18, r17
     eae:	01 e0       	ldi	r16, 0x01	; 1
     eb0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
		video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	6d 2d       	mov	r22, r13
     eb8:	43 e0       	ldi	r20, 0x03	; 3
     eba:	21 2f       	mov	r18, r17
     ebc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	//ADMUX = 0;
	//ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
	ADCSRA |= (1<<ADSC);
     ec0:	80 91 7a 00 	lds	r24, 0x007A
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	80 93 7a 00 	sts	0x007A, r24
	video_pt(60,1,1);
	video_pt(75,1,1);
	video_pt(60,height-1,1);
	video_pt(75,height-1,1);

	while(ADCH<200)
     eca:	80 91 79 00 	lds	r24, 0x0079
     ece:	1d 2d       	mov	r17, r13
     ed0:	18 5f       	subi	r17, 0xF8	; 248
     ed2:	88 3c       	cpi	r24, 0xC8	; 200
     ed4:	08 f4       	brcc	.+2      	; 0xed8 <main+0x12e>
     ed6:	af cf       	rjmp	.-162    	; 0xe36 <main+0x8c>
		video_line(2,top_of_paddle,2,top_of_paddle+8,1);
		video_line(3,top_of_paddle,3,top_of_paddle+8,1);
		ADC_start_measure(0);
	end

	video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	6d 2d       	mov	r22, r13
     edc:	42 e0       	ldi	r20, 0x02	; 2
     ede:	21 2f       	mov	r18, r17
     ee0:	00 e0       	ldi	r16, 0x00	; 0
     ee2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	6d 2d       	mov	r22, r13
     eea:	43 e0       	ldi	r20, 0x03	; 3
     eec:	21 2f       	mov	r18, r17
     eee:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(5,(200*53/255)+1,20,(200*53/255)+1,0);
     ef2:	85 e0       	ldi	r24, 0x05	; 5
     ef4:	6a e2       	ldi	r22, 0x2A	; 42
     ef6:	44 e1       	ldi	r20, 0x14	; 20
     ef8:	2a e2       	ldi	r18, 0x2A	; 42
     efa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_pt(6,(200*53/255)+2,0);
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	6b e2       	ldi	r22, 0x2B	; 43
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(6,(200*53/255),0);
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	69 e2       	ldi	r22, 0x29	; 41
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_puts(30,30,"       ");
     f12:	8e e1       	ldi	r24, 0x1E	; 30
     f14:	6e e1       	ldi	r22, 0x1E	; 30
     f16:	43 e1       	ldi	r20, 0x13	; 19
     f18:	51 e0       	ldi	r21, 0x01	; 1
     f1a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
	video_puts(27,(200*53/255)+1,"           ");
     f1e:	8b e1       	ldi	r24, 0x1B	; 27
     f20:	6a e2       	ldi	r22, 0x2A	; 42
     f22:	4b e1       	ldi	r20, 0x1B	; 27
     f24:	51 e0       	ldi	r21, 0x01	; 1
     f26:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
     f2a:	1f 8a       	std	Y+23, r1	; 0x17
     f2c:	1e 8a       	std	Y+22, r1	; 0x16
     f2e:	1d 8a       	std	Y+21, r1	; 0x15
     f30:	75 c3       	rjmp	.+1770   	; 0x161c <main+0x872>

	while(time_elapsed_HS<=200)
	begin
		balls_on_screen = 0;
		if (LineCount == ScreenBot)
     f32:	80 91 c9 05 	lds	r24, 0x05C9
     f36:	90 91 ca 05 	lds	r25, 0x05CA
     f3a:	8d 36       	cpi	r24, 0x6D	; 109
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <main+0x198>
     f40:	6d c3       	rjmp	.+1754   	; 0x161c <main+0x872>
		begin
			
			// 1. Timing and ball addition
			frame_count++;
     f42:	2e 89       	ldd	r18, Y+22	; 0x16
     f44:	3f 89       	ldd	r19, Y+23	; 0x17
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	3f 8b       	std	Y+23, r19	; 0x17
     f4c:	2e 8b       	std	Y+22, r18	; 0x16
			if (frame_count >= 30)
     f4e:	2e 31       	cpi	r18, 0x1E	; 30
     f50:	31 05       	cpc	r19, r1
     f52:	0c f4       	brge	.+2      	; 0xf56 <main+0x1ac>
     f54:	5a c0       	rjmp	.+180    	; 0x100a <main+0x260>
			begin
				add_ball();
     f56:	0e 94 80 06 	call	0xd00	; 0xd00 <add_ball>
				frame_count = 0;
				time_elapsed_HS++; 
     f5a:	80 91 92 05 	lds	r24, 0x0592
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	80 93 92 05 	sts	0x0592, r24
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     f64:	80 91 92 05 	lds	r24, 0x0592
     f68:	00 d0       	rcall	.+0      	; 0xf6a <main+0x1c0>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <main+0x1c2>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <main+0x1c4>
     f6e:	ed b7       	in	r30, 0x3d	; 61
     f70:	fe b7       	in	r31, 0x3e	; 62
     f72:	31 96       	adiw	r30, 0x01	; 1
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	2c 0f       	add	r18, r28
     f7a:	3d 1f       	adc	r19, r29
     f7c:	ad b7       	in	r26, 0x3d	; 61
     f7e:	be b7       	in	r27, 0x3e	; 62
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	3c 93       	st	X, r19
     f84:	2e 93       	st	-X, r18
     f86:	11 97       	sbiw	r26, 0x01	; 1
     f88:	a7 e2       	ldi	r26, 0x27	; 39
     f8a:	b1 e0       	ldi	r27, 0x01	; 1
     f8c:	b3 83       	std	Z+3, r27	; 0x03
     f8e:	a2 83       	std	Z+2, r26	; 0x02
     f90:	86 95       	lsr	r24
     f92:	84 83       	std	Z+4, r24	; 0x04
     f94:	15 82       	std	Z+5, r1	; 0x05
     f96:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sprintf>
				video_puts(110,57,time_str);
     f9a:	ed b7       	in	r30, 0x3d	; 61
     f9c:	fe b7       	in	r31, 0x3e	; 62
     f9e:	36 96       	adiw	r30, 0x06	; 6
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	fe bf       	out	0x3e, r31	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	ed bf       	out	0x3d, r30	; 61
     faa:	8e e6       	ldi	r24, 0x6E	; 110
     fac:	69 e3       	ldi	r22, 0x39	; 57
     fae:	ae 01       	movw	r20, r28
     fb0:	4f 5f       	subi	r20, 0xFF	; 255
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
				video_line(0,0,width,0,1);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	01 e0       	ldi	r16, 0x01	; 1
     fc2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
				video_line(0,height,width-17,height,1);
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	6f e3       	ldi	r22, 0x3F	; 63
     fca:	4e e6       	ldi	r20, 0x6E	; 110
     fcc:	2f e3       	ldi	r18, 0x3F	; 63
     fce:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
				video_line(width,0,width,height,1);
     fd2:	8f e7       	ldi	r24, 0x7F	; 127
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	2f e3       	ldi	r18, 0x3F	; 63
     fda:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
				video_pt(60,1,1);
     fde:	8c e3       	ldi	r24, 0x3C	; 60
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
				video_pt(75,1,1);
     fe8:	8b e4       	ldi	r24, 0x4B	; 75
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	41 e0       	ldi	r20, 0x01	; 1
     fee:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
				video_pt(60,height-1,1);
     ff2:	8c e3       	ldi	r24, 0x3C	; 60
     ff4:	6e e3       	ldi	r22, 0x3E	; 62
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
				video_pt(75,height-1,1);
     ffc:	8b e4       	ldi	r24, 0x4B	; 75
     ffe:	6e e3       	ldi	r22, 0x3E	; 62
    1000:	41 e0       	ldi	r20, 0x01	; 1
    1002:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
    1006:	1f 8a       	std	Y+23, r1	; 0x17
    1008:	1e 8a       	std	Y+22, r1	; 0x16
			end

			// 2. update positions for the paddle
			video_line(2,top_of_paddle,2,top_of_paddle+16,0);
    100a:	1d 2d       	mov	r17, r13
    100c:	10 5f       	subi	r17, 0xF0	; 240
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	6d 2d       	mov	r22, r13
    1012:	42 e0       	ldi	r20, 0x02	; 2
    1014:	21 2f       	mov	r18, r17
    1016:	00 e0       	ldi	r16, 0x00	; 0
    1018:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
			video_line(3,top_of_paddle,3,top_of_paddle+16,0);
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	6d 2d       	mov	r22, r13
    1020:	43 e0       	ldi	r20, 0x03	; 3
    1022:	21 2f       	mov	r18, r17
    1024:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
			prev_top = top_of_paddle;
			temp =(ADCH*45/255)+1;
    1028:	80 91 79 00 	lds	r24, 0x0079
			top_of_paddle =(char)temp;
    102c:	fd e2       	ldi	r31, 0x2D	; 45
    102e:	8f 9f       	mul	r24, r31
    1030:	c0 01       	movw	r24, r0
    1032:	11 24       	eor	r1, r1
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    103c:	7b 01       	movw	r14, r22
    103e:	08 94       	sec
    1040:	e1 1c       	adc	r14, r1
    1042:	f1 1c       	adc	r15, r1
    1044:	e9 8a       	std	Y+17, r14	; 0x11
			v_paddle_y = top_of_paddle-prev_top;
    1046:	2e 2d       	mov	r18, r14
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3b 8f       	std	Y+27, r19	; 0x1b
    104c:	2a 8f       	std	Y+26, r18	; 0x1a
			video_line(2,top_of_paddle,2,top_of_paddle+16,1);
    104e:	1e 2d       	mov	r17, r14
    1050:	10 5f       	subi	r17, 0xF0	; 240
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	6e 2d       	mov	r22, r14
    1056:	42 e0       	ldi	r20, 0x02	; 2
    1058:	21 2f       	mov	r18, r17
    105a:	01 e0       	ldi	r16, 0x01	; 1
    105c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
			video_line(3,top_of_paddle,3,top_of_paddle+16,1);
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	6e 2d       	mov	r22, r14
    1064:	43 e0       	ldi	r20, 0x03	; 3
    1066:	21 2f       	mov	r18, r17
    1068:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
				if((fix2int(x_pos[i]) <= 6)
					&& ((fix2int(y_pos[i])-top_of_paddle) > -5) 
					&& ((fix2int(y_pos[i])-top_of_paddle) < 17))
				begin
					x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
					y_velocity[i] += int2fix(v_paddle_y);
    106c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    106e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1070:	8d 19       	sub	r24, r13
    1072:	91 09       	sbc	r25, r1
    1074:	b8 2f       	mov	r27, r24
    1076:	aa 27       	eor	r26, r26
    1078:	b9 8f       	std	Y+25, r27	; 0x19
    107a:	a8 8f       	std	Y+24, r26	; 0x18
    107c:	1c 8a       	std	Y+20, r1	; 0x14
    107e:	66 24       	eor	r6, r6
    1080:	77 24       	eor	r7, r7
			//end_calc = Max_num_balls - Max_num_balls/3 * (2 - time_elapsed_HS % 3);


			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(!is_on_screen[i]) continue;
    1082:	f3 01       	movw	r30, r6
    1084:	ec 58       	subi	r30, 0x8C	; 140
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	80 81       	ld	r24, Z
    108a:	88 23       	and	r24, r24
    108c:	09 f4       	brne	.+2      	; 0x1090 <main+0x2e6>
    108e:	62 c2       	rjmp	.+1220   	; 0x1554 <main+0x7aa>
				age[i]++;
    1090:	f3 01       	movw	r30, r6
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	e6 5a       	subi	r30, 0xA6	; 166
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
				balls_on_screen++;
    10a4:	bc 89       	ldd	r27, Y+20	; 0x14
    10a6:	bf 5f       	subi	r27, 0xFF	; 255
    10a8:	bc 8b       	std	Y+20, r27	; 0x14
				if (hit_count[i] > 0) hit_count[i]--;
    10aa:	f3 01       	movw	r30, r6
    10ac:	ed 56       	subi	r30, 0x6D	; 109
    10ae:	fa 4f       	sbci	r31, 0xFA	; 250
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	19 f0       	breq	.+6      	; 0x10bc <main+0x312>
    10b6:	80 81       	ld	r24, Z
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	80 83       	st	Z, r24
    10bc:	f3 01       	movw	r30, r6
    10be:	31 96       	adiw	r30, 0x01	; 1
    10c0:	fb 8b       	std	Y+19, r31	; 0x13
    10c2:	ea 8b       	std	Y+18, r30	; 0x12
			// 3.1. check for collisions and update velocities (including drag)

				for(int j = i+1; j<Max_num_balls;j++)
				begin
				
					if (i%3 != time_elapsed_HS%3) continue;
    10c4:	c3 01       	movw	r24, r6
    10c6:	63 e0       	ldi	r22, 0x03	; 3
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    10ce:	8e 8f       	std	Y+30, r24	; 0x1e
    10d0:	9f 8f       	std	Y+31, r25	; 0x1f
					//if(!is_on_screen[j]) continue;
					if(i == j) continue; // don't consider the situation for one ball.
					
					rij_x = x_pos[i] - x_pos[j];
    10d2:	c3 01       	movw	r24, r6
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	9c 01       	movw	r18, r24
    10da:	20 56       	subi	r18, 0x60	; 96
    10dc:	3a 4f       	sbci	r19, 0xFA	; 250
    10de:	39 a3       	std	Y+33, r19	; 0x21
    10e0:	28 a3       	std	Y+32, r18	; 0x20
					rij_y = y_pos[i] - y_pos[j];
    10e2:	dc 01       	movw	r26, r24
    10e4:	a4 50       	subi	r26, 0x04	; 4
    10e6:	ba 4f       	sbci	r27, 0xFA	; 250
    10e8:	bb a3       	std	Y+35, r27	; 0x23
    10ea:	aa a3       	std	Y+34, r26	; 0x22

					if (abs(rij_x) <= 0x0450)
					begin
					 	if (abs(rij_y) <= 0x0450)
					 	begin
							if(//(multfix(rij_x,rij_x) + multfix(rij_y,rij_y) <= int2fix(32))
    10ec:	f3 01       	movw	r30, r6
    10ee:	ed 56       	subi	r30, 0x6D	; 109
    10f0:	fa 4f       	sbci	r31, 0xFA	; 250
    10f2:	fd a3       	std	Y+37, r31	; 0x25
    10f4:	ec a3       	std	Y+36, r30	; 0x24
							 hit_count[i]==0
								&& hit_count[j]==0)// check collision here)<4))
							begin
								vij_x = x_velocity[i] - x_velocity[j];
    10f6:	9c 01       	movw	r18, r24
    10f8:	25 53       	subi	r18, 0x35	; 53
    10fa:	3a 4f       	sbci	r19, 0xFA	; 250
    10fc:	3f a3       	std	Y+39, r19	; 0x27
    10fe:	2e a3       	std	Y+38, r18	; 0x26
								vij_y = y_velocity[i] - y_velocity[j];
    1100:	dc 01       	movw	r26, r24
    1102:	ad 51       	subi	r26, 0x1D	; 29
    1104:	ba 4f       	sbci	r27, 0xFA	; 250
    1106:	b9 a7       	std	Y+41, r27	; 0x29
    1108:	a8 a7       	std	Y+40, r26	; 0x28
			// 3.1. check for collisions and update velocities (including drag)

				for(int j = i+1; j<Max_num_balls;j++)
				begin
				
					if (i%3 != time_elapsed_HS%3) continue;
    110a:	80 91 92 05 	lds	r24, 0x0592
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__udivmodqi4>
    1114:	89 2f       	mov	r24, r25
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	ee 8d       	ldd	r30, Y+30	; 0x1e
    111a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    111c:	e8 17       	cp	r30, r24
    111e:	f9 07       	cpc	r31, r25
    1120:	09 f0       	breq	.+2      	; 0x1124 <main+0x37a>
    1122:	a9 c0       	rjmp	.+338    	; 0x1276 <main+0x4cc>
					//if(!is_on_screen[j]) continue;
					if(i == j) continue; // don't consider the situation for one ball.
    1124:	2a 89       	ldd	r18, Y+18	; 0x12
    1126:	3b 89       	ldd	r19, Y+19	; 0x13
    1128:	62 16       	cp	r6, r18
    112a:	73 06       	cpc	r7, r19
    112c:	09 f4       	brne	.+2      	; 0x1130 <main+0x386>
    112e:	a3 c0       	rjmp	.+326    	; 0x1276 <main+0x4cc>
					
					rij_x = x_pos[i] - x_pos[j];
    1130:	a8 a1       	ldd	r26, Y+32	; 0x20
    1132:	b9 a1       	ldd	r27, Y+33	; 0x21
    1134:	4d 90       	ld	r4, X+
    1136:	5c 90       	ld	r5, X
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	f9 01       	movw	r30, r18
    113e:	e0 56       	subi	r30, 0x60	; 96
    1140:	fa 4f       	sbci	r31, 0xFA	; 250
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	48 1a       	sub	r4, r24
    1148:	59 0a       	sbc	r5, r25
					rij_y = y_pos[i] - y_pos[j];
    114a:	ea a1       	ldd	r30, Y+34	; 0x22
    114c:	fb a1       	ldd	r31, Y+35	; 0x23
    114e:	40 81       	ld	r20, Z
    1150:	51 81       	ldd	r21, Z+1	; 0x01
    1152:	f9 01       	movw	r30, r18
    1154:	e4 50       	subi	r30, 0x04	; 4
    1156:	fa 4f       	sbci	r31, 0xFA	; 250
    1158:	01 90       	ld	r0, Z+
    115a:	f0 81       	ld	r31, Z
    115c:	e0 2d       	mov	r30, r0

					if (abs(rij_x) <= 0x0450)
    115e:	c2 01       	movw	r24, r4
    1160:	80 5b       	subi	r24, 0xB0	; 176
    1162:	9b 4f       	sbci	r25, 0xFB	; 251
    1164:	81 5a       	subi	r24, 0xA1	; 161
    1166:	98 40       	sbci	r25, 0x08	; 8
    1168:	08 f0       	brcs	.+2      	; 0x116c <main+0x3c2>
    116a:	85 c0       	rjmp	.+266    	; 0x1276 <main+0x4cc>
					if (i%3 != time_elapsed_HS%3) continue;
					//if(!is_on_screen[j]) continue;
					if(i == j) continue; // don't consider the situation for one ball.
					
					rij_x = x_pos[i] - x_pos[j];
					rij_y = y_pos[i] - y_pos[j];
    116c:	1a 01       	movw	r2, r20
    116e:	2e 1a       	sub	r2, r30
    1170:	3f 0a       	sbc	r3, r31

					if (abs(rij_x) <= 0x0450)
					begin
					 	if (abs(rij_y) <= 0x0450)
    1172:	c1 01       	movw	r24, r2
    1174:	80 5b       	subi	r24, 0xB0	; 176
    1176:	9b 4f       	sbci	r25, 0xFB	; 251
    1178:	81 5a       	subi	r24, 0xA1	; 161
    117a:	98 40       	sbci	r25, 0x08	; 8
    117c:	08 f0       	brcs	.+2      	; 0x1180 <main+0x3d6>
    117e:	7b c0       	rjmp	.+246    	; 0x1276 <main+0x4cc>
					 	begin
							if(//(multfix(rij_x,rij_x) + multfix(rij_y,rij_y) <= int2fix(32))
    1180:	ec a1       	ldd	r30, Y+36	; 0x24
    1182:	fd a1       	ldd	r31, Y+37	; 0x25
    1184:	80 81       	ld	r24, Z
    1186:	88 23       	and	r24, r24
    1188:	09 f0       	breq	.+2      	; 0x118c <main+0x3e2>
    118a:	75 c0       	rjmp	.+234    	; 0x1276 <main+0x4cc>
    118c:	8a 89       	ldd	r24, Y+18	; 0x12
    118e:	9b 89       	ldd	r25, Y+19	; 0x13
    1190:	8d 56       	subi	r24, 0x6D	; 109
    1192:	9a 4f       	sbci	r25, 0xFA	; 250
    1194:	9d 8f       	std	Y+29, r25	; 0x1d
    1196:	8c 8f       	std	Y+28, r24	; 0x1c
    1198:	dc 01       	movw	r26, r24
    119a:	8c 91       	ld	r24, X
    119c:	88 23       	and	r24, r24
    119e:	09 f0       	breq	.+2      	; 0x11a2 <main+0x3f8>
    11a0:	6a c0       	rjmp	.+212    	; 0x1276 <main+0x4cc>
							 hit_count[i]==0
								&& hit_count[j]==0)// check collision here)<4))
							begin
								vij_x = x_velocity[i] - x_velocity[j];
    11a2:	ee a1       	ldd	r30, Y+38	; 0x26
    11a4:	ff a1       	ldd	r31, Y+39	; 0x27
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	5b ec       	ldi	r21, 0xCB	; 203
    11ac:	a5 2e       	mov	r10, r21
    11ae:	55 e0       	ldi	r21, 0x05	; 5
    11b0:	b5 2e       	mov	r11, r21
    11b2:	a2 0e       	add	r10, r18
    11b4:	b3 1e       	adc	r11, r19
    11b6:	d5 01       	movw	r26, r10
    11b8:	8d 91       	ld	r24, X+
    11ba:	9c 91       	ld	r25, X
								vij_y = y_velocity[i] - y_velocity[j];
    11bc:	e8 a5       	ldd	r30, Y+40	; 0x28
    11be:	f9 a5       	ldd	r31, Y+41	; 0x29
    11c0:	e0 80       	ld	r14, Z
    11c2:	f1 80       	ldd	r15, Z+1	; 0x01
    11c4:	43 ee       	ldi	r20, 0xE3	; 227
    11c6:	84 2e       	mov	r8, r20
    11c8:	45 e0       	ldi	r20, 0x05	; 5
    11ca:	94 2e       	mov	r9, r20
    11cc:	82 0e       	add	r8, r18
    11ce:	93 1e       	adc	r9, r19
    11d0:	d4 01       	movw	r26, r8
    11d2:	cd 90       	ld	r12, X+
    11d4:	dc 90       	ld	r13, X
								//collision code here
								dot_prod = multfix(rij_x,(vij_x>>2)) + multfix(rij_y,(vij_y>>2));
    11d6:	68 1b       	sub	r22, r24
    11d8:	79 0b       	sbc	r23, r25
    11da:	75 95       	asr	r23
    11dc:	67 95       	ror	r22
    11de:	75 95       	asr	r23
    11e0:	67 95       	ror	r22
    11e2:	c2 01       	movw	r24, r4
    11e4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
    11e8:	8c 01       	movw	r16, r24
    11ea:	ec 18       	sub	r14, r12
    11ec:	fd 08       	sbc	r15, r13
    11ee:	f5 94       	asr	r15
    11f0:	e7 94       	ror	r14
    11f2:	f5 94       	asr	r15
    11f4:	e7 94       	ror	r14
    11f6:	c1 01       	movw	r24, r2
    11f8:	b7 01       	movw	r22, r14
    11fa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
								delta_x_velocity = multfix(rij_x,(dot_prod>>2))>>1;
    11fe:	08 0f       	add	r16, r24
    1200:	19 1f       	adc	r17, r25
    1202:	15 95       	asr	r17
    1204:	07 95       	ror	r16
    1206:	15 95       	asr	r17
    1208:	07 95       	ror	r16
    120a:	c2 01       	movw	r24, r4
    120c:	b8 01       	movw	r22, r16
    120e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
    1212:	7c 01       	movw	r14, r24
    1214:	f5 94       	asr	r15
    1216:	e7 94       	ror	r14
								delta_y_velocity = multfix(rij_y,(dot_prod>>2))>>1;
    1218:	c1 01       	movw	r24, r2
    121a:	b8 01       	movw	r22, r16
    121c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
    1220:	95 95       	asr	r25
    1222:	87 95       	ror	r24
								x_velocity[i] += delta_x_velocity;
    1224:	ee a1       	ldd	r30, Y+38	; 0x26
    1226:	ff a1       	ldd	r31, Y+39	; 0x27
    1228:	20 81       	ld	r18, Z
    122a:	31 81       	ldd	r19, Z+1	; 0x01
    122c:	2e 0d       	add	r18, r14
    122e:	3f 1d       	adc	r19, r15
    1230:	31 83       	std	Z+1, r19	; 0x01
    1232:	20 83       	st	Z, r18
								y_velocity[i] += delta_y_velocity; 
    1234:	a8 a5       	ldd	r26, Y+40	; 0x28
    1236:	b9 a5       	ldd	r27, Y+41	; 0x29
    1238:	2d 91       	ld	r18, X+
    123a:	3c 91       	ld	r19, X
    123c:	11 97       	sbiw	r26, 0x01	; 1
    123e:	28 0f       	add	r18, r24
    1240:	39 1f       	adc	r19, r25
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	3c 93       	st	X, r19
    1246:	2e 93       	st	-X, r18
								x_velocity[j] -= delta_x_velocity;
    1248:	f5 01       	movw	r30, r10
    124a:	20 81       	ld	r18, Z
    124c:	31 81       	ldd	r19, Z+1	; 0x01
    124e:	2e 19       	sub	r18, r14
    1250:	3f 09       	sbc	r19, r15
    1252:	31 83       	std	Z+1, r19	; 0x01
    1254:	20 83       	st	Z, r18
								y_velocity[j] -= delta_y_velocity; 
    1256:	d4 01       	movw	r26, r8
    1258:	2d 91       	ld	r18, X+
    125a:	3c 91       	ld	r19, X
    125c:	11 97       	sbiw	r26, 0x01	; 1
    125e:	28 1b       	sub	r18, r24
    1260:	39 0b       	sbc	r19, r25
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	3c 93       	st	X, r19
    1266:	2e 93       	st	-X, r18

								hit_count[i] = 4;
    1268:	24 e0       	ldi	r18, 0x04	; 4
    126a:	ec a1       	ldd	r30, Y+36	; 0x24
    126c:	fd a1       	ldd	r31, Y+37	; 0x25
    126e:	20 83       	st	Z, r18
								hit_count[j] = 4;
    1270:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1272:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1274:	2c 93       	st	X, r18
				age[i]++;
				balls_on_screen++;
				if (hit_count[i] > 0) hit_count[i]--;
			// 3.1. check for collisions and update velocities (including drag)

				for(int j = i+1; j<Max_num_balls;j++)
    1276:	ea 89       	ldd	r30, Y+18	; 0x12
    1278:	fb 89       	ldd	r31, Y+19	; 0x13
    127a:	31 96       	adiw	r30, 0x01	; 1
    127c:	fb 8b       	std	Y+19, r31	; 0x13
    127e:	ea 8b       	std	Y+18, r30	; 0x12
    1280:	3c 97       	sbiw	r30, 0x0c	; 12
    1282:	09 f0       	breq	.+2      	; 0x1286 <main+0x4dc>
    1284:	42 cf       	rjmp	.-380    	; 0x110a <main+0x360>
					 	end
					end
				end // for j

				// drag
				x_velocity[i] -= multfix(x_velocity[i],0x0001);
    1286:	73 01       	movw	r14, r6
    1288:	ee 0c       	add	r14, r14
    128a:	ff 1c       	adc	r15, r15
    128c:	ab ec       	ldi	r26, 0xCB	; 203
    128e:	aa 2e       	mov	r10, r26
    1290:	a5 e0       	ldi	r26, 0x05	; 5
    1292:	ba 2e       	mov	r11, r26
    1294:	ae 0c       	add	r10, r14
    1296:	bf 1c       	adc	r11, r15
    1298:	d5 01       	movw	r26, r10
    129a:	0d 91       	ld	r16, X+
    129c:	1c 91       	ld	r17, X
    129e:	11 97       	sbiw	r26, 0x01	; 1
    12a0:	8d 91       	ld	r24, X+
    12a2:	9c 91       	ld	r25, X
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
    12ac:	08 1b       	sub	r16, r24
    12ae:	19 0b       	sbc	r17, r25
    12b0:	f5 01       	movw	r30, r10
    12b2:	11 83       	std	Z+1, r17	; 0x01
    12b4:	00 83       	st	Z, r16
			    y_velocity[i] -= multfix(y_velocity[i],0x0001);
    12b6:	f3 ee       	ldi	r31, 0xE3	; 227
    12b8:	cf 2e       	mov	r12, r31
    12ba:	f5 e0       	ldi	r31, 0x05	; 5
    12bc:	df 2e       	mov	r13, r31
    12be:	ce 0c       	add	r12, r14
    12c0:	df 1c       	adc	r13, r15
    12c2:	d6 01       	movw	r26, r12
    12c4:	0d 91       	ld	r16, X+
    12c6:	1c 91       	ld	r17, X
    12c8:	11 97       	sbiw	r26, 0x01	; 1
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
    12d6:	08 1b       	sub	r16, r24
    12d8:	19 0b       	sbc	r17, r25
    12da:	f6 01       	movw	r30, r12
    12dc:	11 83       	std	Z+1, r17	; 0x01
    12de:	00 83       	st	Z, r16

			
				if((fix2int(x_pos[i]) <= 6)
    12e0:	f7 01       	movw	r30, r14
    12e2:	e0 56       	subi	r30, 0x60	; 96
    12e4:	fa 4f       	sbci	r31, 0xFA	; 250
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	89 2f       	mov	r24, r25
    12ec:	99 0f       	add	r25, r25
    12ee:	99 0b       	sbc	r25, r25
    12f0:	87 30       	cpi	r24, 0x07	; 7
    12f2:	a4 f5       	brge	.+104    	; 0x135c <main+0x5b2>
    12f4:	f7 01       	movw	r30, r14
    12f6:	e4 50       	subi	r30, 0x04	; 4
    12f8:	fa 4f       	sbci	r31, 0xFA	; 250
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	89 2f       	mov	r24, r25
    1300:	99 0f       	add	r25, r25
    1302:	99 0b       	sbc	r25, r25
    1304:	99 27       	eor	r25, r25
    1306:	87 fd       	sbrc	r24, 7
    1308:	90 95       	com	r25
    130a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    130c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    130e:	82 1b       	sub	r24, r18
    1310:	93 0b       	sbc	r25, r19
    1312:	8c 5f       	subi	r24, 0xFC	; 252
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	14 f1       	brlt	.+68     	; 0x135c <main+0x5b2>
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	89 2f       	mov	r24, r25
    131e:	99 0f       	add	r25, r25
    1320:	99 0b       	sbc	r25, r25
    1322:	99 27       	eor	r25, r25
    1324:	87 fd       	sbrc	r24, 7
    1326:	90 95       	com	r25
    1328:	aa 8d       	ldd	r26, Y+26	; 0x1a
    132a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    132c:	8a 1b       	sub	r24, r26
    132e:	9b 0b       	sbc	r25, r27
    1330:	41 97       	sbiw	r24, 0x11	; 17
    1332:	a4 f4       	brge	.+40     	; 0x135c <main+0x5b2>
					&& ((fix2int(y_pos[i])-top_of_paddle) > -5) 
					&& ((fix2int(y_pos[i])-top_of_paddle) < 17))
				begin
					x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
    1334:	f5 01       	movw	r30, r10
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	7f ef       	ldi	r23, 0xFF	; 255
    133e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <multfix>
    1342:	d5 01       	movw	r26, r10
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	9c 93       	st	X, r25
    1348:	8e 93       	st	-X, r24
					y_velocity[i] += int2fix(v_paddle_y);
    134a:	f6 01       	movw	r30, r12
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	28 8d       	ldd	r18, Y+24	; 0x18
    1352:	39 8d       	ldd	r19, Y+25	; 0x19
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	80 83       	st	Z, r24
				end
			
		// 3.2. Update position of balls

				remove_ball(i);
    135c:	c3 01       	movw	r24, r6
    135e:	0e 94 23 05 	call	0xa46	; 0xa46 <remove_ball>

				if(fix2int(x_pos[i])>=122)
    1362:	93 01       	movw	r18, r6
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	f9 01       	movw	r30, r18
    136a:	e0 56       	subi	r30, 0x60	; 96
    136c:	fa 4f       	sbci	r31, 0xFA	; 250
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	89 2f       	mov	r24, r25
    1374:	99 0f       	add	r25, r25
    1376:	99 0b       	sbc	r25, r25
    1378:	8a 37       	cpi	r24, 0x7A	; 122
    137a:	54 f0       	brlt	.+20     	; 0x1390 <main+0x5e6>
				begin
					x_velocity[i] = -(x_velocity[i]);
    137c:	f9 01       	movw	r30, r18
    137e:	e5 53       	subi	r30, 0x35	; 53
    1380:	fa 4f       	sbci	r31, 0xFA	; 250
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	90 95       	com	r25
    1388:	81 95       	neg	r24
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
					//hit_count[i] = 5;
				end
				if(fix2int(y_pos[i])<=3)
    1390:	93 01       	movw	r18, r6
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	f9 01       	movw	r30, r18
    1398:	e4 50       	subi	r30, 0x04	; 4
    139a:	fa 4f       	sbci	r31, 0xFA	; 250
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	89 2f       	mov	r24, r25
    13a2:	99 0f       	add	r25, r25
    13a4:	99 0b       	sbc	r25, r25
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	54 f4       	brge	.+20     	; 0x13be <main+0x614>
				begin
					y_velocity[i] = -(y_velocity[i]);
    13aa:	f9 01       	movw	r30, r18
    13ac:	ed 51       	subi	r30, 0x1D	; 29
    13ae:	fa 4f       	sbci	r31, 0xFA	; 250
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	90 95       	com	r25
    13b6:	81 95       	neg	r24
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
					//hit_count[i] = 5;
				end
				if(fix2int(y_pos[i])>=58)
    13be:	93 01       	movw	r18, r6
    13c0:	22 0f       	add	r18, r18
    13c2:	33 1f       	adc	r19, r19
    13c4:	f9 01       	movw	r30, r18
    13c6:	e4 50       	subi	r30, 0x04	; 4
    13c8:	fa 4f       	sbci	r31, 0xFA	; 250
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	89 2f       	mov	r24, r25
    13d0:	99 0f       	add	r25, r25
    13d2:	99 0b       	sbc	r25, r25
    13d4:	8a 33       	cpi	r24, 0x3A	; 58
    13d6:	54 f0       	brlt	.+20     	; 0x13ec <main+0x642>
				begin
					y_velocity[i] = -(y_velocity[i]);
    13d8:	f9 01       	movw	r30, r18
    13da:	ed 51       	subi	r30, 0x1D	; 29
    13dc:	fa 4f       	sbci	r31, 0xFA	; 250
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	90 95       	com	r25
    13e4:	81 95       	neg	r24
    13e6:	9f 4f       	sbci	r25, 0xFF	; 255
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
					//hit_count[i] = 5;
				end


				if((x_pos[i] + x_velocity[i])<int2fix(127)) 
    13ec:	c3 01       	movw	r24, r6
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	dc 01       	movw	r26, r24
    13f4:	a0 56       	subi	r26, 0x60	; 96
    13f6:	ba 4f       	sbci	r27, 0xFA	; 250
    13f8:	2d 91       	ld	r18, X+
    13fa:	3c 91       	ld	r19, X
    13fc:	11 97       	sbiw	r26, 0x01	; 1
    13fe:	fc 01       	movw	r30, r24
    1400:	e5 53       	subi	r30, 0x35	; 53
    1402:	fa 4f       	sbci	r31, 0xFA	; 250
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	80 50       	subi	r24, 0x00	; 0
    140e:	9f 47       	sbci	r25, 0x7F	; 127
    1410:	a4 f4       	brge	.+40     	; 0x143a <main+0x690>
				begin
					if((x_pos[i] + x_velocity[i])>int2fix(0)) x_pos[i] += x_velocity[i];
    1412:	2d 91       	ld	r18, X+
    1414:	3c 91       	ld	r19, X
    1416:	11 97       	sbiw	r26, 0x01	; 1
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	18 16       	cp	r1, r24
    1422:	19 06       	cpc	r1, r25
    1424:	54 f4       	brge	.+20     	; 0x143a <main+0x690>
    1426:	2d 91       	ld	r18, X+
    1428:	3c 91       	ld	r19, X
    142a:	11 97       	sbiw	r26, 0x01	; 1
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	9c 93       	st	X, r25
    1438:	8e 93       	st	-X, r24
				end

				 //x_pos[i] += x_velocity[i];
				if((y_pos[i] + y_velocity[i])<int2fix(64)) 
    143a:	c3 01       	movw	r24, r6
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	dc 01       	movw	r26, r24
    1442:	a4 50       	subi	r26, 0x04	; 4
    1444:	ba 4f       	sbci	r27, 0xFA	; 250
    1446:	2d 91       	ld	r18, X+
    1448:	3c 91       	ld	r19, X
    144a:	11 97       	sbiw	r26, 0x01	; 1
    144c:	fc 01       	movw	r30, r24
    144e:	ed 51       	subi	r30, 0x1D	; 29
    1450:	fa 4f       	sbci	r31, 0xFA	; 250
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	82 0f       	add	r24, r18
    1458:	93 1f       	adc	r25, r19
    145a:	80 50       	subi	r24, 0x00	; 0
    145c:	90 44       	sbci	r25, 0x40	; 64
    145e:	a4 f4       	brge	.+40     	; 0x1488 <main+0x6de>
				begin
					if((y_pos[i] + y_velocity[i])>int2fix(0)) y_pos[i] += y_velocity[i];
    1460:	2d 91       	ld	r18, X+
    1462:	3c 91       	ld	r19, X
    1464:	11 97       	sbiw	r26, 0x01	; 1
    1466:	80 81       	ld	r24, Z
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	82 0f       	add	r24, r18
    146c:	93 1f       	adc	r25, r19
    146e:	18 16       	cp	r1, r24
    1470:	19 06       	cpc	r1, r25
    1472:	54 f4       	brge	.+20     	; 0x1488 <main+0x6de>
    1474:	2d 91       	ld	r18, X+
    1476:	3c 91       	ld	r19, X
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	80 81       	ld	r24, Z
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	11 96       	adiw	r26, 0x01	; 1
    1484:	9c 93       	st	X, r25
    1486:	8e 93       	st	-X, r24
				end


		// 3.3 remove balls that hit the left side of the screen or bins
				if(fix2int(x_pos[i]) <= 2) // hit left wall
    1488:	f3 01       	movw	r30, r6
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	df 01       	movw	r26, r30
    1490:	a0 56       	subi	r26, 0x60	; 96
    1492:	ba 4f       	sbci	r27, 0xFA	; 250
    1494:	8d 91       	ld	r24, X+
    1496:	9c 91       	ld	r25, X
    1498:	11 97       	sbiw	r26, 0x01	; 1
    149a:	89 2f       	mov	r24, r25
    149c:	99 0f       	add	r25, r25
    149e:	99 0b       	sbc	r25, r25
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	cc f4       	brge	.+50     	; 0x14d6 <main+0x72c>
				begin
					is_on_screen[i] = 0;
    14a4:	f3 01       	movw	r30, r6
    14a6:	ec 58       	subi	r30, 0x8C	; 140
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	10 82       	st	Z, r1
					if(score) score--;
    14ac:	80 91 91 05 	lds	r24, 0x0591
    14b0:	88 23       	and	r24, r24
    14b2:	29 f0       	breq	.+10     	; 0x14be <main+0x714>
    14b4:	80 91 91 05 	lds	r24, 0x0591
    14b8:	81 50       	subi	r24, 0x01	; 1
    14ba:	80 93 91 05 	sts	0x0591, r24
					age[i] = 0;
    14be:	f3 01       	movw	r30, r6
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	e6 5a       	subi	r30, 0xA6	; 166
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	11 82       	std	Z+1, r1	; 0x01
    14ca:	10 82       	st	Z, r1
					if(frame_count<15)add_ball();
    14cc:	8e 89       	ldd	r24, Y+22	; 0x16
    14ce:	9f 89       	ldd	r25, Y+23	; 0x17
    14d0:	0f 97       	sbiw	r24, 0x0f	; 15
    14d2:	cc f5       	brge	.+114    	; 0x1546 <main+0x79c>
    14d4:	36 c0       	rjmp	.+108    	; 0x1542 <main+0x798>
					remove_ball(i);
				end // hit left wall
				else
				begin
					if(fix2int(x_pos[i])<75 & fix2int(x_pos[i])>60)
    14d6:	8d 91       	ld	r24, X+
    14d8:	9c 91       	ld	r25, X
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	2d 91       	ld	r18, X+
    14de:	3c 91       	ld	r19, X
    14e0:	89 2f       	mov	r24, r25
    14e2:	99 0f       	add	r25, r25
    14e4:	99 0b       	sbc	r25, r25
    14e6:	8b 34       	cpi	r24, 0x4B	; 75
    14e8:	94 f5       	brge	.+100    	; 0x154e <main+0x7a4>
    14ea:	83 2f       	mov	r24, r19
    14ec:	99 27       	eor	r25, r25
    14ee:	87 fd       	sbrc	r24, 7
    14f0:	9a 95       	dec	r25
    14f2:	8d 33       	cpi	r24, 0x3D	; 61
    14f4:	64 f1       	brlt	.+88     	; 0x154e <main+0x7a4>
					begin
						if(fix2int(y_pos[i])<=4 | fix2int(y_pos[i])>=(height-5))
    14f6:	e4 50       	subi	r30, 0x04	; 4
    14f8:	fa 4f       	sbci	r31, 0xFA	; 250
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	01 90       	ld	r0, Z+
    1500:	f0 81       	ld	r31, Z
    1502:	e0 2d       	mov	r30, r0
    1504:	89 2f       	mov	r24, r25
    1506:	99 0f       	add	r25, r25
    1508:	99 0b       	sbc	r25, r25
    150a:	85 30       	cpi	r24, 0x05	; 5
    150c:	34 f0       	brlt	.+12     	; 0x151a <main+0x770>
    150e:	8f 2f       	mov	r24, r31
    1510:	99 27       	eor	r25, r25
    1512:	87 fd       	sbrc	r24, 7
    1514:	9a 95       	dec	r25
    1516:	8a 33       	cpi	r24, 0x3A	; 58
    1518:	d4 f0       	brlt	.+52     	; 0x154e <main+0x7a4>
						begin
							is_on_screen[i] = 0;
    151a:	f3 01       	movw	r30, r6
    151c:	ec 58       	subi	r30, 0x8C	; 140
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	10 82       	st	Z, r1
							age[i] = 0;
    1522:	f3 01       	movw	r30, r6
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	e6 5a       	subi	r30, 0xA6	; 166
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	11 82       	std	Z+1, r1	; 0x01
    152e:	10 82       	st	Z, r1
							score++;
    1530:	80 91 91 05 	lds	r24, 0x0591
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	80 93 91 05 	sts	0x0591, r24
							if(frame_count<=20)add_ball();
    153a:	ae 89       	ldd	r26, Y+22	; 0x16
    153c:	bf 89       	ldd	r27, Y+23	; 0x17
    153e:	55 97       	sbiw	r26, 0x15	; 21
    1540:	14 f4       	brge	.+4      	; 0x1546 <main+0x79c>
    1542:	0e 94 80 06 	call	0xd00	; 0xd00 <add_ball>
							remove_ball(i);
    1546:	c3 01       	movw	r24, r6
    1548:	0e 94 23 05 	call	0xa46	; 0xa46 <remove_ball>
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <main+0x7aa>
						end // y check bins
						else place_ball(i);
					end // x check bins
					else place_ball(i);
    154e:	c3 01       	movw	r24, r6
    1550:	0e 94 bb 05 	call	0xb76	; 0xb76 <place_ball>

			//start_calc = Max_num_balls/3 * (time_elapsed_HS%3);
			//end_calc = Max_num_balls - Max_num_balls/3 * (2 - time_elapsed_HS % 3);


			for(int i = 0; i<Max_num_balls-1;i++)
    1554:	08 94       	sec
    1556:	61 1c       	adc	r6, r1
    1558:	71 1c       	adc	r7, r1
    155a:	bb e0       	ldi	r27, 0x0B	; 11
    155c:	6b 16       	cp	r6, r27
    155e:	71 04       	cpc	r7, r1
    1560:	09 f0       	breq	.+2      	; 0x1564 <main+0x7ba>
    1562:	8f cd       	rjmp	.-1250   	; 0x1082 <main+0x2d8>
// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	//ADMUX = 0;
	//ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
	ADCSRA |= (1<<ADSC);
    1564:	80 91 7a 00 	lds	r24, 0x007A
    1568:	80 64       	ori	r24, 0x40	; 64
    156a:	80 93 7a 00 	sts	0x007A, r24
					end // x check bins
					else place_ball(i);
				end // left wall check
			end // for i
			ADC_start_measure(0);
			if(balls_on_screen>max_balls_on_screen) max_balls_on_screen = balls_on_screen;
    156e:	ec 89       	ldd	r30, Y+20	; 0x14
    1570:	fd 89       	ldd	r31, Y+21	; 0x15
    1572:	fe 17       	cp	r31, r30
    1574:	08 f4       	brcc	.+2      	; 0x1578 <main+0x7ce>
    1576:	ed 8b       	std	Y+21, r30	; 0x15
			// 5. update text (score, time...)
			sprintf(score_str, "%3d",score);
    1578:	80 91 91 05 	lds	r24, 0x0591
    157c:	00 d0       	rcall	.+0      	; 0x157e <main+0x7d4>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <main+0x7d6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <main+0x7d8>
    1582:	ed b7       	in	r30, 0x3d	; 61
    1584:	fe b7       	in	r31, 0x3e	; 62
    1586:	31 96       	adiw	r30, 0x01	; 1
    1588:	25 e0       	ldi	r18, 0x05	; 5
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	2c 0f       	add	r18, r28
    158e:	3d 1f       	adc	r19, r29
    1590:	ad b7       	in	r26, 0x3d	; 61
    1592:	be b7       	in	r27, 0x3e	; 62
    1594:	12 96       	adiw	r26, 0x02	; 2
    1596:	3c 93       	st	X, r19
    1598:	2e 93       	st	-X, r18
    159a:	11 97       	sbiw	r26, 0x01	; 1
    159c:	a7 e2       	ldi	r26, 0x27	; 39
    159e:	b1 e0       	ldi	r27, 0x01	; 1
    15a0:	b3 83       	std	Z+3, r27	; 0x03
    15a2:	a2 83       	std	Z+2, r26	; 0x02
    15a4:	84 83       	std	Z+4, r24	; 0x04
    15a6:	15 82       	std	Z+5, r1	; 0x05
    15a8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sprintf>
			video_puts(110,1,score_str);
    15ac:	ed b7       	in	r30, 0x3d	; 61
    15ae:	fe b7       	in	r31, 0x3e	; 62
    15b0:	36 96       	adiw	r30, 0x06	; 6
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	fe bf       	out	0x3e, r31	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	ed bf       	out	0x3d, r30	; 61
    15bc:	8e e6       	ldi	r24, 0x6E	; 110
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	ae 01       	movw	r20, r28
    15c2:	4b 5f       	subi	r20, 0xFB	; 251
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
			sprintf(real_time_str, "%3d", balls_on_screen);
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <main+0x822>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <main+0x824>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <main+0x826>
    15d0:	ed b7       	in	r30, 0x3d	; 61
    15d2:	fe b7       	in	r31, 0x3e	; 62
    15d4:	31 96       	adiw	r30, 0x01	; 1
    15d6:	2d e0       	ldi	r18, 0x0D	; 13
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	2c 0f       	add	r18, r28
    15dc:	3d 1f       	adc	r19, r29
    15de:	ad b7       	in	r26, 0x3d	; 61
    15e0:	be b7       	in	r27, 0x3e	; 62
    15e2:	12 96       	adiw	r26, 0x02	; 2
    15e4:	3c 93       	st	X, r19
    15e6:	2e 93       	st	-X, r18
    15e8:	11 97       	sbiw	r26, 0x01	; 1
    15ea:	87 e2       	ldi	r24, 0x27	; 39
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	93 83       	std	Z+3, r25	; 0x03
    15f0:	82 83       	std	Z+2, r24	; 0x02
    15f2:	9c 89       	ldd	r25, Y+20	; 0x14
    15f4:	94 83       	std	Z+4, r25	; 0x04
    15f6:	15 82       	std	Z+5, r1	; 0x05
    15f8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sprintf>
			video_puts(6,1,real_time_str);
    15fc:	ad b7       	in	r26, 0x3d	; 61
    15fe:	be b7       	in	r27, 0x3e	; 62
    1600:	16 96       	adiw	r26, 0x06	; 6
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	be bf       	out	0x3e, r27	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	ad bf       	out	0x3d, r26	; 61
    160c:	86 e0       	ldi	r24, 0x06	; 6
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	ae 01       	movw	r20, r28
    1612:	43 5f       	subi	r20, 0xF3	; 243
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
    1616:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
    161a:	d9 88       	ldd	r13, Y+17	; 0x11
	video_pt(6,(200*53/255)+2,0);
	video_pt(6,(200*53/255),0);
	video_puts(30,30,"       ");
	video_puts(27,(200*53/255)+1,"           ");

	while(time_elapsed_HS<=200)
    161c:	80 91 92 05 	lds	r24, 0x0592
    1620:	89 3c       	cpi	r24, 0xC9	; 201
    1622:	08 f4       	brcc	.+2      	; 0x1626 <main+0x87c>
    1624:	86 cc       	rjmp	.-1780   	; 0xf32 <main+0x188>
    1626:	00 e0       	ldi	r16, 0x00	; 0
    1628:	10 e0       	ldi	r17, 0x00	; 0
			video_puts(6,1,real_time_str);
	
		end // linecount == screenBot
	end // while time < 200

	for(int gh = 0; gh<Max_num_balls; gh++) remove_ball(gh); // clear the screen
    162a:	c8 01       	movw	r24, r16
    162c:	0e 94 23 05 	call	0xa46	; 0xa46 <remove_ball>
    1630:	0f 5f       	subi	r16, 0xFF	; 255
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	0c 30       	cpi	r16, 0x0C	; 12
    1636:	11 05       	cpc	r17, r1
    1638:	c1 f7       	brne	.-16     	; 0x162a <main+0x880>

	video_line(0,0,width,0,1);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	01 e0       	ldi	r16, 0x01	; 1
    1644:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(0,height,width-17,height,1);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	6f e3       	ldi	r22, 0x3F	; 63
    164c:	4e e6       	ldi	r20, 0x6E	; 110
    164e:	2f e3       	ldi	r18, 0x3F	; 63
    1650:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_pt(60,1,1);
    1654:	8c e3       	ldi	r24, 0x3C	; 60
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(75,1,1);
    165e:	8b e4       	ldi	r24, 0x4B	; 75
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(60,height-1,1);
    1668:	8c e3       	ldi	r24, 0x3C	; 60
    166a:	6e e3       	ldi	r22, 0x3E	; 62
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_pt(75,height-1,1);
    1672:	8b e4       	ldi	r24, 0x4B	; 75
    1674:	6e e3       	ldi	r22, 0x3E	; 62
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	0e 94 a5 03 	call	0x74a	; 0x74a <video_pt>
	video_line(width,0,width,height,1);
    167c:	8f e7       	ldi	r24, 0x7F	; 127
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	2f e3       	ldi	r18, 0x3F	; 63
    1684:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(1,1,1,height-1,0);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	2e e3       	ldi	r18, 0x3E	; 62
    1690:	00 e0       	ldi	r16, 0x00	; 0
    1692:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>
	video_line(2,1,2,height-1,0);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	42 e0       	ldi	r20, 0x02	; 2
    169c:	2e e3       	ldi	r18, 0x3E	; 62
    169e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <video_line>

	while(1)
	begin
		sprintf(score_str, "%i",score);
    16a2:	75 e0       	ldi	r23, 0x05	; 5
    16a4:	c7 2e       	mov	r12, r23
    16a6:	d1 2c       	mov	r13, r1
    16a8:	cc 0e       	add	r12, r28
    16aa:	dd 1e       	adc	r13, r29
    16ac:	6b e2       	ldi	r22, 0x2B	; 43
    16ae:	e6 2e       	mov	r14, r22
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	f6 2e       	mov	r15, r22
		sprintf(max_str, "%i",max_balls_on_screen);
    16b4:	8e 01       	movw	r16, r28
    16b6:	07 5f       	subi	r16, 0xF7	; 247
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
	video_line(1,1,1,height-1,0);
	video_line(2,1,2,height-1,0);

	while(1)
	begin
		sprintf(score_str, "%i",score);
    16ba:	80 91 91 05 	lds	r24, 0x0591
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <main+0x916>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <main+0x918>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <main+0x91a>
    16c4:	ed b7       	in	r30, 0x3d	; 61
    16c6:	fe b7       	in	r31, 0x3e	; 62
    16c8:	31 96       	adiw	r30, 0x01	; 1
    16ca:	ad b7       	in	r26, 0x3d	; 61
    16cc:	be b7       	in	r27, 0x3e	; 62
    16ce:	12 96       	adiw	r26, 0x02	; 2
    16d0:	dc 92       	st	X, r13
    16d2:	ce 92       	st	-X, r12
    16d4:	11 97       	sbiw	r26, 0x01	; 1
    16d6:	f3 82       	std	Z+3, r15	; 0x03
    16d8:	e2 82       	std	Z+2, r14	; 0x02
    16da:	84 83       	std	Z+4, r24	; 0x04
    16dc:	15 82       	std	Z+5, r1	; 0x05
    16de:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sprintf>
		sprintf(max_str, "%i",max_balls_on_screen);
    16e2:	ed b7       	in	r30, 0x3d	; 61
    16e4:	fe b7       	in	r31, 0x3e	; 62
    16e6:	31 96       	adiw	r30, 0x01	; 1
    16e8:	ad b7       	in	r26, 0x3d	; 61
    16ea:	be b7       	in	r27, 0x3e	; 62
    16ec:	12 96       	adiw	r26, 0x02	; 2
    16ee:	1c 93       	st	X, r17
    16f0:	0e 93       	st	-X, r16
    16f2:	11 97       	sbiw	r26, 0x01	; 1
    16f4:	f3 82       	std	Z+3, r15	; 0x03
    16f6:	e2 82       	std	Z+2, r14	; 0x02
    16f8:	bd 89       	ldd	r27, Y+21	; 0x15
    16fa:	b4 83       	std	Z+4, r27	; 0x04
    16fc:	15 82       	std	Z+5, r1	; 0x05
    16fe:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sprintf>
		video_puts(95,52,max_str);
    1702:	ed b7       	in	r30, 0x3d	; 61
    1704:	fe b7       	in	r31, 0x3e	; 62
    1706:	36 96       	adiw	r30, 0x06	; 6
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	fe bf       	out	0x3e, r31	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	ed bf       	out	0x3d, r30	; 61
    1712:	8f e5       	ldi	r24, 0x5F	; 95
    1714:	64 e3       	ldi	r22, 0x34	; 52
    1716:	a8 01       	movw	r20, r16
    1718:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
		video_puts(30,52,"Max balls:");
    171c:	8e e1       	ldi	r24, 0x1E	; 30
    171e:	64 e3       	ldi	r22, 0x34	; 52
    1720:	4e e2       	ldi	r20, 0x2E	; 46
    1722:	51 e0       	ldi	r21, 0x01	; 1
    1724:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
		video_puts(30,30,"Time Is Up!");
    1728:	8e e1       	ldi	r24, 0x1E	; 30
    172a:	6e e1       	ldi	r22, 0x1E	; 30
    172c:	49 e3       	ldi	r20, 0x39	; 57
    172e:	51 e0       	ldi	r21, 0x01	; 1
    1730:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
		video_puts(30,42,"Your score:");
    1734:	8e e1       	ldi	r24, 0x1E	; 30
    1736:	6a e2       	ldi	r22, 0x2A	; 42
    1738:	45 e4       	ldi	r20, 0x45	; 69
    173a:	51 e0       	ldi	r21, 0x01	; 1
    173c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
		video_puts(100,42,score_str);
    1740:	84 e6       	ldi	r24, 0x64	; 100
    1742:	6a e2       	ldi	r22, 0x2A	; 42
    1744:	a6 01       	movw	r20, r12
    1746:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <video_puts>
    174a:	b7 cf       	rjmp	.-146    	; 0x16ba <main+0x910>

0000174c <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
    1750:	00 d0       	rcall	.+0      	; 0x1752 <write_LCD+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <write_LCD+0x8>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <write_LCD+0xa>
    1756:	ed b7       	in	r30, 0x3d	; 61
    1758:	fe b7       	in	r31, 0x3e	; 62
    175a:	31 96       	adiw	r30, 0x01	; 1
    175c:	00 e8       	ldi	r16, 0x80	; 128
    175e:	15 e0       	ldi	r17, 0x05	; 5
    1760:	ad b7       	in	r26, 0x3d	; 61
    1762:	be b7       	in	r27, 0x3e	; 62
    1764:	12 96       	adiw	r26, 0x02	; 2
    1766:	1c 93       	st	X, r17
    1768:	0e 93       	st	-X, r16
    176a:	11 97       	sbiw	r26, 0x01	; 1
    176c:	27 e2       	ldi	r18, 0x27	; 39
    176e:	31 e0       	ldi	r19, 0x01	; 1
    1770:	33 83       	std	Z+3, r19	; 0x03
    1772:	22 83       	std	Z+2, r18	; 0x02
    1774:	84 83       	std	Z+4, r24	; 0x04
    1776:	15 82       	std	Z+5, r1	; 0x05
    1778:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <sprintf>
	LCDGotoXY(0, 1);
    177c:	8d b7       	in	r24, 0x3d	; 61
    177e:	9e b7       	in	r25, 0x3e	; 62
    1780:	06 96       	adiw	r24, 0x06	; 6
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	9e bf       	out	0x3e, r25	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	8d bf       	out	0x3d, r24	; 61
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	0e 94 46 0c 	call	0x188c	; 0x188c <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
    1794:	f8 01       	movw	r30, r16
    1796:	01 90       	ld	r0, Z+
    1798:	00 20       	and	r0, r0
    179a:	e9 f7       	brne	.-6      	; 0x1796 <write_LCD+0x4a>
    179c:	31 97       	sbiw	r30, 0x01	; 1
    179e:	e0 1b       	sub	r30, r16
    17a0:	f1 0b       	sbc	r31, r17
    17a2:	c8 01       	movw	r24, r16
    17a4:	6e 2f       	mov	r22, r30
    17a6:	0e 94 31 0c 	call	0x1862	; 0x1862 <LCDstring>
end
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
    17b0:	0e 94 90 0c 	call	0x1920	; 0x1920 <LCDinit>
	LCDcursorOFF();
    17b4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <LCDcursorOFF>
	LCDclr();				//clear the display
    17b8:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCDclr>
	LCDGotoXY(0,0);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	0e 94 46 0c 	call	0x188c	; 0x188c <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    17c4:	8c e8       	ldi	r24, 0x8C	; 140
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <CopyStringtoLCD>
	LCD_char_count = 0;
    17d0:	10 92 9f 05 	sts	0x059F, r1
end
    17d4:	08 95       	ret

000017d6 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    17d6:	28 2f       	mov	r18, r24
    17d8:	20 7f       	andi	r18, 0xF0	; 240
    17da:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    17dc:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    17de:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17e0:	20 e4       	ldi	r18, 0x40	; 64
    17e2:	3f e1       	ldi	r19, 0x1F	; 31
    17e4:	f9 01       	movw	r30, r18
    17e6:	31 97       	sbiw	r30, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    17ea:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    17ec:	40 98       	cbi	0x08, 0	; 8
    17ee:	f9 01       	movw	r30, r18
    17f0:	31 97       	sbiw	r30, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	44 e0       	ldi	r20, 0x04	; 4
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	4a 95       	dec	r20
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <LCDsendChar+0x22>
    1800:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1802:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1804:	42 9a       	sbi	0x08, 2	; 8
    1806:	c9 01       	movw	r24, r18
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    180c:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    180e:	40 98       	cbi	0x08, 0	; 8
    1810:	c9 01       	movw	r24, r18
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    1816:	08 95       	ret

00001818 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    1818:	28 2f       	mov	r18, r24
    181a:	20 7f       	andi	r18, 0xF0	; 240
    181c:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    181e:	42 9a       	sbi	0x08, 2	; 8
    1820:	20 e4       	ldi	r18, 0x40	; 64
    1822:	3f e1       	ldi	r19, 0x1F	; 31
    1824:	f9 01       	movw	r30, r18
    1826:	31 97       	sbiw	r30, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    182a:	42 98       	cbi	0x08, 2	; 8
    182c:	f9 01       	movw	r30, r18
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	54 e0       	ldi	r21, 0x04	; 4
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	5a 95       	dec	r21
    183c:	e1 f7       	brne	.-8      	; 0x1836 <LCDsendCommand+0x1e>
    183e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1840:	42 9a       	sbi	0x08, 2	; 8
    1842:	c9 01       	movw	r24, r18
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1848:	42 98       	cbi	0x08, 2	; 8
    184a:	c9 01       	movw	r24, r18
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	f1 f7       	brne	.-4      	; 0x184c <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    1850:	08 95       	ret

00001852 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    1858:	08 95       	ret

0000185a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    1860:	08 95       	ret

00001862 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	49 f0       	breq	.+18     	; 0x1882 <LCDstring+0x20>
    1870:	ec 01       	movw	r28, r24
    1872:	10 e0       	ldi	r17, 0x00	; 0
    1874:	04 c0       	rjmp	.+8      	; 0x187e <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    1876:	89 91       	ld	r24, Y+
    1878:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    187c:	1f 5f       	subi	r17, 0xFF	; 255
    187e:	10 17       	cp	r17, r16
    1880:	d0 f3       	brcs	.-12     	; 0x1876 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    188c:	62 30       	cpi	r22, 0x02	; 2
    188e:	31 f0       	breq	.+12     	; 0x189c <LCDGotoXY+0x10>
    1890:	63 30       	cpi	r22, 0x03	; 3
    1892:	31 f0       	breq	.+12     	; 0x18a0 <LCDGotoXY+0x14>
    1894:	61 30       	cpi	r22, 0x01	; 1
    1896:	29 f4       	brne	.+10     	; 0x18a2 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1898:	80 5c       	subi	r24, 0xC0	; 192
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    189c:	8c 5e       	subi	r24, 0xEC	; 236
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    18a0:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    18a2:	80 68       	ori	r24, 0x80	; 128
    18a4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
	
}
    18a8:	08 95       	ret

000018aa <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
    18b2:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    18b4:	64 2f       	mov	r22, r20
    18b6:	0e 94 46 0c 	call	0x188c	; 0x188c <LCDGotoXY>
    18ba:	10 e0       	ldi	r17, 0x00	; 0
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    18be:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    18c2:	1f 5f       	subi	r17, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	e1 0f       	add	r30, r17
    18c8:	f1 1d       	adc	r31, r1
    18ca:	84 91       	lpm	r24, Z+
    18cc:	88 23       	and	r24, r24
    18ce:	b9 f7       	brne	.-18     	; 0x18be <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	08 95       	ret

000018d8 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	7c 01       	movw	r14, r24
    18e6:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    18e8:	11 0f       	add	r17, r17
    18ea:	11 0f       	add	r17, r17
    18ec:	11 0f       	add	r17, r17
    18ee:	10 64       	ori	r17, 0x40	; 64
    18f0:	c0 e0       	ldi	r28, 0x00	; 0
    18f2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    18f4:	f7 01       	movw	r30, r14
    18f6:	ec 0f       	add	r30, r28
    18f8:	fd 1f       	adc	r31, r29
    18fa:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    18fc:	81 2f       	mov	r24, r17
    18fe:	8c 0f       	add	r24, r28
    1900:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
		LCDsendChar(pcc);
    1904:	80 2f       	mov	r24, r16
    1906:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    190a:	21 96       	adiw	r28, 0x01	; 1
    190c:	c8 30       	cpi	r28, 0x08	; 8
    190e:	d1 05       	cpc	r29, r1
    1910:	89 f7       	brne	.-30     	; 0x18f4 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret

00001920 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	80 e6       	ldi	r24, 0x60	; 96
    1928:	9a ee       	ldi	r25, 0xEA	; 234
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    192e:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1930:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    1932:	87 b1       	in	r24, 0x07	; 7
    1934:	80 6f       	ori	r24, 0xF0	; 240
    1936:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1938:	87 b1       	in	r24, 0x07	; 7
    193a:	87 60       	ori	r24, 0x07	; 7
    193c:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    193e:	80 e3       	ldi	r24, 0x30	; 48
    1940:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1942:	42 9a       	sbi	0x08, 2	; 8
    1944:	20 e4       	ldi	r18, 0x40	; 64
    1946:	3f e1       	ldi	r19, 0x1F	; 31
    1948:	f9 01       	movw	r30, r18
    194a:	31 97       	sbiw	r30, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    194e:	42 98       	cbi	0x08, 2	; 8
    1950:	f9 01       	movw	r30, r18
    1952:	31 97       	sbiw	r30, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1956:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1958:	42 9a       	sbi	0x08, 2	; 8
    195a:	c9 01       	movw	r24, r18
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1960:	42 98       	cbi	0x08, 2	; 8
    1962:	c9 01       	movw	r24, r18
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    196c:	42 9a       	sbi	0x08, 2	; 8
    196e:	c9 01       	movw	r24, r18
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1974:	42 98       	cbi	0x08, 2	; 8
    1976:	c9 01       	movw	r24, r18
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    197c:	88 e2       	ldi	r24, 0x28	; 40
    197e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1982:	8c e0       	ldi	r24, 0x0C	; 12
    1984:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
    1988:	c8 e9       	ldi	r28, 0x98	; 152
    198a:	d4 e0       	ldi	r29, 0x04	; 4
    198c:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    198e:	16 2f       	mov	r17, r22
    1990:	1f 5f       	subi	r17, 0xFF	; 255
    1992:	ce 01       	movw	r24, r28
    1994:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <LCDdefinechar>
    1998:	28 96       	adiw	r28, 0x08	; 8
    199a:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    199c:	18 30       	cpi	r17, 0x08	; 8
    199e:	b9 f7       	brne	.-18     	; 0x198e <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	08 95       	ret

000019a8 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	08 2f       	mov	r16, r24
    19ae:	10 e0       	ldi	r17, 0x00	; 0
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    19b2:	8e e1       	ldi	r24, 0x1E	; 30
    19b4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    19b8:	1f 5f       	subi	r17, 0xFF	; 255
    19ba:	10 17       	cp	r17, r16
    19bc:	d0 f3       	brcs	.-12     	; 0x19b2 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	08 2f       	mov	r16, r24
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    19ce:	88 e1       	ldi	r24, 0x18	; 24
    19d0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    19d4:	1f 5f       	subi	r17, 0xFF	; 255
    19d6:	10 17       	cp	r17, r16
    19d8:	d0 f3       	brcs	.-12     	; 0x19ce <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	08 95       	ret

000019e0 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    19e0:	8e e0       	ldi	r24, 0x0E	; 14
    19e2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    19e6:	08 95       	ret

000019e8 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    19e8:	8f e0       	ldi	r24, 0x0F	; 15
    19ea:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    19ee:	08 95       	ret

000019f0 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    19f0:	8c e0       	ldi	r24, 0x0C	; 12
    19f2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    19f6:	08 95       	ret

000019f8 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    19f8:	88 e0       	ldi	r24, 0x08	; 8
    19fa:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    19fe:	08 95       	ret

00001a00 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1a00:	8c e0       	ldi	r24, 0x0C	; 12
    1a02:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
}
    1a06:	08 95       	ret

00001a08 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	08 2f       	mov	r16, r24
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1a12:	80 e1       	ldi	r24, 0x10	; 16
    1a14:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1a18:	1f 5f       	subi	r17, 0xFF	; 255
    1a1a:	10 17       	cp	r17, r16
    1a1c:	d0 f3       	brcs	.-12     	; 0x1a12 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	08 95       	ret

00001a24 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	08 2f       	mov	r16, r24
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1a2e:	84 e1       	ldi	r24, 0x14	; 20
    1a30:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    1a34:	1f 5f       	subi	r17, 0xFF	; 255
    1a36:	10 17       	cp	r17, r16
    1a38:	d0 f3       	brcs	.-12     	; 0x1a2e <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1a50:	96 e0       	ldi	r25, 0x06	; 6
    1a52:	89 9f       	mul	r24, r25
    1a54:	c0 01       	movw	r24, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	24 2f       	mov	r18, r20
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	ac 01       	movw	r20, r24
    1a5e:	42 9f       	mul	r20, r18
    1a60:	c0 01       	movw	r24, r0
    1a62:	43 9f       	mul	r20, r19
    1a64:	90 0d       	add	r25, r0
    1a66:	52 9f       	mul	r21, r18
    1a68:	90 0d       	add	r25, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__divmodhi4>
    1a72:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    1a74:	cb 01       	movw	r24, r22
    1a76:	66 e0       	ldi	r22, 0x06	; 6
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodhi4>
    1a7e:	e8 2e       	mov	r14, r24
    1a80:	ff 24       	eor	r15, r15
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	10 e0       	ldi	r17, 0x00	; 0
    1a86:	12 c0       	rjmp	.+36     	; 0x1aac <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1a88:	c8 01       	movw	r24, r16
    1a8a:	05 96       	adiw	r24, 0x05	; 5
    1a8c:	c8 17       	cp	r28, r24
    1a8e:	d9 07       	cpc	r29, r25
    1a90:	10 f0       	brcs	.+4      	; 0x1a96 <LCDprogressBar+0x56>
    1a92:	85 e0       	ldi	r24, 0x05	; 5
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    1a96:	c0 17       	cp	r28, r16
    1a98:	d1 07       	cpc	r29, r17
    1a9a:	10 f0       	brcs	.+4      	; 0x1aa0 <LCDprogressBar+0x60>
    1a9c:	8e 2d       	mov	r24, r14
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <LCDprogressBar+0x62>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1aa2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    1aa6:	f3 94       	inc	r15
    1aa8:	0a 5f       	subi	r16, 0xFA	; 250
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	fd 14       	cp	r15, r13
    1aae:	60 f3       	brcs	.-40     	; 0x1a88 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	08 95       	ret

00001ac0 <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
    1ac0:	48 2f       	mov	r20, r24
	mov  r21,r25											
    1ac2:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
    1ac4:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
    1ac6:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
    1ac8:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
    1aca:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
    1acc:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
    1ace:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
    1ad0:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
    1ad2:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
    1ad4:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
    1ad6:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
    1ad8:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
    1ada:	08 95       	ret

00001adc <__udivmodqi4>:
    1adc:	99 1b       	sub	r25, r25
    1ade:	79 e0       	ldi	r23, 0x09	; 9
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <__udivmodqi4_ep>

00001ae2 <__udivmodqi4_loop>:
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	96 17       	cp	r25, r22
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <__udivmodqi4_ep>
    1ae8:	96 1b       	sub	r25, r22

00001aea <__udivmodqi4_ep>:
    1aea:	88 1f       	adc	r24, r24
    1aec:	7a 95       	dec	r23
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <__udivmodqi4_loop>
    1af0:	80 95       	com	r24
    1af2:	08 95       	ret

00001af4 <__udivmodhi4>:
    1af4:	aa 1b       	sub	r26, r26
    1af6:	bb 1b       	sub	r27, r27
    1af8:	51 e1       	ldi	r21, 0x11	; 17
    1afa:	07 c0       	rjmp	.+14     	; 0x1b0a <__udivmodhi4_ep>

00001afc <__udivmodhi4_loop>:
    1afc:	aa 1f       	adc	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	a6 17       	cp	r26, r22
    1b02:	b7 07       	cpc	r27, r23
    1b04:	10 f0       	brcs	.+4      	; 0x1b0a <__udivmodhi4_ep>
    1b06:	a6 1b       	sub	r26, r22
    1b08:	b7 0b       	sbc	r27, r23

00001b0a <__udivmodhi4_ep>:
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	5a 95       	dec	r21
    1b10:	a9 f7       	brne	.-22     	; 0x1afc <__udivmodhi4_loop>
    1b12:	80 95       	com	r24
    1b14:	90 95       	com	r25
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	08 95       	ret

00001b1c <__divmodhi4>:
    1b1c:	97 fb       	bst	r25, 7
    1b1e:	09 2e       	mov	r0, r25
    1b20:	07 26       	eor	r0, r23
    1b22:	0a d0       	rcall	.+20     	; 0x1b38 <__divmodhi4_neg1>
    1b24:	77 fd       	sbrc	r23, 7
    1b26:	04 d0       	rcall	.+8      	; 0x1b30 <__divmodhi4_neg2>
    1b28:	e5 df       	rcall	.-54     	; 0x1af4 <__udivmodhi4>
    1b2a:	06 d0       	rcall	.+12     	; 0x1b38 <__divmodhi4_neg1>
    1b2c:	00 20       	and	r0, r0
    1b2e:	1a f4       	brpl	.+6      	; 0x1b36 <__divmodhi4_exit>

00001b30 <__divmodhi4_neg2>:
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255

00001b36 <__divmodhi4_exit>:
    1b36:	08 95       	ret

00001b38 <__divmodhi4_neg1>:
    1b38:	f6 f7       	brtc	.-4      	; 0x1b36 <__divmodhi4_exit>
    1b3a:	90 95       	com	r25
    1b3c:	81 95       	neg	r24
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <sprintf>:
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	0d 89       	ldd	r16, Y+21	; 0x15
    1b5c:	1e 89       	ldd	r17, Y+22	; 0x16
    1b5e:	86 e0       	ldi	r24, 0x06	; 6
    1b60:	8c 83       	std	Y+4, r24	; 0x04
    1b62:	1a 83       	std	Y+2, r17	; 0x02
    1b64:	09 83       	std	Y+1, r16	; 0x01
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	9f e7       	ldi	r25, 0x7F	; 127
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
    1b6e:	9e 01       	movw	r18, r28
    1b70:	27 5e       	subi	r18, 0xE7	; 231
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	6f 89       	ldd	r22, Y+23	; 0x17
    1b7a:	78 8d       	ldd	r23, Y+24	; 0x18
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <vfprintf>
    1b82:	2f 81       	ldd	r18, Y+7	; 0x07
    1b84:	38 85       	ldd	r19, Y+8	; 0x08
    1b86:	02 0f       	add	r16, r18
    1b88:	13 1f       	adc	r17, r19
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	10 82       	st	Z, r1
    1b8e:	2e 96       	adiw	r28, 0x0e	; 14
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <vfprintf>:
    1ba4:	2f 92       	push	r2
    1ba6:	3f 92       	push	r3
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	2b 97       	sbiw	r28, 0x0b	; 11
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	3c 01       	movw	r6, r24
    1bda:	2b 01       	movw	r4, r22
    1bdc:	5a 01       	movw	r10, r20
    1bde:	fc 01       	movw	r30, r24
    1be0:	17 82       	std	Z+7, r1	; 0x07
    1be2:	16 82       	std	Z+6, r1	; 0x06
    1be4:	83 81       	ldd	r24, Z+3	; 0x03
    1be6:	81 fd       	sbrc	r24, 1
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <vfprintf+0x4c>
    1bea:	6f ef       	ldi	r22, 0xFF	; 255
    1bec:	7f ef       	ldi	r23, 0xFF	; 255
    1bee:	c6 c1       	rjmp	.+908    	; 0x1f7c <vfprintf+0x3d8>
    1bf0:	9a e0       	ldi	r25, 0x0A	; 10
    1bf2:	89 2e       	mov	r8, r25
    1bf4:	1e 01       	movw	r2, r28
    1bf6:	08 94       	sec
    1bf8:	21 1c       	adc	r2, r1
    1bfa:	31 1c       	adc	r3, r1
    1bfc:	f3 01       	movw	r30, r6
    1bfe:	23 81       	ldd	r18, Z+3	; 0x03
    1c00:	f2 01       	movw	r30, r4
    1c02:	23 fd       	sbrc	r18, 3
    1c04:	85 91       	lpm	r24, Z+
    1c06:	23 ff       	sbrs	r18, 3
    1c08:	81 91       	ld	r24, Z+
    1c0a:	2f 01       	movw	r4, r30
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfprintf+0x6e>
    1c10:	b2 c1       	rjmp	.+868    	; 0x1f76 <vfprintf+0x3d2>
    1c12:	85 32       	cpi	r24, 0x25	; 37
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <vfprintf+0x80>
    1c16:	23 fd       	sbrc	r18, 3
    1c18:	85 91       	lpm	r24, Z+
    1c1a:	23 ff       	sbrs	r18, 3
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	2f 01       	movw	r4, r30
    1c20:	85 32       	cpi	r24, 0x25	; 37
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <vfprintf+0x8a>
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b3 01       	movw	r22, r6
    1c28:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1c2c:	e7 cf       	rjmp	.-50     	; 0x1bfc <vfprintf+0x58>
    1c2e:	98 2f       	mov	r25, r24
    1c30:	ff 24       	eor	r15, r15
    1c32:	ee 24       	eor	r14, r14
    1c34:	99 24       	eor	r9, r9
    1c36:	ff e1       	ldi	r31, 0x1F	; 31
    1c38:	ff 15       	cp	r31, r15
    1c3a:	d0 f0       	brcs	.+52     	; 0x1c70 <vfprintf+0xcc>
    1c3c:	9b 32       	cpi	r25, 0x2B	; 43
    1c3e:	69 f0       	breq	.+26     	; 0x1c5a <vfprintf+0xb6>
    1c40:	9c 32       	cpi	r25, 0x2C	; 44
    1c42:	28 f4       	brcc	.+10     	; 0x1c4e <vfprintf+0xaa>
    1c44:	90 32       	cpi	r25, 0x20	; 32
    1c46:	59 f0       	breq	.+22     	; 0x1c5e <vfprintf+0xba>
    1c48:	93 32       	cpi	r25, 0x23	; 35
    1c4a:	91 f4       	brne	.+36     	; 0x1c70 <vfprintf+0xcc>
    1c4c:	0e c0       	rjmp	.+28     	; 0x1c6a <vfprintf+0xc6>
    1c4e:	9d 32       	cpi	r25, 0x2D	; 45
    1c50:	49 f0       	breq	.+18     	; 0x1c64 <vfprintf+0xc0>
    1c52:	90 33       	cpi	r25, 0x30	; 48
    1c54:	69 f4       	brne	.+26     	; 0x1c70 <vfprintf+0xcc>
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	24 c0       	rjmp	.+72     	; 0x1ca2 <vfprintf+0xfe>
    1c5a:	52 e0       	ldi	r21, 0x02	; 2
    1c5c:	f5 2a       	or	r15, r21
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	f8 2a       	or	r15, r24
    1c62:	28 c0       	rjmp	.+80     	; 0x1cb4 <vfprintf+0x110>
    1c64:	98 e0       	ldi	r25, 0x08	; 8
    1c66:	f9 2a       	or	r15, r25
    1c68:	25 c0       	rjmp	.+74     	; 0x1cb4 <vfprintf+0x110>
    1c6a:	e0 e1       	ldi	r30, 0x10	; 16
    1c6c:	fe 2a       	or	r15, r30
    1c6e:	22 c0       	rjmp	.+68     	; 0x1cb4 <vfprintf+0x110>
    1c70:	f7 fc       	sbrc	r15, 7
    1c72:	29 c0       	rjmp	.+82     	; 0x1cc6 <vfprintf+0x122>
    1c74:	89 2f       	mov	r24, r25
    1c76:	80 53       	subi	r24, 0x30	; 48
    1c78:	8a 30       	cpi	r24, 0x0A	; 10
    1c7a:	70 f4       	brcc	.+28     	; 0x1c98 <vfprintf+0xf4>
    1c7c:	f6 fe       	sbrs	r15, 6
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <vfprintf+0xe6>
    1c80:	98 9c       	mul	r9, r8
    1c82:	90 2c       	mov	r9, r0
    1c84:	11 24       	eor	r1, r1
    1c86:	98 0e       	add	r9, r24
    1c88:	15 c0       	rjmp	.+42     	; 0x1cb4 <vfprintf+0x110>
    1c8a:	e8 9c       	mul	r14, r8
    1c8c:	e0 2c       	mov	r14, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	e8 0e       	add	r14, r24
    1c92:	f0 e2       	ldi	r31, 0x20	; 32
    1c94:	ff 2a       	or	r15, r31
    1c96:	0e c0       	rjmp	.+28     	; 0x1cb4 <vfprintf+0x110>
    1c98:	9e 32       	cpi	r25, 0x2E	; 46
    1c9a:	29 f4       	brne	.+10     	; 0x1ca6 <vfprintf+0x102>
    1c9c:	f6 fc       	sbrc	r15, 6
    1c9e:	6b c1       	rjmp	.+726    	; 0x1f76 <vfprintf+0x3d2>
    1ca0:	40 e4       	ldi	r20, 0x40	; 64
    1ca2:	f4 2a       	or	r15, r20
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <vfprintf+0x110>
    1ca6:	9c 36       	cpi	r25, 0x6C	; 108
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <vfprintf+0x10c>
    1caa:	50 e8       	ldi	r21, 0x80	; 128
    1cac:	f5 2a       	or	r15, r21
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfprintf+0x110>
    1cb0:	98 36       	cpi	r25, 0x68	; 104
    1cb2:	49 f4       	brne	.+18     	; 0x1cc6 <vfprintf+0x122>
    1cb4:	f2 01       	movw	r30, r4
    1cb6:	23 fd       	sbrc	r18, 3
    1cb8:	95 91       	lpm	r25, Z+
    1cba:	23 ff       	sbrs	r18, 3
    1cbc:	91 91       	ld	r25, Z+
    1cbe:	2f 01       	movw	r4, r30
    1cc0:	99 23       	and	r25, r25
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <vfprintf+0x122>
    1cc4:	b8 cf       	rjmp	.-144    	; 0x1c36 <vfprintf+0x92>
    1cc6:	89 2f       	mov	r24, r25
    1cc8:	85 54       	subi	r24, 0x45	; 69
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	18 f0       	brcs	.+6      	; 0x1cd4 <vfprintf+0x130>
    1cce:	80 52       	subi	r24, 0x20	; 32
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	38 f4       	brcc	.+14     	; 0x1ce2 <vfprintf+0x13e>
    1cd4:	44 e0       	ldi	r20, 0x04	; 4
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	a4 0e       	add	r10, r20
    1cda:	b5 1e       	adc	r11, r21
    1cdc:	5f e3       	ldi	r21, 0x3F	; 63
    1cde:	59 83       	std	Y+1, r21	; 0x01
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <vfprintf+0x15c>
    1ce2:	93 36       	cpi	r25, 0x63	; 99
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <vfprintf+0x14e>
    1ce6:	93 37       	cpi	r25, 0x73	; 115
    1ce8:	79 f0       	breq	.+30     	; 0x1d08 <vfprintf+0x164>
    1cea:	93 35       	cpi	r25, 0x53	; 83
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <vfprintf+0x14c>
    1cee:	56 c0       	rjmp	.+172    	; 0x1d9c <vfprintf+0x1f8>
    1cf0:	20 c0       	rjmp	.+64     	; 0x1d32 <vfprintf+0x18e>
    1cf2:	f5 01       	movw	r30, r10
    1cf4:	80 81       	ld	r24, Z
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	42 e0       	ldi	r20, 0x02	; 2
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	a4 0e       	add	r10, r20
    1cfe:	b5 1e       	adc	r11, r21
    1d00:	61 01       	movw	r12, r2
    1d02:	01 e0       	ldi	r16, 0x01	; 1
    1d04:	10 e0       	ldi	r17, 0x00	; 0
    1d06:	12 c0       	rjmp	.+36     	; 0x1d2c <vfprintf+0x188>
    1d08:	f5 01       	movw	r30, r10
    1d0a:	c0 80       	ld	r12, Z
    1d0c:	d1 80       	ldd	r13, Z+1	; 0x01
    1d0e:	f6 fc       	sbrc	r15, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x174>
    1d12:	6f ef       	ldi	r22, 0xFF	; 255
    1d14:	7f ef       	ldi	r23, 0xFF	; 255
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x178>
    1d18:	69 2d       	mov	r22, r9
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	42 e0       	ldi	r20, 0x02	; 2
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	a4 0e       	add	r10, r20
    1d22:	b5 1e       	adc	r11, r21
    1d24:	c6 01       	movw	r24, r12
    1d26:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <strnlen>
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	5f e7       	ldi	r21, 0x7F	; 127
    1d2e:	f5 22       	and	r15, r21
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <vfprintf+0x1b6>
    1d32:	f5 01       	movw	r30, r10
    1d34:	c0 80       	ld	r12, Z
    1d36:	d1 80       	ldd	r13, Z+1	; 0x01
    1d38:	f6 fc       	sbrc	r15, 6
    1d3a:	03 c0       	rjmp	.+6      	; 0x1d42 <vfprintf+0x19e>
    1d3c:	6f ef       	ldi	r22, 0xFF	; 255
    1d3e:	7f ef       	ldi	r23, 0xFF	; 255
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vfprintf+0x1a2>
    1d42:	69 2d       	mov	r22, r9
    1d44:	70 e0       	ldi	r23, 0x00	; 0
    1d46:	42 e0       	ldi	r20, 0x02	; 2
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	a4 0e       	add	r10, r20
    1d4c:	b5 1e       	adc	r11, r21
    1d4e:	c6 01       	movw	r24, r12
    1d50:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <strnlen_P>
    1d54:	8c 01       	movw	r16, r24
    1d56:	50 e8       	ldi	r21, 0x80	; 128
    1d58:	f5 2a       	or	r15, r21
    1d5a:	f3 fe       	sbrs	r15, 3
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <vfprintf+0x1c8>
    1d5e:	1a c0       	rjmp	.+52     	; 0x1d94 <vfprintf+0x1f0>
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	b3 01       	movw	r22, r6
    1d66:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1d6a:	ea 94       	dec	r14
    1d6c:	8e 2d       	mov	r24, r14
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	08 17       	cp	r16, r24
    1d72:	19 07       	cpc	r17, r25
    1d74:	a8 f3       	brcs	.-22     	; 0x1d60 <vfprintf+0x1bc>
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <vfprintf+0x1f0>
    1d78:	f6 01       	movw	r30, r12
    1d7a:	f7 fc       	sbrc	r15, 7
    1d7c:	85 91       	lpm	r24, Z+
    1d7e:	f7 fe       	sbrs	r15, 7
    1d80:	81 91       	ld	r24, Z+
    1d82:	6f 01       	movw	r12, r30
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	b3 01       	movw	r22, r6
    1d88:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1d8c:	e1 10       	cpse	r14, r1
    1d8e:	ea 94       	dec	r14
    1d90:	01 50       	subi	r16, 0x01	; 1
    1d92:	10 40       	sbci	r17, 0x00	; 0
    1d94:	01 15       	cp	r16, r1
    1d96:	11 05       	cpc	r17, r1
    1d98:	79 f7       	brne	.-34     	; 0x1d78 <vfprintf+0x1d4>
    1d9a:	ea c0       	rjmp	.+468    	; 0x1f70 <vfprintf+0x3cc>
    1d9c:	94 36       	cpi	r25, 0x64	; 100
    1d9e:	11 f0       	breq	.+4      	; 0x1da4 <vfprintf+0x200>
    1da0:	99 36       	cpi	r25, 0x69	; 105
    1da2:	69 f5       	brne	.+90     	; 0x1dfe <vfprintf+0x25a>
    1da4:	f7 fe       	sbrs	r15, 7
    1da6:	08 c0       	rjmp	.+16     	; 0x1db8 <vfprintf+0x214>
    1da8:	f5 01       	movw	r30, r10
    1daa:	20 81       	ld	r18, Z
    1dac:	31 81       	ldd	r19, Z+1	; 0x01
    1dae:	42 81       	ldd	r20, Z+2	; 0x02
    1db0:	53 81       	ldd	r21, Z+3	; 0x03
    1db2:	84 e0       	ldi	r24, 0x04	; 4
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0a c0       	rjmp	.+20     	; 0x1dcc <vfprintf+0x228>
    1db8:	f5 01       	movw	r30, r10
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	44 27       	eor	r20, r20
    1dc2:	37 fd       	sbrc	r19, 7
    1dc4:	40 95       	com	r20
    1dc6:	54 2f       	mov	r21, r20
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a8 0e       	add	r10, r24
    1dce:	b9 1e       	adc	r11, r25
    1dd0:	9f e6       	ldi	r25, 0x6F	; 111
    1dd2:	f9 22       	and	r15, r25
    1dd4:	57 ff       	sbrs	r21, 7
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <vfprintf+0x246>
    1dd8:	50 95       	com	r21
    1dda:	40 95       	com	r20
    1ddc:	30 95       	com	r19
    1dde:	21 95       	neg	r18
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	4f 4f       	sbci	r20, 0xFF	; 255
    1de4:	5f 4f       	sbci	r21, 0xFF	; 255
    1de6:	e0 e8       	ldi	r30, 0x80	; 128
    1de8:	fe 2a       	or	r15, r30
    1dea:	ca 01       	movw	r24, r20
    1dec:	b9 01       	movw	r22, r18
    1dee:	a1 01       	movw	r20, r2
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	0e 94 1a 10 	call	0x2034	; 0x2034 <__ultoa_invert>
    1df8:	d8 2e       	mov	r13, r24
    1dfa:	d2 18       	sub	r13, r2
    1dfc:	40 c0       	rjmp	.+128    	; 0x1e7e <vfprintf+0x2da>
    1dfe:	95 37       	cpi	r25, 0x75	; 117
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <vfprintf+0x268>
    1e02:	1f 2d       	mov	r17, r15
    1e04:	1f 7e       	andi	r17, 0xEF	; 239
    1e06:	2a e0       	ldi	r18, 0x0A	; 10
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	1d c0       	rjmp	.+58     	; 0x1e46 <vfprintf+0x2a2>
    1e0c:	1f 2d       	mov	r17, r15
    1e0e:	19 7f       	andi	r17, 0xF9	; 249
    1e10:	9f 36       	cpi	r25, 0x6F	; 111
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <vfprintf+0x288>
    1e14:	90 37       	cpi	r25, 0x70	; 112
    1e16:	20 f4       	brcc	.+8      	; 0x1e20 <vfprintf+0x27c>
    1e18:	98 35       	cpi	r25, 0x58	; 88
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <vfprintf+0x27a>
    1e1c:	ac c0       	rjmp	.+344    	; 0x1f76 <vfprintf+0x3d2>
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <vfprintf+0x29a>
    1e20:	90 37       	cpi	r25, 0x70	; 112
    1e22:	39 f0       	breq	.+14     	; 0x1e32 <vfprintf+0x28e>
    1e24:	98 37       	cpi	r25, 0x78	; 120
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <vfprintf+0x286>
    1e28:	a6 c0       	rjmp	.+332    	; 0x1f76 <vfprintf+0x3d2>
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <vfprintf+0x290>
    1e2c:	28 e0       	ldi	r18, 0x08	; 8
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	0a c0       	rjmp	.+20     	; 0x1e46 <vfprintf+0x2a2>
    1e32:	10 61       	ori	r17, 0x10	; 16
    1e34:	14 fd       	sbrc	r17, 4
    1e36:	14 60       	ori	r17, 0x04	; 4
    1e38:	20 e1       	ldi	r18, 0x10	; 16
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <vfprintf+0x2a2>
    1e3e:	14 fd       	sbrc	r17, 4
    1e40:	16 60       	ori	r17, 0x06	; 6
    1e42:	20 e1       	ldi	r18, 0x10	; 16
    1e44:	32 e0       	ldi	r19, 0x02	; 2
    1e46:	17 ff       	sbrs	r17, 7
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <vfprintf+0x2b6>
    1e4a:	f5 01       	movw	r30, r10
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	44 e0       	ldi	r20, 0x04	; 4
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	08 c0       	rjmp	.+16     	; 0x1e6a <vfprintf+0x2c6>
    1e5a:	f5 01       	movw	r30, r10
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	bc 01       	movw	r22, r24
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	42 e0       	ldi	r20, 0x02	; 2
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	a4 0e       	add	r10, r20
    1e6c:	b5 1e       	adc	r11, r21
    1e6e:	a1 01       	movw	r20, r2
    1e70:	0e 94 1a 10 	call	0x2034	; 0x2034 <__ultoa_invert>
    1e74:	d8 2e       	mov	r13, r24
    1e76:	d2 18       	sub	r13, r2
    1e78:	8f e7       	ldi	r24, 0x7F	; 127
    1e7a:	f8 2e       	mov	r15, r24
    1e7c:	f1 22       	and	r15, r17
    1e7e:	f6 fe       	sbrs	r15, 6
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <vfprintf+0x2f4>
    1e82:	5e ef       	ldi	r21, 0xFE	; 254
    1e84:	f5 22       	and	r15, r21
    1e86:	d9 14       	cp	r13, r9
    1e88:	38 f4       	brcc	.+14     	; 0x1e98 <vfprintf+0x2f4>
    1e8a:	f4 fe       	sbrs	r15, 4
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <vfprintf+0x2f8>
    1e8e:	f2 fc       	sbrc	r15, 2
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x2f8>
    1e92:	8f ee       	ldi	r24, 0xEF	; 239
    1e94:	f8 22       	and	r15, r24
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <vfprintf+0x2f8>
    1e98:	1d 2d       	mov	r17, r13
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <vfprintf+0x2fa>
    1e9c:	19 2d       	mov	r17, r9
    1e9e:	f4 fe       	sbrs	r15, 4
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <vfprintf+0x318>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 0d       	add	r30, r13
    1ea6:	f1 1d       	adc	r31, r1
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 33       	cpi	r24, 0x30	; 48
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <vfprintf+0x310>
    1eae:	99 ee       	ldi	r25, 0xE9	; 233
    1eb0:	f9 22       	and	r15, r25
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <vfprintf+0x320>
    1eb4:	1f 5f       	subi	r17, 0xFF	; 255
    1eb6:	f2 fe       	sbrs	r15, 2
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <vfprintf+0x320>
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <vfprintf+0x31e>
    1ebc:	8f 2d       	mov	r24, r15
    1ebe:	86 78       	andi	r24, 0x86	; 134
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <vfprintf+0x320>
    1ec2:	1f 5f       	subi	r17, 0xFF	; 255
    1ec4:	0f 2d       	mov	r16, r15
    1ec6:	f3 fc       	sbrc	r15, 3
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <vfprintf+0x34e>
    1eca:	f0 fe       	sbrs	r15, 0
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <vfprintf+0x348>
    1ece:	1e 15       	cp	r17, r14
    1ed0:	10 f0       	brcs	.+4      	; 0x1ed6 <vfprintf+0x332>
    1ed2:	9d 2c       	mov	r9, r13
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <vfprintf+0x348>
    1ed6:	9d 2c       	mov	r9, r13
    1ed8:	9e 0c       	add	r9, r14
    1eda:	91 1a       	sub	r9, r17
    1edc:	1e 2d       	mov	r17, r14
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <vfprintf+0x348>
    1ee0:	80 e2       	ldi	r24, 0x20	; 32
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	b3 01       	movw	r22, r6
    1ee6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1eea:	1f 5f       	subi	r17, 0xFF	; 255
    1eec:	1e 15       	cp	r17, r14
    1eee:	c0 f3       	brcs	.-16     	; 0x1ee0 <vfprintf+0x33c>
    1ef0:	04 c0       	rjmp	.+8      	; 0x1efa <vfprintf+0x356>
    1ef2:	1e 15       	cp	r17, r14
    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <vfprintf+0x356>
    1ef6:	e1 1a       	sub	r14, r17
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <vfprintf+0x358>
    1efa:	ee 24       	eor	r14, r14
    1efc:	04 ff       	sbrs	r16, 4
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <vfprintf+0x37a>
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	b3 01       	movw	r22, r6
    1f06:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f0a:	02 ff       	sbrs	r16, 2
    1f0c:	1d c0       	rjmp	.+58     	; 0x1f48 <vfprintf+0x3a4>
    1f0e:	01 fd       	sbrc	r16, 1
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <vfprintf+0x374>
    1f12:	88 e7       	ldi	r24, 0x78	; 120
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e c0       	rjmp	.+28     	; 0x1f34 <vfprintf+0x390>
    1f18:	88 e5       	ldi	r24, 0x58	; 88
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <vfprintf+0x390>
    1f1e:	80 2f       	mov	r24, r16
    1f20:	86 78       	andi	r24, 0x86	; 134
    1f22:	91 f0       	breq	.+36     	; 0x1f48 <vfprintf+0x3a4>
    1f24:	01 ff       	sbrs	r16, 1
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x388>
    1f28:	8b e2       	ldi	r24, 0x2B	; 43
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <vfprintf+0x38a>
    1f2c:	80 e2       	ldi	r24, 0x20	; 32
    1f2e:	f7 fc       	sbrc	r15, 7
    1f30:	8d e2       	ldi	r24, 0x2D	; 45
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	b3 01       	movw	r22, r6
    1f36:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <vfprintf+0x3a4>
    1f3c:	80 e3       	ldi	r24, 0x30	; 48
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	b3 01       	movw	r22, r6
    1f42:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f46:	9a 94       	dec	r9
    1f48:	d9 14       	cp	r13, r9
    1f4a:	c0 f3       	brcs	.-16     	; 0x1f3c <vfprintf+0x398>
    1f4c:	da 94       	dec	r13
    1f4e:	f1 01       	movw	r30, r2
    1f50:	ed 0d       	add	r30, r13
    1f52:	f1 1d       	adc	r31, r1
    1f54:	80 81       	ld	r24, Z
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	b3 01       	movw	r22, r6
    1f5a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f5e:	dd 20       	and	r13, r13
    1f60:	a9 f7       	brne	.-22     	; 0x1f4c <vfprintf+0x3a8>
    1f62:	06 c0       	rjmp	.+12     	; 0x1f70 <vfprintf+0x3cc>
    1f64:	80 e2       	ldi	r24, 0x20	; 32
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	b3 01       	movw	r22, r6
    1f6a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f6e:	ea 94       	dec	r14
    1f70:	ee 20       	and	r14, r14
    1f72:	c1 f7       	brne	.-16     	; 0x1f64 <vfprintf+0x3c0>
    1f74:	43 ce       	rjmp	.-890    	; 0x1bfc <vfprintf+0x58>
    1f76:	f3 01       	movw	r30, r6
    1f78:	66 81       	ldd	r22, Z+6	; 0x06
    1f7a:	77 81       	ldd	r23, Z+7	; 0x07
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	2b 96       	adiw	r28, 0x0b	; 11
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	9f 90       	pop	r9
    1fa0:	8f 90       	pop	r8
    1fa2:	7f 90       	pop	r7
    1fa4:	6f 90       	pop	r6
    1fa6:	5f 90       	pop	r5
    1fa8:	4f 90       	pop	r4
    1faa:	3f 90       	pop	r3
    1fac:	2f 90       	pop	r2
    1fae:	08 95       	ret

00001fb0 <strnlen_P>:
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	05 90       	lpm	r0, Z+
    1fb4:	61 50       	subi	r22, 0x01	; 1
    1fb6:	70 40       	sbci	r23, 0x00	; 0
    1fb8:	01 10       	cpse	r0, r1
    1fba:	d8 f7       	brcc	.-10     	; 0x1fb2 <strnlen_P+0x2>
    1fbc:	80 95       	com	r24
    1fbe:	90 95       	com	r25
    1fc0:	8e 0f       	add	r24, r30
    1fc2:	9f 1f       	adc	r25, r31
    1fc4:	08 95       	ret

00001fc6 <strnlen>:
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	61 50       	subi	r22, 0x01	; 1
    1fca:	70 40       	sbci	r23, 0x00	; 0
    1fcc:	01 90       	ld	r0, Z+
    1fce:	01 10       	cpse	r0, r1
    1fd0:	d8 f7       	brcc	.-10     	; 0x1fc8 <strnlen+0x2>
    1fd2:	80 95       	com	r24
    1fd4:	90 95       	com	r25
    1fd6:	8e 0f       	add	r24, r30
    1fd8:	9f 1f       	adc	r25, r31
    1fda:	08 95       	ret

00001fdc <fputc>:
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	8c 01       	movw	r16, r24
    1fe6:	eb 01       	movw	r28, r22
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	81 ff       	sbrs	r24, 1
    1fec:	1b c0       	rjmp	.+54     	; 0x2024 <fputc+0x48>
    1fee:	82 ff       	sbrs	r24, 2
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <fputc+0x30>
    1ff2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	28 17       	cp	r18, r24
    1ffc:	39 07       	cpc	r19, r25
    1ffe:	64 f4       	brge	.+24     	; 0x2018 <fputc+0x3c>
    2000:	e8 81       	ld	r30, Y
    2002:	f9 81       	ldd	r31, Y+1	; 0x01
    2004:	01 93       	st	Z+, r16
    2006:	f9 83       	std	Y+1, r31	; 0x01
    2008:	e8 83       	st	Y, r30
    200a:	06 c0       	rjmp	.+12     	; 0x2018 <fputc+0x3c>
    200c:	e8 85       	ldd	r30, Y+8	; 0x08
    200e:	f9 85       	ldd	r31, Y+9	; 0x09
    2010:	80 2f       	mov	r24, r16
    2012:	09 95       	icall
    2014:	89 2b       	or	r24, r25
    2016:	31 f4       	brne	.+12     	; 0x2024 <fputc+0x48>
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	9f 83       	std	Y+7, r25	; 0x07
    2020:	8e 83       	std	Y+6, r24	; 0x06
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <fputc+0x4c>
    2024:	0f ef       	ldi	r16, 0xFF	; 255
    2026:	1f ef       	ldi	r17, 0xFF	; 255
    2028:	c8 01       	movw	r24, r16
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <__ultoa_invert>:
    2034:	fa 01       	movw	r30, r20
    2036:	aa 27       	eor	r26, r26
    2038:	28 30       	cpi	r18, 0x08	; 8
    203a:	51 f1       	breq	.+84     	; 0x2090 <__ultoa_invert+0x5c>
    203c:	20 31       	cpi	r18, 0x10	; 16
    203e:	81 f1       	breq	.+96     	; 0x20a0 <__ultoa_invert+0x6c>
    2040:	e8 94       	clt
    2042:	6f 93       	push	r22
    2044:	6e 7f       	andi	r22, 0xFE	; 254
    2046:	6e 5f       	subi	r22, 0xFE	; 254
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	8f 4f       	sbci	r24, 0xFF	; 255
    204c:	9f 4f       	sbci	r25, 0xFF	; 255
    204e:	af 4f       	sbci	r26, 0xFF	; 255
    2050:	b1 e0       	ldi	r27, 0x01	; 1
    2052:	3e d0       	rcall	.+124    	; 0x20d0 <__ultoa_invert+0x9c>
    2054:	b4 e0       	ldi	r27, 0x04	; 4
    2056:	3c d0       	rcall	.+120    	; 0x20d0 <__ultoa_invert+0x9c>
    2058:	67 0f       	add	r22, r23
    205a:	78 1f       	adc	r23, r24
    205c:	89 1f       	adc	r24, r25
    205e:	9a 1f       	adc	r25, r26
    2060:	a1 1d       	adc	r26, r1
    2062:	68 0f       	add	r22, r24
    2064:	79 1f       	adc	r23, r25
    2066:	8a 1f       	adc	r24, r26
    2068:	91 1d       	adc	r25, r1
    206a:	a1 1d       	adc	r26, r1
    206c:	6a 0f       	add	r22, r26
    206e:	71 1d       	adc	r23, r1
    2070:	81 1d       	adc	r24, r1
    2072:	91 1d       	adc	r25, r1
    2074:	a1 1d       	adc	r26, r1
    2076:	20 d0       	rcall	.+64     	; 0x20b8 <__ultoa_invert+0x84>
    2078:	09 f4       	brne	.+2      	; 0x207c <__ultoa_invert+0x48>
    207a:	68 94       	set
    207c:	3f 91       	pop	r19
    207e:	2a e0       	ldi	r18, 0x0A	; 10
    2080:	26 9f       	mul	r18, r22
    2082:	11 24       	eor	r1, r1
    2084:	30 19       	sub	r19, r0
    2086:	30 5d       	subi	r19, 0xD0	; 208
    2088:	31 93       	st	Z+, r19
    208a:	de f6       	brtc	.-74     	; 0x2042 <__ultoa_invert+0xe>
    208c:	cf 01       	movw	r24, r30
    208e:	08 95       	ret
    2090:	46 2f       	mov	r20, r22
    2092:	47 70       	andi	r20, 0x07	; 7
    2094:	40 5d       	subi	r20, 0xD0	; 208
    2096:	41 93       	st	Z+, r20
    2098:	b3 e0       	ldi	r27, 0x03	; 3
    209a:	0f d0       	rcall	.+30     	; 0x20ba <__ultoa_invert+0x86>
    209c:	c9 f7       	brne	.-14     	; 0x2090 <__ultoa_invert+0x5c>
    209e:	f6 cf       	rjmp	.-20     	; 0x208c <__ultoa_invert+0x58>
    20a0:	46 2f       	mov	r20, r22
    20a2:	4f 70       	andi	r20, 0x0F	; 15
    20a4:	40 5d       	subi	r20, 0xD0	; 208
    20a6:	4a 33       	cpi	r20, 0x3A	; 58
    20a8:	18 f0       	brcs	.+6      	; 0x20b0 <__ultoa_invert+0x7c>
    20aa:	49 5d       	subi	r20, 0xD9	; 217
    20ac:	31 fd       	sbrc	r19, 1
    20ae:	40 52       	subi	r20, 0x20	; 32
    20b0:	41 93       	st	Z+, r20
    20b2:	02 d0       	rcall	.+4      	; 0x20b8 <__ultoa_invert+0x84>
    20b4:	a9 f7       	brne	.-22     	; 0x20a0 <__ultoa_invert+0x6c>
    20b6:	ea cf       	rjmp	.-44     	; 0x208c <__ultoa_invert+0x58>
    20b8:	b4 e0       	ldi	r27, 0x04	; 4
    20ba:	a6 95       	lsr	r26
    20bc:	97 95       	ror	r25
    20be:	87 95       	ror	r24
    20c0:	77 95       	ror	r23
    20c2:	67 95       	ror	r22
    20c4:	ba 95       	dec	r27
    20c6:	c9 f7       	brne	.-14     	; 0x20ba <__ultoa_invert+0x86>
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	61 05       	cpc	r22, r1
    20cc:	71 05       	cpc	r23, r1
    20ce:	08 95       	ret
    20d0:	9b 01       	movw	r18, r22
    20d2:	ac 01       	movw	r20, r24
    20d4:	0a 2e       	mov	r0, r26
    20d6:	06 94       	lsr	r0
    20d8:	57 95       	ror	r21
    20da:	47 95       	ror	r20
    20dc:	37 95       	ror	r19
    20de:	27 95       	ror	r18
    20e0:	ba 95       	dec	r27
    20e2:	c9 f7       	brne	.-14     	; 0x20d6 <__ultoa_invert+0xa2>
    20e4:	62 0f       	add	r22, r18
    20e6:	73 1f       	adc	r23, r19
    20e8:	84 1f       	adc	r24, r20
    20ea:	95 1f       	adc	r25, r21
    20ec:	a0 1d       	adc	r26, r0
    20ee:	08 95       	ret

000020f0 <_exit>:
    20f0:	f8 94       	cli

000020f2 <__stop_program>:
    20f2:	ff cf       	rjmp	.-2      	; 0x20f2 <__stop_program>
