
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001470  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000429  0080011a  0080011a  0000151e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000370  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108e  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043f  00000000  00000000  0000297e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bed  00000000  00000000  00002dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  000039ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000985  00000000  00000000  0000400f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	e0 e7       	ldi	r30, 0x70	; 112
     4ec:	f4 e1       	ldi	r31, 0x14	; 20
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	aa 31       	cpi	r26, 0x1A	; 26
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	15 e0       	ldi	r17, 0x05	; 5
     500:	aa e1       	ldi	r26, 0x1A	; 26
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a3 34       	cpi	r26, 0x43	; 67
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <main>
     512:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
char pos[8] = {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 41 05 	lds	r24, 0x0541
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 3f 05 	lds	r24, 0x053F
     544:	90 91 40 05 	lds	r25, 0x0540
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 40 05 	sts	0x0540, r25
     54e:	80 93 3f 05 	sts	0x053F, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 3f 05 	lds	r24, 0x053F
     556:	90 91 40 05 	lds	r25, 0x0540
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 41 05 	sts	0x0541, r24
    	syncOFF = 0;
     566:	10 92 42 05 	sts	0x0542, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 3f 05 	lds	r24, 0x053F
     56e:	90 91 40 05 	lds	r25, 0x0540
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 41 05 	sts	0x0541, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 42 05 	sts	0x0542, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 3f 05 	lds	r24, 0x053F
     586:	90 91 40 05 	lds	r25, 0x0540
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 40 05 	sts	0x0540, r25
     598:	80 93 3f 05 	sts	0x053F, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 42 05 	lds	r24, 0x0542
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 3f 05 	lds	r24, 0x053F
     5ac:	90 91 40 05 	lds	r25, 0x0540
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 3f 05 	lds	r24, 0x053F
     5ba:	90 91 40 05 	lds	r25, 0x0540
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 3f 05 	lds	r24, 0x053F
     5c6:	90 91 40 05 	lds	r25, 0x0540
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	25 e2       	ldi	r18, 0x25	; 37
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(7);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	e4 5e       	subi	r30, 0xE4	; 228
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	e2 5e       	subi	r30, 0xE2	; 226
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     6a2:	80 5a       	subi	r24, 0xA0	; 160
     6a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	80 83       	st	Z, r24
end
     6b0:	08 95       	ret

000006b2 <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     6b2:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	34 e0       	ldi	r19, 0x04	; 4
     6b8:	66 0f       	add	r22, r22
     6ba:	77 1f       	adc	r23, r23
     6bc:	3a 95       	dec	r19
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <video_pt+0x6>
     6c0:	86 95       	lsr	r24
     6c2:	86 95       	lsr	r24
     6c4:	86 95       	lsr	r24
     6c6:	68 0f       	add	r22, r24
     6c8:	71 1d       	adc	r23, r1

	if (c==1)
     6ca:	41 30       	cpi	r20, 0x01	; 1
     6cc:	69 f4       	brne	.+26     	; 0x6e8 <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     6ce:	db 01       	movw	r26, r22
     6d0:	a4 5e       	subi	r26, 0xE4	; 228
     6d2:	be 4f       	sbci	r27, 0xFE	; 254
     6d4:	e9 2f       	mov	r30, r25
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	e7 70       	andi	r30, 0x07	; 7
     6da:	f0 70       	andi	r31, 0x00	; 0
     6dc:	ef 5e       	subi	r30, 0xEF	; 239
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	8c 91       	ld	r24, X
     6e2:	90 81       	ld	r25, Z
     6e4:	89 2b       	or	r24, r25
     6e6:	17 c0       	rjmp	.+46     	; 0x716 <video_pt+0x64>
     6e8:	db 01       	movw	r26, r22
     6ea:	a4 5e       	subi	r26, 0xE4	; 228
     6ec:	be 4f       	sbci	r27, 0xFE	; 254
     6ee:	e9 2f       	mov	r30, r25
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     6f2:	44 23       	and	r20, r20
     6f4:	49 f4       	brne	.+18     	; 0x708 <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     6f6:	e7 70       	andi	r30, 0x07	; 7
     6f8:	f0 70       	andi	r31, 0x00	; 0
     6fa:	ef 5e       	subi	r30, 0xEF	; 239
     6fc:	fe 4f       	sbci	r31, 0xFE	; 254
     6fe:	90 81       	ld	r25, Z
     700:	90 95       	com	r25
     702:	8c 91       	ld	r24, X
     704:	89 23       	and	r24, r25
     706:	07 c0       	rjmp	.+14     	; 0x716 <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     708:	e7 70       	andi	r30, 0x07	; 7
     70a:	f0 70       	andi	r31, 0x00	; 0
     70c:	ef 5e       	subi	r30, 0xEF	; 239
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	8c 91       	ld	r24, X
     712:	90 81       	ld	r25, Z
     714:	89 27       	eor	r24, r25
     716:	8c 93       	st	X, r24
     718:	08 95       	ret

0000071a <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     71a:	2f 92       	push	r2
     71c:	3f 92       	push	r3
     71e:	4f 92       	push	r4
     720:	5f 92       	push	r5
     722:	6f 92       	push	r6
     724:	7f 92       	push	r7
     726:	8f 92       	push	r8
     728:	9f 92       	push	r9
     72a:	af 92       	push	r10
     72c:	bf 92       	push	r11
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <video_line+0x26>
     740:	00 d0       	rcall	.+0      	; 0x742 <video_line+0x28>
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     748:	c8 2e       	mov	r12, r24
     74a:	dd 24       	eor	r13, r13
	y = y1;
     74c:	e6 2e       	mov	r14, r22
     74e:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     750:	48 17       	cp	r20, r24
     752:	38 f4       	brcc	.+14     	; 0x762 <video_line+0x48>
		dx = x1 - x2;
     754:	c6 01       	movw	r24, r12
     756:	84 1b       	sub	r24, r20
     758:	91 09       	sbc	r25, r1
     75a:	9c 83       	std	Y+4, r25	; 0x04
     75c:	8b 83       	std	Y+3, r24	; 0x03
     75e:	7f ef       	ldi	r23, 0xFF	; 255
     760:	0d c0       	rjmp	.+26     	; 0x77c <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     762:	48 17       	cp	r20, r24
     764:	21 f4       	brne	.+8      	; 0x76e <video_line+0x54>
     766:	1c 82       	std	Y+4, r1	; 0x04
     768:	1b 82       	std	Y+3, r1	; 0x03
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	07 c0       	rjmp	.+14     	; 0x77c <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     76e:	e4 2f       	mov	r30, r20
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ec 19       	sub	r30, r12
     774:	fd 09       	sbc	r31, r13
     776:	fc 83       	std	Y+4, r31	; 0x04
     778:	eb 83       	std	Y+3, r30	; 0x03
     77a:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     77c:	26 17       	cp	r18, r22
     77e:	28 f4       	brcc	.+10     	; 0x78a <video_line+0x70>
		dy = y1 - y2;
     780:	a7 01       	movw	r20, r14
     782:	42 1b       	sub	r20, r18
     784:	51 09       	sbc	r21, r1
     786:	6f ef       	ldi	r22, 0xFF	; 255
     788:	0b c0       	rjmp	.+22     	; 0x7a0 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     78a:	26 17       	cp	r18, r22
     78c:	21 f4       	brne	.+8      	; 0x796 <video_line+0x7c>
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     796:	42 2f       	mov	r20, r18
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	4e 19       	sub	r20, r14
     79c:	5f 09       	sbc	r21, r15
     79e:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	84 17       	cp	r24, r20
     7a6:	95 07       	cpc	r25, r21
     7a8:	44 f4       	brge	.+16     	; 0x7ba <video_line+0xa0>
     7aa:	ca 01       	movw	r24, r20
     7ac:	4b 81       	ldd	r20, Y+3	; 0x03
     7ae:	5c 81       	ldd	r21, Y+4	; 0x04
     7b0:	9c 83       	std	Y+4, r25	; 0x04
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	99 83       	std	Y+1, r25	; 0x01
     7b8:	01 c0       	rjmp	.+2      	; 0x7bc <video_line+0xa2>
     7ba:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     7bc:	2a 01       	movw	r4, r20
     7be:	44 0c       	add	r4, r4
     7c0:	55 1c       	adc	r5, r5
     7c2:	82 01       	movw	r16, r4
     7c4:	eb 81       	ldd	r30, Y+3	; 0x03
     7c6:	fc 81       	ldd	r31, Y+4	; 0x04
     7c8:	0e 1b       	sub	r16, r30
     7ca:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     7cc:	1f 01       	movw	r2, r30
     7ce:	22 0c       	add	r2, r2
     7d0:	33 1c       	adc	r3, r3
     7d2:	aa 24       	eor	r10, r10
     7d4:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     7d6:	66 2e       	mov	r6, r22
     7d8:	77 24       	eor	r7, r7
     7da:	67 fc       	sbrc	r6, 7
     7dc:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     7de:	87 2e       	mov	r8, r23
     7e0:	99 24       	eor	r9, r9
     7e2:	87 fc       	sbrc	r8, 7
     7e4:	90 94       	com	r9
     7e6:	1e c0       	rjmp	.+60     	; 0x824 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     7e8:	8c 2d       	mov	r24, r12
     7ea:	6e 2d       	mov	r22, r14
     7ec:	4a 81       	ldd	r20, Y+2	; 0x02
     7ee:	0e 94 59 03 	call	0x6b2	; 0x6b2 <video_pt>
		 
		if (e>=0) {
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	0a c0       	rjmp	.+20     	; 0x80a <video_line+0xf0>
			if (xchange==1) x = x + s1;
     7f6:	f9 81       	ldd	r31, Y+1	; 0x01
     7f8:	f1 30       	cpi	r31, 0x01	; 1
     7fa:	19 f4       	brne	.+6      	; 0x802 <video_line+0xe8>
     7fc:	c8 0c       	add	r12, r8
     7fe:	d9 1c       	adc	r13, r9
     800:	02 c0       	rjmp	.+4      	; 0x806 <video_line+0xec>
			else y = y + s2;
     802:	e6 0c       	add	r14, r6
     804:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     806:	02 19       	sub	r16, r2
     808:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	19 f4       	brne	.+6      	; 0x816 <video_line+0xfc>
     810:	e6 0c       	add	r14, r6
     812:	f7 1c       	adc	r15, r7
     814:	02 c0       	rjmp	.+4      	; 0x81a <video_line+0x100>
		else x = x + s1;
     816:	c8 0c       	add	r12, r8
     818:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     81a:	04 0d       	add	r16, r4
     81c:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     81e:	08 94       	sec
     820:	a1 1c       	adc	r10, r1
     822:	b1 1c       	adc	r11, r1
     824:	eb 81       	ldd	r30, Y+3	; 0x03
     826:	fc 81       	ldd	r31, Y+4	; 0x04
     828:	ea 15       	cp	r30, r10
     82a:	fb 05       	cpc	r31, r11
     82c:	ec f6       	brge	.-70     	; 0x7e8 <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	bf 90       	pop	r11
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	8f 90       	pop	r8
     84e:	7f 90       	pop	r7
     850:	6f 90       	pop	r6
     852:	5f 90       	pop	r5
     854:	4f 90       	pop	r4
     856:	3f 90       	pop	r3
     858:	2f 90       	pop	r2
     85a:	08 95       	ret

0000085c <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     85c:	8f 92       	push	r8
     85e:	9f 92       	push	r9
     860:	af 92       	push	r10
     862:	bf 92       	push	r11
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	e8 2e       	mov	r14, r24
     876:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     878:	87 e0       	ldi	r24, 0x07	; 7
     87a:	48 9f       	mul	r20, r24
     87c:	a0 01       	movw	r20, r0
     87e:	11 24       	eor	r1, r1
     880:	ea 01       	movw	r28, r20
     882:	c8 5e       	subi	r28, 0xE8	; 232
     884:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     886:	8e 2c       	mov	r8, r14
     888:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     88a:	02 e0       	ldi	r16, 0x02	; 2
     88c:	90 2e       	mov	r9, r16
     88e:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     890:	13 e0       	ldi	r17, 0x03	; 3
     892:	a1 2e       	mov	r10, r17
     894:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     896:	b4 e0       	ldi	r27, 0x04	; 4
     898:	bb 2e       	mov	r11, r27
     89a:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     89c:	af e1       	ldi	r26, 0x1F	; 31
     89e:	ca 2e       	mov	r12, r26
     8a0:	a1 e0       	ldi	r26, 0x01	; 1
     8a2:	da 2e       	mov	r13, r26
     8a4:	c4 0e       	add	r12, r20
     8a6:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     8a8:	fe 01       	movw	r30, r28
     8aa:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     8ac:	40 2f       	mov	r20, r16
     8ae:	44 1f       	adc	r20, r20
     8b0:	44 27       	eor	r20, r20
     8b2:	44 1f       	adc	r20, r20
     8b4:	8e 2d       	mov	r24, r14
     8b6:	6f 2d       	mov	r22, r15
     8b8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     8bc:	10 e0       	ldi	r17, 0x00	; 0
     8be:	a8 01       	movw	r20, r16
     8c0:	f6 e0       	ldi	r31, 0x06	; 6
     8c2:	56 95       	lsr	r21
     8c4:	47 95       	ror	r20
     8c6:	fa 95       	dec	r31
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <video_putchar+0x66>
     8ca:	41 70       	andi	r20, 0x01	; 1
     8cc:	88 2d       	mov	r24, r8
     8ce:	6f 2d       	mov	r22, r15
     8d0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     8d4:	a8 01       	movw	r20, r16
     8d6:	e5 e0       	ldi	r30, 0x05	; 5
     8d8:	56 95       	lsr	r21
     8da:	47 95       	ror	r20
     8dc:	ea 95       	dec	r30
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <video_putchar+0x7c>
     8e0:	41 70       	andi	r20, 0x01	; 1
     8e2:	89 2d       	mov	r24, r9
     8e4:	6f 2d       	mov	r22, r15
     8e6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     8ea:	a8 01       	movw	r20, r16
     8ec:	74 e0       	ldi	r23, 0x04	; 4
     8ee:	56 95       	lsr	r21
     8f0:	47 95       	ror	r20
     8f2:	7a 95       	dec	r23
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <video_putchar+0x92>
     8f6:	41 70       	andi	r20, 0x01	; 1
     8f8:	8a 2d       	mov	r24, r10
     8fa:	6f 2d       	mov	r22, r15
     8fc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     900:	63 e0       	ldi	r22, 0x03	; 3
     902:	16 95       	lsr	r17
     904:	07 95       	ror	r16
     906:	6a 95       	dec	r22
     908:	e1 f7       	brne	.-8      	; 0x902 <video_putchar+0xa6>
     90a:	01 70       	andi	r16, 0x01	; 1
     90c:	8b 2d       	mov	r24, r11
     90e:	6f 2d       	mov	r22, r15
     910:	40 2f       	mov	r20, r16
     912:	0e 94 59 03 	call	0x6b2	; 0x6b2 <video_pt>
     916:	21 96       	adiw	r28, 0x01	; 1
     918:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     91a:	cc 15       	cp	r28, r12
     91c:	dd 05       	cpc	r29, r13
     91e:	21 f6       	brne	.-120    	; 0x8a8 <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	9f 90       	pop	r9
     936:	8f 90       	pop	r8
     938:	08 95       	ret

0000093a <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	08 2f       	mov	r16, r24
     946:	f6 2e       	mov	r15, r22
     948:	ea 01       	movw	r28, r20
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	06 c0       	rjmp	.+12     	; 0x95a <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     94e:	80 2f       	mov	r24, r16
     950:	6f 2d       	mov	r22, r15
     952:	0e 94 2e 04 	call	0x85c	; 0x85c <video_putchar>
		x = x+6;	
     956:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     958:	1f 5f       	subi	r17, 0xFF	; 255
     95a:	fe 01       	movw	r30, r28
     95c:	e1 0f       	add	r30, r17
     95e:	f1 1d       	adc	r31, r1
     960:	40 81       	ld	r20, Z
     962:	44 23       	and	r20, r20
     964:	a1 f7       	brne	.-24     	; 0x94e <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	08 95       	ret

00000972 <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     972:	e6 2f       	mov	r30, r22
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	28 2f       	mov	r18, r24
     978:	26 95       	lsr	r18
     97a:	26 95       	lsr	r18
     97c:	26 95       	lsr	r18
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	9a 95       	dec	r25
     986:	e1 f7       	brne	.-8      	; 0x980 <video_set+0xe>
     988:	e2 0f       	add	r30, r18
     98a:	f1 1d       	adc	r31, r1
     98c:	e4 5e       	subi	r30, 0xE4	; 228
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	80 95       	com	r24
     994:	90 95       	com	r25
     996:	87 70       	andi	r24, 0x07	; 7
     998:	90 70       	andi	r25, 0x00	; 0
     99a:	21 e0       	ldi	r18, 0x01	; 1
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <video_set+0x32>
     9a0:	22 0f       	add	r18, r18
     9a2:	33 1f       	adc	r19, r19
     9a4:	8a 95       	dec	r24
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <video_set+0x2e>
     9a8:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     9aa:	82 23       	and	r24, r18
     9ac:	08 95       	ret

000009ae <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <write_LCD+0x6>
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <write_LCD+0x8>
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <write_LCD+0xa>
     9b8:	ed b7       	in	r30, 0x3d	; 61
     9ba:	fe b7       	in	r31, 0x3e	; 62
     9bc:	31 96       	adiw	r30, 0x01	; 1
     9be:	0c e1       	ldi	r16, 0x1C	; 28
     9c0:	15 e0       	ldi	r17, 0x05	; 5
     9c2:	ad b7       	in	r26, 0x3d	; 61
     9c4:	be b7       	in	r27, 0x3e	; 62
     9c6:	12 96       	adiw	r26, 0x02	; 2
     9c8:	1c 93       	st	X, r17
     9ca:	0e 93       	st	-X, r16
     9cc:	11 97       	sbiw	r26, 0x01	; 1
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	31 e0       	ldi	r19, 0x01	; 1
     9d2:	33 83       	std	Z+3, r19	; 0x03
     9d4:	22 83       	std	Z+2, r18	; 0x02
     9d6:	84 83       	std	Z+4, r24	; 0x04
     9d8:	15 82       	std	Z+5, r1	; 0x05
     9da:	0e 94 5f 07 	call	0xebe	; 0xebe <sprintf>
	LCDGotoXY(0, 1);
     9de:	8d b7       	in	r24, 0x3d	; 61
     9e0:	9e b7       	in	r25, 0x3e	; 62
     9e2:	06 96       	adiw	r24, 0x06	; 6
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	9e bf       	out	0x3e, r25	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	8d bf       	out	0x3d, r24	; 61
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	0e 94 10 06 	call	0xc20	; 0xc20 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     9f6:	f8 01       	movw	r30, r16
     9f8:	01 90       	ld	r0, Z+
     9fa:	00 20       	and	r0, r0
     9fc:	e9 f7       	brne	.-6      	; 0x9f8 <write_LCD+0x4a>
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	e0 1b       	sub	r30, r16
     a02:	f1 0b       	sbc	r31, r17
     a04:	c8 01       	movw	r24, r16
     a06:	6e 2f       	mov	r22, r30
     a08:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <LCDstring>
end
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
     a12:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <LCDinit>
	LCDcursorOFF();
     a16:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCDcursorOFF>
	LCDclr();				//clear the display
     a1a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LCDclr>
	LCDGotoXY(0,0);
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	0e 94 10 06 	call	0xc20	; 0xc20 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     a26:	8c e8       	ldi	r24, 0x8C	; 140
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <CopyStringtoLCD>
	LCD_char_count = 0;
     a32:	10 92 2d 05 	sts	0x052D, r1
end
     a36:	08 95       	ret

00000a38 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     a3c:	ec e7       	ldi	r30, 0x7C	; 124
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	10 82       	st	Z, r1
	ADCSRA = 0;
     a42:	aa e7       	ldi	r26, 0x7A	; 122
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     a48:	80 e6       	ldi	r24, 0x60	; 96
     a4a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     a4c:	87 e8       	ldi	r24, 0x87	; 135
     a4e:	8c 93       	st	X, r24


void initialize(void)
begin
	ADC_init();
	LCD_init();
     a50:	0e 94 09 05 	call	0xa12	; 0xa12 <LCD_init>
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     a54:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     a56:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     a5c:	88 e0       	ldi	r24, 0x08	; 8
     a5e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     a62:	80 ec       	ldi	r24, 0xC0	; 192
     a64:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     a68:	01 e0       	ldi	r16, 0x01	; 1
     a6a:	10 e0       	ldi	r17, 0x00	; 0
     a6c:	10 93 c5 00 	sts	0x00C5, r17
     a70:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	LCD_init();
	port_init();
	USART_init();
	timer1_init();
     a74:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     a78:	10 93 40 05 	sts	0x0540, r17
     a7c:	00 93 3f 05 	sts	0x053F, r16

	syncON = 0b00000000;
     a80:	10 92 41 05 	sts	0x0541, r1
	syncOFF = 0b00000001;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 42 05 	sts	0x0542, r24

	// Set up single video line timing
	sei();
     a8a:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     a8c:	83 b7       	in	r24, 0x33	; 51
     a8e:	81 7f       	andi	r24, 0xF1	; 241
     a90:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     a92:	83 b7       	in	r24, 0x33	; 51
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	83 bf       	out	0x33, r24	; 51

end
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <main>:




int main(void)
begin
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
	char width = screen_width-1;
	char height = screen_height-1;
	char temp = 0;
	unsigned char top_of_paddle = 0;
	initialize();
     aa8:	0e 94 1c 05 	call	0xa38	; 0xa38 <initialize>
	
	video_line(width,0,width,height,1);
     aac:	8f e7       	ldi	r24, 0x7F	; 127
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	4f e7       	ldi	r20, 0x7F	; 127
     ab2:	2f e3       	ldi	r18, 0x3F	; 63
     ab4:	01 e0       	ldi	r16, 0x01	; 1
     ab6:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
	video_line(0,10,width,10,1);
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	4f e7       	ldi	r20, 0x7F	; 127
     ac0:	2a e0       	ldi	r18, 0x0A	; 10
     ac2:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
	video_line(0,0,width,0,1);
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	4f e7       	ldi	r20, 0x7F	; 127
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
	video_line(0,height,width,height,1);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	6f e3       	ldi	r22, 0x3F	; 63
     ad6:	4f e7       	ldi	r20, 0x7F	; 127
     ad8:	2f e3       	ldi	r18, 0x3F	; 63
     ada:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
	video_puts(20,40,"hello world.");
     ade:	84 e1       	ldi	r24, 0x14	; 20
     ae0:	68 e2       	ldi	r22, 0x28	; 40
     ae2:	44 e0       	ldi	r20, 0x04	; 4
     ae4:	51 e0       	ldi	r21, 0x01	; 1
     ae6:	0e 94 9d 04 	call	0x93a	; 0x93a <video_puts>
     aea:	ff 24       	eor	r15, r15
			// ball updates

			//paddle update
			video_line(2,top_of_paddle,2,top_of_paddle+8,2);
			video_line(3,top_of_paddle,3,top_of_paddle+8,2);
			top_of_paddle =(ADCH*43/255)+11;
     aec:	4b e2       	ldi	r20, 0x2B	; 43
     aee:	d4 2e       	mov	r13, r20

// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     af0:	30 e6       	ldi	r19, 0x60	; 96
     af2:	e3 2e       	mov	r14, r19
	end // adc test while 1
*/
	// guide for the real code
	while(1)
	begin
		if (LineCount == ScreenBot)
     af4:	80 91 3f 05 	lds	r24, 0x053F
     af8:	90 91 40 05 	lds	r25, 0x0540
     afc:	8d 36       	cpi	r24, 0x6D	; 109
     afe:	91 05       	cpc	r25, r1
     b00:	c9 f7       	brne	.-14     	; 0xaf4 <main+0x56>
			// 1. check for collisions and update velocities (including drag)
			// 2. update positions for all balls and the paddle
			// ball updates

			//paddle update
			video_line(2,top_of_paddle,2,top_of_paddle+8,2);
     b02:	1f 2d       	mov	r17, r15
     b04:	18 5f       	subi	r17, 0xF8	; 248
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	6f 2d       	mov	r22, r15
     b0a:	42 e0       	ldi	r20, 0x02	; 2
     b0c:	21 2f       	mov	r18, r17
     b0e:	02 e0       	ldi	r16, 0x02	; 2
     b10:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
			video_line(3,top_of_paddle,3,top_of_paddle+8,2);
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	6f 2d       	mov	r22, r15
     b18:	43 e0       	ldi	r20, 0x03	; 3
     b1a:	21 2f       	mov	r18, r17
     b1c:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
			top_of_paddle =(ADCH*43/255)+11;
     b20:	80 91 79 00 	lds	r24, 0x0079
     b24:	8d 9d       	mul	r24, r13
     b26:	c0 01       	movw	r24, r0
     b28:	11 24       	eor	r1, r1
     b2a:	6f ef       	ldi	r22, 0xFF	; 255
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divmodhi4>
     b32:	16 2f       	mov	r17, r22
     b34:	2b e0       	ldi	r18, 0x0B	; 11
     b36:	f2 2e       	mov	r15, r18
     b38:	f6 0e       	add	r15, r22
			video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     b3a:	1d 5e       	subi	r17, 0xED	; 237
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	6f 2d       	mov	r22, r15
     b40:	42 e0       	ldi	r20, 0x02	; 2
     b42:	21 2f       	mov	r18, r17
     b44:	01 e0       	ldi	r16, 0x01	; 1
     b46:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>
			video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	6f 2d       	mov	r22, r15
     b4e:	43 e0       	ldi	r20, 0x03	; 3
     b50:	21 2f       	mov	r18, r17
     b52:	0e 94 8d 03 	call	0x71a	; 0x71a <video_line>


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     b56:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     b5a:	e0 92 7c 00 	sts	0x007C, r14
	ADCSRA |= (1<<ADSC);
     b5e:	80 91 7a 00 	lds	r24, 0x007A
     b62:	80 64       	ori	r24, 0x40	; 64
     b64:	80 93 7a 00 	sts	0x007A, r24
     b68:	c5 cf       	rjmp	.-118    	; 0xaf4 <main+0x56>

00000b6a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     b6a:	28 2f       	mov	r18, r24
     b6c:	20 7f       	andi	r18, 0xF0	; 240
     b6e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     b70:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     b72:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b74:	20 e4       	ldi	r18, 0x40	; 64
     b76:	3f e1       	ldi	r19, 0x1F	; 31
     b78:	f9 01       	movw	r30, r18
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     b7e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     b80:	40 98       	cbi	0x08, 0	; 8
     b82:	f9 01       	movw	r30, r18
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	f1 f7       	brne	.-4      	; 0xb84 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	44 e0       	ldi	r20, 0x04	; 4
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	4a 95       	dec	r20
     b92:	e1 f7       	brne	.-8      	; 0xb8c <LCDsendChar+0x22>
     b94:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     b96:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     b98:	42 9a       	sbi	0x08, 2	; 8
     b9a:	c9 01       	movw	r24, r18
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     ba0:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     ba2:	40 98       	cbi	0x08, 0	; 8
     ba4:	c9 01       	movw	r24, r18
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     baa:	08 95       	ret

00000bac <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     bac:	28 2f       	mov	r18, r24
     bae:	20 7f       	andi	r18, 0xF0	; 240
     bb0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     bb2:	42 9a       	sbi	0x08, 2	; 8
     bb4:	20 e4       	ldi	r18, 0x40	; 64
     bb6:	3f e1       	ldi	r19, 0x1F	; 31
     bb8:	f9 01       	movw	r30, r18
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     bbe:	42 98       	cbi	0x08, 2	; 8
     bc0:	f9 01       	movw	r30, r18
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	54 e0       	ldi	r21, 0x04	; 4
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	5a 95       	dec	r21
     bd0:	e1 f7       	brne	.-8      	; 0xbca <LCDsendCommand+0x1e>
     bd2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     bd4:	42 9a       	sbi	0x08, 2	; 8
     bd6:	c9 01       	movw	r24, r18
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     bdc:	42 98       	cbi	0x08, 2	; 8
     bde:	c9 01       	movw	r24, r18
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     be4:	08 95       	ret

00000be6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     bec:	08 95       	ret

00000bee <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     bf4:	08 95       	ret

00000bf6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	49 f0       	breq	.+18     	; 0xc16 <LCDstring+0x20>
     c04:	ec 01       	movw	r28, r24
     c06:	10 e0       	ldi	r17, 0x00	; 0
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     c0a:	89 91       	ld	r24, Y+
     c0c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     c10:	1f 5f       	subi	r17, 0xFF	; 255
     c12:	10 17       	cp	r17, r16
     c14:	d0 f3       	brcs	.-12     	; 0xc0a <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     c20:	62 30       	cpi	r22, 0x02	; 2
     c22:	31 f0       	breq	.+12     	; 0xc30 <LCDGotoXY+0x10>
     c24:	63 30       	cpi	r22, 0x03	; 3
     c26:	31 f0       	breq	.+12     	; 0xc34 <LCDGotoXY+0x14>
     c28:	61 30       	cpi	r22, 0x01	; 1
     c2a:	29 f4       	brne	.+10     	; 0xc36 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     c2c:	80 5c       	subi	r24, 0xC0	; 192
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     c30:	8c 5e       	subi	r24, 0xEC	; 236
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     c34:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
	
}
     c3c:	08 95       	ret

00000c3e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	ec 01       	movw	r28, r24
     c46:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     c48:	64 2f       	mov	r22, r20
     c4a:	0e 94 10 06 	call	0xc20	; 0xc20 <LCDGotoXY>
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     c52:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     c56:	1f 5f       	subi	r17, 0xFF	; 255
     c58:	fe 01       	movw	r30, r28
     c5a:	e1 0f       	add	r30, r17
     c5c:	f1 1d       	adc	r31, r1
     c5e:	84 91       	lpm	r24, Z+
     c60:	88 23       	and	r24, r24
     c62:	b9 f7       	brne	.-18     	; 0xc52 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	08 95       	ret

00000c6c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	7c 01       	movw	r14, r24
     c7a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     c7c:	11 0f       	add	r17, r17
     c7e:	11 0f       	add	r17, r17
     c80:	11 0f       	add	r17, r17
     c82:	10 64       	ori	r17, 0x40	; 64
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     c88:	f7 01       	movw	r30, r14
     c8a:	ec 0f       	add	r30, r28
     c8c:	fd 1f       	adc	r31, r29
     c8e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     c90:	81 2f       	mov	r24, r17
     c92:	8c 0f       	add	r24, r28
     c94:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
		LCDsendChar(pcc);
     c98:	80 2f       	mov	r24, r16
     c9a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     c9e:	21 96       	adiw	r28, 0x01	; 1
     ca0:	c8 30       	cpi	r28, 0x08	; 8
     ca2:	d1 05       	cpc	r29, r1
     ca4:	89 f7       	brne	.-30     	; 0xc88 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	08 95       	ret

00000cb4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	80 e6       	ldi	r24, 0x60	; 96
     cbc:	9a ee       	ldi	r25, 0xEA	; 234
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     cc2:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     cc4:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     cc6:	87 b1       	in	r24, 0x07	; 7
     cc8:	80 6f       	ori	r24, 0xF0	; 240
     cca:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     ccc:	87 b1       	in	r24, 0x07	; 7
     cce:	87 60       	ori	r24, 0x07	; 7
     cd0:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     cd2:	80 e3       	ldi	r24, 0x30	; 48
     cd4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     cd6:	42 9a       	sbi	0x08, 2	; 8
     cd8:	20 e4       	ldi	r18, 0x40	; 64
     cda:	3f e1       	ldi	r19, 0x1F	; 31
     cdc:	f9 01       	movw	r30, r18
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     ce2:	42 98       	cbi	0x08, 2	; 8
     ce4:	f9 01       	movw	r30, r18
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     cea:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     cec:	42 9a       	sbi	0x08, 2	; 8
     cee:	c9 01       	movw	r24, r18
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     cf4:	42 98       	cbi	0x08, 2	; 8
     cf6:	c9 01       	movw	r24, r18
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     d00:	42 9a       	sbi	0x08, 2	; 8
     d02:	c9 01       	movw	r24, r18
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     d08:	42 98       	cbi	0x08, 2	; 8
     d0a:	c9 01       	movw	r24, r18
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     d10:	88 e2       	ldi	r24, 0x28	; 40
     d12:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     d16:	8c e0       	ldi	r24, 0x0C	; 12
     d18:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
     d1c:	c8 e9       	ldi	r28, 0x98	; 152
     d1e:	d4 e0       	ldi	r29, 0x04	; 4
     d20:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     d22:	16 2f       	mov	r17, r22
     d24:	1f 5f       	subi	r17, 0xFF	; 255
     d26:	ce 01       	movw	r24, r28
     d28:	0e 94 36 06 	call	0xc6c	; 0xc6c <LCDdefinechar>
     d2c:	28 96       	adiw	r28, 0x08	; 8
     d2e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     d30:	18 30       	cpi	r17, 0x08	; 8
     d32:	b9 f7       	brne	.-18     	; 0xd22 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	08 95       	ret

00000d3c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	08 2f       	mov	r16, r24
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     d46:	8e e1       	ldi	r24, 0x1E	; 30
     d48:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     d4c:	1f 5f       	subi	r17, 0xFF	; 255
     d4e:	10 17       	cp	r17, r16
     d50:	d0 f3       	brcs	.-12     	; 0xd46 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	08 2f       	mov	r16, r24
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     d62:	88 e1       	ldi	r24, 0x18	; 24
     d64:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     d68:	1f 5f       	subi	r17, 0xFF	; 255
     d6a:	10 17       	cp	r17, r16
     d6c:	d0 f3       	brcs	.-12     	; 0xd62 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     d74:	8e e0       	ldi	r24, 0x0E	; 14
     d76:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     d7a:	08 95       	ret

00000d7c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     d7c:	8f e0       	ldi	r24, 0x0F	; 15
     d7e:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     d82:	08 95       	ret

00000d84 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     d8a:	08 95       	ret

00000d8c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     d92:	08 95       	ret

00000d94 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     d94:	8c e0       	ldi	r24, 0x0C	; 12
     d96:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
}
     d9a:	08 95       	ret

00000d9c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	08 2f       	mov	r16, r24
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	04 c0       	rjmp	.+8      	; 0xdae <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     da6:	80 e1       	ldi	r24, 0x10	; 16
     da8:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     dac:	1f 5f       	subi	r17, 0xFF	; 255
     dae:	10 17       	cp	r17, r16
     db0:	d0 f3       	brcs	.-12     	; 0xda6 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	08 2f       	mov	r16, r24
     dbe:	10 e0       	ldi	r17, 0x00	; 0
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     dc2:	84 e1       	ldi	r24, 0x14	; 20
     dc4:	0e 94 d6 05 	call	0xbac	; 0xbac <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     dc8:	1f 5f       	subi	r17, 0xFF	; 255
     dca:	10 17       	cp	r17, r16
     dcc:	d0 f3       	brcs	.-12     	; 0xdc2 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     de4:	96 e0       	ldi	r25, 0x06	; 6
     de6:	89 9f       	mul	r24, r25
     de8:	c0 01       	movw	r24, r0
     dea:	11 24       	eor	r1, r1
     dec:	24 2f       	mov	r18, r20
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	ac 01       	movw	r20, r24
     df2:	42 9f       	mul	r20, r18
     df4:	c0 01       	movw	r24, r0
     df6:	43 9f       	mul	r20, r19
     df8:	90 0d       	add	r25, r0
     dfa:	52 9f       	mul	r21, r18
     dfc:	90 0d       	add	r25, r0
     dfe:	11 24       	eor	r1, r1
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divmodhi4>
     e06:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     e08:	cb 01       	movw	r24, r22
     e0a:	66 e0       	ldi	r22, 0x06	; 6
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 38 07 	call	0xe70	; 0xe70 <__udivmodhi4>
     e12:	e8 2e       	mov	r14, r24
     e14:	ff 24       	eor	r15, r15
     e16:	00 e0       	ldi	r16, 0x00	; 0
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	12 c0       	rjmp	.+36     	; 0xe40 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     e1c:	c8 01       	movw	r24, r16
     e1e:	05 96       	adiw	r24, 0x05	; 5
     e20:	c8 17       	cp	r28, r24
     e22:	d9 07       	cpc	r29, r25
     e24:	10 f0       	brcs	.+4      	; 0xe2a <LCDprogressBar+0x56>
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     e2a:	c0 17       	cp	r28, r16
     e2c:	d1 07       	cpc	r29, r17
     e2e:	10 f0       	brcs	.+4      	; 0xe34 <LCDprogressBar+0x60>
     e30:	8e 2d       	mov	r24, r14
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <LCDprogressBar+0x62>
     e34:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     e36:	0e 94 b5 05 	call	0xb6a	; 0xb6a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     e3a:	f3 94       	inc	r15
     e3c:	0a 5f       	subi	r16, 0xFA	; 250
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	fd 14       	cp	r15, r13
     e42:	60 f3       	brcs	.-40     	; 0xe1c <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	08 95       	ret

00000e54 <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
     e54:	48 2f       	mov	r20, r24
	mov  r21,r25											
     e56:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
     e58:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
     e5a:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
     e5c:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
     e5e:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
     e60:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
     e62:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
     e64:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
     e66:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
     e68:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
     e6a:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
     e6c:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
     e6e:	08 95       	ret

00000e70 <__udivmodhi4>:
     e70:	aa 1b       	sub	r26, r26
     e72:	bb 1b       	sub	r27, r27
     e74:	51 e1       	ldi	r21, 0x11	; 17
     e76:	07 c0       	rjmp	.+14     	; 0xe86 <__udivmodhi4_ep>

00000e78 <__udivmodhi4_loop>:
     e78:	aa 1f       	adc	r26, r26
     e7a:	bb 1f       	adc	r27, r27
     e7c:	a6 17       	cp	r26, r22
     e7e:	b7 07       	cpc	r27, r23
     e80:	10 f0       	brcs	.+4      	; 0xe86 <__udivmodhi4_ep>
     e82:	a6 1b       	sub	r26, r22
     e84:	b7 0b       	sbc	r27, r23

00000e86 <__udivmodhi4_ep>:
     e86:	88 1f       	adc	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	5a 95       	dec	r21
     e8c:	a9 f7       	brne	.-22     	; 0xe78 <__udivmodhi4_loop>
     e8e:	80 95       	com	r24
     e90:	90 95       	com	r25
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	08 95       	ret

00000e98 <__divmodhi4>:
     e98:	97 fb       	bst	r25, 7
     e9a:	09 2e       	mov	r0, r25
     e9c:	07 26       	eor	r0, r23
     e9e:	0a d0       	rcall	.+20     	; 0xeb4 <__divmodhi4_neg1>
     ea0:	77 fd       	sbrc	r23, 7
     ea2:	04 d0       	rcall	.+8      	; 0xeac <__divmodhi4_neg2>
     ea4:	e5 df       	rcall	.-54     	; 0xe70 <__udivmodhi4>
     ea6:	06 d0       	rcall	.+12     	; 0xeb4 <__divmodhi4_neg1>
     ea8:	00 20       	and	r0, r0
     eaa:	1a f4       	brpl	.+6      	; 0xeb2 <__divmodhi4_exit>

00000eac <__divmodhi4_neg2>:
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255

00000eb2 <__divmodhi4_exit>:
     eb2:	08 95       	ret

00000eb4 <__divmodhi4_neg1>:
     eb4:	f6 f7       	brtc	.-4      	; 0xeb2 <__divmodhi4_exit>
     eb6:	90 95       	com	r25
     eb8:	81 95       	neg	r24
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	08 95       	ret

00000ebe <sprintf>:
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	2e 97       	sbiw	r28, 0x0e	; 14
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	0d 89       	ldd	r16, Y+21	; 0x15
     ed8:	1e 89       	ldd	r17, Y+22	; 0x16
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	8c 83       	std	Y+4, r24	; 0x04
     ede:	1a 83       	std	Y+2, r17	; 0x02
     ee0:	09 83       	std	Y+1, r16	; 0x01
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	9f e7       	ldi	r25, 0x7F	; 127
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	9e 01       	movw	r18, r28
     eec:	27 5e       	subi	r18, 0xE7	; 231
     eee:	3f 4f       	sbci	r19, 0xFF	; 255
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	6f 89       	ldd	r22, Y+23	; 0x17
     ef6:	78 8d       	ldd	r23, Y+24	; 0x18
     ef8:	a9 01       	movw	r20, r18
     efa:	0e 94 90 07 	call	0xf20	; 0xf20 <vfprintf>
     efe:	2f 81       	ldd	r18, Y+7	; 0x07
     f00:	38 85       	ldd	r19, Y+8	; 0x08
     f02:	02 0f       	add	r16, r18
     f04:	13 1f       	adc	r17, r19
     f06:	f8 01       	movw	r30, r16
     f08:	10 82       	st	Z, r1
     f0a:	2e 96       	adiw	r28, 0x0e	; 14
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	08 95       	ret

00000f20 <vfprintf>:
     f20:	2f 92       	push	r2
     f22:	3f 92       	push	r3
     f24:	4f 92       	push	r4
     f26:	5f 92       	push	r5
     f28:	6f 92       	push	r6
     f2a:	7f 92       	push	r7
     f2c:	8f 92       	push	r8
     f2e:	9f 92       	push	r9
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	2b 97       	sbiw	r28, 0x0b	; 11
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	3c 01       	movw	r6, r24
     f56:	2b 01       	movw	r4, r22
     f58:	5a 01       	movw	r10, r20
     f5a:	fc 01       	movw	r30, r24
     f5c:	17 82       	std	Z+7, r1	; 0x07
     f5e:	16 82       	std	Z+6, r1	; 0x06
     f60:	83 81       	ldd	r24, Z+3	; 0x03
     f62:	81 fd       	sbrc	r24, 1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <vfprintf+0x4c>
     f66:	6f ef       	ldi	r22, 0xFF	; 255
     f68:	7f ef       	ldi	r23, 0xFF	; 255
     f6a:	c6 c1       	rjmp	.+908    	; 0x12f8 <vfprintf+0x3d8>
     f6c:	9a e0       	ldi	r25, 0x0A	; 10
     f6e:	89 2e       	mov	r8, r25
     f70:	1e 01       	movw	r2, r28
     f72:	08 94       	sec
     f74:	21 1c       	adc	r2, r1
     f76:	31 1c       	adc	r3, r1
     f78:	f3 01       	movw	r30, r6
     f7a:	23 81       	ldd	r18, Z+3	; 0x03
     f7c:	f2 01       	movw	r30, r4
     f7e:	23 fd       	sbrc	r18, 3
     f80:	85 91       	lpm	r24, Z+
     f82:	23 ff       	sbrs	r18, 3
     f84:	81 91       	ld	r24, Z+
     f86:	2f 01       	movw	r4, r30
     f88:	88 23       	and	r24, r24
     f8a:	09 f4       	brne	.+2      	; 0xf8e <vfprintf+0x6e>
     f8c:	b2 c1       	rjmp	.+868    	; 0x12f2 <vfprintf+0x3d2>
     f8e:	85 32       	cpi	r24, 0x25	; 37
     f90:	39 f4       	brne	.+14     	; 0xfa0 <vfprintf+0x80>
     f92:	23 fd       	sbrc	r18, 3
     f94:	85 91       	lpm	r24, Z+
     f96:	23 ff       	sbrs	r18, 3
     f98:	81 91       	ld	r24, Z+
     f9a:	2f 01       	movw	r4, r30
     f9c:	85 32       	cpi	r24, 0x25	; 37
     f9e:	29 f4       	brne	.+10     	; 0xfaa <vfprintf+0x8a>
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	b3 01       	movw	r22, r6
     fa4:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
     fa8:	e7 cf       	rjmp	.-50     	; 0xf78 <vfprintf+0x58>
     faa:	98 2f       	mov	r25, r24
     fac:	ff 24       	eor	r15, r15
     fae:	ee 24       	eor	r14, r14
     fb0:	99 24       	eor	r9, r9
     fb2:	ff e1       	ldi	r31, 0x1F	; 31
     fb4:	ff 15       	cp	r31, r15
     fb6:	d0 f0       	brcs	.+52     	; 0xfec <vfprintf+0xcc>
     fb8:	9b 32       	cpi	r25, 0x2B	; 43
     fba:	69 f0       	breq	.+26     	; 0xfd6 <vfprintf+0xb6>
     fbc:	9c 32       	cpi	r25, 0x2C	; 44
     fbe:	28 f4       	brcc	.+10     	; 0xfca <vfprintf+0xaa>
     fc0:	90 32       	cpi	r25, 0x20	; 32
     fc2:	59 f0       	breq	.+22     	; 0xfda <vfprintf+0xba>
     fc4:	93 32       	cpi	r25, 0x23	; 35
     fc6:	91 f4       	brne	.+36     	; 0xfec <vfprintf+0xcc>
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <vfprintf+0xc6>
     fca:	9d 32       	cpi	r25, 0x2D	; 45
     fcc:	49 f0       	breq	.+18     	; 0xfe0 <vfprintf+0xc0>
     fce:	90 33       	cpi	r25, 0x30	; 48
     fd0:	69 f4       	brne	.+26     	; 0xfec <vfprintf+0xcc>
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	24 c0       	rjmp	.+72     	; 0x101e <vfprintf+0xfe>
     fd6:	52 e0       	ldi	r21, 0x02	; 2
     fd8:	f5 2a       	or	r15, r21
     fda:	84 e0       	ldi	r24, 0x04	; 4
     fdc:	f8 2a       	or	r15, r24
     fde:	28 c0       	rjmp	.+80     	; 0x1030 <vfprintf+0x110>
     fe0:	98 e0       	ldi	r25, 0x08	; 8
     fe2:	f9 2a       	or	r15, r25
     fe4:	25 c0       	rjmp	.+74     	; 0x1030 <vfprintf+0x110>
     fe6:	e0 e1       	ldi	r30, 0x10	; 16
     fe8:	fe 2a       	or	r15, r30
     fea:	22 c0       	rjmp	.+68     	; 0x1030 <vfprintf+0x110>
     fec:	f7 fc       	sbrc	r15, 7
     fee:	29 c0       	rjmp	.+82     	; 0x1042 <vfprintf+0x122>
     ff0:	89 2f       	mov	r24, r25
     ff2:	80 53       	subi	r24, 0x30	; 48
     ff4:	8a 30       	cpi	r24, 0x0A	; 10
     ff6:	70 f4       	brcc	.+28     	; 0x1014 <vfprintf+0xf4>
     ff8:	f6 fe       	sbrs	r15, 6
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <vfprintf+0xe6>
     ffc:	98 9c       	mul	r9, r8
     ffe:	90 2c       	mov	r9, r0
    1000:	11 24       	eor	r1, r1
    1002:	98 0e       	add	r9, r24
    1004:	15 c0       	rjmp	.+42     	; 0x1030 <vfprintf+0x110>
    1006:	e8 9c       	mul	r14, r8
    1008:	e0 2c       	mov	r14, r0
    100a:	11 24       	eor	r1, r1
    100c:	e8 0e       	add	r14, r24
    100e:	f0 e2       	ldi	r31, 0x20	; 32
    1010:	ff 2a       	or	r15, r31
    1012:	0e c0       	rjmp	.+28     	; 0x1030 <vfprintf+0x110>
    1014:	9e 32       	cpi	r25, 0x2E	; 46
    1016:	29 f4       	brne	.+10     	; 0x1022 <vfprintf+0x102>
    1018:	f6 fc       	sbrc	r15, 6
    101a:	6b c1       	rjmp	.+726    	; 0x12f2 <vfprintf+0x3d2>
    101c:	40 e4       	ldi	r20, 0x40	; 64
    101e:	f4 2a       	or	r15, r20
    1020:	07 c0       	rjmp	.+14     	; 0x1030 <vfprintf+0x110>
    1022:	9c 36       	cpi	r25, 0x6C	; 108
    1024:	19 f4       	brne	.+6      	; 0x102c <vfprintf+0x10c>
    1026:	50 e8       	ldi	r21, 0x80	; 128
    1028:	f5 2a       	or	r15, r21
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <vfprintf+0x110>
    102c:	98 36       	cpi	r25, 0x68	; 104
    102e:	49 f4       	brne	.+18     	; 0x1042 <vfprintf+0x122>
    1030:	f2 01       	movw	r30, r4
    1032:	23 fd       	sbrc	r18, 3
    1034:	95 91       	lpm	r25, Z+
    1036:	23 ff       	sbrs	r18, 3
    1038:	91 91       	ld	r25, Z+
    103a:	2f 01       	movw	r4, r30
    103c:	99 23       	and	r25, r25
    103e:	09 f0       	breq	.+2      	; 0x1042 <vfprintf+0x122>
    1040:	b8 cf       	rjmp	.-144    	; 0xfb2 <vfprintf+0x92>
    1042:	89 2f       	mov	r24, r25
    1044:	85 54       	subi	r24, 0x45	; 69
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	18 f0       	brcs	.+6      	; 0x1050 <vfprintf+0x130>
    104a:	80 52       	subi	r24, 0x20	; 32
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	38 f4       	brcc	.+14     	; 0x105e <vfprintf+0x13e>
    1050:	44 e0       	ldi	r20, 0x04	; 4
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	a4 0e       	add	r10, r20
    1056:	b5 1e       	adc	r11, r21
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	59 83       	std	Y+1, r21	; 0x01
    105c:	0f c0       	rjmp	.+30     	; 0x107c <vfprintf+0x15c>
    105e:	93 36       	cpi	r25, 0x63	; 99
    1060:	31 f0       	breq	.+12     	; 0x106e <vfprintf+0x14e>
    1062:	93 37       	cpi	r25, 0x73	; 115
    1064:	79 f0       	breq	.+30     	; 0x1084 <vfprintf+0x164>
    1066:	93 35       	cpi	r25, 0x53	; 83
    1068:	09 f0       	breq	.+2      	; 0x106c <vfprintf+0x14c>
    106a:	56 c0       	rjmp	.+172    	; 0x1118 <vfprintf+0x1f8>
    106c:	20 c0       	rjmp	.+64     	; 0x10ae <vfprintf+0x18e>
    106e:	f5 01       	movw	r30, r10
    1070:	80 81       	ld	r24, Z
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	42 e0       	ldi	r20, 0x02	; 2
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	a4 0e       	add	r10, r20
    107a:	b5 1e       	adc	r11, r21
    107c:	61 01       	movw	r12, r2
    107e:	01 e0       	ldi	r16, 0x01	; 1
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	12 c0       	rjmp	.+36     	; 0x10a8 <vfprintf+0x188>
    1084:	f5 01       	movw	r30, r10
    1086:	c0 80       	ld	r12, Z
    1088:	d1 80       	ldd	r13, Z+1	; 0x01
    108a:	f6 fc       	sbrc	r15, 6
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <vfprintf+0x174>
    108e:	6f ef       	ldi	r22, 0xFF	; 255
    1090:	7f ef       	ldi	r23, 0xFF	; 255
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <vfprintf+0x178>
    1094:	69 2d       	mov	r22, r9
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	42 e0       	ldi	r20, 0x02	; 2
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	a4 0e       	add	r10, r20
    109e:	b5 1e       	adc	r11, r21
    10a0:	c6 01       	movw	r24, r12
    10a2:	0e 94 a1 09 	call	0x1342	; 0x1342 <strnlen>
    10a6:	8c 01       	movw	r16, r24
    10a8:	5f e7       	ldi	r21, 0x7F	; 127
    10aa:	f5 22       	and	r15, r21
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <vfprintf+0x1b6>
    10ae:	f5 01       	movw	r30, r10
    10b0:	c0 80       	ld	r12, Z
    10b2:	d1 80       	ldd	r13, Z+1	; 0x01
    10b4:	f6 fc       	sbrc	r15, 6
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <vfprintf+0x19e>
    10b8:	6f ef       	ldi	r22, 0xFF	; 255
    10ba:	7f ef       	ldi	r23, 0xFF	; 255
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x1a2>
    10be:	69 2d       	mov	r22, r9
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	42 e0       	ldi	r20, 0x02	; 2
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	a4 0e       	add	r10, r20
    10c8:	b5 1e       	adc	r11, r21
    10ca:	c6 01       	movw	r24, r12
    10cc:	0e 94 96 09 	call	0x132c	; 0x132c <strnlen_P>
    10d0:	8c 01       	movw	r16, r24
    10d2:	50 e8       	ldi	r21, 0x80	; 128
    10d4:	f5 2a       	or	r15, r21
    10d6:	f3 fe       	sbrs	r15, 3
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <vfprintf+0x1c8>
    10da:	1a c0       	rjmp	.+52     	; 0x1110 <vfprintf+0x1f0>
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	b3 01       	movw	r22, r6
    10e2:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    10e6:	ea 94       	dec	r14
    10e8:	8e 2d       	mov	r24, r14
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	08 17       	cp	r16, r24
    10ee:	19 07       	cpc	r17, r25
    10f0:	a8 f3       	brcs	.-22     	; 0x10dc <vfprintf+0x1bc>
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <vfprintf+0x1f0>
    10f4:	f6 01       	movw	r30, r12
    10f6:	f7 fc       	sbrc	r15, 7
    10f8:	85 91       	lpm	r24, Z+
    10fa:	f7 fe       	sbrs	r15, 7
    10fc:	81 91       	ld	r24, Z+
    10fe:	6f 01       	movw	r12, r30
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	b3 01       	movw	r22, r6
    1104:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1108:	e1 10       	cpse	r14, r1
    110a:	ea 94       	dec	r14
    110c:	01 50       	subi	r16, 0x01	; 1
    110e:	10 40       	sbci	r17, 0x00	; 0
    1110:	01 15       	cp	r16, r1
    1112:	11 05       	cpc	r17, r1
    1114:	79 f7       	brne	.-34     	; 0x10f4 <vfprintf+0x1d4>
    1116:	ea c0       	rjmp	.+468    	; 0x12ec <vfprintf+0x3cc>
    1118:	94 36       	cpi	r25, 0x64	; 100
    111a:	11 f0       	breq	.+4      	; 0x1120 <vfprintf+0x200>
    111c:	99 36       	cpi	r25, 0x69	; 105
    111e:	69 f5       	brne	.+90     	; 0x117a <vfprintf+0x25a>
    1120:	f7 fe       	sbrs	r15, 7
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <vfprintf+0x214>
    1124:	f5 01       	movw	r30, r10
    1126:	20 81       	ld	r18, Z
    1128:	31 81       	ldd	r19, Z+1	; 0x01
    112a:	42 81       	ldd	r20, Z+2	; 0x02
    112c:	53 81       	ldd	r21, Z+3	; 0x03
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0a c0       	rjmp	.+20     	; 0x1148 <vfprintf+0x228>
    1134:	f5 01       	movw	r30, r10
    1136:	80 81       	ld	r24, Z
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	9c 01       	movw	r18, r24
    113c:	44 27       	eor	r20, r20
    113e:	37 fd       	sbrc	r19, 7
    1140:	40 95       	com	r20
    1142:	54 2f       	mov	r21, r20
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a8 0e       	add	r10, r24
    114a:	b9 1e       	adc	r11, r25
    114c:	9f e6       	ldi	r25, 0x6F	; 111
    114e:	f9 22       	and	r15, r25
    1150:	57 ff       	sbrs	r21, 7
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <vfprintf+0x246>
    1154:	50 95       	com	r21
    1156:	40 95       	com	r20
    1158:	30 95       	com	r19
    115a:	21 95       	neg	r18
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	4f 4f       	sbci	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	e0 e8       	ldi	r30, 0x80	; 128
    1164:	fe 2a       	or	r15, r30
    1166:	ca 01       	movw	r24, r20
    1168:	b9 01       	movw	r22, r18
    116a:	a1 01       	movw	r20, r2
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__ultoa_invert>
    1174:	d8 2e       	mov	r13, r24
    1176:	d2 18       	sub	r13, r2
    1178:	40 c0       	rjmp	.+128    	; 0x11fa <vfprintf+0x2da>
    117a:	95 37       	cpi	r25, 0x75	; 117
    117c:	29 f4       	brne	.+10     	; 0x1188 <vfprintf+0x268>
    117e:	1f 2d       	mov	r17, r15
    1180:	1f 7e       	andi	r17, 0xEF	; 239
    1182:	2a e0       	ldi	r18, 0x0A	; 10
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	1d c0       	rjmp	.+58     	; 0x11c2 <vfprintf+0x2a2>
    1188:	1f 2d       	mov	r17, r15
    118a:	19 7f       	andi	r17, 0xF9	; 249
    118c:	9f 36       	cpi	r25, 0x6F	; 111
    118e:	61 f0       	breq	.+24     	; 0x11a8 <vfprintf+0x288>
    1190:	90 37       	cpi	r25, 0x70	; 112
    1192:	20 f4       	brcc	.+8      	; 0x119c <vfprintf+0x27c>
    1194:	98 35       	cpi	r25, 0x58	; 88
    1196:	09 f0       	breq	.+2      	; 0x119a <vfprintf+0x27a>
    1198:	ac c0       	rjmp	.+344    	; 0x12f2 <vfprintf+0x3d2>
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <vfprintf+0x29a>
    119c:	90 37       	cpi	r25, 0x70	; 112
    119e:	39 f0       	breq	.+14     	; 0x11ae <vfprintf+0x28e>
    11a0:	98 37       	cpi	r25, 0x78	; 120
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <vfprintf+0x286>
    11a4:	a6 c0       	rjmp	.+332    	; 0x12f2 <vfprintf+0x3d2>
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <vfprintf+0x290>
    11a8:	28 e0       	ldi	r18, 0x08	; 8
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	0a c0       	rjmp	.+20     	; 0x11c2 <vfprintf+0x2a2>
    11ae:	10 61       	ori	r17, 0x10	; 16
    11b0:	14 fd       	sbrc	r17, 4
    11b2:	14 60       	ori	r17, 0x04	; 4
    11b4:	20 e1       	ldi	r18, 0x10	; 16
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <vfprintf+0x2a2>
    11ba:	14 fd       	sbrc	r17, 4
    11bc:	16 60       	ori	r17, 0x06	; 6
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	32 e0       	ldi	r19, 0x02	; 2
    11c2:	17 ff       	sbrs	r17, 7
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <vfprintf+0x2b6>
    11c6:	f5 01       	movw	r30, r10
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	44 e0       	ldi	r20, 0x04	; 4
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <vfprintf+0x2c6>
    11d6:	f5 01       	movw	r30, r10
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	bc 01       	movw	r22, r24
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	42 e0       	ldi	r20, 0x02	; 2
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	a4 0e       	add	r10, r20
    11e8:	b5 1e       	adc	r11, r21
    11ea:	a1 01       	movw	r20, r2
    11ec:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__ultoa_invert>
    11f0:	d8 2e       	mov	r13, r24
    11f2:	d2 18       	sub	r13, r2
    11f4:	8f e7       	ldi	r24, 0x7F	; 127
    11f6:	f8 2e       	mov	r15, r24
    11f8:	f1 22       	and	r15, r17
    11fa:	f6 fe       	sbrs	r15, 6
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <vfprintf+0x2f4>
    11fe:	5e ef       	ldi	r21, 0xFE	; 254
    1200:	f5 22       	and	r15, r21
    1202:	d9 14       	cp	r13, r9
    1204:	38 f4       	brcc	.+14     	; 0x1214 <vfprintf+0x2f4>
    1206:	f4 fe       	sbrs	r15, 4
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <vfprintf+0x2f8>
    120a:	f2 fc       	sbrc	r15, 2
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <vfprintf+0x2f8>
    120e:	8f ee       	ldi	r24, 0xEF	; 239
    1210:	f8 22       	and	r15, r24
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x2f8>
    1214:	1d 2d       	mov	r17, r13
    1216:	01 c0       	rjmp	.+2      	; 0x121a <vfprintf+0x2fa>
    1218:	19 2d       	mov	r17, r9
    121a:	f4 fe       	sbrs	r15, 4
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <vfprintf+0x318>
    121e:	fe 01       	movw	r30, r28
    1220:	ed 0d       	add	r30, r13
    1222:	f1 1d       	adc	r31, r1
    1224:	80 81       	ld	r24, Z
    1226:	80 33       	cpi	r24, 0x30	; 48
    1228:	19 f4       	brne	.+6      	; 0x1230 <vfprintf+0x310>
    122a:	99 ee       	ldi	r25, 0xE9	; 233
    122c:	f9 22       	and	r15, r25
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0x320>
    1230:	1f 5f       	subi	r17, 0xFF	; 255
    1232:	f2 fe       	sbrs	r15, 2
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <vfprintf+0x320>
    1236:	03 c0       	rjmp	.+6      	; 0x123e <vfprintf+0x31e>
    1238:	8f 2d       	mov	r24, r15
    123a:	86 78       	andi	r24, 0x86	; 134
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0x320>
    123e:	1f 5f       	subi	r17, 0xFF	; 255
    1240:	0f 2d       	mov	r16, r15
    1242:	f3 fc       	sbrc	r15, 3
    1244:	14 c0       	rjmp	.+40     	; 0x126e <vfprintf+0x34e>
    1246:	f0 fe       	sbrs	r15, 0
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <vfprintf+0x348>
    124a:	1e 15       	cp	r17, r14
    124c:	10 f0       	brcs	.+4      	; 0x1252 <vfprintf+0x332>
    124e:	9d 2c       	mov	r9, r13
    1250:	0b c0       	rjmp	.+22     	; 0x1268 <vfprintf+0x348>
    1252:	9d 2c       	mov	r9, r13
    1254:	9e 0c       	add	r9, r14
    1256:	91 1a       	sub	r9, r17
    1258:	1e 2d       	mov	r17, r14
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x348>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	b3 01       	movw	r22, r6
    1262:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1266:	1f 5f       	subi	r17, 0xFF	; 255
    1268:	1e 15       	cp	r17, r14
    126a:	c0 f3       	brcs	.-16     	; 0x125c <vfprintf+0x33c>
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <vfprintf+0x356>
    126e:	1e 15       	cp	r17, r14
    1270:	10 f4       	brcc	.+4      	; 0x1276 <vfprintf+0x356>
    1272:	e1 1a       	sub	r14, r17
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <vfprintf+0x358>
    1276:	ee 24       	eor	r14, r14
    1278:	04 ff       	sbrs	r16, 4
    127a:	0f c0       	rjmp	.+30     	; 0x129a <vfprintf+0x37a>
    127c:	80 e3       	ldi	r24, 0x30	; 48
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	b3 01       	movw	r22, r6
    1282:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    1286:	02 ff       	sbrs	r16, 2
    1288:	1d c0       	rjmp	.+58     	; 0x12c4 <vfprintf+0x3a4>
    128a:	01 fd       	sbrc	r16, 1
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <vfprintf+0x374>
    128e:	88 e7       	ldi	r24, 0x78	; 120
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e c0       	rjmp	.+28     	; 0x12b0 <vfprintf+0x390>
    1294:	88 e5       	ldi	r24, 0x58	; 88
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <vfprintf+0x390>
    129a:	80 2f       	mov	r24, r16
    129c:	86 78       	andi	r24, 0x86	; 134
    129e:	91 f0       	breq	.+36     	; 0x12c4 <vfprintf+0x3a4>
    12a0:	01 ff       	sbrs	r16, 1
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <vfprintf+0x388>
    12a4:	8b e2       	ldi	r24, 0x2B	; 43
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <vfprintf+0x38a>
    12a8:	80 e2       	ldi	r24, 0x20	; 32
    12aa:	f7 fc       	sbrc	r15, 7
    12ac:	8d e2       	ldi	r24, 0x2D	; 45
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	b3 01       	movw	r22, r6
    12b2:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <vfprintf+0x3a4>
    12b8:	80 e3       	ldi	r24, 0x30	; 48
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	b3 01       	movw	r22, r6
    12be:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    12c2:	9a 94       	dec	r9
    12c4:	d9 14       	cp	r13, r9
    12c6:	c0 f3       	brcs	.-16     	; 0x12b8 <vfprintf+0x398>
    12c8:	da 94       	dec	r13
    12ca:	f1 01       	movw	r30, r2
    12cc:	ed 0d       	add	r30, r13
    12ce:	f1 1d       	adc	r31, r1
    12d0:	80 81       	ld	r24, Z
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	b3 01       	movw	r22, r6
    12d6:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    12da:	dd 20       	and	r13, r13
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <vfprintf+0x3a8>
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <vfprintf+0x3cc>
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	b3 01       	movw	r22, r6
    12e6:	0e 94 ac 09 	call	0x1358	; 0x1358 <fputc>
    12ea:	ea 94       	dec	r14
    12ec:	ee 20       	and	r14, r14
    12ee:	c1 f7       	brne	.-16     	; 0x12e0 <vfprintf+0x3c0>
    12f0:	43 ce       	rjmp	.-890    	; 0xf78 <vfprintf+0x58>
    12f2:	f3 01       	movw	r30, r6
    12f4:	66 81       	ldd	r22, Z+6	; 0x06
    12f6:	77 81       	ldd	r23, Z+7	; 0x07
    12f8:	cb 01       	movw	r24, r22
    12fa:	2b 96       	adiw	r28, 0x0b	; 11
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	9f 90       	pop	r9
    131c:	8f 90       	pop	r8
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	3f 90       	pop	r3
    1328:	2f 90       	pop	r2
    132a:	08 95       	ret

0000132c <strnlen_P>:
    132c:	fc 01       	movw	r30, r24
    132e:	05 90       	lpm	r0, Z+
    1330:	61 50       	subi	r22, 0x01	; 1
    1332:	70 40       	sbci	r23, 0x00	; 0
    1334:	01 10       	cpse	r0, r1
    1336:	d8 f7       	brcc	.-10     	; 0x132e <strnlen_P+0x2>
    1338:	80 95       	com	r24
    133a:	90 95       	com	r25
    133c:	8e 0f       	add	r24, r30
    133e:	9f 1f       	adc	r25, r31
    1340:	08 95       	ret

00001342 <strnlen>:
    1342:	fc 01       	movw	r30, r24
    1344:	61 50       	subi	r22, 0x01	; 1
    1346:	70 40       	sbci	r23, 0x00	; 0
    1348:	01 90       	ld	r0, Z+
    134a:	01 10       	cpse	r0, r1
    134c:	d8 f7       	brcc	.-10     	; 0x1344 <strnlen+0x2>
    134e:	80 95       	com	r24
    1350:	90 95       	com	r25
    1352:	8e 0f       	add	r24, r30
    1354:	9f 1f       	adc	r25, r31
    1356:	08 95       	ret

00001358 <fputc>:
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	8c 01       	movw	r16, r24
    1362:	eb 01       	movw	r28, r22
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	81 ff       	sbrs	r24, 1
    1368:	1b c0       	rjmp	.+54     	; 0x13a0 <fputc+0x48>
    136a:	82 ff       	sbrs	r24, 2
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <fputc+0x30>
    136e:	2e 81       	ldd	r18, Y+6	; 0x06
    1370:	3f 81       	ldd	r19, Y+7	; 0x07
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	28 17       	cp	r18, r24
    1378:	39 07       	cpc	r19, r25
    137a:	64 f4       	brge	.+24     	; 0x1394 <fputc+0x3c>
    137c:	e8 81       	ld	r30, Y
    137e:	f9 81       	ldd	r31, Y+1	; 0x01
    1380:	01 93       	st	Z+, r16
    1382:	f9 83       	std	Y+1, r31	; 0x01
    1384:	e8 83       	st	Y, r30
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <fputc+0x3c>
    1388:	e8 85       	ldd	r30, Y+8	; 0x08
    138a:	f9 85       	ldd	r31, Y+9	; 0x09
    138c:	80 2f       	mov	r24, r16
    138e:	09 95       	icall
    1390:	89 2b       	or	r24, r25
    1392:	31 f4       	brne	.+12     	; 0x13a0 <fputc+0x48>
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	9f 81       	ldd	r25, Y+7	; 0x07
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	9f 83       	std	Y+7, r25	; 0x07
    139c:	8e 83       	std	Y+6, r24	; 0x06
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <fputc+0x4c>
    13a0:	0f ef       	ldi	r16, 0xFF	; 255
    13a2:	1f ef       	ldi	r17, 0xFF	; 255
    13a4:	c8 01       	movw	r24, r16
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <__ultoa_invert>:
    13b0:	fa 01       	movw	r30, r20
    13b2:	aa 27       	eor	r26, r26
    13b4:	28 30       	cpi	r18, 0x08	; 8
    13b6:	51 f1       	breq	.+84     	; 0x140c <__ultoa_invert+0x5c>
    13b8:	20 31       	cpi	r18, 0x10	; 16
    13ba:	81 f1       	breq	.+96     	; 0x141c <__ultoa_invert+0x6c>
    13bc:	e8 94       	clt
    13be:	6f 93       	push	r22
    13c0:	6e 7f       	andi	r22, 0xFE	; 254
    13c2:	6e 5f       	subi	r22, 0xFE	; 254
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	8f 4f       	sbci	r24, 0xFF	; 255
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	af 4f       	sbci	r26, 0xFF	; 255
    13cc:	b1 e0       	ldi	r27, 0x01	; 1
    13ce:	3e d0       	rcall	.+124    	; 0x144c <__ultoa_invert+0x9c>
    13d0:	b4 e0       	ldi	r27, 0x04	; 4
    13d2:	3c d0       	rcall	.+120    	; 0x144c <__ultoa_invert+0x9c>
    13d4:	67 0f       	add	r22, r23
    13d6:	78 1f       	adc	r23, r24
    13d8:	89 1f       	adc	r24, r25
    13da:	9a 1f       	adc	r25, r26
    13dc:	a1 1d       	adc	r26, r1
    13de:	68 0f       	add	r22, r24
    13e0:	79 1f       	adc	r23, r25
    13e2:	8a 1f       	adc	r24, r26
    13e4:	91 1d       	adc	r25, r1
    13e6:	a1 1d       	adc	r26, r1
    13e8:	6a 0f       	add	r22, r26
    13ea:	71 1d       	adc	r23, r1
    13ec:	81 1d       	adc	r24, r1
    13ee:	91 1d       	adc	r25, r1
    13f0:	a1 1d       	adc	r26, r1
    13f2:	20 d0       	rcall	.+64     	; 0x1434 <__ultoa_invert+0x84>
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <__ultoa_invert+0x48>
    13f6:	68 94       	set
    13f8:	3f 91       	pop	r19
    13fa:	2a e0       	ldi	r18, 0x0A	; 10
    13fc:	26 9f       	mul	r18, r22
    13fe:	11 24       	eor	r1, r1
    1400:	30 19       	sub	r19, r0
    1402:	30 5d       	subi	r19, 0xD0	; 208
    1404:	31 93       	st	Z+, r19
    1406:	de f6       	brtc	.-74     	; 0x13be <__ultoa_invert+0xe>
    1408:	cf 01       	movw	r24, r30
    140a:	08 95       	ret
    140c:	46 2f       	mov	r20, r22
    140e:	47 70       	andi	r20, 0x07	; 7
    1410:	40 5d       	subi	r20, 0xD0	; 208
    1412:	41 93       	st	Z+, r20
    1414:	b3 e0       	ldi	r27, 0x03	; 3
    1416:	0f d0       	rcall	.+30     	; 0x1436 <__ultoa_invert+0x86>
    1418:	c9 f7       	brne	.-14     	; 0x140c <__ultoa_invert+0x5c>
    141a:	f6 cf       	rjmp	.-20     	; 0x1408 <__ultoa_invert+0x58>
    141c:	46 2f       	mov	r20, r22
    141e:	4f 70       	andi	r20, 0x0F	; 15
    1420:	40 5d       	subi	r20, 0xD0	; 208
    1422:	4a 33       	cpi	r20, 0x3A	; 58
    1424:	18 f0       	brcs	.+6      	; 0x142c <__ultoa_invert+0x7c>
    1426:	49 5d       	subi	r20, 0xD9	; 217
    1428:	31 fd       	sbrc	r19, 1
    142a:	40 52       	subi	r20, 0x20	; 32
    142c:	41 93       	st	Z+, r20
    142e:	02 d0       	rcall	.+4      	; 0x1434 <__ultoa_invert+0x84>
    1430:	a9 f7       	brne	.-22     	; 0x141c <__ultoa_invert+0x6c>
    1432:	ea cf       	rjmp	.-44     	; 0x1408 <__ultoa_invert+0x58>
    1434:	b4 e0       	ldi	r27, 0x04	; 4
    1436:	a6 95       	lsr	r26
    1438:	97 95       	ror	r25
    143a:	87 95       	ror	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	ba 95       	dec	r27
    1442:	c9 f7       	brne	.-14     	; 0x1436 <__ultoa_invert+0x86>
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	61 05       	cpc	r22, r1
    1448:	71 05       	cpc	r23, r1
    144a:	08 95       	ret
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	0a 2e       	mov	r0, r26
    1452:	06 94       	lsr	r0
    1454:	57 95       	ror	r21
    1456:	47 95       	ror	r20
    1458:	37 95       	ror	r19
    145a:	27 95       	ror	r18
    145c:	ba 95       	dec	r27
    145e:	c9 f7       	brne	.-14     	; 0x1452 <__ultoa_invert+0xa2>
    1460:	62 0f       	add	r22, r18
    1462:	73 1f       	adc	r23, r19
    1464:	84 1f       	adc	r24, r20
    1466:	95 1f       	adc	r25, r21
    1468:	a0 1d       	adc	r26, r0
    146a:	08 95       	ret

0000146c <_exit>:
    146c:	f8 94       	cli

0000146e <__stop_program>:
    146e:	ff cf       	rjmp	.-2      	; 0x146e <__stop_program>
