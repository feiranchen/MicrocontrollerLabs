
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001c60  00001cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004df  00800128  00800128  00001d1c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000042a  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001385  00000000  00000000  000021aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046c  00000000  00000000  0000352f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ef7  00000000  00000000  0000399b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00004894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ed  00000000  00000000  00004b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab8  00000000  00000000  00005011  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00005ac9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	e0 e6       	ldi	r30, 0x60	; 96
     4ec:	fc e1       	ldi	r31, 0x1C	; 28
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	a8 32       	cpi	r26, 0x28	; 40
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	16 e0       	ldi	r17, 0x06	; 6
     500:	a8 e2       	ldi	r26, 0x28	; 40
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a7 30       	cpi	r26, 0x07	; 7
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <main>
     512:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
volatile unsigned char time_elapsed_HS;

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 e7 05 	lds	r24, 0x05E7
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 a9 05 	lds	r24, 0x05A9
     544:	90 91 aa 05 	lds	r25, 0x05AA
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 aa 05 	sts	0x05AA, r25
     54e:	80 93 a9 05 	sts	0x05A9, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 a9 05 	lds	r24, 0x05A9
     556:	90 91 aa 05 	lds	r25, 0x05AA
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 e7 05 	sts	0x05E7, r24
    	syncOFF = 0;
     566:	10 92 06 06 	sts	0x0606, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 a9 05 	lds	r24, 0x05A9
     56e:	90 91 aa 05 	lds	r25, 0x05AA
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 e7 05 	sts	0x05E7, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 06 06 	sts	0x0606, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 a9 05 	lds	r24, 0x05A9
     586:	90 91 aa 05 	lds	r25, 0x05AA
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 aa 05 	sts	0x05AA, r25
     598:	80 93 a9 05 	sts	0x05A9, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 06 06 	lds	r24, 0x0606
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 a9 05 	lds	r24, 0x05A9
     5ac:	90 91 aa 05 	lds	r25, 0x05AA
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 a9 05 	lds	r24, 0x05A9
     5ba:	90 91 aa 05 	lds	r25, 0x05AA
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 a9 05 	lds	r24, 0x05A9
     5c6:	90 91 aa 05 	lds	r25, 0x05AA
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(8);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	e9 5a       	subi	r30, 0xA9	; 169
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	e7 5a       	subi	r30, 0xA7	; 167
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     6a2:	80 5a       	subi	r24, 0xA0	; 160
     6a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	80 83       	st	Z, r24
end
     6b0:	08 95       	ret

000006b2 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     6b6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     6ba:	10 92 7a 00 	sts	0x007A, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     6c4:	87 e8       	ldi	r24, 0x87	; 135
     6c6:	80 93 7a 00 	sts	0x007A, r24
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     6ca:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     6cc:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     6d8:	80 ec       	ldi	r24, 0xC0	; 192
     6da:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	10 93 c5 00 	sts	0x00C5, r17
     6e6:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	//LCD_init();
	port_init();
	USART_init();
	timer1_init();
     6ea:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     6ee:	10 93 aa 05 	sts	0x05AA, r17
     6f2:	00 93 a9 05 	sts	0x05A9, r16

	syncON = 0b00000000;
     6f6:	10 92 e7 05 	sts	0x05E7, r1
	syncOFF = 0b00000001;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 06 06 	sts	0x0606, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++)
	begin
		is_on_screen[n] = 0;
     704:	fc 01       	movw	r30, r24
     706:	e8 5b       	subi	r30, 0xB8	; 184
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	10 82       	st	Z, r1
		age[n] = 0;
     70c:	fc 01       	movw	r30, r24
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	e8 5d       	subi	r30, 0xD8	; 216
     714:	fe 4f       	sbci	r31, 0xFE	; 254
     716:	11 82       	std	Z+1, r1	; 0x01
     718:	10 82       	st	Z, r1
		hit_count[n] = 0;
     71a:	fc 01       	movw	r30, r24
     71c:	e6 59       	subi	r30, 0x96	; 150
     71e:	fa 4f       	sbci	r31, 0xFA	; 250
     720:	10 82       	st	Z, r1

	syncON = 0b00000000;
	syncOFF = 0b00000001;

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++)
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	8f 30       	cpi	r24, 0x0F	; 15
     726:	91 05       	cpc	r25, r1
     728:	69 f7       	brne	.-38     	; 0x704 <initialize+0x52>
     72a:	e7 e5       	ldi	r30, 0x57	; 87
     72c:	f1 e0       	ldi	r31, 0x01	; 1
		is_on_screen[n] = 0;
		age[n] = 0;
		hit_count[n] = 0;
	end

	for(int y=0; y<screen_array_size;y++) screen[y] = 0;
     72e:	11 92       	st	Z+, r1
     730:	85 e0       	ldi	r24, 0x05	; 5
     732:	e7 35       	cpi	r30, 0x57	; 87
     734:	f8 07       	cpc	r31, r24
     736:	d9 f7       	brne	.-10     	; 0x72e <initialize+0x7c>
	time_elapsed_HS = 0;
     738:	10 92 69 05 	sts	0x0569, r1
	score = 0;
     73c:	10 92 68 05 	sts	0x0568, r1

	// Set up single video line timing
	sei();
     740:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     742:	83 b7       	in	r24, 0x33	; 51
     744:	81 7f       	andi	r24, 0xF1	; 241
     746:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     748:	83 b7       	in	r24, 0x33	; 51
     74a:	81 60       	ori	r24, 0x01	; 1
     74c:	83 bf       	out	0x33, r24	; 51

end
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     754:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	54 e0       	ldi	r21, 0x04	; 4
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	5a 95       	dec	r21
     760:	e1 f7       	brne	.-8      	; 0x75a <video_pt+0x6>
     762:	86 95       	lsr	r24
     764:	86 95       	lsr	r24
     766:	86 95       	lsr	r24
     768:	68 0f       	add	r22, r24
     76a:	71 1d       	adc	r23, r1

	if (c==1)
     76c:	41 30       	cpi	r20, 0x01	; 1
     76e:	69 f4       	brne	.+26     	; 0x78a <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     770:	db 01       	movw	r26, r22
     772:	a9 5a       	subi	r26, 0xA9	; 169
     774:	be 4f       	sbci	r27, 0xFE	; 254
     776:	e9 2f       	mov	r30, r25
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	e7 70       	andi	r30, 0x07	; 7
     77c:	f0 70       	andi	r31, 0x00	; 0
     77e:	e1 5e       	subi	r30, 0xE1	; 225
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	8c 91       	ld	r24, X
     784:	90 81       	ld	r25, Z
     786:	89 2b       	or	r24, r25
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <video_pt+0x64>
     78a:	db 01       	movw	r26, r22
     78c:	a9 5a       	subi	r26, 0xA9	; 169
     78e:	be 4f       	sbci	r27, 0xFE	; 254
     790:	e9 2f       	mov	r30, r25
     792:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     794:	44 23       	and	r20, r20
     796:	49 f4       	brne	.+18     	; 0x7aa <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     798:	e7 70       	andi	r30, 0x07	; 7
     79a:	f0 70       	andi	r31, 0x00	; 0
     79c:	e1 5e       	subi	r30, 0xE1	; 225
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	90 81       	ld	r25, Z
     7a2:	90 95       	com	r25
     7a4:	8c 91       	ld	r24, X
     7a6:	89 23       	and	r24, r25
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     7aa:	e7 70       	andi	r30, 0x07	; 7
     7ac:	f0 70       	andi	r31, 0x00	; 0
     7ae:	e1 5e       	subi	r30, 0xE1	; 225
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	8c 91       	ld	r24, X
     7b4:	90 81       	ld	r25, Z
     7b6:	89 27       	eor	r24, r25
     7b8:	8c 93       	st	X, r24
     7ba:	08 95       	ret

000007bc <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     7bc:	2f 92       	push	r2
     7be:	3f 92       	push	r3
     7c0:	4f 92       	push	r4
     7c2:	5f 92       	push	r5
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <video_line+0x26>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <video_line+0x28>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     7ea:	c8 2e       	mov	r12, r24
     7ec:	dd 24       	eor	r13, r13
	y = y1;
     7ee:	e6 2e       	mov	r14, r22
     7f0:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     7f2:	48 17       	cp	r20, r24
     7f4:	38 f4       	brcc	.+14     	; 0x804 <video_line+0x48>
		dx = x1 - x2;
     7f6:	c6 01       	movw	r24, r12
     7f8:	84 1b       	sub	r24, r20
     7fa:	91 09       	sbc	r25, r1
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	8b 83       	std	Y+3, r24	; 0x03
     800:	7f ef       	ldi	r23, 0xFF	; 255
     802:	0d c0       	rjmp	.+26     	; 0x81e <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     804:	48 17       	cp	r20, r24
     806:	21 f4       	brne	.+8      	; 0x810 <video_line+0x54>
     808:	1c 82       	std	Y+4, r1	; 0x04
     80a:	1b 82       	std	Y+3, r1	; 0x03
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	07 c0       	rjmp	.+14     	; 0x81e <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     810:	e4 2f       	mov	r30, r20
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ec 19       	sub	r30, r12
     816:	fd 09       	sbc	r31, r13
     818:	fc 83       	std	Y+4, r31	; 0x04
     81a:	eb 83       	std	Y+3, r30	; 0x03
     81c:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     81e:	26 17       	cp	r18, r22
     820:	28 f4       	brcc	.+10     	; 0x82c <video_line+0x70>
		dy = y1 - y2;
     822:	a7 01       	movw	r20, r14
     824:	42 1b       	sub	r20, r18
     826:	51 09       	sbc	r21, r1
     828:	6f ef       	ldi	r22, 0xFF	; 255
     82a:	0b c0       	rjmp	.+22     	; 0x842 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     82c:	26 17       	cp	r18, r22
     82e:	21 f4       	brne	.+8      	; 0x838 <video_line+0x7c>
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	05 c0       	rjmp	.+10     	; 0x842 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     838:	42 2f       	mov	r20, r18
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	4e 19       	sub	r20, r14
     83e:	5f 09       	sbc	r21, r15
     840:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	84 17       	cp	r24, r20
     848:	95 07       	cpc	r25, r21
     84a:	44 f4       	brge	.+16     	; 0x85c <video_line+0xa0>
     84c:	ca 01       	movw	r24, r20
     84e:	4b 81       	ldd	r20, Y+3	; 0x03
     850:	5c 81       	ldd	r21, Y+4	; 0x04
     852:	9c 83       	std	Y+4, r25	; 0x04
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	99 83       	std	Y+1, r25	; 0x01
     85a:	01 c0       	rjmp	.+2      	; 0x85e <video_line+0xa2>
     85c:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     85e:	2a 01       	movw	r4, r20
     860:	44 0c       	add	r4, r4
     862:	55 1c       	adc	r5, r5
     864:	82 01       	movw	r16, r4
     866:	eb 81       	ldd	r30, Y+3	; 0x03
     868:	fc 81       	ldd	r31, Y+4	; 0x04
     86a:	0e 1b       	sub	r16, r30
     86c:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     86e:	1f 01       	movw	r2, r30
     870:	22 0c       	add	r2, r2
     872:	33 1c       	adc	r3, r3
     874:	aa 24       	eor	r10, r10
     876:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     878:	66 2e       	mov	r6, r22
     87a:	77 24       	eor	r7, r7
     87c:	67 fc       	sbrc	r6, 7
     87e:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     880:	87 2e       	mov	r8, r23
     882:	99 24       	eor	r9, r9
     884:	87 fc       	sbrc	r8, 7
     886:	90 94       	com	r9
     888:	1e c0       	rjmp	.+60     	; 0x8c6 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     88a:	8c 2d       	mov	r24, r12
     88c:	6e 2d       	mov	r22, r14
     88e:	4a 81       	ldd	r20, Y+2	; 0x02
     890:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
		 
		if (e>=0) {
     894:	17 fd       	sbrc	r17, 7
     896:	0a c0       	rjmp	.+20     	; 0x8ac <video_line+0xf0>
			if (xchange==1) x = x + s1;
     898:	f9 81       	ldd	r31, Y+1	; 0x01
     89a:	f1 30       	cpi	r31, 0x01	; 1
     89c:	19 f4       	brne	.+6      	; 0x8a4 <video_line+0xe8>
     89e:	c8 0c       	add	r12, r8
     8a0:	d9 1c       	adc	r13, r9
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <video_line+0xec>
			else y = y + s2;
     8a4:	e6 0c       	add	r14, r6
     8a6:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     8a8:	02 19       	sub	r16, r2
     8aa:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	19 f4       	brne	.+6      	; 0x8b8 <video_line+0xfc>
     8b2:	e6 0c       	add	r14, r6
     8b4:	f7 1c       	adc	r15, r7
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <video_line+0x100>
		else x = x + s1;
     8b8:	c8 0c       	add	r12, r8
     8ba:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     8bc:	04 0d       	add	r16, r4
     8be:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     8c0:	08 94       	sec
     8c2:	a1 1c       	adc	r10, r1
     8c4:	b1 1c       	adc	r11, r1
     8c6:	eb 81       	ldd	r30, Y+3	; 0x03
     8c8:	fc 81       	ldd	r31, Y+4	; 0x04
     8ca:	ea 15       	cp	r30, r10
     8cc:	fb 05       	cpc	r31, r11
     8ce:	ec f6       	brge	.-70     	; 0x88a <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	e8 2e       	mov	r14, r24
     918:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     91a:	87 e0       	ldi	r24, 0x07	; 7
     91c:	48 9f       	mul	r20, r24
     91e:	a0 01       	movw	r20, r0
     920:	11 24       	eor	r1, r1
     922:	ea 01       	movw	r28, r20
     924:	c8 5e       	subi	r28, 0xE8	; 232
     926:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     928:	8e 2c       	mov	r8, r14
     92a:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     92c:	72 e0       	ldi	r23, 0x02	; 2
     92e:	97 2e       	mov	r9, r23
     930:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     932:	63 e0       	ldi	r22, 0x03	; 3
     934:	a6 2e       	mov	r10, r22
     936:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     938:	34 e0       	ldi	r19, 0x04	; 4
     93a:	b3 2e       	mov	r11, r19
     93c:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     93e:	2f e1       	ldi	r18, 0x1F	; 31
     940:	c2 2e       	mov	r12, r18
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	d2 2e       	mov	r13, r18
     946:	c4 0e       	add	r12, r20
     948:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     94a:	fe 01       	movw	r30, r28
     94c:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     94e:	40 2f       	mov	r20, r16
     950:	44 1f       	adc	r20, r20
     952:	44 27       	eor	r20, r20
     954:	44 1f       	adc	r20, r20
     956:	8e 2d       	mov	r24, r14
     958:	6f 2d       	mov	r22, r15
     95a:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	a8 01       	movw	r20, r16
     962:	96 e0       	ldi	r25, 0x06	; 6
     964:	56 95       	lsr	r21
     966:	47 95       	ror	r20
     968:	9a 95       	dec	r25
     96a:	e1 f7       	brne	.-8      	; 0x964 <video_putchar+0x66>
     96c:	41 70       	andi	r20, 0x01	; 1
     96e:	88 2d       	mov	r24, r8
     970:	6f 2d       	mov	r22, r15
     972:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     976:	a8 01       	movw	r20, r16
     978:	85 e0       	ldi	r24, 0x05	; 5
     97a:	56 95       	lsr	r21
     97c:	47 95       	ror	r20
     97e:	8a 95       	dec	r24
     980:	e1 f7       	brne	.-8      	; 0x97a <video_putchar+0x7c>
     982:	41 70       	andi	r20, 0x01	; 1
     984:	89 2d       	mov	r24, r9
     986:	6f 2d       	mov	r22, r15
     988:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     98c:	a8 01       	movw	r20, r16
     98e:	b4 e0       	ldi	r27, 0x04	; 4
     990:	56 95       	lsr	r21
     992:	47 95       	ror	r20
     994:	ba 95       	dec	r27
     996:	e1 f7       	brne	.-8      	; 0x990 <video_putchar+0x92>
     998:	41 70       	andi	r20, 0x01	; 1
     99a:	8a 2d       	mov	r24, r10
     99c:	6f 2d       	mov	r22, r15
     99e:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     9a2:	a3 e0       	ldi	r26, 0x03	; 3
     9a4:	16 95       	lsr	r17
     9a6:	07 95       	ror	r16
     9a8:	aa 95       	dec	r26
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <video_putchar+0xa6>
     9ac:	01 70       	andi	r16, 0x01	; 1
     9ae:	8b 2d       	mov	r24, r11
     9b0:	6f 2d       	mov	r22, r15
     9b2:	40 2f       	mov	r20, r16
     9b4:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
     9b8:	21 96       	adiw	r28, 0x01	; 1
     9ba:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     9bc:	cc 15       	cp	r28, r12
     9be:	dd 05       	cpc	r29, r13
     9c0:	21 f6       	brne	.-120    	; 0x94a <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	08 95       	ret

000009dc <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	08 2f       	mov	r16, r24
     9e8:	f6 2e       	mov	r15, r22
     9ea:	ea 01       	movw	r28, r20
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     9f0:	80 2f       	mov	r24, r16
     9f2:	6f 2d       	mov	r22, r15
     9f4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <video_putchar>
		x = x+6;	
     9f8:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     9fa:	1f 5f       	subi	r17, 0xFF	; 255
     9fc:	fe 01       	movw	r30, r28
     9fe:	e1 0f       	add	r30, r17
     a00:	f1 1d       	adc	r31, r1
     a02:	40 81       	ld	r20, Z
     a04:	44 23       	and	r20, r20
     a06:	a1 f7       	brne	.-24     	; 0x9f0 <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	08 95       	ret

00000a14 <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     a14:	e6 2f       	mov	r30, r22
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	28 2f       	mov	r18, r24
     a1a:	26 95       	lsr	r18
     a1c:	26 95       	lsr	r18
     a1e:	26 95       	lsr	r18
     a20:	a4 e0       	ldi	r26, 0x04	; 4
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	aa 95       	dec	r26
     a28:	e1 f7       	brne	.-8      	; 0xa22 <video_set+0xe>
     a2a:	e2 0f       	add	r30, r18
     a2c:	f1 1d       	adc	r31, r1
     a2e:	e9 5a       	subi	r30, 0xA9	; 169
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	80 95       	com	r24
     a36:	90 95       	com	r25
     a38:	87 70       	andi	r24, 0x07	; 7
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <video_set+0x32>
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	8a 95       	dec	r24
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <video_set+0x2e>
     a4a:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     a4c:	82 23       	and	r24, r18
     a4e:	08 95       	ret

00000a50 <remove_ball>:


//////////////////////////////////////////////////////////////////////////////

void remove_ball(int i)
begin
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i]),0);
     a58:	8c 01       	movw	r16, r24
     a5a:	00 0f       	add	r16, r16
     a5c:	11 1f       	adc	r17, r17
     a5e:	fa e7       	ldi	r31, 0x7A	; 122
     a60:	ef 2e       	mov	r14, r31
     a62:	f5 e0       	ldi	r31, 0x05	; 5
     a64:	ff 2e       	mov	r15, r31
     a66:	e0 0e       	add	r14, r16
     a68:	f1 1e       	adc	r15, r17
     a6a:	f7 01       	movw	r30, r14
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	08 51       	subi	r16, 0x18	; 24
     a72:	1a 4f       	sbci	r17, 0xFA	; 250
     a74:	f8 01       	movw	r30, r16
     a76:	60 81       	ld	r22, Z
     a78:	71 81       	ldd	r23, Z+1	; 0x01
     a7a:	89 2f       	mov	r24, r25
     a7c:	99 0f       	add	r25, r25
     a7e:	99 0b       	sbc	r25, r25
     a80:	67 2f       	mov	r22, r23
     a82:	77 0f       	add	r23, r23
     a84:	77 0b       	sbc	r23, r23
     a86:	8f 5f       	subi	r24, 0xFF	; 255
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i]),0);
     a8e:	f7 01       	movw	r30, r14
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	f8 01       	movw	r30, r16
     a96:	60 81       	ld	r22, Z
     a98:	71 81       	ldd	r23, Z+1	; 0x01
     a9a:	89 2f       	mov	r24, r25
     a9c:	99 0f       	add	r25, r25
     a9e:	99 0b       	sbc	r25, r25
     aa0:	67 2f       	mov	r22, r23
     aa2:	77 0f       	add	r23, r23
     aa4:	77 0b       	sbc	r23, r23
     aa6:	8e 5f       	subi	r24, 0xFE	; 254
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+1,0);
     aae:	f7 01       	movw	r30, r14
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	f8 01       	movw	r30, r16
     ab6:	60 81       	ld	r22, Z
     ab8:	71 81       	ldd	r23, Z+1	; 0x01
     aba:	89 2f       	mov	r24, r25
     abc:	99 0f       	add	r25, r25
     abe:	99 0b       	sbc	r25, r25
     ac0:	67 2f       	mov	r22, r23
     ac2:	77 0f       	add	r23, r23
     ac4:	77 0b       	sbc	r23, r23
     ac6:	6f 5f       	subi	r22, 0xFF	; 255
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+2,0);
     ace:	f7 01       	movw	r30, r14
     ad0:	80 81       	ld	r24, Z
     ad2:	91 81       	ldd	r25, Z+1	; 0x01
     ad4:	f8 01       	movw	r30, r16
     ad6:	60 81       	ld	r22, Z
     ad8:	71 81       	ldd	r23, Z+1	; 0x01
     ada:	89 2f       	mov	r24, r25
     adc:	99 0f       	add	r25, r25
     ade:	99 0b       	sbc	r25, r25
     ae0:	67 2f       	mov	r22, r23
     ae2:	77 0f       	add	r23, r23
     ae4:	77 0b       	sbc	r23, r23
     ae6:	6e 5f       	subi	r22, 0xFE	; 254
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+1,0);
     aee:	f7 01       	movw	r30, r14
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	f8 01       	movw	r30, r16
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	89 2f       	mov	r24, r25
     afc:	99 0f       	add	r25, r25
     afe:	99 0b       	sbc	r25, r25
     b00:	67 2f       	mov	r22, r23
     b02:	77 0f       	add	r23, r23
     b04:	77 0b       	sbc	r23, r23
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	8d 5f       	subi	r24, 0xFD	; 253
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+2,0);
     b10:	f7 01       	movw	r30, r14
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	f8 01       	movw	r30, r16
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	89 2f       	mov	r24, r25
     b1e:	99 0f       	add	r25, r25
     b20:	99 0b       	sbc	r25, r25
     b22:	67 2f       	mov	r22, r23
     b24:	77 0f       	add	r23, r23
     b26:	77 0b       	sbc	r23, r23
     b28:	6e 5f       	subi	r22, 0xFE	; 254
     b2a:	8d 5f       	subi	r24, 0xFD	; 253
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i])+3,0);
     b32:	f7 01       	movw	r30, r14
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	f8 01       	movw	r30, r16
     b3a:	60 81       	ld	r22, Z
     b3c:	71 81       	ldd	r23, Z+1	; 0x01
     b3e:	89 2f       	mov	r24, r25
     b40:	99 0f       	add	r25, r25
     b42:	99 0b       	sbc	r25, r25
     b44:	67 2f       	mov	r22, r23
     b46:	77 0f       	add	r23, r23
     b48:	77 0b       	sbc	r23, r23
     b4a:	6d 5f       	subi	r22, 0xFD	; 253
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i])+3,0);
     b54:	f7 01       	movw	r30, r14
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	f8 01       	movw	r30, r16
     b5c:	60 81       	ld	r22, Z
     b5e:	71 81       	ldd	r23, Z+1	; 0x01
     b60:	89 2f       	mov	r24, r25
     b62:	99 0f       	add	r25, r25
     b64:	99 0b       	sbc	r25, r25
     b66:	67 2f       	mov	r22, r23
     b68:	77 0f       	add	r23, r23
     b6a:	77 0b       	sbc	r23, r23
     b6c:	6d 5f       	subi	r22, 0xFD	; 253
     b6e:	8e 5f       	subi	r24, 0xFE	; 254
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
end
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <place_ball>:

void place_ball(int i)
begin
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i]),1);
     b88:	8c 01       	movw	r16, r24
     b8a:	00 0f       	add	r16, r16
     b8c:	11 1f       	adc	r17, r17
     b8e:	fa e7       	ldi	r31, 0x7A	; 122
     b90:	ef 2e       	mov	r14, r31
     b92:	f5 e0       	ldi	r31, 0x05	; 5
     b94:	ff 2e       	mov	r15, r31
     b96:	e0 0e       	add	r14, r16
     b98:	f1 1e       	adc	r15, r17
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	08 51       	subi	r16, 0x18	; 24
     ba2:	1a 4f       	sbci	r17, 0xFA	; 250
     ba4:	f8 01       	movw	r30, r16
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	89 2f       	mov	r24, r25
     bac:	99 0f       	add	r25, r25
     bae:	99 0b       	sbc	r25, r25
     bb0:	67 2f       	mov	r22, r23
     bb2:	77 0f       	add	r23, r23
     bb4:	77 0b       	sbc	r23, r23
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i]),1);
     bbe:	f7 01       	movw	r30, r14
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	f8 01       	movw	r30, r16
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	89 2f       	mov	r24, r25
     bcc:	99 0f       	add	r25, r25
     bce:	99 0b       	sbc	r25, r25
     bd0:	67 2f       	mov	r22, r23
     bd2:	77 0f       	add	r23, r23
     bd4:	77 0b       	sbc	r23, r23
     bd6:	8e 5f       	subi	r24, 0xFE	; 254
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+1,1);
     bde:	f7 01       	movw	r30, r14
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	f8 01       	movw	r30, r16
     be6:	60 81       	ld	r22, Z
     be8:	71 81       	ldd	r23, Z+1	; 0x01
     bea:	89 2f       	mov	r24, r25
     bec:	99 0f       	add	r25, r25
     bee:	99 0b       	sbc	r25, r25
     bf0:	67 2f       	mov	r22, r23
     bf2:	77 0f       	add	r23, r23
     bf4:	77 0b       	sbc	r23, r23
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+2,1);
     bfe:	f7 01       	movw	r30, r14
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
     c04:	f8 01       	movw	r30, r16
     c06:	60 81       	ld	r22, Z
     c08:	71 81       	ldd	r23, Z+1	; 0x01
     c0a:	89 2f       	mov	r24, r25
     c0c:	99 0f       	add	r25, r25
     c0e:	99 0b       	sbc	r25, r25
     c10:	67 2f       	mov	r22, r23
     c12:	77 0f       	add	r23, r23
     c14:	77 0b       	sbc	r23, r23
     c16:	6e 5f       	subi	r22, 0xFE	; 254
     c18:	41 e0       	ldi	r20, 0x01	; 1
     c1a:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+1,1);
     c1e:	f7 01       	movw	r30, r14
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	f8 01       	movw	r30, r16
     c26:	60 81       	ld	r22, Z
     c28:	71 81       	ldd	r23, Z+1	; 0x01
     c2a:	89 2f       	mov	r24, r25
     c2c:	99 0f       	add	r25, r25
     c2e:	99 0b       	sbc	r25, r25
     c30:	67 2f       	mov	r22, r23
     c32:	77 0f       	add	r23, r23
     c34:	77 0b       	sbc	r23, r23
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	8d 5f       	subi	r24, 0xFD	; 253
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+2,1);
     c40:	f7 01       	movw	r30, r14
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	f8 01       	movw	r30, r16
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	89 2f       	mov	r24, r25
     c4e:	99 0f       	add	r25, r25
     c50:	99 0b       	sbc	r25, r25
     c52:	67 2f       	mov	r22, r23
     c54:	77 0f       	add	r23, r23
     c56:	77 0b       	sbc	r23, r23
     c58:	6e 5f       	subi	r22, 0xFE	; 254
     c5a:	8d 5f       	subi	r24, 0xFD	; 253
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i])+3,1);
     c62:	f7 01       	movw	r30, r14
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	f8 01       	movw	r30, r16
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	89 2f       	mov	r24, r25
     c70:	99 0f       	add	r25, r25
     c72:	99 0b       	sbc	r25, r25
     c74:	67 2f       	mov	r22, r23
     c76:	77 0f       	add	r23, r23
     c78:	77 0b       	sbc	r23, r23
     c7a:	6d 5f       	subi	r22, 0xFD	; 253
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i])+3,1);
     c84:	f7 01       	movw	r30, r14
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	f8 01       	movw	r30, r16
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	89 2f       	mov	r24, r25
     c92:	99 0f       	add	r25, r25
     c94:	99 0b       	sbc	r25, r25
     c96:	67 2f       	mov	r22, r23
     c98:	77 0f       	add	r23, r23
     c9a:	77 0b       	sbc	r23, r23
     c9c:	6d 5f       	subi	r22, 0xFD	; 253
     c9e:	8e 5f       	subi	r24, 0xFE	; 254
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
end
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	08 95       	ret

00000cb0 <remove_oldest_ball>:

char remove_oldest_ball(void)
begin
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	ff 24       	eor	r15, r15
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char i = 0;
	unsigned char j = 0;
	unsigned int max = 0;
	for (i=0;i<Max_num_balls;i++)
	begin
		if(age[i]> max)
     cc0:	f9 01       	movw	r30, r18
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e8 5d       	subi	r30, 0xD8	; 216
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	48 17       	cp	r20, r24
     cd0:	59 07       	cpc	r21, r25
     cd2:	18 f4       	brcc	.+6      	; 0xcda <remove_oldest_ball+0x2a>
		begin
			j = i;
			max = age[i];
     cd4:	40 81       	ld	r20, Z
     cd6:	51 81       	ldd	r21, Z+1	; 0x01
     cd8:	f2 2e       	mov	r15, r18
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
char remove_oldest_ball(void)
begin
	unsigned char i = 0;
	unsigned char j = 0;
	unsigned int max = 0;
	for (i=0;i<Max_num_balls;i++)
     cde:	2f 30       	cpi	r18, 0x0F	; 15
     ce0:	31 05       	cpc	r19, r1
     ce2:	71 f7       	brne	.-36     	; 0xcc0 <remove_oldest_ball+0x10>
		begin
			j = i;
			max = age[i];
		end	
	end	
	remove_ball(j);
     ce4:	0f 2d       	mov	r16, r15
     ce6:	10 e0       	ldi	r17, 0x00	; 0
     ce8:	c8 01       	movw	r24, r16
     cea:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>
	is_on_screen[j] = 0;
     cee:	08 5b       	subi	r16, 0xB8	; 184
     cf0:	1e 4f       	sbci	r17, 0xFE	; 254
     cf2:	f8 01       	movw	r30, r16
     cf4:	10 82       	st	Z, r1
	score++;
     cf6:	80 91 68 05 	lds	r24, 0x0568
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	80 93 68 05 	sts	0x0568, r24
	return j;
end
     d00:	8f 2d       	mov	r24, r15
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	08 95       	ret

00000d0a <add_ball>:
// adds a ball to the screen
void add_ball(void)
begin
	int temp = 0;
	unsigned char i = 0;
	if(is_on_screen[i])
     d0a:	80 91 48 01 	lds	r24, 0x0148
     d0e:	88 23       	and	r24, r24
     d10:	11 f4       	brne	.+4      	; 0xd16 <add_ball+0xc>
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	19 c0       	rjmp	.+50     	; 0xd48 <add_ball+0x3e>
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <add_ball+0x12>
	begin
		i++;
		while(is_on_screen[i] & i<(Max_num_balls-1)) i++;
     d1a:	9f 5f       	subi	r25, 0xFF	; 255
     d1c:	e9 2f       	mov	r30, r25
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	e8 5b       	subi	r30, 0xB8	; 184
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 81       	ld	r24, Z
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	9e 30       	cpi	r25, 0x0E	; 14
     d30:	10 f4       	brcc	.+4      	; 0xd36 <add_ball+0x2c>
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	24 23       	and	r18, r20
     d38:	35 23       	and	r19, r21
     d3a:	23 2b       	or	r18, r19
     d3c:	71 f7       	brne	.-36     	; 0xd1a <add_ball+0x10>
		if(i==(Max_num_balls-1))  i = remove_oldest_ball(); 
     d3e:	9e 30       	cpi	r25, 0x0E	; 14
     d40:	19 f4       	brne	.+6      	; 0xd48 <add_ball+0x3e>
     d42:	0e 94 58 06 	call	0xcb0	; 0xcb0 <remove_oldest_ball>
     d46:	98 2f       	mov	r25, r24
	end

	age[i] = 0;
     d48:	89 2f       	mov	r24, r25
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	dc 01       	movw	r26, r24
     d4e:	aa 0f       	add	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	fd 01       	movw	r30, r26
     d54:	e8 5d       	subi	r30, 0xD8	; 216
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	11 82       	std	Z+1, r1	; 0x01
     d5a:	10 82       	st	Z, r1
	is_on_screen[i] = 1;
     d5c:	fc 01       	movw	r30, r24
     d5e:	e8 5b       	subi	r30, 0xB8	; 184
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	20 83       	st	Z, r18
	x_pos[i] = int2fix(120);
     d66:	fd 01       	movw	r30, r26
     d68:	e6 58       	subi	r30, 0x86	; 134
     d6a:	fa 4f       	sbci	r31, 0xFA	; 250
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	38 e7       	ldi	r19, 0x78	; 120
     d70:	31 83       	std	Z+1, r19	; 0x01
     d72:	20 83       	st	Z, r18
	y_pos[i] = int2fix(14);
     d74:	fd 01       	movw	r30, r26
     d76:	e8 51       	subi	r30, 0x18	; 24
     d78:	fa 4f       	sbci	r31, 0xFA	; 250
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	3e e0       	ldi	r19, 0x0E	; 14
     d7e:	31 83       	std	Z+1, r19	; 0x01
     d80:	20 83       	st	Z, r18
	x_velocity[i] = 0xff80;//xe200;
     d82:	fd 01       	movw	r30, r26
     d84:	e5 55       	subi	r30, 0x55	; 85
     d86:	fa 4f       	sbci	r31, 0xFA	; 250
     d88:	20 e8       	ldi	r18, 0x80	; 128
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	31 83       	std	Z+1, r19	; 0x01
     d8e:	20 83       	st	Z, r18
	temp = time_elapsed_HS % 8; 
     d90:	20 91 69 05 	lds	r18, 0x0569
	y_velocity[i] = int2fix(temp)>>2;//((signed int)time_elapsed_HS)<<2;
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	27 70       	andi	r18, 0x07	; 7
     d98:	30 70       	andi	r19, 0x00	; 0
     d9a:	46 e0       	ldi	r20, 0x06	; 6
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	4a 95       	dec	r20
     da2:	e1 f7       	brne	.-8      	; 0xd9c <add_ball+0x92>
     da4:	a7 53       	subi	r26, 0x37	; 55
     da6:	ba 4f       	sbci	r27, 0xFA	; 250
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	3c 93       	st	X, r19
     dac:	2e 93       	st	-X, r18
	place_ball(i);
     dae:	0e 94 c0 05 	call	0xb80	; 0xb80 <place_ball>
end
     db2:	08 95       	ret

00000db4 <main>:

int main(void)
begin
     db4:	2f 92       	push	r2
     db6:	3f 92       	push	r3
     db8:	4f 92       	push	r4
     dba:	5f 92       	push	r5
     dbc:	6f 92       	push	r6
     dbe:	7f 92       	push	r7
     dc0:	8f 92       	push	r8
     dc2:	9f 92       	push	r9
     dc4:	af 92       	push	r10
     dc6:	bf 92       	push	r11
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	00 d0       	rcall	.+0      	; 0xdda <main+0x26>
     dda:	00 d0       	rcall	.+0      	; 0xddc <main+0x28>
     ddc:	00 d0       	rcall	.+0      	; 0xdde <main+0x2a>
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	unsigned char score_str[3];

	int test = 0;

	
	initialize();
     de2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <initialize>
	
	video_line(width,0,width,height,1);
     de6:	8f e7       	ldi	r24, 0x7F	; 127
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	2f e3       	ldi	r18, 0x3F	; 63
     dee:	01 e0       	ldi	r16, 0x01	; 1
     df0:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
	video_line(0,0,width,0,1);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	4f e7       	ldi	r20, 0x7F	; 127
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
	video_line(0,height,width-17,height,1);
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	6f e3       	ldi	r22, 0x3F	; 63
     e04:	4e e6       	ldi	r20, 0x6E	; 110
     e06:	2f e3       	ldi	r18, 0x3F	; 63
     e08:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
	video_pt(50,1,1);
     e0c:	82 e3       	ldi	r24, 0x32	; 50
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(75,1,1);
     e16:	8b e4       	ldi	r24, 0x4B	; 75
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(50,height-1,1);
     e20:	82 e3       	ldi	r24, 0x32	; 50
     e22:	6e e3       	ldi	r22, 0x3E	; 62
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(75,height-1,1);
     e2a:	8b e4       	ldi	r24, 0x4B	; 75
     e2c:	6e e3       	ldi	r22, 0x3E	; 62
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
     e34:	42 e0       	ldi	r20, 0x02	; 2
     e36:	e4 2e       	mov	r14, r20
     e38:	88 24       	eor	r8, r8
     e3a:	99 24       	eor	r9, r9

			// 2. update positions for the paddle
				video_line(2,top_of_paddle,2,top_of_paddle+8,0);
				video_line(3,top_of_paddle,3,top_of_paddle+8,0);
				prev_top = top_of_paddle;
				top_of_paddle =(ADCH*53/255)+1;
     e3c:	35 e3       	ldi	r19, 0x35	; 53
     e3e:	63 2e       	mov	r6, r19
			if (frame_count >= 30)
			begin
				add_ball();
				frame_count = 0;
				time_elapsed_HS++; 
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     e40:	1e 01       	movw	r2, r28
     e42:	08 94       	sec
     e44:	21 1c       	adc	r2, r1
     e46:	31 1c       	adc	r3, r1
     e48:	ff c1       	rjmp	.+1022   	; 0x1248 <main+0x494>


	
	while(time_elapsed_HS<=200)
	begin
		if (LineCount == ScreenBot)
     e4a:	80 91 a9 05 	lds	r24, 0x05A9
     e4e:	90 91 aa 05 	lds	r25, 0x05AA
     e52:	8d 36       	cpi	r24, 0x6D	; 109
     e54:	91 05       	cpc	r25, r1
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0xa6>
     e58:	f7 c1       	rjmp	.+1006   	; 0x1248 <main+0x494>
		begin

			// 1. Timing and ball addition
			frame_count++;
     e5a:	08 94       	sec
     e5c:	81 1c       	adc	r8, r1
     e5e:	91 1c       	adc	r9, r1
			if (frame_count >= 30)
     e60:	2e e1       	ldi	r18, 0x1E	; 30
     e62:	82 16       	cp	r8, r18
     e64:	91 04       	cpc	r9, r1
     e66:	0c f4       	brge	.+2      	; 0xe6a <main+0xb6>
     e68:	4e c0       	rjmp	.+156    	; 0xf06 <main+0x152>
			begin
				add_ball();
     e6a:	0e 94 85 06 	call	0xd0a	; 0xd0a <add_ball>
				frame_count = 0;
				time_elapsed_HS++; 
     e6e:	80 91 69 05 	lds	r24, 0x0569
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 93 69 05 	sts	0x0569, r24
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     e78:	80 91 69 05 	lds	r24, 0x0569
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <main+0xca>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <main+0xcc>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <main+0xce>
     e82:	ed b7       	in	r30, 0x3d	; 61
     e84:	fe b7       	in	r31, 0x3e	; 62
     e86:	31 96       	adiw	r30, 0x01	; 1
     e88:	ad b7       	in	r26, 0x3d	; 61
     e8a:	be b7       	in	r27, 0x3e	; 62
     e8c:	12 96       	adiw	r26, 0x02	; 2
     e8e:	3c 92       	st	X, r3
     e90:	2e 92       	st	-X, r2
     e92:	11 97       	sbiw	r26, 0x01	; 1
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	31 e0       	ldi	r19, 0x01	; 1
     e98:	33 83       	std	Z+3, r19	; 0x03
     e9a:	22 83       	std	Z+2, r18	; 0x02
     e9c:	86 95       	lsr	r24
     e9e:	84 83       	std	Z+4, r24	; 0x04
     ea0:	15 82       	std	Z+5, r1	; 0x05
     ea2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <sprintf>
				video_puts(110,57,time_str);
     ea6:	8d b7       	in	r24, 0x3d	; 61
     ea8:	9e b7       	in	r25, 0x3e	; 62
     eaa:	06 96       	adiw	r24, 0x06	; 6
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	9e bf       	out	0x3e, r25	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	8d bf       	out	0x3d, r24	; 61
     eb6:	8e e6       	ldi	r24, 0x6E	; 110
     eb8:	69 e3       	ldi	r22, 0x39	; 57
     eba:	a1 01       	movw	r20, r2
     ebc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
				video_line(0,0,width,0,1);
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	01 e0       	ldi	r16, 0x01	; 1
     eca:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_line(0,height,width-17,height,1);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	6f e3       	ldi	r22, 0x3F	; 63
     ed2:	4e e6       	ldi	r20, 0x6E	; 110
     ed4:	2f e3       	ldi	r18, 0x3F	; 63
     ed6:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_pt(50,1,1);
     eda:	82 e3       	ldi	r24, 0x32	; 50
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
				video_pt(75,1,1);
     ee4:	8b e4       	ldi	r24, 0x4B	; 75
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
				video_pt(50,height-1,1);
     eee:	82 e3       	ldi	r24, 0x32	; 50
     ef0:	6e e3       	ldi	r22, 0x3E	; 62
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
				video_pt(75,height-1,1);
     ef8:	8b e4       	ldi	r24, 0x4B	; 75
     efa:	6e e3       	ldi	r22, 0x3E	; 62
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
     f02:	88 24       	eor	r8, r8
     f04:	99 24       	eor	r9, r9
			end

			// 2. update positions for the paddle
				video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     f06:	1e 2d       	mov	r17, r14
     f08:	18 5f       	subi	r17, 0xF8	; 248
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	6e 2d       	mov	r22, r14
     f0e:	42 e0       	ldi	r20, 0x02	; 2
     f10:	21 2f       	mov	r18, r17
     f12:	00 e0       	ldi	r16, 0x00	; 0
     f14:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	6e 2d       	mov	r22, r14
     f1c:	43 e0       	ldi	r20, 0x03	; 3
     f1e:	21 2f       	mov	r18, r17
     f20:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				prev_top = top_of_paddle;
				top_of_paddle =(ADCH*53/255)+1;
     f24:	80 91 79 00 	lds	r24, 0x0079
     f28:	86 9d       	mul	r24, r6
     f2a:	c0 01       	movw	r24, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	6f ef       	ldi	r22, 0xFF	; 255
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	0e 94 44 0b 	call	0x1688	; 0x1688 <__divmodhi4>
     f36:	16 2f       	mov	r17, r22
     f38:	76 2e       	mov	r7, r22
     f3a:	73 94       	inc	r7
				v_paddle_y = top_of_paddle-prev_top;
     f3c:	a7 2c       	mov	r10, r7
     f3e:	bb 24       	eor	r11, r11
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     f40:	17 5f       	subi	r17, 0xF7	; 247
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	67 2d       	mov	r22, r7
     f46:	42 e0       	ldi	r20, 0x02	; 2
     f48:	21 2f       	mov	r18, r17
     f4a:	01 e0       	ldi	r16, 0x01	; 1
     f4c:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	67 2d       	mov	r22, r7
     f54:	43 e0       	ldi	r20, 0x03	; 3
     f56:	21 2f       	mov	r18, r17
     f58:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     f5c:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     f60:	90 e6       	ldi	r25, 0x60	; 96
     f62:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= (1<<ADSC);
     f66:	80 91 7a 00 	lds	r24, 0x007A
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	80 93 7a 00 	sts	0x007A, r24

				
					if((fix2int(x_pos[i]) < 5) & ((fix2int(y_pos[i])-top_of_paddle)>-4) & ((fix2int(y_pos[i])-top_of_paddle)<9))
					begin
						x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
						y_velocity[i] += int2fix(v_paddle_y);
     f70:	c5 01       	movw	r24, r10
     f72:	8e 19       	sub	r24, r14
     f74:	91 09       	sbc	r25, r1
     f76:	58 2e       	mov	r5, r24
     f78:	44 24       	eor	r4, r4
     f7a:	cc 24       	eor	r12, r12
     f7c:	dd 24       	eor	r13, r13

		
			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(is_on_screen[i])
     f7e:	f6 01       	movw	r30, r12
     f80:	e8 5b       	subi	r30, 0xB8	; 184
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	09 f4       	brne	.+2      	; 0xf8c <main+0x1d8>
     f8a:	2c c1       	rjmp	.+600    	; 0x11e4 <main+0x430>
				begin
					age[i]++;
     f8c:	f6 01       	movw	r30, r12
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	e8 5d       	subi	r30, 0xD8	; 216
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	91 83       	std	Z+1, r25	; 0x01
     f9e:	80 83       	st	Z, r24
     fa0:	c6 01       	movw	r24, r12
     fa2:	01 96       	adiw	r24, 0x01	; 1
					
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						if(is_on_screen[j])
     fa4:	fc 01       	movw	r30, r24
     fa6:	e8 5b       	subi	r30, 0xB8	; 184
     fa8:	fe 4f       	sbci	r31, 0xFE	; 254
     faa:	e0 81       	ld	r30, Z
				if(is_on_screen[i])
				begin
					age[i]++;
					
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	8f 30       	cpi	r24, 0x0F	; 15
     fb0:	91 05       	cpc	r25, r1
     fb2:	c4 f3       	brlt	.-16     	; 0xfa4 <main+0x1f0>
					// drag
					//x_velocity[i] -= multfix(x_velocity[i],0x0001);
					//y_velocity[i] -= multfix(y_velocity[i],0x0001);

				
					if((fix2int(x_pos[i]) < 5) & ((fix2int(y_pos[i])-top_of_paddle)>-4) & ((fix2int(y_pos[i])-top_of_paddle)<9))
     fb4:	f6 01       	movw	r30, r12
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	df 01       	movw	r26, r30
     fbc:	a6 58       	subi	r26, 0x86	; 134
     fbe:	ba 4f       	sbci	r27, 0xFA	; 250
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	e8 51       	subi	r30, 0x18	; 24
     fc6:	fa 4f       	sbci	r31, 0xFA	; 250
     fc8:	40 81       	ld	r20, Z
     fca:	51 81       	ldd	r21, Z+1	; 0x01
     fcc:	01 90       	ld	r0, Z+
     fce:	f0 81       	ld	r31, Z
     fd0:	e0 2d       	mov	r30, r0
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	89 2f       	mov	r24, r25
     fd6:	99 0f       	add	r25, r25
     fd8:	99 0b       	sbc	r25, r25
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	0c f4       	brge	.+2      	; 0xfe0 <main+0x22c>
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	85 2f       	mov	r24, r21
     fe4:	99 27       	eor	r25, r25
     fe6:	87 fd       	sbrc	r24, 7
     fe8:	9a 95       	dec	r25
     fea:	99 27       	eor	r25, r25
     fec:	87 fd       	sbrc	r24, 7
     fee:	90 95       	com	r25
     ff0:	8a 19       	sub	r24, r10
     ff2:	9b 09       	sbc	r25, r11
     ff4:	8d 5f       	subi	r24, 0xFD	; 253
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	0c f0       	brlt	.+2      	; 0xffc <main+0x248>
     ffa:	31 e0       	ldi	r19, 0x01	; 1
     ffc:	23 23       	and	r18, r19
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	8f 2f       	mov	r24, r31
    1006:	99 27       	eor	r25, r25
    1008:	87 fd       	sbrc	r24, 7
    100a:	9a 95       	dec	r25
    100c:	99 27       	eor	r25, r25
    100e:	87 fd       	sbrc	r24, 7
    1010:	90 95       	com	r25
    1012:	8a 19       	sub	r24, r10
    1014:	9b 09       	sbc	r25, r11
    1016:	09 97       	sbiw	r24, 0x09	; 9
    1018:	14 f4       	brge	.+4      	; 0x101e <main+0x26a>
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	24 23       	and	r18, r20
    1020:	35 23       	and	r19, r21
    1022:	23 2b       	or	r18, r19
    1024:	e9 f0       	breq	.+58     	; 0x1060 <main+0x2ac>
					begin
						x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
    1026:	86 01       	movw	r16, r12
    1028:	00 0f       	add	r16, r16
    102a:	11 1f       	adc	r17, r17
    102c:	eb ea       	ldi	r30, 0xAB	; 171
    102e:	ee 2e       	mov	r14, r30
    1030:	e5 e0       	ldi	r30, 0x05	; 5
    1032:	fe 2e       	mov	r15, r30
    1034:	e0 0e       	add	r14, r16
    1036:	f1 1e       	adc	r15, r17
    1038:	f7 01       	movw	r30, r14
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	7f ef       	ldi	r23, 0xFF	; 255
    1042:	0e 94 22 0b 	call	0x1644	; 0x1644 <multfix>
    1046:	d7 01       	movw	r26, r14
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	9c 93       	st	X, r25
    104c:	8e 93       	st	-X, r24
						y_velocity[i] += int2fix(v_paddle_y);
    104e:	07 53       	subi	r16, 0x37	; 55
    1050:	1a 4f       	sbci	r17, 0xFA	; 250
    1052:	f8 01       	movw	r30, r16
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	84 0d       	add	r24, r4
    105a:	95 1d       	adc	r25, r5
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
					end
				
			// 3.2. Update position of balls

					remove_ball(i);
    1060:	c6 01       	movw	r24, r12
    1062:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>

					if(fix2int(x_pos[i])>122) x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
    1066:	86 01       	movw	r16, r12
    1068:	00 0f       	add	r16, r16
    106a:	11 1f       	adc	r17, r17
    106c:	f8 01       	movw	r30, r16
    106e:	e6 58       	subi	r30, 0x86	; 134
    1070:	fa 4f       	sbci	r31, 0xFA	; 250
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	89 2f       	mov	r24, r25
    1078:	99 0f       	add	r25, r25
    107a:	99 0b       	sbc	r25, r25
    107c:	8b 37       	cpi	r24, 0x7B	; 123
    107e:	64 f0       	brlt	.+24     	; 0x1098 <main+0x2e4>
    1080:	05 55       	subi	r16, 0x55	; 85
    1082:	1a 4f       	sbci	r17, 0xFA	; 250
    1084:	d8 01       	movw	r26, r16
    1086:	8d 91       	ld	r24, X+
    1088:	9c 91       	ld	r25, X
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	7f ef       	ldi	r23, 0xFF	; 255
    108e:	0e 94 22 0b 	call	0x1644	; 0x1644 <multfix>
    1092:	f8 01       	movw	r30, r16
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
					if(fix2int(y_pos[i])<3) y_velocity[i] = multfix(y_velocity[i],int2fix(-1));
    1098:	86 01       	movw	r16, r12
    109a:	00 0f       	add	r16, r16
    109c:	11 1f       	adc	r17, r17
    109e:	f8 01       	movw	r30, r16
    10a0:	e8 51       	subi	r30, 0x18	; 24
    10a2:	fa 4f       	sbci	r31, 0xFA	; 250
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	89 2f       	mov	r24, r25
    10aa:	99 0f       	add	r25, r25
    10ac:	99 0b       	sbc	r25, r25
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	64 f4       	brge	.+24     	; 0x10ca <main+0x316>
    10b2:	07 53       	subi	r16, 0x37	; 55
    10b4:	1a 4f       	sbci	r17, 0xFA	; 250
    10b6:	d8 01       	movw	r26, r16
    10b8:	8d 91       	ld	r24, X+
    10ba:	9c 91       	ld	r25, X
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	7f ef       	ldi	r23, 0xFF	; 255
    10c0:	0e 94 22 0b 	call	0x1644	; 0x1644 <multfix>
    10c4:	f8 01       	movw	r30, r16
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
					if(fix2int(y_pos[i])>58) y_velocity[i] = multfix(y_velocity[i],int2fix(-1));
    10ca:	86 01       	movw	r16, r12
    10cc:	00 0f       	add	r16, r16
    10ce:	11 1f       	adc	r17, r17
    10d0:	f8 01       	movw	r30, r16
    10d2:	e8 51       	subi	r30, 0x18	; 24
    10d4:	fa 4f       	sbci	r31, 0xFA	; 250
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	89 2f       	mov	r24, r25
    10dc:	99 0f       	add	r25, r25
    10de:	99 0b       	sbc	r25, r25
    10e0:	8b 33       	cpi	r24, 0x3B	; 59
    10e2:	64 f0       	brlt	.+24     	; 0x10fc <main+0x348>
    10e4:	07 53       	subi	r16, 0x37	; 55
    10e6:	1a 4f       	sbci	r17, 0xFA	; 250
    10e8:	d8 01       	movw	r26, r16
    10ea:	8d 91       	ld	r24, X+
    10ec:	9c 91       	ld	r25, X
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	7f ef       	ldi	r23, 0xFF	; 255
    10f2:	0e 94 22 0b 	call	0x1644	; 0x1644 <multfix>
    10f6:	f8 01       	movw	r30, r16
    10f8:	91 83       	std	Z+1, r25	; 0x01
    10fa:	80 83       	st	Z, r24

					x_pos[i] += x_velocity[i];
    10fc:	d6 01       	movw	r26, r12
    10fe:	aa 0f       	add	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	ad 01       	movw	r20, r26
    1104:	46 58       	subi	r20, 0x86	; 134
    1106:	5a 4f       	sbci	r21, 0xFA	; 250
    1108:	fa 01       	movw	r30, r20
    110a:	20 81       	ld	r18, Z
    110c:	31 81       	ldd	r19, Z+1	; 0x01
    110e:	fd 01       	movw	r30, r26
    1110:	e5 55       	subi	r30, 0x55	; 85
    1112:	fa 4f       	sbci	r31, 0xFA	; 250
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	fa 01       	movw	r30, r20
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
					y_pos[i] += y_velocity[i];
    1122:	fd 01       	movw	r30, r26
    1124:	e8 51       	subi	r30, 0x18	; 24
    1126:	fa 4f       	sbci	r31, 0xFA	; 250
    1128:	20 81       	ld	r18, Z
    112a:	31 81       	ldd	r19, Z+1	; 0x01
    112c:	a7 53       	subi	r26, 0x37	; 55
    112e:	ba 4f       	sbci	r27, 0xFA	; 250
    1130:	8d 91       	ld	r24, X+
    1132:	9c 91       	ld	r25, X
    1134:	82 0f       	add	r24, r18
    1136:	93 1f       	adc	r25, r19
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	80 83       	st	Z, r24



			// 3.3 remove balls that hit the left side of the screen or bins
					if(fix2int(x_pos[i]) <= 2) // hit left wall
    113c:	da 01       	movw	r26, r20
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	89 2f       	mov	r24, r25
    1144:	99 0f       	add	r25, r25
    1146:	99 0b       	sbc	r25, r25
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	ac f4       	brge	.+42     	; 0x1176 <main+0x3c2>
					begin
						is_on_screen[i] = 0;
    114c:	f6 01       	movw	r30, r12
    114e:	e8 5b       	subi	r30, 0xB8	; 184
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	10 82       	st	Z, r1
						if(score) score--;
    1154:	80 91 68 05 	lds	r24, 0x0568
    1158:	88 23       	and	r24, r24
    115a:	29 f0       	breq	.+10     	; 0x1166 <main+0x3b2>
    115c:	80 91 68 05 	lds	r24, 0x0568
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	80 93 68 05 	sts	0x0568, r24
						age[i] = 0;
    1166:	f6 01       	movw	r30, r12
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	e8 5d       	subi	r30, 0xD8	; 216
    116e:	fe 4f       	sbci	r31, 0xFE	; 254
    1170:	11 82       	std	Z+1, r1	; 0x01
    1172:	10 82       	st	Z, r1
    1174:	30 c0       	rjmp	.+96     	; 0x11d6 <main+0x422>
						remove_ball(i);
					end // hit left wall
					else
					begin
						if(fix2int(x_pos[i])<75 & fix2int(x_pos[i])>50)
    1176:	da 01       	movw	r26, r20
    1178:	8d 91       	ld	r24, X+
    117a:	9c 91       	ld	r25, X
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	2d 91       	ld	r18, X+
    1180:	3c 91       	ld	r19, X
    1182:	89 2f       	mov	r24, r25
    1184:	99 0f       	add	r25, r25
    1186:	99 0b       	sbc	r25, r25
    1188:	8b 34       	cpi	r24, 0x4B	; 75
    118a:	4c f5       	brge	.+82     	; 0x11de <main+0x42a>
    118c:	83 2f       	mov	r24, r19
    118e:	99 27       	eor	r25, r25
    1190:	87 fd       	sbrc	r24, 7
    1192:	9a 95       	dec	r25
    1194:	83 33       	cpi	r24, 0x33	; 51
    1196:	1c f1       	brlt	.+70     	; 0x11de <main+0x42a>
						begin
							if(fix2int(y_pos[i])<=3 | fix2int(y_pos[i])>=(height-4))
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	20 81       	ld	r18, Z
    119e:	31 81       	ldd	r19, Z+1	; 0x01
    11a0:	89 2f       	mov	r24, r25
    11a2:	99 0f       	add	r25, r25
    11a4:	99 0b       	sbc	r25, r25
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	34 f0       	brlt	.+12     	; 0x11b6 <main+0x402>
    11aa:	83 2f       	mov	r24, r19
    11ac:	99 27       	eor	r25, r25
    11ae:	87 fd       	sbrc	r24, 7
    11b0:	9a 95       	dec	r25
    11b2:	8b 33       	cpi	r24, 0x3B	; 59
    11b4:	a4 f0       	brlt	.+40     	; 0x11de <main+0x42a>
							begin
								is_on_screen[i] = 0;
    11b6:	f6 01       	movw	r30, r12
    11b8:	e8 5b       	subi	r30, 0xB8	; 184
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	10 82       	st	Z, r1
								age[i] = 0;
    11be:	f6 01       	movw	r30, r12
    11c0:	ee 0f       	add	r30, r30
    11c2:	ff 1f       	adc	r31, r31
    11c4:	e8 5d       	subi	r30, 0xD8	; 216
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	11 82       	std	Z+1, r1	; 0x01
    11ca:	10 82       	st	Z, r1
								score++;
    11cc:	80 91 68 05 	lds	r24, 0x0568
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	80 93 68 05 	sts	0x0568, r24
								remove_ball(i);
    11d6:	c6 01       	movw	r24, r12
    11d8:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <main+0x430>
							end // y check bins
							else place_ball(i);
						end // x check bins
						else place_ball(i);
    11de:	c6 01       	movw	r24, r12
    11e0:	0e 94 c0 05 	call	0xb80	; 0xb80 <place_ball>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
				ADC_start_measure(0);

		
			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
    11e4:	08 94       	sec
    11e6:	c1 1c       	adc	r12, r1
    11e8:	d1 1c       	adc	r13, r1
    11ea:	be e0       	ldi	r27, 0x0E	; 14
    11ec:	cb 16       	cp	r12, r27
    11ee:	d1 04       	cpc	r13, r1
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <main+0x440>
    11f2:	c5 ce       	rjmp	.-630    	; 0xf7e <main+0x1ca>
					end // left wall check
				end // is on screen i
			end // for i

			// 5. update text (score, time...)
			sprintf(score_str, "%3d",score);
    11f4:	80 91 68 05 	lds	r24, 0x0568
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <main+0x446>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <main+0x448>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <main+0x44a>
    11fe:	ed b7       	in	r30, 0x3d	; 61
    1200:	fe b7       	in	r31, 0x3e	; 62
    1202:	31 96       	adiw	r30, 0x01	; 1
    1204:	24 e0       	ldi	r18, 0x04	; 4
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	2c 0f       	add	r18, r28
    120a:	3d 1f       	adc	r19, r29
    120c:	ad b7       	in	r26, 0x3d	; 61
    120e:	be b7       	in	r27, 0x3e	; 62
    1210:	12 96       	adiw	r26, 0x02	; 2
    1212:	3c 93       	st	X, r19
    1214:	2e 93       	st	-X, r18
    1216:	11 97       	sbiw	r26, 0x01	; 1
    1218:	a0 e0       	ldi	r26, 0x00	; 0
    121a:	b1 e0       	ldi	r27, 0x01	; 1
    121c:	b3 83       	std	Z+3, r27	; 0x03
    121e:	a2 83       	std	Z+2, r26	; 0x02
    1220:	84 83       	std	Z+4, r24	; 0x04
    1222:	15 82       	std	Z+5, r1	; 0x05
    1224:	0e 94 57 0b 	call	0x16ae	; 0x16ae <sprintf>
			video_puts(110,1,score_str);
    1228:	ed b7       	in	r30, 0x3d	; 61
    122a:	fe b7       	in	r31, 0x3e	; 62
    122c:	36 96       	adiw	r30, 0x06	; 6
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	fe bf       	out	0x3e, r31	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	ed bf       	out	0x3d, r30	; 61
    1238:	8e e6       	ldi	r24, 0x6E	; 110
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	ae 01       	movw	r20, r28
    123e:	4c 5f       	subi	r20, 0xFC	; 252
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
    1246:	e7 2c       	mov	r14, r7
	video_pt(50,height-1,1);
	video_pt(75,height-1,1);


	
	while(time_elapsed_HS<=200)
    1248:	80 91 69 05 	lds	r24, 0x0569
    124c:	89 3c       	cpi	r24, 0xC9	; 201
    124e:	08 f4       	brcc	.+2      	; 0x1252 <main+0x49e>
    1250:	fc cd       	rjmp	.-1032   	; 0xe4a <main+0x96>
    1252:	00 e0       	ldi	r16, 0x00	; 0
    1254:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(score_str, "%3d",score);
			video_puts(110,1,score_str);

		end // linecount == screenBot
	end // while time < 200
	for(int gh = 0; gh<Max_num_balls; gh++) remove_ball(gh); // clear the screen
    1256:	c8 01       	movw	r24, r16
    1258:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>
    125c:	0f 5f       	subi	r16, 0xFF	; 255
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	0f 30       	cpi	r16, 0x0F	; 15
    1262:	11 05       	cpc	r17, r1
    1264:	c1 f7       	brne	.-16     	; 0x1256 <main+0x4a2>
	while(1)
	begin
		sprintf(score_str, "%i",score);
    1266:	8e 01       	movw	r16, r28
    1268:	0c 5f       	subi	r16, 0xFC	; 252
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	64 e0       	ldi	r22, 0x04	; 4
    126e:	c6 2e       	mov	r12, r22
    1270:	61 e0       	ldi	r22, 0x01	; 1
    1272:	d6 2e       	mov	r13, r22
    1274:	80 91 68 05 	lds	r24, 0x0568
    1278:	00 d0       	rcall	.+0      	; 0x127a <main+0x4c6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <main+0x4c8>
    127c:	00 d0       	rcall	.+0      	; 0x127e <main+0x4ca>
    127e:	ed b7       	in	r30, 0x3d	; 61
    1280:	fe b7       	in	r31, 0x3e	; 62
    1282:	31 96       	adiw	r30, 0x01	; 1
    1284:	ad b7       	in	r26, 0x3d	; 61
    1286:	be b7       	in	r27, 0x3e	; 62
    1288:	12 96       	adiw	r26, 0x02	; 2
    128a:	1c 93       	st	X, r17
    128c:	0e 93       	st	-X, r16
    128e:	11 97       	sbiw	r26, 0x01	; 1
    1290:	d3 82       	std	Z+3, r13	; 0x03
    1292:	c2 82       	std	Z+2, r12	; 0x02
    1294:	84 83       	std	Z+4, r24	; 0x04
    1296:	15 82       	std	Z+5, r1	; 0x05
    1298:	0e 94 57 0b 	call	0x16ae	; 0x16ae <sprintf>
		video_puts(30,30,"Time Is Up!");
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	36 96       	adiw	r30, 0x06	; 6
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8e e1       	ldi	r24, 0x1E	; 30
    12ae:	6e e1       	ldi	r22, 0x1E	; 30
    12b0:	47 e0       	ldi	r20, 0x07	; 7
    12b2:	51 e0       	ldi	r21, 0x01	; 1
    12b4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
		video_puts(30,42,"Your score:");
    12b8:	8e e1       	ldi	r24, 0x1E	; 30
    12ba:	6a e2       	ldi	r22, 0x2A	; 42
    12bc:	43 e1       	ldi	r20, 0x13	; 19
    12be:	51 e0       	ldi	r21, 0x01	; 1
    12c0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
		video_puts(100,42,score_str);
    12c4:	84 e6       	ldi	r24, 0x64	; 100
    12c6:	6a e2       	ldi	r22, 0x2A	; 42
    12c8:	a8 01       	movw	r20, r16
    12ca:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
    12ce:	d2 cf       	rjmp	.-92     	; 0x1274 <main+0x4c0>

000012d0 <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <write_LCD+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <write_LCD+0x8>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <write_LCD+0xa>
    12da:	ed b7       	in	r30, 0x3d	; 61
    12dc:	fe b7       	in	r31, 0x3e	; 62
    12de:	31 96       	adiw	r30, 0x01	; 1
    12e0:	07 e5       	ldi	r16, 0x57	; 87
    12e2:	15 e0       	ldi	r17, 0x05	; 5
    12e4:	ad b7       	in	r26, 0x3d	; 61
    12e6:	be b7       	in	r27, 0x3e	; 62
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	1c 93       	st	X, r17
    12ec:	0e 93       	st	-X, r16
    12ee:	11 97       	sbiw	r26, 0x01	; 1
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	31 e0       	ldi	r19, 0x01	; 1
    12f4:	33 83       	std	Z+3, r19	; 0x03
    12f6:	22 83       	std	Z+2, r18	; 0x02
    12f8:	84 83       	std	Z+4, r24	; 0x04
    12fa:	15 82       	std	Z+5, r1	; 0x05
    12fc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <sprintf>
	LCDGotoXY(0, 1);
    1300:	8d b7       	in	r24, 0x3d	; 61
    1302:	9e b7       	in	r25, 0x3e	; 62
    1304:	06 96       	adiw	r24, 0x06	; 6
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	9e bf       	out	0x3e, r25	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	8d bf       	out	0x3d, r24	; 61
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
    1318:	f8 01       	movw	r30, r16
    131a:	01 90       	ld	r0, Z+
    131c:	00 20       	and	r0, r0
    131e:	e9 f7       	brne	.-6      	; 0x131a <write_LCD+0x4a>
    1320:	31 97       	sbiw	r30, 0x01	; 1
    1322:	e0 1b       	sub	r30, r16
    1324:	f1 0b       	sbc	r31, r17
    1326:	c8 01       	movw	r24, r16
    1328:	6e 2f       	mov	r22, r30
    132a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <LCDstring>
end
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
    1334:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <LCDinit>
	LCDcursorOFF();
    1338:	0e 94 ba 0a 	call	0x1574	; 0x1574 <LCDcursorOFF>
	LCDclr();				//clear the display
    133c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <LCDclr>
	LCDGotoXY(0,0);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    1348:	8c e8       	ldi	r24, 0x8C	; 140
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	0e 94 17 0a 	call	0x142e	; 0x142e <CopyStringtoLCD>
	LCD_char_count = 0;
    1354:	10 92 79 05 	sts	0x0579, r1
end
    1358:	08 95       	ret

0000135a <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    135a:	28 2f       	mov	r18, r24
    135c:	20 7f       	andi	r18, 0xF0	; 240
    135e:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    1360:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1362:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1364:	20 e4       	ldi	r18, 0x40	; 64
    1366:	3f e1       	ldi	r19, 0x1F	; 31
    1368:	f9 01       	movw	r30, r18
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    136e:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1370:	40 98       	cbi	0x08, 0	; 8
    1372:	f9 01       	movw	r30, r18
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	44 e0       	ldi	r20, 0x04	; 4
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	4a 95       	dec	r20
    1382:	e1 f7       	brne	.-8      	; 0x137c <LCDsendChar+0x22>
    1384:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    1386:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    1388:	42 9a       	sbi	0x08, 2	; 8
    138a:	c9 01       	movw	r24, r18
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    1390:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    1392:	40 98       	cbi	0x08, 0	; 8
    1394:	c9 01       	movw	r24, r18
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    139a:	08 95       	ret

0000139c <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    139c:	28 2f       	mov	r18, r24
    139e:	20 7f       	andi	r18, 0xF0	; 240
    13a0:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    13a2:	42 9a       	sbi	0x08, 2	; 8
    13a4:	20 e4       	ldi	r18, 0x40	; 64
    13a6:	3f e1       	ldi	r19, 0x1F	; 31
    13a8:	f9 01       	movw	r30, r18
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13ae:	42 98       	cbi	0x08, 2	; 8
    13b0:	f9 01       	movw	r30, r18
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	54 e0       	ldi	r21, 0x04	; 4
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	5a 95       	dec	r21
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <LCDsendCommand+0x1e>
    13c2:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    13c4:	42 9a       	sbi	0x08, 2	; 8
    13c6:	c9 01       	movw	r24, r18
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    13cc:	42 98       	cbi	0x08, 2	; 8
    13ce:	c9 01       	movw	r24, r18
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    13d4:	08 95       	ret

000013d6 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    13dc:	08 95       	ret

000013de <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    13e4:	08 95       	ret

000013e6 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	49 f0       	breq	.+18     	; 0x1406 <LCDstring+0x20>
    13f4:	ec 01       	movw	r28, r24
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    13fa:	89 91       	ld	r24, Y+
    13fc:	0e 94 ad 09 	call	0x135a	; 0x135a <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1400:	1f 5f       	subi	r17, 0xFF	; 255
    1402:	10 17       	cp	r17, r16
    1404:	d0 f3       	brcs	.-12     	; 0x13fa <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	08 95       	ret

00001410 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1410:	62 30       	cpi	r22, 0x02	; 2
    1412:	31 f0       	breq	.+12     	; 0x1420 <LCDGotoXY+0x10>
    1414:	63 30       	cpi	r22, 0x03	; 3
    1416:	31 f0       	breq	.+12     	; 0x1424 <LCDGotoXY+0x14>
    1418:	61 30       	cpi	r22, 0x01	; 1
    141a:	29 f4       	brne	.+10     	; 0x1426 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    141c:	80 5c       	subi	r24, 0xC0	; 192
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1420:	8c 5e       	subi	r24, 0xEC	; 236
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1424:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    1426:	80 68       	ori	r24, 0x80	; 128
    1428:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
	
}
    142c:	08 95       	ret

0000142e <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
    1436:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    1438:	64 2f       	mov	r22, r20
    143a:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCDGotoXY>
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1442:	0e 94 ad 09 	call	0x135a	; 0x135a <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    1446:	1f 5f       	subi	r17, 0xFF	; 255
    1448:	fe 01       	movw	r30, r28
    144a:	e1 0f       	add	r30, r17
    144c:	f1 1d       	adc	r31, r1
    144e:	84 91       	lpm	r24, Z+
    1450:	88 23       	and	r24, r24
    1452:	b9 f7       	brne	.-18     	; 0x1442 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	08 95       	ret

0000145c <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	7c 01       	movw	r14, r24
    146a:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    146c:	11 0f       	add	r17, r17
    146e:	11 0f       	add	r17, r17
    1470:	11 0f       	add	r17, r17
    1472:	10 64       	ori	r17, 0x40	; 64
    1474:	c0 e0       	ldi	r28, 0x00	; 0
    1476:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    1478:	f7 01       	movw	r30, r14
    147a:	ec 0f       	add	r30, r28
    147c:	fd 1f       	adc	r31, r29
    147e:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    1480:	81 2f       	mov	r24, r17
    1482:	8c 0f       	add	r24, r28
    1484:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
		LCDsendChar(pcc);
    1488:	80 2f       	mov	r24, r16
    148a:	0e 94 ad 09 	call	0x135a	; 0x135a <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    148e:	21 96       	adiw	r28, 0x01	; 1
    1490:	c8 30       	cpi	r28, 0x08	; 8
    1492:	d1 05       	cpc	r29, r1
    1494:	89 f7       	brne	.-30     	; 0x1478 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	08 95       	ret

000014a4 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	80 e6       	ldi	r24, 0x60	; 96
    14ac:	9a ee       	ldi	r25, 0xEA	; 234
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    14b2:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    14b4:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    14b6:	87 b1       	in	r24, 0x07	; 7
    14b8:	80 6f       	ori	r24, 0xF0	; 240
    14ba:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    14bc:	87 b1       	in	r24, 0x07	; 7
    14be:	87 60       	ori	r24, 0x07	; 7
    14c0:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    14c2:	80 e3       	ldi	r24, 0x30	; 48
    14c4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    14c6:	42 9a       	sbi	0x08, 2	; 8
    14c8:	20 e4       	ldi	r18, 0x40	; 64
    14ca:	3f e1       	ldi	r19, 0x1F	; 31
    14cc:	f9 01       	movw	r30, r18
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    14d2:	42 98       	cbi	0x08, 2	; 8
    14d4:	f9 01       	movw	r30, r18
    14d6:	31 97       	sbiw	r30, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    14da:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    14dc:	42 9a       	sbi	0x08, 2	; 8
    14de:	c9 01       	movw	r24, r18
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    14e4:	42 98       	cbi	0x08, 2	; 8
    14e6:	c9 01       	movw	r24, r18
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    14f0:	42 9a       	sbi	0x08, 2	; 8
    14f2:	c9 01       	movw	r24, r18
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    14f8:	42 98       	cbi	0x08, 2	; 8
    14fa:	c9 01       	movw	r24, r18
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1500:	88 e2       	ldi	r24, 0x28	; 40
    1502:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    1506:	8c e0       	ldi	r24, 0x0C	; 12
    1508:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
    150c:	c8 e9       	ldi	r28, 0x98	; 152
    150e:	d4 e0       	ldi	r29, 0x04	; 4
    1510:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1512:	16 2f       	mov	r17, r22
    1514:	1f 5f       	subi	r17, 0xFF	; 255
    1516:	ce 01       	movw	r24, r28
    1518:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCDdefinechar>
    151c:	28 96       	adiw	r28, 0x08	; 8
    151e:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1520:	18 30       	cpi	r17, 0x08	; 8
    1522:	b9 f7       	brne	.-18     	; 0x1512 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	08 95       	ret

0000152c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	08 2f       	mov	r16, r24
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	04 c0       	rjmp	.+8      	; 0x153e <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    1536:	8e e1       	ldi	r24, 0x1E	; 30
    1538:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    153c:	1f 5f       	subi	r17, 0xFF	; 255
    153e:	10 17       	cp	r17, r16
    1540:	d0 f3       	brcs	.-12     	; 0x1536 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	08 2f       	mov	r16, r24
    154e:	10 e0       	ldi	r17, 0x00	; 0
    1550:	04 c0       	rjmp	.+8      	; 0x155a <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1552:	88 e1       	ldi	r24, 0x18	; 24
    1554:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    1558:	1f 5f       	subi	r17, 0xFF	; 255
    155a:	10 17       	cp	r17, r16
    155c:	d0 f3       	brcs	.-12     	; 0x1552 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1564:	8e e0       	ldi	r24, 0x0E	; 14
    1566:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    156a:	08 95       	ret

0000156c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    156c:	8f e0       	ldi	r24, 0x0F	; 15
    156e:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    1572:	08 95       	ret

00001574 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1574:	8c e0       	ldi	r24, 0x0C	; 12
    1576:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    157a:	08 95       	ret

0000157c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    157c:	88 e0       	ldi	r24, 0x08	; 8
    157e:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    1582:	08 95       	ret

00001584 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1584:	8c e0       	ldi	r24, 0x0C	; 12
    1586:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
}
    158a:	08 95       	ret

0000158c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	08 2f       	mov	r16, r24
    1592:	10 e0       	ldi	r17, 0x00	; 0
    1594:	04 c0       	rjmp	.+8      	; 0x159e <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    159c:	1f 5f       	subi	r17, 0xFF	; 255
    159e:	10 17       	cp	r17, r16
    15a0:	d0 f3       	brcs	.-12     	; 0x1596 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	08 95       	ret

000015a8 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	08 2f       	mov	r16, r24
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    15b2:	84 e1       	ldi	r24, 0x14	; 20
    15b4:	0e 94 ce 09 	call	0x139c	; 0x139c <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    15b8:	1f 5f       	subi	r17, 0xFF	; 255
    15ba:	10 17       	cp	r17, r16
    15bc:	d0 f3       	brcs	.-12     	; 0x15b2 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	08 95       	ret

000015c4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    15d4:	96 e0       	ldi	r25, 0x06	; 6
    15d6:	89 9f       	mul	r24, r25
    15d8:	c0 01       	movw	r24, r0
    15da:	11 24       	eor	r1, r1
    15dc:	24 2f       	mov	r18, r20
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	ac 01       	movw	r20, r24
    15e2:	42 9f       	mul	r20, r18
    15e4:	c0 01       	movw	r24, r0
    15e6:	43 9f       	mul	r20, r19
    15e8:	90 0d       	add	r25, r0
    15ea:	52 9f       	mul	r21, r18
    15ec:	90 0d       	add	r25, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	0e 94 44 0b 	call	0x1688	; 0x1688 <__divmodhi4>
    15f6:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    15f8:	cb 01       	movw	r24, r22
    15fa:	66 e0       	ldi	r22, 0x06	; 6
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	0e 94 30 0b 	call	0x1660	; 0x1660 <__udivmodhi4>
    1602:	e8 2e       	mov	r14, r24
    1604:	ff 24       	eor	r15, r15
    1606:	00 e0       	ldi	r16, 0x00	; 0
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	12 c0       	rjmp	.+36     	; 0x1630 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    160c:	c8 01       	movw	r24, r16
    160e:	05 96       	adiw	r24, 0x05	; 5
    1610:	c8 17       	cp	r28, r24
    1612:	d9 07       	cpc	r29, r25
    1614:	10 f0       	brcs	.+4      	; 0x161a <LCDprogressBar+0x56>
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    161a:	c0 17       	cp	r28, r16
    161c:	d1 07       	cpc	r29, r17
    161e:	10 f0       	brcs	.+4      	; 0x1624 <LCDprogressBar+0x60>
    1620:	8e 2d       	mov	r24, r14
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <LCDprogressBar+0x62>
    1624:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    1626:	0e 94 ad 09 	call	0x135a	; 0x135a <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    162a:	f3 94       	inc	r15
    162c:	0a 5f       	subi	r16, 0xFA	; 250
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	fd 14       	cp	r15, r13
    1632:	60 f3       	brcs	.-40     	; 0x160c <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	08 95       	ret

00001644 <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
    1644:	48 2f       	mov	r20, r24
	mov  r21,r25											
    1646:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
    1648:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
    164a:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
    164c:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
    164e:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
    1650:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
    1652:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
    1654:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
    1656:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
    1658:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
    165a:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
    165c:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
    165e:	08 95       	ret

00001660 <__udivmodhi4>:
    1660:	aa 1b       	sub	r26, r26
    1662:	bb 1b       	sub	r27, r27
    1664:	51 e1       	ldi	r21, 0x11	; 17
    1666:	07 c0       	rjmp	.+14     	; 0x1676 <__udivmodhi4_ep>

00001668 <__udivmodhi4_loop>:
    1668:	aa 1f       	adc	r26, r26
    166a:	bb 1f       	adc	r27, r27
    166c:	a6 17       	cp	r26, r22
    166e:	b7 07       	cpc	r27, r23
    1670:	10 f0       	brcs	.+4      	; 0x1676 <__udivmodhi4_ep>
    1672:	a6 1b       	sub	r26, r22
    1674:	b7 0b       	sbc	r27, r23

00001676 <__udivmodhi4_ep>:
    1676:	88 1f       	adc	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	5a 95       	dec	r21
    167c:	a9 f7       	brne	.-22     	; 0x1668 <__udivmodhi4_loop>
    167e:	80 95       	com	r24
    1680:	90 95       	com	r25
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	08 95       	ret

00001688 <__divmodhi4>:
    1688:	97 fb       	bst	r25, 7
    168a:	09 2e       	mov	r0, r25
    168c:	07 26       	eor	r0, r23
    168e:	0a d0       	rcall	.+20     	; 0x16a4 <__divmodhi4_neg1>
    1690:	77 fd       	sbrc	r23, 7
    1692:	04 d0       	rcall	.+8      	; 0x169c <__divmodhi4_neg2>
    1694:	e5 df       	rcall	.-54     	; 0x1660 <__udivmodhi4>
    1696:	06 d0       	rcall	.+12     	; 0x16a4 <__divmodhi4_neg1>
    1698:	00 20       	and	r0, r0
    169a:	1a f4       	brpl	.+6      	; 0x16a2 <__divmodhi4_exit>

0000169c <__divmodhi4_neg2>:
    169c:	70 95       	com	r23
    169e:	61 95       	neg	r22
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255

000016a2 <__divmodhi4_exit>:
    16a2:	08 95       	ret

000016a4 <__divmodhi4_neg1>:
    16a4:	f6 f7       	brtc	.-4      	; 0x16a2 <__divmodhi4_exit>
    16a6:	90 95       	com	r25
    16a8:	81 95       	neg	r24
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	08 95       	ret

000016ae <sprintf>:
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	2e 97       	sbiw	r28, 0x0e	; 14
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	0d 89       	ldd	r16, Y+21	; 0x15
    16c8:	1e 89       	ldd	r17, Y+22	; 0x16
    16ca:	86 e0       	ldi	r24, 0x06	; 6
    16cc:	8c 83       	std	Y+4, r24	; 0x04
    16ce:	1a 83       	std	Y+2, r17	; 0x02
    16d0:	09 83       	std	Y+1, r16	; 0x01
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	9f e7       	ldi	r25, 0x7F	; 127
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	9e 01       	movw	r18, r28
    16dc:	27 5e       	subi	r18, 0xE7	; 231
    16de:	3f 4f       	sbci	r19, 0xFF	; 255
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	6f 89       	ldd	r22, Y+23	; 0x17
    16e6:	78 8d       	ldd	r23, Y+24	; 0x18
    16e8:	a9 01       	movw	r20, r18
    16ea:	0e 94 88 0b 	call	0x1710	; 0x1710 <vfprintf>
    16ee:	2f 81       	ldd	r18, Y+7	; 0x07
    16f0:	38 85       	ldd	r19, Y+8	; 0x08
    16f2:	02 0f       	add	r16, r18
    16f4:	13 1f       	adc	r17, r19
    16f6:	f8 01       	movw	r30, r16
    16f8:	10 82       	st	Z, r1
    16fa:	2e 96       	adiw	r28, 0x0e	; 14
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	08 95       	ret

00001710 <vfprintf>:
    1710:	2f 92       	push	r2
    1712:	3f 92       	push	r3
    1714:	4f 92       	push	r4
    1716:	5f 92       	push	r5
    1718:	6f 92       	push	r6
    171a:	7f 92       	push	r7
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2b 97       	sbiw	r28, 0x0b	; 11
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	3c 01       	movw	r6, r24
    1746:	2b 01       	movw	r4, r22
    1748:	5a 01       	movw	r10, r20
    174a:	fc 01       	movw	r30, r24
    174c:	17 82       	std	Z+7, r1	; 0x07
    174e:	16 82       	std	Z+6, r1	; 0x06
    1750:	83 81       	ldd	r24, Z+3	; 0x03
    1752:	81 fd       	sbrc	r24, 1
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x4c>
    1756:	6f ef       	ldi	r22, 0xFF	; 255
    1758:	7f ef       	ldi	r23, 0xFF	; 255
    175a:	c6 c1       	rjmp	.+908    	; 0x1ae8 <vfprintf+0x3d8>
    175c:	9a e0       	ldi	r25, 0x0A	; 10
    175e:	89 2e       	mov	r8, r25
    1760:	1e 01       	movw	r2, r28
    1762:	08 94       	sec
    1764:	21 1c       	adc	r2, r1
    1766:	31 1c       	adc	r3, r1
    1768:	f3 01       	movw	r30, r6
    176a:	23 81       	ldd	r18, Z+3	; 0x03
    176c:	f2 01       	movw	r30, r4
    176e:	23 fd       	sbrc	r18, 3
    1770:	85 91       	lpm	r24, Z+
    1772:	23 ff       	sbrs	r18, 3
    1774:	81 91       	ld	r24, Z+
    1776:	2f 01       	movw	r4, r30
    1778:	88 23       	and	r24, r24
    177a:	09 f4       	brne	.+2      	; 0x177e <vfprintf+0x6e>
    177c:	b2 c1       	rjmp	.+868    	; 0x1ae2 <vfprintf+0x3d2>
    177e:	85 32       	cpi	r24, 0x25	; 37
    1780:	39 f4       	brne	.+14     	; 0x1790 <vfprintf+0x80>
    1782:	23 fd       	sbrc	r18, 3
    1784:	85 91       	lpm	r24, Z+
    1786:	23 ff       	sbrs	r18, 3
    1788:	81 91       	ld	r24, Z+
    178a:	2f 01       	movw	r4, r30
    178c:	85 32       	cpi	r24, 0x25	; 37
    178e:	29 f4       	brne	.+10     	; 0x179a <vfprintf+0x8a>
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	b3 01       	movw	r22, r6
    1794:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1798:	e7 cf       	rjmp	.-50     	; 0x1768 <vfprintf+0x58>
    179a:	98 2f       	mov	r25, r24
    179c:	ff 24       	eor	r15, r15
    179e:	ee 24       	eor	r14, r14
    17a0:	99 24       	eor	r9, r9
    17a2:	ff e1       	ldi	r31, 0x1F	; 31
    17a4:	ff 15       	cp	r31, r15
    17a6:	d0 f0       	brcs	.+52     	; 0x17dc <vfprintf+0xcc>
    17a8:	9b 32       	cpi	r25, 0x2B	; 43
    17aa:	69 f0       	breq	.+26     	; 0x17c6 <vfprintf+0xb6>
    17ac:	9c 32       	cpi	r25, 0x2C	; 44
    17ae:	28 f4       	brcc	.+10     	; 0x17ba <vfprintf+0xaa>
    17b0:	90 32       	cpi	r25, 0x20	; 32
    17b2:	59 f0       	breq	.+22     	; 0x17ca <vfprintf+0xba>
    17b4:	93 32       	cpi	r25, 0x23	; 35
    17b6:	91 f4       	brne	.+36     	; 0x17dc <vfprintf+0xcc>
    17b8:	0e c0       	rjmp	.+28     	; 0x17d6 <vfprintf+0xc6>
    17ba:	9d 32       	cpi	r25, 0x2D	; 45
    17bc:	49 f0       	breq	.+18     	; 0x17d0 <vfprintf+0xc0>
    17be:	90 33       	cpi	r25, 0x30	; 48
    17c0:	69 f4       	brne	.+26     	; 0x17dc <vfprintf+0xcc>
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	24 c0       	rjmp	.+72     	; 0x180e <vfprintf+0xfe>
    17c6:	52 e0       	ldi	r21, 0x02	; 2
    17c8:	f5 2a       	or	r15, r21
    17ca:	84 e0       	ldi	r24, 0x04	; 4
    17cc:	f8 2a       	or	r15, r24
    17ce:	28 c0       	rjmp	.+80     	; 0x1820 <vfprintf+0x110>
    17d0:	98 e0       	ldi	r25, 0x08	; 8
    17d2:	f9 2a       	or	r15, r25
    17d4:	25 c0       	rjmp	.+74     	; 0x1820 <vfprintf+0x110>
    17d6:	e0 e1       	ldi	r30, 0x10	; 16
    17d8:	fe 2a       	or	r15, r30
    17da:	22 c0       	rjmp	.+68     	; 0x1820 <vfprintf+0x110>
    17dc:	f7 fc       	sbrc	r15, 7
    17de:	29 c0       	rjmp	.+82     	; 0x1832 <vfprintf+0x122>
    17e0:	89 2f       	mov	r24, r25
    17e2:	80 53       	subi	r24, 0x30	; 48
    17e4:	8a 30       	cpi	r24, 0x0A	; 10
    17e6:	70 f4       	brcc	.+28     	; 0x1804 <vfprintf+0xf4>
    17e8:	f6 fe       	sbrs	r15, 6
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <vfprintf+0xe6>
    17ec:	98 9c       	mul	r9, r8
    17ee:	90 2c       	mov	r9, r0
    17f0:	11 24       	eor	r1, r1
    17f2:	98 0e       	add	r9, r24
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <vfprintf+0x110>
    17f6:	e8 9c       	mul	r14, r8
    17f8:	e0 2c       	mov	r14, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	e8 0e       	add	r14, r24
    17fe:	f0 e2       	ldi	r31, 0x20	; 32
    1800:	ff 2a       	or	r15, r31
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <vfprintf+0x110>
    1804:	9e 32       	cpi	r25, 0x2E	; 46
    1806:	29 f4       	brne	.+10     	; 0x1812 <vfprintf+0x102>
    1808:	f6 fc       	sbrc	r15, 6
    180a:	6b c1       	rjmp	.+726    	; 0x1ae2 <vfprintf+0x3d2>
    180c:	40 e4       	ldi	r20, 0x40	; 64
    180e:	f4 2a       	or	r15, r20
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <vfprintf+0x110>
    1812:	9c 36       	cpi	r25, 0x6C	; 108
    1814:	19 f4       	brne	.+6      	; 0x181c <vfprintf+0x10c>
    1816:	50 e8       	ldi	r21, 0x80	; 128
    1818:	f5 2a       	or	r15, r21
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <vfprintf+0x110>
    181c:	98 36       	cpi	r25, 0x68	; 104
    181e:	49 f4       	brne	.+18     	; 0x1832 <vfprintf+0x122>
    1820:	f2 01       	movw	r30, r4
    1822:	23 fd       	sbrc	r18, 3
    1824:	95 91       	lpm	r25, Z+
    1826:	23 ff       	sbrs	r18, 3
    1828:	91 91       	ld	r25, Z+
    182a:	2f 01       	movw	r4, r30
    182c:	99 23       	and	r25, r25
    182e:	09 f0       	breq	.+2      	; 0x1832 <vfprintf+0x122>
    1830:	b8 cf       	rjmp	.-144    	; 0x17a2 <vfprintf+0x92>
    1832:	89 2f       	mov	r24, r25
    1834:	85 54       	subi	r24, 0x45	; 69
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	18 f0       	brcs	.+6      	; 0x1840 <vfprintf+0x130>
    183a:	80 52       	subi	r24, 0x20	; 32
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	38 f4       	brcc	.+14     	; 0x184e <vfprintf+0x13e>
    1840:	44 e0       	ldi	r20, 0x04	; 4
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	a4 0e       	add	r10, r20
    1846:	b5 1e       	adc	r11, r21
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	59 83       	std	Y+1, r21	; 0x01
    184c:	0f c0       	rjmp	.+30     	; 0x186c <vfprintf+0x15c>
    184e:	93 36       	cpi	r25, 0x63	; 99
    1850:	31 f0       	breq	.+12     	; 0x185e <vfprintf+0x14e>
    1852:	93 37       	cpi	r25, 0x73	; 115
    1854:	79 f0       	breq	.+30     	; 0x1874 <vfprintf+0x164>
    1856:	93 35       	cpi	r25, 0x53	; 83
    1858:	09 f0       	breq	.+2      	; 0x185c <vfprintf+0x14c>
    185a:	56 c0       	rjmp	.+172    	; 0x1908 <vfprintf+0x1f8>
    185c:	20 c0       	rjmp	.+64     	; 0x189e <vfprintf+0x18e>
    185e:	f5 01       	movw	r30, r10
    1860:	80 81       	ld	r24, Z
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	42 e0       	ldi	r20, 0x02	; 2
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	a4 0e       	add	r10, r20
    186a:	b5 1e       	adc	r11, r21
    186c:	61 01       	movw	r12, r2
    186e:	01 e0       	ldi	r16, 0x01	; 1
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <vfprintf+0x188>
    1874:	f5 01       	movw	r30, r10
    1876:	c0 80       	ld	r12, Z
    1878:	d1 80       	ldd	r13, Z+1	; 0x01
    187a:	f6 fc       	sbrc	r15, 6
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfprintf+0x174>
    187e:	6f ef       	ldi	r22, 0xFF	; 255
    1880:	7f ef       	ldi	r23, 0xFF	; 255
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x178>
    1884:	69 2d       	mov	r22, r9
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	42 e0       	ldi	r20, 0x02	; 2
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	a4 0e       	add	r10, r20
    188e:	b5 1e       	adc	r11, r21
    1890:	c6 01       	movw	r24, r12
    1892:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <strnlen>
    1896:	8c 01       	movw	r16, r24
    1898:	5f e7       	ldi	r21, 0x7F	; 127
    189a:	f5 22       	and	r15, r21
    189c:	14 c0       	rjmp	.+40     	; 0x18c6 <vfprintf+0x1b6>
    189e:	f5 01       	movw	r30, r10
    18a0:	c0 80       	ld	r12, Z
    18a2:	d1 80       	ldd	r13, Z+1	; 0x01
    18a4:	f6 fc       	sbrc	r15, 6
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <vfprintf+0x19e>
    18a8:	6f ef       	ldi	r22, 0xFF	; 255
    18aa:	7f ef       	ldi	r23, 0xFF	; 255
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <vfprintf+0x1a2>
    18ae:	69 2d       	mov	r22, r9
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	42 e0       	ldi	r20, 0x02	; 2
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	a4 0e       	add	r10, r20
    18b8:	b5 1e       	adc	r11, r21
    18ba:	c6 01       	movw	r24, r12
    18bc:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <strnlen_P>
    18c0:	8c 01       	movw	r16, r24
    18c2:	50 e8       	ldi	r21, 0x80	; 128
    18c4:	f5 2a       	or	r15, r21
    18c6:	f3 fe       	sbrs	r15, 3
    18c8:	07 c0       	rjmp	.+14     	; 0x18d8 <vfprintf+0x1c8>
    18ca:	1a c0       	rjmp	.+52     	; 0x1900 <vfprintf+0x1f0>
    18cc:	80 e2       	ldi	r24, 0x20	; 32
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	b3 01       	movw	r22, r6
    18d2:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    18d6:	ea 94       	dec	r14
    18d8:	8e 2d       	mov	r24, r14
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	08 17       	cp	r16, r24
    18de:	19 07       	cpc	r17, r25
    18e0:	a8 f3       	brcs	.-22     	; 0x18cc <vfprintf+0x1bc>
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <vfprintf+0x1f0>
    18e4:	f6 01       	movw	r30, r12
    18e6:	f7 fc       	sbrc	r15, 7
    18e8:	85 91       	lpm	r24, Z+
    18ea:	f7 fe       	sbrs	r15, 7
    18ec:	81 91       	ld	r24, Z+
    18ee:	6f 01       	movw	r12, r30
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	b3 01       	movw	r22, r6
    18f4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    18f8:	e1 10       	cpse	r14, r1
    18fa:	ea 94       	dec	r14
    18fc:	01 50       	subi	r16, 0x01	; 1
    18fe:	10 40       	sbci	r17, 0x00	; 0
    1900:	01 15       	cp	r16, r1
    1902:	11 05       	cpc	r17, r1
    1904:	79 f7       	brne	.-34     	; 0x18e4 <vfprintf+0x1d4>
    1906:	ea c0       	rjmp	.+468    	; 0x1adc <vfprintf+0x3cc>
    1908:	94 36       	cpi	r25, 0x64	; 100
    190a:	11 f0       	breq	.+4      	; 0x1910 <vfprintf+0x200>
    190c:	99 36       	cpi	r25, 0x69	; 105
    190e:	69 f5       	brne	.+90     	; 0x196a <vfprintf+0x25a>
    1910:	f7 fe       	sbrs	r15, 7
    1912:	08 c0       	rjmp	.+16     	; 0x1924 <vfprintf+0x214>
    1914:	f5 01       	movw	r30, r10
    1916:	20 81       	ld	r18, Z
    1918:	31 81       	ldd	r19, Z+1	; 0x01
    191a:	42 81       	ldd	r20, Z+2	; 0x02
    191c:	53 81       	ldd	r21, Z+3	; 0x03
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0a c0       	rjmp	.+20     	; 0x1938 <vfprintf+0x228>
    1924:	f5 01       	movw	r30, r10
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	9c 01       	movw	r18, r24
    192c:	44 27       	eor	r20, r20
    192e:	37 fd       	sbrc	r19, 7
    1930:	40 95       	com	r20
    1932:	54 2f       	mov	r21, r20
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a8 0e       	add	r10, r24
    193a:	b9 1e       	adc	r11, r25
    193c:	9f e6       	ldi	r25, 0x6F	; 111
    193e:	f9 22       	and	r15, r25
    1940:	57 ff       	sbrs	r21, 7
    1942:	09 c0       	rjmp	.+18     	; 0x1956 <vfprintf+0x246>
    1944:	50 95       	com	r21
    1946:	40 95       	com	r20
    1948:	30 95       	com	r19
    194a:	21 95       	neg	r18
    194c:	3f 4f       	sbci	r19, 0xFF	; 255
    194e:	4f 4f       	sbci	r20, 0xFF	; 255
    1950:	5f 4f       	sbci	r21, 0xFF	; 255
    1952:	e0 e8       	ldi	r30, 0x80	; 128
    1954:	fe 2a       	or	r15, r30
    1956:	ca 01       	movw	r24, r20
    1958:	b9 01       	movw	r22, r18
    195a:	a1 01       	movw	r20, r2
    195c:	2a e0       	ldi	r18, 0x0A	; 10
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__ultoa_invert>
    1964:	d8 2e       	mov	r13, r24
    1966:	d2 18       	sub	r13, r2
    1968:	40 c0       	rjmp	.+128    	; 0x19ea <vfprintf+0x2da>
    196a:	95 37       	cpi	r25, 0x75	; 117
    196c:	29 f4       	brne	.+10     	; 0x1978 <vfprintf+0x268>
    196e:	1f 2d       	mov	r17, r15
    1970:	1f 7e       	andi	r17, 0xEF	; 239
    1972:	2a e0       	ldi	r18, 0x0A	; 10
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	1d c0       	rjmp	.+58     	; 0x19b2 <vfprintf+0x2a2>
    1978:	1f 2d       	mov	r17, r15
    197a:	19 7f       	andi	r17, 0xF9	; 249
    197c:	9f 36       	cpi	r25, 0x6F	; 111
    197e:	61 f0       	breq	.+24     	; 0x1998 <vfprintf+0x288>
    1980:	90 37       	cpi	r25, 0x70	; 112
    1982:	20 f4       	brcc	.+8      	; 0x198c <vfprintf+0x27c>
    1984:	98 35       	cpi	r25, 0x58	; 88
    1986:	09 f0       	breq	.+2      	; 0x198a <vfprintf+0x27a>
    1988:	ac c0       	rjmp	.+344    	; 0x1ae2 <vfprintf+0x3d2>
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <vfprintf+0x29a>
    198c:	90 37       	cpi	r25, 0x70	; 112
    198e:	39 f0       	breq	.+14     	; 0x199e <vfprintf+0x28e>
    1990:	98 37       	cpi	r25, 0x78	; 120
    1992:	09 f0       	breq	.+2      	; 0x1996 <vfprintf+0x286>
    1994:	a6 c0       	rjmp	.+332    	; 0x1ae2 <vfprintf+0x3d2>
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <vfprintf+0x290>
    1998:	28 e0       	ldi	r18, 0x08	; 8
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	0a c0       	rjmp	.+20     	; 0x19b2 <vfprintf+0x2a2>
    199e:	10 61       	ori	r17, 0x10	; 16
    19a0:	14 fd       	sbrc	r17, 4
    19a2:	14 60       	ori	r17, 0x04	; 4
    19a4:	20 e1       	ldi	r18, 0x10	; 16
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <vfprintf+0x2a2>
    19aa:	14 fd       	sbrc	r17, 4
    19ac:	16 60       	ori	r17, 0x06	; 6
    19ae:	20 e1       	ldi	r18, 0x10	; 16
    19b0:	32 e0       	ldi	r19, 0x02	; 2
    19b2:	17 ff       	sbrs	r17, 7
    19b4:	08 c0       	rjmp	.+16     	; 0x19c6 <vfprintf+0x2b6>
    19b6:	f5 01       	movw	r30, r10
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	44 e0       	ldi	r20, 0x04	; 4
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	08 c0       	rjmp	.+16     	; 0x19d6 <vfprintf+0x2c6>
    19c6:	f5 01       	movw	r30, r10
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	bc 01       	movw	r22, r24
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	42 e0       	ldi	r20, 0x02	; 2
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	a4 0e       	add	r10, r20
    19d8:	b5 1e       	adc	r11, r21
    19da:	a1 01       	movw	r20, r2
    19dc:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__ultoa_invert>
    19e0:	d8 2e       	mov	r13, r24
    19e2:	d2 18       	sub	r13, r2
    19e4:	8f e7       	ldi	r24, 0x7F	; 127
    19e6:	f8 2e       	mov	r15, r24
    19e8:	f1 22       	and	r15, r17
    19ea:	f6 fe       	sbrs	r15, 6
    19ec:	0b c0       	rjmp	.+22     	; 0x1a04 <vfprintf+0x2f4>
    19ee:	5e ef       	ldi	r21, 0xFE	; 254
    19f0:	f5 22       	and	r15, r21
    19f2:	d9 14       	cp	r13, r9
    19f4:	38 f4       	brcc	.+14     	; 0x1a04 <vfprintf+0x2f4>
    19f6:	f4 fe       	sbrs	r15, 4
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <vfprintf+0x2f8>
    19fa:	f2 fc       	sbrc	r15, 2
    19fc:	05 c0       	rjmp	.+10     	; 0x1a08 <vfprintf+0x2f8>
    19fe:	8f ee       	ldi	r24, 0xEF	; 239
    1a00:	f8 22       	and	r15, r24
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <vfprintf+0x2f8>
    1a04:	1d 2d       	mov	r17, r13
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <vfprintf+0x2fa>
    1a08:	19 2d       	mov	r17, r9
    1a0a:	f4 fe       	sbrs	r15, 4
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <vfprintf+0x318>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	ed 0d       	add	r30, r13
    1a12:	f1 1d       	adc	r31, r1
    1a14:	80 81       	ld	r24, Z
    1a16:	80 33       	cpi	r24, 0x30	; 48
    1a18:	19 f4       	brne	.+6      	; 0x1a20 <vfprintf+0x310>
    1a1a:	99 ee       	ldi	r25, 0xE9	; 233
    1a1c:	f9 22       	and	r15, r25
    1a1e:	08 c0       	rjmp	.+16     	; 0x1a30 <vfprintf+0x320>
    1a20:	1f 5f       	subi	r17, 0xFF	; 255
    1a22:	f2 fe       	sbrs	r15, 2
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <vfprintf+0x320>
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <vfprintf+0x31e>
    1a28:	8f 2d       	mov	r24, r15
    1a2a:	86 78       	andi	r24, 0x86	; 134
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <vfprintf+0x320>
    1a2e:	1f 5f       	subi	r17, 0xFF	; 255
    1a30:	0f 2d       	mov	r16, r15
    1a32:	f3 fc       	sbrc	r15, 3
    1a34:	14 c0       	rjmp	.+40     	; 0x1a5e <vfprintf+0x34e>
    1a36:	f0 fe       	sbrs	r15, 0
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <vfprintf+0x348>
    1a3a:	1e 15       	cp	r17, r14
    1a3c:	10 f0       	brcs	.+4      	; 0x1a42 <vfprintf+0x332>
    1a3e:	9d 2c       	mov	r9, r13
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <vfprintf+0x348>
    1a42:	9d 2c       	mov	r9, r13
    1a44:	9e 0c       	add	r9, r14
    1a46:	91 1a       	sub	r9, r17
    1a48:	1e 2d       	mov	r17, r14
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <vfprintf+0x348>
    1a4c:	80 e2       	ldi	r24, 0x20	; 32
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	b3 01       	movw	r22, r6
    1a52:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1a56:	1f 5f       	subi	r17, 0xFF	; 255
    1a58:	1e 15       	cp	r17, r14
    1a5a:	c0 f3       	brcs	.-16     	; 0x1a4c <vfprintf+0x33c>
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <vfprintf+0x356>
    1a5e:	1e 15       	cp	r17, r14
    1a60:	10 f4       	brcc	.+4      	; 0x1a66 <vfprintf+0x356>
    1a62:	e1 1a       	sub	r14, r17
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <vfprintf+0x358>
    1a66:	ee 24       	eor	r14, r14
    1a68:	04 ff       	sbrs	r16, 4
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <vfprintf+0x37a>
    1a6c:	80 e3       	ldi	r24, 0x30	; 48
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	b3 01       	movw	r22, r6
    1a72:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1a76:	02 ff       	sbrs	r16, 2
    1a78:	1d c0       	rjmp	.+58     	; 0x1ab4 <vfprintf+0x3a4>
    1a7a:	01 fd       	sbrc	r16, 1
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <vfprintf+0x374>
    1a7e:	88 e7       	ldi	r24, 0x78	; 120
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <vfprintf+0x390>
    1a84:	88 e5       	ldi	r24, 0x58	; 88
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0b c0       	rjmp	.+22     	; 0x1aa0 <vfprintf+0x390>
    1a8a:	80 2f       	mov	r24, r16
    1a8c:	86 78       	andi	r24, 0x86	; 134
    1a8e:	91 f0       	breq	.+36     	; 0x1ab4 <vfprintf+0x3a4>
    1a90:	01 ff       	sbrs	r16, 1
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <vfprintf+0x388>
    1a94:	8b e2       	ldi	r24, 0x2B	; 43
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <vfprintf+0x38a>
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	f7 fc       	sbrc	r15, 7
    1a9c:	8d e2       	ldi	r24, 0x2D	; 45
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	b3 01       	movw	r22, r6
    1aa2:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <vfprintf+0x3a4>
    1aa8:	80 e3       	ldi	r24, 0x30	; 48
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	b3 01       	movw	r22, r6
    1aae:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1ab2:	9a 94       	dec	r9
    1ab4:	d9 14       	cp	r13, r9
    1ab6:	c0 f3       	brcs	.-16     	; 0x1aa8 <vfprintf+0x398>
    1ab8:	da 94       	dec	r13
    1aba:	f1 01       	movw	r30, r2
    1abc:	ed 0d       	add	r30, r13
    1abe:	f1 1d       	adc	r31, r1
    1ac0:	80 81       	ld	r24, Z
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	b3 01       	movw	r22, r6
    1ac6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1aca:	dd 20       	and	r13, r13
    1acc:	a9 f7       	brne	.-22     	; 0x1ab8 <vfprintf+0x3a8>
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <vfprintf+0x3cc>
    1ad0:	80 e2       	ldi	r24, 0x20	; 32
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	b3 01       	movw	r22, r6
    1ad6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <fputc>
    1ada:	ea 94       	dec	r14
    1adc:	ee 20       	and	r14, r14
    1ade:	c1 f7       	brne	.-16     	; 0x1ad0 <vfprintf+0x3c0>
    1ae0:	43 ce       	rjmp	.-890    	; 0x1768 <vfprintf+0x58>
    1ae2:	f3 01       	movw	r30, r6
    1ae4:	66 81       	ldd	r22, Z+6	; 0x06
    1ae6:	77 81       	ldd	r23, Z+7	; 0x07
    1ae8:	cb 01       	movw	r24, r22
    1aea:	2b 96       	adiw	r28, 0x0b	; 11
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	3f 90       	pop	r3
    1b18:	2f 90       	pop	r2
    1b1a:	08 95       	ret

00001b1c <strnlen_P>:
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	05 90       	lpm	r0, Z+
    1b20:	61 50       	subi	r22, 0x01	; 1
    1b22:	70 40       	sbci	r23, 0x00	; 0
    1b24:	01 10       	cpse	r0, r1
    1b26:	d8 f7       	brcc	.-10     	; 0x1b1e <strnlen_P+0x2>
    1b28:	80 95       	com	r24
    1b2a:	90 95       	com	r25
    1b2c:	8e 0f       	add	r24, r30
    1b2e:	9f 1f       	adc	r25, r31
    1b30:	08 95       	ret

00001b32 <strnlen>:
    1b32:	fc 01       	movw	r30, r24
    1b34:	61 50       	subi	r22, 0x01	; 1
    1b36:	70 40       	sbci	r23, 0x00	; 0
    1b38:	01 90       	ld	r0, Z+
    1b3a:	01 10       	cpse	r0, r1
    1b3c:	d8 f7       	brcc	.-10     	; 0x1b34 <strnlen+0x2>
    1b3e:	80 95       	com	r24
    1b40:	90 95       	com	r25
    1b42:	8e 0f       	add	r24, r30
    1b44:	9f 1f       	adc	r25, r31
    1b46:	08 95       	ret

00001b48 <fputc>:
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	8c 01       	movw	r16, r24
    1b52:	eb 01       	movw	r28, r22
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	81 ff       	sbrs	r24, 1
    1b58:	1b c0       	rjmp	.+54     	; 0x1b90 <fputc+0x48>
    1b5a:	82 ff       	sbrs	r24, 2
    1b5c:	0d c0       	rjmp	.+26     	; 0x1b78 <fputc+0x30>
    1b5e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b60:	3f 81       	ldd	r19, Y+7	; 0x07
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	64 f4       	brge	.+24     	; 0x1b84 <fputc+0x3c>
    1b6c:	e8 81       	ld	r30, Y
    1b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b70:	01 93       	st	Z+, r16
    1b72:	f9 83       	std	Y+1, r31	; 0x01
    1b74:	e8 83       	st	Y, r30
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <fputc+0x3c>
    1b78:	e8 85       	ldd	r30, Y+8	; 0x08
    1b7a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b7c:	80 2f       	mov	r24, r16
    1b7e:	09 95       	icall
    1b80:	89 2b       	or	r24, r25
    1b82:	31 f4       	brne	.+12     	; 0x1b90 <fputc+0x48>
    1b84:	8e 81       	ldd	r24, Y+6	; 0x06
    1b86:	9f 81       	ldd	r25, Y+7	; 0x07
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	9f 83       	std	Y+7, r25	; 0x07
    1b8c:	8e 83       	std	Y+6, r24	; 0x06
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <fputc+0x4c>
    1b90:	0f ef       	ldi	r16, 0xFF	; 255
    1b92:	1f ef       	ldi	r17, 0xFF	; 255
    1b94:	c8 01       	movw	r24, r16
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	08 95       	ret

00001ba0 <__ultoa_invert>:
    1ba0:	fa 01       	movw	r30, r20
    1ba2:	aa 27       	eor	r26, r26
    1ba4:	28 30       	cpi	r18, 0x08	; 8
    1ba6:	51 f1       	breq	.+84     	; 0x1bfc <__ultoa_invert+0x5c>
    1ba8:	20 31       	cpi	r18, 0x10	; 16
    1baa:	81 f1       	breq	.+96     	; 0x1c0c <__ultoa_invert+0x6c>
    1bac:	e8 94       	clt
    1bae:	6f 93       	push	r22
    1bb0:	6e 7f       	andi	r22, 0xFE	; 254
    1bb2:	6e 5f       	subi	r22, 0xFE	; 254
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	af 4f       	sbci	r26, 0xFF	; 255
    1bbc:	b1 e0       	ldi	r27, 0x01	; 1
    1bbe:	3e d0       	rcall	.+124    	; 0x1c3c <__ultoa_invert+0x9c>
    1bc0:	b4 e0       	ldi	r27, 0x04	; 4
    1bc2:	3c d0       	rcall	.+120    	; 0x1c3c <__ultoa_invert+0x9c>
    1bc4:	67 0f       	add	r22, r23
    1bc6:	78 1f       	adc	r23, r24
    1bc8:	89 1f       	adc	r24, r25
    1bca:	9a 1f       	adc	r25, r26
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	68 0f       	add	r22, r24
    1bd0:	79 1f       	adc	r23, r25
    1bd2:	8a 1f       	adc	r24, r26
    1bd4:	91 1d       	adc	r25, r1
    1bd6:	a1 1d       	adc	r26, r1
    1bd8:	6a 0f       	add	r22, r26
    1bda:	71 1d       	adc	r23, r1
    1bdc:	81 1d       	adc	r24, r1
    1bde:	91 1d       	adc	r25, r1
    1be0:	a1 1d       	adc	r26, r1
    1be2:	20 d0       	rcall	.+64     	; 0x1c24 <__ultoa_invert+0x84>
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <__ultoa_invert+0x48>
    1be6:	68 94       	set
    1be8:	3f 91       	pop	r19
    1bea:	2a e0       	ldi	r18, 0x0A	; 10
    1bec:	26 9f       	mul	r18, r22
    1bee:	11 24       	eor	r1, r1
    1bf0:	30 19       	sub	r19, r0
    1bf2:	30 5d       	subi	r19, 0xD0	; 208
    1bf4:	31 93       	st	Z+, r19
    1bf6:	de f6       	brtc	.-74     	; 0x1bae <__ultoa_invert+0xe>
    1bf8:	cf 01       	movw	r24, r30
    1bfa:	08 95       	ret
    1bfc:	46 2f       	mov	r20, r22
    1bfe:	47 70       	andi	r20, 0x07	; 7
    1c00:	40 5d       	subi	r20, 0xD0	; 208
    1c02:	41 93       	st	Z+, r20
    1c04:	b3 e0       	ldi	r27, 0x03	; 3
    1c06:	0f d0       	rcall	.+30     	; 0x1c26 <__ultoa_invert+0x86>
    1c08:	c9 f7       	brne	.-14     	; 0x1bfc <__ultoa_invert+0x5c>
    1c0a:	f6 cf       	rjmp	.-20     	; 0x1bf8 <__ultoa_invert+0x58>
    1c0c:	46 2f       	mov	r20, r22
    1c0e:	4f 70       	andi	r20, 0x0F	; 15
    1c10:	40 5d       	subi	r20, 0xD0	; 208
    1c12:	4a 33       	cpi	r20, 0x3A	; 58
    1c14:	18 f0       	brcs	.+6      	; 0x1c1c <__ultoa_invert+0x7c>
    1c16:	49 5d       	subi	r20, 0xD9	; 217
    1c18:	31 fd       	sbrc	r19, 1
    1c1a:	40 52       	subi	r20, 0x20	; 32
    1c1c:	41 93       	st	Z+, r20
    1c1e:	02 d0       	rcall	.+4      	; 0x1c24 <__ultoa_invert+0x84>
    1c20:	a9 f7       	brne	.-22     	; 0x1c0c <__ultoa_invert+0x6c>
    1c22:	ea cf       	rjmp	.-44     	; 0x1bf8 <__ultoa_invert+0x58>
    1c24:	b4 e0       	ldi	r27, 0x04	; 4
    1c26:	a6 95       	lsr	r26
    1c28:	97 95       	ror	r25
    1c2a:	87 95       	ror	r24
    1c2c:	77 95       	ror	r23
    1c2e:	67 95       	ror	r22
    1c30:	ba 95       	dec	r27
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__ultoa_invert+0x86>
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	08 95       	ret
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	0a 2e       	mov	r0, r26
    1c42:	06 94       	lsr	r0
    1c44:	57 95       	ror	r21
    1c46:	47 95       	ror	r20
    1c48:	37 95       	ror	r19
    1c4a:	27 95       	ror	r18
    1c4c:	ba 95       	dec	r27
    1c4e:	c9 f7       	brne	.-14     	; 0x1c42 <__ultoa_invert+0xa2>
    1c50:	62 0f       	add	r22, r18
    1c52:	73 1f       	adc	r23, r19
    1c54:	84 1f       	adc	r24, r20
    1c56:	95 1f       	adc	r25, r21
    1c58:	a0 1d       	adc	r26, r0
    1c5a:	08 95       	ret

00001c5c <_exit>:
    1c5c:	f8 94       	cli

00001c5e <__stop_program>:
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <__stop_program>
