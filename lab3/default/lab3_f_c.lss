
lab3_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001db4  00001e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004df  00800128  00800128  00001e70  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000042a  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001397  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000046c  00000000  00000000  00003691  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fa9  00000000  00000000  00003afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00004aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ed  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b2b  00000000  00000000  00005225  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00005d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_13>
      38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_14>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      54:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      58:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      5c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      60:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      64:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      68:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      6c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      70:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      74:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      78:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      7c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      80:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      84:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      88:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

0000008c <LCD_initialize>:
      8c:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

0000009e <LCD_burst_freq>:
      9e:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000b0 <LCD_interval>:
      b0:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000c2 <LCD_num_syllable>:
      c2:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000d4 <LCD_dur_syllable>:
      d4:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

000000e6 <LCD_rpt_interval>:
      e6:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

000000f8 <LCD_playing>:
      f8:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

0000010a <LCD_cap_clear>:
     10a:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000118 <ascii>:
	...
     1fc:	00 00 00 60 60 60 60 00 00 60 50 50 00 00 00 00     ...````..`PP....
     20c:	00 00 50 f8 50 f8 50 00 70 a0 a0 70 28 28 70 40     ..P.P.P.p..p((p@
     21c:	a8 50 20 50 a8 10 20 50 a0 40 a8 90 68 40 40 40     .P P.. P.@..h@@@
     22c:	00 00 00 00 10 20 40 40 40 20 10 40 20 10 10 10     ..... @@@ .@ ...
     23c:	20 40 10 38 10 00 00 00 00 00 20 20 f8 20 20 00      @.8......  .  .
     24c:	00 00 00 00 00 10 10 00 00 00 00 f8 00 00 00 00     ................
     25c:	00 00 00 00 10 00 08 10 20 40 80 00 70 88 98 a8     ........ @..p...
     26c:	c8 88 70 20 60 20 20 20 20 70 70 88 08 10 20 40     ..p `    pp... @
     27c:	f8 f8 10 20 10 08 88 70 10 30 50 90 f8 10 10 f8     ... ...p.0P.....
     28c:	80 f0 08 08 88 70 40 80 80 f0 88 88 70 f8 08 10     .....p@.....p...
     29c:	20 40 80 80 70 88 88 70 88 88 70 70 88 88 78 08      @..p..p..pp..x.
     2ac:	08 10 00 00 20 00 00 00 20 00 00 20 00 00 20 20     .... ... .. ..  
     2bc:	00 18 60 80 60 18 00 00 00 78 00 78 00 00 00 c0     ..`.`....x.x....
     2cc:	30 08 30 c0 00 30 48 10 20 20 00 20 70 88 b8 a8     0.0..0H.  . p...
     2dc:	90 88 70 70 88 88 88 f8 88 88 f0 88 88 f0 88 88     ..pp............
     2ec:	f0 70 88 80 80 80 88 70 f0 88 88 88 88 88 f0 f8     .p.....p........
     2fc:	80 80 f8 80 80 f8 f8 80 80 f8 80 80 80 70 88 80     .............p..
     30c:	98 88 88 70 88 88 88 f8 88 88 88 70 20 20 20 20     ...p.......p    
     31c:	20 70 38 10 10 10 10 90 60 88 90 a0 c0 a0 90 88      p8.....`.......
     32c:	80 80 80 80 80 80 f8 88 d8 a8 a8 88 88 88 88 88     ................
     33c:	c8 a8 98 88 88 70 88 88 88 88 88 70 f0 88 88 f0     .....p.....p....
     34c:	80 80 80 70 88 88 88 a8 90 68 f0 88 88 f0 a0 90     ...p.....h......
     35c:	88 78 80 80 70 08 08 f0 f8 20 20 20 20 20 20 88     .x..p....      .
     36c:	88 88 88 88 88 70 88 88 88 88 88 50 20 88 88 88     .....p.....P ...
     37c:	a8 a8 a8 50 88 88 50 20 50 88 88 88 88 88 50 20     ...P..P P.....P 
     38c:	20 20 f8 08 10 20 40 80 f8 e0 80 80 80 80 80 e0       ... @.........
     39c:	00 80 40 20 10 08 00 38 08 08 08 08 08 38 20 50     ..@ ...8.....8 P
	...
     3b4:	00 00 00 f8 80 40 00 00 00 00 00 00 60 10 70 90     .....@......`.p.
     3c4:	60 00 80 80 e0 90 90 e0 00 00 00 70 80 80 70 00     `..........p..p.
     3d4:	10 10 70 90 90 70 00 00 60 90 f0 80 70 00 30 40     ..p..p..`...p.0@
     3e4:	e0 40 40 40 00 00 60 90 70 10 10 60 80 80 e0 90     .@@@..`.p..`....
     3f4:	90 90 00 00 20 00 20 20 20 00 00 10 00 10 10 10     .... .   .......
     404:	60 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 00 00     `.......      ..
     414:	00 50 a8 a8 a8 00 00 00 60 90 90 90 00 00 00 60     .P......`......`
     424:	90 90 60 00 00 00 60 90 f0 80 80 00 00 60 90 f0     ..`...`......`..
     434:	10 10 00 00 b8 40 40 40 00 00 00 70 40 10 70 00     .....@@@...p@.p.
     444:	40 40 e0 40 40 40 00 00 00 90 90 90 60 00 00 00     @@.@@@......`...
     454:	88 88 50 20 00 00 00 a8 a8 50 50 00 00 00 90 60     ..P .....PP....`
     464:	60 90 00 00 00 90 90 60 40 80 00 00 f0 20 40 f0     `......`@.... @.
     474:	00 20 40 40 80 40 40 20 20 20 20 20 20 20 20 20     . @@.@@         
     484:	10 10 08 10 10 20 00 00 40 a8 10 00 00 00 00 00     ..... ..@.......
     494:	00 00 00 00                                         ....

00000498 <LcdCustomChar>:
     498:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     4a8:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     4b8:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     4c8:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000004d8 <__ctors_end>:
     4d8:	11 24       	eor	r1, r1
     4da:	1f be       	out	0x3f, r1	; 63
     4dc:	cf ef       	ldi	r28, 0xFF	; 255
     4de:	d0 e4       	ldi	r29, 0x40	; 64
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	cd bf       	out	0x3d, r28	; 61

000004e4 <__do_copy_data>:
     4e4:	11 e0       	ldi	r17, 0x01	; 1
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b1 e0       	ldi	r27, 0x01	; 1
     4ea:	e4 eb       	ldi	r30, 0xB4	; 180
     4ec:	fd e1       	ldi	r31, 0x1D	; 29
     4ee:	00 e0       	ldi	r16, 0x00	; 0
     4f0:	0b bf       	out	0x3b, r16	; 59
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x14>
     4f4:	07 90       	elpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	a8 32       	cpi	r26, 0x28	; 40
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0x10>

000004fe <__do_clear_bss>:
     4fe:	16 e0       	ldi	r17, 0x06	; 6
     500:	a8 e2       	ldi	r26, 0x28	; 40
     502:	b1 e0       	ldi	r27, 0x01	; 1
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a7 30       	cpi	r26, 0x07	; 7
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <main>
     512:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <__vector_14>:
volatile unsigned char time_elapsed_HS;

// put the MCU to sleep JUST before the CompA ISR goes off
ISR(TIMER1_COMPB_vect, ISR_NAKED)
{
	sei();
     51a:	78 94       	sei
	sleep_cpu();
     51c:	88 95       	sleep
	reti();
     51e:	18 95       	reti

00000520 <__vector_13>:

//==================================
//This is the sync generator and raster generator. It MUST be entered from 
//sleep mode to get accurate timing of the sync pulses

ISR (TIMER1_COMPA_vect) {
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	0b b6       	in	r0, 0x3b	; 59
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	int x, screenStart ;
	//start the Horizontal sync pulse    
	PORTD = syncON;
     53a:	80 91 e7 05 	lds	r24, 0x05E7
     53e:	8b b9       	out	0x0b, r24	; 11

	//update the current scanline number
	LineCount++;   
     540:	80 91 a9 05 	lds	r24, 0x05A9
     544:	90 91 aa 05 	lds	r25, 0x05AA
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 aa 05 	sts	0x05AA, r25
     54e:	80 93 a9 05 	sts	0x05A9, r24
  
	//begin inverted (Vertical) synch after line 247
	if (LineCount==248) { 
     552:	80 91 a9 05 	lds	r24, 0x05A9
     556:	90 91 aa 05 	lds	r25, 0x05AA
     55a:	88 3f       	cpi	r24, 0xF8	; 248
     55c:	91 05       	cpc	r25, r1
     55e:	29 f4       	brne	.+10     	; 0x56a <__vector_13+0x4a>
    	syncON = 0b00000001;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 e7 05 	sts	0x05E7, r24
    	syncOFF = 0;
     566:	10 92 06 06 	sts	0x0606, r1
  	}
  
	//back to regular sync after line 250
	if (LineCount==251)	{
     56a:	80 91 a9 05 	lds	r24, 0x05A9
     56e:	90 91 aa 05 	lds	r25, 0x05AA
     572:	8b 3f       	cpi	r24, 0xFB	; 251
     574:	91 05       	cpc	r25, r1
     576:	29 f4       	brne	.+10     	; 0x582 <__vector_13+0x62>
		syncON = 0;
     578:	10 92 e7 05 	sts	0x05E7, r1
		syncOFF = 0b00000001;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 06 06 	sts	0x0606, r24
	}  
  
  	//start new frame after line 262
	if (LineCount==263)
     582:	80 91 a9 05 	lds	r24, 0x05A9
     586:	90 91 aa 05 	lds	r25, 0x05AA
     58a:	87 50       	subi	r24, 0x07	; 7
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	31 f4       	brne	.+12     	; 0x59c <__vector_13+0x7c>
		LineCount = 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 aa 05 	sts	0x05AA, r25
     598:	80 93 a9 05 	sts	0x05A9, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <__vector_13+0x7e>
      
	//adjust to make 5 us pulses
	_delay_us(3);

	//end sync pulse
	PORTD = syncOFF;   
     5a2:	80 91 06 06 	lds	r24, 0x0606
     5a6:	8b b9       	out	0x0b, r24	; 11

	if (LineCount < ScreenBot && LineCount >= ScreenTop) {
     5a8:	80 91 a9 05 	lds	r24, 0x05A9
     5ac:	90 91 aa 05 	lds	r25, 0x05AA
     5b0:	8d 36       	cpi	r24, 0x6D	; 109
     5b2:	91 05       	cpc	r25, r1
     5b4:	94 f5       	brge	.+100    	; 0x61a <__vector_13+0xfa>
     5b6:	80 91 a9 05 	lds	r24, 0x05A9
     5ba:	90 91 aa 05 	lds	r25, 0x05AA
     5be:	8d 97       	sbiw	r24, 0x2d	; 45
     5c0:	64 f1       	brlt	.+88     	; 0x61a <__vector_13+0xfa>
		//compute offset into screen array
		//screenindex = screen + ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3);
		
		//compute offset into screen array
		//screenStart = ((LineCount - ScreenTop) << 4) + ((LineCount - ScreenTop) << 3) ;
		screenStart = (LineCount - ScreenTop) * bytes_per_line;
     5c2:	80 91 a9 05 	lds	r24, 0x05A9
     5c6:	90 91 aa 05 	lds	r25, 0x05AA
     5ca:	8d 97       	sbiw	r24, 0x2d	; 45
     5cc:	24 e0       	ldi	r18, 0x04	; 4
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	2a 95       	dec	r18
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_13+0xae>
     5d6:	2a e2       	ldi	r18, 0x2A	; 42
     5d8:	2a 95       	dec	r18
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <__vector_13+0xb8>
		//center image on screen
		_delay_us(8);
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
     5dc:	fc 01       	movw	r30, r24
     5de:	e9 5a       	subi	r30, 0xA9	; 169
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	20 81       	ld	r18, Z
     5e4:	20 93 c6 00 	sts	0x00C6, r18
		UCSR0B = _BV(TXEN0);
     5e8:	28 e0       	ldi	r18, 0x08	; 8
     5ea:	20 93 c1 00 	sts	0x00C1, r18
		UDR0 = screen[screenStart+1] ;
     5ee:	21 81       	ldd	r18, Z+1	; 0x01
     5f0:	20 93 c6 00 	sts	0x00C6, r18
     5f4:	fc 01       	movw	r30, r24
     5f6:	e7 5a       	subi	r30, 0xA7	; 167
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	30 e0       	ldi	r19, 0x00	; 0
		for (x = 2; x < bytes_per_line; x++)
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
     5fe:	80 91 c0 00 	lds	r24, 0x00C0
     602:	85 ff       	sbrs	r24, 5
     604:	fc cf       	rjmp	.-8      	; 0x5fe <__vector_13+0xde>
			UDR0 = screen[screenStart+x] ;
     606:	81 91       	ld	r24, Z+
     608:	80 93 c6 00 	sts	0x00C6, r24
		//blast the data to the screen
		// We can load UDR twice because it is double-bufffered
		UDR0 = screen[screenStart] ;
		UCSR0B = _BV(TXEN0);
		UDR0 = screen[screenStart+1] ;
		for (x = 2; x < bytes_per_line; x++)
     60c:	2f 5f       	subi	r18, 0xFF	; 255
     60e:	3f 4f       	sbci	r19, 0xFF	; 255
     610:	20 31       	cpi	r18, 0x10	; 16
     612:	31 05       	cpc	r19, r1
     614:	a1 f7       	brne	.-24     	; 0x5fe <__vector_13+0xde>
		begin
			while (!(UCSR0A & _BV(UDRE0))) ;
			UDR0 = screen[screenStart+x] ;
		end
		UCSR0B = 0 ;
     616:	10 92 c1 00 	sts	0x00C1, r1
	}         
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0b be       	out	0x3b, r0	; 59
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <timer1_init>:

//init timer 1 to generate sync
void timer1_init(void)
begin
	// Zero previous values
	TCCR1B = 0x00;
     634:	e1 e8       	ldi	r30, 0x81	; 129
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	10 82       	st	Z, r1
	TIMSK1 = 0x00;
     63a:	af e6       	ldi	r26, 0x6F	; 111
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	1c 92       	st	X, r1

	TCCR1B = _BV(WGM12) + _BV(CS10);
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	80 83       	st	Z, r24
	OCR1A = LINE_TIME;	// time for one NTSC line
     644:	8a ef       	ldi	r24, 0xFA	; 250
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 89 00 	sts	0x0089, r25
     64c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = SLEEP_TIME;	// time to go to sleep
     650:	87 ee       	ldi	r24, 0xE7	; 231
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 8b 00 	sts	0x008B, r25
     658:	80 93 8a 00 	sts	0x008A, r24
	TIMSK1 = _BV(OCIE1B) + _BV(OCIE1A);
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	8c 93       	st	X, r24
end
     660:	08 95       	ret

00000662 <USART_init>:

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     662:	88 e0       	ldi	r24, 0x08	; 8
     664:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     668:	80 ec       	ldi	r24, 0xC0	; 192
     66a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 c5 00 	sts	0x00C5, r25
     676:	80 93 c4 00 	sts	0x00C4, r24
end
     67a:	08 95       	ret

0000067c <ADC_init>:
end


void ADC_init(void)
begin
	ADMUX = 0;
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	10 82       	st	Z, r1
	ADCSRA = 0;
     682:	aa e7       	ldi	r26, 0x7A	; 122
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	1c 92       	st	X, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     688:	80 e6       	ldi	r24, 0x60	; 96
     68a:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     68c:	87 e8       	ldi	r24, 0x87	; 135
     68e:	8c 93       	st	X, r24
end
     690:	08 95       	ret

00000692 <port_init>:


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     692:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     694:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8a b9       	out	0x0a, r24	; 10
end
     69a:	08 95       	ret

0000069c <ADC_start_measure>:


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     69c:	ec e7       	ldi	r30, 0x7C	; 124
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	10 82       	st	Z, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     6a2:	80 5a       	subi	r24, 0xA0	; 160
     6a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
     6a6:	ea e7       	ldi	r30, 0x7A	; 122
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	80 83       	st	Z, r24
end
     6b0:	08 95       	ret

000006b2 <initialize>:
	LCDstring(lcd_buffer, strlen(lcd_buffer));
end


void initialize(void)
begin
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
end


void ADC_init(void)
begin
	ADMUX = 0;
     6b6:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA = 0;
     6ba:	10 92 7a 00 	sts	0x007A, r1

	ADMUX = (1<<REFS0) + (1<<ADLAR);
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) + 7 ; 
     6c4:	87 e8       	ldi	r24, 0x87	; 135
     6c6:	80 93 7a 00 	sts	0x007A, r24
end


void port_init(void)
begin
	DDRA = 0x00;    // all of PORTA is an input to avoid coupling with ADC meas
     6ca:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;    // no pull-up resistors to avoid coupling
     6cc:	12 b8       	out	0x02, r1	; 2

	DDRD = 0x03;    // Sets D.1 and D.0 to output
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	8a b9       	out	0x0a, r24	; 10

//places USART in MSPIM mode to get 4MHz pixel update
void USART_init(void)
begin
	// USART in MSPIM mode, transmitter enabled, frequency fosc/4
	UCSR0B = _BV(TXEN0);
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UMSEL01) | _BV(UMSEL00);
     6d8:	80 ec       	ldi	r24, 0xC0	; 192
     6da:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 1 ;
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	10 93 c5 00 	sts	0x00C5, r17
     6e6:	00 93 c4 00 	sts	0x00C4, r16
begin
	ADC_init();
	//LCD_init();
	port_init();
	USART_init();
	timer1_init();
     6ea:	0e 94 1a 03 	call	0x634	; 0x634 <timer1_init>

	//initialize synch constants 
	LineCount = 1;
     6ee:	10 93 aa 05 	sts	0x05AA, r17
     6f2:	00 93 a9 05 	sts	0x05A9, r16

	syncON = 0b00000000;
     6f6:	10 92 e7 05 	sts	0x05E7, r1
	syncOFF = 0b00000001;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 06 06 	sts	0x0606, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++)
	begin
		is_on_screen[n] = 0;
     704:	fc 01       	movw	r30, r24
     706:	e8 5b       	subi	r30, 0xB8	; 184
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	10 82       	st	Z, r1
		age[n] = 0;
     70c:	fc 01       	movw	r30, r24
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	e8 5d       	subi	r30, 0xD8	; 216
     714:	fe 4f       	sbci	r31, 0xFE	; 254
     716:	11 82       	std	Z+1, r1	; 0x01
     718:	10 82       	st	Z, r1
		hit_count[n] = 0;
     71a:	fc 01       	movw	r30, r24
     71c:	e6 59       	subi	r30, 0x96	; 150
     71e:	fa 4f       	sbci	r31, 0xFA	; 250
     720:	10 82       	st	Z, r1

	syncON = 0b00000000;
	syncOFF = 0b00000001;

	// init no balls on screen	
	for(int n=0; n<Max_num_balls;n++)
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	8f 30       	cpi	r24, 0x0F	; 15
     726:	91 05       	cpc	r25, r1
     728:	69 f7       	brne	.-38     	; 0x704 <initialize+0x52>
     72a:	e7 e5       	ldi	r30, 0x57	; 87
     72c:	f1 e0       	ldi	r31, 0x01	; 1
		is_on_screen[n] = 0;
		age[n] = 0;
		hit_count[n] = 0;
	end

	for(int y=0; y<screen_array_size;y++) screen[y] = 0;
     72e:	11 92       	st	Z+, r1
     730:	85 e0       	ldi	r24, 0x05	; 5
     732:	e7 35       	cpi	r30, 0x57	; 87
     734:	f8 07       	cpc	r31, r24
     736:	d9 f7       	brne	.-10     	; 0x72e <initialize+0x7c>
	time_elapsed_HS = 0;
     738:	10 92 69 05 	sts	0x0569, r1
	score = 0;
     73c:	10 92 68 05 	sts	0x0568, r1

	// Set up single video line timing
	sei();
     740:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
     742:	83 b7       	in	r24, 0x33	; 51
     744:	81 7f       	andi	r24, 0xF1	; 241
     746:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     748:	83 b7       	in	r24, 0x33	; 51
     74a:	81 60       	ori	r24, 0x01	; 1
     74c:	83 bf       	out	0x33, r24	; 51

end
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <video_pt>:


//==================================
//plot one point 
//at x,y with color 1=white 0=black 2=invert 
void video_pt(char x, char y, char c) {
     754:	98 2f       	mov	r25, r24
	//each line has 18 bytes
	//calculate i based upon this and x,y
	// the byte with the pixel in it
	//int i = (x >> 3) + ((int)y<<4) + ((int)y<<1);
	int i = (x >> 3) + (int)y * bytes_per_line ;
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	54 e0       	ldi	r21, 0x04	; 4
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	5a 95       	dec	r21
     760:	e1 f7       	brne	.-8      	; 0x75a <video_pt+0x6>
     762:	86 95       	lsr	r24
     764:	86 95       	lsr	r24
     766:	86 95       	lsr	r24
     768:	68 0f       	add	r22, r24
     76a:	71 1d       	adc	r23, r1

	if (c==1)
     76c:	41 30       	cpi	r20, 0x01	; 1
     76e:	69 f4       	brne	.+26     	; 0x78a <video_pt+0x36>
	  screen[i] = screen[i] | pos[x & 7];
     770:	db 01       	movw	r26, r22
     772:	a9 5a       	subi	r26, 0xA9	; 169
     774:	be 4f       	sbci	r27, 0xFE	; 254
     776:	e9 2f       	mov	r30, r25
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	e7 70       	andi	r30, 0x07	; 7
     77c:	f0 70       	andi	r31, 0x00	; 0
     77e:	e1 5e       	subi	r30, 0xE1	; 225
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	8c 91       	ld	r24, X
     784:	90 81       	ld	r25, Z
     786:	89 2b       	or	r24, r25
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <video_pt+0x64>
     78a:	db 01       	movw	r26, r22
     78c:	a9 5a       	subi	r26, 0xA9	; 169
     78e:	be 4f       	sbci	r27, 0xFE	; 254
     790:	e9 2f       	mov	r30, r25
     792:	f0 e0       	ldi	r31, 0x00	; 0
    else if (c==0)
     794:	44 23       	and	r20, r20
     796:	49 f4       	brne	.+18     	; 0x7aa <video_pt+0x56>
	  screen[i] = screen[i] & ~pos[x & 7];
     798:	e7 70       	andi	r30, 0x07	; 7
     79a:	f0 70       	andi	r31, 0x00	; 0
     79c:	e1 5e       	subi	r30, 0xE1	; 225
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	90 81       	ld	r25, Z
     7a2:	90 95       	com	r25
     7a4:	8c 91       	ld	r24, X
     7a6:	89 23       	and	r24, r25
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <video_pt+0x64>
    else
	  screen[i] = screen[i] ^ pos[x & 7];
     7aa:	e7 70       	andi	r30, 0x07	; 7
     7ac:	f0 70       	andi	r31, 0x00	; 0
     7ae:	e1 5e       	subi	r30, 0xE1	; 225
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	8c 91       	ld	r24, X
     7b4:	90 81       	ld	r25, Z
     7b6:	89 27       	eor	r24, r25
     7b8:	8c 93       	st	X, r24
     7ba:	08 95       	ret

000007bc <video_line>:
//plot a line 
//at x1,y1 to x2,y2 with color 1=white 0=black 2=invert 
//NOTE: this function requires signed chars   
//Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void video_line(char x1, char y1, char x2, char y2, char c) {
     7bc:	2f 92       	push	r2
     7be:	3f 92       	push	r3
     7c0:	4f 92       	push	r4
     7c2:	5f 92       	push	r5
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <video_line+0x26>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <video_line+0x28>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	0a 83       	std	Y+2, r16	; 0x02
	int e;
	signed int dx,dy,j, temp;
	signed char s1,s2, xchange;
    signed int x,y;
        
	x = x1;
     7ea:	c8 2e       	mov	r12, r24
     7ec:	dd 24       	eor	r13, r13
	y = y1;
     7ee:	e6 2e       	mov	r14, r22
     7f0:	ff 24       	eor	r15, r15
	
	//take absolute value
	if (x2 < x1) {
     7f2:	48 17       	cp	r20, r24
     7f4:	38 f4       	brcc	.+14     	; 0x804 <video_line+0x48>
		dx = x1 - x2;
     7f6:	c6 01       	movw	r24, r12
     7f8:	84 1b       	sub	r24, r20
     7fa:	91 09       	sbc	r25, r1
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	8b 83       	std	Y+3, r24	; 0x03
     800:	7f ef       	ldi	r23, 0xFF	; 255
     802:	0d c0       	rjmp	.+26     	; 0x81e <video_line+0x62>
		s1 = -1;
	}

	else if (x2 == x1) {
     804:	48 17       	cp	r20, r24
     806:	21 f4       	brne	.+8      	; 0x810 <video_line+0x54>
     808:	1c 82       	std	Y+4, r1	; 0x04
     80a:	1b 82       	std	Y+3, r1	; 0x03
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	07 c0       	rjmp	.+14     	; 0x81e <video_line+0x62>
		dx = 0;
		s1 = 0;
	}

	else {
		dx = x2 - x1;
     810:	e4 2f       	mov	r30, r20
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ec 19       	sub	r30, r12
     816:	fd 09       	sbc	r31, r13
     818:	fc 83       	std	Y+4, r31	; 0x04
     81a:	eb 83       	std	Y+3, r30	; 0x03
     81c:	71 e0       	ldi	r23, 0x01	; 1
		s1 = 1;
	}

	if (y2 < y1) {
     81e:	26 17       	cp	r18, r22
     820:	28 f4       	brcc	.+10     	; 0x82c <video_line+0x70>
		dy = y1 - y2;
     822:	a7 01       	movw	r20, r14
     824:	42 1b       	sub	r20, r18
     826:	51 09       	sbc	r21, r1
     828:	6f ef       	ldi	r22, 0xFF	; 255
     82a:	0b c0       	rjmp	.+22     	; 0x842 <video_line+0x86>
		s2 = -1;
	}

	else if (y2 == y1) {
     82c:	26 17       	cp	r18, r22
     82e:	21 f4       	brne	.+8      	; 0x838 <video_line+0x7c>
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	05 c0       	rjmp	.+10     	; 0x842 <video_line+0x86>
		dy = 0;
		s2 = 0;
	}

	else {
		dy = y2 - y1;
     838:	42 2f       	mov	r20, r18
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	4e 19       	sub	r20, r14
     83e:	5f 09       	sbc	r21, r15
     840:	61 e0       	ldi	r22, 0x01	; 1
		s2 = 1;
	}

	xchange = 0;   

	if (dy>dx) {
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	84 17       	cp	r24, r20
     848:	95 07       	cpc	r25, r21
     84a:	44 f4       	brge	.+16     	; 0x85c <video_line+0xa0>
     84c:	ca 01       	movw	r24, r20
     84e:	4b 81       	ldd	r20, Y+3	; 0x03
     850:	5c 81       	ldd	r21, Y+4	; 0x04
     852:	9c 83       	std	Y+4, r25	; 0x04
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	99 83       	std	Y+1, r25	; 0x01
     85a:	01 c0       	rjmp	.+2      	; 0x85e <video_line+0xa2>
     85c:	19 82       	std	Y+1, r1	; 0x01
		dx = dy;
		dy = temp;
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
     85e:	2a 01       	movw	r4, r20
     860:	44 0c       	add	r4, r4
     862:	55 1c       	adc	r5, r5
     864:	82 01       	movw	r16, r4
     866:	eb 81       	ldd	r30, Y+3	; 0x03
     868:	fc 81       	ldd	r31, Y+4	; 0x04
     86a:	0e 1b       	sub	r16, r30
     86c:	1f 0b       	sbc	r17, r31
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
			e = e - ((int)dx<<1);
     86e:	1f 01       	movw	r2, r30
     870:	22 0c       	add	r2, r2
     872:	33 1c       	adc	r3, r3
     874:	aa 24       	eor	r10, r10
     876:	bb 24       	eor	r11, r11
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
			else y = y + s2;
     878:	66 2e       	mov	r6, r22
     87a:	77 24       	eor	r7, r7
     87c:	67 fc       	sbrc	r6, 7
     87e:	70 94       	com	r7
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
		 
		if (e>=0) {
			if (xchange==1) x = x + s1;
     880:	87 2e       	mov	r8, r23
     882:	99 24       	eor	r9, r9
     884:	87 fc       	sbrc	r8, 7
     886:	90 94       	com	r9
     888:	1e c0       	rjmp	.+60     	; 0x8c6 <video_line+0x10a>
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
		video_pt(x,y,c);
     88a:	8c 2d       	mov	r24, r12
     88c:	6e 2d       	mov	r22, r14
     88e:	4a 81       	ldd	r20, Y+2	; 0x02
     890:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
		 
		if (e>=0) {
     894:	17 fd       	sbrc	r17, 7
     896:	0a c0       	rjmp	.+20     	; 0x8ac <video_line+0xf0>
			if (xchange==1) x = x + s1;
     898:	f9 81       	ldd	r31, Y+1	; 0x01
     89a:	f1 30       	cpi	r31, 0x01	; 1
     89c:	19 f4       	brne	.+6      	; 0x8a4 <video_line+0xe8>
     89e:	c8 0c       	add	r12, r8
     8a0:	d9 1c       	adc	r13, r9
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <video_line+0xec>
			else y = y + s2;
     8a4:	e6 0c       	add	r14, r6
     8a6:	f7 1c       	adc	r15, r7
			e = e - ((int)dx<<1);
     8a8:	02 19       	sub	r16, r2
     8aa:	13 09       	sbc	r17, r3
		}

		if (xchange==1) y = y + s2;
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	19 f4       	brne	.+6      	; 0x8b8 <video_line+0xfc>
     8b2:	e6 0c       	add	r14, r6
     8b4:	f7 1c       	adc	r15, r7
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <video_line+0x100>
		else x = x + s1;
     8b8:	c8 0c       	add	r12, r8
     8ba:	d9 1c       	adc	r13, r9

		e = e + ((int)dy<<1);
     8bc:	04 0d       	add	r16, r4
     8be:	15 1d       	adc	r17, r5
		xchange = 1;
	} 

	e = ((int)dy<<1) - dx;  
	 
	for (j=0; j<=dx; j++) {
     8c0:	08 94       	sec
     8c2:	a1 1c       	adc	r10, r1
     8c4:	b1 1c       	adc	r11, r1
     8c6:	eb 81       	ldd	r30, Y+3	; 0x03
     8c8:	fc 81       	ldd	r31, Y+4	; 0x04
     8ca:	ea 15       	cp	r30, r10
     8cc:	fb 05       	cpc	r31, r11
     8ce:	ec f6       	brge	.-70     	; 0x88a <video_line+0xce>
		if (xchange==1) y = y + s2;
		else x = x + s1;

		e = e + ((int)dy<<1);
	}
}
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	08 95       	ret

000008fe <video_putchar>:

//==================================
// put a big character on the screen
// c is index into bitmap
void video_putchar(char x, char y, char c) { 
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	e8 2e       	mov	r14, r24
     918:	f6 2e       	mov	r15, r22
	uint8_t j;

	for (i=0;i<7;i++) {
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     91a:	87 e0       	ldi	r24, 0x07	; 7
     91c:	48 9f       	mul	r20, r24
     91e:	a0 01       	movw	r20, r0
     920:	11 24       	eor	r1, r1
     922:	ea 01       	movw	r28, r20
     924:	c8 5e       	subi	r28, 0xE8	; 232
     926:	de 4f       	sbci	r29, 0xFE	; 254

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     928:	8e 2c       	mov	r8, r14
     92a:	83 94       	inc	r8
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     92c:	72 e0       	ldi	r23, 0x02	; 2
     92e:	97 2e       	mov	r9, r23
     930:	9e 0c       	add	r9, r14
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     932:	63 e0       	ldi	r22, 0x03	; 3
     934:	a6 2e       	mov	r10, r22
     936:	ae 0c       	add	r10, r14
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     938:	34 e0       	ldi	r19, 0x04	; 4
     93a:	b3 2e       	mov	r11, r19
     93c:	be 0c       	add	r11, r14
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     93e:	2f e1       	ldi	r18, 0x1F	; 31
     940:	c2 2e       	mov	r12, r18
     942:	21 e0       	ldi	r18, 0x01	; 1
     944:	d2 2e       	mov	r13, r18
     946:	c4 0e       	add	r12, r20
     948:	d5 1e       	adc	r13, r21
        y_pos = y + i;

		j = pgm_read_byte(((uint32_t)(ascii)) + c*7 + i);
     94a:	fe 01       	movw	r30, r28
     94c:	04 91       	lpm	r16, Z+

        video_pt(x,   y_pos, (j & 0x80)==0x80);  
     94e:	40 2f       	mov	r20, r16
     950:	44 1f       	adc	r20, r20
     952:	44 27       	eor	r20, r20
     954:	44 1f       	adc	r20, r20
     956:	8e 2d       	mov	r24, r14
     958:	6f 2d       	mov	r22, r15
     95a:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	a8 01       	movw	r20, r16
     962:	96 e0       	ldi	r25, 0x06	; 6
     964:	56 95       	lsr	r21
     966:	47 95       	ror	r20
     968:	9a 95       	dec	r25
     96a:	e1 f7       	brne	.-8      	; 0x964 <video_putchar+0x66>
     96c:	41 70       	andi	r20, 0x01	; 1
     96e:	88 2d       	mov	r24, r8
     970:	6f 2d       	mov	r22, r15
     972:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
     976:	a8 01       	movw	r20, r16
     978:	85 e0       	ldi	r24, 0x05	; 5
     97a:	56 95       	lsr	r21
     97c:	47 95       	ror	r20
     97e:	8a 95       	dec	r24
     980:	e1 f7       	brne	.-8      	; 0x97a <video_putchar+0x7c>
     982:	41 70       	andi	r20, 0x01	; 1
     984:	89 2d       	mov	r24, r9
     986:	6f 2d       	mov	r22, r15
     988:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
     98c:	a8 01       	movw	r20, r16
     98e:	b4 e0       	ldi	r27, 0x04	; 4
     990:	56 95       	lsr	r21
     992:	47 95       	ror	r20
     994:	ba 95       	dec	r27
     996:	e1 f7       	brne	.-8      	; 0x990 <video_putchar+0x92>
     998:	41 70       	andi	r20, 0x01	; 1
     99a:	8a 2d       	mov	r24, r10
     99c:	6f 2d       	mov	r22, r15
     99e:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
     9a2:	a3 e0       	ldi	r26, 0x03	; 3
     9a4:	16 95       	lsr	r17
     9a6:	07 95       	ror	r16
     9a8:	aa 95       	dec	r26
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <video_putchar+0xa6>
     9ac:	01 70       	andi	r16, 0x01	; 1
     9ae:	8b 2d       	mov	r24, r11
     9b0:	6f 2d       	mov	r22, r15
     9b2:	40 2f       	mov	r20, r16
     9b4:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
     9b8:	21 96       	adiw	r28, 0x01	; 1
     9ba:	f3 94       	inc	r15
void video_putchar(char x, char y, char c) { 
    char i;
	char y_pos;
	uint8_t j;

	for (i=0;i<7;i++) {
     9bc:	cc 15       	cp	r28, r12
     9be:	dd 05       	cpc	r29, r13
     9c0:	21 f6       	brne	.-120    	; 0x94a <video_putchar+0x4c>
        video_pt(x+1, y_pos, (j & 0x40)==0x40); 
        video_pt(x+2, y_pos, (j & 0x20)==0x20);
        video_pt(x+3, y_pos, (j & 0x10)==0x10);
        video_pt(x+4, y_pos, (j & 0x08)==0x08);
    }
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	08 95       	ret

000009dc <video_puts>:

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	08 2f       	mov	r16, r24
     9e8:	f6 2e       	mov	r15, r22
     9ea:	ea 01       	movw	r28, r20
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <video_puts+0x20>
	char i;
	for (i=0; str[i]!=0; i++) { 
		video_putchar(x,y,str[i]);
     9f0:	80 2f       	mov	r24, r16
     9f2:	6f 2d       	mov	r22, r15
     9f4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <video_putchar>
		x = x+6;	
     9f8:	0a 5f       	subi	r16, 0xFA	; 250

//==================================
// put a string of big characters on the screen
void video_puts(char x, char y, char *str) {
	char i;
	for (i=0; str[i]!=0; i++) { 
     9fa:	1f 5f       	subi	r17, 0xFF	; 255
     9fc:	fe 01       	movw	r30, r28
     9fe:	e1 0f       	add	r30, r17
     a00:	f1 1d       	adc	r31, r1
     a02:	40 81       	ld	r20, Z
     a04:	44 23       	and	r20, r20
     a06:	a1 f7       	brne	.-24     	; 0x9f0 <video_puts+0x14>
		video_putchar(x,y,str[i]);
		x = x+6;	
	}
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	08 95       	ret

00000a14 <video_set>:
*/

//==================================
//return the value of one point 
//at x,y with color 1=white 0=black 2=invert
char video_set(char x, char y) {
     a14:	e6 2f       	mov	r30, r22
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	28 2f       	mov	r18, r24
     a1a:	26 95       	lsr	r18
     a1c:	26 95       	lsr	r18
     a1e:	26 95       	lsr	r18
     a20:	a4 e0       	ldi	r26, 0x04	; 4
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	aa 95       	dec	r26
     a28:	e1 f7       	brne	.-8      	; 0xa22 <video_set+0xe>
     a2a:	e2 0f       	add	r30, r18
     a2c:	f1 1d       	adc	r31, r1
     a2e:	e9 5a       	subi	r30, 0xA9	; 169
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	80 95       	com	r24
     a36:	90 95       	com	r25
     a38:	87 70       	andi	r24, 0x07	; 7
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <video_set+0x32>
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	8a 95       	dec	r24
     a48:	e2 f7       	brpl	.-8      	; 0xa42 <video_set+0x2e>
     a4a:	80 81       	ld	r24, Z
  	//detects exactly one bit at the x,y location
	// int i = (x>>3) + ((int)y<<4) + ((int)y<<3);
	int i = (x>>3) + (int)y * bytes_per_line ;

    return (screen[i] & 1<<(7-(x & 0x7)));   	
}
     a4c:	82 23       	and	r24, r18
     a4e:	08 95       	ret

00000a50 <remove_ball>:


//////////////////////////////////////////////////////////////////////////////

void remove_ball(int i)
begin
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i]),0);
     a58:	8c 01       	movw	r16, r24
     a5a:	00 0f       	add	r16, r16
     a5c:	11 1f       	adc	r17, r17
     a5e:	fa e7       	ldi	r31, 0x7A	; 122
     a60:	ef 2e       	mov	r14, r31
     a62:	f5 e0       	ldi	r31, 0x05	; 5
     a64:	ff 2e       	mov	r15, r31
     a66:	e0 0e       	add	r14, r16
     a68:	f1 1e       	adc	r15, r17
     a6a:	f7 01       	movw	r30, r14
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	08 51       	subi	r16, 0x18	; 24
     a72:	1a 4f       	sbci	r17, 0xFA	; 250
     a74:	f8 01       	movw	r30, r16
     a76:	60 81       	ld	r22, Z
     a78:	71 81       	ldd	r23, Z+1	; 0x01
     a7a:	89 2f       	mov	r24, r25
     a7c:	99 0f       	add	r25, r25
     a7e:	99 0b       	sbc	r25, r25
     a80:	67 2f       	mov	r22, r23
     a82:	77 0f       	add	r23, r23
     a84:	77 0b       	sbc	r23, r23
     a86:	8f 5f       	subi	r24, 0xFF	; 255
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i]),0);
     a8e:	f7 01       	movw	r30, r14
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	f8 01       	movw	r30, r16
     a96:	60 81       	ld	r22, Z
     a98:	71 81       	ldd	r23, Z+1	; 0x01
     a9a:	89 2f       	mov	r24, r25
     a9c:	99 0f       	add	r25, r25
     a9e:	99 0b       	sbc	r25, r25
     aa0:	67 2f       	mov	r22, r23
     aa2:	77 0f       	add	r23, r23
     aa4:	77 0b       	sbc	r23, r23
     aa6:	8e 5f       	subi	r24, 0xFE	; 254
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+1,0);
     aae:	f7 01       	movw	r30, r14
     ab0:	80 81       	ld	r24, Z
     ab2:	91 81       	ldd	r25, Z+1	; 0x01
     ab4:	f8 01       	movw	r30, r16
     ab6:	60 81       	ld	r22, Z
     ab8:	71 81       	ldd	r23, Z+1	; 0x01
     aba:	89 2f       	mov	r24, r25
     abc:	99 0f       	add	r25, r25
     abe:	99 0b       	sbc	r25, r25
     ac0:	67 2f       	mov	r22, r23
     ac2:	77 0f       	add	r23, r23
     ac4:	77 0b       	sbc	r23, r23
     ac6:	6f 5f       	subi	r22, 0xFF	; 255
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+2,0);
     ace:	f7 01       	movw	r30, r14
     ad0:	80 81       	ld	r24, Z
     ad2:	91 81       	ldd	r25, Z+1	; 0x01
     ad4:	f8 01       	movw	r30, r16
     ad6:	60 81       	ld	r22, Z
     ad8:	71 81       	ldd	r23, Z+1	; 0x01
     ada:	89 2f       	mov	r24, r25
     adc:	99 0f       	add	r25, r25
     ade:	99 0b       	sbc	r25, r25
     ae0:	67 2f       	mov	r22, r23
     ae2:	77 0f       	add	r23, r23
     ae4:	77 0b       	sbc	r23, r23
     ae6:	6e 5f       	subi	r22, 0xFE	; 254
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+1,0);
     aee:	f7 01       	movw	r30, r14
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	f8 01       	movw	r30, r16
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	89 2f       	mov	r24, r25
     afc:	99 0f       	add	r25, r25
     afe:	99 0b       	sbc	r25, r25
     b00:	67 2f       	mov	r22, r23
     b02:	77 0f       	add	r23, r23
     b04:	77 0b       	sbc	r23, r23
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	8d 5f       	subi	r24, 0xFD	; 253
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+2,0);
     b10:	f7 01       	movw	r30, r14
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	f8 01       	movw	r30, r16
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	89 2f       	mov	r24, r25
     b1e:	99 0f       	add	r25, r25
     b20:	99 0b       	sbc	r25, r25
     b22:	67 2f       	mov	r22, r23
     b24:	77 0f       	add	r23, r23
     b26:	77 0b       	sbc	r23, r23
     b28:	6e 5f       	subi	r22, 0xFE	; 254
     b2a:	8d 5f       	subi	r24, 0xFD	; 253
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i])+3,0);
     b32:	f7 01       	movw	r30, r14
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	f8 01       	movw	r30, r16
     b3a:	60 81       	ld	r22, Z
     b3c:	71 81       	ldd	r23, Z+1	; 0x01
     b3e:	89 2f       	mov	r24, r25
     b40:	99 0f       	add	r25, r25
     b42:	99 0b       	sbc	r25, r25
     b44:	67 2f       	mov	r22, r23
     b46:	77 0f       	add	r23, r23
     b48:	77 0b       	sbc	r23, r23
     b4a:	6d 5f       	subi	r22, 0xFD	; 253
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i])+3,0);
     b54:	f7 01       	movw	r30, r14
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	f8 01       	movw	r30, r16
     b5c:	60 81       	ld	r22, Z
     b5e:	71 81       	ldd	r23, Z+1	; 0x01
     b60:	89 2f       	mov	r24, r25
     b62:	99 0f       	add	r25, r25
     b64:	99 0b       	sbc	r25, r25
     b66:	67 2f       	mov	r22, r23
     b68:	77 0f       	add	r23, r23
     b6a:	77 0b       	sbc	r23, r23
     b6c:	6d 5f       	subi	r22, 0xFD	; 253
     b6e:	8e 5f       	subi	r24, 0xFE	; 254
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
end
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <place_ball>:

void place_ball(int i)
begin
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i]),1);
     b88:	8c 01       	movw	r16, r24
     b8a:	00 0f       	add	r16, r16
     b8c:	11 1f       	adc	r17, r17
     b8e:	fa e7       	ldi	r31, 0x7A	; 122
     b90:	ef 2e       	mov	r14, r31
     b92:	f5 e0       	ldi	r31, 0x05	; 5
     b94:	ff 2e       	mov	r15, r31
     b96:	e0 0e       	add	r14, r16
     b98:	f1 1e       	adc	r15, r17
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	08 51       	subi	r16, 0x18	; 24
     ba2:	1a 4f       	sbci	r17, 0xFA	; 250
     ba4:	f8 01       	movw	r30, r16
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	89 2f       	mov	r24, r25
     bac:	99 0f       	add	r25, r25
     bae:	99 0b       	sbc	r25, r25
     bb0:	67 2f       	mov	r22, r23
     bb2:	77 0f       	add	r23, r23
     bb4:	77 0b       	sbc	r23, r23
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i]),1);
     bbe:	f7 01       	movw	r30, r14
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	f8 01       	movw	r30, r16
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	89 2f       	mov	r24, r25
     bcc:	99 0f       	add	r25, r25
     bce:	99 0b       	sbc	r25, r25
     bd0:	67 2f       	mov	r22, r23
     bd2:	77 0f       	add	r23, r23
     bd4:	77 0b       	sbc	r23, r23
     bd6:	8e 5f       	subi	r24, 0xFE	; 254
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+1,1);
     bde:	f7 01       	movw	r30, r14
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	f8 01       	movw	r30, r16
     be6:	60 81       	ld	r22, Z
     be8:	71 81       	ldd	r23, Z+1	; 0x01
     bea:	89 2f       	mov	r24, r25
     bec:	99 0f       	add	r25, r25
     bee:	99 0b       	sbc	r25, r25
     bf0:	67 2f       	mov	r22, r23
     bf2:	77 0f       	add	r23, r23
     bf4:	77 0b       	sbc	r23, r23
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i]),fix2int(y_pos[i])+2,1);
     bfe:	f7 01       	movw	r30, r14
     c00:	80 81       	ld	r24, Z
     c02:	91 81       	ldd	r25, Z+1	; 0x01
     c04:	f8 01       	movw	r30, r16
     c06:	60 81       	ld	r22, Z
     c08:	71 81       	ldd	r23, Z+1	; 0x01
     c0a:	89 2f       	mov	r24, r25
     c0c:	99 0f       	add	r25, r25
     c0e:	99 0b       	sbc	r25, r25
     c10:	67 2f       	mov	r22, r23
     c12:	77 0f       	add	r23, r23
     c14:	77 0b       	sbc	r23, r23
     c16:	6e 5f       	subi	r22, 0xFE	; 254
     c18:	41 e0       	ldi	r20, 0x01	; 1
     c1a:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+1,1);
     c1e:	f7 01       	movw	r30, r14
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	f8 01       	movw	r30, r16
     c26:	60 81       	ld	r22, Z
     c28:	71 81       	ldd	r23, Z+1	; 0x01
     c2a:	89 2f       	mov	r24, r25
     c2c:	99 0f       	add	r25, r25
     c2e:	99 0b       	sbc	r25, r25
     c30:	67 2f       	mov	r22, r23
     c32:	77 0f       	add	r23, r23
     c34:	77 0b       	sbc	r23, r23
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	8d 5f       	subi	r24, 0xFD	; 253
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+3,fix2int(y_pos[i])+2,1);
     c40:	f7 01       	movw	r30, r14
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	f8 01       	movw	r30, r16
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	89 2f       	mov	r24, r25
     c4e:	99 0f       	add	r25, r25
     c50:	99 0b       	sbc	r25, r25
     c52:	67 2f       	mov	r22, r23
     c54:	77 0f       	add	r23, r23
     c56:	77 0b       	sbc	r23, r23
     c58:	6e 5f       	subi	r22, 0xFE	; 254
     c5a:	8d 5f       	subi	r24, 0xFD	; 253
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+1,fix2int(y_pos[i])+3,1);
     c62:	f7 01       	movw	r30, r14
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	f8 01       	movw	r30, r16
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	89 2f       	mov	r24, r25
     c70:	99 0f       	add	r25, r25
     c72:	99 0b       	sbc	r25, r25
     c74:	67 2f       	mov	r22, r23
     c76:	77 0f       	add	r23, r23
     c78:	77 0b       	sbc	r23, r23
     c7a:	6d 5f       	subi	r22, 0xFD	; 253
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(fix2int(x_pos[i])+2,fix2int(y_pos[i])+3,1);
     c84:	f7 01       	movw	r30, r14
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	f8 01       	movw	r30, r16
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	89 2f       	mov	r24, r25
     c92:	99 0f       	add	r25, r25
     c94:	99 0b       	sbc	r25, r25
     c96:	67 2f       	mov	r22, r23
     c98:	77 0f       	add	r23, r23
     c9a:	77 0b       	sbc	r23, r23
     c9c:	6d 5f       	subi	r22, 0xFD	; 253
     c9e:	8e 5f       	subi	r24, 0xFE	; 254
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
end
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	08 95       	ret

00000cb0 <remove_oldest_ball>:

char remove_oldest_ball(void)
begin
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	ff 24       	eor	r15, r15
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char i = 0;
	unsigned char j = 0;
	unsigned int max = 0;
	for (i=0;i<Max_num_balls;i++)
	begin
		if(age[i]> max)
     cc0:	f9 01       	movw	r30, r18
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e8 5d       	subi	r30, 0xD8	; 216
     cc8:	fe 4f       	sbci	r31, 0xFE	; 254
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	48 17       	cp	r20, r24
     cd0:	59 07       	cpc	r21, r25
     cd2:	18 f4       	brcc	.+6      	; 0xcda <remove_oldest_ball+0x2a>
		begin
			j = i;
			max = age[i];
     cd4:	40 81       	ld	r20, Z
     cd6:	51 81       	ldd	r21, Z+1	; 0x01
     cd8:	f2 2e       	mov	r15, r18
     cda:	2f 5f       	subi	r18, 0xFF	; 255
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
char remove_oldest_ball(void)
begin
	unsigned char i = 0;
	unsigned char j = 0;
	unsigned int max = 0;
	for (i=0;i<Max_num_balls;i++)
     cde:	2f 30       	cpi	r18, 0x0F	; 15
     ce0:	31 05       	cpc	r19, r1
     ce2:	71 f7       	brne	.-36     	; 0xcc0 <remove_oldest_ball+0x10>
		begin
			j = i;
			max = age[i];
		end	
	end	
	remove_ball(j);
     ce4:	0f 2d       	mov	r16, r15
     ce6:	10 e0       	ldi	r17, 0x00	; 0
     ce8:	c8 01       	movw	r24, r16
     cea:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>
	is_on_screen[j] = 0;
     cee:	08 5b       	subi	r16, 0xB8	; 184
     cf0:	1e 4f       	sbci	r17, 0xFE	; 254
     cf2:	f8 01       	movw	r30, r16
     cf4:	10 82       	st	Z, r1
	score++;
     cf6:	80 91 68 05 	lds	r24, 0x0568
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	80 93 68 05 	sts	0x0568, r24
	return j;
end
     d00:	8f 2d       	mov	r24, r15
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	08 95       	ret

00000d0a <add_ball>:
// adds a ball to the screen
void add_ball(void)
begin
	int temp = 0;
	unsigned char i = 0;
	if(is_on_screen[i])
     d0a:	80 91 48 01 	lds	r24, 0x0148
     d0e:	88 23       	and	r24, r24
     d10:	11 f4       	brne	.+4      	; 0xd16 <add_ball+0xc>
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	19 c0       	rjmp	.+50     	; 0xd48 <add_ball+0x3e>
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <add_ball+0x12>
	begin
		i++;
		while(is_on_screen[i] & i<(Max_num_balls-1)) i++;
     d1a:	9f 5f       	subi	r25, 0xFF	; 255
     d1c:	e9 2f       	mov	r30, r25
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	e8 5b       	subi	r30, 0xB8	; 184
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 81       	ld	r24, Z
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	9e 30       	cpi	r25, 0x0E	; 14
     d30:	10 f4       	brcc	.+4      	; 0xd36 <add_ball+0x2c>
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	24 23       	and	r18, r20
     d38:	35 23       	and	r19, r21
     d3a:	23 2b       	or	r18, r19
     d3c:	71 f7       	brne	.-36     	; 0xd1a <add_ball+0x10>
		if(i==(Max_num_balls-1))  i = remove_oldest_ball(); 
     d3e:	9e 30       	cpi	r25, 0x0E	; 14
     d40:	19 f4       	brne	.+6      	; 0xd48 <add_ball+0x3e>
     d42:	0e 94 58 06 	call	0xcb0	; 0xcb0 <remove_oldest_ball>
     d46:	98 2f       	mov	r25, r24
	end

	age[i] = 0;
     d48:	89 2f       	mov	r24, r25
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	dc 01       	movw	r26, r24
     d4e:	aa 0f       	add	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	fd 01       	movw	r30, r26
     d54:	e8 5d       	subi	r30, 0xD8	; 216
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	11 82       	std	Z+1, r1	; 0x01
     d5a:	10 82       	st	Z, r1
	is_on_screen[i] = 1;
     d5c:	fc 01       	movw	r30, r24
     d5e:	e8 5b       	subi	r30, 0xB8	; 184
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	20 83       	st	Z, r18
	x_pos[i] = int2fix(120);
     d66:	fd 01       	movw	r30, r26
     d68:	e6 58       	subi	r30, 0x86	; 134
     d6a:	fa 4f       	sbci	r31, 0xFA	; 250
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	38 e7       	ldi	r19, 0x78	; 120
     d70:	31 83       	std	Z+1, r19	; 0x01
     d72:	20 83       	st	Z, r18
	y_pos[i] = int2fix(14);
     d74:	fd 01       	movw	r30, r26
     d76:	e8 51       	subi	r30, 0x18	; 24
     d78:	fa 4f       	sbci	r31, 0xFA	; 250
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	3e e0       	ldi	r19, 0x0E	; 14
     d7e:	31 83       	std	Z+1, r19	; 0x01
     d80:	20 83       	st	Z, r18
	x_velocity[i] = 0xff80;//xe200;
     d82:	fd 01       	movw	r30, r26
     d84:	e5 55       	subi	r30, 0x55	; 85
     d86:	fa 4f       	sbci	r31, 0xFA	; 250
     d88:	20 e8       	ldi	r18, 0x80	; 128
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	31 83       	std	Z+1, r19	; 0x01
     d8e:	20 83       	st	Z, r18
	temp = time_elapsed_HS % 8; 
     d90:	20 91 69 05 	lds	r18, 0x0569
	y_velocity[i] = int2fix(temp)>>2;//((signed int)time_elapsed_HS)<<2;
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	27 70       	andi	r18, 0x07	; 7
     d98:	30 70       	andi	r19, 0x00	; 0
     d9a:	46 e0       	ldi	r20, 0x06	; 6
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	4a 95       	dec	r20
     da2:	e1 f7       	brne	.-8      	; 0xd9c <add_ball+0x92>
     da4:	a7 53       	subi	r26, 0x37	; 55
     da6:	ba 4f       	sbci	r27, 0xFA	; 250
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	3c 93       	st	X, r19
     dac:	2e 93       	st	-X, r18
	place_ball(i);
     dae:	0e 94 c0 05 	call	0xb80	; 0xb80 <place_ball>
end
     db2:	08 95       	ret

00000db4 <main>:

int main(void)
begin
     db4:	2f 92       	push	r2
     db6:	3f 92       	push	r3
     db8:	4f 92       	push	r4
     dba:	5f 92       	push	r5
     dbc:	6f 92       	push	r6
     dbe:	7f 92       	push	r7
     dc0:	8f 92       	push	r8
     dc2:	9f 92       	push	r9
     dc4:	af 92       	push	r10
     dc6:	bf 92       	push	r11
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	69 97       	sbiw	r28, 0x19	; 25
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
	unsigned char score_str[3];

	int test = 0;

	
	initialize();
     de8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <initialize>
	
	video_line(width,0,width,height,1);
     dec:	8f e7       	ldi	r24, 0x7F	; 127
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	2f e3       	ldi	r18, 0x3F	; 63
     df4:	01 e0       	ldi	r16, 0x01	; 1
     df6:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
	video_line(0,0,width,0,1);
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	4f e7       	ldi	r20, 0x7F	; 127
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
	video_line(0,height,width-17,height,1);
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	6f e3       	ldi	r22, 0x3F	; 63
     e0a:	4e e6       	ldi	r20, 0x6E	; 110
     e0c:	2f e3       	ldi	r18, 0x3F	; 63
     e0e:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
	video_pt(50,1,1);
     e12:	82 e3       	ldi	r24, 0x32	; 50
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(75,1,1);
     e1c:	8b e4       	ldi	r24, 0x4B	; 75
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(50,height-1,1);
     e26:	82 e3       	ldi	r24, 0x32	; 50
     e28:	6e e3       	ldi	r22, 0x3E	; 62
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
	video_pt(75,height-1,1);
     e30:	8b e4       	ldi	r24, 0x4B	; 75
     e32:	6e e3       	ldi	r22, 0x3E	; 62
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
     e3a:	02 e0       	ldi	r16, 0x02	; 2
     e3c:	f0 2e       	mov	r15, r16
     e3e:	1a 86       	std	Y+10, r1	; 0x0a
     e40:	19 86       	std	Y+9, r1	; 0x09
     e42:	ac c2       	rjmp	.+1368   	; 0x139c <main+0x5e8>


	
	while(time_elapsed_HS<=200)
	begin
		if (LineCount == ScreenBot)
     e44:	80 91 a9 05 	lds	r24, 0x05A9
     e48:	90 91 aa 05 	lds	r25, 0x05AA
     e4c:	8d 36       	cpi	r24, 0x6D	; 109
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <main+0xa0>
     e52:	a4 c2       	rjmp	.+1352   	; 0x139c <main+0x5e8>
		begin

			// 1. Timing and ball addition
			frame_count++;
     e54:	29 85       	ldd	r18, Y+9	; 0x09
     e56:	3a 85       	ldd	r19, Y+10	; 0x0a
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	3a 87       	std	Y+10, r19	; 0x0a
     e5e:	29 87       	std	Y+9, r18	; 0x09
			if (frame_count >= 30)
     e60:	2e 31       	cpi	r18, 0x1E	; 30
     e62:	31 05       	cpc	r19, r1
     e64:	0c f4       	brge	.+2      	; 0xe68 <main+0xb4>
     e66:	54 c0       	rjmp	.+168    	; 0xf10 <main+0x15c>
			begin
				add_ball();
     e68:	0e 94 85 06 	call	0xd0a	; 0xd0a <add_ball>
				frame_count = 0;
				time_elapsed_HS++; 
     e6c:	80 91 69 05 	lds	r24, 0x0569
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	80 93 69 05 	sts	0x0569, r24
				sprintf(time_str, "%3d", (time_elapsed_HS>>1));
     e76:	80 91 69 05 	lds	r24, 0x0569
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <main+0xc8>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <main+0xca>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <main+0xcc>
     e80:	ed b7       	in	r30, 0x3d	; 61
     e82:	fe b7       	in	r31, 0x3e	; 62
     e84:	31 96       	adiw	r30, 0x01	; 1
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	2c 0f       	add	r18, r28
     e8c:	3d 1f       	adc	r19, r29
     e8e:	ad b7       	in	r26, 0x3d	; 61
     e90:	be b7       	in	r27, 0x3e	; 62
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	3c 93       	st	X, r19
     e96:	2e 93       	st	-X, r18
     e98:	11 97       	sbiw	r26, 0x01	; 1
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b1 e0       	ldi	r27, 0x01	; 1
     e9e:	b3 83       	std	Z+3, r27	; 0x03
     ea0:	a2 83       	std	Z+2, r26	; 0x02
     ea2:	86 95       	lsr	r24
     ea4:	84 83       	std	Z+4, r24	; 0x04
     ea6:	15 82       	std	Z+5, r1	; 0x05
     ea8:	0e 94 01 0c 	call	0x1802	; 0x1802 <sprintf>
				video_puts(110,57,time_str);
     eac:	ed b7       	in	r30, 0x3d	; 61
     eae:	fe b7       	in	r31, 0x3e	; 62
     eb0:	36 96       	adiw	r30, 0x06	; 6
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	fe bf       	out	0x3e, r31	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	ed bf       	out	0x3d, r30	; 61
     ebc:	8e e6       	ldi	r24, 0x6E	; 110
     ebe:	69 e3       	ldi	r22, 0x39	; 57
     ec0:	ae 01       	movw	r20, r28
     ec2:	4f 5f       	subi	r20, 0xFF	; 255
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
				video_line(0,0,width,0,1);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	4f e7       	ldi	r20, 0x7F	; 127
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	01 e0       	ldi	r16, 0x01	; 1
     ed4:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_line(0,height,width-17,height,1);
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	6f e3       	ldi	r22, 0x3F	; 63
     edc:	4e e6       	ldi	r20, 0x6E	; 110
     ede:	2f e3       	ldi	r18, 0x3F	; 63
     ee0:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_pt(50,1,1);
     ee4:	82 e3       	ldi	r24, 0x32	; 50
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
				video_pt(75,1,1);
     eee:	8b e4       	ldi	r24, 0x4B	; 75
     ef0:	61 e0       	ldi	r22, 0x01	; 1
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
				video_pt(50,height-1,1);
     ef8:	82 e3       	ldi	r24, 0x32	; 50
     efa:	6e e3       	ldi	r22, 0x3E	; 62
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
				video_pt(75,height-1,1);
     f02:	8b e4       	ldi	r24, 0x4B	; 75
     f04:	6e e3       	ldi	r22, 0x3E	; 62
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 aa 03 	call	0x754	; 0x754 <video_pt>
     f0c:	1a 86       	std	Y+10, r1	; 0x0a
     f0e:	19 86       	std	Y+9, r1	; 0x09
			end

			// 2. update positions for the paddle
				video_line(2,top_of_paddle,2,top_of_paddle+8,0);
     f10:	1f 2d       	mov	r17, r15
     f12:	18 5f       	subi	r17, 0xF8	; 248
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	6f 2d       	mov	r22, r15
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	21 2f       	mov	r18, r17
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,0);
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	6f 2d       	mov	r22, r15
     f26:	43 e0       	ldi	r20, 0x03	; 3
     f28:	21 2f       	mov	r18, r17
     f2a:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				prev_top = top_of_paddle;
				top_of_paddle =(ADCH*53/255)+1;
     f2e:	80 91 79 00 	lds	r24, 0x0079
     f32:	f5 e3       	ldi	r31, 0x35	; 53
     f34:	8f 9f       	mul	r24, r31
     f36:	c0 01       	movw	r24, r0
     f38:	11 24       	eor	r1, r1
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__divmodhi4>
     f42:	16 2f       	mov	r17, r22
     f44:	26 2f       	mov	r18, r22
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	2b 87       	std	Y+11, r18	; 0x0b
				v_paddle_y = top_of_paddle-prev_top;
     f4a:	82 2f       	mov	r24, r18
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9f 87       	std	Y+15, r25	; 0x0f
     f50:	8e 87       	std	Y+14, r24	; 0x0e
				video_line(2,top_of_paddle,2,top_of_paddle+8,1);
     f52:	17 5f       	subi	r17, 0xF7	; 247
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	62 2f       	mov	r22, r18
     f58:	42 e0       	ldi	r20, 0x02	; 2
     f5a:	21 2f       	mov	r18, r17
     f5c:	01 e0       	ldi	r16, 0x01	; 1
     f5e:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	6b 85       	ldd	r22, Y+11	; 0x0b
     f66:	43 e0       	ldi	r20, 0x03	; 3
     f68:	21 2f       	mov	r18, r17
     f6a:	0e 94 de 03 	call	0x7bc	; 0x7bc <video_line>


// performs an ADC on the selected channel.
void ADC_start_measure(char channel)
begin
	ADMUX = 0;
     f6e:	10 92 7c 00 	sts	0x007C, r1
	ADMUX = (1<<REFS0) + (1<<ADLAR) + channel;
     f72:	a0 e6       	ldi	r26, 0x60	; 96
     f74:	a0 93 7c 00 	sts	0x007C, r26
	ADCSRA |= (1<<ADSC);
     f78:	80 91 7a 00 	lds	r24, 0x007A
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	80 93 7a 00 	sts	0x007A, r24
					if((fix2int(x_pos[i]) <= 6)
						&& ((fix2int(y_pos[i])-top_of_paddle) > -4) 
						&& ((fix2int(y_pos[i])-top_of_paddle) < 9))
					begin
						x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
						y_velocity[i] += int2fix(v_paddle_y);
     f82:	8e 85       	ldd	r24, Y+14	; 0x0e
     f84:	9f 85       	ldd	r25, Y+15	; 0x0f
     f86:	8f 19       	sub	r24, r15
     f88:	91 09       	sbc	r25, r1
     f8a:	f8 2f       	mov	r31, r24
     f8c:	ee 27       	eor	r30, r30
     f8e:	fd 87       	std	Y+13, r31	; 0x0d
     f90:	ec 87       	std	Y+12, r30	; 0x0c
     f92:	22 24       	eor	r2, r2
     f94:	33 24       	eor	r3, r3

		
			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
			begin
				if(!is_on_screen[i]) continue;
     f96:	f1 01       	movw	r30, r2
     f98:	e8 5b       	subi	r30, 0xB8	; 184
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <main+0x1f0>
     fa2:	ca c1       	rjmp	.+916    	; 0x1338 <main+0x584>
					age[i]++;
     fa4:	c1 01       	movw	r24, r2
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	fc 01       	movw	r30, r24
     fac:	e8 5d       	subi	r30, 0xD8	; 216
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	20 81       	ld	r18, Z
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	31 83       	std	Z+1, r19	; 0x01
     fba:	20 83       	st	Z, r18
     fbc:	91 01       	movw	r18, r2
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	38 87       	std	Y+8, r19	; 0x08
     fc4:	2f 83       	std	Y+7, r18	; 0x07
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						//if(!is_on_screen[j]) continue;
						if(i == j) continue; // don't consider the situation for one ball.
						
						rij_x = x_pos[i] - x_pos[j];
     fc6:	dc 01       	movw	r26, r24
     fc8:	a6 58       	subi	r26, 0x86	; 134
     fca:	ba 4f       	sbci	r27, 0xFA	; 250
     fcc:	b9 8b       	std	Y+17, r27	; 0x11
     fce:	a8 8b       	std	Y+16, r26	; 0x10
						rij_y = y_pos[i] - y_pos[j];
     fd0:	fc 01       	movw	r30, r24
     fd2:	e8 51       	subi	r30, 0x18	; 24
     fd4:	fa 4f       	sbci	r31, 0xFA	; 250
     fd6:	fb 8b       	std	Y+19, r31	; 0x13
     fd8:	ea 8b       	std	Y+18, r30	; 0x12
							 	begin
									//if(//(multfix(rij_x,rij_x) + multfix(rij_y,rij_y) <= 16) &&
									//	 hit_count[i]==0
									//	&& hit_count[j]==0)// check collision here)<4))
									//begin
										vij_x = x_velocity[i] - x_velocity[j];
     fda:	9c 01       	movw	r18, r24
     fdc:	25 55       	subi	r18, 0x55	; 85
     fde:	3a 4f       	sbci	r19, 0xFA	; 250
     fe0:	3d 8b       	std	Y+21, r19	; 0x15
     fe2:	2c 8b       	std	Y+20, r18	; 0x14
										vij_y = y_velocity[i] - y_velocity[j];
     fe4:	dc 01       	movw	r26, r24
     fe6:	a7 53       	subi	r26, 0x37	; 55
     fe8:	ba 4f       	sbci	r27, 0xFA	; 250
     fea:	bf 8b       	std	Y+23, r27	; 0x17
     fec:	ae 8b       	std	Y+22, r26	; 0x16
										x_velocity[i] += delta_x_velocity;
										y_velocity[i] += delta_y_velocity; 
										x_velocity[j] -= delta_x_velocity;
										y_velocity[j] -= delta_y_velocity; 

										hit_count[i] = 5;
     fee:	f1 01       	movw	r30, r2
     ff0:	e6 59       	subi	r30, 0x96	; 150
     ff2:	fa 4f       	sbci	r31, 0xFA	; 250
     ff4:	f9 8f       	std	Y+25, r31	; 0x19
     ff6:	e8 8f       	std	Y+24, r30	; 0x18
					
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
					begin
						//if(!is_on_screen[j]) continue;
						if(i == j) continue; // don't consider the situation for one ball.
     ff8:	2f 81       	ldd	r18, Y+7	; 0x07
     ffa:	38 85       	ldd	r19, Y+8	; 0x08
     ffc:	22 16       	cp	r2, r18
     ffe:	33 06       	cpc	r3, r19
    1000:	09 f4       	brne	.+2      	; 0x1004 <main+0x250>
    1002:	91 c0       	rjmp	.+290    	; 0x1126 <main+0x372>
						
						rij_x = x_pos[i] - x_pos[j];
    1004:	a8 89       	ldd	r26, Y+16	; 0x10
    1006:	b9 89       	ldd	r27, Y+17	; 0x11
    1008:	4d 91       	ld	r20, X+
    100a:	5c 91       	ld	r21, X
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	f9 01       	movw	r30, r18
    1012:	e6 58       	subi	r30, 0x86	; 134
    1014:	fa 4f       	sbci	r31, 0xFA	; 250
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	48 1b       	sub	r20, r24
    101c:	59 0b       	sbc	r21, r25
						rij_y = y_pos[i] - y_pos[j];
    101e:	ea 89       	ldd	r30, Y+18	; 0x12
    1020:	fb 89       	ldd	r31, Y+19	; 0x13
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	f9 01       	movw	r30, r18
    1028:	e8 51       	subi	r30, 0x18	; 24
    102a:	fa 4f       	sbci	r31, 0xFA	; 250
    102c:	01 90       	ld	r0, Z+
    102e:	f0 81       	ld	r31, Z
    1030:	e0 2d       	mov	r30, r0
							if (abs(rij_x) <= 0x0400)
    1032:	ca 01       	movw	r24, r20
    1034:	80 50       	subi	r24, 0x00	; 0
    1036:	9c 4f       	sbci	r25, 0xFC	; 252
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	98 40       	sbci	r25, 0x08	; 8
    103c:	08 f0       	brcs	.+2      	; 0x1040 <main+0x28c>
    103e:	73 c0       	rjmp	.+230    	; 0x1126 <main+0x372>
					begin
						//if(!is_on_screen[j]) continue;
						if(i == j) continue; // don't consider the situation for one ball.
						
						rij_x = x_pos[i] - x_pos[j];
						rij_y = y_pos[i] - y_pos[j];
    1040:	6b 01       	movw	r12, r22
    1042:	ce 1a       	sub	r12, r30
    1044:	df 0a       	sbc	r13, r31
							if (abs(rij_x) <= 0x0400)
							begin
							 	if (abs(rij_y) <= 0x0400)
    1046:	c6 01       	movw	r24, r12
    1048:	80 50       	subi	r24, 0x00	; 0
    104a:	9c 4f       	sbci	r25, 0xFC	; 252
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	98 40       	sbci	r25, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <main+0x2a0>
    1052:	69 c0       	rjmp	.+210    	; 0x1126 <main+0x372>
							 	begin
									//if(//(multfix(rij_x,rij_x) + multfix(rij_y,rij_y) <= 16) &&
									//	 hit_count[i]==0
									//	&& hit_count[j]==0)// check collision here)<4))
									//begin
										vij_x = x_velocity[i] - x_velocity[j];
    1054:	ec 89       	ldd	r30, Y+20	; 0x14
    1056:	fd 89       	ldd	r31, Y+21	; 0x15
    1058:	60 81       	ld	r22, Z
    105a:	71 81       	ldd	r23, Z+1	; 0x01
    105c:	fb ea       	ldi	r31, 0xAB	; 171
    105e:	6f 2e       	mov	r6, r31
    1060:	f5 e0       	ldi	r31, 0x05	; 5
    1062:	7f 2e       	mov	r7, r31
    1064:	62 0e       	add	r6, r18
    1066:	73 1e       	adc	r7, r19
    1068:	d3 01       	movw	r26, r6
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
										vij_y = y_velocity[i] - y_velocity[j];
    106e:	ee 89       	ldd	r30, Y+22	; 0x16
    1070:	ff 89       	ldd	r31, Y+23	; 0x17
    1072:	e0 80       	ld	r14, Z
    1074:	f1 80       	ldd	r15, Z+1	; 0x01
    1076:	e9 ec       	ldi	r30, 0xC9	; 201
    1078:	4e 2e       	mov	r4, r30
    107a:	e5 e0       	ldi	r30, 0x05	; 5
    107c:	5e 2e       	mov	r5, r30
    107e:	42 0e       	add	r4, r18
    1080:	53 1e       	adc	r5, r19
    1082:	d2 01       	movw	r26, r4
    1084:	ad 90       	ld	r10, X+
    1086:	bc 90       	ld	r11, X
										//collision code here
										dot_prod = multfix(rij_x>>2,(vij_x)) + multfix(rij_y>>2,(vij_y));
    1088:	4a 01       	movw	r8, r20
    108a:	95 94       	asr	r9
    108c:	87 94       	ror	r8
    108e:	95 94       	asr	r9
    1090:	87 94       	ror	r8
    1092:	68 1b       	sub	r22, r24
    1094:	79 0b       	sbc	r23, r25
    1096:	c4 01       	movw	r24, r8
    1098:	0e 94 cc 0b 	call	0x1798	; 0x1798 <multfix>
    109c:	8c 01       	movw	r16, r24
    109e:	d5 94       	asr	r13
    10a0:	c7 94       	ror	r12
    10a2:	d5 94       	asr	r13
    10a4:	c7 94       	ror	r12
    10a6:	ea 18       	sub	r14, r10
    10a8:	fb 08       	sbc	r15, r11
    10aa:	c6 01       	movw	r24, r12
    10ac:	b7 01       	movw	r22, r14
    10ae:	0e 94 cc 0b 	call	0x1798	; 0x1798 <multfix>
    10b2:	08 0f       	add	r16, r24
    10b4:	19 1f       	adc	r17, r25
										delta_x_velocity = multfix(rij_x>>2,(dot_prod))>>1;
    10b6:	c4 01       	movw	r24, r8
    10b8:	b8 01       	movw	r22, r16
    10ba:	0e 94 cc 0b 	call	0x1798	; 0x1798 <multfix>
    10be:	7c 01       	movw	r14, r24
    10c0:	f5 94       	asr	r15
    10c2:	e7 94       	ror	r14
										delta_y_velocity = multfix(rij_y>>2,(dot_prod))>>1;
    10c4:	c6 01       	movw	r24, r12
    10c6:	b8 01       	movw	r22, r16
    10c8:	0e 94 cc 0b 	call	0x1798	; 0x1798 <multfix>
    10cc:	95 95       	asr	r25
    10ce:	87 95       	ror	r24
										x_velocity[i] += delta_x_velocity;
    10d0:	ec 89       	ldd	r30, Y+20	; 0x14
    10d2:	fd 89       	ldd	r31, Y+21	; 0x15
    10d4:	20 81       	ld	r18, Z
    10d6:	31 81       	ldd	r19, Z+1	; 0x01
    10d8:	2e 0d       	add	r18, r14
    10da:	3f 1d       	adc	r19, r15
    10dc:	31 83       	std	Z+1, r19	; 0x01
    10de:	20 83       	st	Z, r18
										y_velocity[i] += delta_y_velocity; 
    10e0:	ae 89       	ldd	r26, Y+22	; 0x16
    10e2:	bf 89       	ldd	r27, Y+23	; 0x17
    10e4:	2d 91       	ld	r18, X+
    10e6:	3c 91       	ld	r19, X
    10e8:	11 97       	sbiw	r26, 0x01	; 1
    10ea:	28 0f       	add	r18, r24
    10ec:	39 1f       	adc	r19, r25
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	3c 93       	st	X, r19
    10f2:	2e 93       	st	-X, r18
										x_velocity[j] -= delta_x_velocity;
    10f4:	f3 01       	movw	r30, r6
    10f6:	20 81       	ld	r18, Z
    10f8:	31 81       	ldd	r19, Z+1	; 0x01
    10fa:	2e 19       	sub	r18, r14
    10fc:	3f 09       	sbc	r19, r15
    10fe:	31 83       	std	Z+1, r19	; 0x01
    1100:	20 83       	st	Z, r18
										y_velocity[j] -= delta_y_velocity; 
    1102:	d2 01       	movw	r26, r4
    1104:	2d 91       	ld	r18, X+
    1106:	3c 91       	ld	r19, X
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	28 1b       	sub	r18, r24
    110c:	39 0b       	sbc	r19, r25
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	3c 93       	st	X, r19
    1112:	2e 93       	st	-X, r18

										hit_count[i] = 5;
    1114:	25 e0       	ldi	r18, 0x05	; 5
    1116:	e8 8d       	ldd	r30, Y+24	; 0x18
    1118:	f9 8d       	ldd	r31, Y+25	; 0x19
    111a:	20 83       	st	Z, r18
										hit_count[j] = 5;
    111c:	ef 81       	ldd	r30, Y+7	; 0x07
    111e:	f8 85       	ldd	r31, Y+8	; 0x08
    1120:	e6 59       	subi	r30, 0x96	; 150
    1122:	fa 4f       	sbci	r31, 0xFA	; 250
    1124:	20 83       	st	Z, r18
			begin
				if(!is_on_screen[i]) continue;
					age[i]++;
					
				// 3.1. check for collisions and update velocities (including drag)
					for(int j = i+1; j<Max_num_balls;j++)
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	98 87       	std	Y+8, r25	; 0x08
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	0f 97       	sbiw	r24, 0x0f	; 15
    1132:	0c f4       	brge	.+2      	; 0x1136 <main+0x382>
    1134:	61 cf       	rjmp	.-318    	; 0xff8 <main+0x244>
					// drag
					//x_velocity[i] -= multfix(x_velocity[i],0x0001);
					//y_velocity[i] -= multfix(y_velocity[i],0x0001);

				
					if((fix2int(x_pos[i]) <= 6)
    1136:	71 01       	movw	r14, r2
    1138:	ee 0c       	add	r14, r14
    113a:	ff 1c       	adc	r15, r15
    113c:	f7 01       	movw	r30, r14
    113e:	e6 58       	subi	r30, 0x86	; 134
    1140:	fa 4f       	sbci	r31, 0xFA	; 250
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	89 2f       	mov	r24, r25
    1148:	99 0f       	add	r25, r25
    114a:	99 0b       	sbc	r25, r25
    114c:	87 30       	cpi	r24, 0x07	; 7
    114e:	c4 f5       	brge	.+112    	; 0x11c0 <main+0x40c>
    1150:	f7 01       	movw	r30, r14
    1152:	e8 51       	subi	r30, 0x18	; 24
    1154:	fa 4f       	sbci	r31, 0xFA	; 250
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	89 2f       	mov	r24, r25
    115c:	99 0f       	add	r25, r25
    115e:	99 0b       	sbc	r25, r25
    1160:	99 27       	eor	r25, r25
    1162:	87 fd       	sbrc	r24, 7
    1164:	90 95       	com	r25
    1166:	ae 85       	ldd	r26, Y+14	; 0x0e
    1168:	bf 85       	ldd	r27, Y+15	; 0x0f
    116a:	8a 1b       	sub	r24, r26
    116c:	9b 0b       	sbc	r25, r27
    116e:	8d 5f       	subi	r24, 0xFD	; 253
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	34 f1       	brlt	.+76     	; 0x11c0 <main+0x40c>
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	89 2f       	mov	r24, r25
    117a:	99 0f       	add	r25, r25
    117c:	99 0b       	sbc	r25, r25
    117e:	99 27       	eor	r25, r25
    1180:	87 fd       	sbrc	r24, 7
    1182:	90 95       	com	r25
    1184:	ee 85       	ldd	r30, Y+14	; 0x0e
    1186:	ff 85       	ldd	r31, Y+15	; 0x0f
    1188:	8e 1b       	sub	r24, r30
    118a:	9f 0b       	sbc	r25, r31
    118c:	09 97       	sbiw	r24, 0x09	; 9
    118e:	c4 f4       	brge	.+48     	; 0x11c0 <main+0x40c>
						&& ((fix2int(y_pos[i])-top_of_paddle) > -4) 
						&& ((fix2int(y_pos[i])-top_of_paddle) < 9))
					begin
						x_velocity[i] = multfix(x_velocity[i],int2fix(-1));
    1190:	87 01       	movw	r16, r14
    1192:	05 55       	subi	r16, 0x55	; 85
    1194:	1a 4f       	sbci	r17, 0xFA	; 250
    1196:	d8 01       	movw	r26, r16
    1198:	8d 91       	ld	r24, X+
    119a:	9c 91       	ld	r25, X
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	7f ef       	ldi	r23, 0xFF	; 255
    11a0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <multfix>
    11a4:	f8 01       	movw	r30, r16
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
						y_velocity[i] += int2fix(v_paddle_y);
    11aa:	f7 01       	movw	r30, r14
    11ac:	e7 53       	subi	r30, 0x37	; 55
    11ae:	fa 4f       	sbci	r31, 0xFA	; 250
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    11b8:	82 0f       	add	r24, r18
    11ba:	93 1f       	adc	r25, r19
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
					end
				
			// 3.2. Update position of balls

					remove_ball(i);
    11c0:	c1 01       	movw	r24, r2
    11c2:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>

					if(fix2int(x_pos[i])>=122)
    11c6:	91 01       	movw	r18, r2
    11c8:	22 0f       	add	r18, r18
    11ca:	33 1f       	adc	r19, r19
    11cc:	f9 01       	movw	r30, r18
    11ce:	e6 58       	subi	r30, 0x86	; 134
    11d0:	fa 4f       	sbci	r31, 0xFA	; 250
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	89 2f       	mov	r24, r25
    11d8:	99 0f       	add	r25, r25
    11da:	99 0b       	sbc	r25, r25
    11dc:	8a 37       	cpi	r24, 0x7A	; 122
    11de:	54 f0       	brlt	.+20     	; 0x11f4 <main+0x440>
					begin
						x_velocity[i] = -(x_velocity[i]);
    11e0:	f9 01       	movw	r30, r18
    11e2:	e5 55       	subi	r30, 0x55	; 85
    11e4:	fa 4f       	sbci	r31, 0xFA	; 250
    11e6:	80 81       	ld	r24, Z
    11e8:	91 81       	ldd	r25, Z+1	; 0x01
    11ea:	90 95       	com	r25
    11ec:	81 95       	neg	r24
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
						//hit_count[i] = 5;
					end
					if(fix2int(y_pos[i])<=3)
    11f4:	91 01       	movw	r18, r2
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	f9 01       	movw	r30, r18
    11fc:	e8 51       	subi	r30, 0x18	; 24
    11fe:	fa 4f       	sbci	r31, 0xFA	; 250
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	89 2f       	mov	r24, r25
    1206:	99 0f       	add	r25, r25
    1208:	99 0b       	sbc	r25, r25
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	54 f4       	brge	.+20     	; 0x1222 <main+0x46e>
					begin
						y_velocity[i] = -(y_velocity[i]);
    120e:	f9 01       	movw	r30, r18
    1210:	e7 53       	subi	r30, 0x37	; 55
    1212:	fa 4f       	sbci	r31, 0xFA	; 250
    1214:	80 81       	ld	r24, Z
    1216:	91 81       	ldd	r25, Z+1	; 0x01
    1218:	90 95       	com	r25
    121a:	81 95       	neg	r24
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
						//hit_count[i] = 5;
					end
					if(fix2int(y_pos[i])>=58)
    1222:	91 01       	movw	r18, r2
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	f9 01       	movw	r30, r18
    122a:	e8 51       	subi	r30, 0x18	; 24
    122c:	fa 4f       	sbci	r31, 0xFA	; 250
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	89 2f       	mov	r24, r25
    1234:	99 0f       	add	r25, r25
    1236:	99 0b       	sbc	r25, r25
    1238:	8a 33       	cpi	r24, 0x3A	; 58
    123a:	54 f0       	brlt	.+20     	; 0x1250 <main+0x49c>
					begin
						y_velocity[i] = -(y_velocity[i]);
    123c:	f9 01       	movw	r30, r18
    123e:	e7 53       	subi	r30, 0x37	; 55
    1240:	fa 4f       	sbci	r31, 0xFA	; 250
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	90 95       	com	r25
    1248:	81 95       	neg	r24
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
						//hit_count[i] = 5;
					end

					x_pos[i] += x_velocity[i];
    1250:	d1 01       	movw	r26, r2
    1252:	aa 0f       	add	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	ad 01       	movw	r20, r26
    1258:	46 58       	subi	r20, 0x86	; 134
    125a:	5a 4f       	sbci	r21, 0xFA	; 250
    125c:	fa 01       	movw	r30, r20
    125e:	20 81       	ld	r18, Z
    1260:	31 81       	ldd	r19, Z+1	; 0x01
    1262:	fd 01       	movw	r30, r26
    1264:	e5 55       	subi	r30, 0x55	; 85
    1266:	fa 4f       	sbci	r31, 0xFA	; 250
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	fa 01       	movw	r30, r20
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
					y_pos[i] += y_velocity[i];
    1276:	fd 01       	movw	r30, r26
    1278:	e8 51       	subi	r30, 0x18	; 24
    127a:	fa 4f       	sbci	r31, 0xFA	; 250
    127c:	20 81       	ld	r18, Z
    127e:	31 81       	ldd	r19, Z+1	; 0x01
    1280:	a7 53       	subi	r26, 0x37	; 55
    1282:	ba 4f       	sbci	r27, 0xFA	; 250
    1284:	8d 91       	ld	r24, X+
    1286:	9c 91       	ld	r25, X
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	91 83       	std	Z+1, r25	; 0x01
    128e:	80 83       	st	Z, r24



			// 3.3 remove balls that hit the left side of the screen or bins
					if(fix2int(x_pos[i]) <= 2) // hit left wall
    1290:	da 01       	movw	r26, r20
    1292:	8d 91       	ld	r24, X+
    1294:	9c 91       	ld	r25, X
    1296:	89 2f       	mov	r24, r25
    1298:	99 0f       	add	r25, r25
    129a:	99 0b       	sbc	r25, r25
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	ac f4       	brge	.+42     	; 0x12ca <main+0x516>
					begin
						is_on_screen[i] = 0;
    12a0:	f1 01       	movw	r30, r2
    12a2:	e8 5b       	subi	r30, 0xB8	; 184
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	10 82       	st	Z, r1
						if(score) score--;
    12a8:	80 91 68 05 	lds	r24, 0x0568
    12ac:	88 23       	and	r24, r24
    12ae:	29 f0       	breq	.+10     	; 0x12ba <main+0x506>
    12b0:	80 91 68 05 	lds	r24, 0x0568
    12b4:	81 50       	subi	r24, 0x01	; 1
    12b6:	80 93 68 05 	sts	0x0568, r24
						age[i] = 0;
    12ba:	f1 01       	movw	r30, r2
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e8 5d       	subi	r30, 0xD8	; 216
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	11 82       	std	Z+1, r1	; 0x01
    12c6:	10 82       	st	Z, r1
    12c8:	30 c0       	rjmp	.+96     	; 0x132a <main+0x576>
						remove_ball(i);
					end // hit left wall
					else
					begin
						if(fix2int(x_pos[i])<75 & fix2int(x_pos[i])>50)
    12ca:	da 01       	movw	r26, r20
    12cc:	8d 91       	ld	r24, X+
    12ce:	9c 91       	ld	r25, X
    12d0:	11 97       	sbiw	r26, 0x01	; 1
    12d2:	2d 91       	ld	r18, X+
    12d4:	3c 91       	ld	r19, X
    12d6:	89 2f       	mov	r24, r25
    12d8:	99 0f       	add	r25, r25
    12da:	99 0b       	sbc	r25, r25
    12dc:	8b 34       	cpi	r24, 0x4B	; 75
    12de:	4c f5       	brge	.+82     	; 0x1332 <main+0x57e>
    12e0:	83 2f       	mov	r24, r19
    12e2:	99 27       	eor	r25, r25
    12e4:	87 fd       	sbrc	r24, 7
    12e6:	9a 95       	dec	r25
    12e8:	83 33       	cpi	r24, 0x33	; 51
    12ea:	1c f1       	brlt	.+70     	; 0x1332 <main+0x57e>
						begin
							if(fix2int(y_pos[i])<=4 | fix2int(y_pos[i])>=(height-5))
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	20 81       	ld	r18, Z
    12f2:	31 81       	ldd	r19, Z+1	; 0x01
    12f4:	89 2f       	mov	r24, r25
    12f6:	99 0f       	add	r25, r25
    12f8:	99 0b       	sbc	r25, r25
    12fa:	85 30       	cpi	r24, 0x05	; 5
    12fc:	34 f0       	brlt	.+12     	; 0x130a <main+0x556>
    12fe:	83 2f       	mov	r24, r19
    1300:	99 27       	eor	r25, r25
    1302:	87 fd       	sbrc	r24, 7
    1304:	9a 95       	dec	r25
    1306:	8a 33       	cpi	r24, 0x3A	; 58
    1308:	a4 f0       	brlt	.+40     	; 0x1332 <main+0x57e>
							begin
								is_on_screen[i] = 0;
    130a:	f1 01       	movw	r30, r2
    130c:	e8 5b       	subi	r30, 0xB8	; 184
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	10 82       	st	Z, r1
								age[i] = 0;
    1312:	f1 01       	movw	r30, r2
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	e8 5d       	subi	r30, 0xD8	; 216
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	11 82       	std	Z+1, r1	; 0x01
    131e:	10 82       	st	Z, r1
								score++;
    1320:	80 91 68 05 	lds	r24, 0x0568
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	80 93 68 05 	sts	0x0568, r24
								remove_ball(i);
    132a:	c1 01       	movw	r24, r2
    132c:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <main+0x584>
							end // y check bins
							else place_ball(i);
						end // x check bins
						else place_ball(i);
    1332:	c1 01       	movw	r24, r2
    1334:	0e 94 c0 05 	call	0xb80	; 0xb80 <place_ball>
				video_line(3,top_of_paddle,3,top_of_paddle+8,1);
				ADC_start_measure(0);

		
			// 3. update ball information
			for(int i = 0; i<Max_num_balls-1;i++)
    1338:	08 94       	sec
    133a:	21 1c       	adc	r2, r1
    133c:	31 1c       	adc	r3, r1
    133e:	be e0       	ldi	r27, 0x0E	; 14
    1340:	2b 16       	cp	r2, r27
    1342:	31 04       	cpc	r3, r1
    1344:	09 f0       	breq	.+2      	; 0x1348 <main+0x594>
    1346:	27 ce       	rjmp	.-946    	; 0xf96 <main+0x1e2>
						else place_ball(i);
					end // left wall check
			end // for i

			// 5. update text (score, time...)
			sprintf(score_str, "%3d",score);
    1348:	80 91 68 05 	lds	r24, 0x0568
    134c:	00 d0       	rcall	.+0      	; 0x134e <main+0x59a>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <main+0x59c>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <main+0x59e>
    1352:	ed b7       	in	r30, 0x3d	; 61
    1354:	fe b7       	in	r31, 0x3e	; 62
    1356:	31 96       	adiw	r30, 0x01	; 1
    1358:	24 e0       	ldi	r18, 0x04	; 4
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	2c 0f       	add	r18, r28
    135e:	3d 1f       	adc	r19, r29
    1360:	ad b7       	in	r26, 0x3d	; 61
    1362:	be b7       	in	r27, 0x3e	; 62
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	3c 93       	st	X, r19
    1368:	2e 93       	st	-X, r18
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b1 e0       	ldi	r27, 0x01	; 1
    1370:	b3 83       	std	Z+3, r27	; 0x03
    1372:	a2 83       	std	Z+2, r26	; 0x02
    1374:	84 83       	std	Z+4, r24	; 0x04
    1376:	15 82       	std	Z+5, r1	; 0x05
    1378:	0e 94 01 0c 	call	0x1802	; 0x1802 <sprintf>
			video_puts(110,1,score_str);
    137c:	ed b7       	in	r30, 0x3d	; 61
    137e:	fe b7       	in	r31, 0x3e	; 62
    1380:	36 96       	adiw	r30, 0x06	; 6
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	fe bf       	out	0x3e, r31	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	ed bf       	out	0x3d, r30	; 61
    138c:	8e e6       	ldi	r24, 0x6E	; 110
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	ae 01       	movw	r20, r28
    1392:	4c 5f       	subi	r20, 0xFC	; 252
    1394:	5f 4f       	sbci	r21, 0xFF	; 255
    1396:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
    139a:	fb 84       	ldd	r15, Y+11	; 0x0b
	video_pt(50,height-1,1);
	video_pt(75,height-1,1);


	
	while(time_elapsed_HS<=200)
    139c:	80 91 69 05 	lds	r24, 0x0569
    13a0:	89 3c       	cpi	r24, 0xC9	; 201
    13a2:	08 f4       	brcc	.+2      	; 0x13a6 <main+0x5f2>
    13a4:	4f cd       	rjmp	.-1378   	; 0xe44 <main+0x90>
    13a6:	00 e0       	ldi	r16, 0x00	; 0
    13a8:	10 e0       	ldi	r17, 0x00	; 0
			sprintf(score_str, "%3d",score);
			video_puts(110,1,score_str);

		end // linecount == screenBot
	end // while time < 200
	for(int gh = 0; gh<Max_num_balls; gh++) remove_ball(gh); // clear the screen
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 28 05 	call	0xa50	; 0xa50 <remove_ball>
    13b0:	0f 5f       	subi	r16, 0xFF	; 255
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	0f 30       	cpi	r16, 0x0F	; 15
    13b6:	11 05       	cpc	r17, r1
    13b8:	c1 f7       	brne	.-16     	; 0x13aa <main+0x5f6>
	while(1)
	begin
		sprintf(score_str, "%i",score);
    13ba:	8e 01       	movw	r16, r28
    13bc:	0c 5f       	subi	r16, 0xFC	; 252
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	64 e0       	ldi	r22, 0x04	; 4
    13c2:	e6 2e       	mov	r14, r22
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	f6 2e       	mov	r15, r22
    13c8:	80 91 68 05 	lds	r24, 0x0568
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <main+0x61a>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <main+0x61c>
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <main+0x61e>
    13d2:	ed b7       	in	r30, 0x3d	; 61
    13d4:	fe b7       	in	r31, 0x3e	; 62
    13d6:	31 96       	adiw	r30, 0x01	; 1
    13d8:	ad b7       	in	r26, 0x3d	; 61
    13da:	be b7       	in	r27, 0x3e	; 62
    13dc:	12 96       	adiw	r26, 0x02	; 2
    13de:	1c 93       	st	X, r17
    13e0:	0e 93       	st	-X, r16
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	f3 82       	std	Z+3, r15	; 0x03
    13e6:	e2 82       	std	Z+2, r14	; 0x02
    13e8:	84 83       	std	Z+4, r24	; 0x04
    13ea:	15 82       	std	Z+5, r1	; 0x05
    13ec:	0e 94 01 0c 	call	0x1802	; 0x1802 <sprintf>
		video_puts(30,30,"Time Is Up!");
    13f0:	ed b7       	in	r30, 0x3d	; 61
    13f2:	fe b7       	in	r31, 0x3e	; 62
    13f4:	36 96       	adiw	r30, 0x06	; 6
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	fe bf       	out	0x3e, r31	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	ed bf       	out	0x3d, r30	; 61
    1400:	8e e1       	ldi	r24, 0x1E	; 30
    1402:	6e e1       	ldi	r22, 0x1E	; 30
    1404:	47 e0       	ldi	r20, 0x07	; 7
    1406:	51 e0       	ldi	r21, 0x01	; 1
    1408:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
		video_puts(30,42,"Your score:");
    140c:	8e e1       	ldi	r24, 0x1E	; 30
    140e:	6a e2       	ldi	r22, 0x2A	; 42
    1410:	43 e1       	ldi	r20, 0x13	; 19
    1412:	51 e0       	ldi	r21, 0x01	; 1
    1414:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
		video_puts(100,42,score_str);
    1418:	84 e6       	ldi	r24, 0x64	; 100
    141a:	6a e2       	ldi	r22, 0x2A	; 42
    141c:	a8 01       	movw	r20, r16
    141e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <video_puts>
    1422:	d2 cf       	rjmp	.-92     	; 0x13c8 <main+0x614>

00001424 <write_LCD>:
end


// write to LCD
void write_LCD(char num)
begin
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
	sprintf(lcd_buffer,"%3d", num);
    1428:	00 d0       	rcall	.+0      	; 0x142a <write_LCD+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <write_LCD+0x8>
    142c:	00 d0       	rcall	.+0      	; 0x142e <write_LCD+0xa>
    142e:	ed b7       	in	r30, 0x3d	; 61
    1430:	fe b7       	in	r31, 0x3e	; 62
    1432:	31 96       	adiw	r30, 0x01	; 1
    1434:	07 e5       	ldi	r16, 0x57	; 87
    1436:	15 e0       	ldi	r17, 0x05	; 5
    1438:	ad b7       	in	r26, 0x3d	; 61
    143a:	be b7       	in	r27, 0x3e	; 62
    143c:	12 96       	adiw	r26, 0x02	; 2
    143e:	1c 93       	st	X, r17
    1440:	0e 93       	st	-X, r16
    1442:	11 97       	sbiw	r26, 0x01	; 1
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	31 e0       	ldi	r19, 0x01	; 1
    1448:	33 83       	std	Z+3, r19	; 0x03
    144a:	22 83       	std	Z+2, r18	; 0x02
    144c:	84 83       	std	Z+4, r24	; 0x04
    144e:	15 82       	std	Z+5, r1	; 0x05
    1450:	0e 94 01 0c 	call	0x1802	; 0x1802 <sprintf>
	LCDGotoXY(0, 1);
    1454:	8d b7       	in	r24, 0x3d	; 61
    1456:	9e b7       	in	r25, 0x3e	; 62
    1458:	06 96       	adiw	r24, 0x06	; 6
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	9e bf       	out	0x3e, r25	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	8d bf       	out	0x3d, r24	; 61
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	0e 94 b2 0a 	call	0x1564	; 0x1564 <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
    146c:	f8 01       	movw	r30, r16
    146e:	01 90       	ld	r0, Z+
    1470:	00 20       	and	r0, r0
    1472:	e9 f7       	brne	.-6      	; 0x146e <write_LCD+0x4a>
    1474:	31 97       	sbiw	r30, 0x01	; 1
    1476:	e0 1b       	sub	r30, r16
    1478:	f1 0b       	sbc	r31, r17
    147a:	c8 01       	movw	r24, r16
    147c:	6e 2f       	mov	r22, r30
    147e:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCDstring>
end
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
    1488:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCDinit>
	LCDcursorOFF();
    148c:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCDcursorOFF>
	LCDclr();				//clear the display
    1490:	0e 94 95 0a 	call	0x152a	; 0x152a <LCDclr>
	LCDGotoXY(0,0);
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	0e 94 b2 0a 	call	0x1564	; 0x1564 <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
    149c:	8c e8       	ldi	r24, 0x8C	; 140
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <CopyStringtoLCD>
	LCD_char_count = 0;
    14a8:	10 92 79 05 	sts	0x0579, r1
end
    14ac:	08 95       	ret

000014ae <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
    14ae:	28 2f       	mov	r18, r24
    14b0:	20 7f       	andi	r18, 0xF0	; 240
    14b2:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
    14b4:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    14b6:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b8:	20 e4       	ldi	r18, 0x40	; 64
    14ba:	3f e1       	ldi	r19, 0x1F	; 31
    14bc:	f9 01       	movw	r30, r18
    14be:	31 97       	sbiw	r30, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    14c2:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    14c4:	40 98       	cbi	0x08, 0	; 8
    14c6:	f9 01       	movw	r30, r18
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	44 e0       	ldi	r20, 0x04	; 4
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	4a 95       	dec	r20
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <LCDsendChar+0x22>
    14d8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
    14da:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
    14dc:	42 9a       	sbi	0x08, 2	; 8
    14de:	c9 01       	movw	r24, r18
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
    14e4:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
    14e6:	40 98       	cbi	0x08, 0	; 8
    14e8:	c9 01       	movw	r24, r18
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
    14ee:	08 95       	ret

000014f0 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
    14f0:	28 2f       	mov	r18, r24
    14f2:	20 7f       	andi	r18, 0xF0	; 240
    14f4:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
    14f6:	42 9a       	sbi	0x08, 2	; 8
    14f8:	20 e4       	ldi	r18, 0x40	; 64
    14fa:	3f e1       	ldi	r19, 0x1F	; 31
    14fc:	f9 01       	movw	r30, r18
    14fe:	31 97       	sbiw	r30, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1502:	42 98       	cbi	0x08, 2	; 8
    1504:	f9 01       	movw	r30, r18
    1506:	31 97       	sbiw	r30, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	54 e0       	ldi	r21, 0x04	; 4
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	5a 95       	dec	r21
    1514:	e1 f7       	brne	.-8      	; 0x150e <LCDsendCommand+0x1e>
    1516:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
    1518:	42 9a       	sbi	0x08, 2	; 8
    151a:	c9 01       	movw	r24, r18
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1520:	42 98       	cbi	0x08, 2	; 8
    1522:	c9 01       	movw	r24, r18
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
    1528:	08 95       	ret

0000152a <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    1530:	08 95       	ret

00001532 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    1538:	08 95       	ret

0000153a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	49 f0       	breq	.+18     	; 0x155a <LCDstring+0x20>
    1548:	ec 01       	movw	r28, r24
    154a:	10 e0       	ldi	r17, 0x00	; 0
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    154e:	89 91       	ld	r24, Y+
    1550:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    1554:	1f 5f       	subi	r17, 0xFF	; 255
    1556:	10 17       	cp	r17, r16
    1558:	d0 f3       	brcs	.-12     	; 0x154e <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	08 95       	ret

00001564 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    1564:	62 30       	cpi	r22, 0x02	; 2
    1566:	31 f0       	breq	.+12     	; 0x1574 <LCDGotoXY+0x10>
    1568:	63 30       	cpi	r22, 0x03	; 3
    156a:	31 f0       	breq	.+12     	; 0x1578 <LCDGotoXY+0x14>
    156c:	61 30       	cpi	r22, 0x01	; 1
    156e:	29 f4       	brne	.+10     	; 0x157a <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    1570:	80 5c       	subi	r24, 0xC0	; 192
    1572:	03 c0       	rjmp	.+6      	; 0x157a <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    1574:	8c 5e       	subi	r24, 0xEC	; 236
    1576:	01 c0       	rjmp	.+2      	; 0x157a <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    1578:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    157a:	80 68       	ori	r24, 0x80	; 128
    157c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
	
}
    1580:	08 95       	ret

00001582 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	ec 01       	movw	r28, r24
    158a:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    158c:	64 2f       	mov	r22, r20
    158e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <LCDGotoXY>
    1592:	10 e0       	ldi	r17, 0x00	; 0
    1594:	03 c0       	rjmp	.+6      	; 0x159c <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    1596:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    159a:	1f 5f       	subi	r17, 0xFF	; 255
    159c:	fe 01       	movw	r30, r28
    159e:	e1 0f       	add	r30, r17
    15a0:	f1 1d       	adc	r31, r1
    15a2:	84 91       	lpm	r24, Z+
    15a4:	88 23       	and	r24, r24
    15a6:	b9 f7       	brne	.-18     	; 0x1596 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	08 95       	ret

000015b0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	7c 01       	movw	r14, r24
    15be:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    15c0:	11 0f       	add	r17, r17
    15c2:	11 0f       	add	r17, r17
    15c4:	11 0f       	add	r17, r17
    15c6:	10 64       	ori	r17, 0x40	; 64
    15c8:	c0 e0       	ldi	r28, 0x00	; 0
    15ca:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
    15cc:	f7 01       	movw	r30, r14
    15ce:	ec 0f       	add	r30, r28
    15d0:	fd 1f       	adc	r31, r29
    15d2:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
    15d4:	81 2f       	mov	r24, r17
    15d6:	8c 0f       	add	r24, r28
    15d8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
		LCDsendChar(pcc);
    15dc:	80 2f       	mov	r24, r16
    15de:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    15e2:	21 96       	adiw	r28, 0x01	; 1
    15e4:	c8 30       	cpi	r28, 0x08	; 8
    15e6:	d1 05       	cpc	r29, r1
    15e8:	89 f7       	brne	.-30     	; 0x15cc <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	08 95       	ret

000015f8 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	80 e6       	ldi	r24, 0x60	; 96
    1600:	9a ee       	ldi	r25, 0xEA	; 234
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
    1606:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
    1608:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
    160a:	87 b1       	in	r24, 0x07	; 7
    160c:	80 6f       	ori	r24, 0xF0	; 240
    160e:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
    1610:	87 b1       	in	r24, 0x07	; 7
    1612:	87 60       	ori	r24, 0x07	; 7
    1614:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    1616:	80 e3       	ldi	r24, 0x30	; 48
    1618:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    161a:	42 9a       	sbi	0x08, 2	; 8
    161c:	20 e4       	ldi	r18, 0x40	; 64
    161e:	3f e1       	ldi	r19, 0x1F	; 31
    1620:	f9 01       	movw	r30, r18
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1626:	42 98       	cbi	0x08, 2	; 8
    1628:	f9 01       	movw	r30, r18
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
    162e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1630:	42 9a       	sbi	0x08, 2	; 8
    1632:	c9 01       	movw	r24, r18
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    1638:	42 98       	cbi	0x08, 2	; 8
    163a:	c9 01       	movw	r24, r18
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
    1644:	42 9a       	sbi	0x08, 2	; 8
    1646:	c9 01       	movw	r24, r18
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
    164c:	42 98       	cbi	0x08, 2	; 8
    164e:	c9 01       	movw	r24, r18
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    1654:	88 e2       	ldi	r24, 0x28	; 40
    1656:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    165a:	8c e0       	ldi	r24, 0x0C	; 12
    165c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
    1660:	c8 e9       	ldi	r28, 0x98	; 152
    1662:	d4 e0       	ldi	r29, 0x04	; 4
    1664:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    1666:	16 2f       	mov	r17, r22
    1668:	1f 5f       	subi	r17, 0xFF	; 255
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCDdefinechar>
    1670:	28 96       	adiw	r28, 0x08	; 8
    1672:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    1674:	18 30       	cpi	r17, 0x08	; 8
    1676:	b9 f7       	brne	.-18     	; 0x1666 <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	08 95       	ret

00001680 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	08 2f       	mov	r16, r24
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
    168a:	8e e1       	ldi	r24, 0x1E	; 30
    168c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    1690:	1f 5f       	subi	r17, 0xFF	; 255
    1692:	10 17       	cp	r17, r16
    1694:	d0 f3       	brcs	.-12     	; 0x168a <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	08 95       	ret

0000169c <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	08 2f       	mov	r16, r24
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    16a6:	88 e1       	ldi	r24, 0x18	; 24
    16a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    16ac:	1f 5f       	subi	r17, 0xFF	; 255
    16ae:	10 17       	cp	r17, r16
    16b0:	d0 f3       	brcs	.-12     	; 0x16a6 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    16b8:	8e e0       	ldi	r24, 0x0E	; 14
    16ba:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    16be:	08 95       	ret

000016c0 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    16c0:	8f e0       	ldi	r24, 0x0F	; 15
    16c2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    16c6:	08 95       	ret

000016c8 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    16c8:	8c e0       	ldi	r24, 0x0C	; 12
    16ca:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    16ce:	08 95       	ret

000016d0 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    16d0:	88 e0       	ldi	r24, 0x08	; 8
    16d2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    16d6:	08 95       	ret

000016d8 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    16d8:	8c e0       	ldi	r24, 0x0C	; 12
    16da:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
}
    16de:	08 95       	ret

000016e0 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	08 2f       	mov	r16, r24
    16e6:	10 e0       	ldi	r17, 0x00	; 0
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    16ea:	80 e1       	ldi	r24, 0x10	; 16
    16ec:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    16f0:	1f 5f       	subi	r17, 0xFF	; 255
    16f2:	10 17       	cp	r17, r16
    16f4:	d0 f3       	brcs	.-12     	; 0x16ea <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	08 2f       	mov	r16, r24
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	04 c0       	rjmp	.+8      	; 0x170e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1706:	84 e1       	ldi	r24, 0x14	; 20
    1708:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    170c:	1f 5f       	subi	r17, 0xFF	; 255
    170e:	10 17       	cp	r17, r16
    1710:	d0 f3       	brcs	.-12     	; 0x1706 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    1728:	96 e0       	ldi	r25, 0x06	; 6
    172a:	89 9f       	mul	r24, r25
    172c:	c0 01       	movw	r24, r0
    172e:	11 24       	eor	r1, r1
    1730:	24 2f       	mov	r18, r20
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	ac 01       	movw	r20, r24
    1736:	42 9f       	mul	r20, r18
    1738:	c0 01       	movw	r24, r0
    173a:	43 9f       	mul	r20, r19
    173c:	90 0d       	add	r25, r0
    173e:	52 9f       	mul	r21, r18
    1740:	90 0d       	add	r25, r0
    1742:	11 24       	eor	r1, r1
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__divmodhi4>
    174a:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    174c:	cb 01       	movw	r24, r22
    174e:	66 e0       	ldi	r22, 0x06	; 6
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <__udivmodhi4>
    1756:	e8 2e       	mov	r14, r24
    1758:	ff 24       	eor	r15, r15
    175a:	00 e0       	ldi	r16, 0x00	; 0
    175c:	10 e0       	ldi	r17, 0x00	; 0
    175e:	12 c0       	rjmp	.+36     	; 0x1784 <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    1760:	c8 01       	movw	r24, r16
    1762:	05 96       	adiw	r24, 0x05	; 5
    1764:	c8 17       	cp	r28, r24
    1766:	d9 07       	cpc	r29, r25
    1768:	10 f0       	brcs	.+4      	; 0x176e <LCDprogressBar+0x56>
    176a:	85 e0       	ldi	r24, 0x05	; 5
    176c:	06 c0       	rjmp	.+12     	; 0x177a <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    176e:	c0 17       	cp	r28, r16
    1770:	d1 07       	cpc	r29, r17
    1772:	10 f0       	brcs	.+4      	; 0x1778 <LCDprogressBar+0x60>
    1774:	8e 2d       	mov	r24, r14
    1776:	01 c0       	rjmp	.+2      	; 0x177a <LCDprogressBar+0x62>
    1778:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    177a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    177e:	f3 94       	inc	r15
    1780:	0a 5f       	subi	r16, 0xFA	; 250
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	fd 14       	cp	r15, r13
    1786:	60 f3       	brcs	.-40     	; 0x1760 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	08 95       	ret

00001798 <multfix>:
multfix:
	;input parameters are in r23:r22(hi:lo) and r25:r24
	  
  	;b aready in right place -- 2nd parameter is in r22:23											

    mov  r20,r24 ;load a -- first parameter is in r24:25 
    1798:	48 2f       	mov	r20, r24
	mov  r21,r25											
    179a:	59 2f       	mov	r21, r25

	muls r23, r21	; (signed)ah * (signed)bh		
    179c:	75 02       	muls	r23, r21
	mov	 r25, r0         ;r18, r0"						
    179e:	90 2d       	mov	r25, r0
	mul	 r22, r20		; al * bl"						
    17a0:	64 9f       	mul	r22, r20
	mov  r24, r1      ;movw	r17:r16, r1:r0"		
    17a2:	81 2d       	mov	r24, r1
											
	mulsu r23, r20	; (signed)ah * bl				
    17a4:	74 03       	mulsu	r23, r20
	add	 r24, r0         ;r17, r0"						
    17a6:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"	
    17a8:	91 1d       	adc	r25, r1
						
	mulsu r21, r22	; (signed)bh * al				
    17aa:	56 03       	mulsu	r21, r22
	add	 r24, r0         ;r17, r0"					
    17ac:	80 0d       	add	r24, r0
	adc	 r25, r1         ;r18, r1"						
    17ae:	91 1d       	adc	r25, r1
											
	clr  r1   			; required by GCC								
    17b0:	11 24       	eor	r1, r1
	
	;return values are in 25:r24 (hi:lo)		 								
 	ret
    17b2:	08 95       	ret

000017b4 <__udivmodhi4>:
    17b4:	aa 1b       	sub	r26, r26
    17b6:	bb 1b       	sub	r27, r27
    17b8:	51 e1       	ldi	r21, 0x11	; 17
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <__udivmodhi4_ep>

000017bc <__udivmodhi4_loop>:
    17bc:	aa 1f       	adc	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	a6 17       	cp	r26, r22
    17c2:	b7 07       	cpc	r27, r23
    17c4:	10 f0       	brcs	.+4      	; 0x17ca <__udivmodhi4_ep>
    17c6:	a6 1b       	sub	r26, r22
    17c8:	b7 0b       	sbc	r27, r23

000017ca <__udivmodhi4_ep>:
    17ca:	88 1f       	adc	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	5a 95       	dec	r21
    17d0:	a9 f7       	brne	.-22     	; 0x17bc <__udivmodhi4_loop>
    17d2:	80 95       	com	r24
    17d4:	90 95       	com	r25
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	08 95       	ret

000017dc <__divmodhi4>:
    17dc:	97 fb       	bst	r25, 7
    17de:	09 2e       	mov	r0, r25
    17e0:	07 26       	eor	r0, r23
    17e2:	0a d0       	rcall	.+20     	; 0x17f8 <__divmodhi4_neg1>
    17e4:	77 fd       	sbrc	r23, 7
    17e6:	04 d0       	rcall	.+8      	; 0x17f0 <__divmodhi4_neg2>
    17e8:	e5 df       	rcall	.-54     	; 0x17b4 <__udivmodhi4>
    17ea:	06 d0       	rcall	.+12     	; 0x17f8 <__divmodhi4_neg1>
    17ec:	00 20       	and	r0, r0
    17ee:	1a f4       	brpl	.+6      	; 0x17f6 <__divmodhi4_exit>

000017f0 <__divmodhi4_neg2>:
    17f0:	70 95       	com	r23
    17f2:	61 95       	neg	r22
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255

000017f6 <__divmodhi4_exit>:
    17f6:	08 95       	ret

000017f8 <__divmodhi4_neg1>:
    17f8:	f6 f7       	brtc	.-4      	; 0x17f6 <__divmodhi4_exit>
    17fa:	90 95       	com	r25
    17fc:	81 95       	neg	r24
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <sprintf>:
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	2e 97       	sbiw	r28, 0x0e	; 14
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	0d 89       	ldd	r16, Y+21	; 0x15
    181c:	1e 89       	ldd	r17, Y+22	; 0x16
    181e:	86 e0       	ldi	r24, 0x06	; 6
    1820:	8c 83       	std	Y+4, r24	; 0x04
    1822:	1a 83       	std	Y+2, r17	; 0x02
    1824:	09 83       	std	Y+1, r16	; 0x01
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	9f e7       	ldi	r25, 0x7F	; 127
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	9e 01       	movw	r18, r28
    1830:	27 5e       	subi	r18, 0xE7	; 231
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	ce 01       	movw	r24, r28
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	6f 89       	ldd	r22, Y+23	; 0x17
    183a:	78 8d       	ldd	r23, Y+24	; 0x18
    183c:	a9 01       	movw	r20, r18
    183e:	0e 94 32 0c 	call	0x1864	; 0x1864 <vfprintf>
    1842:	2f 81       	ldd	r18, Y+7	; 0x07
    1844:	38 85       	ldd	r19, Y+8	; 0x08
    1846:	02 0f       	add	r16, r18
    1848:	13 1f       	adc	r17, r19
    184a:	f8 01       	movw	r30, r16
    184c:	10 82       	st	Z, r1
    184e:	2e 96       	adiw	r28, 0x0e	; 14
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <vfprintf>:
    1864:	2f 92       	push	r2
    1866:	3f 92       	push	r3
    1868:	4f 92       	push	r4
    186a:	5f 92       	push	r5
    186c:	6f 92       	push	r6
    186e:	7f 92       	push	r7
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	2b 97       	sbiw	r28, 0x0b	; 11
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	3c 01       	movw	r6, r24
    189a:	2b 01       	movw	r4, r22
    189c:	5a 01       	movw	r10, r20
    189e:	fc 01       	movw	r30, r24
    18a0:	17 82       	std	Z+7, r1	; 0x07
    18a2:	16 82       	std	Z+6, r1	; 0x06
    18a4:	83 81       	ldd	r24, Z+3	; 0x03
    18a6:	81 fd       	sbrc	r24, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x4c>
    18aa:	6f ef       	ldi	r22, 0xFF	; 255
    18ac:	7f ef       	ldi	r23, 0xFF	; 255
    18ae:	c6 c1       	rjmp	.+908    	; 0x1c3c <vfprintf+0x3d8>
    18b0:	9a e0       	ldi	r25, 0x0A	; 10
    18b2:	89 2e       	mov	r8, r25
    18b4:	1e 01       	movw	r2, r28
    18b6:	08 94       	sec
    18b8:	21 1c       	adc	r2, r1
    18ba:	31 1c       	adc	r3, r1
    18bc:	f3 01       	movw	r30, r6
    18be:	23 81       	ldd	r18, Z+3	; 0x03
    18c0:	f2 01       	movw	r30, r4
    18c2:	23 fd       	sbrc	r18, 3
    18c4:	85 91       	lpm	r24, Z+
    18c6:	23 ff       	sbrs	r18, 3
    18c8:	81 91       	ld	r24, Z+
    18ca:	2f 01       	movw	r4, r30
    18cc:	88 23       	and	r24, r24
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <vfprintf+0x6e>
    18d0:	b2 c1       	rjmp	.+868    	; 0x1c36 <vfprintf+0x3d2>
    18d2:	85 32       	cpi	r24, 0x25	; 37
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <vfprintf+0x80>
    18d6:	23 fd       	sbrc	r18, 3
    18d8:	85 91       	lpm	r24, Z+
    18da:	23 ff       	sbrs	r18, 3
    18dc:	81 91       	ld	r24, Z+
    18de:	2f 01       	movw	r4, r30
    18e0:	85 32       	cpi	r24, 0x25	; 37
    18e2:	29 f4       	brne	.+10     	; 0x18ee <vfprintf+0x8a>
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	b3 01       	movw	r22, r6
    18e8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    18ec:	e7 cf       	rjmp	.-50     	; 0x18bc <vfprintf+0x58>
    18ee:	98 2f       	mov	r25, r24
    18f0:	ff 24       	eor	r15, r15
    18f2:	ee 24       	eor	r14, r14
    18f4:	99 24       	eor	r9, r9
    18f6:	ff e1       	ldi	r31, 0x1F	; 31
    18f8:	ff 15       	cp	r31, r15
    18fa:	d0 f0       	brcs	.+52     	; 0x1930 <vfprintf+0xcc>
    18fc:	9b 32       	cpi	r25, 0x2B	; 43
    18fe:	69 f0       	breq	.+26     	; 0x191a <vfprintf+0xb6>
    1900:	9c 32       	cpi	r25, 0x2C	; 44
    1902:	28 f4       	brcc	.+10     	; 0x190e <vfprintf+0xaa>
    1904:	90 32       	cpi	r25, 0x20	; 32
    1906:	59 f0       	breq	.+22     	; 0x191e <vfprintf+0xba>
    1908:	93 32       	cpi	r25, 0x23	; 35
    190a:	91 f4       	brne	.+36     	; 0x1930 <vfprintf+0xcc>
    190c:	0e c0       	rjmp	.+28     	; 0x192a <vfprintf+0xc6>
    190e:	9d 32       	cpi	r25, 0x2D	; 45
    1910:	49 f0       	breq	.+18     	; 0x1924 <vfprintf+0xc0>
    1912:	90 33       	cpi	r25, 0x30	; 48
    1914:	69 f4       	brne	.+26     	; 0x1930 <vfprintf+0xcc>
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	24 c0       	rjmp	.+72     	; 0x1962 <vfprintf+0xfe>
    191a:	52 e0       	ldi	r21, 0x02	; 2
    191c:	f5 2a       	or	r15, r21
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	f8 2a       	or	r15, r24
    1922:	28 c0       	rjmp	.+80     	; 0x1974 <vfprintf+0x110>
    1924:	98 e0       	ldi	r25, 0x08	; 8
    1926:	f9 2a       	or	r15, r25
    1928:	25 c0       	rjmp	.+74     	; 0x1974 <vfprintf+0x110>
    192a:	e0 e1       	ldi	r30, 0x10	; 16
    192c:	fe 2a       	or	r15, r30
    192e:	22 c0       	rjmp	.+68     	; 0x1974 <vfprintf+0x110>
    1930:	f7 fc       	sbrc	r15, 7
    1932:	29 c0       	rjmp	.+82     	; 0x1986 <vfprintf+0x122>
    1934:	89 2f       	mov	r24, r25
    1936:	80 53       	subi	r24, 0x30	; 48
    1938:	8a 30       	cpi	r24, 0x0A	; 10
    193a:	70 f4       	brcc	.+28     	; 0x1958 <vfprintf+0xf4>
    193c:	f6 fe       	sbrs	r15, 6
    193e:	05 c0       	rjmp	.+10     	; 0x194a <vfprintf+0xe6>
    1940:	98 9c       	mul	r9, r8
    1942:	90 2c       	mov	r9, r0
    1944:	11 24       	eor	r1, r1
    1946:	98 0e       	add	r9, r24
    1948:	15 c0       	rjmp	.+42     	; 0x1974 <vfprintf+0x110>
    194a:	e8 9c       	mul	r14, r8
    194c:	e0 2c       	mov	r14, r0
    194e:	11 24       	eor	r1, r1
    1950:	e8 0e       	add	r14, r24
    1952:	f0 e2       	ldi	r31, 0x20	; 32
    1954:	ff 2a       	or	r15, r31
    1956:	0e c0       	rjmp	.+28     	; 0x1974 <vfprintf+0x110>
    1958:	9e 32       	cpi	r25, 0x2E	; 46
    195a:	29 f4       	brne	.+10     	; 0x1966 <vfprintf+0x102>
    195c:	f6 fc       	sbrc	r15, 6
    195e:	6b c1       	rjmp	.+726    	; 0x1c36 <vfprintf+0x3d2>
    1960:	40 e4       	ldi	r20, 0x40	; 64
    1962:	f4 2a       	or	r15, r20
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <vfprintf+0x110>
    1966:	9c 36       	cpi	r25, 0x6C	; 108
    1968:	19 f4       	brne	.+6      	; 0x1970 <vfprintf+0x10c>
    196a:	50 e8       	ldi	r21, 0x80	; 128
    196c:	f5 2a       	or	r15, r21
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x110>
    1970:	98 36       	cpi	r25, 0x68	; 104
    1972:	49 f4       	brne	.+18     	; 0x1986 <vfprintf+0x122>
    1974:	f2 01       	movw	r30, r4
    1976:	23 fd       	sbrc	r18, 3
    1978:	95 91       	lpm	r25, Z+
    197a:	23 ff       	sbrs	r18, 3
    197c:	91 91       	ld	r25, Z+
    197e:	2f 01       	movw	r4, r30
    1980:	99 23       	and	r25, r25
    1982:	09 f0       	breq	.+2      	; 0x1986 <vfprintf+0x122>
    1984:	b8 cf       	rjmp	.-144    	; 0x18f6 <vfprintf+0x92>
    1986:	89 2f       	mov	r24, r25
    1988:	85 54       	subi	r24, 0x45	; 69
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	18 f0       	brcs	.+6      	; 0x1994 <vfprintf+0x130>
    198e:	80 52       	subi	r24, 0x20	; 32
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	38 f4       	brcc	.+14     	; 0x19a2 <vfprintf+0x13e>
    1994:	44 e0       	ldi	r20, 0x04	; 4
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	a4 0e       	add	r10, r20
    199a:	b5 1e       	adc	r11, r21
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	59 83       	std	Y+1, r21	; 0x01
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <vfprintf+0x15c>
    19a2:	93 36       	cpi	r25, 0x63	; 99
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <vfprintf+0x14e>
    19a6:	93 37       	cpi	r25, 0x73	; 115
    19a8:	79 f0       	breq	.+30     	; 0x19c8 <vfprintf+0x164>
    19aa:	93 35       	cpi	r25, 0x53	; 83
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <vfprintf+0x14c>
    19ae:	56 c0       	rjmp	.+172    	; 0x1a5c <vfprintf+0x1f8>
    19b0:	20 c0       	rjmp	.+64     	; 0x19f2 <vfprintf+0x18e>
    19b2:	f5 01       	movw	r30, r10
    19b4:	80 81       	ld	r24, Z
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	42 e0       	ldi	r20, 0x02	; 2
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	a4 0e       	add	r10, r20
    19be:	b5 1e       	adc	r11, r21
    19c0:	61 01       	movw	r12, r2
    19c2:	01 e0       	ldi	r16, 0x01	; 1
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	12 c0       	rjmp	.+36     	; 0x19ec <vfprintf+0x188>
    19c8:	f5 01       	movw	r30, r10
    19ca:	c0 80       	ld	r12, Z
    19cc:	d1 80       	ldd	r13, Z+1	; 0x01
    19ce:	f6 fc       	sbrc	r15, 6
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <vfprintf+0x174>
    19d2:	6f ef       	ldi	r22, 0xFF	; 255
    19d4:	7f ef       	ldi	r23, 0xFF	; 255
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <vfprintf+0x178>
    19d8:	69 2d       	mov	r22, r9
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	42 e0       	ldi	r20, 0x02	; 2
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	a4 0e       	add	r10, r20
    19e2:	b5 1e       	adc	r11, r21
    19e4:	c6 01       	movw	r24, r12
    19e6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <strnlen>
    19ea:	8c 01       	movw	r16, r24
    19ec:	5f e7       	ldi	r21, 0x7F	; 127
    19ee:	f5 22       	and	r15, r21
    19f0:	14 c0       	rjmp	.+40     	; 0x1a1a <vfprintf+0x1b6>
    19f2:	f5 01       	movw	r30, r10
    19f4:	c0 80       	ld	r12, Z
    19f6:	d1 80       	ldd	r13, Z+1	; 0x01
    19f8:	f6 fc       	sbrc	r15, 6
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x19e>
    19fc:	6f ef       	ldi	r22, 0xFF	; 255
    19fe:	7f ef       	ldi	r23, 0xFF	; 255
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x1a2>
    1a02:	69 2d       	mov	r22, r9
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	42 e0       	ldi	r20, 0x02	; 2
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	a4 0e       	add	r10, r20
    1a0c:	b5 1e       	adc	r11, r21
    1a0e:	c6 01       	movw	r24, r12
    1a10:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <strnlen_P>
    1a14:	8c 01       	movw	r16, r24
    1a16:	50 e8       	ldi	r21, 0x80	; 128
    1a18:	f5 2a       	or	r15, r21
    1a1a:	f3 fe       	sbrs	r15, 3
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <vfprintf+0x1c8>
    1a1e:	1a c0       	rjmp	.+52     	; 0x1a54 <vfprintf+0x1f0>
    1a20:	80 e2       	ldi	r24, 0x20	; 32
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	b3 01       	movw	r22, r6
    1a26:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1a2a:	ea 94       	dec	r14
    1a2c:	8e 2d       	mov	r24, r14
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	08 17       	cp	r16, r24
    1a32:	19 07       	cpc	r17, r25
    1a34:	a8 f3       	brcs	.-22     	; 0x1a20 <vfprintf+0x1bc>
    1a36:	0e c0       	rjmp	.+28     	; 0x1a54 <vfprintf+0x1f0>
    1a38:	f6 01       	movw	r30, r12
    1a3a:	f7 fc       	sbrc	r15, 7
    1a3c:	85 91       	lpm	r24, Z+
    1a3e:	f7 fe       	sbrs	r15, 7
    1a40:	81 91       	ld	r24, Z+
    1a42:	6f 01       	movw	r12, r30
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	b3 01       	movw	r22, r6
    1a48:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1a4c:	e1 10       	cpse	r14, r1
    1a4e:	ea 94       	dec	r14
    1a50:	01 50       	subi	r16, 0x01	; 1
    1a52:	10 40       	sbci	r17, 0x00	; 0
    1a54:	01 15       	cp	r16, r1
    1a56:	11 05       	cpc	r17, r1
    1a58:	79 f7       	brne	.-34     	; 0x1a38 <vfprintf+0x1d4>
    1a5a:	ea c0       	rjmp	.+468    	; 0x1c30 <vfprintf+0x3cc>
    1a5c:	94 36       	cpi	r25, 0x64	; 100
    1a5e:	11 f0       	breq	.+4      	; 0x1a64 <vfprintf+0x200>
    1a60:	99 36       	cpi	r25, 0x69	; 105
    1a62:	69 f5       	brne	.+90     	; 0x1abe <vfprintf+0x25a>
    1a64:	f7 fe       	sbrs	r15, 7
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <vfprintf+0x214>
    1a68:	f5 01       	movw	r30, r10
    1a6a:	20 81       	ld	r18, Z
    1a6c:	31 81       	ldd	r19, Z+1	; 0x01
    1a6e:	42 81       	ldd	r20, Z+2	; 0x02
    1a70:	53 81       	ldd	r21, Z+3	; 0x03
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <vfprintf+0x228>
    1a78:	f5 01       	movw	r30, r10
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	9c 01       	movw	r18, r24
    1a80:	44 27       	eor	r20, r20
    1a82:	37 fd       	sbrc	r19, 7
    1a84:	40 95       	com	r20
    1a86:	54 2f       	mov	r21, r20
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a8 0e       	add	r10, r24
    1a8e:	b9 1e       	adc	r11, r25
    1a90:	9f e6       	ldi	r25, 0x6F	; 111
    1a92:	f9 22       	and	r15, r25
    1a94:	57 ff       	sbrs	r21, 7
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <vfprintf+0x246>
    1a98:	50 95       	com	r21
    1a9a:	40 95       	com	r20
    1a9c:	30 95       	com	r19
    1a9e:	21 95       	neg	r18
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa6:	e0 e8       	ldi	r30, 0x80	; 128
    1aa8:	fe 2a       	or	r15, r30
    1aaa:	ca 01       	movw	r24, r20
    1aac:	b9 01       	movw	r22, r18
    1aae:	a1 01       	movw	r20, r2
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__ultoa_invert>
    1ab8:	d8 2e       	mov	r13, r24
    1aba:	d2 18       	sub	r13, r2
    1abc:	40 c0       	rjmp	.+128    	; 0x1b3e <vfprintf+0x2da>
    1abe:	95 37       	cpi	r25, 0x75	; 117
    1ac0:	29 f4       	brne	.+10     	; 0x1acc <vfprintf+0x268>
    1ac2:	1f 2d       	mov	r17, r15
    1ac4:	1f 7e       	andi	r17, 0xEF	; 239
    1ac6:	2a e0       	ldi	r18, 0x0A	; 10
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	1d c0       	rjmp	.+58     	; 0x1b06 <vfprintf+0x2a2>
    1acc:	1f 2d       	mov	r17, r15
    1ace:	19 7f       	andi	r17, 0xF9	; 249
    1ad0:	9f 36       	cpi	r25, 0x6F	; 111
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <vfprintf+0x288>
    1ad4:	90 37       	cpi	r25, 0x70	; 112
    1ad6:	20 f4       	brcc	.+8      	; 0x1ae0 <vfprintf+0x27c>
    1ad8:	98 35       	cpi	r25, 0x58	; 88
    1ada:	09 f0       	breq	.+2      	; 0x1ade <vfprintf+0x27a>
    1adc:	ac c0       	rjmp	.+344    	; 0x1c36 <vfprintf+0x3d2>
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <vfprintf+0x29a>
    1ae0:	90 37       	cpi	r25, 0x70	; 112
    1ae2:	39 f0       	breq	.+14     	; 0x1af2 <vfprintf+0x28e>
    1ae4:	98 37       	cpi	r25, 0x78	; 120
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <vfprintf+0x286>
    1ae8:	a6 c0       	rjmp	.+332    	; 0x1c36 <vfprintf+0x3d2>
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <vfprintf+0x290>
    1aec:	28 e0       	ldi	r18, 0x08	; 8
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	0a c0       	rjmp	.+20     	; 0x1b06 <vfprintf+0x2a2>
    1af2:	10 61       	ori	r17, 0x10	; 16
    1af4:	14 fd       	sbrc	r17, 4
    1af6:	14 60       	ori	r17, 0x04	; 4
    1af8:	20 e1       	ldi	r18, 0x10	; 16
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	04 c0       	rjmp	.+8      	; 0x1b06 <vfprintf+0x2a2>
    1afe:	14 fd       	sbrc	r17, 4
    1b00:	16 60       	ori	r17, 0x06	; 6
    1b02:	20 e1       	ldi	r18, 0x10	; 16
    1b04:	32 e0       	ldi	r19, 0x02	; 2
    1b06:	17 ff       	sbrs	r17, 7
    1b08:	08 c0       	rjmp	.+16     	; 0x1b1a <vfprintf+0x2b6>
    1b0a:	f5 01       	movw	r30, r10
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	44 e0       	ldi	r20, 0x04	; 4
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <vfprintf+0x2c6>
    1b1a:	f5 01       	movw	r30, r10
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	bc 01       	movw	r22, r24
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	42 e0       	ldi	r20, 0x02	; 2
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	a4 0e       	add	r10, r20
    1b2c:	b5 1e       	adc	r11, r21
    1b2e:	a1 01       	movw	r20, r2
    1b30:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__ultoa_invert>
    1b34:	d8 2e       	mov	r13, r24
    1b36:	d2 18       	sub	r13, r2
    1b38:	8f e7       	ldi	r24, 0x7F	; 127
    1b3a:	f8 2e       	mov	r15, r24
    1b3c:	f1 22       	and	r15, r17
    1b3e:	f6 fe       	sbrs	r15, 6
    1b40:	0b c0       	rjmp	.+22     	; 0x1b58 <vfprintf+0x2f4>
    1b42:	5e ef       	ldi	r21, 0xFE	; 254
    1b44:	f5 22       	and	r15, r21
    1b46:	d9 14       	cp	r13, r9
    1b48:	38 f4       	brcc	.+14     	; 0x1b58 <vfprintf+0x2f4>
    1b4a:	f4 fe       	sbrs	r15, 4
    1b4c:	07 c0       	rjmp	.+14     	; 0x1b5c <vfprintf+0x2f8>
    1b4e:	f2 fc       	sbrc	r15, 2
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <vfprintf+0x2f8>
    1b52:	8f ee       	ldi	r24, 0xEF	; 239
    1b54:	f8 22       	and	r15, r24
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x2f8>
    1b58:	1d 2d       	mov	r17, r13
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <vfprintf+0x2fa>
    1b5c:	19 2d       	mov	r17, r9
    1b5e:	f4 fe       	sbrs	r15, 4
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <vfprintf+0x318>
    1b62:	fe 01       	movw	r30, r28
    1b64:	ed 0d       	add	r30, r13
    1b66:	f1 1d       	adc	r31, r1
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 33       	cpi	r24, 0x30	; 48
    1b6c:	19 f4       	brne	.+6      	; 0x1b74 <vfprintf+0x310>
    1b6e:	99 ee       	ldi	r25, 0xE9	; 233
    1b70:	f9 22       	and	r15, r25
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <vfprintf+0x320>
    1b74:	1f 5f       	subi	r17, 0xFF	; 255
    1b76:	f2 fe       	sbrs	r15, 2
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <vfprintf+0x320>
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <vfprintf+0x31e>
    1b7c:	8f 2d       	mov	r24, r15
    1b7e:	86 78       	andi	r24, 0x86	; 134
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <vfprintf+0x320>
    1b82:	1f 5f       	subi	r17, 0xFF	; 255
    1b84:	0f 2d       	mov	r16, r15
    1b86:	f3 fc       	sbrc	r15, 3
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <vfprintf+0x34e>
    1b8a:	f0 fe       	sbrs	r15, 0
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <vfprintf+0x348>
    1b8e:	1e 15       	cp	r17, r14
    1b90:	10 f0       	brcs	.+4      	; 0x1b96 <vfprintf+0x332>
    1b92:	9d 2c       	mov	r9, r13
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <vfprintf+0x348>
    1b96:	9d 2c       	mov	r9, r13
    1b98:	9e 0c       	add	r9, r14
    1b9a:	91 1a       	sub	r9, r17
    1b9c:	1e 2d       	mov	r17, r14
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <vfprintf+0x348>
    1ba0:	80 e2       	ldi	r24, 0x20	; 32
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	b3 01       	movw	r22, r6
    1ba6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1baa:	1f 5f       	subi	r17, 0xFF	; 255
    1bac:	1e 15       	cp	r17, r14
    1bae:	c0 f3       	brcs	.-16     	; 0x1ba0 <vfprintf+0x33c>
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <vfprintf+0x356>
    1bb2:	1e 15       	cp	r17, r14
    1bb4:	10 f4       	brcc	.+4      	; 0x1bba <vfprintf+0x356>
    1bb6:	e1 1a       	sub	r14, r17
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <vfprintf+0x358>
    1bba:	ee 24       	eor	r14, r14
    1bbc:	04 ff       	sbrs	r16, 4
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <vfprintf+0x37a>
    1bc0:	80 e3       	ldi	r24, 0x30	; 48
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	b3 01       	movw	r22, r6
    1bc6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1bca:	02 ff       	sbrs	r16, 2
    1bcc:	1d c0       	rjmp	.+58     	; 0x1c08 <vfprintf+0x3a4>
    1bce:	01 fd       	sbrc	r16, 1
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x374>
    1bd2:	88 e7       	ldi	r24, 0x78	; 120
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <vfprintf+0x390>
    1bd8:	88 e5       	ldi	r24, 0x58	; 88
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0b c0       	rjmp	.+22     	; 0x1bf4 <vfprintf+0x390>
    1bde:	80 2f       	mov	r24, r16
    1be0:	86 78       	andi	r24, 0x86	; 134
    1be2:	91 f0       	breq	.+36     	; 0x1c08 <vfprintf+0x3a4>
    1be4:	01 ff       	sbrs	r16, 1
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <vfprintf+0x388>
    1be8:	8b e2       	ldi	r24, 0x2B	; 43
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <vfprintf+0x38a>
    1bec:	80 e2       	ldi	r24, 0x20	; 32
    1bee:	f7 fc       	sbrc	r15, 7
    1bf0:	8d e2       	ldi	r24, 0x2D	; 45
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	b3 01       	movw	r22, r6
    1bf6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <vfprintf+0x3a4>
    1bfc:	80 e3       	ldi	r24, 0x30	; 48
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	b3 01       	movw	r22, r6
    1c02:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1c06:	9a 94       	dec	r9
    1c08:	d9 14       	cp	r13, r9
    1c0a:	c0 f3       	brcs	.-16     	; 0x1bfc <vfprintf+0x398>
    1c0c:	da 94       	dec	r13
    1c0e:	f1 01       	movw	r30, r2
    1c10:	ed 0d       	add	r30, r13
    1c12:	f1 1d       	adc	r31, r1
    1c14:	80 81       	ld	r24, Z
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	b3 01       	movw	r22, r6
    1c1a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1c1e:	dd 20       	and	r13, r13
    1c20:	a9 f7       	brne	.-22     	; 0x1c0c <vfprintf+0x3a8>
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0x3cc>
    1c24:	80 e2       	ldi	r24, 0x20	; 32
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	b3 01       	movw	r22, r6
    1c2a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <fputc>
    1c2e:	ea 94       	dec	r14
    1c30:	ee 20       	and	r14, r14
    1c32:	c1 f7       	brne	.-16     	; 0x1c24 <vfprintf+0x3c0>
    1c34:	43 ce       	rjmp	.-890    	; 0x18bc <vfprintf+0x58>
    1c36:	f3 01       	movw	r30, r6
    1c38:	66 81       	ldd	r22, Z+6	; 0x06
    1c3a:	77 81       	ldd	r23, Z+7	; 0x07
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	2b 96       	adiw	r28, 0x0b	; 11
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	7f 90       	pop	r7
    1c64:	6f 90       	pop	r6
    1c66:	5f 90       	pop	r5
    1c68:	4f 90       	pop	r4
    1c6a:	3f 90       	pop	r3
    1c6c:	2f 90       	pop	r2
    1c6e:	08 95       	ret

00001c70 <strnlen_P>:
    1c70:	fc 01       	movw	r30, r24
    1c72:	05 90       	lpm	r0, Z+
    1c74:	61 50       	subi	r22, 0x01	; 1
    1c76:	70 40       	sbci	r23, 0x00	; 0
    1c78:	01 10       	cpse	r0, r1
    1c7a:	d8 f7       	brcc	.-10     	; 0x1c72 <strnlen_P+0x2>
    1c7c:	80 95       	com	r24
    1c7e:	90 95       	com	r25
    1c80:	8e 0f       	add	r24, r30
    1c82:	9f 1f       	adc	r25, r31
    1c84:	08 95       	ret

00001c86 <strnlen>:
    1c86:	fc 01       	movw	r30, r24
    1c88:	61 50       	subi	r22, 0x01	; 1
    1c8a:	70 40       	sbci	r23, 0x00	; 0
    1c8c:	01 90       	ld	r0, Z+
    1c8e:	01 10       	cpse	r0, r1
    1c90:	d8 f7       	brcc	.-10     	; 0x1c88 <strnlen+0x2>
    1c92:	80 95       	com	r24
    1c94:	90 95       	com	r25
    1c96:	8e 0f       	add	r24, r30
    1c98:	9f 1f       	adc	r25, r31
    1c9a:	08 95       	ret

00001c9c <fputc>:
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	8c 01       	movw	r16, r24
    1ca6:	eb 01       	movw	r28, r22
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	81 ff       	sbrs	r24, 1
    1cac:	1b c0       	rjmp	.+54     	; 0x1ce4 <fputc+0x48>
    1cae:	82 ff       	sbrs	r24, 2
    1cb0:	0d c0       	rjmp	.+26     	; 0x1ccc <fputc+0x30>
    1cb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	28 17       	cp	r18, r24
    1cbc:	39 07       	cpc	r19, r25
    1cbe:	64 f4       	brge	.+24     	; 0x1cd8 <fputc+0x3c>
    1cc0:	e8 81       	ld	r30, Y
    1cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc4:	01 93       	st	Z+, r16
    1cc6:	f9 83       	std	Y+1, r31	; 0x01
    1cc8:	e8 83       	st	Y, r30
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <fputc+0x3c>
    1ccc:	e8 85       	ldd	r30, Y+8	; 0x08
    1cce:	f9 85       	ldd	r31, Y+9	; 0x09
    1cd0:	80 2f       	mov	r24, r16
    1cd2:	09 95       	icall
    1cd4:	89 2b       	or	r24, r25
    1cd6:	31 f4       	brne	.+12     	; 0x1ce4 <fputc+0x48>
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	9f 83       	std	Y+7, r25	; 0x07
    1ce0:	8e 83       	std	Y+6, r24	; 0x06
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <fputc+0x4c>
    1ce4:	0f ef       	ldi	r16, 0xFF	; 255
    1ce6:	1f ef       	ldi	r17, 0xFF	; 255
    1ce8:	c8 01       	movw	r24, r16
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	08 95       	ret

00001cf4 <__ultoa_invert>:
    1cf4:	fa 01       	movw	r30, r20
    1cf6:	aa 27       	eor	r26, r26
    1cf8:	28 30       	cpi	r18, 0x08	; 8
    1cfa:	51 f1       	breq	.+84     	; 0x1d50 <__ultoa_invert+0x5c>
    1cfc:	20 31       	cpi	r18, 0x10	; 16
    1cfe:	81 f1       	breq	.+96     	; 0x1d60 <__ultoa_invert+0x6c>
    1d00:	e8 94       	clt
    1d02:	6f 93       	push	r22
    1d04:	6e 7f       	andi	r22, 0xFE	; 254
    1d06:	6e 5f       	subi	r22, 0xFE	; 254
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	af 4f       	sbci	r26, 0xFF	; 255
    1d10:	b1 e0       	ldi	r27, 0x01	; 1
    1d12:	3e d0       	rcall	.+124    	; 0x1d90 <__ultoa_invert+0x9c>
    1d14:	b4 e0       	ldi	r27, 0x04	; 4
    1d16:	3c d0       	rcall	.+120    	; 0x1d90 <__ultoa_invert+0x9c>
    1d18:	67 0f       	add	r22, r23
    1d1a:	78 1f       	adc	r23, r24
    1d1c:	89 1f       	adc	r24, r25
    1d1e:	9a 1f       	adc	r25, r26
    1d20:	a1 1d       	adc	r26, r1
    1d22:	68 0f       	add	r22, r24
    1d24:	79 1f       	adc	r23, r25
    1d26:	8a 1f       	adc	r24, r26
    1d28:	91 1d       	adc	r25, r1
    1d2a:	a1 1d       	adc	r26, r1
    1d2c:	6a 0f       	add	r22, r26
    1d2e:	71 1d       	adc	r23, r1
    1d30:	81 1d       	adc	r24, r1
    1d32:	91 1d       	adc	r25, r1
    1d34:	a1 1d       	adc	r26, r1
    1d36:	20 d0       	rcall	.+64     	; 0x1d78 <__ultoa_invert+0x84>
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <__ultoa_invert+0x48>
    1d3a:	68 94       	set
    1d3c:	3f 91       	pop	r19
    1d3e:	2a e0       	ldi	r18, 0x0A	; 10
    1d40:	26 9f       	mul	r18, r22
    1d42:	11 24       	eor	r1, r1
    1d44:	30 19       	sub	r19, r0
    1d46:	30 5d       	subi	r19, 0xD0	; 208
    1d48:	31 93       	st	Z+, r19
    1d4a:	de f6       	brtc	.-74     	; 0x1d02 <__ultoa_invert+0xe>
    1d4c:	cf 01       	movw	r24, r30
    1d4e:	08 95       	ret
    1d50:	46 2f       	mov	r20, r22
    1d52:	47 70       	andi	r20, 0x07	; 7
    1d54:	40 5d       	subi	r20, 0xD0	; 208
    1d56:	41 93       	st	Z+, r20
    1d58:	b3 e0       	ldi	r27, 0x03	; 3
    1d5a:	0f d0       	rcall	.+30     	; 0x1d7a <__ultoa_invert+0x86>
    1d5c:	c9 f7       	brne	.-14     	; 0x1d50 <__ultoa_invert+0x5c>
    1d5e:	f6 cf       	rjmp	.-20     	; 0x1d4c <__ultoa_invert+0x58>
    1d60:	46 2f       	mov	r20, r22
    1d62:	4f 70       	andi	r20, 0x0F	; 15
    1d64:	40 5d       	subi	r20, 0xD0	; 208
    1d66:	4a 33       	cpi	r20, 0x3A	; 58
    1d68:	18 f0       	brcs	.+6      	; 0x1d70 <__ultoa_invert+0x7c>
    1d6a:	49 5d       	subi	r20, 0xD9	; 217
    1d6c:	31 fd       	sbrc	r19, 1
    1d6e:	40 52       	subi	r20, 0x20	; 32
    1d70:	41 93       	st	Z+, r20
    1d72:	02 d0       	rcall	.+4      	; 0x1d78 <__ultoa_invert+0x84>
    1d74:	a9 f7       	brne	.-22     	; 0x1d60 <__ultoa_invert+0x6c>
    1d76:	ea cf       	rjmp	.-44     	; 0x1d4c <__ultoa_invert+0x58>
    1d78:	b4 e0       	ldi	r27, 0x04	; 4
    1d7a:	a6 95       	lsr	r26
    1d7c:	97 95       	ror	r25
    1d7e:	87 95       	ror	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	ba 95       	dec	r27
    1d86:	c9 f7       	brne	.-14     	; 0x1d7a <__ultoa_invert+0x86>
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	61 05       	cpc	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	08 95       	ret
    1d90:	9b 01       	movw	r18, r22
    1d92:	ac 01       	movw	r20, r24
    1d94:	0a 2e       	mov	r0, r26
    1d96:	06 94       	lsr	r0
    1d98:	57 95       	ror	r21
    1d9a:	47 95       	ror	r20
    1d9c:	37 95       	ror	r19
    1d9e:	27 95       	ror	r18
    1da0:	ba 95       	dec	r27
    1da2:	c9 f7       	brne	.-14     	; 0x1d96 <__ultoa_invert+0xa2>
    1da4:	62 0f       	add	r22, r18
    1da6:	73 1f       	adc	r23, r19
    1da8:	84 1f       	adc	r24, r20
    1daa:	95 1f       	adc	r25, r21
    1dac:	a0 1d       	adc	r26, r0
    1dae:	08 95       	ret

00001db0 <_exit>:
    1db0:	f8 94       	cli

00001db2 <__stop_program>:
    1db2:	ff cf       	rjmp	.-2      	; 0x1db2 <__stop_program>
