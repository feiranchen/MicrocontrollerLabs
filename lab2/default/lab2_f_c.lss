
lab2_f_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001764  000017f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000249  00800118  00800118  00001810  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004e1  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb8  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  00002ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c04  00000000  00000000  000030d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f7  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000630  00000000  00000000  0000442f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00004a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_18>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      6c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      70:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      74:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      7c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      80:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      84:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <LCDstring+0x16>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <LCD_initialize>:
      aa:	4c 43 44 20 49 6e 69 74 69 61 6c 69 7a 65 64 21     LCD Initialized!
	...

000000bc <LCD_burst_freq>:
      bc:	42 75 72 73 74 20 46 72 65 71 75 65 6e 63 79 3a     Burst Frequency:
	...

000000ce <LCD_interval>:
      ce:	43 68 69 72 70 20 49 6e 74 65 72 76 61 6c 3a 20     Chirp Interval: 
	...

000000e0 <LCD_num_syllable>:
      e0:	4e 75 6d 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Num Syllables:  
	...

000000f2 <LCD_dur_syllable>:
      f2:	44 75 72 20 53 79 6c 6c 61 62 6c 65 73 3a 20 20     Dur Syllables:  
	...

00000104 <LCD_rpt_interval>:
     104:	52 70 74 20 69 6e 74 65 72 76 61 6c 3a 20 20 20     Rpt interval:   
	...

00000116 <LCD_playing>:
     116:	43 68 69 72 70 2c 20 43 68 69 72 70 20 20 20 20     Chirp, Chirp    
	...

00000128 <LCD_cap_clear>:
     128:	20 20 20 20 20 20 20 20 20 20 20 20 00 00                       ..

00000136 <LcdCustomChar>:
     136:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
     146:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
     156:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
     166:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d0 e4       	ldi	r29, 0x40	; 64
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e4 e6       	ldi	r30, 0x64	; 100
     18a:	f7 e1       	ldi	r31, 0x17	; 23
     18c:	00 e0       	ldi	r16, 0x00	; 0
     18e:	0b bf       	out	0x3b, r16	; 59
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x14>
     192:	07 90       	elpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a8 31       	cpi	r26, 0x18	; 24
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0x10>

0000019c <__do_clear_bss>:
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	a8 e1       	ldi	r26, 0x18	; 24
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a1 36       	cpi	r26, 0x61	; 97
     1a8:	b1 07       	cpc	r27, r17
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 ee 03 	call	0x7dc	; 0x7dc <main>
     1b0:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <timer0_init>:


// Initializes timer0 for fast PWM
void timer0_init(void)
begin
	TCCR0A = 0;
     1b8:	14 bc       	out	0x24, r1	; 36
	TIMSK0 = 0;
     1ba:	ee e6       	ldi	r30, 0x6E	; 110
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	10 82       	st	Z, r1
	TCCR0B = 0;
     1c0:	15 bc       	out	0x25, r1	; 37

	// sets to fast_PWM mode (non-inverting) on B.3
	TCCR0A = (1<<COM0A0) | (1<<COM0A1) | (1<<WGM00) | (1<<WGM01);
     1c2:	83 ec       	ldi	r24, 0xC3	; 195
     1c4:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = 1<<TOIE0;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 83       	st	Z, r24
	TCCR0B = 1;    // sets the prescaler to one
     1ca:	85 bd       	out	0x25, r24	; 37
	DDRB = (1<<PINB3) ;// make B.3 an output
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	84 b9       	out	0x04, r24	; 4
end
     1d0:	08 95       	ret

000001d2 <port_init>:
// PORTB - speaker (B.3 is the OC0A that toggles on fast PWM)
// PORTC - LCD
// PORTD - keypad
void port_init(void)
begin
	DDRA = 0xff;    // PORTA is unused and left output low to save power
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xff;    // PORTB is left as an output to drive the speaker with B.3
     1d6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;    // PORTC is used for the LCD and needs to output
     1d8:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xf0;    // PORTD is used for keypad reading and is set to half and half to start
     1da:	80 ef       	ldi	r24, 0xF0	; 240
     1dc:	8a b9       	out	0x0a, r24	; 10

	PORTA = 0x00;    // output low
     1de:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00;    // output low
     1e0:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;    // output low
     1e2:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x0f;    // output low with pull up resistors
     1e4:	8f e0       	ldi	r24, 0x0F	; 15
     1e6:	8b b9       	out	0x0b, r24	; 11
end
     1e8:	08 95       	ret

000001ea <LED_toggle>:
end


void LED_toggle(void)
begin
	LED_timer = t_led;
     1ea:	84 ef       	ldi	r24, 0xF4	; 244
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	90 93 58 03 	sts	0x0358, r25
     1f2:	80 93 57 03 	sts	0x0357, r24
	PORTB ^= 0x01;
     1f6:	85 b1       	in	r24, 0x05	; 5
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	89 27       	eor	r24, r25
     1fc:	85 b9       	out	0x05, r24	; 5
end
     1fe:	08 95       	ret

00000200 <__vector_18>:

// updates the OCR0A register at 62500 Hz
ISR (TIMER0_OVF_vect)
begin 
     200:	1f 92       	push	r1
     202:	0f 92       	push	r0
     204:	0f b6       	in	r0, 0x3f	; 63
     206:	0f 92       	push	r0
     208:	0b b6       	in	r0, 0x3b	; 59
     20a:	0f 92       	push	r0
     20c:	11 24       	eor	r1, r1
     20e:	2f 93       	push	r18
     210:	3f 93       	push	r19
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	ef 93       	push	r30
     218:	ff 93       	push	r31

	if(DDS_en)
     21a:	80 91 42 03 	lds	r24, 0x0342
     21e:	88 23       	and	r24, r24
     220:	09 f4       	brne	.+2      	; 0x224 <__vector_18+0x24>
     222:	79 c0       	rjmp	.+242    	; 0x316 <__vector_18+0x116>
	begin
		//the actual DDS
		accumulator = accumulator + increment ;
     224:	20 91 24 02 	lds	r18, 0x0224
     228:	30 91 25 02 	lds	r19, 0x0225
     22c:	80 91 3a 02 	lds	r24, 0x023A
     230:	90 91 3b 02 	lds	r25, 0x023B
     234:	82 0f       	add	r24, r18
     236:	93 1f       	adc	r25, r19
     238:	90 93 25 02 	sts	0x0225, r25
     23c:	80 93 24 02 	sts	0x0224, r24
		highbyte = (char)(accumulator >> 8) ;
     240:	80 91 24 02 	lds	r24, 0x0224
     244:	90 91 25 02 	lds	r25, 0x0225
     248:	90 93 3e 02 	sts	0x023E, r25
		// output the wavefrom sample
		OCR0A = 128 + (sineTable[highbyte] * rampTable[rampCount]>> 7) ;
     24c:	e0 91 3e 02 	lds	r30, 0x023E
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	e1 5c       	subi	r30, 0xC1	; 193
     254:	fd 4f       	sbci	r31, 0xFD	; 253
     256:	80 81       	ld	r24, Z
     258:	e0 91 40 03 	lds	r30, 0x0340
     25c:	f0 91 41 03 	lds	r31, 0x0341
     260:	e2 5e       	subi	r30, 0xE2	; 226
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	20 81       	ld	r18, Z
     266:	82 02       	muls	r24, r18
     268:	c0 01       	movw	r24, r0
     26a:	11 24       	eor	r1, r1
     26c:	88 0f       	add	r24, r24
     26e:	89 2f       	mov	r24, r25
     270:	88 1f       	adc	r24, r24
     272:	99 0b       	sbc	r25, r25
     274:	80 58       	subi	r24, 0x80	; 128
     276:	87 bd       	out	0x27, r24	; 39

		sample++ ;
     278:	80 91 5b 03 	lds	r24, 0x035B
     27c:	90 91 5c 03 	lds	r25, 0x035C
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	90 93 5c 03 	sts	0x035C, r25
     286:	80 93 5b 03 	sts	0x035B, r24
		if (sample <= RAMPUPEND) rampCount++ ;
     28a:	80 91 5b 03 	lds	r24, 0x035B
     28e:	90 91 5c 03 	lds	r25, 0x035C
     292:	8b 3f       	cpi	r24, 0xFB	; 251
     294:	91 05       	cpc	r25, r1
     296:	48 f4       	brcc	.+18     	; 0x2aa <__vector_18+0xaa>
     298:	80 91 40 03 	lds	r24, 0x0340
     29c:	90 91 41 03 	lds	r25, 0x0341
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	90 93 41 03 	sts	0x0341, r25
     2a6:	80 93 40 03 	sts	0x0340, r24
		if (sample > RAMPUPEND && sample <= RAMPDOWNSTART ) rampCount = 255 ;
     2aa:	80 91 5b 03 	lds	r24, 0x035B
     2ae:	90 91 5c 03 	lds	r25, 0x035C
     2b2:	8b 3f       	cpi	r24, 0xFB	; 251
     2b4:	91 05       	cpc	r25, r1
     2b6:	68 f0       	brcs	.+26     	; 0x2d2 <__vector_18+0xd2>
     2b8:	80 91 5b 03 	lds	r24, 0x035B
     2bc:	90 91 5c 03 	lds	r25, 0x035C
     2c0:	82 57       	subi	r24, 0x72	; 114
     2c2:	92 40       	sbci	r25, 0x02	; 2
     2c4:	30 f4       	brcc	.+12     	; 0x2d2 <__vector_18+0xd2>
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	90 93 41 03 	sts	0x0341, r25
     2ce:	80 93 40 03 	sts	0x0340, r24
		if (sample > RAMPDOWNSTART && sample <= RAMPDOWNEND ) rampCount-- ;
     2d2:	80 91 5b 03 	lds	r24, 0x035B
     2d6:	90 91 5c 03 	lds	r25, 0x035C
     2da:	82 57       	subi	r24, 0x72	; 114
     2dc:	92 40       	sbci	r25, 0x02	; 2
     2de:	80 f0       	brcs	.+32     	; 0x300 <__vector_18+0x100>
     2e0:	80 91 5b 03 	lds	r24, 0x035B
     2e4:	90 91 5c 03 	lds	r25, 0x035C
     2e8:	8c 56       	subi	r24, 0x6C	; 108
     2ea:	93 40       	sbci	r25, 0x03	; 3
     2ec:	48 f4       	brcc	.+18     	; 0x300 <__vector_18+0x100>
     2ee:	80 91 40 03 	lds	r24, 0x0340
     2f2:	90 91 41 03 	lds	r25, 0x0341
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	90 93 41 03 	sts	0x0341, r25
     2fc:	80 93 40 03 	sts	0x0340, r24
		if (sample > RAMPDOWNEND) rampCount = 0;
     300:	80 91 5b 03 	lds	r24, 0x035B
     304:	90 91 5c 03 	lds	r25, 0x035C
     308:	8c 56       	subi	r24, 0x6C	; 108
     30a:	93 40       	sbci	r25, 0x03	; 3
     30c:	20 f0       	brcs	.+8      	; 0x316 <__vector_18+0x116>
     30e:	10 92 41 03 	sts	0x0341, r1
     312:	10 92 40 03 	sts	0x0340, r1
	end

	// generate time base for MAIN
	// 62 counts is about 1 mSec
	count--;
     316:	80 91 55 03 	lds	r24, 0x0355
     31a:	81 50       	subi	r24, 0x01	; 1
     31c:	80 93 55 03 	sts	0x0355, r24
	if (count == 0)
     320:	80 91 55 03 	lds	r24, 0x0355
     324:	88 23       	and	r24, r24
     326:	71 f5       	brne	.+92     	; 0x384 <__vector_18+0x184>
	begin
		if (LED_timer>0)  LED_timer--;
     328:	80 91 57 03 	lds	r24, 0x0357
     32c:	90 91 58 03 	lds	r25, 0x0358
     330:	18 16       	cp	r1, r24
     332:	19 06       	cpc	r1, r25
     334:	4c f4       	brge	.+18     	; 0x348 <__vector_18+0x148>
     336:	80 91 57 03 	lds	r24, 0x0357
     33a:	90 91 58 03 	lds	r25, 0x0358
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	90 93 58 03 	sts	0x0358, r25
     344:	80 93 57 03 	sts	0x0357, r24
		if (state_timer>0) state_timer--;
     348:	80 91 28 02 	lds	r24, 0x0228
     34c:	88 23       	and	r24, r24
     34e:	29 f0       	breq	.+10     	; 0x35a <__vector_18+0x15a>
     350:	80 91 28 02 	lds	r24, 0x0228
     354:	81 50       	subi	r24, 0x01	; 1
     356:	80 93 28 02 	sts	0x0228, r24
		count = countMS;
     35a:	8e e3       	ldi	r24, 0x3E	; 62
     35c:	80 93 55 03 	sts	0x0355, r24
		time_elapsed++; //in mSec
     360:	80 91 1c 01 	lds	r24, 0x011C
     364:	90 91 1d 01 	lds	r25, 0x011D
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	90 93 1d 01 	sts	0x011D, r25
     36e:	80 93 1c 01 	sts	0x011C, r24
		time_elapsed_total++;
     372:	80 91 3c 02 	lds	r24, 0x023C
     376:	90 91 3d 02 	lds	r25, 0x023D
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	90 93 3d 02 	sts	0x023D, r25
     380:	80 93 3c 02 	sts	0x023C, r24
	end 
end 
     384:	ff 91       	pop	r31
     386:	ef 91       	pop	r30
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0b be       	out	0x3b, r0	; 59
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <keypad>:
char keypad(void)
begin
	char butnum = 0;
	char lower = 0;
	char i;
	DDRD = 0xf0;
     39e:	30 ef       	ldi	r19, 0xF0	; 240
     3a0:	3a b9       	out	0x0a, r19	; 10
	PORTD = 0x0f;
     3a2:	9f e0       	ldi	r25, 0x0F	; 15
     3a4:	9b b9       	out	0x0b, r25	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3a6:	2a e1       	ldi	r18, 0x1A	; 26
     3a8:	82 2f       	mov	r24, r18
     3aa:	8a 95       	dec	r24
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <keypad+0xc>
	_delay_us(5);
	lower = PIND & 0x0f;
     3ae:	89 b1       	in	r24, 0x09	; 9
	DDRD = 0x0f;
     3b0:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0xf0;
     3b2:	3b b9       	out	0x0b, r19	; 11
     3b4:	2a 95       	dec	r18
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <keypad+0x16>
	_delay_us(5);
	butnum = PIND & 0xf0;
     3b8:	29 b1       	in	r18, 0x09	; 9
     3ba:	20 7f       	andi	r18, 0xF0	; 240
	butnum |= lower;
     3bc:	8f 70       	andi	r24, 0x0F	; 15
     3be:	28 2b       	or	r18, r24
     3c0:	e7 e0       	ldi	r30, 0x07	; 7
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0

	i = 20;
	for (i=0;i<17;i++)
	begin
		if (key_table[i] == butnum) return(i);
     3c6:	80 81       	ld	r24, Z
     3c8:	82 17       	cp	r24, r18
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <keypad+0x36>
	_delay_us(5);
	butnum = PIND & 0xf0;
	butnum |= lower;

	i = 20;
	for (i=0;i<17;i++)
     3cc:	9f 5f       	subi	r25, 0xFF	; 255
     3ce:	31 96       	adiw	r30, 0x01	; 1
     3d0:	91 31       	cpi	r25, 0x11	; 17
     3d2:	c9 f7       	brne	.-14     	; 0x3c6 <keypad+0x28>
	begin
		if (key_table[i] == butnum) return(i);
	end
	return (i);

end
     3d4:	89 2f       	mov	r24, r25
     3d6:	08 95       	ret

000003d8 <my_str2int>:


// reads in the value of the string and saves it as a number
int my_str2int(char str[])
begin
     3d8:	ac 01       	movw	r20, r24
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <my_str2int+0x8>
	char s2i_count = 0;
	char tens_count = 0;
	int temp = 0;
	int strinteger = 0;

	while(str[s2i_count]!= "/0") s2i_count++;
     3de:	2f 5f       	subi	r18, 0xFF	; 255
     3e0:	fa 01       	movw	r30, r20
     3e2:	e2 0f       	add	r30, r18
     3e4:	f1 1d       	adc	r31, r1
     3e6:	80 81       	ld	r24, Z
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	80 50       	subi	r24, 0x00	; 0
     3ec:	91 40       	sbci	r25, 0x01	; 1
     3ee:	b9 f7       	brne	.-18     	; 0x3de <my_str2int+0x6>
     3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <my_str2int+0x18>

000003f2 <save_parameter>:
end


// saves the recently converted parameter into the relevent global variable
void save_parameter(int data)
begin
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ec 01       	movw	r28, r24
	if (entry_state == b_freq)
     3f8:	80 91 1b 01 	lds	r24, 0x011B
     3fc:	88 23       	and	r24, r24
     3fe:	d1 f4       	brne	.+52     	; 0x434 <save_parameter+0x42>
	begin
		burst_frequency = data;
     400:	d0 93 19 01 	sts	0x0119, r29
     404:	c0 93 18 01 	sts	0x0118, r28
		increment = (int)(burst_frequency/1.047);
     408:	60 91 18 01 	lds	r22, 0x0118
     40c:	70 91 19 01 	lds	r23, 0x0119
     410:	88 27       	eor	r24, r24
     412:	77 fd       	sbrc	r23, 7
     414:	80 95       	com	r24
     416:	98 2f       	mov	r25, r24
     418:	0e 94 ba 06 	call	0xd74	; 0xd74 <__floatsisf>
     41c:	29 e1       	ldi	r18, 0x19	; 25
     41e:	34 e0       	ldi	r19, 0x04	; 4
     420:	46 e8       	ldi	r20, 0x86	; 134
     422:	5f e3       	ldi	r21, 0x3F	; 63
     424:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__divsf3>
     428:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
     42c:	70 93 3b 02 	sts	0x023B, r23
     430:	60 93 3a 02 	sts	0x023A, r22
	end
	if (entry_state == chrp_int) chirp_interval = data;
     434:	80 91 1b 01 	lds	r24, 0x011B
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	21 f4       	brne	.+8      	; 0x444 <save_parameter+0x52>
     43c:	d0 93 60 03 	sts	0x0360, r29
     440:	c0 93 5f 03 	sts	0x035F, r28
	if (entry_state == num_syl) num_syllables = data;
     444:	80 91 1b 01 	lds	r24, 0x011B
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	21 f4       	brne	.+8      	; 0x454 <save_parameter+0x62>
     44c:	d0 93 5a 03 	sts	0x035A, r29
     450:	c0 93 59 03 	sts	0x0359, r28
	if (entry_state == dur_syl) dur_syllables = data;
     454:	80 91 1b 01 	lds	r24, 0x011B
     458:	83 30       	cpi	r24, 0x03	; 3
     45a:	21 f4       	brne	.+8      	; 0x464 <save_parameter+0x72>
     45c:	d0 93 23 02 	sts	0x0223, r29
     460:	c0 93 22 02 	sts	0x0222, r28
	if (entry_state == rpt_int)
     464:	80 91 1b 01 	lds	r24, 0x011B
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	39 f4       	brne	.+14     	; 0x47a <save_parameter+0x88>
	begin
		rpt_interval = data;
     46c:	d0 93 20 02 	sts	0x0220, r29
     470:	c0 93 1f 02 	sts	0x021F, r28
		DDS_en = 1;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 42 03 	sts	0x0342, r24
	end
end
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <update_LCD>:

// displays the current keystr contents on the LCD
void update_LCD(void)
begin
	LCDGotoXY(1,1);
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	0e 94 05 05 	call	0xa0a	; 0xa0a <LCDGotoXY>
	LCDstring(keystr,strlen(keystr));
     488:	a4 e4       	ldi	r26, 0x44	; 68
     48a:	b3 e0       	ldi	r27, 0x03	; 3
     48c:	fd 01       	movw	r30, r26
     48e:	01 90       	ld	r0, Z+
     490:	00 20       	and	r0, r0
     492:	e9 f7       	brne	.-6      	; 0x48e <update_LCD+0xe>
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	ea 1b       	sub	r30, r26
     498:	fb 0b       	sbc	r31, r27
     49a:	cd 01       	movw	r24, r26
     49c:	6e 2f       	mov	r22, r30
     49e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCDstring>
end
     4a2:	08 95       	ret

000004a4 <update_LCD_state_line>:
end


void update_LCD_state_line(void)
begin
	if (entry_state == b_freq) {CopyStringtoLCD(LCD_burst_freq, 0, 0); CopyStringtoLCD(LCD_cap_clear,0,1);}    // copy LCD_burst_freq to LCD line 0 
     4a4:	80 91 1b 01 	lds	r24, 0x011B
     4a8:	88 23       	and	r24, r24
     4aa:	61 f4       	brne	.+24     	; 0x4c4 <update_LCD_state_line+0x20>
     4ac:	8c eb       	ldi	r24, 0xBC	; 188
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     4b8:	88 e2       	ldi	r24, 0x28	; 40
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	41 e0       	ldi	r20, 0x01	; 1
     4c0:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
	if (entry_state == chrp_int) {CopyStringtoLCD(LCD_interval,0, 0);  CopyStringtoLCD(LCD_cap_clear,0,1);}   // copy LCD_interval to LCD line 0
     4c4:	80 91 1b 01 	lds	r24, 0x011B
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	61 f4       	brne	.+24     	; 0x4e4 <update_LCD_state_line+0x40>
     4cc:	8e ec       	ldi	r24, 0xCE	; 206
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     4d8:	88 e2       	ldi	r24, 0x28	; 40
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
	if (entry_state == num_syl) {CopyStringtoLCD(LCD_num_syllable, 0, 0);  CopyStringtoLCD(LCD_cap_clear,0,1);}   // copy LCD_num_syllable to LCD line 0
     4e4:	80 91 1b 01 	lds	r24, 0x011B
     4e8:	82 30       	cpi	r24, 0x02	; 2
     4ea:	61 f4       	brne	.+24     	; 0x504 <update_LCD_state_line+0x60>
     4ec:	80 ee       	ldi	r24, 0xE0	; 224
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     4f8:	88 e2       	ldi	r24, 0x28	; 40
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	41 e0       	ldi	r20, 0x01	; 1
     500:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
	if (entry_state == dur_syl) {CopyStringtoLCD(LCD_dur_syllable, 0, 0);   CopyStringtoLCD(LCD_cap_clear,0,1);}  // copy LCD_dur_syllable to LCD line 0
     504:	80 91 1b 01 	lds	r24, 0x011B
     508:	83 30       	cpi	r24, 0x03	; 3
     50a:	61 f4       	brne	.+24     	; 0x524 <update_LCD_state_line+0x80>
     50c:	82 ef       	ldi	r24, 0xF2	; 242
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     518:	88 e2       	ldi	r24, 0x28	; 40
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
	if (entry_state == rpt_int) {CopyStringtoLCD(LCD_rpt_interval, 0, 0);  CopyStringtoLCD(LCD_cap_clear,0,1);}   // copy LCD_rpt_interval to LCD line 0 
     524:	80 91 1b 01 	lds	r24, 0x011B
     528:	84 30       	cpi	r24, 0x04	; 4
     52a:	61 f4       	brne	.+24     	; 0x544 <update_LCD_state_line+0xa0>
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     538:	88 e2       	ldi	r24, 0x28	; 40
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
	if (entry_state == playing) {CopyStringtoLCD(LCD_playing, 0, 0); CopyStringtoLCD(LCD_cap_clear,0,1);}    // copy LCD_playing to LCD line 0
     544:	80 91 1b 01 	lds	r24, 0x011B
     548:	85 30       	cpi	r24, 0x05	; 5
     54a:	61 f4       	brne	.+24     	; 0x564 <update_LCD_state_line+0xc0>
     54c:	86 e1       	ldi	r24, 0x16	; 22
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     558:	88 e2       	ldi	r24, 0x28	; 40
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
     564:	08 95       	ret

00000566 <checkStop>:
end

void checkStop(void)
begin
	//check stop button
	if (keypad() == 13) 
     566:	0e 94 cf 01 	call	0x39e	; 0x39e <keypad>
     56a:	8d 30       	cpi	r24, 0x0D	; 13
     56c:	59 f4       	brne	.+22     	; 0x584 <checkStop+0x1e>
	begin
		DDS_en = 0;
     56e:	10 92 42 03 	sts	0x0342, r1
		entry_state = b_freq;
     572:	10 92 1b 01 	sts	0x011B, r1
		update_LCD_state_line();
     576:	0e 94 52 02 	call	0x4a4	; 0x4a4 <update_LCD_state_line>
		current_state = released;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	80 93 1e 02 	sts	0x021E, r24
		stopped = 1;
     580:	80 93 1a 01 	sts	0x011A, r24
     584:	08 95       	ret

00000586 <update_entry_state>:


// state machine for parameter entry
void update_entry_state(void)
begin
	entry_state++;
     586:	80 91 1b 01 	lds	r24, 0x011B
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	80 93 1b 01 	sts	0x011B, r24
	if(entry_state == playing) DDS_en = 1; stopped = 0;
     590:	80 91 1b 01 	lds	r24, 0x011B
     594:	85 30       	cpi	r24, 0x05	; 5
     596:	19 f4       	brne	.+6      	; 0x59e <update_entry_state+0x18>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 42 03 	sts	0x0342, r24
     59e:	10 92 1a 01 	sts	0x011A, r1
	update_LCD_state_line();
     5a2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <update_LCD_state_line>
	if(entry_state != playing) current_state = released;
     5a6:	80 91 1b 01 	lds	r24, 0x011B
     5aa:	85 30       	cpi	r24, 0x05	; 5
     5ac:	19 f0       	breq	.+6      	; 0x5b4 <update_entry_state+0x2e>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	80 93 1e 02 	sts	0x021E, r24
     5b4:	08 95       	ret

000005b6 <update_state>:
// state machine for keypad detection
void update_state(void)
begin
	char nn;
	int parameter_value;
	state_timer = t_state;
     5b6:	88 e2       	ldi	r24, 0x28	; 40
     5b8:	80 93 28 02 	sts	0x0228, r24

	switch(current_state)
     5bc:	80 91 1e 02 	lds	r24, 0x021E
     5c0:	83 30       	cpi	r24, 0x03	; 3
     5c2:	51 f1       	breq	.+84     	; 0x618 <update_state+0x62>
     5c4:	84 30       	cpi	r24, 0x04	; 4
     5c6:	28 f4       	brcc	.+10     	; 0x5d2 <update_state+0x1c>
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	b1 f0       	breq	.+44     	; 0x5f8 <update_state+0x42>
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	d0 f4       	brcc	.+52     	; 0x604 <update_state+0x4e>
     5d0:	0c c0       	rjmp	.+24     	; 0x5ea <update_state+0x34>
     5d2:	85 30       	cpi	r24, 0x05	; 5
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <update_state+0x22>
     5d6:	47 c0       	rjmp	.+142    	; 0x666 <update_state+0xb0>
     5d8:	85 30       	cpi	r24, 0x05	; 5
     5da:	e8 f1       	brcs	.+122    	; 0x656 <update_state+0xa0>
     5dc:	86 30       	cpi	r24, 0x06	; 6
     5de:	09 f4       	brne	.+2      	; 0x5e2 <update_state+0x2c>
     5e0:	52 c0       	rjmp	.+164    	; 0x686 <update_state+0xd0>
     5e2:	87 30       	cpi	r24, 0x07	; 7
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <update_state+0x32>
     5e6:	7f c0       	rjmp	.+254    	; 0x6e6 <update_state+0x130>
     5e8:	56 c0       	rjmp	.+172    	; 0x696 <update_state+0xe0>
	begin
		case done:
		if (entry_state != playing)
     5ea:	80 91 1b 01 	lds	r24, 0x011B
     5ee:	85 30       	cpi	r24, 0x05	; 5
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <update_state+0x3e>
     5f2:	79 c0       	rjmp	.+242    	; 0x6e6 <update_state+0x130>
			current_state = released;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0d c0       	rjmp	.+26     	; 0x612 <update_state+0x5c>
		break;

		case released:
		if (button_number < 17)
     5f8:	80 91 56 03 	lds	r24, 0x0356
     5fc:	81 31       	cpi	r24, 0x11	; 17
     5fe:	f0 f5       	brcc	.+124    	; 0x67c <update_state+0xc6>
		begin
			current_state = maybe_pressed;
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	50 c0       	rjmp	.+160    	; 0x6a4 <update_state+0xee>
		end
		else button_number = keypad();
		break;

		case maybe_pressed:
		if (button_number == maybe_button)	current_state = detect_term;	
     604:	90 91 56 03 	lds	r25, 0x0356
     608:	80 91 21 02 	lds	r24, 0x0221
     60c:	98 17       	cp	r25, r24
     60e:	99 f5       	brne	.+102    	; 0x676 <update_state+0xc0>
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	80 93 1e 02 	sts	0x021E, r24
     616:	08 95       	ret
			button_number = keypad();
		end
		break;

		case detect_term:
		if (button_number == 12)
     618:	80 91 56 03 	lds	r24, 0x0356
     61c:	8c 30       	cpi	r24, 0x0C	; 12
     61e:	39 f4       	brne	.+14     	; 0x62e <update_state+0x78>
		begin
			keystr[LCD_char_count ] = '\0';
     620:	e0 91 3f 03 	lds	r30, 0x033F
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ec 5b       	subi	r30, 0xBC	; 188
     628:	fc 4f       	sbci	r31, 0xFC	; 252
     62a:	10 82       	st	Z, r1
     62c:	3a c0       	rjmp	.+116    	; 0x6a2 <update_state+0xec>
			current_state = still_term;
			maybe_button = keypad();
		end
		else 
		begin
			if (LCD_char_count <17) keystr[LCD_char_count ++] = button_number + '0';
     62e:	80 91 3f 03 	lds	r24, 0x033F
     632:	81 31       	cpi	r24, 0x11	; 17
     634:	68 f4       	brcc	.+26     	; 0x650 <update_state+0x9a>
     636:	80 91 3f 03 	lds	r24, 0x033F
     63a:	e8 2f       	mov	r30, r24
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	90 91 56 03 	lds	r25, 0x0356
     642:	90 5d       	subi	r25, 0xD0	; 208
     644:	ec 5b       	subi	r30, 0xBC	; 188
     646:	fc 4f       	sbci	r31, 0xFC	; 252
     648:	90 83       	st	Z, r25
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	80 93 3f 03 	sts	0x033F, r24
			update_LCD();
     650:	0e 94 40 02 	call	0x480	; 0x480 <update_LCD>
     654:	0e c0       	rjmp	.+28     	; 0x672 <update_state+0xbc>
			maybe_button = keypad();
		end
		break;

		case pressed:
		if (maybe_button == button_number) maybe_button = keypad();
     656:	90 91 21 02 	lds	r25, 0x0221
     65a:	80 91 56 03 	lds	r24, 0x0356
     65e:	98 17       	cp	r25, r24
     660:	19 f1       	breq	.+70     	; 0x6a8 <update_state+0xf2>
		else
		begin
			current_state = maybe_released;
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	1f c0       	rjmp	.+62     	; 0x6a4 <update_state+0xee>
			maybe_button = keypad();
		end
		break;

		case maybe_released:
		if (maybe_button == button_number)
     666:	90 91 21 02 	lds	r25, 0x0221
     66a:	80 91 56 03 	lds	r24, 0x0356
     66e:	98 17       	cp	r25, r24
     670:	11 f4       	brne	.+4      	; 0x676 <update_state+0xc0>
		begin
			current_state = pressed;
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	17 c0       	rjmp	.+46     	; 0x6a4 <update_state+0xee>
			maybe_button = keypad();
		end
		else 
		begin
			current_state = released;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 1e 02 	sts	0x021E, r24
			button_number = keypad();
     67c:	0e 94 cf 01 	call	0x39e	; 0x39e <keypad>
     680:	80 93 56 03 	sts	0x0356, r24
     684:	08 95       	ret
		end
		break;

		case still_term:
		if (button_number == maybe_button) maybe_button = keypad();
     686:	90 91 56 03 	lds	r25, 0x0356
     68a:	80 91 21 02 	lds	r24, 0x0221
     68e:	98 17       	cp	r25, r24
     690:	59 f0       	breq	.+22     	; 0x6a8 <update_state+0xf2>
		else 
		begin
			current_state = maybe_term_released;
     692:	87 e0       	ldi	r24, 0x07	; 7
     694:	07 c0       	rjmp	.+14     	; 0x6a4 <update_state+0xee>
			maybe_button = keypad();
		end
		break;

		case maybe_term_released:
		if (button_number == maybe_button) 
     696:	90 91 56 03 	lds	r25, 0x0356
     69a:	80 91 21 02 	lds	r24, 0x0221
     69e:	98 17       	cp	r25, r24
     6a0:	41 f4       	brne	.+16     	; 0x6b2 <update_state+0xfc>
		begin
			current_state = still_term;
     6a2:	86 e0       	ldi	r24, 0x06	; 6
     6a4:	80 93 1e 02 	sts	0x021E, r24
			maybe_button = keypad();
     6a8:	0e 94 cf 01 	call	0x39e	; 0x39e <keypad>
     6ac:	80 93 21 02 	sts	0x0221, r24
     6b0:	08 95       	ret
		end
		else 
		begin
			button_number = keypad();
     6b2:	0e 94 cf 01 	call	0x39e	; 0x39e <keypad>
     6b6:	80 93 56 03 	sts	0x0356, r24
			current_state = done;
     6ba:	10 92 1e 02 	sts	0x021E, r1
			parameter_value = atoi(keystr);
     6be:	84 e4       	ldi	r24, 0x44	; 68
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 b3 08 	call	0x1166	; 0x1166 <atoi>
			save_parameter(parameter_value);
     6c6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <save_parameter>
			LCD_char_count = 0;
     6ca:	10 92 3f 03 	sts	0x033F, r1
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
			for (nn = 0; nn<16; nn++) keystr[nn] = '\0';
     6d2:	fc 01       	movw	r30, r24
     6d4:	ec 5b       	subi	r30, 0xBC	; 188
     6d6:	fc 4f       	sbci	r31, 0xFC	; 252
     6d8:	10 82       	st	Z, r1
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	80 31       	cpi	r24, 0x10	; 16
     6de:	91 05       	cpc	r25, r1
     6e0:	c1 f7       	brne	.-16     	; 0x6d2 <update_state+0x11c>
			update_entry_state();
     6e2:	0e 94 c3 02 	call	0x586	; 0x586 <update_entry_state>
     6e6:	08 95       	ret

000006e8 <LCD_init>:
end

void LCD_init(void)
begin
	// start the LCD 
	LCDinit();	//initialize the display
     6e8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LCDinit>
	LCDcursorOFF();
     6ec:	0e 94 b7 05 	call	0xb6e	; 0xb6e <LCDcursorOFF>
	LCDclr();				//clear the display
     6f0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <LCDclr>
	LCDGotoXY(0,0);
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 05 05 	call	0xa0a	; 0xa0a <LCDGotoXY>
	CopyStringtoLCD(LCD_initialize, 0, 0);
     6fc:	8a ea       	ldi	r24, 0xAA	; 170
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	0e 94 14 05 	call	0xa28	; 0xa28 <CopyStringtoLCD>
	LCD_char_count = 0;
     708:	10 92 3f 03 	sts	0x033F, r1
end
     70c:	08 95       	ret

0000070e <DDS_init>:


// Allocates a 16-bit mem location for phase loop of DDS
// Creates a sine table in memory to access in DDS
void DDS_init(void)
begin
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29

	accumulator = 0;
     712:	10 92 25 02 	sts	0x0225, r1
     716:	10 92 24 02 	sts	0x0224, r1
	DDS_en = 0;
     71a:	10 92 42 03 	sts	0x0342, r1
	increment = 996; 
     71e:	84 ee       	ldi	r24, 0xE4	; 228
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	90 93 3b 02 	sts	0x023B, r25
     726:	80 93 3a 02 	sts	0x023A, r24
     72a:	c0 e0       	ldi	r28, 0x00	; 0
     72c:	d0 e0       	ldi	r29, 0x00	; 0

	// init the sine table
	for (unsigned int i = 0; i < 256; i++)
	begin
		sineTable[i] = (char)(127.0 * sin(6.283*((float)i)/256.0));
     72e:	be 01       	movw	r22, r28
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 b8 06 	call	0xd70	; 0xd70 <__floatunsisf>
     738:	26 e5       	ldi	r18, 0x56	; 86
     73a:	3e e0       	ldi	r19, 0x0E	; 14
     73c:	49 ec       	ldi	r20, 0xC9	; 201
     73e:	50 e4       	ldi	r21, 0x40	; 64
     740:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e8       	ldi	r20, 0x80	; 128
     74a:	5b e3       	ldi	r21, 0x3B	; 59
     74c:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
     750:	0e 94 a9 07 	call	0xf52	; 0xf52 <sin>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	4e ef       	ldi	r20, 0xFE	; 254
     75a:	52 e4       	ldi	r21, 0x42	; 66
     75c:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3>
     760:	0e 94 8c 06 	call	0xd18	; 0xd18 <__fixunssfsi>
     764:	fe 01       	movw	r30, r28
     766:	e1 5c       	subi	r30, 0xC1	; 193
     768:	fd 4f       	sbci	r31, 0xFD	; 253
     76a:	60 83       	st	Z, r22
		// the following table needs 
		// rampTable[0]=0 and rampTable[255]=127
		rampTable[i] = i>>1 ;
     76c:	ce 01       	movw	r24, r28
     76e:	96 95       	lsr	r25
     770:	87 95       	ror	r24
     772:	fe 01       	movw	r30, r28
     774:	e2 5e       	subi	r30, 0xE2	; 226
     776:	fe 4f       	sbci	r31, 0xFE	; 254
     778:	80 83       	st	Z, r24
	accumulator = 0;
	DDS_en = 0;
	increment = 996; 

	// init the sine table
	for (unsigned int i = 0; i < 256; i++)
     77a:	21 96       	adiw	r28, 0x01	; 1
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	c0 30       	cpi	r28, 0x00	; 0
     780:	d8 07       	cpc	r29, r24
     782:	a9 f6       	brne	.-86     	; 0x72e <DDS_init+0x20>
		rampTable[i] = i>>1 ;
	end

	// init the time counter
   //time=0;
   OCR0A = 128 ; // set PWM to half full scale
     784:	80 e8       	ldi	r24, 0x80	; 128
     786:	87 bd       	out	0x27, r24	; 39
end
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <initialize>:
end

void initialize(void)
begin

	port_init();
     78e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <port_init>
	timer0_init();
     792:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <timer0_init>
	DDS_init();
     796:	0e 94 87 03 	call	0x70e	; 0x70e <DDS_init>
	LCD_init();
     79a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_init>
	sei();
     79e:	78 94       	sei

	state_timer = t_state;
     7a0:	88 e2       	ldi	r24, 0x28	; 40
     7a2:	80 93 28 02 	sts	0x0228, r24
	current_state = released;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 1e 02 	sts	0x021E, r24
	entry_state = -1;
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	80 93 1b 01 	sts	0x011B, r24
	LED_timer = t_led;
     7b2:	84 ef       	ldi	r24, 0xF4	; 244
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	90 93 58 03 	sts	0x0358, r25
     7ba:	80 93 57 03 	sts	0x0357, r24
	count = 0;
     7be:	10 92 55 03 	sts	0x0355, r1
	time_elapsed = 0;
     7c2:	10 92 1d 01 	sts	0x011D, r1
     7c6:	10 92 1c 01 	sts	0x011C, r1
	time_elapsed_total = 0;
     7ca:	10 92 3d 02 	sts	0x023D, r1
     7ce:	10 92 3c 02 	sts	0x023C, r1
	stopped = 0;
     7d2:	10 92 1a 01 	sts	0x011A, r1
	update_entry_state();
     7d6:	0e 94 c3 02 	call	0x586	; 0x586 <update_entry_state>
end
     7da:	08 95       	ret

000007dc <main>:
		stopped = 1;
	end // keypad
end

int main(void)
begin
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
	initialize();
     7e8:	0e 94 c7 03 	call	0x78e	; 0x78e <initialize>
end


void LED_toggle(void)
begin
	LED_timer = t_led;
     7ec:	04 ef       	ldi	r16, 0xF4	; 244
     7ee:	11 e0       	ldi	r17, 0x01	; 1
	PORTB ^= 0x01;
     7f0:	ee 24       	eor	r14, r14
     7f2:	e3 94       	inc	r14
					accumulator = 0 ;
					// start a new  mSec cycle 
					time_elapsed = 0;

					// after dur_syllables milliSec turn off PWM
		     		DDS_en = 1;
     7f4:	ff 24       	eor	r15, r15
     7f6:	f3 94       	inc	r15
	initialize();

//?????????????????????????????????????????????????????????? DDS_en 
	while(1)
	begin
		if (!LED_timer) LED_toggle();
     7f8:	80 91 57 03 	lds	r24, 0x0357
     7fc:	90 91 58 03 	lds	r25, 0x0358
     800:	89 2b       	or	r24, r25
     802:	39 f4       	brne	.+14     	; 0x812 <main+0x36>
end


void LED_toggle(void)
begin
	LED_timer = t_led;
     804:	10 93 58 03 	sts	0x0358, r17
     808:	00 93 57 03 	sts	0x0357, r16
	PORTB ^= 0x01;
     80c:	85 b1       	in	r24, 0x05	; 5
     80e:	8e 25       	eor	r24, r14
     810:	85 b9       	out	0x05, r24	; 5

//?????????????????????????????????????????????????????????? DDS_en 
	while(1)
	begin
		if (!LED_timer) LED_toggle();
		if (!state_timer) update_state();
     812:	80 91 28 02 	lds	r24, 0x0228
     816:	88 23       	and	r24, r24
     818:	09 f0       	breq	.+2      	; 0x81c <main+0x40>
     81a:	5d c0       	rjmp	.+186    	; 0x8d6 <main+0xfa>
     81c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <update_state>
     820:	5a c0       	rjmp	.+180    	; 0x8d6 <main+0xfa>
		checkStop();
		while(DDS_en && !stopped)
		begin
			if (!LED_timer) LED_toggle();
     822:	80 91 57 03 	lds	r24, 0x0357
     826:	90 91 58 03 	lds	r25, 0x0358
     82a:	89 2b       	or	r24, r25
     82c:	39 f4       	brne	.+14     	; 0x83c <main+0x60>
end


void LED_toggle(void)
begin
	LED_timer = t_led;
     82e:	10 93 58 03 	sts	0x0358, r17
     832:	00 93 57 03 	sts	0x0357, r16
	PORTB ^= 0x01;
     836:	85 b1       	in	r24, 0x05	; 5
     838:	8e 25       	eor	r24, r14
     83a:	85 b9       	out	0x05, r24	; 5
		checkStop();
		while(DDS_en && !stopped)
		begin
			if (!LED_timer) LED_toggle();

			if (time_elapsed_total >= chirp_interval)
     83c:	20 91 3c 02 	lds	r18, 0x023C
     840:	30 91 3d 02 	lds	r19, 0x023D
     844:	80 91 5f 03 	lds	r24, 0x035F
     848:	90 91 60 03 	lds	r25, 0x0360
     84c:	28 17       	cp	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	08 f4       	brcc	.+2      	; 0x854 <main+0x78>
     852:	41 c0       	rjmp	.+130    	; 0x8d6 <main+0xfa>
			begin
				time_elapsed_total = 0;
     854:	10 92 3d 02 	sts	0x023D, r1
     858:	10 92 3c 02 	sts	0x023C, r1
     85c:	c0 e0       	ldi	r28, 0x00	; 0
     85e:	d0 e0       	ldi	r29, 0x00	; 0
     860:	33 c0       	rjmp	.+102    	; 0x8c8 <main+0xec>
				for (unsigned int j = 0; j < num_syllables; j++)
				begin
					// init ramp variables
					sample = 0 ;
     862:	10 92 5c 03 	sts	0x035C, r1
     866:	10 92 5b 03 	sts	0x035B, r1
					rampCount = 0;
     86a:	10 92 41 03 	sts	0x0341, r1
     86e:	10 92 40 03 	sts	0x0340, r1
					// phase lock the sine generator DDS
					accumulator = 0 ;
     872:	10 92 25 02 	sts	0x0225, r1
     876:	10 92 24 02 	sts	0x0224, r1
					// start a new  mSec cycle 
					time_elapsed = 0;
     87a:	10 92 1d 01 	sts	0x011D, r1
     87e:	10 92 1c 01 	sts	0x011C, r1

					// after dur_syllables milliSec turn off PWM
		     		DDS_en = 1;
     882:	f0 92 42 03 	sts	0x0342, r15
     886:	02 c0       	rjmp	.+4      	; 0x88c <main+0xb0>
		     		while (time_elapsed < dur_syllables) checkStop();
     888:	0e 94 b3 02 	call	0x566	; 0x566 <checkStop>
     88c:	20 91 1c 01 	lds	r18, 0x011C
     890:	30 91 1d 01 	lds	r19, 0x011D
     894:	80 91 22 02 	lds	r24, 0x0222
     898:	90 91 23 02 	lds	r25, 0x0223
     89c:	28 17       	cp	r18, r24
     89e:	39 07       	cpc	r19, r25
     8a0:	98 f3       	brcs	.-26     	; 0x888 <main+0xac>
		     		DDS_en = 0;
     8a2:	10 92 42 03 	sts	0x0342, r1
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <main+0xd0>

					while (time_elapsed < rpt_interval) checkStop();
     8a8:	0e 94 b3 02 	call	0x566	; 0x566 <checkStop>
     8ac:	20 91 1c 01 	lds	r18, 0x011C
     8b0:	30 91 1d 01 	lds	r19, 0x011D
     8b4:	80 91 1f 02 	lds	r24, 0x021F
     8b8:	90 91 20 02 	lds	r25, 0x0220
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	98 f3       	brcs	.-26     	; 0x8a8 <main+0xcc>
					DDS_en = 1;
     8c2:	f0 92 42 03 	sts	0x0342, r15
			if (!LED_timer) LED_toggle();

			if (time_elapsed_total >= chirp_interval)
			begin
				time_elapsed_total = 0;
				for (unsigned int j = 0; j < num_syllables; j++)
     8c6:	21 96       	adiw	r28, 0x01	; 1
     8c8:	80 91 59 03 	lds	r24, 0x0359
     8cc:	90 91 5a 03 	lds	r25, 0x035A
     8d0:	c8 17       	cp	r28, r24
     8d2:	d9 07       	cpc	r29, r25
     8d4:	30 f2       	brcs	.-116    	; 0x862 <main+0x86>

					while (time_elapsed < rpt_interval) checkStop();
					DDS_en = 1;
		     	end // for j
		    end // if time_elapsed
			checkStop();
     8d6:	0e 94 b3 02 	call	0x566	; 0x566 <checkStop>
	while(1)
	begin
		if (!LED_timer) LED_toggle();
		if (!state_timer) update_state();
		checkStop();
		while(DDS_en && !stopped)
     8da:	80 91 42 03 	lds	r24, 0x0342
     8de:	88 23       	and	r24, r24
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <main+0x108>
     8e2:	8a cf       	rjmp	.-236    	; 0x7f8 <main+0x1c>
     8e4:	80 91 1a 01 	lds	r24, 0x011A
     8e8:	88 23       	and	r24, r24
     8ea:	09 f0       	breq	.+2      	; 0x8ee <main+0x112>
     8ec:	85 cf       	rjmp	.-246    	; 0x7f8 <main+0x1c>
     8ee:	99 cf       	rjmp	.-206    	; 0x822 <main+0x46>

000008f0 <write_LCD>:
						  0xdb, 0xbb, 0x7e, 0x7d,
						  0x7b, 0x77, 0xe7, 0xb7};

// write to LCD
void write_LCD(int num)
begin
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
	sprintf(lcd_buffer,"%-i", num);
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <write_LCD+0x6>
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <write_LCD+0x8>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <write_LCD+0xa>
     8fa:	ed b7       	in	r30, 0x3d	; 61
     8fc:	fe b7       	in	r31, 0x3e	; 62
     8fe:	31 96       	adiw	r30, 0x01	; 1
     900:	09 e2       	ldi	r16, 0x29	; 41
     902:	12 e0       	ldi	r17, 0x02	; 2
     904:	ad b7       	in	r26, 0x3d	; 61
     906:	be b7       	in	r27, 0x3e	; 62
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	1c 93       	st	X, r17
     90c:	0e 93       	st	-X, r16
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	23 e0       	ldi	r18, 0x03	; 3
     912:	31 e0       	ldi	r19, 0x01	; 1
     914:	33 83       	std	Z+3, r19	; 0x03
     916:	22 83       	std	Z+2, r18	; 0x02
     918:	95 83       	std	Z+5, r25	; 0x05
     91a:	84 83       	std	Z+4, r24	; 0x04
     91c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <sprintf>
	//sprintf(lcd_buffer + strlen(lcd_buffer), "%c", '.');
	//sprintf(lcd_buffer + strlen(lcd_buffer), "%-i nf  ", capacitance % 10);
	LCDGotoXY(0, 1);
     920:	8d b7       	in	r24, 0x3d	; 61
     922:	9e b7       	in	r25, 0x3e	; 62
     924:	06 96       	adiw	r24, 0x06	; 6
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	9e bf       	out	0x3e, r25	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	8d bf       	out	0x3d, r24	; 61
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	0e 94 05 05 	call	0xa0a	; 0xa0a <LCDGotoXY>
	LCDstring(lcd_buffer, strlen(lcd_buffer));
     938:	f8 01       	movw	r30, r16
     93a:	01 90       	ld	r0, Z+
     93c:	00 20       	and	r0, r0
     93e:	e9 f7       	brne	.-6      	; 0x93a <write_LCD+0x4a>
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	e0 1b       	sub	r30, r16
     944:	f1 0b       	sbc	r31, r17
     946:	c8 01       	movw	r24, r16
     948:	6e 2f       	mov	r22, r30
     94a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCDstring>
	//CopyStringtoLCD("test", 1, 1);
end
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <LCDsendChar>:
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{

#ifdef LCD_4bit
	//4 bit part
	LDP=(ch&0b11110000);
     954:	28 2f       	mov	r18, r24
     956:	20 7f       	andi	r18, 0xF0	; 240
     958:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_RS;
     95a:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     95c:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     95e:	20 e4       	ldi	r18, 0x40	; 64
     960:	3f e1       	ldi	r19, 0x1F	; 31
     962:	f9 01       	movw	r30, r18
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <LCDsendChar+0x10>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     968:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     96a:	40 98       	cbi	0x08, 0	; 8
     96c:	f9 01       	movw	r30, r18
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <LCDsendChar+0x1a>
	_delay_ms(2);
	LDP=((ch&0b00001111)<<4);
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	44 e0       	ldi	r20, 0x04	; 4
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	4a 95       	dec	r20
     97c:	e1 f7       	brne	.-8      	; 0x976 <LCDsendChar+0x22>
     97e:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_RS;
     980:	40 9a       	sbi	0x08, 0	; 8
	LCP|=1<<LCD_E;		
     982:	42 9a       	sbi	0x08, 2	; 8
     984:	c9 01       	movw	r24, r18
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <LCDsendChar+0x32>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
     98a:	42 98       	cbi	0x08, 2	; 8
	LCP&=~(1<<LCD_RS);
     98c:	40 98       	cbi	0x08, 0	; 8
     98e:	c9 01       	movw	r24, r18
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <LCDsendChar+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(2);
#endif
}
     994:	08 95       	ret

00000996 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
#ifdef LCD_4bit	
	//4 bit part
	LDP=(cmd&0b11110000);
     996:	28 2f       	mov	r18, r24
     998:	20 7f       	andi	r18, 0xF0	; 240
     99a:	28 b9       	out	0x08, r18	; 8
	LCP|=1<<LCD_E;		
     99c:	42 9a       	sbi	0x08, 2	; 8
     99e:	20 e4       	ldi	r18, 0x40	; 64
     9a0:	3f e1       	ldi	r19, 0x1F	; 31
     9a2:	f9 01       	movw	r30, r18
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <LCDsendCommand+0xe>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     9a8:	42 98       	cbi	0x08, 2	; 8
     9aa:	f9 01       	movw	r30, r18
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <LCDsendCommand+0x16>
	_delay_ms(2);
	LDP=((cmd&0b00001111)<<4);	
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	54 e0       	ldi	r21, 0x04	; 4
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	5a 95       	dec	r21
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <LCDsendCommand+0x1e>
     9bc:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E;		
     9be:	42 9a       	sbi	0x08, 2	; 8
     9c0:	c9 01       	movw	r24, r18
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <LCDsendCommand+0x2c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     9c6:	42 98       	cbi	0x08, 2	; 8
     9c8:	c9 01       	movw	r24, r18
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <LCDsendCommand+0x34>
	LCP|=1<<LCD_E;		
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
     9ce:	08 95       	ret

000009d0 <LCDclr>:

#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     9d6:	08 95       	ret

000009d8 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     9de:	08 95       	ret

000009e0 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	49 f0       	breq	.+18     	; 0xa00 <LCDstring+0x20>
     9ee:	ec 01       	movw	r28, r24
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
     9f4:	89 91       	ld	r24, Y+
     9f6:	0e 94 aa 04 	call	0x954	; 0x954 <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
     9fa:	1f 5f       	subi	r17, 0xFF	; 255
     9fc:	10 17       	cp	r17, r16
     9fe:	d0 f3       	brcs	.-12     	; 0x9f4 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     a0a:	62 30       	cpi	r22, 0x02	; 2
     a0c:	31 f0       	breq	.+12     	; 0xa1a <LCDGotoXY+0x10>
     a0e:	63 30       	cpi	r22, 0x03	; 3
     a10:	31 f0       	breq	.+12     	; 0xa1e <LCDGotoXY+0x14>
     a12:	61 30       	cpi	r22, 0x01	; 1
     a14:	29 f4       	brne	.+10     	; 0xa20 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     a16:	80 5c       	subi	r24, 0xC0	; 192
     a18:	03 c0       	rjmp	.+6      	; 0xa20 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     a1a:	8c 5e       	subi	r24, 0xEC	; 236
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     a1e:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     a20:	80 68       	ori	r24, 0x80	; 128
     a22:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
	
}
     a26:	08 95       	ret

00000a28 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	ec 01       	movw	r28, r24
     a30:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     a32:	64 2f       	mov	r22, r20
     a34:	0e 94 05 05 	call	0xa0a	; 0xa0a <LCDGotoXY>
     a38:	10 e0       	ldi	r17, 0x00	; 0
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     a3c:	0e 94 aa 04 	call	0x954	; 0x954 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     a40:	1f 5f       	subi	r17, 0xFF	; 255
     a42:	fe 01       	movw	r30, r28
     a44:	e1 0f       	add	r30, r17
     a46:	f1 1d       	adc	r31, r1
     a48:	84 91       	lpm	r24, Z+
     a4a:	88 23       	and	r24, r24
     a4c:	b9 f7       	brne	.-18     	; 0xa3c <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	08 95       	ret

00000a56 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	7c 01       	movw	r14, r24
     a64:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     a66:	11 0f       	add	r17, r17
     a68:	11 0f       	add	r17, r17
     a6a:	11 0f       	add	r17, r17
     a6c:	10 64       	ori	r17, 0x40	; 64
     a6e:	c0 e0       	ldi	r28, 0x00	; 0
     a70:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     a72:	f7 01       	movw	r30, r14
     a74:	ec 0f       	add	r30, r28
     a76:	fd 1f       	adc	r31, r29
     a78:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     a7a:	81 2f       	mov	r24, r17
     a7c:	8c 0f       	add	r24, r28
     a7e:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
		LCDsendChar(pcc);
     a82:	80 2f       	mov	r24, r16
     a84:	0e 94 aa 04 	call	0x954	; 0x954 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     a88:	21 96       	adiw	r28, 0x01	; 1
     a8a:	c8 30       	cpi	r28, 0x08	; 8
     a8c:	d1 05       	cpc	r29, r1
     a8e:	89 f7       	brne	.-30     	; 0xa72 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	08 95       	ret

00000a9e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(2);	
#endif
}
void LCDinit(void)//Initializes LCD
{
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	80 e6       	ldi	r24, 0x60	; 96
     aa6:	9a ee       	ldi	r25, 0xEA	; 234
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <LCDinit+0xa>
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	LDP=0x00;
     aac:	18 b8       	out	0x08, r1	; 8
	LCP=0x00;
     aae:	18 b8       	out	0x08, r1	; 8
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     ab0:	87 b1       	in	r24, 0x07	; 7
     ab2:	80 6f       	ori	r24, 0xF0	; 240
     ab4:	87 b9       	out	0x07, r24	; 7
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     ab6:	87 b1       	in	r24, 0x07	; 7
     ab8:	87 60       	ori	r24, 0x07	; 7
     aba:	87 b9       	out	0x07, r24	; 7
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     abc:	80 e3       	ldi	r24, 0x30	; 48
     abe:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ac0:	42 9a       	sbi	0x08, 2	; 8
     ac2:	20 e4       	ldi	r18, 0x40	; 64
     ac4:	3f e1       	ldi	r19, 0x1F	; 31
     ac6:	f9 01       	movw	r30, r18
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <LCDinit+0x2a>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     acc:	42 98       	cbi	0x08, 2	; 8
     ace:	f9 01       	movw	r30, r18
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <LCDinit+0x32>
	_delay_ms(2);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ad4:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ad6:	42 9a       	sbi	0x08, 2	; 8
     ad8:	c9 01       	movw	r24, r18
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <LCDinit+0x3c>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     ade:	42 98       	cbi	0x08, 2	; 8
     ae0:	c9 01       	movw	r24, r18
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <LCDinit+0x44>
	_delay_ms(2);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     ae6:	80 e2       	ldi	r24, 0x20	; 32
     ae8:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     aea:	42 9a       	sbi	0x08, 2	; 8
     aec:	c9 01       	movw	r24, r18
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	f1 f7       	brne	.-4      	; 0xaee <LCDinit+0x50>
	_delay_ms(2);
	LCP&=~(1<<LCD_E);
     af2:	42 98       	cbi	0x08, 2	; 8
     af4:	c9 01       	movw	r24, r18
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCDinit+0x58>
	_delay_ms(2);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     afa:	88 e2       	ldi	r24, 0x28	; 40
     afc:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     b00:	8c e0       	ldi	r24, 0x0C	; 12
     b02:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
     b06:	c6 e3       	ldi	r28, 0x36	; 54
     b08:	d1 e0       	ldi	r29, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     b0c:	16 2f       	mov	r17, r22
     b0e:	1f 5f       	subi	r17, 0xFF	; 255
     b10:	ce 01       	movw	r24, r28
     b12:	0e 94 2b 05 	call	0xa56	; 0xa56 <LCDdefinechar>
     b16:	28 96       	adiw	r28, 0x08	; 8
     b18:	61 2f       	mov	r22, r17
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     b1a:	18 30       	cpi	r17, 0x08	; 8
     b1c:	b9 f7       	brne	.-18     	; 0xb0c <LCDinit+0x6e>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	08 95       	ret

00000b26 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	08 2f       	mov	r16, r24
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     b30:	8e e1       	ldi	r24, 0x1E	; 30
     b32:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     b36:	1f 5f       	subi	r17, 0xFF	; 255
     b38:	10 17       	cp	r17, r16
     b3a:	d0 f3       	brcs	.-12     	; 0xb30 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	08 2f       	mov	r16, r24
     b48:	10 e0       	ldi	r17, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     b4c:	88 e1       	ldi	r24, 0x18	; 24
     b4e:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     b52:	1f 5f       	subi	r17, 0xFF	; 255
     b54:	10 17       	cp	r17, r16
     b56:	d0 f3       	brcs	.-12     	; 0xb4c <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	08 95       	ret

00000b5e <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     b5e:	8e e0       	ldi	r24, 0x0E	; 14
     b60:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     b64:	08 95       	ret

00000b66 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     b66:	8f e0       	ldi	r24, 0x0F	; 15
     b68:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     b6c:	08 95       	ret

00000b6e <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     b6e:	8c e0       	ldi	r24, 0x0C	; 12
     b70:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     b74:	08 95       	ret

00000b76 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     b7c:	08 95       	ret

00000b7e <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     b7e:	8c e0       	ldi	r24, 0x0C	; 12
     b80:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
}
     b84:	08 95       	ret

00000b86 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	08 2f       	mov	r16, r24
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     b90:	80 e1       	ldi	r24, 0x10	; 16
     b92:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     b96:	1f 5f       	subi	r17, 0xFF	; 255
     b98:	10 17       	cp	r17, r16
     b9a:	d0 f3       	brcs	.-12     	; 0xb90 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	08 2f       	mov	r16, r24
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     bac:	84 e1       	ldi	r24, 0x14	; 20
     bae:	0e 94 cb 04 	call	0x996	; 0x996 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     bb2:	1f 5f       	subi	r17, 0xFF	; 255
     bb4:	10 17       	cp	r17, r16
     bb6:	d0 f3       	brcs	.-12     	; 0xbac <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	08 95       	ret

00000bbe <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	d4 2e       	mov	r13, r20
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     bce:	96 e0       	ldi	r25, 0x06	; 6
     bd0:	89 9f       	mul	r24, r25
     bd2:	c0 01       	movw	r24, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	24 2f       	mov	r18, r20
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	ac 01       	movw	r20, r24
     bdc:	42 9f       	mul	r20, r18
     bde:	c0 01       	movw	r24, r0
     be0:	43 9f       	mul	r20, r19
     be2:	90 0d       	add	r25, r0
     be4:	52 9f       	mul	r21, r18
     be6:	90 0d       	add	r25, r0
     be8:	11 24       	eor	r1, r1
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodhi4>
     bf0:	eb 01       	movw	r28, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     bf2:	cb 01       	movw	r24, r22
     bf4:	66 e0       	ldi	r22, 0x06	; 6
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	0e 94 8c 08 	call	0x1118	; 0x1118 <__udivmodhi4>
     bfc:	e8 2e       	mov	r14, r24
     bfe:	ff 24       	eor	r15, r15
     c00:	00 e0       	ldi	r16, 0x00	; 0
     c02:	10 e0       	ldi	r17, 0x00	; 0
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <LCDprogressBar+0x6c>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     c06:	c8 01       	movw	r24, r16
     c08:	05 96       	adiw	r24, 0x05	; 5
     c0a:	c8 17       	cp	r28, r24
     c0c:	d9 07       	cpc	r29, r25
     c0e:	10 f0       	brcs	.+4      	; 0xc14 <LCDprogressBar+0x56>
     c10:	85 e0       	ldi	r24, 0x05	; 5
     c12:	06 c0       	rjmp	.+12     	; 0xc20 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     c14:	c0 17       	cp	r28, r16
     c16:	d1 07       	cpc	r29, r17
     c18:	10 f0       	brcs	.+4      	; 0xc1e <LCDprogressBar+0x60>
     c1a:	8e 2d       	mov	r24, r14
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <LCDprogressBar+0x62>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     c20:	0e 94 aa 04 	call	0x954	; 0x954 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     c24:	f3 94       	inc	r15
     c26:	0a 5f       	subi	r16, 0xFA	; 250
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	fd 14       	cp	r15, r13
     c2c:	60 f3       	brcs	.-40     	; 0xc06 <LCDprogressBar+0x48>
		
		// write character to display
		LCDsendChar(c);
	}

}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	08 95       	ret

00000c3e <__divsf3>:
     c3e:	0c d0       	rcall	.+24     	; 0xc58 <__divsf3x>
     c40:	eb c0       	rjmp	.+470    	; 0xe18 <__fp_round>
     c42:	e3 d0       	rcall	.+454    	; 0xe0a <__fp_pscB>
     c44:	40 f0       	brcs	.+16     	; 0xc56 <__divsf3+0x18>
     c46:	da d0       	rcall	.+436    	; 0xdfc <__fp_pscA>
     c48:	30 f0       	brcs	.+12     	; 0xc56 <__divsf3+0x18>
     c4a:	21 f4       	brne	.+8      	; 0xc54 <__divsf3+0x16>
     c4c:	5f 3f       	cpi	r21, 0xFF	; 255
     c4e:	19 f0       	breq	.+6      	; 0xc56 <__divsf3+0x18>
     c50:	cc c0       	rjmp	.+408    	; 0xdea <__fp_inf>
     c52:	51 11       	cpse	r21, r1
     c54:	15 c1       	rjmp	.+554    	; 0xe80 <__fp_szero>
     c56:	cf c0       	rjmp	.+414    	; 0xdf6 <__fp_nan>

00000c58 <__divsf3x>:
     c58:	f0 d0       	rcall	.+480    	; 0xe3a <__fp_split3>
     c5a:	98 f3       	brcs	.-26     	; 0xc42 <__divsf3+0x4>

00000c5c <__divsf3_pse>:
     c5c:	99 23       	and	r25, r25
     c5e:	c9 f3       	breq	.-14     	; 0xc52 <__divsf3+0x14>
     c60:	55 23       	and	r21, r21
     c62:	b1 f3       	breq	.-20     	; 0xc50 <__divsf3+0x12>
     c64:	95 1b       	sub	r25, r21
     c66:	55 0b       	sbc	r21, r21
     c68:	bb 27       	eor	r27, r27
     c6a:	aa 27       	eor	r26, r26
     c6c:	62 17       	cp	r22, r18
     c6e:	73 07       	cpc	r23, r19
     c70:	84 07       	cpc	r24, r20
     c72:	38 f0       	brcs	.+14     	; 0xc82 <__divsf3_pse+0x26>
     c74:	9f 5f       	subi	r25, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	44 1f       	adc	r20, r20
     c7e:	aa 1f       	adc	r26, r26
     c80:	a9 f3       	breq	.-22     	; 0xc6c <__divsf3_pse+0x10>
     c82:	33 d0       	rcall	.+102    	; 0xcea <__divsf3_pse+0x8e>
     c84:	0e 2e       	mov	r0, r30
     c86:	3a f0       	brmi	.+14     	; 0xc96 <__divsf3_pse+0x3a>
     c88:	e0 e8       	ldi	r30, 0x80	; 128
     c8a:	30 d0       	rcall	.+96     	; 0xcec <__divsf3_pse+0x90>
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	50 40       	sbci	r21, 0x00	; 0
     c90:	e6 95       	lsr	r30
     c92:	00 1c       	adc	r0, r0
     c94:	ca f7       	brpl	.-14     	; 0xc88 <__divsf3_pse+0x2c>
     c96:	29 d0       	rcall	.+82     	; 0xcea <__divsf3_pse+0x8e>
     c98:	fe 2f       	mov	r31, r30
     c9a:	27 d0       	rcall	.+78     	; 0xcea <__divsf3_pse+0x8e>
     c9c:	66 0f       	add	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	88 1f       	adc	r24, r24
     ca2:	bb 1f       	adc	r27, r27
     ca4:	26 17       	cp	r18, r22
     ca6:	37 07       	cpc	r19, r23
     ca8:	48 07       	cpc	r20, r24
     caa:	ab 07       	cpc	r26, r27
     cac:	b0 e8       	ldi	r27, 0x80	; 128
     cae:	09 f0       	breq	.+2      	; 0xcb2 <__divsf3_pse+0x56>
     cb0:	bb 0b       	sbc	r27, r27
     cb2:	80 2d       	mov	r24, r0
     cb4:	bf 01       	movw	r22, r30
     cb6:	ff 27       	eor	r31, r31
     cb8:	93 58       	subi	r25, 0x83	; 131
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	2a f0       	brmi	.+10     	; 0xcc8 <__divsf3_pse+0x6c>
     cbe:	9e 3f       	cpi	r25, 0xFE	; 254
     cc0:	51 05       	cpc	r21, r1
     cc2:	68 f0       	brcs	.+26     	; 0xcde <__divsf3_pse+0x82>
     cc4:	92 c0       	rjmp	.+292    	; 0xdea <__fp_inf>
     cc6:	dc c0       	rjmp	.+440    	; 0xe80 <__fp_szero>
     cc8:	5f 3f       	cpi	r21, 0xFF	; 255
     cca:	ec f3       	brlt	.-6      	; 0xcc6 <__divsf3_pse+0x6a>
     ccc:	98 3e       	cpi	r25, 0xE8	; 232
     cce:	dc f3       	brlt	.-10     	; 0xcc6 <__divsf3_pse+0x6a>
     cd0:	86 95       	lsr	r24
     cd2:	77 95       	ror	r23
     cd4:	67 95       	ror	r22
     cd6:	b7 95       	ror	r27
     cd8:	f7 95       	ror	r31
     cda:	9f 5f       	subi	r25, 0xFF	; 255
     cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__divsf3_pse+0x74>
     cde:	88 0f       	add	r24, r24
     ce0:	91 1d       	adc	r25, r1
     ce2:	96 95       	lsr	r25
     ce4:	87 95       	ror	r24
     ce6:	97 f9       	bld	r25, 7
     ce8:	08 95       	ret
     cea:	e1 e0       	ldi	r30, 0x01	; 1
     cec:	66 0f       	add	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	bb 1f       	adc	r27, r27
     cf4:	62 17       	cp	r22, r18
     cf6:	73 07       	cpc	r23, r19
     cf8:	84 07       	cpc	r24, r20
     cfa:	ba 07       	cpc	r27, r26
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__divsf3_pse+0xaa>
     cfe:	62 1b       	sub	r22, r18
     d00:	73 0b       	sbc	r23, r19
     d02:	84 0b       	sbc	r24, r20
     d04:	ba 0b       	sbc	r27, r26
     d06:	ee 1f       	adc	r30, r30
     d08:	88 f7       	brcc	.-30     	; 0xcec <__divsf3_pse+0x90>
     d0a:	e0 95       	com	r30
     d0c:	08 95       	ret

00000d0e <__fixsfsi>:
     d0e:	04 d0       	rcall	.+8      	; 0xd18 <__fixunssfsi>
     d10:	68 94       	set
     d12:	b1 11       	cpse	r27, r1
     d14:	b5 c0       	rjmp	.+362    	; 0xe80 <__fp_szero>
     d16:	08 95       	ret

00000d18 <__fixunssfsi>:
     d18:	98 d0       	rcall	.+304    	; 0xe4a <__fp_splitA>
     d1a:	88 f0       	brcs	.+34     	; 0xd3e <__fixunssfsi+0x26>
     d1c:	9f 57       	subi	r25, 0x7F	; 127
     d1e:	90 f0       	brcs	.+36     	; 0xd44 <__fixunssfsi+0x2c>
     d20:	b9 2f       	mov	r27, r25
     d22:	99 27       	eor	r25, r25
     d24:	b7 51       	subi	r27, 0x17	; 23
     d26:	a0 f0       	brcs	.+40     	; 0xd50 <__fixunssfsi+0x38>
     d28:	d1 f0       	breq	.+52     	; 0xd5e <__fixunssfsi+0x46>
     d2a:	66 0f       	add	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	88 1f       	adc	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	1a f0       	brmi	.+6      	; 0xd3a <__fixunssfsi+0x22>
     d34:	ba 95       	dec	r27
     d36:	c9 f7       	brne	.-14     	; 0xd2a <__fixunssfsi+0x12>
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__fixunssfsi+0x46>
     d3a:	b1 30       	cpi	r27, 0x01	; 1
     d3c:	81 f0       	breq	.+32     	; 0xd5e <__fixunssfsi+0x46>
     d3e:	9f d0       	rcall	.+318    	; 0xe7e <__fp_zero>
     d40:	b1 e0       	ldi	r27, 0x01	; 1
     d42:	08 95       	ret
     d44:	9c c0       	rjmp	.+312    	; 0xe7e <__fp_zero>
     d46:	67 2f       	mov	r22, r23
     d48:	78 2f       	mov	r23, r24
     d4a:	88 27       	eor	r24, r24
     d4c:	b8 5f       	subi	r27, 0xF8	; 248
     d4e:	39 f0       	breq	.+14     	; 0xd5e <__fixunssfsi+0x46>
     d50:	b9 3f       	cpi	r27, 0xF9	; 249
     d52:	cc f3       	brlt	.-14     	; 0xd46 <__fixunssfsi+0x2e>
     d54:	86 95       	lsr	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b3 95       	inc	r27
     d5c:	d9 f7       	brne	.-10     	; 0xd54 <__fixunssfsi+0x3c>
     d5e:	3e f4       	brtc	.+14     	; 0xd6e <__fixunssfsi+0x56>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	08 95       	ret

00000d70 <__floatunsisf>:
     d70:	e8 94       	clt
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <__floatsisf+0x12>

00000d74 <__floatsisf>:
     d74:	97 fb       	bst	r25, 7
     d76:	3e f4       	brtc	.+14     	; 0xd86 <__floatsisf+0x12>
     d78:	90 95       	com	r25
     d7a:	80 95       	com	r24
     d7c:	70 95       	com	r23
     d7e:	61 95       	neg	r22
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	8f 4f       	sbci	r24, 0xFF	; 255
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	99 23       	and	r25, r25
     d88:	a9 f0       	breq	.+42     	; 0xdb4 <__floatsisf+0x40>
     d8a:	f9 2f       	mov	r31, r25
     d8c:	96 e9       	ldi	r25, 0x96	; 150
     d8e:	bb 27       	eor	r27, r27
     d90:	93 95       	inc	r25
     d92:	f6 95       	lsr	r31
     d94:	87 95       	ror	r24
     d96:	77 95       	ror	r23
     d98:	67 95       	ror	r22
     d9a:	b7 95       	ror	r27
     d9c:	f1 11       	cpse	r31, r1
     d9e:	f8 cf       	rjmp	.-16     	; 0xd90 <__floatsisf+0x1c>
     da0:	fa f4       	brpl	.+62     	; 0xde0 <__floatsisf+0x6c>
     da2:	bb 0f       	add	r27, r27
     da4:	11 f4       	brne	.+4      	; 0xdaa <__floatsisf+0x36>
     da6:	60 ff       	sbrs	r22, 0
     da8:	1b c0       	rjmp	.+54     	; 0xde0 <__floatsisf+0x6c>
     daa:	6f 5f       	subi	r22, 0xFF	; 255
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	8f 4f       	sbci	r24, 0xFF	; 255
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <__floatsisf+0x6c>
     db4:	88 23       	and	r24, r24
     db6:	11 f0       	breq	.+4      	; 0xdbc <__floatsisf+0x48>
     db8:	96 e9       	ldi	r25, 0x96	; 150
     dba:	11 c0       	rjmp	.+34     	; 0xdde <__floatsisf+0x6a>
     dbc:	77 23       	and	r23, r23
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <__floatsisf+0x54>
     dc0:	9e e8       	ldi	r25, 0x8E	; 142
     dc2:	87 2f       	mov	r24, r23
     dc4:	76 2f       	mov	r23, r22
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <__floatsisf+0x5e>
     dc8:	66 23       	and	r22, r22
     dca:	71 f0       	breq	.+28     	; 0xde8 <__floatsisf+0x74>
     dcc:	96 e8       	ldi	r25, 0x86	; 134
     dce:	86 2f       	mov	r24, r22
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	2a f0       	brmi	.+10     	; 0xde0 <__floatsisf+0x6c>
     dd6:	9a 95       	dec	r25
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	88 1f       	adc	r24, r24
     dde:	da f7       	brpl	.-10     	; 0xdd6 <__floatsisf+0x62>
     de0:	88 0f       	add	r24, r24
     de2:	96 95       	lsr	r25
     de4:	87 95       	ror	r24
     de6:	97 f9       	bld	r25, 7
     de8:	08 95       	ret

00000dea <__fp_inf>:
     dea:	97 f9       	bld	r25, 7
     dec:	9f 67       	ori	r25, 0x7F	; 127
     dee:	80 e8       	ldi	r24, 0x80	; 128
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	08 95       	ret

00000df6 <__fp_nan>:
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	80 ec       	ldi	r24, 0xC0	; 192
     dfa:	08 95       	ret

00000dfc <__fp_pscA>:
     dfc:	00 24       	eor	r0, r0
     dfe:	0a 94       	dec	r0
     e00:	16 16       	cp	r1, r22
     e02:	17 06       	cpc	r1, r23
     e04:	18 06       	cpc	r1, r24
     e06:	09 06       	cpc	r0, r25
     e08:	08 95       	ret

00000e0a <__fp_pscB>:
     e0a:	00 24       	eor	r0, r0
     e0c:	0a 94       	dec	r0
     e0e:	12 16       	cp	r1, r18
     e10:	13 06       	cpc	r1, r19
     e12:	14 06       	cpc	r1, r20
     e14:	05 06       	cpc	r0, r21
     e16:	08 95       	ret

00000e18 <__fp_round>:
     e18:	09 2e       	mov	r0, r25
     e1a:	03 94       	inc	r0
     e1c:	00 0c       	add	r0, r0
     e1e:	11 f4       	brne	.+4      	; 0xe24 <__fp_round+0xc>
     e20:	88 23       	and	r24, r24
     e22:	52 f0       	brmi	.+20     	; 0xe38 <__fp_round+0x20>
     e24:	bb 0f       	add	r27, r27
     e26:	40 f4       	brcc	.+16     	; 0xe38 <__fp_round+0x20>
     e28:	bf 2b       	or	r27, r31
     e2a:	11 f4       	brne	.+4      	; 0xe30 <__fp_round+0x18>
     e2c:	60 ff       	sbrs	r22, 0
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <__fp_round+0x20>
     e30:	6f 5f       	subi	r22, 0xFF	; 255
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	8f 4f       	sbci	r24, 0xFF	; 255
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	08 95       	ret

00000e3a <__fp_split3>:
     e3a:	57 fd       	sbrc	r21, 7
     e3c:	90 58       	subi	r25, 0x80	; 128
     e3e:	44 0f       	add	r20, r20
     e40:	55 1f       	adc	r21, r21
     e42:	59 f0       	breq	.+22     	; 0xe5a <__fp_splitA+0x10>
     e44:	5f 3f       	cpi	r21, 0xFF	; 255
     e46:	71 f0       	breq	.+28     	; 0xe64 <__fp_splitA+0x1a>
     e48:	47 95       	ror	r20

00000e4a <__fp_splitA>:
     e4a:	88 0f       	add	r24, r24
     e4c:	97 fb       	bst	r25, 7
     e4e:	99 1f       	adc	r25, r25
     e50:	61 f0       	breq	.+24     	; 0xe6a <__fp_splitA+0x20>
     e52:	9f 3f       	cpi	r25, 0xFF	; 255
     e54:	79 f0       	breq	.+30     	; 0xe74 <__fp_splitA+0x2a>
     e56:	87 95       	ror	r24
     e58:	08 95       	ret
     e5a:	12 16       	cp	r1, r18
     e5c:	13 06       	cpc	r1, r19
     e5e:	14 06       	cpc	r1, r20
     e60:	55 1f       	adc	r21, r21
     e62:	f2 cf       	rjmp	.-28     	; 0xe48 <__fp_split3+0xe>
     e64:	46 95       	lsr	r20
     e66:	f1 df       	rcall	.-30     	; 0xe4a <__fp_splitA>
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <__fp_splitA+0x30>
     e6a:	16 16       	cp	r1, r22
     e6c:	17 06       	cpc	r1, r23
     e6e:	18 06       	cpc	r1, r24
     e70:	99 1f       	adc	r25, r25
     e72:	f1 cf       	rjmp	.-30     	; 0xe56 <__fp_splitA+0xc>
     e74:	86 95       	lsr	r24
     e76:	71 05       	cpc	r23, r1
     e78:	61 05       	cpc	r22, r1
     e7a:	08 94       	sec
     e7c:	08 95       	ret

00000e7e <__fp_zero>:
     e7e:	e8 94       	clt

00000e80 <__fp_szero>:
     e80:	bb 27       	eor	r27, r27
     e82:	66 27       	eor	r22, r22
     e84:	77 27       	eor	r23, r23
     e86:	cb 01       	movw	r24, r22
     e88:	97 f9       	bld	r25, 7
     e8a:	08 95       	ret

00000e8c <__mulsf3>:
     e8c:	0b d0       	rcall	.+22     	; 0xea4 <__mulsf3x>
     e8e:	c4 cf       	rjmp	.-120    	; 0xe18 <__fp_round>
     e90:	b5 df       	rcall	.-150    	; 0xdfc <__fp_pscA>
     e92:	28 f0       	brcs	.+10     	; 0xe9e <__mulsf3+0x12>
     e94:	ba df       	rcall	.-140    	; 0xe0a <__fp_pscB>
     e96:	18 f0       	brcs	.+6      	; 0xe9e <__mulsf3+0x12>
     e98:	95 23       	and	r25, r21
     e9a:	09 f0       	breq	.+2      	; 0xe9e <__mulsf3+0x12>
     e9c:	a6 cf       	rjmp	.-180    	; 0xdea <__fp_inf>
     e9e:	ab cf       	rjmp	.-170    	; 0xdf6 <__fp_nan>
     ea0:	11 24       	eor	r1, r1
     ea2:	ee cf       	rjmp	.-36     	; 0xe80 <__fp_szero>

00000ea4 <__mulsf3x>:
     ea4:	ca df       	rcall	.-108    	; 0xe3a <__fp_split3>
     ea6:	a0 f3       	brcs	.-24     	; 0xe90 <__mulsf3+0x4>

00000ea8 <__mulsf3_pse>:
     ea8:	95 9f       	mul	r25, r21
     eaa:	d1 f3       	breq	.-12     	; 0xea0 <__mulsf3+0x14>
     eac:	95 0f       	add	r25, r21
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	55 1f       	adc	r21, r21
     eb2:	62 9f       	mul	r22, r18
     eb4:	f0 01       	movw	r30, r0
     eb6:	72 9f       	mul	r23, r18
     eb8:	bb 27       	eor	r27, r27
     eba:	f0 0d       	add	r31, r0
     ebc:	b1 1d       	adc	r27, r1
     ebe:	63 9f       	mul	r22, r19
     ec0:	aa 27       	eor	r26, r26
     ec2:	f0 0d       	add	r31, r0
     ec4:	b1 1d       	adc	r27, r1
     ec6:	aa 1f       	adc	r26, r26
     ec8:	64 9f       	mul	r22, r20
     eca:	66 27       	eor	r22, r22
     ecc:	b0 0d       	add	r27, r0
     ece:	a1 1d       	adc	r26, r1
     ed0:	66 1f       	adc	r22, r22
     ed2:	82 9f       	mul	r24, r18
     ed4:	22 27       	eor	r18, r18
     ed6:	b0 0d       	add	r27, r0
     ed8:	a1 1d       	adc	r26, r1
     eda:	62 1f       	adc	r22, r18
     edc:	73 9f       	mul	r23, r19
     ede:	b0 0d       	add	r27, r0
     ee0:	a1 1d       	adc	r26, r1
     ee2:	62 1f       	adc	r22, r18
     ee4:	83 9f       	mul	r24, r19
     ee6:	a0 0d       	add	r26, r0
     ee8:	61 1d       	adc	r22, r1
     eea:	22 1f       	adc	r18, r18
     eec:	74 9f       	mul	r23, r20
     eee:	33 27       	eor	r19, r19
     ef0:	a0 0d       	add	r26, r0
     ef2:	61 1d       	adc	r22, r1
     ef4:	23 1f       	adc	r18, r19
     ef6:	84 9f       	mul	r24, r20
     ef8:	60 0d       	add	r22, r0
     efa:	21 1d       	adc	r18, r1
     efc:	82 2f       	mov	r24, r18
     efe:	76 2f       	mov	r23, r22
     f00:	6a 2f       	mov	r22, r26
     f02:	11 24       	eor	r1, r1
     f04:	9f 57       	subi	r25, 0x7F	; 127
     f06:	50 40       	sbci	r21, 0x00	; 0
     f08:	8a f0       	brmi	.+34     	; 0xf2c <__mulsf3_pse+0x84>
     f0a:	e1 f0       	breq	.+56     	; 0xf44 <__mulsf3_pse+0x9c>
     f0c:	88 23       	and	r24, r24
     f0e:	4a f0       	brmi	.+18     	; 0xf22 <__mulsf3_pse+0x7a>
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	bb 1f       	adc	r27, r27
     f16:	66 1f       	adc	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	91 50       	subi	r25, 0x01	; 1
     f1e:	50 40       	sbci	r21, 0x00	; 0
     f20:	a9 f7       	brne	.-22     	; 0xf0c <__mulsf3_pse+0x64>
     f22:	9e 3f       	cpi	r25, 0xFE	; 254
     f24:	51 05       	cpc	r21, r1
     f26:	70 f0       	brcs	.+28     	; 0xf44 <__mulsf3_pse+0x9c>
     f28:	60 cf       	rjmp	.-320    	; 0xdea <__fp_inf>
     f2a:	aa cf       	rjmp	.-172    	; 0xe80 <__fp_szero>
     f2c:	5f 3f       	cpi	r21, 0xFF	; 255
     f2e:	ec f3       	brlt	.-6      	; 0xf2a <__mulsf3_pse+0x82>
     f30:	98 3e       	cpi	r25, 0xE8	; 232
     f32:	dc f3       	brlt	.-10     	; 0xf2a <__mulsf3_pse+0x82>
     f34:	86 95       	lsr	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b7 95       	ror	r27
     f3c:	f7 95       	ror	r31
     f3e:	e7 95       	ror	r30
     f40:	9f 5f       	subi	r25, 0xFF	; 255
     f42:	c1 f7       	brne	.-16     	; 0xf34 <__mulsf3_pse+0x8c>
     f44:	fe 2b       	or	r31, r30
     f46:	88 0f       	add	r24, r24
     f48:	91 1d       	adc	r25, r1
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	97 f9       	bld	r25, 7
     f50:	08 95       	ret

00000f52 <sin>:
     f52:	9f 93       	push	r25
     f54:	05 d0       	rcall	.+10     	; 0xf60 <__fp_rempio2>
     f56:	0f 90       	pop	r0
     f58:	07 fc       	sbrc	r0, 7
     f5a:	ee 5f       	subi	r30, 0xFE	; 254
     f5c:	28 c0       	rjmp	.+80     	; 0xfae <__fp_sinus>
     f5e:	4b cf       	rjmp	.-362    	; 0xdf6 <__fp_nan>

00000f60 <__fp_rempio2>:
     f60:	74 df       	rcall	.-280    	; 0xe4a <__fp_splitA>
     f62:	e8 f3       	brcs	.-6      	; 0xf5e <sin+0xc>
     f64:	e8 94       	clt
     f66:	e0 e0       	ldi	r30, 0x00	; 0
     f68:	bb 27       	eor	r27, r27
     f6a:	9f 57       	subi	r25, 0x7F	; 127
     f6c:	f0 f0       	brcs	.+60     	; 0xfaa <__fp_rempio2+0x4a>
     f6e:	2a ed       	ldi	r18, 0xDA	; 218
     f70:	3f e0       	ldi	r19, 0x0F	; 15
     f72:	49 ec       	ldi	r20, 0xC9	; 201
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <__fp_rempio2+0x22>
     f76:	ee 0f       	add	r30, r30
     f78:	bb 0f       	add	r27, r27
     f7a:	66 1f       	adc	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	28 f0       	brcs	.+10     	; 0xf8c <__fp_rempio2+0x2c>
     f82:	b2 3a       	cpi	r27, 0xA2	; 162
     f84:	62 07       	cpc	r22, r18
     f86:	73 07       	cpc	r23, r19
     f88:	84 07       	cpc	r24, r20
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <__fp_rempio2+0x36>
     f8c:	b2 5a       	subi	r27, 0xA2	; 162
     f8e:	62 0b       	sbc	r22, r18
     f90:	73 0b       	sbc	r23, r19
     f92:	84 0b       	sbc	r24, r20
     f94:	e3 95       	inc	r30
     f96:	9a 95       	dec	r25
     f98:	72 f7       	brpl	.-36     	; 0xf76 <__fp_rempio2+0x16>
     f9a:	80 38       	cpi	r24, 0x80	; 128
     f9c:	30 f4       	brcc	.+12     	; 0xfaa <__fp_rempio2+0x4a>
     f9e:	9a 95       	dec	r25
     fa0:	bb 0f       	add	r27, r27
     fa2:	66 1f       	adc	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	d2 f7       	brpl	.-12     	; 0xf9e <__fp_rempio2+0x3e>
     faa:	90 48       	sbci	r25, 0x80	; 128
     fac:	73 c0       	rjmp	.+230    	; 0x1094 <__fp_mpack_finite>

00000fae <__fp_sinus>:
     fae:	ef 93       	push	r30
     fb0:	e0 ff       	sbrs	r30, 0
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <__fp_sinus+0x12>
     fb4:	a2 ea       	ldi	r26, 0xA2	; 162
     fb6:	2a ed       	ldi	r18, 0xDA	; 218
     fb8:	3f e0       	ldi	r19, 0x0F	; 15
     fba:	49 ec       	ldi	r20, 0xC9	; 201
     fbc:	5f eb       	ldi	r21, 0xBF	; 191
     fbe:	15 d0       	rcall	.+42     	; 0xfea <__addsf3x>
     fc0:	2b df       	rcall	.-426    	; 0xe18 <__fp_round>
     fc2:	0f 90       	pop	r0
     fc4:	03 94       	inc	r0
     fc6:	01 fc       	sbrc	r0, 1
     fc8:	90 58       	subi	r25, 0x80	; 128
     fca:	ec e8       	ldi	r30, 0x8C	; 140
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	6e c0       	rjmp	.+220    	; 0x10ac <__fp_powsodd>
     fd0:	15 df       	rcall	.-470    	; 0xdfc <__fp_pscA>
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__fp_sinus+0x32>
     fd4:	1a df       	rcall	.-460    	; 0xe0a <__fp_pscB>
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <__fp_sinus+0x32>
     fd8:	31 f4       	brne	.+12     	; 0xfe6 <__fp_sinus+0x38>
     fda:	9f 3f       	cpi	r25, 0xFF	; 255
     fdc:	11 f4       	brne	.+4      	; 0xfe2 <__fp_sinus+0x34>
     fde:	1e f4       	brtc	.+6      	; 0xfe6 <__fp_sinus+0x38>
     fe0:	0a cf       	rjmp	.-492    	; 0xdf6 <__fp_nan>
     fe2:	0e f4       	brtc	.+2      	; 0xfe6 <__fp_sinus+0x38>
     fe4:	e0 95       	com	r30
     fe6:	e7 fb       	bst	r30, 7
     fe8:	00 cf       	rjmp	.-512    	; 0xdea <__fp_inf>

00000fea <__addsf3x>:
     fea:	e9 2f       	mov	r30, r25
     fec:	26 df       	rcall	.-436    	; 0xe3a <__fp_split3>
     fee:	80 f3       	brcs	.-32     	; 0xfd0 <__fp_sinus+0x22>
     ff0:	ba 17       	cp	r27, r26
     ff2:	62 07       	cpc	r22, r18
     ff4:	73 07       	cpc	r23, r19
     ff6:	84 07       	cpc	r24, r20
     ff8:	95 07       	cpc	r25, r21
     ffa:	18 f0       	brcs	.+6      	; 0x1002 <__addsf3x+0x18>
     ffc:	71 f4       	brne	.+28     	; 0x101a <__addsf3x+0x30>
     ffe:	9e f5       	brtc	.+102    	; 0x1066 <__addsf3x+0x7c>
    1000:	3e cf       	rjmp	.-388    	; 0xe7e <__fp_zero>
    1002:	0e f4       	brtc	.+2      	; 0x1006 <__addsf3x+0x1c>
    1004:	e0 95       	com	r30
    1006:	0b 2e       	mov	r0, r27
    1008:	ba 2f       	mov	r27, r26
    100a:	a0 2d       	mov	r26, r0
    100c:	0b 01       	movw	r0, r22
    100e:	b9 01       	movw	r22, r18
    1010:	90 01       	movw	r18, r0
    1012:	0c 01       	movw	r0, r24
    1014:	ca 01       	movw	r24, r20
    1016:	a0 01       	movw	r20, r0
    1018:	11 24       	eor	r1, r1
    101a:	ff 27       	eor	r31, r31
    101c:	59 1b       	sub	r21, r25
    101e:	99 f0       	breq	.+38     	; 0x1046 <__addsf3x+0x5c>
    1020:	59 3f       	cpi	r21, 0xF9	; 249
    1022:	50 f4       	brcc	.+20     	; 0x1038 <__addsf3x+0x4e>
    1024:	50 3e       	cpi	r21, 0xE0	; 224
    1026:	68 f1       	brcs	.+90     	; 0x1082 <__addsf3x+0x98>
    1028:	1a 16       	cp	r1, r26
    102a:	f0 40       	sbci	r31, 0x00	; 0
    102c:	a2 2f       	mov	r26, r18
    102e:	23 2f       	mov	r18, r19
    1030:	34 2f       	mov	r19, r20
    1032:	44 27       	eor	r20, r20
    1034:	58 5f       	subi	r21, 0xF8	; 248
    1036:	f3 cf       	rjmp	.-26     	; 0x101e <__addsf3x+0x34>
    1038:	46 95       	lsr	r20
    103a:	37 95       	ror	r19
    103c:	27 95       	ror	r18
    103e:	a7 95       	ror	r26
    1040:	f0 40       	sbci	r31, 0x00	; 0
    1042:	53 95       	inc	r21
    1044:	c9 f7       	brne	.-14     	; 0x1038 <__addsf3x+0x4e>
    1046:	7e f4       	brtc	.+30     	; 0x1066 <__addsf3x+0x7c>
    1048:	1f 16       	cp	r1, r31
    104a:	ba 0b       	sbc	r27, r26
    104c:	62 0b       	sbc	r22, r18
    104e:	73 0b       	sbc	r23, r19
    1050:	84 0b       	sbc	r24, r20
    1052:	ba f0       	brmi	.+46     	; 0x1082 <__addsf3x+0x98>
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	a1 f0       	breq	.+40     	; 0x1080 <__addsf3x+0x96>
    1058:	ff 0f       	add	r31, r31
    105a:	bb 1f       	adc	r27, r27
    105c:	66 1f       	adc	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	c2 f7       	brpl	.-16     	; 0x1054 <__addsf3x+0x6a>
    1064:	0e c0       	rjmp	.+28     	; 0x1082 <__addsf3x+0x98>
    1066:	ba 0f       	add	r27, r26
    1068:	62 1f       	adc	r22, r18
    106a:	73 1f       	adc	r23, r19
    106c:	84 1f       	adc	r24, r20
    106e:	48 f4       	brcc	.+18     	; 0x1082 <__addsf3x+0x98>
    1070:	87 95       	ror	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	b7 95       	ror	r27
    1078:	f7 95       	ror	r31
    107a:	9e 3f       	cpi	r25, 0xFE	; 254
    107c:	08 f0       	brcs	.+2      	; 0x1080 <__addsf3x+0x96>
    107e:	b3 cf       	rjmp	.-154    	; 0xfe6 <__fp_sinus+0x38>
    1080:	93 95       	inc	r25
    1082:	88 0f       	add	r24, r24
    1084:	08 f0       	brcs	.+2      	; 0x1088 <__addsf3x+0x9e>
    1086:	99 27       	eor	r25, r25
    1088:	ee 0f       	add	r30, r30
    108a:	97 95       	ror	r25
    108c:	87 95       	ror	r24
    108e:	08 95       	ret

00001090 <__fp_mpack>:
    1090:	9f 3f       	cpi	r25, 0xFF	; 255
    1092:	31 f0       	breq	.+12     	; 0x10a0 <__fp_mpack_finite+0xc>

00001094 <__fp_mpack_finite>:
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	20 f4       	brcc	.+8      	; 0x10a0 <__fp_mpack_finite+0xc>
    1098:	87 95       	ror	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	b7 95       	ror	r27
    10a0:	88 0f       	add	r24, r24
    10a2:	91 1d       	adc	r25, r1
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret

000010ac <__fp_powsodd>:
    10ac:	9f 93       	push	r25
    10ae:	8f 93       	push	r24
    10b0:	7f 93       	push	r23
    10b2:	6f 93       	push	r22
    10b4:	ff 93       	push	r31
    10b6:	ef 93       	push	r30
    10b8:	9b 01       	movw	r18, r22
    10ba:	ac 01       	movw	r20, r24
    10bc:	e7 de       	rcall	.-562    	; 0xe8c <__mulsf3>
    10be:	ef 91       	pop	r30
    10c0:	ff 91       	pop	r31
    10c2:	05 d0       	rcall	.+10     	; 0x10ce <__fp_powser>
    10c4:	2f 91       	pop	r18
    10c6:	3f 91       	pop	r19
    10c8:	4f 91       	pop	r20
    10ca:	5f 91       	pop	r21
    10cc:	df ce       	rjmp	.-578    	; 0xe8c <__mulsf3>

000010ce <__fp_powser>:
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	1f 93       	push	r17
    10d4:	0f 93       	push	r16
    10d6:	ff 92       	push	r15
    10d8:	ef 92       	push	r14
    10da:	df 92       	push	r13
    10dc:	7b 01       	movw	r14, r22
    10de:	8c 01       	movw	r16, r24
    10e0:	68 94       	set
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__fp_powser+0x20>
    10e4:	da 2e       	mov	r13, r26
    10e6:	ef 01       	movw	r28, r30
    10e8:	dd de       	rcall	.-582    	; 0xea4 <__mulsf3x>
    10ea:	fe 01       	movw	r30, r28
    10ec:	e8 94       	clt
    10ee:	a5 91       	lpm	r26, Z+
    10f0:	25 91       	lpm	r18, Z+
    10f2:	35 91       	lpm	r19, Z+
    10f4:	45 91       	lpm	r20, Z+
    10f6:	55 91       	lpm	r21, Z+
    10f8:	ae f3       	brts	.-22     	; 0x10e4 <__fp_powser+0x16>
    10fa:	ef 01       	movw	r28, r30
    10fc:	76 df       	rcall	.-276    	; 0xfea <__addsf3x>
    10fe:	fe 01       	movw	r30, r28
    1100:	97 01       	movw	r18, r14
    1102:	a8 01       	movw	r20, r16
    1104:	da 94       	dec	r13
    1106:	79 f7       	brne	.-34     	; 0x10e6 <__fp_powser+0x18>
    1108:	df 90       	pop	r13
    110a:	ef 90       	pop	r14
    110c:	ff 90       	pop	r15
    110e:	0f 91       	pop	r16
    1110:	1f 91       	pop	r17
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <__udivmodhi4>:
    1118:	aa 1b       	sub	r26, r26
    111a:	bb 1b       	sub	r27, r27
    111c:	51 e1       	ldi	r21, 0x11	; 17
    111e:	07 c0       	rjmp	.+14     	; 0x112e <__udivmodhi4_ep>

00001120 <__udivmodhi4_loop>:
    1120:	aa 1f       	adc	r26, r26
    1122:	bb 1f       	adc	r27, r27
    1124:	a6 17       	cp	r26, r22
    1126:	b7 07       	cpc	r27, r23
    1128:	10 f0       	brcs	.+4      	; 0x112e <__udivmodhi4_ep>
    112a:	a6 1b       	sub	r26, r22
    112c:	b7 0b       	sbc	r27, r23

0000112e <__udivmodhi4_ep>:
    112e:	88 1f       	adc	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	5a 95       	dec	r21
    1134:	a9 f7       	brne	.-22     	; 0x1120 <__udivmodhi4_loop>
    1136:	80 95       	com	r24
    1138:	90 95       	com	r25
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	08 95       	ret

00001140 <__divmodhi4>:
    1140:	97 fb       	bst	r25, 7
    1142:	09 2e       	mov	r0, r25
    1144:	07 26       	eor	r0, r23
    1146:	0a d0       	rcall	.+20     	; 0x115c <__divmodhi4_neg1>
    1148:	77 fd       	sbrc	r23, 7
    114a:	04 d0       	rcall	.+8      	; 0x1154 <__divmodhi4_neg2>
    114c:	e5 df       	rcall	.-54     	; 0x1118 <__udivmodhi4>
    114e:	06 d0       	rcall	.+12     	; 0x115c <__divmodhi4_neg1>
    1150:	00 20       	and	r0, r0
    1152:	1a f4       	brpl	.+6      	; 0x115a <__divmodhi4_exit>

00001154 <__divmodhi4_neg2>:
    1154:	70 95       	com	r23
    1156:	61 95       	neg	r22
    1158:	7f 4f       	sbci	r23, 0xFF	; 255

0000115a <__divmodhi4_exit>:
    115a:	08 95       	ret

0000115c <__divmodhi4_neg1>:
    115c:	f6 f7       	brtc	.-4      	; 0x115a <__divmodhi4_exit>
    115e:	90 95       	com	r25
    1160:	81 95       	neg	r24
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	08 95       	ret

00001166 <atoi>:
    1166:	fc 01       	movw	r30, r24
    1168:	88 27       	eor	r24, r24
    116a:	99 27       	eor	r25, r25
    116c:	e8 94       	clt
    116e:	21 91       	ld	r18, Z+
    1170:	20 32       	cpi	r18, 0x20	; 32
    1172:	e9 f3       	breq	.-6      	; 0x116e <atoi+0x8>
    1174:	29 30       	cpi	r18, 0x09	; 9
    1176:	10 f0       	brcs	.+4      	; 0x117c <atoi+0x16>
    1178:	2e 30       	cpi	r18, 0x0E	; 14
    117a:	c8 f3       	brcs	.-14     	; 0x116e <atoi+0x8>
    117c:	2b 32       	cpi	r18, 0x2B	; 43
    117e:	41 f0       	breq	.+16     	; 0x1190 <atoi+0x2a>
    1180:	2d 32       	cpi	r18, 0x2D	; 45
    1182:	39 f4       	brne	.+14     	; 0x1192 <atoi+0x2c>
    1184:	68 94       	set
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <atoi+0x2a>
    1188:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulhi_const_10>
    118c:	82 0f       	add	r24, r18
    118e:	91 1d       	adc	r25, r1
    1190:	21 91       	ld	r18, Z+
    1192:	20 53       	subi	r18, 0x30	; 48
    1194:	2a 30       	cpi	r18, 0x0A	; 10
    1196:	c0 f3       	brcs	.-16     	; 0x1188 <atoi+0x22>
    1198:	1e f4       	brtc	.+6      	; 0x11a0 <atoi+0x3a>
    119a:	90 95       	com	r25
    119c:	81 95       	neg	r24
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	08 95       	ret

000011a2 <__mulhi_const_10>:
    11a2:	7a e0       	ldi	r23, 0x0A	; 10
    11a4:	97 9f       	mul	r25, r23
    11a6:	90 2d       	mov	r25, r0
    11a8:	87 9f       	mul	r24, r23
    11aa:	80 2d       	mov	r24, r0
    11ac:	91 0d       	add	r25, r1
    11ae:	11 24       	eor	r1, r1
    11b0:	08 95       	ret

000011b2 <sprintf>:
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	2e 97       	sbiw	r28, 0x0e	; 14
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	0d 89       	ldd	r16, Y+21	; 0x15
    11cc:	1e 89       	ldd	r17, Y+22	; 0x16
    11ce:	86 e0       	ldi	r24, 0x06	; 6
    11d0:	8c 83       	std	Y+4, r24	; 0x04
    11d2:	1a 83       	std	Y+2, r17	; 0x02
    11d4:	09 83       	std	Y+1, r16	; 0x01
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f e7       	ldi	r25, 0x7F	; 127
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
    11de:	9e 01       	movw	r18, r28
    11e0:	27 5e       	subi	r18, 0xE7	; 231
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	6f 89       	ldd	r22, Y+23	; 0x17
    11ea:	78 8d       	ldd	r23, Y+24	; 0x18
    11ec:	a9 01       	movw	r20, r18
    11ee:	0e 94 0a 09 	call	0x1214	; 0x1214 <vfprintf>
    11f2:	2f 81       	ldd	r18, Y+7	; 0x07
    11f4:	38 85       	ldd	r19, Y+8	; 0x08
    11f6:	02 0f       	add	r16, r18
    11f8:	13 1f       	adc	r17, r19
    11fa:	f8 01       	movw	r30, r16
    11fc:	10 82       	st	Z, r1
    11fe:	2e 96       	adiw	r28, 0x0e	; 14
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	08 95       	ret

00001214 <vfprintf>:
    1214:	2f 92       	push	r2
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	6f 92       	push	r6
    121e:	7f 92       	push	r7
    1220:	8f 92       	push	r8
    1222:	9f 92       	push	r9
    1224:	af 92       	push	r10
    1226:	bf 92       	push	r11
    1228:	cf 92       	push	r12
    122a:	df 92       	push	r13
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	2b 97       	sbiw	r28, 0x0b	; 11
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	3c 01       	movw	r6, r24
    124a:	2b 01       	movw	r4, r22
    124c:	5a 01       	movw	r10, r20
    124e:	fc 01       	movw	r30, r24
    1250:	17 82       	std	Z+7, r1	; 0x07
    1252:	16 82       	std	Z+6, r1	; 0x06
    1254:	83 81       	ldd	r24, Z+3	; 0x03
    1256:	81 fd       	sbrc	r24, 1
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <vfprintf+0x4c>
    125a:	6f ef       	ldi	r22, 0xFF	; 255
    125c:	7f ef       	ldi	r23, 0xFF	; 255
    125e:	c6 c1       	rjmp	.+908    	; 0x15ec <vfprintf+0x3d8>
    1260:	9a e0       	ldi	r25, 0x0A	; 10
    1262:	89 2e       	mov	r8, r25
    1264:	1e 01       	movw	r2, r28
    1266:	08 94       	sec
    1268:	21 1c       	adc	r2, r1
    126a:	31 1c       	adc	r3, r1
    126c:	f3 01       	movw	r30, r6
    126e:	23 81       	ldd	r18, Z+3	; 0x03
    1270:	f2 01       	movw	r30, r4
    1272:	23 fd       	sbrc	r18, 3
    1274:	85 91       	lpm	r24, Z+
    1276:	23 ff       	sbrs	r18, 3
    1278:	81 91       	ld	r24, Z+
    127a:	2f 01       	movw	r4, r30
    127c:	88 23       	and	r24, r24
    127e:	09 f4       	brne	.+2      	; 0x1282 <vfprintf+0x6e>
    1280:	b2 c1       	rjmp	.+868    	; 0x15e6 <vfprintf+0x3d2>
    1282:	85 32       	cpi	r24, 0x25	; 37
    1284:	39 f4       	brne	.+14     	; 0x1294 <vfprintf+0x80>
    1286:	23 fd       	sbrc	r18, 3
    1288:	85 91       	lpm	r24, Z+
    128a:	23 ff       	sbrs	r18, 3
    128c:	81 91       	ld	r24, Z+
    128e:	2f 01       	movw	r4, r30
    1290:	85 32       	cpi	r24, 0x25	; 37
    1292:	29 f4       	brne	.+10     	; 0x129e <vfprintf+0x8a>
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	b3 01       	movw	r22, r6
    1298:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    129c:	e7 cf       	rjmp	.-50     	; 0x126c <vfprintf+0x58>
    129e:	98 2f       	mov	r25, r24
    12a0:	ff 24       	eor	r15, r15
    12a2:	ee 24       	eor	r14, r14
    12a4:	99 24       	eor	r9, r9
    12a6:	ff e1       	ldi	r31, 0x1F	; 31
    12a8:	ff 15       	cp	r31, r15
    12aa:	d0 f0       	brcs	.+52     	; 0x12e0 <vfprintf+0xcc>
    12ac:	9b 32       	cpi	r25, 0x2B	; 43
    12ae:	69 f0       	breq	.+26     	; 0x12ca <vfprintf+0xb6>
    12b0:	9c 32       	cpi	r25, 0x2C	; 44
    12b2:	28 f4       	brcc	.+10     	; 0x12be <vfprintf+0xaa>
    12b4:	90 32       	cpi	r25, 0x20	; 32
    12b6:	59 f0       	breq	.+22     	; 0x12ce <vfprintf+0xba>
    12b8:	93 32       	cpi	r25, 0x23	; 35
    12ba:	91 f4       	brne	.+36     	; 0x12e0 <vfprintf+0xcc>
    12bc:	0e c0       	rjmp	.+28     	; 0x12da <vfprintf+0xc6>
    12be:	9d 32       	cpi	r25, 0x2D	; 45
    12c0:	49 f0       	breq	.+18     	; 0x12d4 <vfprintf+0xc0>
    12c2:	90 33       	cpi	r25, 0x30	; 48
    12c4:	69 f4       	brne	.+26     	; 0x12e0 <vfprintf+0xcc>
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	24 c0       	rjmp	.+72     	; 0x1312 <vfprintf+0xfe>
    12ca:	52 e0       	ldi	r21, 0x02	; 2
    12cc:	f5 2a       	or	r15, r21
    12ce:	84 e0       	ldi	r24, 0x04	; 4
    12d0:	f8 2a       	or	r15, r24
    12d2:	28 c0       	rjmp	.+80     	; 0x1324 <vfprintf+0x110>
    12d4:	98 e0       	ldi	r25, 0x08	; 8
    12d6:	f9 2a       	or	r15, r25
    12d8:	25 c0       	rjmp	.+74     	; 0x1324 <vfprintf+0x110>
    12da:	e0 e1       	ldi	r30, 0x10	; 16
    12dc:	fe 2a       	or	r15, r30
    12de:	22 c0       	rjmp	.+68     	; 0x1324 <vfprintf+0x110>
    12e0:	f7 fc       	sbrc	r15, 7
    12e2:	29 c0       	rjmp	.+82     	; 0x1336 <vfprintf+0x122>
    12e4:	89 2f       	mov	r24, r25
    12e6:	80 53       	subi	r24, 0x30	; 48
    12e8:	8a 30       	cpi	r24, 0x0A	; 10
    12ea:	70 f4       	brcc	.+28     	; 0x1308 <vfprintf+0xf4>
    12ec:	f6 fe       	sbrs	r15, 6
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <vfprintf+0xe6>
    12f0:	98 9c       	mul	r9, r8
    12f2:	90 2c       	mov	r9, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	98 0e       	add	r9, r24
    12f8:	15 c0       	rjmp	.+42     	; 0x1324 <vfprintf+0x110>
    12fa:	e8 9c       	mul	r14, r8
    12fc:	e0 2c       	mov	r14, r0
    12fe:	11 24       	eor	r1, r1
    1300:	e8 0e       	add	r14, r24
    1302:	f0 e2       	ldi	r31, 0x20	; 32
    1304:	ff 2a       	or	r15, r31
    1306:	0e c0       	rjmp	.+28     	; 0x1324 <vfprintf+0x110>
    1308:	9e 32       	cpi	r25, 0x2E	; 46
    130a:	29 f4       	brne	.+10     	; 0x1316 <vfprintf+0x102>
    130c:	f6 fc       	sbrc	r15, 6
    130e:	6b c1       	rjmp	.+726    	; 0x15e6 <vfprintf+0x3d2>
    1310:	40 e4       	ldi	r20, 0x40	; 64
    1312:	f4 2a       	or	r15, r20
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <vfprintf+0x110>
    1316:	9c 36       	cpi	r25, 0x6C	; 108
    1318:	19 f4       	brne	.+6      	; 0x1320 <vfprintf+0x10c>
    131a:	50 e8       	ldi	r21, 0x80	; 128
    131c:	f5 2a       	or	r15, r21
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <vfprintf+0x110>
    1320:	98 36       	cpi	r25, 0x68	; 104
    1322:	49 f4       	brne	.+18     	; 0x1336 <vfprintf+0x122>
    1324:	f2 01       	movw	r30, r4
    1326:	23 fd       	sbrc	r18, 3
    1328:	95 91       	lpm	r25, Z+
    132a:	23 ff       	sbrs	r18, 3
    132c:	91 91       	ld	r25, Z+
    132e:	2f 01       	movw	r4, r30
    1330:	99 23       	and	r25, r25
    1332:	09 f0       	breq	.+2      	; 0x1336 <vfprintf+0x122>
    1334:	b8 cf       	rjmp	.-144    	; 0x12a6 <vfprintf+0x92>
    1336:	89 2f       	mov	r24, r25
    1338:	85 54       	subi	r24, 0x45	; 69
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	18 f0       	brcs	.+6      	; 0x1344 <vfprintf+0x130>
    133e:	80 52       	subi	r24, 0x20	; 32
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	38 f4       	brcc	.+14     	; 0x1352 <vfprintf+0x13e>
    1344:	44 e0       	ldi	r20, 0x04	; 4
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	a4 0e       	add	r10, r20
    134a:	b5 1e       	adc	r11, r21
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	59 83       	std	Y+1, r21	; 0x01
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <vfprintf+0x15c>
    1352:	93 36       	cpi	r25, 0x63	; 99
    1354:	31 f0       	breq	.+12     	; 0x1362 <vfprintf+0x14e>
    1356:	93 37       	cpi	r25, 0x73	; 115
    1358:	79 f0       	breq	.+30     	; 0x1378 <vfprintf+0x164>
    135a:	93 35       	cpi	r25, 0x53	; 83
    135c:	09 f0       	breq	.+2      	; 0x1360 <vfprintf+0x14c>
    135e:	56 c0       	rjmp	.+172    	; 0x140c <vfprintf+0x1f8>
    1360:	20 c0       	rjmp	.+64     	; 0x13a2 <vfprintf+0x18e>
    1362:	f5 01       	movw	r30, r10
    1364:	80 81       	ld	r24, Z
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	42 e0       	ldi	r20, 0x02	; 2
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	a4 0e       	add	r10, r20
    136e:	b5 1e       	adc	r11, r21
    1370:	61 01       	movw	r12, r2
    1372:	01 e0       	ldi	r16, 0x01	; 1
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	12 c0       	rjmp	.+36     	; 0x139c <vfprintf+0x188>
    1378:	f5 01       	movw	r30, r10
    137a:	c0 80       	ld	r12, Z
    137c:	d1 80       	ldd	r13, Z+1	; 0x01
    137e:	f6 fc       	sbrc	r15, 6
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <vfprintf+0x174>
    1382:	6f ef       	ldi	r22, 0xFF	; 255
    1384:	7f ef       	ldi	r23, 0xFF	; 255
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x178>
    1388:	69 2d       	mov	r22, r9
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	42 e0       	ldi	r20, 0x02	; 2
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	a4 0e       	add	r10, r20
    1392:	b5 1e       	adc	r11, r21
    1394:	c6 01       	movw	r24, r12
    1396:	0e 94 1b 0b 	call	0x1636	; 0x1636 <strnlen>
    139a:	8c 01       	movw	r16, r24
    139c:	5f e7       	ldi	r21, 0x7F	; 127
    139e:	f5 22       	and	r15, r21
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <vfprintf+0x1b6>
    13a2:	f5 01       	movw	r30, r10
    13a4:	c0 80       	ld	r12, Z
    13a6:	d1 80       	ldd	r13, Z+1	; 0x01
    13a8:	f6 fc       	sbrc	r15, 6
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x19e>
    13ac:	6f ef       	ldi	r22, 0xFF	; 255
    13ae:	7f ef       	ldi	r23, 0xFF	; 255
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x1a2>
    13b2:	69 2d       	mov	r22, r9
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	42 e0       	ldi	r20, 0x02	; 2
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	a4 0e       	add	r10, r20
    13bc:	b5 1e       	adc	r11, r21
    13be:	c6 01       	movw	r24, r12
    13c0:	0e 94 10 0b 	call	0x1620	; 0x1620 <strnlen_P>
    13c4:	8c 01       	movw	r16, r24
    13c6:	50 e8       	ldi	r21, 0x80	; 128
    13c8:	f5 2a       	or	r15, r21
    13ca:	f3 fe       	sbrs	r15, 3
    13cc:	07 c0       	rjmp	.+14     	; 0x13dc <vfprintf+0x1c8>
    13ce:	1a c0       	rjmp	.+52     	; 0x1404 <vfprintf+0x1f0>
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	b3 01       	movw	r22, r6
    13d6:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    13da:	ea 94       	dec	r14
    13dc:	8e 2d       	mov	r24, r14
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	08 17       	cp	r16, r24
    13e2:	19 07       	cpc	r17, r25
    13e4:	a8 f3       	brcs	.-22     	; 0x13d0 <vfprintf+0x1bc>
    13e6:	0e c0       	rjmp	.+28     	; 0x1404 <vfprintf+0x1f0>
    13e8:	f6 01       	movw	r30, r12
    13ea:	f7 fc       	sbrc	r15, 7
    13ec:	85 91       	lpm	r24, Z+
    13ee:	f7 fe       	sbrs	r15, 7
    13f0:	81 91       	ld	r24, Z+
    13f2:	6f 01       	movw	r12, r30
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	b3 01       	movw	r22, r6
    13f8:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    13fc:	e1 10       	cpse	r14, r1
    13fe:	ea 94       	dec	r14
    1400:	01 50       	subi	r16, 0x01	; 1
    1402:	10 40       	sbci	r17, 0x00	; 0
    1404:	01 15       	cp	r16, r1
    1406:	11 05       	cpc	r17, r1
    1408:	79 f7       	brne	.-34     	; 0x13e8 <vfprintf+0x1d4>
    140a:	ea c0       	rjmp	.+468    	; 0x15e0 <vfprintf+0x3cc>
    140c:	94 36       	cpi	r25, 0x64	; 100
    140e:	11 f0       	breq	.+4      	; 0x1414 <vfprintf+0x200>
    1410:	99 36       	cpi	r25, 0x69	; 105
    1412:	69 f5       	brne	.+90     	; 0x146e <vfprintf+0x25a>
    1414:	f7 fe       	sbrs	r15, 7
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <vfprintf+0x214>
    1418:	f5 01       	movw	r30, r10
    141a:	20 81       	ld	r18, Z
    141c:	31 81       	ldd	r19, Z+1	; 0x01
    141e:	42 81       	ldd	r20, Z+2	; 0x02
    1420:	53 81       	ldd	r21, Z+3	; 0x03
    1422:	84 e0       	ldi	r24, 0x04	; 4
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0a c0       	rjmp	.+20     	; 0x143c <vfprintf+0x228>
    1428:	f5 01       	movw	r30, r10
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	9c 01       	movw	r18, r24
    1430:	44 27       	eor	r20, r20
    1432:	37 fd       	sbrc	r19, 7
    1434:	40 95       	com	r20
    1436:	54 2f       	mov	r21, r20
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a8 0e       	add	r10, r24
    143e:	b9 1e       	adc	r11, r25
    1440:	9f e6       	ldi	r25, 0x6F	; 111
    1442:	f9 22       	and	r15, r25
    1444:	57 ff       	sbrs	r21, 7
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x246>
    1448:	50 95       	com	r21
    144a:	40 95       	com	r20
    144c:	30 95       	com	r19
    144e:	21 95       	neg	r18
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	4f 4f       	sbci	r20, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	e0 e8       	ldi	r30, 0x80	; 128
    1458:	fe 2a       	or	r15, r30
    145a:	ca 01       	movw	r24, r20
    145c:	b9 01       	movw	r22, r18
    145e:	a1 01       	movw	r20, r2
    1460:	2a e0       	ldi	r18, 0x0A	; 10
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__ultoa_invert>
    1468:	d8 2e       	mov	r13, r24
    146a:	d2 18       	sub	r13, r2
    146c:	40 c0       	rjmp	.+128    	; 0x14ee <vfprintf+0x2da>
    146e:	95 37       	cpi	r25, 0x75	; 117
    1470:	29 f4       	brne	.+10     	; 0x147c <vfprintf+0x268>
    1472:	1f 2d       	mov	r17, r15
    1474:	1f 7e       	andi	r17, 0xEF	; 239
    1476:	2a e0       	ldi	r18, 0x0A	; 10
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	1d c0       	rjmp	.+58     	; 0x14b6 <vfprintf+0x2a2>
    147c:	1f 2d       	mov	r17, r15
    147e:	19 7f       	andi	r17, 0xF9	; 249
    1480:	9f 36       	cpi	r25, 0x6F	; 111
    1482:	61 f0       	breq	.+24     	; 0x149c <vfprintf+0x288>
    1484:	90 37       	cpi	r25, 0x70	; 112
    1486:	20 f4       	brcc	.+8      	; 0x1490 <vfprintf+0x27c>
    1488:	98 35       	cpi	r25, 0x58	; 88
    148a:	09 f0       	breq	.+2      	; 0x148e <vfprintf+0x27a>
    148c:	ac c0       	rjmp	.+344    	; 0x15e6 <vfprintf+0x3d2>
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <vfprintf+0x29a>
    1490:	90 37       	cpi	r25, 0x70	; 112
    1492:	39 f0       	breq	.+14     	; 0x14a2 <vfprintf+0x28e>
    1494:	98 37       	cpi	r25, 0x78	; 120
    1496:	09 f0       	breq	.+2      	; 0x149a <vfprintf+0x286>
    1498:	a6 c0       	rjmp	.+332    	; 0x15e6 <vfprintf+0x3d2>
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <vfprintf+0x290>
    149c:	28 e0       	ldi	r18, 0x08	; 8
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	0a c0       	rjmp	.+20     	; 0x14b6 <vfprintf+0x2a2>
    14a2:	10 61       	ori	r17, 0x10	; 16
    14a4:	14 fd       	sbrc	r17, 4
    14a6:	14 60       	ori	r17, 0x04	; 4
    14a8:	20 e1       	ldi	r18, 0x10	; 16
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <vfprintf+0x2a2>
    14ae:	14 fd       	sbrc	r17, 4
    14b0:	16 60       	ori	r17, 0x06	; 6
    14b2:	20 e1       	ldi	r18, 0x10	; 16
    14b4:	32 e0       	ldi	r19, 0x02	; 2
    14b6:	17 ff       	sbrs	r17, 7
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <vfprintf+0x2b6>
    14ba:	f5 01       	movw	r30, r10
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	44 e0       	ldi	r20, 0x04	; 4
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <vfprintf+0x2c6>
    14ca:	f5 01       	movw	r30, r10
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	bc 01       	movw	r22, r24
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	42 e0       	ldi	r20, 0x02	; 2
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	a4 0e       	add	r10, r20
    14dc:	b5 1e       	adc	r11, r21
    14de:	a1 01       	movw	r20, r2
    14e0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__ultoa_invert>
    14e4:	d8 2e       	mov	r13, r24
    14e6:	d2 18       	sub	r13, r2
    14e8:	8f e7       	ldi	r24, 0x7F	; 127
    14ea:	f8 2e       	mov	r15, r24
    14ec:	f1 22       	and	r15, r17
    14ee:	f6 fe       	sbrs	r15, 6
    14f0:	0b c0       	rjmp	.+22     	; 0x1508 <vfprintf+0x2f4>
    14f2:	5e ef       	ldi	r21, 0xFE	; 254
    14f4:	f5 22       	and	r15, r21
    14f6:	d9 14       	cp	r13, r9
    14f8:	38 f4       	brcc	.+14     	; 0x1508 <vfprintf+0x2f4>
    14fa:	f4 fe       	sbrs	r15, 4
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <vfprintf+0x2f8>
    14fe:	f2 fc       	sbrc	r15, 2
    1500:	05 c0       	rjmp	.+10     	; 0x150c <vfprintf+0x2f8>
    1502:	8f ee       	ldi	r24, 0xEF	; 239
    1504:	f8 22       	and	r15, r24
    1506:	02 c0       	rjmp	.+4      	; 0x150c <vfprintf+0x2f8>
    1508:	1d 2d       	mov	r17, r13
    150a:	01 c0       	rjmp	.+2      	; 0x150e <vfprintf+0x2fa>
    150c:	19 2d       	mov	r17, r9
    150e:	f4 fe       	sbrs	r15, 4
    1510:	0d c0       	rjmp	.+26     	; 0x152c <vfprintf+0x318>
    1512:	fe 01       	movw	r30, r28
    1514:	ed 0d       	add	r30, r13
    1516:	f1 1d       	adc	r31, r1
    1518:	80 81       	ld	r24, Z
    151a:	80 33       	cpi	r24, 0x30	; 48
    151c:	19 f4       	brne	.+6      	; 0x1524 <vfprintf+0x310>
    151e:	99 ee       	ldi	r25, 0xE9	; 233
    1520:	f9 22       	and	r15, r25
    1522:	08 c0       	rjmp	.+16     	; 0x1534 <vfprintf+0x320>
    1524:	1f 5f       	subi	r17, 0xFF	; 255
    1526:	f2 fe       	sbrs	r15, 2
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <vfprintf+0x320>
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <vfprintf+0x31e>
    152c:	8f 2d       	mov	r24, r15
    152e:	86 78       	andi	r24, 0x86	; 134
    1530:	09 f0       	breq	.+2      	; 0x1534 <vfprintf+0x320>
    1532:	1f 5f       	subi	r17, 0xFF	; 255
    1534:	0f 2d       	mov	r16, r15
    1536:	f3 fc       	sbrc	r15, 3
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <vfprintf+0x34e>
    153a:	f0 fe       	sbrs	r15, 0
    153c:	0f c0       	rjmp	.+30     	; 0x155c <vfprintf+0x348>
    153e:	1e 15       	cp	r17, r14
    1540:	10 f0       	brcs	.+4      	; 0x1546 <vfprintf+0x332>
    1542:	9d 2c       	mov	r9, r13
    1544:	0b c0       	rjmp	.+22     	; 0x155c <vfprintf+0x348>
    1546:	9d 2c       	mov	r9, r13
    1548:	9e 0c       	add	r9, r14
    154a:	91 1a       	sub	r9, r17
    154c:	1e 2d       	mov	r17, r14
    154e:	06 c0       	rjmp	.+12     	; 0x155c <vfprintf+0x348>
    1550:	80 e2       	ldi	r24, 0x20	; 32
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b3 01       	movw	r22, r6
    1556:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    155a:	1f 5f       	subi	r17, 0xFF	; 255
    155c:	1e 15       	cp	r17, r14
    155e:	c0 f3       	brcs	.-16     	; 0x1550 <vfprintf+0x33c>
    1560:	04 c0       	rjmp	.+8      	; 0x156a <vfprintf+0x356>
    1562:	1e 15       	cp	r17, r14
    1564:	10 f4       	brcc	.+4      	; 0x156a <vfprintf+0x356>
    1566:	e1 1a       	sub	r14, r17
    1568:	01 c0       	rjmp	.+2      	; 0x156c <vfprintf+0x358>
    156a:	ee 24       	eor	r14, r14
    156c:	04 ff       	sbrs	r16, 4
    156e:	0f c0       	rjmp	.+30     	; 0x158e <vfprintf+0x37a>
    1570:	80 e3       	ldi	r24, 0x30	; 48
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	b3 01       	movw	r22, r6
    1576:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    157a:	02 ff       	sbrs	r16, 2
    157c:	1d c0       	rjmp	.+58     	; 0x15b8 <vfprintf+0x3a4>
    157e:	01 fd       	sbrc	r16, 1
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <vfprintf+0x374>
    1582:	88 e7       	ldi	r24, 0x78	; 120
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e c0       	rjmp	.+28     	; 0x15a4 <vfprintf+0x390>
    1588:	88 e5       	ldi	r24, 0x58	; 88
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0b c0       	rjmp	.+22     	; 0x15a4 <vfprintf+0x390>
    158e:	80 2f       	mov	r24, r16
    1590:	86 78       	andi	r24, 0x86	; 134
    1592:	91 f0       	breq	.+36     	; 0x15b8 <vfprintf+0x3a4>
    1594:	01 ff       	sbrs	r16, 1
    1596:	02 c0       	rjmp	.+4      	; 0x159c <vfprintf+0x388>
    1598:	8b e2       	ldi	r24, 0x2B	; 43
    159a:	01 c0       	rjmp	.+2      	; 0x159e <vfprintf+0x38a>
    159c:	80 e2       	ldi	r24, 0x20	; 32
    159e:	f7 fc       	sbrc	r15, 7
    15a0:	8d e2       	ldi	r24, 0x2D	; 45
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	b3 01       	movw	r22, r6
    15a6:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <vfprintf+0x3a4>
    15ac:	80 e3       	ldi	r24, 0x30	; 48
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	b3 01       	movw	r22, r6
    15b2:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    15b6:	9a 94       	dec	r9
    15b8:	d9 14       	cp	r13, r9
    15ba:	c0 f3       	brcs	.-16     	; 0x15ac <vfprintf+0x398>
    15bc:	da 94       	dec	r13
    15be:	f1 01       	movw	r30, r2
    15c0:	ed 0d       	add	r30, r13
    15c2:	f1 1d       	adc	r31, r1
    15c4:	80 81       	ld	r24, Z
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	b3 01       	movw	r22, r6
    15ca:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    15ce:	dd 20       	and	r13, r13
    15d0:	a9 f7       	brne	.-22     	; 0x15bc <vfprintf+0x3a8>
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <vfprintf+0x3cc>
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	b3 01       	movw	r22, r6
    15da:	0e 94 26 0b 	call	0x164c	; 0x164c <fputc>
    15de:	ea 94       	dec	r14
    15e0:	ee 20       	and	r14, r14
    15e2:	c1 f7       	brne	.-16     	; 0x15d4 <vfprintf+0x3c0>
    15e4:	43 ce       	rjmp	.-890    	; 0x126c <vfprintf+0x58>
    15e6:	f3 01       	movw	r30, r6
    15e8:	66 81       	ldd	r22, Z+6	; 0x06
    15ea:	77 81       	ldd	r23, Z+7	; 0x07
    15ec:	cb 01       	movw	r24, r22
    15ee:	2b 96       	adiw	r28, 0x0b	; 11
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	7f 90       	pop	r7
    1614:	6f 90       	pop	r6
    1616:	5f 90       	pop	r5
    1618:	4f 90       	pop	r4
    161a:	3f 90       	pop	r3
    161c:	2f 90       	pop	r2
    161e:	08 95       	ret

00001620 <strnlen_P>:
    1620:	fc 01       	movw	r30, r24
    1622:	05 90       	lpm	r0, Z+
    1624:	61 50       	subi	r22, 0x01	; 1
    1626:	70 40       	sbci	r23, 0x00	; 0
    1628:	01 10       	cpse	r0, r1
    162a:	d8 f7       	brcc	.-10     	; 0x1622 <strnlen_P+0x2>
    162c:	80 95       	com	r24
    162e:	90 95       	com	r25
    1630:	8e 0f       	add	r24, r30
    1632:	9f 1f       	adc	r25, r31
    1634:	08 95       	ret

00001636 <strnlen>:
    1636:	fc 01       	movw	r30, r24
    1638:	61 50       	subi	r22, 0x01	; 1
    163a:	70 40       	sbci	r23, 0x00	; 0
    163c:	01 90       	ld	r0, Z+
    163e:	01 10       	cpse	r0, r1
    1640:	d8 f7       	brcc	.-10     	; 0x1638 <strnlen+0x2>
    1642:	80 95       	com	r24
    1644:	90 95       	com	r25
    1646:	8e 0f       	add	r24, r30
    1648:	9f 1f       	adc	r25, r31
    164a:	08 95       	ret

0000164c <fputc>:
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	8c 01       	movw	r16, r24
    1656:	eb 01       	movw	r28, r22
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	81 ff       	sbrs	r24, 1
    165c:	1b c0       	rjmp	.+54     	; 0x1694 <fputc+0x48>
    165e:	82 ff       	sbrs	r24, 2
    1660:	0d c0       	rjmp	.+26     	; 0x167c <fputc+0x30>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	28 17       	cp	r18, r24
    166c:	39 07       	cpc	r19, r25
    166e:	64 f4       	brge	.+24     	; 0x1688 <fputc+0x3c>
    1670:	e8 81       	ld	r30, Y
    1672:	f9 81       	ldd	r31, Y+1	; 0x01
    1674:	01 93       	st	Z+, r16
    1676:	f9 83       	std	Y+1, r31	; 0x01
    1678:	e8 83       	st	Y, r30
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <fputc+0x3c>
    167c:	e8 85       	ldd	r30, Y+8	; 0x08
    167e:	f9 85       	ldd	r31, Y+9	; 0x09
    1680:	80 2f       	mov	r24, r16
    1682:	09 95       	icall
    1684:	89 2b       	or	r24, r25
    1686:	31 f4       	brne	.+12     	; 0x1694 <fputc+0x48>
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
    168a:	9f 81       	ldd	r25, Y+7	; 0x07
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	9f 83       	std	Y+7, r25	; 0x07
    1690:	8e 83       	std	Y+6, r24	; 0x06
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <fputc+0x4c>
    1694:	0f ef       	ldi	r16, 0xFF	; 255
    1696:	1f ef       	ldi	r17, 0xFF	; 255
    1698:	c8 01       	movw	r24, r16
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <__ultoa_invert>:
    16a4:	fa 01       	movw	r30, r20
    16a6:	aa 27       	eor	r26, r26
    16a8:	28 30       	cpi	r18, 0x08	; 8
    16aa:	51 f1       	breq	.+84     	; 0x1700 <__ultoa_invert+0x5c>
    16ac:	20 31       	cpi	r18, 0x10	; 16
    16ae:	81 f1       	breq	.+96     	; 0x1710 <__ultoa_invert+0x6c>
    16b0:	e8 94       	clt
    16b2:	6f 93       	push	r22
    16b4:	6e 7f       	andi	r22, 0xFE	; 254
    16b6:	6e 5f       	subi	r22, 0xFE	; 254
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	8f 4f       	sbci	r24, 0xFF	; 255
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	af 4f       	sbci	r26, 0xFF	; 255
    16c0:	b1 e0       	ldi	r27, 0x01	; 1
    16c2:	3e d0       	rcall	.+124    	; 0x1740 <__ultoa_invert+0x9c>
    16c4:	b4 e0       	ldi	r27, 0x04	; 4
    16c6:	3c d0       	rcall	.+120    	; 0x1740 <__ultoa_invert+0x9c>
    16c8:	67 0f       	add	r22, r23
    16ca:	78 1f       	adc	r23, r24
    16cc:	89 1f       	adc	r24, r25
    16ce:	9a 1f       	adc	r25, r26
    16d0:	a1 1d       	adc	r26, r1
    16d2:	68 0f       	add	r22, r24
    16d4:	79 1f       	adc	r23, r25
    16d6:	8a 1f       	adc	r24, r26
    16d8:	91 1d       	adc	r25, r1
    16da:	a1 1d       	adc	r26, r1
    16dc:	6a 0f       	add	r22, r26
    16de:	71 1d       	adc	r23, r1
    16e0:	81 1d       	adc	r24, r1
    16e2:	91 1d       	adc	r25, r1
    16e4:	a1 1d       	adc	r26, r1
    16e6:	20 d0       	rcall	.+64     	; 0x1728 <__ultoa_invert+0x84>
    16e8:	09 f4       	brne	.+2      	; 0x16ec <__ultoa_invert+0x48>
    16ea:	68 94       	set
    16ec:	3f 91       	pop	r19
    16ee:	2a e0       	ldi	r18, 0x0A	; 10
    16f0:	26 9f       	mul	r18, r22
    16f2:	11 24       	eor	r1, r1
    16f4:	30 19       	sub	r19, r0
    16f6:	30 5d       	subi	r19, 0xD0	; 208
    16f8:	31 93       	st	Z+, r19
    16fa:	de f6       	brtc	.-74     	; 0x16b2 <__ultoa_invert+0xe>
    16fc:	cf 01       	movw	r24, r30
    16fe:	08 95       	ret
    1700:	46 2f       	mov	r20, r22
    1702:	47 70       	andi	r20, 0x07	; 7
    1704:	40 5d       	subi	r20, 0xD0	; 208
    1706:	41 93       	st	Z+, r20
    1708:	b3 e0       	ldi	r27, 0x03	; 3
    170a:	0f d0       	rcall	.+30     	; 0x172a <__ultoa_invert+0x86>
    170c:	c9 f7       	brne	.-14     	; 0x1700 <__ultoa_invert+0x5c>
    170e:	f6 cf       	rjmp	.-20     	; 0x16fc <__ultoa_invert+0x58>
    1710:	46 2f       	mov	r20, r22
    1712:	4f 70       	andi	r20, 0x0F	; 15
    1714:	40 5d       	subi	r20, 0xD0	; 208
    1716:	4a 33       	cpi	r20, 0x3A	; 58
    1718:	18 f0       	brcs	.+6      	; 0x1720 <__ultoa_invert+0x7c>
    171a:	49 5d       	subi	r20, 0xD9	; 217
    171c:	31 fd       	sbrc	r19, 1
    171e:	40 52       	subi	r20, 0x20	; 32
    1720:	41 93       	st	Z+, r20
    1722:	02 d0       	rcall	.+4      	; 0x1728 <__ultoa_invert+0x84>
    1724:	a9 f7       	brne	.-22     	; 0x1710 <__ultoa_invert+0x6c>
    1726:	ea cf       	rjmp	.-44     	; 0x16fc <__ultoa_invert+0x58>
    1728:	b4 e0       	ldi	r27, 0x04	; 4
    172a:	a6 95       	lsr	r26
    172c:	97 95       	ror	r25
    172e:	87 95       	ror	r24
    1730:	77 95       	ror	r23
    1732:	67 95       	ror	r22
    1734:	ba 95       	dec	r27
    1736:	c9 f7       	brne	.-14     	; 0x172a <__ultoa_invert+0x86>
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	61 05       	cpc	r22, r1
    173c:	71 05       	cpc	r23, r1
    173e:	08 95       	ret
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
    1744:	0a 2e       	mov	r0, r26
    1746:	06 94       	lsr	r0
    1748:	57 95       	ror	r21
    174a:	47 95       	ror	r20
    174c:	37 95       	ror	r19
    174e:	27 95       	ror	r18
    1750:	ba 95       	dec	r27
    1752:	c9 f7       	brne	.-14     	; 0x1746 <__ultoa_invert+0xa2>
    1754:	62 0f       	add	r22, r18
    1756:	73 1f       	adc	r23, r19
    1758:	84 1f       	adc	r24, r20
    175a:	95 1f       	adc	r25, r21
    175c:	a0 1d       	adc	r26, r0
    175e:	08 95       	ret

00001760 <_exit>:
    1760:	f8 94       	cli

00001762 <__stop_program>:
    1762:	ff cf       	rjmp	.-2      	; 0x1762 <__stop_program>
